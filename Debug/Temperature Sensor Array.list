
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08010c10  08010c10  00020c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011074  08011074  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08011074  08011074  00021074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801107c  0801107c  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801107c  0801107c  0002107c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011080  08011080  00021080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08011084  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022c0  20000350  080113d4  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20002610  080113d4  00032610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fbb5  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c57  00000000  00000000  0005ff35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  00065b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c60  00000000  00000000  00067a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cf5  00000000  00000000  00069690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a61b  00000000  00000000  0008a385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ace6c  00000000  00000000  000b49a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016180c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091b0  00000000  00000000  00161860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0016aa10  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0016aadc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010bf4 	.word	0x08010bf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	08010bf4 	.word	0x08010bf4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <OperateLED_A+0x34>)
 8000ec6:	f001 fc87 	bl	80027d8 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 8000eca:	e007      	b.n	8000edc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d104      	bne.n	8000edc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <OperateLED_A+0x34>)
 8000ed8:	f001 fc7e 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <OperateLED_C>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
void OperateLED_C (LEDState_t eState)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <OperateLED_C+0x1c>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <OperateLED_C+0x34>)
 8000efe:	f001 fc6b 	bl	80027d8 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	}
}
 8000f02:	e007      	b.n	8000f14 <OperateLED_C+0x2c>
	else if(eState == eLED_Off)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d104      	bne.n	8000f14 <OperateLED_C+0x2c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <OperateLED_C+0x34>)
 8000f10:	f001 fc62 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40020800 	.word	0x40020800

08000f20 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f24:	2102      	movs	r1, #2
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <ToggleLED_B+0x10>)
 8000f28:	f001 fc6f 	bl	800280a <HAL_GPIO_TogglePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020800 	.word	0x40020800

08000f34 <ToggleLED_D>:

void ToggleLED_D()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000f38:	2108      	movs	r1, #8
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <ToggleLED_D+0x10>)
 8000f3c:	f001 fc65 	bl	800280a <HAL_GPIO_TogglePin>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020800 	.word	0x40020800

08000f48 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <OperateSensorPower_A+0x38>)
 8000f60:	f001 fc3a 	bl	80027d8 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000f64:	e008      	b.n	8000f78 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d105      	bne.n	8000f78 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <OperateSensorPower_A+0x38>)
 8000f74:	f001 fc30 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020800 	.word	0x40020800

08000f84 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <OperateSensorPower_B+0x38>)
 8000f9c:	f001 fc1c 	bl	80027d8 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000fa0:	e008      	b.n	8000fb4 <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d105      	bne.n	8000fb4 <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <OperateSensorPower_B+0x38>)
 8000fb0:	f001 fc12 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff ffbf 	bl	8000f48 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffda 	bl	8000f84 <OperateSensorPower_B>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SetFirstDebugPinOn>:

void SetFirstDebugPinOn()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <SetFirstDebugPinOn+0x14>)
 8000fde:	f001 fbfb 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40020000 	.word	0x40020000

08000fec <SetFirstDebugPinOff>:
void SetFirstDebugPinOff()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <SetFirstDebugPinOff+0x14>)
 8000ff6:	f001 fbef 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020000 	.word	0x40020000

08001004 <SetSecondDebugPinOn>:

void SetSecondDebugPinOn()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2102      	movs	r1, #2
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <SetSecondDebugPinOn+0x14>)
 800100e:	f001 fbe3 	bl	80027d8 <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020000 	.word	0x40020000

0800101c <SetSecondDebugPinOff>:

void SetSecondDebugPinOff()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <SetSecondDebugPinOff+0x14>)
 8001026:	f001 fbd7 	bl	80027d8 <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020000 	.word	0x40020000

08001034 <SensorArray_Init>:
	0x0C,
	0x0E
};

void SensorArray_Init(I2C_HandleTypeDef *hI2CA, I2C_HandleTypeDef *hI2CB)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e024      	b.n	800108e <SensorArray_Init+0x5a>
	{
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	492c      	ldr	r1, [pc, #176]	; (80010f8 <SensorArray_Init+0xc4>)
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3304      	adds	r3, #4
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListA[u8Idx]);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <SensorArray_Init+0xc8>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	3330      	adds	r3, #48	; 0x30
 8001062:	b2d8      	uxtb	r0, r3
 8001064:	4924      	ldr	r1, [pc, #144]	; (80010f8 <SensorArray_Init+0xc4>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3301      	adds	r3, #1
 8001072:	4602      	mov	r2, r0
 8001074:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	491f      	ldr	r1, [pc, #124]	; (80010f8 <SensorArray_Init+0xc4>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	3301      	adds	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d9d7      	bls.n	8001044 <SensorArray_Init+0x10>
	}
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 8001094:	2300      	movs	r3, #0
 8001096:	73bb      	strb	r3, [r7, #14]
 8001098:	e024      	b.n	80010e4 <SensorArray_Init+0xb0>
	{
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 800109a:	7bba      	ldrb	r2, [r7, #14]
 800109c:	4918      	ldr	r1, [pc, #96]	; (8001100 <SensorArray_Init+0xcc>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3304      	adds	r3, #4
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListB[u8Idx]);
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <SensorArray_Init+0xd0>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	7bba      	ldrb	r2, [r7, #14]
 80010b6:	3330      	adds	r3, #48	; 0x30
 80010b8:	b2d8      	uxtb	r0, r3
 80010ba:	4911      	ldr	r1, [pc, #68]	; (8001100 <SensorArray_Init+0xcc>)
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3301      	adds	r3, #1
 80010c8:	4602      	mov	r2, r0
 80010ca:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 80010cc:	7bba      	ldrb	r2, [r7, #14]
 80010ce:	490c      	ldr	r1, [pc, #48]	; (8001100 <SensorArray_Init+0xcc>)
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73bb      	strb	r3, [r7, #14]
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d9d7      	bls.n	800109a <SensorArray_Init+0x66>
	}
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000a2c 	.word	0x20000a2c
 80010fc:	08010c64 	.word	0x08010c64
 8001100:	20000a68 	.word	0x20000a68
 8001104:	08010c6c 	.word	0x08010c6c

08001108 <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6858      	ldr	r0, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	b299      	uxth	r1, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3308      	adds	r3, #8
 800111e:	2202      	movs	r2, #2
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2205      	movs	r2, #5
 8001128:	f001 fcf2 	bl	8002b10 <HAL_I2C_Mem_Read_IT>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <MCP9808_DecodeTemperature>:


float MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	823b      	strh	r3, [r7, #16]
	uint16_t u16FixedPointReading = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	81fb      	strh	r3, [r7, #14]
	bool bNegativeSign = false;
 8001148:	2300      	movs	r3, #0
 800114a:	737b      	strb	r3, [r7, #13]
	float fResult = 0.0;
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7a1b      	ldrb	r3, [r3, #8]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
 800115c:	8a7b      	ldrh	r3, [r7, #18]
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	737b      	strb	r3, [r7, #13]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 800116c:	8a7b      	ldrh	r3, [r7, #18]
 800116e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001172:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7a5b      	ldrb	r3, [r3, #9]
 8001178:	823b      	strh	r3, [r7, #16]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 800117a:	8a7a      	ldrh	r2, [r7, #18]
 800117c:	8a3b      	ldrh	r3, [r7, #16]
 800117e:	4413      	add	r3, r2
 8001180:	81fb      	strh	r3, [r7, #14]

	if (bNegativeSign)
 8001182:	7b7b      	ldrb	r3, [r7, #13]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00d      	beq.n	80011a4 <MCP9808_DecodeTemperature+0x70>
	{
		fResult = ((float)(u16FixedPointReading) / 16) * -1;
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001192:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119a:	eef1 7a67 	vneg.f32	s15, s15
 800119e:	edc7 7a05 	vstr	s15, [r7, #20]
 80011a2:	e00a      	b.n	80011ba <MCP9808_DecodeTemperature+0x86>
	}
	else
	{
		fResult = ((float)(u16FixedPointReading) / 16);
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ae:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return fResult;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	ee07 3a90 	vmov	s15, r3
}
 80011c0:	eeb0 0a67 	vmov.f32	s0, s15
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_Init+0x40>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_Init+0x40>)
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x40>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 fdf5 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f00b fd90 	bl	800cd28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fe0d 	bl	8001e52 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 fdd5 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000118 	.word	0x20000118
 800126c:	20000004 	.word	0x20000004
 8001270:	20000000 	.word	0x20000000

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000004 	.word	0x20000004
 8001298:	20000aa4 	.word	0x20000aa4

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000aa4 	.word	0x20000aa4

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e033      	b.n	800137a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f00b fd2c 	bl	800cd78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001342:	f023 0302 	bic.w	r3, r3, #2
 8001346:	f043 0202 	orr.w	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fb74 	bl	8001a3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f023 0303 	bic.w	r3, r3, #3
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
 800136a:	e001      	b.n	8001370 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_ADC_Start_IT+0x1a>
 800139a:	2302      	movs	r3, #2
 800139c:	e0a1      	b.n	80014e2 <HAL_ADC_Start_IT+0x15e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d018      	beq.n	80013e6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c4:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <HAL_ADC_Start_IT+0x16c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <HAL_ADC_Start_IT+0x170>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9a      	lsrs	r2, r3, #18
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d169      	bne.n	80014c8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800141e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001432:	d106      	bne.n	8001442 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f023 0206 	bic.w	r2, r3, #6
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
 8001440:	e002      	b.n	8001448 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <HAL_ADC_Start_IT+0x174>)
 8001452:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800145c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d129      	bne.n	80014e0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e020      	b.n	80014e0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a16      	ldr	r2, [pc, #88]	; (80014fc <HAL_ADC_Start_IT+0x178>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d11b      	bne.n	80014e0 <HAL_ADC_Start_IT+0x15c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d114      	bne.n	80014e0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	e00b      	b.n	80014e0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f043 0210 	orr.w	r2, r3, #16
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000118 	.word	0x20000118
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	40012300 	.word	0x40012300
 80014fc:	40012000 	.word	0x40012000

08001500 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b02      	cmp	r3, #2
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	2b20      	cmp	r3, #32
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d049      	beq.n	80015d6 <HAL_ADC_IRQHandler+0xd6>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d046      	beq.n	80015d6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d12b      	bne.n	80015c6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d127      	bne.n	80015c6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800158e:	2b00      	cmp	r3, #0
 8001590:	d119      	bne.n	80015c6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0220 	bic.w	r2, r2, #32
 80015a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8e8 	bl	800179c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0212 	mvn.w	r2, #18
 80015d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b80      	cmp	r3, #128	; 0x80
 80015f8:	bf0c      	ite	eq
 80015fa:	2301      	moveq	r3, #1
 80015fc:	2300      	movne	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d057      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x1b8>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d054      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d105      	bne.n	8001626 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d139      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800164c:	2b00      	cmp	r3, #0
 800164e:	d12b      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800165a:	2b00      	cmp	r3, #0
 800165c:	d124      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001668:	2b00      	cmp	r3, #0
 800166a:	d11d      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001670:	2b00      	cmp	r3, #0
 8001672:	d119      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001682:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f043 0201 	orr.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fac3 	bl	8001c34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f06f 020c 	mvn.w	r2, #12
 80016b6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d8:	2b40      	cmp	r3, #64	; 0x40
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d017      	beq.n	800171a <HAL_ADC_IRQHandler+0x21a>
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d014      	beq.n	800171a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10d      	bne.n	800171a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f850 	bl	80017b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0201 	mvn.w	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800173a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_ADC_IRQHandler+0x27a>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d012      	beq.n	800177a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	f043 0202 	orr.w	r2, r3, #2
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0220 	mvn.w	r2, #32
 8001768:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f82a 	bl	80017c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0220 	mvn.w	r2, #32
 8001778:	601a      	str	r2, [r3, #0]
  }
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x1c>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e113      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x244>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b09      	cmp	r3, #9
 8001802:	d925      	bls.n	8001850 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68d9      	ldr	r1, [r3, #12]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	3b1e      	subs	r3, #30
 800181a:	2207      	movs	r2, #7
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68d9      	ldr	r1, [r3, #12]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	4603      	mov	r3, r0
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4403      	add	r3, r0
 8001842:	3b1e      	subs	r3, #30
 8001844:	409a      	lsls	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	e022      	b.n	8001896 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6919      	ldr	r1, [r3, #16]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	2207      	movs	r2, #7
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6919      	ldr	r1, [r3, #16]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	4603      	mov	r3, r0
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4403      	add	r3, r0
 800188c:	409a      	lsls	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b06      	cmp	r3, #6
 800189c:	d824      	bhi.n	80018e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b05      	subs	r3, #5
 80018b0:	221f      	movs	r2, #31
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	3b05      	subs	r3, #5
 80018da:	fa00 f203 	lsl.w	r2, r0, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
 80018e6:	e04c      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d824      	bhi.n	800193a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	3b23      	subs	r3, #35	; 0x23
 8001902:	221f      	movs	r2, #31
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43da      	mvns	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	400a      	ands	r2, r1
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3b23      	subs	r3, #35	; 0x23
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
 8001938:	e023      	b.n	8001982 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b41      	subs	r3, #65	; 0x41
 800194c:	221f      	movs	r2, #31
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	400a      	ands	r2, r1
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b41      	subs	r3, #65	; 0x41
 8001976:	fa00 f203 	lsl.w	r2, r0, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <HAL_ADC_ConfigChannel+0x250>)
 8001984:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <HAL_ADC_ConfigChannel+0x254>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d10f      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d8>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b12      	cmp	r3, #18
 8001996:	d10b      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_ADC_ConfigChannel+0x254>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x23a>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_ADC_ConfigChannel+0x258>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d003      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x1f4>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b11      	cmp	r3, #17
 80019ca:	d122      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_ADC_ConfigChannel+0x258>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d111      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_ADC_ConfigChannel+0x25c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_ADC_ConfigChannel+0x260>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	0c9a      	lsrs	r2, r3, #18
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	10000012 	.word	0x10000012
 8001a34:	20000118 	.word	0x20000118
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <ADC_Init+0x1f0>)
 8001a46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	021a      	lsls	r2, r3, #8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <ADC_Init+0x1f4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d022      	beq.n	8001b1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6899      	ldr	r1, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6899      	ldr	r1, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e00f      	b.n	8001b3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0202 	bic.w	r2, r2, #2
 8001b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e1b      	ldrb	r3, [r3, #24]
 8001b54:	005a      	lsls	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d01b      	beq.n	8001ba0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6859      	ldr	r1, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	3b01      	subs	r3, #1
 8001b94:	035a      	lsls	r2, r3, #13
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	e007      	b.n	8001bb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	051a      	lsls	r2, r3, #20
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6899      	ldr	r1, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bf2:	025a      	lsls	r2, r3, #9
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	029a      	lsls	r2, r3, #10
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40012300 	.word	0x40012300
 8001c30:	0f000001 	.word	0x0f000001

08001c34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fa10 	bl	800129c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e099      	b.n	8001fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea8:	e00f      	b.n	8001eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eaa:	f7ff f9f7 	bl	800129c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d908      	bls.n	8001eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e078      	b.n	8001fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e8      	bne.n	8001eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_DMA_Init+0x158>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d107      	bne.n	8001f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0307 	bic.w	r3, r3, #7
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d117      	bne.n	8001f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00e      	beq.n	8001f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fa19 	bl	80023a8 <DMA_CheckFifoParam>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e016      	b.n	8001fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f9d0 	bl	800233c <DMA_CalcBaseAndBitshift>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	223f      	movs	r2, #63	; 0x3f
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f010803f 	.word	0xf010803f

08001fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d004      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00c      	b.n	8002000 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2205      	movs	r2, #5
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002018:	4b92      	ldr	r3, [pc, #584]	; (8002264 <HAL_DMA_IRQHandler+0x258>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a92      	ldr	r2, [pc, #584]	; (8002268 <HAL_DMA_IRQHandler+0x25c>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a9b      	lsrs	r3, r3, #10
 8002024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2208      	movs	r2, #8
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01a      	beq.n	8002078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	2208      	movs	r2, #8
 8002066:	409a      	lsls	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2201      	movs	r2, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d012      	beq.n	80020ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2201      	movs	r2, #1
 800209c:	409a      	lsls	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	f043 0202 	orr.w	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2204      	movs	r2, #4
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2204      	movs	r2, #4
 80020d2:	409a      	lsls	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f043 0204 	orr.w	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2210      	movs	r2, #16
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d043      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03c      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2210      	movs	r2, #16
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d018      	beq.n	800214e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d024      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
 800213a:	e01f      	b.n	800217c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
 800214c:	e016      	b.n	800217c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0208 	bic.w	r2, r2, #8
 800216a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2220      	movs	r2, #32
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 808e 	beq.w	80022aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8086 	beq.w	80022aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2220      	movs	r2, #32
 80021a4:	409a      	lsls	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d136      	bne.n	8002224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0216 	bic.w	r2, r2, #22
 80021c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <HAL_DMA_IRQHandler+0x1da>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0208 	bic.w	r2, r2, #8
 80021f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	223f      	movs	r2, #63	; 0x3f
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002216:	2b00      	cmp	r3, #0
 8002218:	d07d      	beq.n	8002316 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
        }
        return;
 8002222:	e078      	b.n	8002316 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01c      	beq.n	800226c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d108      	bne.n	8002252 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	2b00      	cmp	r3, #0
 8002246:	d030      	beq.n	80022aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e02b      	b.n	80022aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d027      	beq.n	80022aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e022      	b.n	80022aa <HAL_DMA_IRQHandler+0x29e>
 8002264:	20000118 	.word	0x20000118
 8002268:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0210 	bic.w	r2, r2, #16
 8002288:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d032      	beq.n	8002318 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d022      	beq.n	8002304 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2205      	movs	r2, #5
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3301      	adds	r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d307      	bcc.n	80022f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f2      	bne.n	80022d6 <HAL_DMA_IRQHandler+0x2ca>
 80022f0:	e000      	b.n	80022f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e000      	b.n	8002318 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002316:	bf00      	nop
    }
  }
}
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop

08002320 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232e:	b2db      	uxtb	r3, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3b10      	subs	r3, #16
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <DMA_CalcBaseAndBitshift+0x64>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d909      	bls.n	800237e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	1d1a      	adds	r2, r3, #4
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	; 0x58
 800237c:	e007      	b.n	800238e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	aaaaaaab 	.word	0xaaaaaaab
 80023a4:	08010c74 	.word	0x08010c74

080023a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0x5a>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d856      	bhi.n	8002476 <DMA_CheckFifoParam+0xce>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <DMA_CheckFifoParam+0x28>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023f3 	.word	0x080023f3
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	08002477 	.word	0x08002477
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d046      	beq.n	800247a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e043      	b.n	800247a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fa:	d140      	bne.n	800247e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e03d      	b.n	800247e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	d121      	bne.n	8002450 <DMA_CheckFifoParam+0xa8>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d837      	bhi.n	8002482 <DMA_CheckFifoParam+0xda>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <DMA_CheckFifoParam+0x70>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	0800242f 	.word	0x0800242f
 8002420:	08002429 	.word	0x08002429
 8002424:	08002441 	.word	0x08002441
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e030      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e022      	b.n	8002486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244e:	e01c      	b.n	800248a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d903      	bls.n	800245e <DMA_CheckFifoParam+0xb6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800245c:	e018      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      break;
 8002462:	e015      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e00b      	b.n	800248e <DMA_CheckFifoParam+0xe6>
      break;
 8002476:	bf00      	nop
 8002478:	e00a      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e008      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e006      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e004      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;   
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
    }
  } 
  
  return status; 
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e159      	b.n	8002770 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8148 	bne.w	800276a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a2 	beq.w	800276a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <HAL_GPIO_Init+0x2e8>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_GPIO_Init+0x2ec>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a49      	ldr	r2, [pc, #292]	; (8002790 <HAL_GPIO_Init+0x2f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x202>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_GPIO_Init+0x2f4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x1fe>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a47      	ldr	r2, [pc, #284]	; (8002798 <HAL_GPIO_Init+0x2f8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x1fa>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a46      	ldr	r2, [pc, #280]	; (800279c <HAL_GPIO_Init+0x2fc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x1f6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <HAL_GPIO_Init+0x300>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x1f2>
 800268e:	2304      	movs	r3, #4
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002692:	2307      	movs	r3, #7
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x204>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_GPIO_Init+0x2ec>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_GPIO_Init+0x304>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e6:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <HAL_GPIO_Init+0x304>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026ec:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_GPIO_Init+0x304>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_GPIO_Init+0x304>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f aea2 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800281c:	887a      	ldrh	r2, [r7, #2]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	041a      	lsls	r2, r3, #16
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43d9      	mvns	r1, r3
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	400b      	ands	r3, r1
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f806 	bl	8002870 <HAL_GPIO_EXTI_Callback>
  }
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e12b      	b.n	8002af2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f00a faae 	bl	800ce10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	; 0x24
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028ec:	f003 fb2c 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 80028f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a81      	ldr	r2, [pc, #516]	; (8002afc <HAL_I2C_Init+0x274>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d807      	bhi.n	800290c <HAL_I2C_Init+0x84>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <HAL_I2C_Init+0x278>)
 8002900:	4293      	cmp	r3, r2
 8002902:	bf94      	ite	ls
 8002904:	2301      	movls	r3, #1
 8002906:	2300      	movhi	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e006      	b.n	800291a <HAL_I2C_Init+0x92>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a7d      	ldr	r2, [pc, #500]	; (8002b04 <HAL_I2C_Init+0x27c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	bf94      	ite	ls
 8002914:	2301      	movls	r3, #1
 8002916:	2300      	movhi	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0e7      	b.n	8002af2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a78      	ldr	r2, [pc, #480]	; (8002b08 <HAL_I2C_Init+0x280>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0c9b      	lsrs	r3, r3, #18
 800292c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <HAL_I2C_Init+0x274>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d802      	bhi.n	800295c <HAL_I2C_Init+0xd4>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3301      	adds	r3, #1
 800295a:	e009      	b.n	8002970 <HAL_I2C_Init+0xe8>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <HAL_I2C_Init+0x284>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	3301      	adds	r3, #1
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	430b      	orrs	r3, r1
 8002976:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002982:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	495c      	ldr	r1, [pc, #368]	; (8002afc <HAL_I2C_Init+0x274>)
 800298c:	428b      	cmp	r3, r1
 800298e:	d819      	bhi.n	80029c4 <HAL_I2C_Init+0x13c>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e59      	subs	r1, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fbb1 f3f3 	udiv	r3, r1, r3
 800299e:	1c59      	adds	r1, r3, #1
 80029a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029a4:	400b      	ands	r3, r1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_I2C_Init+0x138>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e59      	subs	r1, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029be:	e051      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e04f      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d111      	bne.n	80029f0 <HAL_I2C_Init+0x168>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e012      	b.n	8002a16 <HAL_I2C_Init+0x18e>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	0099      	lsls	r1, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Init+0x196>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e022      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10e      	bne.n	8002a44 <HAL_I2C_Init+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e58      	subs	r0, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	440b      	add	r3, r1
 8002a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a42:	e00f      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	6809      	ldr	r1, [r1, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6911      	ldr	r1, [r2, #16]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	000186a0 	.word	0x000186a0
 8002b00:	001e847f 	.word	0x001e847f
 8002b04:	003d08ff 	.word	0x003d08ff
 8002b08:	431bde83 	.word	0x431bde83
 8002b0c:	10624dd3 	.word	0x10624dd3

08002b10 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	817b      	strh	r3, [r7, #10]
 8002b22:	460b      	mov	r3, r1
 8002b24:	813b      	strh	r3, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	f040 809a 	bne.w	8002c70 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_I2C_Mem_Read_IT+0x170>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	4a50      	ldr	r2, [pc, #320]	; (8002c84 <HAL_I2C_Mem_Read_IT+0x174>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	0a1a      	lsrs	r2, r3, #8
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e070      	b.n	8002c72 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d0db      	beq.n	8002b56 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2C_Mem_Read_IT+0x9c>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e062      	b.n	8002c72 <HAL_I2C_Mem_Read_IT+0x162>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d007      	beq.n	8002bd2 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2222      	movs	r2, #34	; 0x22
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2240      	movs	r2, #64	; 0x40
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a3a      	ldr	r2, [r7, #32]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_I2C_Mem_Read_IT+0x178>)
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002c14:	897a      	ldrh	r2, [r7, #10]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002c1a:	893a      	ldrh	r2, [r7, #8]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002c6a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e000      	b.n	8002c72 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000118 	.word	0x20000118
 8002c84:	14f8b589 	.word	0x14f8b589
 8002c88:	ffff0000 	.word	0xffff0000

08002c8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d003      	beq.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x38>
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	f040 80c1 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <HAL_I2C_EV_IRQHandler+0x6e>
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ce4:	d003      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x62>
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_EV_IRQHandler+0x66>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x68>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	f000 8132 	beq.w	8002f5e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_I2C_EV_IRQHandler+0x92>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	0a5b      	lsrs	r3, r3, #9
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f001 fb51 	bl	80043b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fcc8 	bl	80036ac <I2C_Master_SB>
 8002d1c:	e092      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_I2C_EV_IRQHandler+0xb2>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	0a5b      	lsrs	r3, r3, #9
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fd3e 	bl	80037b8 <I2C_Master_ADD10>
 8002d3c:	e082      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_I2C_EV_IRQHandler+0xd2>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	0a5b      	lsrs	r3, r3, #9
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fd58 	bl	800380c <I2C_Master_ADDR>
 8002d5c:	e072      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03b      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d78:	f000 80f3 	beq.w	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	09db      	lsrs	r3, r3, #7
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00f      	beq.n	8002da8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f942 	bl	800302a <I2C_MasterTransmit_TXE>
 8002da6:	e04d      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80d6 	beq.w	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	0a5b      	lsrs	r3, r3, #9
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80cf 	beq.w	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	2b21      	cmp	r3, #33	; 0x21
 8002dc8:	d103      	bne.n	8002dd2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f9c9 	bl	8003162 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dd0:	e0c7      	b.n	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	f040 80c4 	bne.w	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa37 	bl	800324e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de0:	e0bf      	b.n	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df0:	f000 80b7 	beq.w	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00f      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x194>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	0a9b      	lsrs	r3, r3, #10
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x194>
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d103      	bne.n	8002e20 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 faac 	bl	8003376 <I2C_MasterReceive_RXNE>
 8002e1e:	e011      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 809a 	beq.w	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	0a5b      	lsrs	r3, r3, #9
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8093 	beq.w	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fb4b 	bl	80034d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e42:	e08e      	b.n	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e44:	e08d      	b.n	8002f62 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e007      	b.n	8002e68 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d012      	beq.n	8002e9a <HAL_I2C_EV_IRQHandler+0x20e>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	0a5b      	lsrs	r3, r3, #9
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e90:	69b9      	ldr	r1, [r7, #24]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 ff09 	bl	8003caa <I2C_Slave_ADDR>
 8002e98:	e066      	b.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_I2C_EV_IRQHandler+0x22e>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	0a5b      	lsrs	r3, r3, #9
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 ff44 	bl	8003d40 <I2C_Slave_STOPF>
 8002eb8:	e056      	b.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eba:	7bbb      	ldrb	r3, [r7, #14]
 8002ebc:	2b21      	cmp	r3, #33	; 0x21
 8002ebe:	d002      	beq.n	8002ec6 <HAL_I2C_EV_IRQHandler+0x23a>
 8002ec0:	7bbb      	ldrb	r3, [r7, #14]
 8002ec2:	2b29      	cmp	r3, #41	; 0x29
 8002ec4:	d125      	bne.n	8002f12 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	09db      	lsrs	r3, r3, #7
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00f      	beq.n	8002ef2 <HAL_I2C_EV_IRQHandler+0x266>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	0a9b      	lsrs	r3, r3, #10
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_I2C_EV_IRQHandler+0x266>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d103      	bne.n	8002ef2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fe1f 	bl	8003b2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ef0:	e039      	b.n	8002f66 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d033      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x2da>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	0a5b      	lsrs	r3, r3, #9
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02d      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fe4c 	bl	8003ba8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f10:	e029      	b.n	8002f66 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00f      	beq.n	8002f3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	0a9b      	lsrs	r3, r3, #10
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fe57 	bl	8003bea <I2C_SlaveReceive_RXNE>
 8002f3c:	e014      	b.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00e      	beq.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	0a5b      	lsrs	r3, r3, #9
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fe85 	bl	8003c66 <I2C_SlaveReceive_BTF>
 8002f5c:	e004      	b.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f66:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	70fb      	strb	r3, [r7, #3]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003040:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d150      	bne.n	80030f2 <I2C_MasterTransmit_TXE+0xc8>
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b21      	cmp	r3, #33	; 0x21
 8003054:	d14d      	bne.n	80030f2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d01d      	beq.n	8003098 <I2C_MasterTransmit_TXE+0x6e>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b20      	cmp	r3, #32
 8003060:	d01a      	beq.n	8003098 <I2C_MasterTransmit_TXE+0x6e>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003068:	d016      	beq.n	8003098 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003078:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2211      	movs	r2, #17
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff6c 	bl	8002f6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003096:	e060      	b.n	800315a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030a6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d107      	bne.n	80030e2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ff87 	bl	8002fee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e0:	e03b      	b.n	800315a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ff3f 	bl	8002f6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030f0:	e033      	b.n	800315a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b21      	cmp	r3, #33	; 0x21
 80030f6:	d005      	beq.n	8003104 <I2C_MasterTransmit_TXE+0xda>
 80030f8:	7bbb      	ldrb	r3, [r7, #14]
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d12d      	bne.n	800315a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b22      	cmp	r3, #34	; 0x22
 8003102:	d12a      	bne.n	800315a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800311e:	e01c      	b.n	800315a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d103      	bne.n	8003134 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f88e 	bl	800324e <I2C_MemoryTransmit_TXE_BTF>
}
 8003132:	e012      	b.n	800315a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003158:	e7ff      	b.n	800315a <I2C_MasterTransmit_TXE+0x130>
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b21      	cmp	r3, #33	; 0x21
 800317a:	d164      	bne.n	8003246 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80031aa:	e04c      	b.n	8003246 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d01d      	beq.n	80031ee <I2C_MasterTransmit_BTF+0x8c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d01a      	beq.n	80031ee <I2C_MasterTransmit_BTF+0x8c>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031be:	d016      	beq.n	80031ee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ce:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2211      	movs	r2, #17
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff fec1 	bl	8002f6e <HAL_I2C_MasterTxCpltCallback>
}
 80031ec:	e02b      	b.n	8003246 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031fc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d107      	bne.n	8003238 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fedc 	bl	8002fee <HAL_I2C_MemTxCpltCallback>
}
 8003236:	e006      	b.n	8003246 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fe94 	bl	8002f6e <HAL_I2C_MasterTxCpltCallback>
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11d      	bne.n	80032a2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10b      	bne.n	8003286 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003272:	b2da      	uxtb	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327e:	1c9a      	adds	r2, r3, #2
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003284:	e073      	b.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	b29b      	uxth	r3, r3
 800328c:	121b      	asrs	r3, r3, #8
 800328e:	b2da      	uxtb	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032a0:	e065      	b.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d10b      	bne.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032c0:	e055      	b.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d151      	bne.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b22      	cmp	r3, #34	; 0x22
 80032ce:	d10d      	bne.n	80032ec <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032de:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032ea:	e040      	b.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d015      	beq.n	8003322 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b21      	cmp	r3, #33	; 0x21
 80032fa:	d112      	bne.n	8003322 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003320:	e025      	b.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d120      	bne.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b21      	cmp	r3, #33	; 0x21
 8003330:	d11d      	bne.n	800336e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003340:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003350:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fe40 	bl	8002fee <HAL_I2C_MemTxCpltCallback>
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b22      	cmp	r3, #34	; 0x22
 8003388:	f040 80a2 	bne.w	80034d0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d921      	bls.n	80033de <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	f040 8082 	bne.w	80034d0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033da:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80033dc:	e078      	b.n	80034d0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d074      	beq.n	80034d0 <I2C_MasterReceive_RXNE+0x15a>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d002      	beq.n	80033f2 <I2C_MasterReceive_RXNE+0x7c>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d16e      	bne.n	80034d0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 ffae 	bl	8004354 <I2C_WaitOnSTOPRequestThroughIT>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d142      	bne.n	8003484 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800341c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d10a      	bne.n	800346e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f009 ff4a 	bl	800d300 <HAL_I2C_MemRxCpltCallback>
}
 800346c:	e030      	b.n	80034d0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2212      	movs	r2, #18
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fd80 	bl	8002f82 <HAL_I2C_MasterRxCpltCallback>
}
 8003482:	e025      	b.n	80034d0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003492:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fd99 	bl	8003002 <HAL_I2C_ErrorCallback>
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d11b      	bne.n	8003528 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003526:	e0bd      	b.n	80036a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b03      	cmp	r3, #3
 8003530:	d129      	bne.n	8003586 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d00a      	beq.n	800355e <I2C_MasterReceive_BTF+0x86>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d007      	beq.n	800355e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003584:	e08e      	b.n	80036a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d176      	bne.n	800367e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d002      	beq.n	800359c <I2C_MasterReceive_BTF+0xc4>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b10      	cmp	r3, #16
 800359a:	d108      	bne.n	80035ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e019      	b.n	80035e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d002      	beq.n	80035ba <I2C_MasterReceive_BTF+0xe2>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d108      	bne.n	80035cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e00a      	b.n	80035e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d007      	beq.n	80035e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800363c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d10a      	bne.n	8003668 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f009 fe4d 	bl	800d300 <HAL_I2C_MemRxCpltCallback>
}
 8003666:	e01d      	b.n	80036a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2212      	movs	r2, #18
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fc83 	bl	8002f82 <HAL_I2C_MasterRxCpltCallback>
}
 800367c:	e012      	b.n	80036a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d117      	bne.n	80036f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80036da:	e067      	b.n	80037ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]
}
 80036ee:	e05d      	b.n	80037ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f8:	d133      	bne.n	8003762 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b21      	cmp	r3, #33	; 0x21
 8003704:	d109      	bne.n	800371a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003716:	611a      	str	r2, [r3, #16]
 8003718:	e008      	b.n	800372c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	b2da      	uxtb	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <I2C_Master_SB+0x92>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	2b00      	cmp	r3, #0
 8003744:	d032      	beq.n	80037ac <I2C_Master_SB+0x100>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02d      	beq.n	80037ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375e:	605a      	str	r2, [r3, #4]
}
 8003760:	e024      	b.n	80037ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10e      	bne.n	8003788 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	b29b      	uxth	r3, r3
 8003770:	11db      	asrs	r3, r3, #7
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f003 0306 	and.w	r3, r3, #6
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f063 030f 	orn	r3, r3, #15
 800377e:	b2da      	uxtb	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
}
 8003786:	e011      	b.n	80037ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10d      	bne.n	80037ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	b29b      	uxth	r3, r3
 8003796:	11db      	asrs	r3, r3, #7
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0306 	and.w	r3, r3, #6
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f063 030e 	orn	r3, r3, #14
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <I2C_Master_ADD10+0x26>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <I2C_Master_ADD10+0x48>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fe:	605a      	str	r2, [r3, #4]
  }
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800380c:	b480      	push	{r7}
 800380e:	b091      	sub	sp, #68	; 0x44
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b22      	cmp	r3, #34	; 0x22
 8003834:	f040 8169 	bne.w	8003b0a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10f      	bne.n	8003860 <I2C_Master_ADDR+0x54>
 8003840:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d10b      	bne.n	8003860 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003848:	2300      	movs	r3, #0
 800384a:	633b      	str	r3, [r7, #48]	; 0x30
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	e160      	b.n	8003b22 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d11d      	bne.n	80038a4 <I2C_Master_ADDR+0x98>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003870:	d118      	bne.n	80038a4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003896:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50
 80038a2:	e13e      	b.n	8003b22 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d113      	bne.n	80038d6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e115      	b.n	8003b02 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f040 808a 	bne.w	80039f6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038e8:	d137      	bne.n	800395a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003908:	d113      	bne.n	8003932 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003918:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	e0e7      	b.n	8003b02 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	623b      	str	r3, [r7, #32]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	623b      	str	r3, [r7, #32]
 8003946:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e0d3      	b.n	8003b02 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2b08      	cmp	r3, #8
 800395e:	d02e      	beq.n	80039be <I2C_Master_ADDR+0x1b2>
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	2b20      	cmp	r3, #32
 8003964:	d02b      	beq.n	80039be <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003968:	2b12      	cmp	r3, #18
 800396a:	d102      	bne.n	8003972 <I2C_Master_ADDR+0x166>
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	2b01      	cmp	r3, #1
 8003970:	d125      	bne.n	80039be <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	2b04      	cmp	r3, #4
 8003976:	d00e      	beq.n	8003996 <I2C_Master_ADDR+0x18a>
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	2b02      	cmp	r3, #2
 800397c:	d00b      	beq.n	8003996 <I2C_Master_ADDR+0x18a>
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	2b10      	cmp	r3, #16
 8003982:	d008      	beq.n	8003996 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e007      	b.n	80039a6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	e0a1      	b.n	8003b02 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e085      	b.n	8003b02 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d14d      	bne.n	8003a9c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d016      	beq.n	8003a34 <I2C_Master_ADDR+0x228>
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d013      	beq.n	8003a34 <I2C_Master_ADDR+0x228>
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d010      	beq.n	8003a34 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e007      	b.n	8003a44 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a42:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d117      	bne.n	8003a84 <I2C_Master_ADDR+0x278>
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a5a:	d00b      	beq.n	8003a74 <I2C_Master_ADDR+0x268>
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d008      	beq.n	8003a74 <I2C_Master_ADDR+0x268>
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d005      	beq.n	8003a74 <I2C_Master_ADDR+0x268>
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d002      	beq.n	8003a74 <I2C_Master_ADDR+0x268>
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d107      	bne.n	8003a84 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	e032      	b.n	8003b02 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aaa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aba:	d117      	bne.n	8003aec <I2C_Master_ADDR+0x2e0>
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ac2:	d00b      	beq.n	8003adc <I2C_Master_ADDR+0x2d0>
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d008      	beq.n	8003adc <I2C_Master_ADDR+0x2d0>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d005      	beq.n	8003adc <I2C_Master_ADDR+0x2d0>
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d002      	beq.n	8003adc <I2C_Master_ADDR+0x2d0>
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d107      	bne.n	8003aec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b08:	e00b      	b.n	8003b22 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	e7ff      	b.n	8003b22 <I2C_Master_ADDR+0x316>
 8003b22:	bf00      	nop
 8003b24:	3744      	adds	r7, #68	; 0x44
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02b      	beq.n	8003ba0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d114      	bne.n	8003ba0 <I2C_SlaveTransmit_TXE+0x72>
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b29      	cmp	r3, #41	; 0x29
 8003b7a:	d111      	bne.n	8003ba0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2221      	movs	r2, #33	; 0x21
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2228      	movs	r2, #40	; 0x28
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff f9fb 	bl	8002f96 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d011      	beq.n	8003bde <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02c      	beq.n	8003c5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d114      	bne.n	8003c5e <I2C_SlaveReceive_RXNE+0x74>
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b2a      	cmp	r3, #42	; 0x2a
 8003c38:	d111      	bne.n	8003c5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2222      	movs	r2, #34	; 0x22
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2228      	movs	r2, #40	; 0x28
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff f9a6 	bl	8002faa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d012      	beq.n	8003c9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc4:	2b28      	cmp	r3, #40	; 0x28
 8003cc6:	d127      	bne.n	8003d18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	09db      	lsrs	r3, r3, #7
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d103      	bne.n	8003cfc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	81bb      	strh	r3, [r7, #12]
 8003cfa:	e002      	b.n	8003d02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d0a:	89ba      	ldrh	r2, [r7, #12]
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff f954 	bl	8002fbe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d16:	e00e      	b.n	8003d36 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9c:	d172      	bne.n	8003e84 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b22      	cmp	r3, #34	; 0x22
 8003da2:	d002      	beq.n	8003daa <I2C_Slave_STOPF+0x6a>
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b2a      	cmp	r3, #42	; 0x2a
 8003da8:	d135      	bne.n	8003e16 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fa9c 	bl	8002320 <HAL_DMA_GetState>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d049      	beq.n	8003e82 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	4a69      	ldr	r2, [pc, #420]	; (8003f98 <I2C_Slave_STOPF+0x258>)
 8003df4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f8e4 	bl	8001fc8 <HAL_DMA_Abort_IT>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d03d      	beq.n	8003e82 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e10:	4610      	mov	r0, r2
 8003e12:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e14:	e035      	b.n	8003e82 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0204 	orr.w	r2, r3, #4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fa66 	bl	8002320 <HAL_DMA_GetState>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d014      	beq.n	8003e84 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <I2C_Slave_STOPF+0x258>)
 8003e60:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe f8ae 	bl	8001fc8 <HAL_DMA_Abort_IT>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
 8003e80:	e000      	b.n	8003e84 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e82:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d03e      	beq.n	8003f0c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d112      	bne.n	8003ec2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d112      	bne.n	8003ef6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 0204 	orr.w	r2, r3, #4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f843 	bl	8003fa0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f1a:	e039      	b.n	8003f90 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f20:	d109      	bne.n	8003f36 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2228      	movs	r2, #40	; 0x28
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff f83a 	bl	8002faa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b28      	cmp	r3, #40	; 0x28
 8003f40:	d111      	bne.n	8003f66 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <I2C_Slave_STOPF+0x25c>)
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff f83b 	bl	8002fda <HAL_I2C_ListenCpltCallback>
}
 8003f64:	e014      	b.n	8003f90 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	2b22      	cmp	r3, #34	; 0x22
 8003f6c:	d002      	beq.n	8003f74 <I2C_Slave_STOPF+0x234>
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	2b22      	cmp	r3, #34	; 0x22
 8003f72:	d10d      	bne.n	8003f90 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff f80d 	bl	8002faa <HAL_I2C_SlaveRxCpltCallback>
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	08004205 	.word	0x08004205
 8003f9c:	ffff0000 	.word	0xffff0000

08003fa0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fb8:	7bbb      	ldrb	r3, [r7, #14]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d002      	beq.n	8003fc4 <I2C_ITError+0x24>
 8003fbe:	7bbb      	ldrb	r3, [r7, #14]
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d10a      	bne.n	8003fda <I2C_ITError+0x3a>
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b22      	cmp	r3, #34	; 0x22
 8003fc8:	d107      	bne.n	8003fda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe0:	2b28      	cmp	r3, #40	; 0x28
 8003fe2:	d107      	bne.n	8003ff4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2228      	movs	r2, #40	; 0x28
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ff2:	e015      	b.n	8004020 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d00a      	beq.n	800401a <I2C_ITError+0x7a>
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b60      	cmp	r3, #96	; 0x60
 8004008:	d007      	beq.n	800401a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d162      	bne.n	80040f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d020      	beq.n	8004090 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	4a6a      	ldr	r2, [pc, #424]	; (80041fc <I2C_ITError+0x25c>)
 8004054:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	4618      	mov	r0, r3
 800405c:	f7fd ffb4 	bl	8001fc8 <HAL_DMA_Abort_IT>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8089 	beq.w	800417a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800408a:	4610      	mov	r0, r2
 800408c:	4798      	blx	r3
 800408e:	e074      	b.n	800417a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	4a59      	ldr	r2, [pc, #356]	; (80041fc <I2C_ITError+0x25c>)
 8004096:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd ff93 	bl	8001fc8 <HAL_DMA_Abort_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d068      	beq.n	800417a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d10b      	bne.n	80040ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f0:	4610      	mov	r0, r2
 80040f2:	4798      	blx	r3
 80040f4:	e041      	b.n	800417a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b60      	cmp	r3, #96	; 0x60
 8004100:	d125      	bne.n	800414e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d10b      	bne.n	8004136 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fe ff65 	bl	8003016 <HAL_I2C_AbortCpltCallback>
 800414c:	e015      	b.n	800417a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d10b      	bne.n	8004174 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fe ff44 	bl	8003002 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10e      	bne.n	80041a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d113      	bne.n	80041f4 <I2C_ITError+0x254>
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b28      	cmp	r3, #40	; 0x28
 80041d0:	d110      	bne.n	80041f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <I2C_ITError+0x260>)
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fef3 	bl	8002fda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	08004205 	.word	0x08004205
 8004200:	ffff0000 	.word	0xffff0000

08004204 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800421e:	4b4b      	ldr	r3, [pc, #300]	; (800434c <I2C_DMAAbort+0x148>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	4a4a      	ldr	r2, [pc, #296]	; (8004350 <I2C_DMAAbort+0x14c>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0a1a      	lsrs	r2, r3, #8
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00da      	lsls	r2, r3, #3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800424a:	e00a      	b.n	8004262 <I2C_DMAAbort+0x5e>
    }
    count--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3b01      	subs	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004260:	d0ea      	beq.n	8004238 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	2200      	movs	r2, #0
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	2200      	movs	r2, #0
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a4:	2200      	movs	r2, #0
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	2200      	movs	r2, #0
 80042b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b60      	cmp	r3, #96	; 0x60
 80042d2:	d10e      	bne.n	80042f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7fe fe93 	bl	8003016 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042f0:	e027      	b.n	8004342 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042f8:	2b28      	cmp	r3, #40	; 0x28
 80042fa:	d117      	bne.n	800432c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800431a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2228      	movs	r2, #40	; 0x28
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800432a:	e007      	b.n	800433c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800433c:	6978      	ldr	r0, [r7, #20]
 800433e:	f7fe fe60 	bl	8003002 <HAL_I2C_ErrorCallback>
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000118 	.word	0x20000118
 8004350:	14f8b589 	.word	0x14f8b589

08004354 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	08db      	lsrs	r3, r3, #3
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	0a1a      	lsrs	r2, r3, #8
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3b01      	subs	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e008      	b.n	80043a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a0:	d0e9      	beq.n	8004376 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000118 	.word	0x20000118
 80043b4:	14f8b589 	.word	0x14f8b589

080043b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043c8:	d103      	bne.n	80043d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80043d0:	e007      	b.n	80043e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80043da:	d102      	bne.n	80043e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2208      	movs	r2, #8
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f0:	b08f      	sub	sp, #60	; 0x3c
 80043f2:	af0a      	add	r7, sp, #40	; 0x28
 80043f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e10f      	b.n	8004620 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f009 f896 	bl	800d54c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2203      	movs	r2, #3
 8004424:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f004 fb9f 	bl	8008b82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	687e      	ldr	r6, [r7, #4]
 800444c:	466d      	mov	r5, sp
 800444e:	f106 0410 	add.w	r4, r6, #16
 8004452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800445a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800445e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004462:	1d33      	adds	r3, r6, #4
 8004464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004466:	6838      	ldr	r0, [r7, #0]
 8004468:	f004 fa76 	bl	8008958 <USB_CoreInit>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0d0      	b.n	8004620 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f004 fb8d 	bl	8008ba4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e04a      	b.n	8004526 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	333d      	adds	r3, #61	; 0x3d
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044a4:	7bfa      	ldrb	r2, [r7, #15]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	333c      	adds	r3, #60	; 0x3c
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044b8:	7bfa      	ldrb	r2, [r7, #15]
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	b298      	uxth	r0, r3
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	3342      	adds	r3, #66	; 0x42
 80044cc:	4602      	mov	r2, r0
 80044ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	333f      	adds	r3, #63	; 0x3f
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044e4:	7bfa      	ldrb	r2, [r7, #15]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	3344      	adds	r3, #68	; 0x44
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044f8:	7bfa      	ldrb	r2, [r7, #15]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	3348      	adds	r3, #72	; 0x48
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	3350      	adds	r3, #80	; 0x50
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	3301      	adds	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3af      	bcc.n	8004490 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]
 8004534:	e044      	b.n	80045c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800454c:	7bfa      	ldrb	r2, [r7, #15]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004562:	7bfa      	ldrb	r2, [r7, #15]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	3301      	adds	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d3b5      	bcc.n	8004536 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	687e      	ldr	r6, [r7, #4]
 80045d2:	466d      	mov	r5, sp
 80045d4:	f106 0410 	add.w	r4, r6, #16
 80045d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80045e8:	1d33      	adds	r3, r6, #4
 80045ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ec:	6838      	ldr	r0, [r7, #0]
 80045ee:	f004 fb25 	bl	8008c3c <USB_DevInit>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e00d      	b.n	8004620 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f005 fba1 	bl	8009d60 <USB_DevDisconnect>

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004628 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_PCD_Start+0x1c>
 8004640:	2302      	movs	r3, #2
 8004642:	e020      	b.n	8004686 <HAL_PCD_Start+0x5e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	2b01      	cmp	r3, #1
 8004652:	d109      	bne.n	8004668 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004658:	2b01      	cmp	r3, #1
 800465a:	d005      	beq.n	8004668 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f004 fa77 	bl	8008b60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f005 fb51 	bl	8009d1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800468e:	b590      	push	{r4, r7, lr}
 8004690:	b08d      	sub	sp, #52	; 0x34
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f005 fc0f 	bl	8009ec8 <USB_GetMode>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 839d 	bne.w	8004dec <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f005 fb73 	bl	8009da2 <USB_ReadInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8393 	beq.w	8004dea <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f005 fb6a 	bl	8009da2 <USB_ReadInterrupts>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d107      	bne.n	80046e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f002 0202 	and.w	r2, r2, #2
 80046e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f005 fb58 	bl	8009da2 <USB_ReadInterrupts>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d161      	bne.n	80047c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0210 	bic.w	r2, r2, #16
 800470a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f003 020f 	and.w	r2, r3, #15
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	0c5b      	lsrs	r3, r3, #17
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	2b02      	cmp	r3, #2
 8004736:	d124      	bne.n	8004782 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d035      	beq.n	80047b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800474e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	6a38      	ldr	r0, [r7, #32]
 8004758:	f005 f98f 	bl	8009a7a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004768:	441a      	add	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800477a:	441a      	add	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	619a      	str	r2, [r3, #24]
 8004780:	e016      	b.n	80047b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	0c5b      	lsrs	r3, r3, #17
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	2b06      	cmp	r3, #6
 800478c:	d110      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004794:	2208      	movs	r2, #8
 8004796:	4619      	mov	r1, r3
 8004798:	6a38      	ldr	r0, [r7, #32]
 800479a:	f005 f96e 	bl	8009a7a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047aa:	441a      	add	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0210 	orr.w	r2, r2, #16
 80047be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f005 faec 	bl	8009da2 <USB_ReadInterrupts>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047d4:	d16e      	bne.n	80048b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f005 faf2 	bl	8009dc8 <USB_ReadDevAllOutEpInterrupt>
 80047e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80047e6:	e062      	b.n	80048ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d057      	beq.n	80048a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f005 fb17 	bl	8009e30 <USB_ReadDevOutEPInterrupt>
 8004802:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	461a      	mov	r2, r3
 800481c:	2301      	movs	r3, #1
 800481e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fdb0 	bl	8005388 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	2308      	movs	r3, #8
 8004842:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 feaa 	bl	80055a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	2310      	movs	r3, #16
 8004866:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	2320      	movs	r3, #32
 8004882:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	461a      	mov	r2, r3
 800489c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d199      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f005 fa72 	bl	8009da2 <USB_ReadInterrupts>
 80048be:	4603      	mov	r3, r0
 80048c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048c8:	f040 80c0 	bne.w	8004a4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f005 fa93 	bl	8009dfc <USB_ReadDevAllInEpInterrupt>
 80048d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80048dc:	e0b2      	b.n	8004a44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a7 	beq.w	8004a38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f005 fab9 	bl	8009e6c <USB_ReadDevInEPInterrupt>
 80048fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d057      	beq.n	80049b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2201      	movs	r2, #1
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43db      	mvns	r3, r3
 8004920:	69f9      	ldr	r1, [r7, #28]
 8004922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004926:	4013      	ands	r3, r2
 8004928:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	461a      	mov	r2, r3
 8004938:	2301      	movs	r3, #1
 800493a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d132      	bne.n	80049aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	3348      	adds	r3, #72	; 0x48
 8004954:	6819      	ldr	r1, [r3, #0]
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4403      	add	r3, r0
 8004964:	3344      	adds	r3, #68	; 0x44
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4419      	add	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	4613      	mov	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4403      	add	r3, r0
 8004978:	3348      	adds	r3, #72	; 0x48
 800497a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d113      	bne.n	80049aa <HAL_PCD_IRQHandler+0x31c>
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	3350      	adds	r3, #80	; 0x50
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d108      	bne.n	80049aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049a2:	461a      	mov	r2, r3
 80049a4:	2101      	movs	r1, #1
 80049a6:	f005 fac1 	bl	8009f2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f008 fe4c 	bl	800d64e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	461a      	mov	r2, r3
 80049ce:	2308      	movs	r3, #8
 80049d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	461a      	mov	r2, r3
 80049ea:	2310      	movs	r3, #16
 80049ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	461a      	mov	r2, r3
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	2302      	movs	r3, #2
 8004a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fc1b 	bl	800526e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f47f af49 	bne.w	80048de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f005 f9a6 	bl	8009da2 <USB_ReadInterrupts>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a60:	d122      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d108      	bne.n	8004a92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fe26 	bl	80056dc <HAL_PCDEx_LPM_Callback>
 8004a90:	e002      	b.n	8004a98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f008 fe48 	bl	800d728 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f005 f978 	bl	8009da2 <USB_ReadInterrupts>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abc:	d112      	bne.n	8004ae4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f008 fe04 	bl	800d6dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ae2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f005 f95a 	bl	8009da2 <USB_ReadInterrupts>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	f040 80c7 	bne.w	8004c8a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2110      	movs	r1, #16
 8004b16:	4618      	mov	r0, r3
 8004b18:	f004 f9f4 	bl	8008f04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b20:	e056      	b.n	8004bd0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b54:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	461a      	mov	r2, r3
 8004b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ba8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	3301      	adds	r3, #1
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d3a3      	bcc.n	8004b22 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004bec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c06:	f043 030b 	orr.w	r3, r3, #11
 8004c0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1c:	f043 030b 	orr.w	r3, r3, #11
 8004c20:	6453      	str	r3, [r2, #68]	; 0x44
 8004c22:	e015      	b.n	8004c50 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004c3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4a:	f043 030b 	orr.w	r3, r3, #11
 8004c4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c74:	461a      	mov	r2, r3
 8004c76:	f005 f959 	bl	8009f2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f005 f887 	bl	8009da2 <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	d124      	bne.n	8004cea <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f005 f91d 	bl	8009ee4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f004 f985 	bl	8008fbe <USB_GetDevSpeed>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681c      	ldr	r4, [r3, #0]
 8004cc0:	f001 f936 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f003 fea4 	bl	8008a1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f008 fce2 	bl	800d69e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f005 f857 	bl	8009da2 <USB_ReadInterrupts>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d10a      	bne.n	8004d14 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f008 fcbf 	bl	800d682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f002 0208 	and.w	r2, r2, #8
 8004d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f005 f842 	bl	8009da2 <USB_ReadInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d28:	d10f      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f008 fd17 	bl	800d768 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f005 f827 	bl	8009da2 <USB_ReadInterrupts>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d5e:	d10f      	bne.n	8004d80 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f008 fcea 	bl	800d744 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f005 f80c 	bl	8009da2 <USB_ReadInterrupts>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d10a      	bne.n	8004dac <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f008 fcf8 	bl	800d78c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f004 fff6 	bl	8009da2 <USB_ReadInterrupts>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d115      	bne.n	8004dec <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f008 fce8 	bl	800d7a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6859      	ldr	r1, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	e000      	b.n	8004dec <HAL_PCD_IRQHandler+0x75e>
      return;
 8004dea:	bf00      	nop
    }
  }
}
 8004dec:	3734      	adds	r7, #52	; 0x34
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd90      	pop	{r4, r7, pc}

08004df2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_PCD_SetAddress+0x1a>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e013      	b.n	8004e34 <HAL_PCD_SetAddress+0x42>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 ff54 	bl	8009cd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	4608      	mov	r0, r1
 8004e46:	4611      	mov	r1, r2
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	70fb      	strb	r3, [r7, #3]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	803b      	strh	r3, [r7, #0]
 8004e52:	4613      	mov	r3, r2
 8004e54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da0f      	bge.n	8004e82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3338      	adds	r3, #56	; 0x38
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	705a      	strb	r2, [r3, #1]
 8004e80:	e00f      	b.n	8004ea2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004eae:	883a      	ldrh	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	78ba      	ldrb	r2, [r7, #2]
 8004eb8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d004      	beq.n	8004ecc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ecc:	78bb      	ldrb	r3, [r7, #2]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d102      	bne.n	8004ed8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_PCD_EP_Open+0xaa>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e00e      	b.n	8004f04 <HAL_PCD_EP_Open+0xc8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f004 f887 	bl	8009008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004f02:	7afb      	ldrb	r3, [r7, #11]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	da0f      	bge.n	8004f40 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3338      	adds	r3, #56	; 0x38
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	705a      	strb	r2, [r3, #1]
 8004f3e:	e00f      	b.n	8004f60 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f003 020f 	and.w	r2, r3, #15
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	3304      	adds	r3, #4
 8004f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_PCD_EP_Close+0x6e>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e00e      	b.n	8004f98 <HAL_PCD_EP_Close+0x8c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 f8c5 	bl	8009118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	460b      	mov	r3, r1
 8004fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fb0:	7afb      	ldrb	r3, [r7, #11]
 8004fb2:	f003 020f 	and.w	r2, r3, #15
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fe2:	7afb      	ldrb	r3, [r7, #11]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d102      	bne.n	8004ffc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	6979      	ldr	r1, [r7, #20]
 8005014:	f004 fba0 	bl	8009758 <USB_EP0StartXfer>
 8005018:	e008      	b.n	800502c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	f004 f952 	bl	80092d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	f003 020f 	and.w	r2, r3, #15
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005058:	681b      	ldr	r3, [r3, #0]
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	460b      	mov	r3, r1
 8005074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005076:	7afb      	ldrb	r3, [r7, #11]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	3338      	adds	r3, #56	; 0x38
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	3304      	adds	r3, #4
 800508c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2200      	movs	r2, #0
 800509e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2201      	movs	r2, #1
 80050a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050a6:	7afb      	ldrb	r3, [r7, #11]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d102      	bne.n	80050c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050c0:	7afb      	ldrb	r3, [r7, #11]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	6979      	ldr	r1, [r7, #20]
 80050d8:	f004 fb3e 	bl	8009758 <USB_EP0StartXfer>
 80050dc:	e008      	b.n	80050f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	6979      	ldr	r1, [r7, #20]
 80050ec:	f004 f8f0 	bl	80092d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	460b      	mov	r3, r1
 8005104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	f003 020f 	and.w	r2, r3, #15
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d901      	bls.n	8005118 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e050      	b.n	80051ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800511c:	2b00      	cmp	r3, #0
 800511e:	da0f      	bge.n	8005140 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	f003 020f 	and.w	r2, r3, #15
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	3338      	adds	r3, #56	; 0x38
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	3304      	adds	r3, #4
 8005136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	705a      	strb	r2, [r3, #1]
 800513e:	e00d      	b.n	800515c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	3304      	adds	r3, #4
 8005154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_PCD_EP_SetStall+0x82>
 8005178:	2302      	movs	r3, #2
 800517a:	e01e      	b.n	80051ba <HAL_PCD_EP_SetStall+0xc0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	4618      	mov	r0, r3
 800518c:	f004 fccd 	bl	8009b2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	b2d9      	uxtb	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051aa:	461a      	mov	r2, r3
 80051ac:	f004 febe 	bl	8009f2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d901      	bls.n	80051e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e042      	b.n	8005266 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	da0f      	bge.n	8005208 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	f003 020f 	and.w	r2, r3, #15
 80051ee:	4613      	mov	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	3338      	adds	r3, #56	; 0x38
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	3304      	adds	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	705a      	strb	r2, [r3, #1]
 8005206:	e00f      	b.n	8005228 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	f003 020f 	and.w	r2, r3, #15
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	3304      	adds	r3, #4
 8005220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_PCD_EP_ClrStall+0x86>
 8005244:	2302      	movs	r3, #2
 8005246:	e00e      	b.n	8005266 <HAL_PCD_EP_ClrStall+0xa4>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	4618      	mov	r0, r3
 8005258:	f004 fcd5 	bl	8009c06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b08a      	sub	sp, #40	; 0x28
 8005272:	af02      	add	r7, sp, #8
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3338      	adds	r3, #56	; 0x38
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	3304      	adds	r3, #4
 8005294:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d901      	bls.n	80052a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e06c      	b.n	8005380 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3303      	adds	r3, #3
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052ca:	e02b      	b.n	8005324 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d902      	bls.n	80052e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3303      	adds	r3, #3
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68d9      	ldr	r1, [r3, #12]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005300:	b2db      	uxtb	r3, r3
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	4603      	mov	r3, r0
 8005306:	6978      	ldr	r0, [r7, #20]
 8005308:	f004 fb79 	bl	80099fe <USB_WritePacket>

    ep->xfer_buff  += len;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	441a      	add	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	441a      	add	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	b29b      	uxth	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	429a      	cmp	r2, r3
 8005338:	d809      	bhi.n	800534e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005342:	429a      	cmp	r2, r3
 8005344:	d203      	bcs.n	800534e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1be      	bne.n	80052cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	429a      	cmp	r2, r3
 8005358:	d811      	bhi.n	800537e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	2201      	movs	r2, #1
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	43db      	mvns	r3, r3
 8005374:	6939      	ldr	r1, [r7, #16]
 8005376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800537a:	4013      	ands	r3, r2
 800537c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	333c      	adds	r3, #60	; 0x3c
 80053a0:	3304      	adds	r3, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	f040 80a0 	bne.w	8005500 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d015      	beq.n	80053f6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a72      	ldr	r2, [pc, #456]	; (8005598 <PCD_EP_OutXfrComplete_int+0x210>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f240 80dd 	bls.w	800558e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80d7 	beq.w	800558e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	461a      	mov	r2, r3
 80053ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f2:	6093      	str	r3, [r2, #8]
 80053f4:	e0cb      	b.n	800558e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	2320      	movs	r3, #32
 8005410:	6093      	str	r3, [r2, #8]
 8005412:	e0bc      	b.n	800558e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 80b7 	bne.w	800558e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a5d      	ldr	r2, [pc, #372]	; (8005598 <PCD_EP_OutXfrComplete_int+0x210>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d90f      	bls.n	8005448 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	461a      	mov	r2, r3
 8005440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005444:	6093      	str	r3, [r2, #8]
 8005446:	e0a2      	b.n	800558e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800545a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	0159      	lsls	r1, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	440b      	add	r3, r1
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800546e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4403      	add	r3, r0
 800547e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005482:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005496:	6819      	ldr	r1, [r3, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4403      	add	r3, r0
 80054a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4419      	add	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4403      	add	r3, r0
 80054bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d114      	bne.n	80054f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d108      	bne.n	80054f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054ea:	461a      	mov	r2, r3
 80054ec:	2101      	movs	r1, #1
 80054ee:	f004 fd1d 	bl	8009f2c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f008 f88d 	bl	800d618 <HAL_PCD_DataOutStageCallback>
 80054fe:	e046      	b.n	800558e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a26      	ldr	r2, [pc, #152]	; (800559c <PCD_EP_OutXfrComplete_int+0x214>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d124      	bne.n	8005552 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	461a      	mov	r2, r3
 8005520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005524:	6093      	str	r3, [r2, #8]
 8005526:	e032      	b.n	800558e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	461a      	mov	r2, r3
 8005540:	2320      	movs	r3, #32
 8005542:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f008 f864 	bl	800d618 <HAL_PCD_DataOutStageCallback>
 8005550:	e01d      	b.n	800558e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d114      	bne.n	8005582 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d108      	bne.n	8005582 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800557a:	461a      	mov	r2, r3
 800557c:	2100      	movs	r1, #0
 800557e:	f004 fcd5 	bl	8009f2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f008 f845 	bl	800d618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	4f54300a 	.word	0x4f54300a
 800559c:	4f54310a 	.word	0x4f54310a

080055a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	333c      	adds	r3, #60	; 0x3c
 80055b8:	3304      	adds	r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <PCD_EP_OutSetupPacket_int+0x88>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d90e      	bls.n	80055f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	461a      	mov	r2, r3
 80055ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f007 fffd 	bl	800d5f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <PCD_EP_OutSetupPacket_int+0x88>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d90c      	bls.n	800561c <PCD_EP_OutSetupPacket_int+0x7c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d108      	bne.n	800561c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005614:	461a      	mov	r2, r3
 8005616:	2101      	movs	r1, #1
 8005618:	f004 fc88 	bl	8009f2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	4f54300a 	.word	0x4f54300a

0800562c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
 8005638:	4613      	mov	r3, r2
 800563a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d107      	bne.n	800565a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800564a:	883b      	ldrh	r3, [r7, #0]
 800564c:	0419      	lsls	r1, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	430a      	orrs	r2, r1
 8005656:	629a      	str	r2, [r3, #40]	; 0x28
 8005658:	e028      	b.n	80056ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4413      	add	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005668:	2300      	movs	r3, #0
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	e00d      	b.n	800568a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	3340      	adds	r3, #64	; 0x40
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	4413      	add	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	3301      	adds	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	3b01      	subs	r3, #1
 8005690:	429a      	cmp	r2, r3
 8005692:	d3ec      	bcc.n	800566e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005694:	883b      	ldrh	r3, [r7, #0]
 8005696:	0418      	lsls	r0, r3, #16
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	3b01      	subs	r3, #1
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	4302      	orrs	r2, r0
 80056a4:	3340      	adds	r3, #64	; 0x40
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	887a      	ldrh	r2, [r7, #2]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e262      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d075      	beq.n	80057fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005712:	4ba3      	ldr	r3, [pc, #652]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b04      	cmp	r3, #4
 800571c:	d00c      	beq.n	8005738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800571e:	4ba0      	ldr	r3, [pc, #640]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005726:	2b08      	cmp	r3, #8
 8005728:	d112      	bne.n	8005750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800572a:	4b9d      	ldr	r3, [pc, #628]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005736:	d10b      	bne.n	8005750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	4b99      	ldr	r3, [pc, #612]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05b      	beq.n	80057fc <HAL_RCC_OscConfig+0x108>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d157      	bne.n	80057fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e23d      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005758:	d106      	bne.n	8005768 <HAL_RCC_OscConfig+0x74>
 800575a:	4b91      	ldr	r3, [pc, #580]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a90      	ldr	r2, [pc, #576]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e01d      	b.n	80057a4 <HAL_RCC_OscConfig+0xb0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005770:	d10c      	bne.n	800578c <HAL_RCC_OscConfig+0x98>
 8005772:	4b8b      	ldr	r3, [pc, #556]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a8a      	ldr	r2, [pc, #552]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4b88      	ldr	r3, [pc, #544]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a87      	ldr	r2, [pc, #540]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e00b      	b.n	80057a4 <HAL_RCC_OscConfig+0xb0>
 800578c:	4b84      	ldr	r3, [pc, #528]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a83      	ldr	r2, [pc, #524]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b81      	ldr	r3, [pc, #516]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a80      	ldr	r2, [pc, #512]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 800579e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d013      	beq.n	80057d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fb fd76 	bl	800129c <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b4:	f7fb fd72 	bl	800129c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e202      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	4b76      	ldr	r3, [pc, #472]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0xc0>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fb fd62 	bl	800129c <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057dc:	f7fb fd5e 	bl	800129c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1ee      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ee:	4b6c      	ldr	r3, [pc, #432]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0xe8>
 80057fa:	e000      	b.n	80057fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d063      	beq.n	80058d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800580a:	4b65      	ldr	r3, [pc, #404]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005816:	4b62      	ldr	r3, [pc, #392]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800581e:	2b08      	cmp	r3, #8
 8005820:	d11c      	bne.n	800585c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005822:	4b5f      	ldr	r3, [pc, #380]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d116      	bne.n	800585c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800582e:	4b5c      	ldr	r3, [pc, #368]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_RCC_OscConfig+0x152>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d001      	beq.n	8005846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e1c2      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005846:	4b56      	ldr	r3, [pc, #344]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4952      	ldr	r1, [pc, #328]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585a:	e03a      	b.n	80058d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005864:	4b4f      	ldr	r3, [pc, #316]	; (80059a4 <HAL_RCC_OscConfig+0x2b0>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fb fd17 	bl	800129c <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005872:	f7fb fd13 	bl	800129c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e1a3      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005884:	4b46      	ldr	r3, [pc, #280]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005890:	4b43      	ldr	r3, [pc, #268]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4940      	ldr	r1, [pc, #256]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
 80058a4:	e015      	b.n	80058d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058a6:	4b3f      	ldr	r3, [pc, #252]	; (80059a4 <HAL_RCC_OscConfig+0x2b0>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fb fcf6 	bl	800129c <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058b4:	f7fb fcf2 	bl	800129c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e182      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c6:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d030      	beq.n	8005940 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e6:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <HAL_RCC_OscConfig+0x2b4>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ec:	f7fb fcd6 	bl	800129c <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058f4:	f7fb fcd2 	bl	800129c <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e162      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x200>
 8005912:	e015      	b.n	8005940 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005914:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <HAL_RCC_OscConfig+0x2b4>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591a:	f7fb fcbf 	bl	800129c <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005922:	f7fb fcbb 	bl	800129c <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e14b      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 809e 	beq.w	8005a8a <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005952:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	4a0e      	ldr	r2, [pc, #56]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596c:	6413      	str	r3, [r2, #64]	; 0x40
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597a:	2301      	movs	r3, #1
 800597c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCC_OscConfig+0x2b8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d121      	bne.n	80059ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598a:	4b08      	ldr	r3, [pc, #32]	; (80059ac <HAL_RCC_OscConfig+0x2b8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a07      	ldr	r2, [pc, #28]	; (80059ac <HAL_RCC_OscConfig+0x2b8>)
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005996:	f7fb fc81 	bl	800129c <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599c:	e011      	b.n	80059c2 <HAL_RCC_OscConfig+0x2ce>
 800599e:	bf00      	nop
 80059a0:	40023800 	.word	0x40023800
 80059a4:	42470000 	.word	0x42470000
 80059a8:	42470e80 	.word	0x42470e80
 80059ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b0:	f7fb fc74 	bl	800129c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e104      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c2:	4b84      	ldr	r3, [pc, #528]	; (8005bd4 <HAL_RCC_OscConfig+0x4e0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d106      	bne.n	80059e4 <HAL_RCC_OscConfig+0x2f0>
 80059d6:	4b80      	ldr	r3, [pc, #512]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	4a7f      	ldr	r2, [pc, #508]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70
 80059e2:	e01c      	b.n	8005a1e <HAL_RCC_OscConfig+0x32a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b05      	cmp	r3, #5
 80059ea:	d10c      	bne.n	8005a06 <HAL_RCC_OscConfig+0x312>
 80059ec:	4b7a      	ldr	r3, [pc, #488]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4a79      	ldr	r2, [pc, #484]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 80059f2:	f043 0304 	orr.w	r3, r3, #4
 80059f6:	6713      	str	r3, [r2, #112]	; 0x70
 80059f8:	4b77      	ldr	r3, [pc, #476]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fc:	4a76      	ldr	r2, [pc, #472]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6713      	str	r3, [r2, #112]	; 0x70
 8005a04:	e00b      	b.n	8005a1e <HAL_RCC_OscConfig+0x32a>
 8005a06:	4b74      	ldr	r3, [pc, #464]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	4a73      	ldr	r2, [pc, #460]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	6713      	str	r3, [r2, #112]	; 0x70
 8005a12:	4b71      	ldr	r3, [pc, #452]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	4a70      	ldr	r2, [pc, #448]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a18:	f023 0304 	bic.w	r3, r3, #4
 8005a1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d014      	beq.n	8005a50 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a26:	f7fb fc39 	bl	800129c <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a2c:	e009      	b.n	8005a42 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a2e:	f7fb fc35 	bl	800129c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e0c4      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a42:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0ef      	beq.n	8005a2e <HAL_RCC_OscConfig+0x33a>
 8005a4e:	e013      	b.n	8005a78 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a50:	f7fb fc24 	bl	800129c <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a56:	e009      	b.n	8005a6c <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a58:	f7fb fc20 	bl	800129c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e0af      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6c:	4b5a      	ldr	r3, [pc, #360]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ef      	bne.n	8005a58 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d105      	bne.n	8005a8a <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7e:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	4a55      	ldr	r2, [pc, #340]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 809b 	beq.w	8005bca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 030c 	and.w	r3, r3, #12
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d05c      	beq.n	8005b5a <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d141      	bne.n	8005b2c <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa8:	4b4c      	ldr	r3, [pc, #304]	; (8005bdc <HAL_RCC_OscConfig+0x4e8>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aae:	f7fb fbf5 	bl	800129c <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab6:	f7fb fbf1 	bl	800129c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e081      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac8:	4b43      	ldr	r3, [pc, #268]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	019b      	lsls	r3, r3, #6
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	3b01      	subs	r3, #1
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	4937      	ldr	r1, [pc, #220]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <HAL_RCC_OscConfig+0x4e8>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fb fbca 	bl	800129c <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b0c:	f7fb fbc6 	bl	800129c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e056      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCC_OscConfig+0x418>
 8005b2a:	e04e      	b.n	8005bca <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2c:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <HAL_RCC_OscConfig+0x4e8>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fb fbb3 	bl	800129c <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3a:	f7fb fbaf 	bl	800129c <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e03f      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4c:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f0      	bne.n	8005b3a <HAL_RCC_OscConfig+0x446>
 8005b58:	e037      	b.n	8005bca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e032      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b66:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <HAL_RCC_OscConfig+0x4e4>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d028      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d121      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d11a      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b96:	4013      	ands	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d111      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d107      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d001      	beq.n	8005bca <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40007000 	.word	0x40007000
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	42470060 	.word	0x42470060

08005be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0cc      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf4:	4b68      	ldr	r3, [pc, #416]	; (8005d98 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d90c      	bls.n	8005c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c02:	4b65      	ldr	r3, [pc, #404]	; (8005d98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0a:	4b63      	ldr	r3, [pc, #396]	; (8005d98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d001      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0b8      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c34:	4b59      	ldr	r3, [pc, #356]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4a58      	ldr	r2, [pc, #352]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c4c:	4b53      	ldr	r3, [pc, #332]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	4a52      	ldr	r2, [pc, #328]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c58:	4b50      	ldr	r3, [pc, #320]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	494d      	ldr	r1, [pc, #308]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d044      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d107      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7e:	4b47      	ldr	r3, [pc, #284]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d119      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e07f      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d003      	beq.n	8005c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9e:	4b3f      	ldr	r3, [pc, #252]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e06f      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cae:	4b3b      	ldr	r3, [pc, #236]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e067      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cbe:	4b37      	ldr	r3, [pc, #220]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f023 0203 	bic.w	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4934      	ldr	r1, [pc, #208]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd0:	f7fb fae4 	bl	800129c <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd8:	f7fb fae0 	bl	800129c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e04f      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cee:	4b2b      	ldr	r3, [pc, #172]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 020c 	and.w	r2, r3, #12
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1eb      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d00:	4b25      	ldr	r3, [pc, #148]	; (8005d98 <HAL_RCC_ClockConfig+0x1b8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d20c      	bcs.n	8005d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b22      	ldr	r3, [pc, #136]	; (8005d98 <HAL_RCC_ClockConfig+0x1b8>)
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d16:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <HAL_RCC_ClockConfig+0x1b8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d001      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e032      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d34:	4b19      	ldr	r3, [pc, #100]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4916      	ldr	r1, [pc, #88]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	490e      	ldr	r1, [pc, #56]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d66:	f000 f82d 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	490a      	ldr	r1, [pc, #40]	; (8005da0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d78:	5ccb      	ldrb	r3, [r1, r3]
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fb fa44 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40023c00 	.word	0x40023c00
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	08010c7c 	.word	0x08010c7c
 8005da4:	20000118 	.word	0x20000118
 8005da8:	20000000 	.word	0x20000000

08005dac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <HAL_RCC_EnableCSS+0x14>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	4247004c 	.word	0x4247004c

08005dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc4:	b5b0      	push	{r4, r5, r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6079      	str	r1, [r7, #4]
 8005dce:	2100      	movs	r1, #0
 8005dd0:	60f9      	str	r1, [r7, #12]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dda:	4952      	ldr	r1, [pc, #328]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ddc:	6889      	ldr	r1, [r1, #8]
 8005dde:	f001 010c 	and.w	r1, r1, #12
 8005de2:	2908      	cmp	r1, #8
 8005de4:	d00d      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x3e>
 8005de6:	2908      	cmp	r1, #8
 8005de8:	f200 8094 	bhi.w	8005f14 <HAL_RCC_GetSysClockFreq+0x150>
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_RCC_GetSysClockFreq+0x32>
 8005df0:	2904      	cmp	r1, #4
 8005df2:	d003      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x38>
 8005df4:	e08e      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005df6:	4b4c      	ldr	r3, [pc, #304]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8005df8:	60bb      	str	r3, [r7, #8]
       break;
 8005dfa:	e08e      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8005dfe:	60bb      	str	r3, [r7, #8]
      break;
 8005e00:	e08b      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e02:	4948      	ldr	r1, [pc, #288]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e04:	6849      	ldr	r1, [r1, #4]
 8005e06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005e0a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e0c:	4945      	ldr	r1, [pc, #276]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e0e:	6849      	ldr	r1, [r1, #4]
 8005e10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005e14:	2900      	cmp	r1, #0
 8005e16:	d024      	beq.n	8005e62 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e18:	4942      	ldr	r1, [pc, #264]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e1a:	6849      	ldr	r1, [r1, #4]
 8005e1c:	0989      	lsrs	r1, r1, #6
 8005e1e:	4608      	mov	r0, r1
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005e28:	f04f 0500 	mov.w	r5, #0
 8005e2c:	ea00 0204 	and.w	r2, r0, r4
 8005e30:	ea01 0305 	and.w	r3, r1, r5
 8005e34:	493d      	ldr	r1, [pc, #244]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8005e36:	fb01 f003 	mul.w	r0, r1, r3
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	fb01 f102 	mul.w	r1, r1, r2
 8005e40:	1844      	adds	r4, r0, r1
 8005e42:	493a      	ldr	r1, [pc, #232]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8005e44:	fba2 0101 	umull	r0, r1, r2, r1
 8005e48:	1863      	adds	r3, r4, r1
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	f7fa feb0 	bl	8000bb8 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e04a      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e62:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e72:	f04f 0100 	mov.w	r1, #0
 8005e76:	ea02 0400 	and.w	r4, r2, r0
 8005e7a:	ea03 0501 	and.w	r5, r3, r1
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	014b      	lsls	r3, r1, #5
 8005e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e90:	0142      	lsls	r2, r0, #5
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	1b00      	subs	r0, r0, r4
 8005e98:	eb61 0105 	sbc.w	r1, r1, r5
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	018b      	lsls	r3, r1, #6
 8005ea6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005eaa:	0182      	lsls	r2, r0, #6
 8005eac:	1a12      	subs	r2, r2, r0
 8005eae:	eb63 0301 	sbc.w	r3, r3, r1
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	00d9      	lsls	r1, r3, #3
 8005ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec0:	00d0      	lsls	r0, r2, #3
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	1912      	adds	r2, r2, r4
 8005ec8:	eb45 0303 	adc.w	r3, r5, r3
 8005ecc:	f04f 0000 	mov.w	r0, #0
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	0299      	lsls	r1, r3, #10
 8005ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005eda:	0290      	lsls	r0, r2, #10
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	f7fa fe64 	bl	8000bb8 <__aeabi_uldivmod>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	60bb      	str	r3, [r7, #8]
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8005f16:	60bb      	str	r3, [r7, #8]
      break;
 8005f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bdb0      	pop	{r4, r5, r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	00f42400 	.word	0x00f42400
 8005f2c:	016e3600 	.word	0x016e3600

08005f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f34:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f36:	681b      	ldr	r3, [r3, #0]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20000118 	.word	0x20000118

08005f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f4c:	f7ff fff0 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	0a9b      	lsrs	r3, r3, #10
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4903      	ldr	r1, [pc, #12]	; (8005f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	08010c8c 	.word	0x08010c8c

08005f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f74:	f7ff ffdc 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	0b5b      	lsrs	r3, r3, #13
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	4903      	ldr	r1, [pc, #12]	; (8005f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f86:	5ccb      	ldrb	r3, [r1, r3]
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40023800 	.word	0x40023800
 8005f94:	08010c8c 	.word	0x08010c8c

08005f98 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa4:	2b80      	cmp	r3, #128	; 0x80
 8005fa6:	d104      	bne.n	8005fb2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005fa8:	f000 f80a 	bl	8005fc0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <HAL_RCC_NMI_IRQHandler+0x24>)
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	701a      	strb	r2, [r3, #0]
  }
}
 8005fb2:	bf00      	nop
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	4002380e 	.word	0x4002380e

08005fc0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d105      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d038      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ff8:	4b68      	ldr	r3, [pc, #416]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ffe:	f7fb f94d 	bl	800129c <HAL_GetTick>
 8006002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006004:	e008      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006006:	f7fb f949 	bl	800129c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0bc      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006018:	4b61      	ldr	r3, [pc, #388]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f0      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	019b      	lsls	r3, r3, #6
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	071b      	lsls	r3, r3, #28
 8006036:	495a      	ldr	r1, [pc, #360]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800603e:	4b57      	ldr	r3, [pc, #348]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006040:	2201      	movs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006044:	f7fb f92a 	bl	800129c <HAL_GetTick>
 8006048:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800604a:	e008      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800604c:	f7fb f926 	bl	800129c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e099      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800605e:	4b50      	ldr	r3, [pc, #320]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8082 	beq.w	800617c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	4b48      	ldr	r3, [pc, #288]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	4a47      	ldr	r2, [pc, #284]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006086:	6413      	str	r3, [r2, #64]	; 0x40
 8006088:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006094:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a42      	ldr	r2, [pc, #264]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800609a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060a0:	f7fb f8fc 	bl	800129c <HAL_GetTick>
 80060a4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060a8:	f7fb f8f8 	bl	800129c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e06b      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060ba:	4b3a      	ldr	r3, [pc, #232]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d02e      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d027      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060e4:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060f4:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060fa:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d113      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800610c:	f7fb f8c6 	bl	800129c <HAL_GetTick>
 8006110:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006112:	e009      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006114:	f7fb f8c2 	bl	800129c <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006122:	d901      	bls.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e034      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0ef      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006140:	d10d      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006156:	4912      	ldr	r1, [pc, #72]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	608b      	str	r3, [r1, #8]
 800615c:	e005      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800615e:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006164:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006168:	6093      	str	r3, [r2, #8]
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006176:	490a      	ldr	r1, [pc, #40]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006178:	4313      	orrs	r3, r2
 800617a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7d1a      	ldrb	r2, [r3, #20]
 800618c:	4b07      	ldr	r3, [pc, #28]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800618e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	42470068 	.word	0x42470068
 80061a0:	40023800 	.word	0x40023800
 80061a4:	40007000 	.word	0x40007000
 80061a8:	42470e40 	.word	0x42470e40
 80061ac:	424711e0 	.word	0x424711e0

080061b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e083      	b.n	80062ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7f5b      	ldrb	r3, [r3, #29]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f006 feea 	bl	800cfac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	22ca      	movs	r2, #202	; 0xca
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2253      	movs	r2, #83	; 0x53
 80061ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f897 	bl	8006322 <RTC_EnterInitMode>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	22ff      	movs	r2, #255	; 0xff
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2204      	movs	r2, #4
 8006206:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e05e      	b.n	80062ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6899      	ldr	r1, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6919      	ldr	r1, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	041a      	lsls	r2, r3, #16
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800626a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10e      	bne.n	8006298 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f829 	bl	80062d2 <HAL_RTC_WaitForSynchro>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	22ff      	movs	r2, #255	; 0xff
 800628c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2204      	movs	r2, #4
 8006292:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e018      	b.n	80062ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062ee:	f7fa ffd5 	bl	800129c <HAL_GetTick>
 80062f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062f4:	e009      	b.n	800630a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062f6:	f7fa ffd1 	bl	800129c <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006304:	d901      	bls.n	800630a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e007      	b.n	800631a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ee      	beq.n	80062f6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d119      	bne.n	8006370 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f04f 32ff 	mov.w	r2, #4294967295
 8006344:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006346:	f7fa ffa9 	bl	800129c <HAL_GetTick>
 800634a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800634c:	e009      	b.n	8006362 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800634e:	f7fa ffa5 	bl	800129c <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800635c:	d901      	bls.n	8006362 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e007      	b.n	8006372 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0ee      	beq.n	800634e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e022      	b.n	80063d2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f006 fe30 	bl	800d004 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2203      	movs	r2, #3
 80063a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f815 	bl	80063dc <HAL_SD_InitCard>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e00a      	b.n	80063d2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063dc:	b5b0      	push	{r4, r5, r7, lr}
 80063de:	b08e      	sub	sp, #56	; 0x38
 80063e0:	af04      	add	r7, sp, #16
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80063f8:	2376      	movs	r3, #118	; 0x76
 80063fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681d      	ldr	r5, [r3, #0]
 8006400:	466c      	mov	r4, sp
 8006402:	f107 0314 	add.w	r3, r7, #20
 8006406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800640a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800640e:	f107 0308 	add.w	r3, r7, #8
 8006412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006414:	4628      	mov	r0, r5
 8006416:	f001 fe07 	bl	8008028 <SDIO_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e04c      	b.n	80064c6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800642c:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_SD_InitCard+0xf4>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f001 fe2e 	bl	8008098 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800643c:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <HAL_SD_InitCard+0xf4>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fb52 	bl	8006aec <SD_PowerON>
 8006448:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e02e      	b.n	80064c6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa73 	bl	8006954 <SD_InitCard>
 800646e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e01b      	b.n	80064c6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fe91 	bl	80081be <SDMMC_CmdBlockLength>
 800649c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00f      	beq.n	80064c4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <HAL_SD_InitCard+0xf8>)
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3728      	adds	r7, #40	; 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bdb0      	pop	{r4, r5, r7, pc}
 80064ce:	bf00      	nop
 80064d0:	422580a0 	.word	0x422580a0
 80064d4:	004005ff 	.word	0x004005ff

080064d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e6:	0f9b      	lsrs	r3, r3, #30
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f2:	0e9b      	lsrs	r3, r3, #26
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006504:	0e1b      	lsrs	r3, r3, #24
 8006506:	b2db      	uxtb	r3, r3
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	b2da      	uxtb	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006516:	0c1b      	lsrs	r3, r3, #16
 8006518:	b2da      	uxtb	r2, r3
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006538:	0d1b      	lsrs	r3, r3, #20
 800653a:	b29a      	uxth	r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	b2da      	uxtb	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006556:	0bdb      	lsrs	r3, r3, #15
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	b2da      	uxtb	r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006568:	0b9b      	lsrs	r3, r3, #14
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657a:	0b5b      	lsrs	r3, r3, #13
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658c:	0b1b      	lsrs	r3, r3, #12
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2200      	movs	r2, #0
 800659e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d163      	bne.n	8006670 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ac:	009a      	lsls	r2, r3, #2
 80065ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065b2:	4013      	ands	r3, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065b8:	0f92      	lsrs	r2, r2, #30
 80065ba:	431a      	orrs	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c4:	0edb      	lsrs	r3, r3, #27
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d6:	0e1b      	lsrs	r3, r3, #24
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e8:	0d5b      	lsrs	r3, r3, #21
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fa:	0c9b      	lsrs	r3, r3, #18
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	b2da      	uxtb	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660c:	0bdb      	lsrs	r3, r3, #15
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	b2da      	uxtb	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	7e1b      	ldrb	r3, [r3, #24]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	3302      	adds	r3, #2
 8006630:	2201      	movs	r2, #1
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800663a:	fb02 f203 	mul.w	r2, r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	7a1b      	ldrb	r3, [r3, #8]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	2201      	movs	r2, #1
 800664e:	409a      	lsls	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800665c:	0a52      	lsrs	r2, r2, #9
 800665e:	fb02 f203 	mul.w	r2, r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666c:	661a      	str	r2, [r3, #96]	; 0x60
 800666e:	e031      	b.n	80066d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006674:	2b01      	cmp	r3, #1
 8006676:	d11d      	bne.n	80066b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	431a      	orrs	r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	3301      	adds	r3, #1
 8006694:	029a      	lsls	r2, r3, #10
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	661a      	str	r2, [r3, #96]	; 0x60
 80066b2:	e00f      	b.n	80066d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a58      	ldr	r2, [pc, #352]	; (800681c <HAL_SD_GetCardCSD+0x344>)
 80066ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e09d      	b.n	8006810 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d8:	0b9b      	lsrs	r3, r3, #14
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ea:	09db      	lsrs	r3, r3, #7
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006702:	b2da      	uxtb	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	0fdb      	lsrs	r3, r3, #31
 800670e:	b2da      	uxtb	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	0f5b      	lsrs	r3, r3, #29
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	b2da      	uxtb	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672a:	0e9b      	lsrs	r3, r3, #26
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	b2da      	uxtb	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	0d9b      	lsrs	r3, r3, #22
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	b2da      	uxtb	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	0d5b      	lsrs	r3, r3, #21
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	0bdb      	lsrs	r3, r3, #15
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	0b9b      	lsrs	r3, r3, #14
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	0b5b      	lsrs	r3, r3, #13
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ba:	0b1b      	lsrs	r3, r3, #12
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	0a9b      	lsrs	r3, r3, #10
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	004005ff 	.word	0x004005ff

08006820 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006820:	b5b0      	push	{r4, r5, r7, lr}
 8006822:	b08e      	sub	sp, #56	; 0x38
 8006824:	af04      	add	r7, sp, #16
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2203      	movs	r2, #3
 8006834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	2b03      	cmp	r3, #3
 800683e:	d02e      	beq.n	800689e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d106      	bne.n	8006856 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
 8006854:	e029      	b.n	80068aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685c:	d10a      	bne.n	8006874 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9d2 	bl	8006c08 <SD_WideBus_Enable>
 8006864:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
 8006872:	e01a      	b.n	80068aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa0f 	bl	8006c9e <SD_WideBus_Disable>
 8006880:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
 800688e:	e00c      	b.n	80068aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
 800689c:	e005      	b.n	80068aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a26      	ldr	r2, [pc, #152]	; (8006950 <HAL_SD_ConfigWideBusOperation+0x130>)
 80068b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068c8:	e01f      	b.n	800690a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681d      	ldr	r5, [r3, #0]
 80068f0:	466c      	mov	r4, sp
 80068f2:	f107 0314 	add.w	r3, r7, #20
 80068f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068fe:	f107 0308 	add.w	r3, r7, #8
 8006902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006904:	4628      	mov	r0, r5
 8006906:	f001 fb8f 	bl	8008028 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006912:	4618      	mov	r0, r3
 8006914:	f001 fc53 	bl	80081be <SDMMC_CmdBlockLength>
 8006918:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00c      	beq.n	800693a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006946:	4618      	mov	r0, r3
 8006948:	3728      	adds	r7, #40	; 0x28
 800694a:	46bd      	mov	sp, r7
 800694c:	bdb0      	pop	{r4, r5, r7, pc}
 800694e:	bf00      	nop
 8006950:	004005ff 	.word	0x004005ff

08006954 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006954:	b5b0      	push	{r4, r5, r7, lr}
 8006956:	b094      	sub	sp, #80	; 0x50
 8006958:	af04      	add	r7, sp, #16
 800695a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800695c:	2301      	movs	r3, #1
 800695e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f001 fba6 	bl	80080b6 <SDIO_GetPowerState>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006970:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006974:	e0b6      	b.n	8006ae4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	2b03      	cmp	r3, #3
 800697c:	d02f      	beq.n	80069de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f001 fd25 	bl	80083d2 <SDMMC_CmdSendCID>
 8006988:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800698a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <SD_InitCard+0x40>
    {
      return errorstate;
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	e0a7      	b.n	8006ae4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f001 fbd0 	bl	8008140 <SDIO_GetResponse>
 80069a0:	4602      	mov	r2, r0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2104      	movs	r1, #4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fbc7 	bl	8008140 <SDIO_GetResponse>
 80069b2:	4602      	mov	r2, r0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2108      	movs	r1, #8
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fbbe 	bl	8008140 <SDIO_GetResponse>
 80069c4:	4602      	mov	r2, r0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	210c      	movs	r1, #12
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fbb5 	bl	8008140 <SDIO_GetResponse>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d00d      	beq.n	8006a02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f107 020e 	add.w	r2, r7, #14
 80069ee:	4611      	mov	r1, r2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fd2b 	bl	800844c <SDMMC_CmdSetRelAdd>
 80069f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <SD_InitCard+0xae>
    {
      return errorstate;
 80069fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a00:	e070      	b.n	8006ae4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d036      	beq.n	8006a78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006a0a:	89fb      	ldrh	r3, [r7, #14]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f001 fcf5 	bl	800840e <SDMMC_CmdSendCSD>
 8006a24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2e:	e059      	b.n	8006ae4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2100      	movs	r1, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 fb82 	bl	8008140 <SDIO_GetResponse>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2104      	movs	r1, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 fb79 	bl	8008140 <SDIO_GetResponse>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2108      	movs	r1, #8
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fb70 	bl	8008140 <SDIO_GetResponse>
 8006a60:	4602      	mov	r2, r0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	210c      	movs	r1, #12
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 fb67 	bl	8008140 <SDIO_GetResponse>
 8006a72:	4602      	mov	r2, r0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2104      	movs	r1, #4
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fb5e 	bl	8008140 <SDIO_GetResponse>
 8006a84:	4603      	mov	r3, r0
 8006a86:	0d1a      	lsrs	r2, r3, #20
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a8c:	f107 0310 	add.w	r3, r7, #16
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff fd20 	bl	80064d8 <HAL_SD_GetCardCSD>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006aa2:	e01f      	b.n	8006ae4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6819      	ldr	r1, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	f001 fba4 	bl	8008202 <SDMMC_CmdSelDesel>
 8006aba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <SD_InitCard+0x172>
  {
    return errorstate;
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	e00e      	b.n	8006ae4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681d      	ldr	r5, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	466c      	mov	r4, sp
 8006ace:	f103 0210 	add.w	r2, r3, #16
 8006ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ad8:	3304      	adds	r3, #4
 8006ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006adc:	4628      	mov	r0, r5
 8006ade:	f001 faa3 	bl	8008028 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3740      	adds	r7, #64	; 0x40
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bdb0      	pop	{r4, r5, r7, pc}

08006aec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 fb9f 	bl	8008248 <SDMMC_CmdGoIdleState>
 8006b0a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	e072      	b.n	8006bfc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fbb2 	bl	8008284 <SDMMC_CmdOperCond>
 8006b20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fb88 	bl	8008248 <SDMMC_CmdGoIdleState>
 8006b38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	e05b      	b.n	8006bfc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d137      	bne.n	8006bc2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2100      	movs	r1, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 fbb2 	bl	80082c2 <SDMMC_CmdAppCommand>
 8006b5e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02d      	beq.n	8006bc2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b6a:	e047      	b.n	8006bfc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2100      	movs	r1, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 fba5 	bl	80082c2 <SDMMC_CmdAppCommand>
 8006b78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <SD_PowerON+0x98>
    {
      return errorstate;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	e03b      	b.n	8006bfc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	491e      	ldr	r1, [pc, #120]	; (8006c04 <SD_PowerON+0x118>)
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 fbbb 	bl	8008306 <SDMMC_CmdAppOperCommand>
 8006b90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b9c:	e02e      	b.n	8006bfc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 facb 	bl	8008140 <SDIO_GetResponse>
 8006baa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	0fdb      	lsrs	r3, r3, #31
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <SD_PowerON+0xcc>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <SD_PowerON+0xce>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]

    count++;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d802      	bhi.n	8006bd2 <SD_PowerON+0xe6>
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0cc      	beq.n	8006b6c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d902      	bls.n	8006be2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006be0:	e00c      	b.n	8006bfc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8006bf2:	e002      	b.n	8006bfa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	c1100000 	.word	0xc1100000

08006c08 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fa8e 	bl	8008140 <SDIO_GetResponse>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c2e:	d102      	bne.n	8006c36 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c34:	e02f      	b.n	8006c96 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f879 	bl	8006d34 <SD_FindSCR>
 8006c42:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	e023      	b.n	8006c96 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01c      	beq.n	8006c92 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	4619      	mov	r1, r3
 8006c64:	4610      	mov	r0, r2
 8006c66:	f001 fb2c 	bl	80082c2 <SDMMC_CmdAppCommand>
 8006c6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	e00f      	b.n	8006c96 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 fb65 	bl	800834c <SDMMC_CmdBusWidth>
 8006c82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	e003      	b.n	8006c96 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e001      	b.n	8006c96 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 fa43 	bl	8008140 <SDIO_GetResponse>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc4:	d102      	bne.n	8006ccc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cca:	e02f      	b.n	8006d2c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f82e 	bl	8006d34 <SD_FindSCR>
 8006cd8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	e023      	b.n	8006d2c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01c      	beq.n	8006d28 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f001 fae1 	bl	80082c2 <SDMMC_CmdAppCommand>
 8006d00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	e00f      	b.n	8006d2c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 fb1a 	bl	800834c <SDMMC_CmdBusWidth>
 8006d18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	e003      	b.n	8006d2c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	e001      	b.n	8006d2c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b08f      	sub	sp, #60	; 0x3c
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d3e:	f7fa faad 	bl	800129c <HAL_GetTick>
 8006d42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2108      	movs	r1, #8
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fa2f 	bl	80081be <SDMMC_CmdBlockLength>
 8006d60:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	e0b2      	b.n	8006ed2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f001 faa2 	bl	80082c2 <SDMMC_CmdAppCommand>
 8006d7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	e0a3      	b.n	8006ed2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006d90:	2308      	movs	r3, #8
 8006d92:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006d94:	2330      	movs	r3, #48	; 0x30
 8006d96:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f107 0210 	add.w	r2, r7, #16
 8006dac:	4611      	mov	r1, r2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 f9d9 	bl	8008166 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fae9 	bl	8008390 <SDMMC_CmdSendSCR>
 8006dbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d02a      	beq.n	8006e1c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	e083      	b.n	8006ed2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	f107 0208 	add.w	r2, r7, #8
 8006de4:	18d4      	adds	r4, r2, r3
 8006de6:	4608      	mov	r0, r1
 8006de8:	f001 f949 	bl	800807e <SDIO_ReadFIFO>
 8006dec:	4603      	mov	r3, r0
 8006dee:	6023      	str	r3, [r4, #0]
      index++;
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	3301      	adds	r3, #1
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
 8006df6:	e006      	b.n	8006e06 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d012      	beq.n	8006e2c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e06:	f7fa fa49 	bl	800129c <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d102      	bne.n	8006e1c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e1a:	e05a      	b.n	8006ed2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e22:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0cf      	beq.n	8006dca <SD_FindSCR+0x96>
 8006e2a:	e000      	b.n	8006e2e <SD_FindSCR+0xfa>
      break;
 8006e2c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2208      	movs	r2, #8
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e44:	2308      	movs	r3, #8
 8006e46:	e044      	b.n	8006ed2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e037      	b.n	8006ed2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2220      	movs	r2, #32
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006e78:	2320      	movs	r3, #32
 8006e7a:	e02a      	b.n	8006ed2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e84:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	061a      	lsls	r2, r3, #24
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e92:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	0e1b      	lsrs	r3, r3, #24
 8006ea2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	601a      	str	r2, [r3, #0]
    scr++;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	3304      	adds	r3, #4
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	061a      	lsls	r2, r3, #24
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ec4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	0e1b      	lsrs	r3, r3, #24
 8006eca:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	373c      	adds	r7, #60	; 0x3c
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd90      	pop	{r4, r7, pc}

08006eda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e041      	b.n	8006f70 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f006 f909 	bl	800d118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f000 fb47 	bl	80075ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d001      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e044      	b.n	800701a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <HAL_TIM_Base_Start_IT+0xb0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d018      	beq.n	8006fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d013      	beq.n	8006fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1a      	ldr	r2, [pc, #104]	; (800702c <HAL_TIM_Base_Start_IT+0xb4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00e      	beq.n	8006fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a19      	ldr	r2, [pc, #100]	; (8007030 <HAL_TIM_Base_Start_IT+0xb8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d009      	beq.n	8006fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a17      	ldr	r2, [pc, #92]	; (8007034 <HAL_TIM_Base_Start_IT+0xbc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a16      	ldr	r2, [pc, #88]	; (8007038 <HAL_TIM_Base_Start_IT+0xc0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d111      	bne.n	8007008 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b06      	cmp	r3, #6
 8006ff4:	d010      	beq.n	8007018 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007006:	e007      	b.n	8007018 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40010000 	.word	0x40010000
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40000c00 	.word	0x40000c00
 8007038:	40014000 	.word	0x40014000

0800703c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e041      	b.n	80070d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f839 	bl	80070da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f000 fa96 	bl	80075ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b02      	cmp	r3, #2
 8007102:	d122      	bne.n	800714a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d11b      	bne.n	800714a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f06f 0202 	mvn.w	r2, #2
 800711a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa1c 	bl	800756e <HAL_TIM_IC_CaptureCallback>
 8007136:	e005      	b.n	8007144 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa0e 	bl	800755a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa1f 	bl	8007582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b04      	cmp	r3, #4
 8007156:	d122      	bne.n	800719e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b04      	cmp	r3, #4
 8007164:	d11b      	bne.n	800719e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f06f 0204 	mvn.w	r2, #4
 800716e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f9f2 	bl	800756e <HAL_TIM_IC_CaptureCallback>
 800718a:	e005      	b.n	8007198 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f9e4 	bl	800755a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f9f5 	bl	8007582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d122      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d11b      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f06f 0208 	mvn.w	r2, #8
 80071c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2204      	movs	r2, #4
 80071c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f9c8 	bl	800756e <HAL_TIM_IC_CaptureCallback>
 80071de:	e005      	b.n	80071ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9ba 	bl	800755a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f9cb 	bl	8007582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d122      	bne.n	8007246 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b10      	cmp	r3, #16
 800720c:	d11b      	bne.n	8007246 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f06f 0210 	mvn.w	r2, #16
 8007216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2208      	movs	r2, #8
 800721c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f99e 	bl	800756e <HAL_TIM_IC_CaptureCallback>
 8007232:	e005      	b.n	8007240 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f990 	bl	800755a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9a1 	bl	8007582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	d10e      	bne.n	8007272 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b01      	cmp	r3, #1
 8007260:	d107      	bne.n	8007272 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f06f 0201 	mvn.w	r2, #1
 800726a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f96a 	bl	8007546 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727c:	2b80      	cmp	r3, #128	; 0x80
 800727e:	d10e      	bne.n	800729e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728a:	2b80      	cmp	r3, #128	; 0x80
 800728c:	d107      	bne.n	800729e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fca5 	bl	8007be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d10e      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b40      	cmp	r3, #64	; 0x40
 80072b8:	d107      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f966 	bl	8007596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d10e      	bne.n	80072f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d107      	bne.n	80072f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f06f 0220 	mvn.w	r2, #32
 80072ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc6f 	bl	8007bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_TIM_OC_ConfigChannel+0x1e>
 800731a:	2302      	movs	r3, #2
 800731c:	e048      	b.n	80073b0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b0c      	cmp	r3, #12
 800732a:	d839      	bhi.n	80073a0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800732c:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <HAL_TIM_OC_ConfigChannel+0x34>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	08007369 	.word	0x08007369
 8007338:	080073a1 	.word	0x080073a1
 800733c:	080073a1 	.word	0x080073a1
 8007340:	080073a1 	.word	0x080073a1
 8007344:	08007377 	.word	0x08007377
 8007348:	080073a1 	.word	0x080073a1
 800734c:	080073a1 	.word	0x080073a1
 8007350:	080073a1 	.word	0x080073a1
 8007354:	08007385 	.word	0x08007385
 8007358:	080073a1 	.word	0x080073a1
 800735c:	080073a1 	.word	0x080073a1
 8007360:	080073a1 	.word	0x080073a1
 8007364:	08007393 	.word	0x08007393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f99c 	bl	80076ac <TIM_OC1_SetConfig>
      break;
 8007374:	e017      	b.n	80073a6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f9fb 	bl	8007778 <TIM_OC2_SetConfig>
      break;
 8007382:	e010      	b.n	80073a6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fa60 	bl	8007850 <TIM_OC3_SetConfig>
      break;
 8007390:	e009      	b.n	80073a6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fac3 	bl	8007924 <TIM_OC4_SetConfig>
      break;
 800739e:	e002      	b.n	80073a6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
      break;
 80073a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_TIM_ConfigClockSource+0x1c>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e0b4      	b.n	800753e <HAL_TIM_ConfigClockSource+0x186>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740c:	d03e      	beq.n	800748c <HAL_TIM_ConfigClockSource+0xd4>
 800740e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007412:	f200 8087 	bhi.w	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741a:	f000 8086 	beq.w	800752a <HAL_TIM_ConfigClockSource+0x172>
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	d87f      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 8007424:	2b70      	cmp	r3, #112	; 0x70
 8007426:	d01a      	beq.n	800745e <HAL_TIM_ConfigClockSource+0xa6>
 8007428:	2b70      	cmp	r3, #112	; 0x70
 800742a:	d87b      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 800742c:	2b60      	cmp	r3, #96	; 0x60
 800742e:	d050      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007430:	2b60      	cmp	r3, #96	; 0x60
 8007432:	d877      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 8007434:	2b50      	cmp	r3, #80	; 0x50
 8007436:	d03c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007438:	2b50      	cmp	r3, #80	; 0x50
 800743a:	d873      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d058      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007440:	2b40      	cmp	r3, #64	; 0x40
 8007442:	d86f      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 8007444:	2b30      	cmp	r3, #48	; 0x30
 8007446:	d064      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x15a>
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d86b      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d060      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x15a>
 8007450:	2b20      	cmp	r3, #32
 8007452:	d867      	bhi.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d05c      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x15a>
 8007458:	2b10      	cmp	r3, #16
 800745a:	d05a      	beq.n	8007512 <HAL_TIM_ConfigClockSource+0x15a>
 800745c:	e062      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6899      	ldr	r1, [r3, #8]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f000 fb23 	bl	8007ab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	609a      	str	r2, [r3, #8]
      break;
 800748a:	e04f      	b.n	800752c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6899      	ldr	r1, [r3, #8]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f000 fb0c 	bl	8007ab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ae:	609a      	str	r2, [r3, #8]
      break;
 80074b0:	e03c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6859      	ldr	r1, [r3, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	461a      	mov	r2, r3
 80074c0:	f000 fa80 	bl	80079c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2150      	movs	r1, #80	; 0x50
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fad9 	bl	8007a82 <TIM_ITRx_SetConfig>
      break;
 80074d0:	e02c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6859      	ldr	r1, [r3, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	461a      	mov	r2, r3
 80074e0:	f000 fa9f 	bl	8007a22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2160      	movs	r1, #96	; 0x60
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fac9 	bl	8007a82 <TIM_ITRx_SetConfig>
      break;
 80074f0:	e01c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6859      	ldr	r1, [r3, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	461a      	mov	r2, r3
 8007500:	f000 fa60 	bl	80079c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	4618      	mov	r0, r3
 800750c:	f000 fab9 	bl	8007a82 <TIM_ITRx_SetConfig>
      break;
 8007510:	e00c      	b.n	800752c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f000 fab0 	bl	8007a82 <TIM_ITRx_SetConfig>
      break;
 8007522:	e003      	b.n	800752c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
      break;
 8007528:	e000      	b.n	800752c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800752a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a34      	ldr	r2, [pc, #208]	; (8007690 <TIM_Base_SetConfig+0xe4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00f      	beq.n	80075e4 <TIM_Base_SetConfig+0x38>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ca:	d00b      	beq.n	80075e4 <TIM_Base_SetConfig+0x38>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a31      	ldr	r2, [pc, #196]	; (8007694 <TIM_Base_SetConfig+0xe8>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d007      	beq.n	80075e4 <TIM_Base_SetConfig+0x38>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a30      	ldr	r2, [pc, #192]	; (8007698 <TIM_Base_SetConfig+0xec>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d003      	beq.n	80075e4 <TIM_Base_SetConfig+0x38>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a2f      	ldr	r2, [pc, #188]	; (800769c <TIM_Base_SetConfig+0xf0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d108      	bne.n	80075f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a25      	ldr	r2, [pc, #148]	; (8007690 <TIM_Base_SetConfig+0xe4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d01b      	beq.n	8007636 <TIM_Base_SetConfig+0x8a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007604:	d017      	beq.n	8007636 <TIM_Base_SetConfig+0x8a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a22      	ldr	r2, [pc, #136]	; (8007694 <TIM_Base_SetConfig+0xe8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d013      	beq.n	8007636 <TIM_Base_SetConfig+0x8a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a21      	ldr	r2, [pc, #132]	; (8007698 <TIM_Base_SetConfig+0xec>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00f      	beq.n	8007636 <TIM_Base_SetConfig+0x8a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a20      	ldr	r2, [pc, #128]	; (800769c <TIM_Base_SetConfig+0xf0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00b      	beq.n	8007636 <TIM_Base_SetConfig+0x8a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a1f      	ldr	r2, [pc, #124]	; (80076a0 <TIM_Base_SetConfig+0xf4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d007      	beq.n	8007636 <TIM_Base_SetConfig+0x8a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a1e      	ldr	r2, [pc, #120]	; (80076a4 <TIM_Base_SetConfig+0xf8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d003      	beq.n	8007636 <TIM_Base_SetConfig+0x8a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a1d      	ldr	r2, [pc, #116]	; (80076a8 <TIM_Base_SetConfig+0xfc>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d108      	bne.n	8007648 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800763c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a08      	ldr	r2, [pc, #32]	; (8007690 <TIM_Base_SetConfig+0xe4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d103      	bne.n	800767c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	615a      	str	r2, [r3, #20]
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40010000 	.word	0x40010000
 8007694:	40000400 	.word	0x40000400
 8007698:	40000800 	.word	0x40000800
 800769c:	40000c00 	.word	0x40000c00
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800

080076ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	f023 0201 	bic.w	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f023 0302 	bic.w	r3, r3, #2
 80076f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a1c      	ldr	r2, [pc, #112]	; (8007774 <TIM_OC1_SetConfig+0xc8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d10c      	bne.n	8007722 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f023 0308 	bic.w	r3, r3, #8
 800770e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f023 0304 	bic.w	r3, r3, #4
 8007720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a13      	ldr	r2, [pc, #76]	; (8007774 <TIM_OC1_SetConfig+0xc8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d111      	bne.n	800774e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	40010000 	.word	0x40010000

08007778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	f023 0210 	bic.w	r2, r3, #16
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0320 	bic.w	r3, r3, #32
 80077c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a1e      	ldr	r2, [pc, #120]	; (800784c <TIM_OC2_SetConfig+0xd4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d10d      	bne.n	80077f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a15      	ldr	r2, [pc, #84]	; (800784c <TIM_OC2_SetConfig+0xd4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d113      	bne.n	8007824 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800780a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000

08007850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a1d      	ldr	r2, [pc, #116]	; (8007920 <TIM_OC3_SetConfig+0xd0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d10d      	bne.n	80078ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a14      	ldr	r2, [pc, #80]	; (8007920 <TIM_OC3_SetConfig+0xd0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d113      	bne.n	80078fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	621a      	str	r2, [r3, #32]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40010000 	.word	0x40010000

08007924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800796e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	031b      	lsls	r3, r3, #12
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a10      	ldr	r2, [pc, #64]	; (80079c0 <TIM_OC4_SetConfig+0x9c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d109      	bne.n	8007998 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800798a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	019b      	lsls	r3, r3, #6
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40010000 	.word	0x40010000

080079c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f023 0201 	bic.w	r2, r3, #1
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f023 030a 	bic.w	r3, r3, #10
 8007a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b087      	sub	sp, #28
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f023 0210 	bic.w	r2, r3, #16
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	031b      	lsls	r3, r3, #12
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	621a      	str	r2, [r3, #32]
}
 8007a76:	bf00      	nop
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f043 0307 	orr.w	r3, r3, #7
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	609a      	str	r2, [r3, #8]
}
 8007aac:	bf00      	nop
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	021a      	lsls	r2, r3, #8
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	609a      	str	r2, [r3, #8]
}
 8007aec:	bf00      	nop
 8007aee:	371c      	adds	r7, #28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e050      	b.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d018      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5c:	d013      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00e      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a16      	ldr	r2, [pc, #88]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a13      	ldr	r2, [pc, #76]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d10c      	bne.n	8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40010000 	.word	0x40010000
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40014000 	.word	0x40014000

08007bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e03f      	b.n	8007c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f005 fa9e 	bl	800d164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2224      	movs	r2, #36	; 0x24
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f829 	bl	8007c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	b09f      	sub	sp, #124	; 0x7c
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cae:	68d9      	ldr	r1, [r3, #12]
 8007cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	ea40 0301 	orr.w	r3, r0, r1
 8007cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cdc:	f021 010c 	bic.w	r1, r1, #12
 8007ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce6:	430b      	orrs	r3, r1
 8007ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf6:	6999      	ldr	r1, [r3, #24]
 8007cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	ea40 0301 	orr.w	r3, r0, r1
 8007d00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4bc5      	ldr	r3, [pc, #788]	; (800801c <UART_SetConfig+0x384>)
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d004      	beq.n	8007d16 <UART_SetConfig+0x7e>
 8007d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4bc3      	ldr	r3, [pc, #780]	; (8008020 <UART_SetConfig+0x388>)
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d103      	bne.n	8007d1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d16:	f7fe f92b 	bl	8005f70 <HAL_RCC_GetPCLK2Freq>
 8007d1a:	6778      	str	r0, [r7, #116]	; 0x74
 8007d1c:	e002      	b.n	8007d24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d1e:	f7fe f913 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 8007d22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2c:	f040 80b6 	bne.w	8007e9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d32:	461c      	mov	r4, r3
 8007d34:	f04f 0500 	mov.w	r5, #0
 8007d38:	4622      	mov	r2, r4
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	1891      	adds	r1, r2, r2
 8007d3e:	6439      	str	r1, [r7, #64]	; 0x40
 8007d40:	415b      	adcs	r3, r3
 8007d42:	647b      	str	r3, [r7, #68]	; 0x44
 8007d44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d48:	1912      	adds	r2, r2, r4
 8007d4a:	eb45 0303 	adc.w	r3, r5, r3
 8007d4e:	f04f 0000 	mov.w	r0, #0
 8007d52:	f04f 0100 	mov.w	r1, #0
 8007d56:	00d9      	lsls	r1, r3, #3
 8007d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d5c:	00d0      	lsls	r0, r2, #3
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	1911      	adds	r1, r2, r4
 8007d64:	6639      	str	r1, [r7, #96]	; 0x60
 8007d66:	416b      	adcs	r3, r5
 8007d68:	667b      	str	r3, [r7, #100]	; 0x64
 8007d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	1891      	adds	r1, r2, r2
 8007d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d78:	415b      	adcs	r3, r3
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d84:	f7f8 ff18 	bl	8000bb8 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4ba5      	ldr	r3, [pc, #660]	; (8008024 <UART_SetConfig+0x38c>)
 8007d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	011e      	lsls	r6, r3, #4
 8007d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d98:	461c      	mov	r4, r3
 8007d9a:	f04f 0500 	mov.w	r5, #0
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	1891      	adds	r1, r2, r2
 8007da4:	6339      	str	r1, [r7, #48]	; 0x30
 8007da6:	415b      	adcs	r3, r3
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
 8007daa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007dae:	1912      	adds	r2, r2, r4
 8007db0:	eb45 0303 	adc.w	r3, r5, r3
 8007db4:	f04f 0000 	mov.w	r0, #0
 8007db8:	f04f 0100 	mov.w	r1, #0
 8007dbc:	00d9      	lsls	r1, r3, #3
 8007dbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dc2:	00d0      	lsls	r0, r2, #3
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	1911      	adds	r1, r2, r4
 8007dca:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dcc:	416b      	adcs	r3, r5
 8007dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	1891      	adds	r1, r2, r2
 8007ddc:	62b9      	str	r1, [r7, #40]	; 0x28
 8007dde:	415b      	adcs	r3, r3
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007de6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007dea:	f7f8 fee5 	bl	8000bb8 <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4b8c      	ldr	r3, [pc, #560]	; (8008024 <UART_SetConfig+0x38c>)
 8007df4:	fba3 1302 	umull	r1, r3, r3, r2
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	2164      	movs	r1, #100	; 0x64
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	3332      	adds	r3, #50	; 0x32
 8007e06:	4a87      	ldr	r2, [pc, #540]	; (8008024 <UART_SetConfig+0x38c>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e14:	441e      	add	r6, r3
 8007e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	1894      	adds	r4, r2, r2
 8007e24:	623c      	str	r4, [r7, #32]
 8007e26:	415b      	adcs	r3, r3
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e2e:	1812      	adds	r2, r2, r0
 8007e30:	eb41 0303 	adc.w	r3, r1, r3
 8007e34:	f04f 0400 	mov.w	r4, #0
 8007e38:	f04f 0500 	mov.w	r5, #0
 8007e3c:	00dd      	lsls	r5, r3, #3
 8007e3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e42:	00d4      	lsls	r4, r2, #3
 8007e44:	4622      	mov	r2, r4
 8007e46:	462b      	mov	r3, r5
 8007e48:	1814      	adds	r4, r2, r0
 8007e4a:	653c      	str	r4, [r7, #80]	; 0x50
 8007e4c:	414b      	adcs	r3, r1
 8007e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	461a      	mov	r2, r3
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	1891      	adds	r1, r2, r2
 8007e5c:	61b9      	str	r1, [r7, #24]
 8007e5e:	415b      	adcs	r3, r3
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e6a:	f7f8 fea5 	bl	8000bb8 <__aeabi_uldivmod>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4b6c      	ldr	r3, [pc, #432]	; (8008024 <UART_SetConfig+0x38c>)
 8007e74:	fba3 1302 	umull	r1, r3, r3, r2
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	2164      	movs	r1, #100	; 0x64
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	3332      	adds	r3, #50	; 0x32
 8007e86:	4a67      	ldr	r2, [pc, #412]	; (8008024 <UART_SetConfig+0x38c>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	f003 0207 	and.w	r2, r3, #7
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4432      	add	r2, r6
 8007e98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e9a:	e0b9      	b.n	8008010 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e9e:	461c      	mov	r4, r3
 8007ea0:	f04f 0500 	mov.w	r5, #0
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	1891      	adds	r1, r2, r2
 8007eaa:	6139      	str	r1, [r7, #16]
 8007eac:	415b      	adcs	r3, r3
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007eb4:	1912      	adds	r2, r2, r4
 8007eb6:	eb45 0303 	adc.w	r3, r5, r3
 8007eba:	f04f 0000 	mov.w	r0, #0
 8007ebe:	f04f 0100 	mov.w	r1, #0
 8007ec2:	00d9      	lsls	r1, r3, #3
 8007ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ec8:	00d0      	lsls	r0, r2, #3
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	eb12 0804 	adds.w	r8, r2, r4
 8007ed2:	eb43 0905 	adc.w	r9, r3, r5
 8007ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f04f 0100 	mov.w	r1, #0
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	008b      	lsls	r3, r1, #2
 8007eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007eee:	0082      	lsls	r2, r0, #2
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 fe60 	bl	8000bb8 <__aeabi_uldivmod>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4b49      	ldr	r3, [pc, #292]	; (8008024 <UART_SetConfig+0x38c>)
 8007efe:	fba3 2302 	umull	r2, r3, r3, r2
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	011e      	lsls	r6, r3, #4
 8007f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f04f 0100 	mov.w	r1, #0
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	1894      	adds	r4, r2, r2
 8007f14:	60bc      	str	r4, [r7, #8]
 8007f16:	415b      	adcs	r3, r3
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f1e:	1812      	adds	r2, r2, r0
 8007f20:	eb41 0303 	adc.w	r3, r1, r3
 8007f24:	f04f 0400 	mov.w	r4, #0
 8007f28:	f04f 0500 	mov.w	r5, #0
 8007f2c:	00dd      	lsls	r5, r3, #3
 8007f2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f32:	00d4      	lsls	r4, r2, #3
 8007f34:	4622      	mov	r2, r4
 8007f36:	462b      	mov	r3, r5
 8007f38:	1814      	adds	r4, r2, r0
 8007f3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f3c:	414b      	adcs	r3, r1
 8007f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f04f 0100 	mov.w	r1, #0
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	008b      	lsls	r3, r1, #2
 8007f54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f58:	0082      	lsls	r2, r0, #2
 8007f5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f5e:	f7f8 fe2b 	bl	8000bb8 <__aeabi_uldivmod>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <UART_SetConfig+0x38c>)
 8007f68:	fba3 1302 	umull	r1, r3, r3, r2
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	2164      	movs	r1, #100	; 0x64
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	3332      	adds	r3, #50	; 0x32
 8007f7a:	4a2a      	ldr	r2, [pc, #168]	; (8008024 <UART_SetConfig+0x38c>)
 8007f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f86:	441e      	add	r6, r3
 8007f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f04f 0100 	mov.w	r1, #0
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	1894      	adds	r4, r2, r2
 8007f96:	603c      	str	r4, [r7, #0]
 8007f98:	415b      	adcs	r3, r3
 8007f9a:	607b      	str	r3, [r7, #4]
 8007f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa0:	1812      	adds	r2, r2, r0
 8007fa2:	eb41 0303 	adc.w	r3, r1, r3
 8007fa6:	f04f 0400 	mov.w	r4, #0
 8007faa:	f04f 0500 	mov.w	r5, #0
 8007fae:	00dd      	lsls	r5, r3, #3
 8007fb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fb4:	00d4      	lsls	r4, r2, #3
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	462b      	mov	r3, r5
 8007fba:	eb12 0a00 	adds.w	sl, r2, r0
 8007fbe:	eb43 0b01 	adc.w	fp, r3, r1
 8007fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f04f 0100 	mov.w	r1, #0
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	008b      	lsls	r3, r1, #2
 8007fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fda:	0082      	lsls	r2, r0, #2
 8007fdc:	4650      	mov	r0, sl
 8007fde:	4659      	mov	r1, fp
 8007fe0:	f7f8 fdea 	bl	8000bb8 <__aeabi_uldivmod>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <UART_SetConfig+0x38c>)
 8007fea:	fba3 1302 	umull	r1, r3, r3, r2
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	2164      	movs	r1, #100	; 0x64
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	3332      	adds	r3, #50	; 0x32
 8007ffc:	4a09      	ldr	r2, [pc, #36]	; (8008024 <UART_SetConfig+0x38c>)
 8007ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	f003 020f 	and.w	r2, r3, #15
 8008008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4432      	add	r2, r6
 800800e:	609a      	str	r2, [r3, #8]
}
 8008010:	bf00      	nop
 8008012:	377c      	adds	r7, #124	; 0x7c
 8008014:	46bd      	mov	sp, r7
 8008016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801a:	bf00      	nop
 800801c:	40011000 	.word	0x40011000
 8008020:	40011400 	.word	0x40011400
 8008024:	51eb851f 	.word	0x51eb851f

08008028 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008028:	b084      	sub	sp, #16
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	f107 001c 	add.w	r0, r7, #28
 8008036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800803e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008040:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008042:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008046:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800804a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800804e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008052:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008062:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	b004      	add	sp, #16
 800807c:	4770      	bx	lr

0800807e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80080a6:	2002      	movs	r0, #2
 80080a8:	f7f9 f904 	bl	80012b4 <HAL_Delay>
  
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0303 	and.w	r3, r3, #3
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80080f0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80080f6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80080fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800810c:	f023 030f 	bic.w	r3, r3, #15
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	b2db      	uxtb	r3, r3
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3314      	adds	r3, #20
 800814e:	461a      	mov	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	4413      	add	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
}  
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800818c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008192:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008198:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4313      	orrs	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0

}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b088      	sub	sp, #32
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80081cc:	2310      	movs	r3, #16
 80081ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081d0:	2340      	movs	r3, #64	; 0x40
 80081d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081de:	f107 0308 	add.w	r3, r7, #8
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff ff74 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80081ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ee:	2110      	movs	r1, #16
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f979 	bl	80084e8 <SDMMC_GetCmdResp1>
 80081f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081f8:	69fb      	ldr	r3, [r7, #28]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b08a      	sub	sp, #40	; 0x28
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008212:	2307      	movs	r3, #7
 8008214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008216:	2340      	movs	r3, #64	; 0x40
 8008218:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800821a:	2300      	movs	r3, #0
 800821c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800821e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008222:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008224:	f107 0310 	add.w	r3, r7, #16
 8008228:	4619      	mov	r1, r3
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff ff51 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008230:	f241 3288 	movw	r2, #5000	; 0x1388
 8008234:	2107      	movs	r1, #7
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f956 	bl	80084e8 <SDMMC_GetCmdResp1>
 800823c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008240:	4618      	mov	r0, r3
 8008242:	3728      	adds	r7, #40	; 0x28
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008258:	2300      	movs	r3, #0
 800825a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff ff30 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f90c 	bl	8008490 <SDMMC_GetCmdError>
 8008278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800827a:	69fb      	ldr	r3, [r7, #28]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800828c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008292:	2308      	movs	r3, #8
 8008294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800829e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082a4:	f107 0308 	add.w	r3, r7, #8
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff ff11 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fb03 	bl	80088bc <SDMMC_GetCmdResp7>
 80082b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082b8:	69fb      	ldr	r3, [r7, #28]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3720      	adds	r7, #32
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b088      	sub	sp, #32
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082d0:	2337      	movs	r3, #55	; 0x37
 80082d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082d4:	2340      	movs	r3, #64	; 0x40
 80082d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff fef2 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80082ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f2:	2137      	movs	r1, #55	; 0x37
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f8f7 	bl	80084e8 <SDMMC_GetCmdResp1>
 80082fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082fc:	69fb      	ldr	r3, [r7, #28]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b088      	sub	sp, #32
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800831a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800831c:	2329      	movs	r3, #41	; 0x29
 800831e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008320:	2340      	movs	r3, #64	; 0x40
 8008322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800832c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff fecc 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa0a 	bl	8008754 <SDMMC_GetCmdResp3>
 8008340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008342:	69fb      	ldr	r3, [r7, #28]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800835a:	2306      	movs	r3, #6
 800835c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800836a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800836c:	f107 0308 	add.w	r3, r7, #8
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff fead 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008378:	f241 3288 	movw	r2, #5000	; 0x1388
 800837c:	2106      	movs	r1, #6
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f8b2 	bl	80084e8 <SDMMC_GetCmdResp1>
 8008384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008386:	69fb      	ldr	r3, [r7, #28]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800839c:	2333      	movs	r3, #51	; 0x33
 800839e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083a0:	2340      	movs	r3, #64	; 0x40
 80083a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff fe8c 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80083ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80083be:	2133      	movs	r1, #51	; 0x33
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f891 	bl	80084e8 <SDMMC_GetCmdResp1>
 80083c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083c8:	69fb      	ldr	r3, [r7, #28]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b088      	sub	sp, #32
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80083de:	2302      	movs	r3, #2
 80083e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80083e2:	23c0      	movs	r3, #192	; 0xc0
 80083e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083f0:	f107 0308 	add.w	r3, r7, #8
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff fe6b 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f961 	bl	80086c4 <SDMMC_GetCmdResp2>
 8008402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008404:	69fb      	ldr	r3, [r7, #28]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b088      	sub	sp, #32
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800841c:	2309      	movs	r3, #9
 800841e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008420:	23c0      	movs	r3, #192	; 0xc0
 8008422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800842c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fe4c 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f942 	bl	80086c4 <SDMMC_GetCmdResp2>
 8008440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008442:	69fb      	ldr	r3, [r7, #28]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3720      	adds	r7, #32
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800845a:	2303      	movs	r3, #3
 800845c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800845e:	2340      	movs	r3, #64	; 0x40
 8008460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800846a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800846c:	f107 0308 	add.w	r3, r7, #8
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff fe2d 	bl	80080d2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	2103      	movs	r1, #3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9a7 	bl	80087d0 <SDMMC_GetCmdResp6>
 8008482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008484:	69fb      	ldr	r3, [r7, #28]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3720      	adds	r7, #32
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008498:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <SDMMC_GetCmdError+0x50>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a11      	ldr	r2, [pc, #68]	; (80084e4 <SDMMC_GetCmdError+0x54>)
 800849e:	fba2 2303 	umull	r2, r3, r2, r3
 80084a2:	0a5b      	lsrs	r3, r3, #9
 80084a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	60fa      	str	r2, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084bc:	e009      	b.n	80084d2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0f1      	beq.n	80084ae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	22c5      	movs	r2, #197	; 0xc5
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20000118 	.word	0x20000118
 80084e4:	10624dd3 	.word	0x10624dd3

080084e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	460b      	mov	r3, r1
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80084f6:	4b70      	ldr	r3, [pc, #448]	; (80086b8 <SDMMC_GetCmdResp1+0x1d0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a70      	ldr	r2, [pc, #448]	; (80086bc <SDMMC_GetCmdResp1+0x1d4>)
 80084fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008500:	0a5a      	lsrs	r2, r3, #9
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	fb02 f303 	mul.w	r3, r2, r3
 8008508:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	1e5a      	subs	r2, r3, #1
 800850e:	61fa      	str	r2, [r7, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008514:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008518:	e0c9      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ef      	beq.n	800850a <SDMMC_GetCmdResp1+0x22>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1ea      	bne.n	800850a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2204      	movs	r2, #4
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008546:	2304      	movs	r3, #4
 8008548:	e0b1      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800855c:	2301      	movs	r3, #1
 800855e:	e0a6      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	22c5      	movs	r2, #197	; 0xc5
 8008564:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff fddd 	bl	8008126 <SDIO_GetCommandResponse>
 800856c:	4603      	mov	r3, r0
 800856e:	461a      	mov	r2, r3
 8008570:	7afb      	ldrb	r3, [r7, #11]
 8008572:	4293      	cmp	r3, r2
 8008574:	d001      	beq.n	800857a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008576:	2301      	movs	r3, #1
 8008578:	e099      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800857a:	2100      	movs	r1, #0
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fddf 	bl	8008140 <SDIO_GetResponse>
 8008582:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4b4e      	ldr	r3, [pc, #312]	; (80086c0 <SDMMC_GetCmdResp1+0x1d8>)
 8008588:	4013      	ands	r3, r2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800858e:	2300      	movs	r3, #0
 8008590:	e08d      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b00      	cmp	r3, #0
 8008596:	da02      	bge.n	800859e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800859c:	e087      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80085a8:	2340      	movs	r3, #64	; 0x40
 80085aa:	e080      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80085b6:	2380      	movs	r3, #128	; 0x80
 80085b8:	e079      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80085c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085c8:	e071      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80085d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085d8:	e069      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80085e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e8:	e061      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80085f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085f8:	e059      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008608:	e051      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008618:	e049      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008624:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008628:	e041      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008638:	e039      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008648:	e031      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008654:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008658:	e029      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008664:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008668:	e021      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008674:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008678:	e019      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008684:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008688:	e011      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008694:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008698:	e009      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f003 0308 	and.w	r3, r3, #8
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80086a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80086a8:	e001      	b.n	80086ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80086aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000118 	.word	0x20000118
 80086bc:	10624dd3 	.word	0x10624dd3
 80086c0:	fdffe008 	.word	0xfdffe008

080086c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086cc:	4b1f      	ldr	r3, [pc, #124]	; (800874c <SDMMC_GetCmdResp2+0x88>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1f      	ldr	r2, [pc, #124]	; (8008750 <SDMMC_GetCmdResp2+0x8c>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	0a5b      	lsrs	r3, r3, #9
 80086d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086dc:	fb02 f303 	mul.w	r3, r2, r3
 80086e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	1e5a      	subs	r2, r3, #1
 80086e6:	60fa      	str	r2, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086f0:	e026      	b.n	8008740 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0ef      	beq.n	80086e2 <SDMMC_GetCmdResp2+0x1e>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1ea      	bne.n	80086e2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2204      	movs	r2, #4
 800871c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800871e:	2304      	movs	r3, #4
 8008720:	e00e      	b.n	8008740 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008734:	2301      	movs	r3, #1
 8008736:	e003      	b.n	8008740 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	22c5      	movs	r2, #197	; 0xc5
 800873c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20000118 	.word	0x20000118
 8008750:	10624dd3 	.word	0x10624dd3

08008754 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800875c:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <SDMMC_GetCmdResp3+0x74>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1a      	ldr	r2, [pc, #104]	; (80087cc <SDMMC_GetCmdResp3+0x78>)
 8008762:	fba2 2303 	umull	r2, r3, r2, r3
 8008766:	0a5b      	lsrs	r3, r3, #9
 8008768:	f241 3288 	movw	r2, #5000	; 0x1388
 800876c:	fb02 f303 	mul.w	r3, r2, r3
 8008770:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1e5a      	subs	r2, r3, #1
 8008776:	60fa      	str	r2, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800877c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008780:	e01b      	b.n	80087ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0ef      	beq.n	8008772 <SDMMC_GetCmdResp3+0x1e>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1ea      	bne.n	8008772 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2204      	movs	r2, #4
 80087ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087ae:	2304      	movs	r3, #4
 80087b0:	e003      	b.n	80087ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	22c5      	movs	r2, #197	; 0xc5
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	20000118 	.word	0x20000118
 80087cc:	10624dd3 	.word	0x10624dd3

080087d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	460b      	mov	r3, r1
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087de:	4b35      	ldr	r3, [pc, #212]	; (80088b4 <SDMMC_GetCmdResp6+0xe4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a35      	ldr	r2, [pc, #212]	; (80088b8 <SDMMC_GetCmdResp6+0xe8>)
 80087e4:	fba2 2303 	umull	r2, r3, r2, r3
 80087e8:	0a5b      	lsrs	r3, r3, #9
 80087ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
 80087f2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	1e5a      	subs	r2, r3, #1
 80087f8:	61fa      	str	r2, [r7, #28]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008802:	e052      	b.n	80088aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008808:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0ef      	beq.n	80087f4 <SDMMC_GetCmdResp6+0x24>
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ea      	bne.n	80087f4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2204      	movs	r2, #4
 800882e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008830:	2304      	movs	r3, #4
 8008832:	e03a      	b.n	80088aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d004      	beq.n	800884a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008846:	2301      	movs	r3, #1
 8008848:	e02f      	b.n	80088aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fc6b 	bl	8008126 <SDIO_GetCommandResponse>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	7afb      	ldrb	r3, [r7, #11]
 8008856:	4293      	cmp	r3, r2
 8008858:	d001      	beq.n	800885e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800885a:	2301      	movs	r3, #1
 800885c:	e025      	b.n	80088aa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	22c5      	movs	r2, #197	; 0xc5
 8008862:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008864:	2100      	movs	r1, #0
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff fc6a 	bl	8008140 <SDIO_GetResponse>
 800886c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	0c1b      	lsrs	r3, r3, #16
 800887c:	b29a      	uxth	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008882:	2300      	movs	r3, #0
 8008884:	e011      	b.n	80088aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008894:	e009      	b.n	80088aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80088a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088a4:	e001      	b.n	80088aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20000118 	.word	0x20000118
 80088b8:	10624dd3 	.word	0x10624dd3

080088bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088c4:	4b22      	ldr	r3, [pc, #136]	; (8008950 <SDMMC_GetCmdResp7+0x94>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a22      	ldr	r2, [pc, #136]	; (8008954 <SDMMC_GetCmdResp7+0x98>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	0a5b      	lsrs	r3, r3, #9
 80088d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d4:	fb02 f303 	mul.w	r3, r2, r3
 80088d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	1e5a      	subs	r2, r3, #1
 80088de:	60fa      	str	r2, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088e8:	e02c      	b.n	8008944 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0ef      	beq.n	80088da <SDMMC_GetCmdResp7+0x1e>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1ea      	bne.n	80088da <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2204      	movs	r2, #4
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008916:	2304      	movs	r3, #4
 8008918:	e014      	b.n	8008944 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800892c:	2301      	movs	r3, #1
 800892e:	e009      	b.n	8008944 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2240      	movs	r2, #64	; 0x40
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008942:	2300      	movs	r3, #0
  
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000118 	.word	0x20000118
 8008954:	10624dd3 	.word	0x10624dd3

08008958 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008958:	b084      	sub	sp, #16
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	f107 001c 	add.w	r0, r7, #28
 8008966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	2b01      	cmp	r3, #1
 800896e:	d122      	bne.n	80089b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800899a:	2b01      	cmp	r3, #1
 800899c:	d105      	bne.n	80089aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fb1c 	bl	8009fe8 <USB_CoreReset>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
 80089b4:	e01a      	b.n	80089ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 fb10 	bl	8009fe8 <USB_CoreReset>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d106      	bne.n	80089e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38
 80089de:	e005      	b.n	80089ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d10b      	bne.n	8008a0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f043 0206 	orr.w	r2, r3, #6
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a16:	b004      	add	sp, #16
 8008a18:	4770      	bx	lr
	...

08008a1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d165      	bne.n	8008afc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4a41      	ldr	r2, [pc, #260]	; (8008b38 <USB_SetTurnaroundTime+0x11c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d906      	bls.n	8008a46 <USB_SetTurnaroundTime+0x2a>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	4a40      	ldr	r2, [pc, #256]	; (8008b3c <USB_SetTurnaroundTime+0x120>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d202      	bcs.n	8008a46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a40:	230f      	movs	r3, #15
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e062      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	4a3c      	ldr	r2, [pc, #240]	; (8008b3c <USB_SetTurnaroundTime+0x120>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d306      	bcc.n	8008a5c <USB_SetTurnaroundTime+0x40>
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	4a3b      	ldr	r2, [pc, #236]	; (8008b40 <USB_SetTurnaroundTime+0x124>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d202      	bcs.n	8008a5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a56:	230e      	movs	r3, #14
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	e057      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4a38      	ldr	r2, [pc, #224]	; (8008b40 <USB_SetTurnaroundTime+0x124>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d306      	bcc.n	8008a72 <USB_SetTurnaroundTime+0x56>
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	4a37      	ldr	r2, [pc, #220]	; (8008b44 <USB_SetTurnaroundTime+0x128>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d202      	bcs.n	8008a72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a6c:	230d      	movs	r3, #13
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e04c      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	4a33      	ldr	r2, [pc, #204]	; (8008b44 <USB_SetTurnaroundTime+0x128>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d306      	bcc.n	8008a88 <USB_SetTurnaroundTime+0x6c>
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	4a32      	ldr	r2, [pc, #200]	; (8008b48 <USB_SetTurnaroundTime+0x12c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d802      	bhi.n	8008a88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a82:	230c      	movs	r3, #12
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	e041      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4a2f      	ldr	r2, [pc, #188]	; (8008b48 <USB_SetTurnaroundTime+0x12c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d906      	bls.n	8008a9e <USB_SetTurnaroundTime+0x82>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	4a2e      	ldr	r2, [pc, #184]	; (8008b4c <USB_SetTurnaroundTime+0x130>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d802      	bhi.n	8008a9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008a98:	230b      	movs	r3, #11
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e036      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	4a2a      	ldr	r2, [pc, #168]	; (8008b4c <USB_SetTurnaroundTime+0x130>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d906      	bls.n	8008ab4 <USB_SetTurnaroundTime+0x98>
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	4a29      	ldr	r2, [pc, #164]	; (8008b50 <USB_SetTurnaroundTime+0x134>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d802      	bhi.n	8008ab4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008aae:	230a      	movs	r3, #10
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	e02b      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4a26      	ldr	r2, [pc, #152]	; (8008b50 <USB_SetTurnaroundTime+0x134>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d906      	bls.n	8008aca <USB_SetTurnaroundTime+0xae>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4a25      	ldr	r2, [pc, #148]	; (8008b54 <USB_SetTurnaroundTime+0x138>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d202      	bcs.n	8008aca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ac4:	2309      	movs	r3, #9
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	e020      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4a21      	ldr	r2, [pc, #132]	; (8008b54 <USB_SetTurnaroundTime+0x138>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d306      	bcc.n	8008ae0 <USB_SetTurnaroundTime+0xc4>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	4a20      	ldr	r2, [pc, #128]	; (8008b58 <USB_SetTurnaroundTime+0x13c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d802      	bhi.n	8008ae0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ada:	2308      	movs	r3, #8
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	e015      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4a1d      	ldr	r2, [pc, #116]	; (8008b58 <USB_SetTurnaroundTime+0x13c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d906      	bls.n	8008af6 <USB_SetTurnaroundTime+0xda>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	4a1c      	ldr	r2, [pc, #112]	; (8008b5c <USB_SetTurnaroundTime+0x140>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d202      	bcs.n	8008af6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008af0:	2307      	movs	r3, #7
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e00a      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008af6:	2306      	movs	r3, #6
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	e007      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d102      	bne.n	8008b08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b02:	2309      	movs	r3, #9
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e001      	b.n	8008b0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b08:	2309      	movs	r3, #9
 8008b0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	029b      	lsls	r3, r3, #10
 8008b20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b24:	431a      	orrs	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	00d8acbf 	.word	0x00d8acbf
 8008b3c:	00e4e1c0 	.word	0x00e4e1c0
 8008b40:	00f42400 	.word	0x00f42400
 8008b44:	01067380 	.word	0x01067380
 8008b48:	011a499f 	.word	0x011a499f
 8008b4c:	01312cff 	.word	0x01312cff
 8008b50:	014ca43f 	.word	0x014ca43f
 8008b54:	016e3600 	.word	0x016e3600
 8008b58:	01a6ab1f 	.word	0x01a6ab1f
 8008b5c:	01e84800 	.word	0x01e84800

08008b60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f043 0201 	orr.w	r2, r3, #1
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f023 0201 	bic.w	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d115      	bne.n	8008bf2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	f7f8 fb6e 	bl	80012b4 <HAL_Delay>
      ms++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 f972 	bl	8009ec8 <USB_GetMode>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d01e      	beq.n	8008c28 <USB_SetCurrentMode+0x84>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b31      	cmp	r3, #49	; 0x31
 8008bee:	d9f0      	bls.n	8008bd2 <USB_SetCurrentMode+0x2e>
 8008bf0:	e01a      	b.n	8008c28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d115      	bne.n	8008c24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c04:	2001      	movs	r0, #1
 8008c06:	f7f8 fb55 	bl	80012b4 <HAL_Delay>
      ms++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f959 	bl	8009ec8 <USB_GetMode>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <USB_SetCurrentMode+0x84>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2b31      	cmp	r3, #49	; 0x31
 8008c20:	d9f0      	bls.n	8008c04 <USB_SetCurrentMode+0x60>
 8008c22:	e001      	b.n	8008c28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e005      	b.n	8008c34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b32      	cmp	r3, #50	; 0x32
 8008c2c:	d101      	bne.n	8008c32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c56:	2300      	movs	r3, #0
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	e009      	b.n	8008c70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3340      	adds	r3, #64	; 0x40
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	2200      	movs	r2, #0
 8008c68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b0e      	cmp	r3, #14
 8008c74:	d9f2      	bls.n	8008c5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d11c      	bne.n	8008cb6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c8a:	f043 0302 	orr.w	r3, r3, #2
 8008c8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8008cb4:	e00b      	b.n	8008cce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce8:	461a      	mov	r2, r3
 8008cea:	680b      	ldr	r3, [r1, #0]
 8008cec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d10c      	bne.n	8008d0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f945 	bl	8008f8c <USB_SetDevSpeed>
 8008d02:	e008      	b.n	8008d16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d04:	2101      	movs	r1, #1
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f940 	bl	8008f8c <USB_SetDevSpeed>
 8008d0c:	e003      	b.n	8008d16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d0e:	2103      	movs	r1, #3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f93b 	bl	8008f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d16:	2110      	movs	r1, #16
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8f3 	bl	8008f04 <USB_FlushTxFifo>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f90f 	bl	8008f4c <USB_FlushRxFifo>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2300      	movs	r3, #0
 8008d42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d56:	461a      	mov	r2, r3
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	613b      	str	r3, [r7, #16]
 8008d60:	e043      	b.n	8008dea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d78:	d118      	bne.n	8008dac <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	e013      	b.n	8008dbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da2:	461a      	mov	r2, r3
 8008da4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e008      	b.n	8008dbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	461a      	mov	r2, r3
 8008dde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008de2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	3301      	adds	r3, #1
 8008de8:	613b      	str	r3, [r7, #16]
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d3b7      	bcc.n	8008d62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	e043      	b.n	8008e80 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e0e:	d118      	bne.n	8008e42 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e22:	461a      	mov	r2, r3
 8008e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	e013      	b.n	8008e54 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e008      	b.n	8008e54 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e60:	461a      	mov	r2, r3
 8008e62:	2300      	movs	r3, #0
 8008e64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	461a      	mov	r2, r3
 8008e74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3b7      	bcc.n	8008df8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ea8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d105      	bne.n	8008ebc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f043 0210 	orr.w	r2, r3, #16
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699a      	ldr	r2, [r3, #24]
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <USB_DevInit+0x2c4>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f043 0208 	orr.w	r2, r3, #8
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d107      	bne.n	8008ef0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ee8:	f043 0304 	orr.w	r3, r3, #4
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008efc:	b004      	add	sp, #16
 8008efe:	4770      	bx	lr
 8008f00:	803c3800 	.word	0x803c3800

08008f04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	019b      	lsls	r3, r3, #6
 8008f16:	f043 0220 	orr.w	r2, r3, #32
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3301      	adds	r3, #1
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	4a08      	ldr	r2, [pc, #32]	; (8008f48 <USB_FlushTxFifo+0x44>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d901      	bls.n	8008f2e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e006      	b.n	8008f3c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d0f1      	beq.n	8008f1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	00030d40 	.word	0x00030d40

08008f4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2210      	movs	r2, #16
 8008f5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	4a08      	ldr	r2, [pc, #32]	; (8008f88 <USB_FlushRxFifo+0x3c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d901      	bls.n	8008f6e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e006      	b.n	8008f7c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0310 	and.w	r3, r3, #16
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d0f1      	beq.n	8008f5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	00030d40 	.word	0x00030d40

08008f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fac:	4313      	orrs	r3, r2
 8008fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 0306 	and.w	r3, r3, #6
 8008fd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
 8008fe2:	e00a      	b.n	8008ffa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d002      	beq.n	8008ff0 <USB_GetDevSpeed+0x32>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b06      	cmp	r3, #6
 8008fee:	d102      	bne.n	8008ff6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	75fb      	strb	r3, [r7, #23]
 8008ff4:	e001      	b.n	8008ffa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ff6:	230f      	movs	r3, #15
 8008ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	371c      	adds	r7, #28
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	785b      	ldrb	r3, [r3, #1]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d13a      	bne.n	800909a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	69da      	ldr	r2, [r3, #28]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	f003 030f 	and.w	r3, r3, #15
 8009034:	2101      	movs	r1, #1
 8009036:	fa01 f303 	lsl.w	r3, r1, r3
 800903a:	b29b      	uxth	r3, r3
 800903c:	68f9      	ldr	r1, [r7, #12]
 800903e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009042:	4313      	orrs	r3, r2
 8009044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d155      	bne.n	8009108 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	78db      	ldrb	r3, [r3, #3]
 8009076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	059b      	lsls	r3, r3, #22
 800907e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009080:	4313      	orrs	r3, r2
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	440a      	add	r2, r1
 800908a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800908e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	e036      	b.n	8009108 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	69da      	ldr	r2, [r3, #28]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	2101      	movs	r1, #1
 80090ac:	fa01 f303 	lsl.w	r3, r1, r3
 80090b0:	041b      	lsls	r3, r3, #16
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b8:	4313      	orrs	r3, r2
 80090ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d11a      	bne.n	8009108 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	78db      	ldrb	r3, [r3, #3]
 80090ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090ee:	430b      	orrs	r3, r1
 80090f0:	4313      	orrs	r3, r2
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009106:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
	...

08009118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d161      	bne.n	80091f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914a:	d11f      	bne.n	800918c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800916a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	440a      	add	r2, r1
 8009182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800918a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	2101      	movs	r1, #1
 800919e:	fa01 f303 	lsl.w	r3, r1, r3
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	43db      	mvns	r3, r3
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091ac:	4013      	ands	r3, r2
 80091ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	69da      	ldr	r2, [r3, #28]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	43db      	mvns	r3, r3
 80091ca:	68f9      	ldr	r1, [r7, #12]
 80091cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091d0:	4013      	ands	r3, r2
 80091d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	0159      	lsls	r1, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	440b      	add	r3, r1
 80091ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ee:	4619      	mov	r1, r3
 80091f0:	4b35      	ldr	r3, [pc, #212]	; (80092c8 <USB_DeactivateEndpoint+0x1b0>)
 80091f2:	4013      	ands	r3, r2
 80091f4:	600b      	str	r3, [r1, #0]
 80091f6:	e060      	b.n	80092ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800920a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800920e:	d11f      	bne.n	8009250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	440a      	add	r2, r1
 8009226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800922e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800924e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	2101      	movs	r1, #1
 8009262:	fa01 f303 	lsl.w	r3, r1, r3
 8009266:	041b      	lsls	r3, r3, #16
 8009268:	43db      	mvns	r3, r3
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009270:	4013      	ands	r3, r2
 8009272:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	69da      	ldr	r2, [r3, #28]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 030f 	and.w	r3, r3, #15
 8009284:	2101      	movs	r1, #1
 8009286:	fa01 f303 	lsl.w	r3, r1, r3
 800928a:	041b      	lsls	r3, r3, #16
 800928c:	43db      	mvns	r3, r3
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009294:	4013      	ands	r3, r2
 8009296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	0159      	lsls	r1, r3, #5
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	440b      	add	r3, r1
 80092ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b2:	4619      	mov	r1, r3
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <USB_DeactivateEndpoint+0x1b4>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	ec337800 	.word	0xec337800
 80092cc:	eff37800 	.word	0xeff37800

080092d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	; 0x28
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	4613      	mov	r3, r2
 80092dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	785b      	ldrb	r3, [r3, #1]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	f040 815c 	bne.w	80095aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d132      	bne.n	8009360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	4413      	add	r3, r2
 8009302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	0151      	lsls	r1, r2, #5
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	440a      	add	r2, r1
 8009310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009314:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009318:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800931c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	0151      	lsls	r1, r2, #5
 8009330:	69fa      	ldr	r2, [r7, #28]
 8009332:	440a      	add	r2, r1
 8009334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800933c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	0151      	lsls	r1, r2, #5
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	440a      	add	r2, r1
 8009354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009358:	0cdb      	lsrs	r3, r3, #19
 800935a:	04db      	lsls	r3, r3, #19
 800935c:	6113      	str	r3, [r2, #16]
 800935e:	e074      	b.n	800944a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	0151      	lsls	r1, r2, #5
 8009372:	69fa      	ldr	r2, [r7, #28]
 8009374:	440a      	add	r2, r1
 8009376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937a:	0cdb      	lsrs	r3, r3, #19
 800937c:	04db      	lsls	r3, r3, #19
 800937e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	0151      	lsls	r1, r2, #5
 8009392:	69fa      	ldr	r2, [r7, #28]
 8009394:	440a      	add	r2, r1
 8009396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800939a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800939e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6959      	ldr	r1, [r3, #20]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	440b      	add	r3, r1
 80093bc:	1e59      	subs	r1, r3, #1
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80093c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80093c8:	4b9d      	ldr	r3, [pc, #628]	; (8009640 <USB_EPStartXfer+0x370>)
 80093ca:	400b      	ands	r3, r1
 80093cc:	69b9      	ldr	r1, [r7, #24]
 80093ce:	0148      	lsls	r0, r1, #5
 80093d0:	69f9      	ldr	r1, [r7, #28]
 80093d2:	4401      	add	r1, r0
 80093d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093d8:	4313      	orrs	r3, r2
 80093da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093f2:	69b9      	ldr	r1, [r7, #24]
 80093f4:	0148      	lsls	r0, r1, #5
 80093f6:	69f9      	ldr	r1, [r7, #28]
 80093f8:	4401      	add	r1, r0
 80093fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093fe:	4313      	orrs	r3, r2
 8009400:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	78db      	ldrb	r3, [r3, #3]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d11f      	bne.n	800944a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	440a      	add	r2, r1
 8009420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009424:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009428:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009448:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d14b      	bne.n	80094e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009464:	461a      	mov	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	78db      	ldrb	r3, [r3, #3]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d128      	bne.n	80094c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009480:	2b00      	cmp	r3, #0
 8009482:	d110      	bne.n	80094a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	440a      	add	r2, r1
 800949a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800949e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	e00f      	b.n	80094c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	69fa      	ldr	r2, [r7, #28]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	e12f      	b.n	8009748 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	0151      	lsls	r1, r2, #5
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	440a      	add	r2, r1
 80094fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009502:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009506:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	78db      	ldrb	r3, [r3, #3]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d015      	beq.n	800953c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8117 	beq.w	8009748 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	2101      	movs	r1, #1
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	69f9      	ldr	r1, [r7, #28]
 8009532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009536:	4313      	orrs	r3, r2
 8009538:	634b      	str	r3, [r1, #52]	; 0x34
 800953a:	e105      	b.n	8009748 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009548:	2b00      	cmp	r3, #0
 800954a:	d110      	bne.n	800956e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	0151      	lsls	r1, r2, #5
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	440a      	add	r2, r1
 8009562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009566:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	e00f      	b.n	800958e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4413      	add	r3, r2
 8009576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	0151      	lsls	r1, r2, #5
 8009580:	69fa      	ldr	r2, [r7, #28]
 8009582:	440a      	add	r2, r1
 8009584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800958c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	68d9      	ldr	r1, [r3, #12]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	781a      	ldrb	r2, [r3, #0]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	b298      	uxth	r0, r3
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4603      	mov	r3, r0
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 fa2b 	bl	80099fe <USB_WritePacket>
 80095a8:	e0ce      	b.n	8009748 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	0151      	lsls	r1, r2, #5
 80095bc:	69fa      	ldr	r2, [r7, #28]
 80095be:	440a      	add	r2, r1
 80095c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c4:	0cdb      	lsrs	r3, r3, #19
 80095c6:	04db      	lsls	r3, r3, #19
 80095c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d126      	bne.n	8009644 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800960c:	69b9      	ldr	r1, [r7, #24]
 800960e:	0148      	lsls	r0, r1, #5
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	4401      	add	r1, r0
 8009614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009618:	4313      	orrs	r3, r2
 800961a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	0151      	lsls	r1, r2, #5
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	440a      	add	r2, r1
 8009632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800963a:	6113      	str	r3, [r2, #16]
 800963c:	e036      	b.n	80096ac <USB_EPStartXfer+0x3dc>
 800963e:	bf00      	nop
 8009640:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	695a      	ldr	r2, [r3, #20]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	4413      	add	r3, r2
 800964e:	1e5a      	subs	r2, r3, #1
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	fbb2 f3f3 	udiv	r3, r2, r3
 8009658:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	8afb      	ldrh	r3, [r7, #22]
 800966a:	04d9      	lsls	r1, r3, #19
 800966c:	4b39      	ldr	r3, [pc, #228]	; (8009754 <USB_EPStartXfer+0x484>)
 800966e:	400b      	ands	r3, r1
 8009670:	69b9      	ldr	r1, [r7, #24]
 8009672:	0148      	lsls	r0, r1, #5
 8009674:	69f9      	ldr	r1, [r7, #28]
 8009676:	4401      	add	r1, r0
 8009678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800967c:	4313      	orrs	r3, r2
 800967e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968c:	691a      	ldr	r2, [r3, #16]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	8af9      	ldrh	r1, [r7, #22]
 8009694:	fb01 f303 	mul.w	r3, r1, r3
 8009698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800969c:	69b9      	ldr	r1, [r7, #24]
 800969e:	0148      	lsls	r0, r1, #5
 80096a0:	69f9      	ldr	r1, [r7, #28]
 80096a2:	4401      	add	r1, r0
 80096a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096a8:	4313      	orrs	r3, r2
 80096aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d10d      	bne.n	80096ce <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d009      	beq.n	80096ce <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	68d9      	ldr	r1, [r3, #12]
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	460a      	mov	r2, r1
 80096cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	78db      	ldrb	r3, [r3, #3]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d128      	bne.n	8009728 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d110      	bne.n	8009708 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	0151      	lsls	r1, r2, #5
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	440a      	add	r2, r1
 80096fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009700:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	e00f      	b.n	8009728 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	0151      	lsls	r1, r2, #5
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	440a      	add	r2, r1
 800971e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009726:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	0151      	lsls	r1, r2, #5
 800973a:	69fa      	ldr	r2, [r7, #28]
 800973c:	440a      	add	r2, r1
 800973e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009742:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	1ff80000 	.word	0x1ff80000

08009758 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b01      	cmp	r3, #1
 8009776:	f040 80cd 	bne.w	8009914 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d132      	bne.n	80097e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	0151      	lsls	r1, r2, #5
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	440a      	add	r2, r1
 80097bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	0151      	lsls	r1, r2, #5
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	440a      	add	r2, r1
 80097dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e0:	0cdb      	lsrs	r3, r3, #19
 80097e2:	04db      	lsls	r3, r3, #19
 80097e4:	6113      	str	r3, [r2, #16]
 80097e6:	e04e      	b.n	8009886 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	0151      	lsls	r1, r2, #5
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	440a      	add	r2, r1
 80097fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009802:	0cdb      	lsrs	r3, r3, #19
 8009804:	04db      	lsls	r3, r3, #19
 8009806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	440a      	add	r2, r1
 800981e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009822:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009826:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800982a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	695a      	ldr	r2, [r3, #20]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	429a      	cmp	r2, r3
 8009836:	d903      	bls.n	8009840 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	0151      	lsls	r1, r2, #5
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	440a      	add	r2, r1
 8009856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800985a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800985e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009876:	6939      	ldr	r1, [r7, #16]
 8009878:	0148      	lsls	r0, r1, #5
 800987a:	6979      	ldr	r1, [r7, #20]
 800987c:	4401      	add	r1, r0
 800987e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009882:	4313      	orrs	r3, r2
 8009884:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d11e      	bne.n	80098ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a0:	461a      	mov	r2, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	0151      	lsls	r1, r2, #5
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	440a      	add	r2, r1
 80098be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	e092      	b.n	80099f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	0151      	lsls	r1, r2, #5
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	440a      	add	r2, r1
 80098e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d07e      	beq.n	80099f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	2101      	movs	r1, #1
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	6979      	ldr	r1, [r7, #20]
 800990a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800990e:	4313      	orrs	r3, r2
 8009910:	634b      	str	r3, [r1, #52]	; 0x34
 8009912:	e06d      	b.n	80099f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	440a      	add	r2, r1
 800992a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800992e:	0cdb      	lsrs	r3, r3, #19
 8009930:	04db      	lsls	r3, r3, #19
 8009932:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	0151      	lsls	r1, r2, #5
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	440a      	add	r2, r1
 800994a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800994e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009956:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	689a      	ldr	r2, [r3, #8]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	0151      	lsls	r1, r2, #5
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	440a      	add	r2, r1
 800997e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009986:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	691a      	ldr	r2, [r3, #16]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800999e:	6939      	ldr	r1, [r7, #16]
 80099a0:	0148      	lsls	r0, r1, #5
 80099a2:	6979      	ldr	r1, [r7, #20]
 80099a4:	4401      	add	r1, r0
 80099a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099aa:	4313      	orrs	r3, r2
 80099ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d10d      	bne.n	80099d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	68d9      	ldr	r1, [r3, #12]
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	460a      	mov	r2, r1
 80099ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b089      	sub	sp, #36	; 0x24
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	4611      	mov	r1, r2
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	71fb      	strb	r3, [r7, #7]
 8009a10:	4613      	mov	r3, r2
 8009a12:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d123      	bne.n	8009a6c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a24:	88bb      	ldrh	r3, [r7, #4]
 8009a26:	3303      	adds	r3, #3
 8009a28:	089b      	lsrs	r3, r3, #2
 8009a2a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]
 8009a30:	e018      	b.n	8009a64 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	031a      	lsls	r2, r3, #12
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a3e:	461a      	mov	r2, r3
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	3301      	adds	r3, #1
 8009a56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	3301      	adds	r3, #1
 8009a62:	61bb      	str	r3, [r7, #24]
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d3e2      	bcc.n	8009a32 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3724      	adds	r7, #36	; 0x24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b08b      	sub	sp, #44	; 0x2c
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	4613      	mov	r3, r2
 8009a86:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a90:	88fb      	ldrh	r3, [r7, #6]
 8009a92:	089b      	lsrs	r3, r3, #2
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a98:	88fb      	ldrh	r3, [r7, #6]
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	623b      	str	r3, [r7, #32]
 8009aa4:	e014      	b.n	8009ad0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	3301      	adds	r3, #1
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	3301      	adds	r3, #1
 8009ace:	623b      	str	r3, [r7, #32]
 8009ad0:	6a3a      	ldr	r2, [r7, #32]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d3e6      	bcc.n	8009aa6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009ad8:	8bfb      	ldrh	r3, [r7, #30]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d01e      	beq.n	8009b1c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae8:	461a      	mov	r2, r3
 8009aea:	f107 0310 	add.w	r3, r7, #16
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	fa22 f303 	lsr.w	r3, r2, r3
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	701a      	strb	r2, [r3, #0]
      i++;
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	3301      	adds	r3, #1
 8009b08:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b10:	8bfb      	ldrh	r3, [r7, #30]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b16:	8bfb      	ldrh	r3, [r7, #30]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1ea      	bne.n	8009af2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	372c      	adds	r7, #44	; 0x2c
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d12c      	bne.n	8009ba0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	db12      	blt.n	8009b7e <USB_EPSetStall+0x54>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00f      	beq.n	8009b7e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	0151      	lsls	r1, r2, #5
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	440a      	add	r2, r1
 8009b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b7c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	0151      	lsls	r1, r2, #5
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	440a      	add	r2, r1
 8009b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e02b      	b.n	8009bf8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	db12      	blt.n	8009bd8 <USB_EPSetStall+0xae>
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00f      	beq.n	8009bd8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bd6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	785b      	ldrb	r3, [r3, #1]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d128      	bne.n	8009c74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	78db      	ldrb	r3, [r3, #3]
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d003      	beq.n	8009c52 <USB_EPClearStall+0x4c>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	78db      	ldrb	r3, [r3, #3]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d138      	bne.n	8009cc4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e027      	b.n	8009cc4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	78db      	ldrb	r3, [r3, #3]
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d003      	beq.n	8009ca4 <USB_EPClearStall+0x9e>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	78db      	ldrb	r3, [r3, #3]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d10f      	bne.n	8009cc4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	0151      	lsls	r1, r2, #5
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	440a      	add	r2, r1
 8009cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cc2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009cf4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	78fb      	ldrb	r3, [r7, #3]
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d4c:	f023 0302 	bic.w	r3, r3, #2
 8009d50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d8e:	f043 0302 	orr.w	r3, r3, #2
 8009d92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4013      	ands	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dba:	68fb      	ldr	r3, [r7, #12]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	4013      	ands	r3, r2
 8009dea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	0c1b      	lsrs	r3, r3, #16
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	b29b      	uxth	r3, r3
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	fa22 f303 	lsr.w	r3, r2, r3
 8009e9c:	01db      	lsls	r3, r3, #7
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009eba:	68bb      	ldr	r3, [r7, #8]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	371c      	adds	r7, #28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f02:	f023 0307 	bic.w	r3, r3, #7
 8009f06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	460b      	mov	r3, r1
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	333c      	adds	r3, #60	; 0x3c
 8009f42:	3304      	adds	r3, #4
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	4a26      	ldr	r2, [pc, #152]	; (8009fe4 <USB_EP0_OutStart+0xb8>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d90a      	bls.n	8009f66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f60:	d101      	bne.n	8009f66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	e037      	b.n	8009fd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	2300      	movs	r3, #0
 8009f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f94:	f043 0318 	orr.w	r3, r3, #24
 8009f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d10f      	bne.n	8009fd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	4f54300a 	.word	0x4f54300a

08009fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	4a13      	ldr	r2, [pc, #76]	; (800a048 <USB_CoreReset+0x60>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d901      	bls.n	800a004 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	e01a      	b.n	800a03a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	daf3      	bge.n	8009ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	f043 0201 	orr.w	r2, r3, #1
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	4a09      	ldr	r2, [pc, #36]	; (800a048 <USB_CoreReset+0x60>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d901      	bls.n	800a02c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e006      	b.n	800a03a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b01      	cmp	r3, #1
 800a036:	d0f1      	beq.n	800a01c <USB_CoreReset+0x34>

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	00030d40 	.word	0x00030d40

0800a04c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a058:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a05c:	f003 fd3c 	bl	800dad8 <USBD_static_malloc>
 800a060:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d105      	bne.n	800a074 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a070:	2302      	movs	r3, #2
 800a072:	e066      	b.n	800a142 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	7c1b      	ldrb	r3, [r3, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d119      	bne.n	800a0b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a084:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a088:	2202      	movs	r2, #2
 800a08a:	2181      	movs	r1, #129	; 0x81
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f003 fc00 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a09c:	2202      	movs	r2, #2
 800a09e:	2101      	movs	r1, #1
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f003 fbf6 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2210      	movs	r2, #16
 800a0b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a0b6:	e016      	b.n	800a0e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0b8:	2340      	movs	r3, #64	; 0x40
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	2181      	movs	r1, #129	; 0x81
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f003 fbe7 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0ca:	2340      	movs	r3, #64	; 0x40
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f003 fbde 	bl	800d892 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2210      	movs	r2, #16
 800a0e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0e6:	2308      	movs	r3, #8
 800a0e8:	2203      	movs	r2, #3
 800a0ea:	2182      	movs	r1, #130	; 0x82
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f003 fbd0 	bl	800d892 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	7c1b      	ldrb	r3, [r3, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a122:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a126:	2101      	movs	r1, #1
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f003 fca1 	bl	800da70 <USBD_LL_PrepareReceive>
 800a12e:	e007      	b.n	800a140 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	2101      	movs	r1, #1
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f003 fc98 	bl	800da70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	460b      	mov	r3, r1
 800a154:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a156:	2181      	movs	r1, #129	; 0x81
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f003 fbc0 	bl	800d8de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a164:	2101      	movs	r1, #1
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f003 fbb9 	bl	800d8de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a174:	2182      	movs	r1, #130	; 0x82
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f003 fbb1 	bl	800d8de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f003 fca4 	bl	800daf4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e0af      	b.n	800a348 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d03f      	beq.n	800a274 <USBD_CDC_Setup+0xb4>
 800a1f4:	2b20      	cmp	r3, #32
 800a1f6:	f040 809f 	bne.w	800a338 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	88db      	ldrh	r3, [r3, #6]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d02e      	beq.n	800a260 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	b25b      	sxtb	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	da16      	bge.n	800a23a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a218:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	88d2      	ldrh	r2, [r2, #6]
 800a21e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	88db      	ldrh	r3, [r3, #6]
 800a224:	2b07      	cmp	r3, #7
 800a226:	bf28      	it	cs
 800a228:	2307      	movcs	r3, #7
 800a22a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	89fa      	ldrh	r2, [r7, #14]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f001 fb19 	bl	800b86a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a238:	e085      	b.n	800a346 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	785a      	ldrb	r2, [r3, #1]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	88db      	ldrh	r3, [r3, #6]
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a250:	6939      	ldr	r1, [r7, #16]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	88db      	ldrh	r3, [r3, #6]
 800a256:	461a      	mov	r2, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 fb32 	bl	800b8c2 <USBD_CtlPrepareRx>
      break;
 800a25e:	e072      	b.n	800a346 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	7850      	ldrb	r0, [r2, #1]
 800a26c:	2200      	movs	r2, #0
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	4798      	blx	r3
      break;
 800a272:	e068      	b.n	800a346 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	2b0b      	cmp	r3, #11
 800a27a:	d852      	bhi.n	800a322 <USBD_CDC_Setup+0x162>
 800a27c:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <USBD_CDC_Setup+0xc4>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a2b5 	.word	0x0800a2b5
 800a288:	0800a331 	.word	0x0800a331
 800a28c:	0800a323 	.word	0x0800a323
 800a290:	0800a323 	.word	0x0800a323
 800a294:	0800a323 	.word	0x0800a323
 800a298:	0800a323 	.word	0x0800a323
 800a29c:	0800a323 	.word	0x0800a323
 800a2a0:	0800a323 	.word	0x0800a323
 800a2a4:	0800a323 	.word	0x0800a323
 800a2a8:	0800a323 	.word	0x0800a323
 800a2ac:	0800a2df 	.word	0x0800a2df
 800a2b0:	0800a309 	.word	0x0800a309
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d107      	bne.n	800a2d0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a2c0:	f107 030a 	add.w	r3, r7, #10
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 face 	bl	800b86a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2ce:	e032      	b.n	800a336 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f001 fa58 	bl	800b788 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	75fb      	strb	r3, [r7, #23]
          break;
 800a2dc:	e02b      	b.n	800a336 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d107      	bne.n	800a2fa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a2ea:	f107 030d 	add.w	r3, r7, #13
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 fab9 	bl	800b86a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2f8:	e01d      	b.n	800a336 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 fa43 	bl	800b788 <USBD_CtlError>
            ret = USBD_FAIL;
 800a302:	2303      	movs	r3, #3
 800a304:	75fb      	strb	r3, [r7, #23]
          break;
 800a306:	e016      	b.n	800a336 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b03      	cmp	r3, #3
 800a312:	d00f      	beq.n	800a334 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f001 fa36 	bl	800b788 <USBD_CtlError>
            ret = USBD_FAIL;
 800a31c:	2303      	movs	r3, #3
 800a31e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a320:	e008      	b.n	800a334 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 fa2f 	bl	800b788 <USBD_CtlError>
          ret = USBD_FAIL;
 800a32a:	2303      	movs	r3, #3
 800a32c:	75fb      	strb	r3, [r7, #23]
          break;
 800a32e:	e002      	b.n	800a336 <USBD_CDC_Setup+0x176>
          break;
 800a330:	bf00      	nop
 800a332:	e008      	b.n	800a346 <USBD_CDC_Setup+0x186>
          break;
 800a334:	bf00      	nop
      }
      break;
 800a336:	e006      	b.n	800a346 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 fa24 	bl	800b788 <USBD_CtlError>
      ret = USBD_FAIL;
 800a340:	2303      	movs	r3, #3
 800a342:	75fb      	strb	r3, [r7, #23]
      break;
 800a344:	bf00      	nop
  }

  return (uint8_t)ret;
 800a346:	7dfb      	ldrb	r3, [r7, #23]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a362:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a36e:	2303      	movs	r3, #3
 800a370:	e04f      	b.n	800a412 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a378:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	6879      	ldr	r1, [r7, #4]
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	440b      	add	r3, r1
 800a388:	3318      	adds	r3, #24
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d029      	beq.n	800a3e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a390:	78fa      	ldrb	r2, [r7, #3]
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	4613      	mov	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	440b      	add	r3, r1
 800a39e:	3318      	adds	r3, #24
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	78f9      	ldrb	r1, [r7, #3]
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	00db      	lsls	r3, r3, #3
 800a3aa:	1a5b      	subs	r3, r3, r1
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4403      	add	r3, r0
 800a3b0:	3344      	adds	r3, #68	; 0x44
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3b8:	fb03 f301 	mul.w	r3, r3, r1
 800a3bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d110      	bne.n	800a3e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a3c2:	78fa      	ldrb	r2, [r7, #3]
 800a3c4:	6879      	ldr	r1, [r7, #4]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	440b      	add	r3, r1
 800a3d0:	3318      	adds	r3, #24
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a3d6:	78f9      	ldrb	r1, [r7, #3]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2200      	movs	r2, #0
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f003 fb26 	bl	800da2e <USBD_LL_Transmit>
 800a3e2:	e015      	b.n	800a410 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00b      	beq.n	800a410 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a40c:	78fa      	ldrb	r2, [r7, #3]
 800a40e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a42c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a438:	2303      	movs	r3, #3
 800a43a:	e015      	b.n	800a468 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f003 fb36 	bl	800dab2 <USBD_LL_GetRxDataSize>
 800a446:	4602      	mov	r2, r0
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a462:	4611      	mov	r1, r2
 800a464:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a47e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a486:	2303      	movs	r3, #3
 800a488:	e01b      	b.n	800a4c2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d015      	beq.n	800a4c0 <USBD_CDC_EP0_RxReady+0x50>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a49a:	2bff      	cmp	r3, #255	; 0xff
 800a49c:	d010      	beq.n	800a4c0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a4ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4b4:	b292      	uxth	r2, r2
 800a4b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	22ff      	movs	r2, #255	; 0xff
 800a4bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2243      	movs	r2, #67	; 0x43
 800a4d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a4da:	4b03      	ldr	r3, [pc, #12]	; (800a4e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	20000090 	.word	0x20000090

0800a4ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2243      	movs	r2, #67	; 0x43
 800a4f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a4fa:	4b03      	ldr	r3, [pc, #12]	; (800a508 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	2000004c 	.word	0x2000004c

0800a50c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2243      	movs	r2, #67	; 0x43
 800a518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a51a:	4b03      	ldr	r3, [pc, #12]	; (800a528 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	200000d4 	.word	0x200000d4

0800a52c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	220a      	movs	r2, #10
 800a538:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a53a:	4b03      	ldr	r3, [pc, #12]	; (800a548 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	20000008 	.word	0x20000008

0800a54c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d101      	bne.n	800a560 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e004      	b.n	800a56a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a576:	b480      	push	{r7}
 800a578:	b087      	sub	sp, #28
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a588:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a590:	2303      	movs	r3, #3
 800a592:	e008      	b.n	800a5a6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e004      	b.n	800a5d8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5f2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a602:	2303      	movs	r3, #3
 800a604:	e01a      	b.n	800a63c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d114      	bne.n	800a63a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2201      	movs	r2, #1
 800a614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a62e:	2181      	movs	r1, #129	; 0x81
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f003 f9fc 	bl	800da2e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a652:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a65e:	2303      	movs	r3, #3
 800a660:	e016      	b.n	800a690 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	7c1b      	ldrb	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d109      	bne.n	800a67e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a670:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a674:	2101      	movs	r1, #1
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f003 f9fa 	bl	800da70 <USBD_LL_PrepareReceive>
 800a67c:	e007      	b.n	800a68e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a684:	2340      	movs	r3, #64	; 0x40
 800a686:	2101      	movs	r1, #1
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f003 f9f1 	bl	800da70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e01f      	b.n	800a6f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	79fa      	ldrb	r2, [r7, #7]
 800a6e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f003 f86d 	bl	800d7c4 <USBD_LL_Init>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e016      	b.n	800a73e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00b      	beq.n	800a73c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	f107 020e 	add.w	r2, r7, #14
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	4602      	mov	r2, r0
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f003 f884 	bl	800d85c <USBD_LL_Start>
 800a754:	4603      	mov	r3, r0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a780:	2303      	movs	r3, #3
 800a782:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d009      	beq.n	800a7a2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	4611      	mov	r1, r2
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d007      	beq.n	800a7d2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	4798      	blx	r3
  }

  return USBD_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 ff90 	bl	800b714 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a802:	461a      	mov	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a810:	f003 031f 	and.w	r3, r3, #31
 800a814:	2b02      	cmp	r3, #2
 800a816:	d01a      	beq.n	800a84e <USBD_LL_SetupStage+0x72>
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d822      	bhi.n	800a862 <USBD_LL_SetupStage+0x86>
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <USBD_LL_SetupStage+0x4a>
 800a820:	2b01      	cmp	r3, #1
 800a822:	d00a      	beq.n	800a83a <USBD_LL_SetupStage+0x5e>
 800a824:	e01d      	b.n	800a862 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa62 	bl	800acf8 <USBD_StdDevReq>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
      break;
 800a838:	e020      	b.n	800a87c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fac6 	bl	800add4 <USBD_StdItfReq>
 800a848:	4603      	mov	r3, r0
 800a84a:	73fb      	strb	r3, [r7, #15]
      break;
 800a84c:	e016      	b.n	800a87c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb05 	bl	800ae66 <USBD_StdEPReq>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73fb      	strb	r3, [r7, #15]
      break;
 800a860:	e00c      	b.n	800a87c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f003 f853 	bl	800d91c <USBD_LL_StallEP>
 800a876:	4603      	mov	r3, r0
 800a878:	73fb      	strb	r3, [r7, #15]
      break;
 800a87a:	bf00      	nop
  }

  return ret;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b086      	sub	sp, #24
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	460b      	mov	r3, r1
 800a890:	607a      	str	r2, [r7, #4]
 800a892:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a894:	7afb      	ldrb	r3, [r7, #11]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d138      	bne.n	800a90c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d14a      	bne.n	800a942 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	689a      	ldr	r2, [r3, #8]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d913      	bls.n	800a8e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	689a      	ldr	r2, [r3, #8]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	1ad2      	subs	r2, r2, r3
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	68da      	ldr	r2, [r3, #12]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	bf28      	it	cs
 800a8d2:	4613      	movcs	r3, r2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	6879      	ldr	r1, [r7, #4]
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f001 f80f 	bl	800b8fc <USBD_CtlContinueRx>
 800a8de:	e030      	b.n	800a942 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d10b      	bne.n	800a904 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f001 f80a 	bl	800b91e <USBD_CtlSendStatus>
 800a90a:	e01a      	b.n	800a942 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b03      	cmp	r3, #3
 800a916:	d114      	bne.n	800a942 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00e      	beq.n	800a942 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	7afa      	ldrb	r2, [r7, #11]
 800a92e:	4611      	mov	r1, r2
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	4798      	blx	r3
 800a934:	4603      	mov	r3, r0
 800a936:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	e000      	b.n	800a944 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3718      	adds	r7, #24
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	460b      	mov	r3, r1
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a95a:	7afb      	ldrb	r3, [r7, #11]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d16b      	bne.n	800aa38 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3314      	adds	r3, #20
 800a964:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d156      	bne.n	800aa1e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d914      	bls.n	800a9a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	689a      	ldr	r2, [r3, #8]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	1ad2      	subs	r2, r2, r3
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	461a      	mov	r2, r3
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 ff84 	bl	800b8a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a998:	2300      	movs	r3, #0
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f003 f866 	bl	800da70 <USBD_LL_PrepareReceive>
 800a9a4:	e03b      	b.n	800aa1e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d11c      	bne.n	800a9ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d316      	bcc.n	800a9ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d20f      	bcs.n	800a9ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 ff65 	bl	800b8a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f003 f843 	bl	800da70 <USBD_LL_PrepareReceive>
 800a9ea:	e018      	b.n	800aa1e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d10b      	bne.n	800aa10 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa10:	2180      	movs	r1, #128	; 0x80
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f002 ff82 	bl	800d91c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 ff93 	bl	800b944 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d122      	bne.n	800aa6e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7ff fe98 	bl	800a75e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa36:	e01a      	b.n	800aa6e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d114      	bne.n	800aa6e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00e      	beq.n	800aa6e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	7afa      	ldrb	r2, [r7, #11]
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	4798      	blx	r3
 800aa60:	4603      	mov	r3, r0
 800aa62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
 800aa6c:	e000      	b.n	800aa70 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e02f      	b.n	800ab0c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00f      	beq.n	800aad6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d009      	beq.n	800aad6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	6852      	ldr	r2, [r2, #4]
 800aace:	b2d2      	uxtb	r2, r2
 800aad0:	4611      	mov	r1, r2
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aad6:	2340      	movs	r3, #64	; 0x40
 800aad8:	2200      	movs	r2, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f002 fed8 	bl	800d892 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2240      	movs	r2, #64	; 0x40
 800aaee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2180      	movs	r1, #128	; 0x80
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f002 feca 	bl	800d892 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2240      	movs	r2, #64	; 0x40
 800ab08:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	78fa      	ldrb	r2, [r7, #3]
 800ab24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d106      	bne.n	800ab82 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e012      	b.n	800abcc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b03      	cmp	r3, #3
 800abb0:	d10b      	bne.n	800abca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800abea:	2303      	movs	r3, #3
 800abec:	e014      	b.n	800ac18 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d10d      	bne.n	800ac16 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	4611      	mov	r1, r2
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e014      	b.n	800ac64 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d10d      	bne.n	800ac62 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	78fa      	ldrb	r2, [r7, #3]
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d009      	beq.n	800acb0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	6852      	ldr	r2, [r2, #4]
 800aca8:	b2d2      	uxtb	r2, r2
 800acaa:	4611      	mov	r1, r2
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
  }

  return USBD_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acba:	b480      	push	{r7}
 800acbc:	b087      	sub	sp, #28
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	3301      	adds	r3, #1
 800acd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acd8:	8a3b      	ldrh	r3, [r7, #16]
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	b21a      	sxth	r2, r3
 800acde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	b21b      	sxth	r3, r3
 800ace6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ace8:	89fb      	ldrh	r3, [r7, #14]
}
 800acea:	4618      	mov	r0, r3
 800acec:	371c      	adds	r7, #28
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
	...

0800acf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad0e:	2b40      	cmp	r3, #64	; 0x40
 800ad10:	d005      	beq.n	800ad1e <USBD_StdDevReq+0x26>
 800ad12:	2b40      	cmp	r3, #64	; 0x40
 800ad14:	d853      	bhi.n	800adbe <USBD_StdDevReq+0xc6>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00b      	beq.n	800ad32 <USBD_StdDevReq+0x3a>
 800ad1a:	2b20      	cmp	r3, #32
 800ad1c:	d14f      	bne.n	800adbe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	4798      	blx	r3
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad30:	e04a      	b.n	800adc8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	785b      	ldrb	r3, [r3, #1]
 800ad36:	2b09      	cmp	r3, #9
 800ad38:	d83b      	bhi.n	800adb2 <USBD_StdDevReq+0xba>
 800ad3a:	a201      	add	r2, pc, #4	; (adr r2, 800ad40 <USBD_StdDevReq+0x48>)
 800ad3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad40:	0800ad95 	.word	0x0800ad95
 800ad44:	0800ada9 	.word	0x0800ada9
 800ad48:	0800adb3 	.word	0x0800adb3
 800ad4c:	0800ad9f 	.word	0x0800ad9f
 800ad50:	0800adb3 	.word	0x0800adb3
 800ad54:	0800ad73 	.word	0x0800ad73
 800ad58:	0800ad69 	.word	0x0800ad69
 800ad5c:	0800adb3 	.word	0x0800adb3
 800ad60:	0800ad8b 	.word	0x0800ad8b
 800ad64:	0800ad7d 	.word	0x0800ad7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f9de 	bl	800b12c <USBD_GetDescriptor>
          break;
 800ad70:	e024      	b.n	800adbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fb43 	bl	800b400 <USBD_SetAddress>
          break;
 800ad7a:	e01f      	b.n	800adbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fb82 	bl	800b488 <USBD_SetConfig>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73fb      	strb	r3, [r7, #15]
          break;
 800ad88:	e018      	b.n	800adbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fc21 	bl	800b5d4 <USBD_GetConfig>
          break;
 800ad92:	e013      	b.n	800adbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fc52 	bl	800b640 <USBD_GetStatus>
          break;
 800ad9c:	e00e      	b.n	800adbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc81 	bl	800b6a8 <USBD_SetFeature>
          break;
 800ada6:	e009      	b.n	800adbc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fc90 	bl	800b6d0 <USBD_ClrFeature>
          break;
 800adb0:	e004      	b.n	800adbc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fce7 	bl	800b788 <USBD_CtlError>
          break;
 800adba:	bf00      	nop
      }
      break;
 800adbc:	e004      	b.n	800adc8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fce1 	bl	800b788 <USBD_CtlError>
      break;
 800adc6:	bf00      	nop
  }

  return ret;
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop

0800add4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adea:	2b40      	cmp	r3, #64	; 0x40
 800adec:	d005      	beq.n	800adfa <USBD_StdItfReq+0x26>
 800adee:	2b40      	cmp	r3, #64	; 0x40
 800adf0:	d82f      	bhi.n	800ae52 <USBD_StdItfReq+0x7e>
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <USBD_StdItfReq+0x26>
 800adf6:	2b20      	cmp	r3, #32
 800adf8:	d12b      	bne.n	800ae52 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	3b01      	subs	r3, #1
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d81d      	bhi.n	800ae44 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	889b      	ldrh	r3, [r3, #4]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d813      	bhi.n	800ae3a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	4798      	blx	r3
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	88db      	ldrh	r3, [r3, #6]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d110      	bne.n	800ae4e <USBD_StdItfReq+0x7a>
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10d      	bne.n	800ae4e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fd73 	bl	800b91e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae38:	e009      	b.n	800ae4e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fca3 	bl	800b788 <USBD_CtlError>
          break;
 800ae42:	e004      	b.n	800ae4e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fc9e 	bl	800b788 <USBD_CtlError>
          break;
 800ae4c:	e000      	b.n	800ae50 <USBD_StdItfReq+0x7c>
          break;
 800ae4e:	bf00      	nop
      }
      break;
 800ae50:	e004      	b.n	800ae5c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fc97 	bl	800b788 <USBD_CtlError>
      break;
 800ae5a:	bf00      	nop
  }

  return ret;
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	889b      	ldrh	r3, [r3, #4]
 800ae78:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae82:	2b40      	cmp	r3, #64	; 0x40
 800ae84:	d007      	beq.n	800ae96 <USBD_StdEPReq+0x30>
 800ae86:	2b40      	cmp	r3, #64	; 0x40
 800ae88:	f200 8145 	bhi.w	800b116 <USBD_StdEPReq+0x2b0>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00c      	beq.n	800aeaa <USBD_StdEPReq+0x44>
 800ae90:	2b20      	cmp	r3, #32
 800ae92:	f040 8140 	bne.w	800b116 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	4798      	blx	r3
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
      break;
 800aea8:	e13a      	b.n	800b120 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d007      	beq.n	800aec2 <USBD_StdEPReq+0x5c>
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	f300 8129 	bgt.w	800b10a <USBD_StdEPReq+0x2a4>
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d07f      	beq.n	800afbc <USBD_StdEPReq+0x156>
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d03c      	beq.n	800af3a <USBD_StdEPReq+0xd4>
 800aec0:	e123      	b.n	800b10a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d002      	beq.n	800aed4 <USBD_StdEPReq+0x6e>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d016      	beq.n	800af00 <USBD_StdEPReq+0x9a>
 800aed2:	e02c      	b.n	800af2e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00d      	beq.n	800aef6 <USBD_StdEPReq+0x90>
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b80      	cmp	r3, #128	; 0x80
 800aede:	d00a      	beq.n	800aef6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f002 fd19 	bl	800d91c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeea:	2180      	movs	r1, #128	; 0x80
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f002 fd15 	bl	800d91c <USBD_LL_StallEP>
 800aef2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aef4:	e020      	b.n	800af38 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fc45 	bl	800b788 <USBD_CtlError>
              break;
 800aefe:	e01b      	b.n	800af38 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	885b      	ldrh	r3, [r3, #2]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10e      	bne.n	800af26 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <USBD_StdEPReq+0xc0>
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b80      	cmp	r3, #128	; 0x80
 800af12:	d008      	beq.n	800af26 <USBD_StdEPReq+0xc0>
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	88db      	ldrh	r3, [r3, #6]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f002 fcfb 	bl	800d91c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fcf9 	bl	800b91e <USBD_CtlSendStatus>

              break;
 800af2c:	e004      	b.n	800af38 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fc29 	bl	800b788 <USBD_CtlError>
              break;
 800af36:	bf00      	nop
          }
          break;
 800af38:	e0ec      	b.n	800b114 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b02      	cmp	r3, #2
 800af44:	d002      	beq.n	800af4c <USBD_StdEPReq+0xe6>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d016      	beq.n	800af78 <USBD_StdEPReq+0x112>
 800af4a:	e030      	b.n	800afae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00d      	beq.n	800af6e <USBD_StdEPReq+0x108>
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b80      	cmp	r3, #128	; 0x80
 800af56:	d00a      	beq.n	800af6e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f002 fcdd 	bl	800d91c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af62:	2180      	movs	r1, #128	; 0x80
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f002 fcd9 	bl	800d91c <USBD_LL_StallEP>
 800af6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af6c:	e025      	b.n	800afba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fc09 	bl	800b788 <USBD_CtlError>
              break;
 800af76:	e020      	b.n	800afba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	885b      	ldrh	r3, [r3, #2]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d11b      	bne.n	800afb8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af80:	7bbb      	ldrb	r3, [r7, #14]
 800af82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f002 fce3 	bl	800d95a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fcc2 	bl	800b91e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	4798      	blx	r3
 800afa8:	4603      	mov	r3, r0
 800afaa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800afac:	e004      	b.n	800afb8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fbe9 	bl	800b788 <USBD_CtlError>
              break;
 800afb6:	e000      	b.n	800afba <USBD_StdEPReq+0x154>
              break;
 800afb8:	bf00      	nop
          }
          break;
 800afba:	e0ab      	b.n	800b114 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d002      	beq.n	800afce <USBD_StdEPReq+0x168>
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d032      	beq.n	800b032 <USBD_StdEPReq+0x1cc>
 800afcc:	e097      	b.n	800b0fe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afce:	7bbb      	ldrb	r3, [r7, #14]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d007      	beq.n	800afe4 <USBD_StdEPReq+0x17e>
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	2b80      	cmp	r3, #128	; 0x80
 800afd8:	d004      	beq.n	800afe4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fbd3 	bl	800b788 <USBD_CtlError>
                break;
 800afe2:	e091      	b.n	800b108 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	da0b      	bge.n	800b004 <USBD_StdEPReq+0x19e>
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	3310      	adds	r3, #16
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	4413      	add	r3, r2
 800b000:	3304      	adds	r3, #4
 800b002:	e00b      	b.n	800b01c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b00a:	4613      	mov	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	4413      	add	r3, r2
 800b01a:	3304      	adds	r3, #4
 800b01c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2202      	movs	r2, #2
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fc1d 	bl	800b86a <USBD_CtlSendData>
              break;
 800b030:	e06a      	b.n	800b108 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	da11      	bge.n	800b05e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	f003 020f 	and.w	r2, r3, #15
 800b040:	6879      	ldr	r1, [r7, #4]
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	440b      	add	r3, r1
 800b04c:	3324      	adds	r3, #36	; 0x24
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d117      	bne.n	800b084 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fb96 	bl	800b788 <USBD_CtlError>
                  break;
 800b05c:	e054      	b.n	800b108 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d104      	bne.n	800b084 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fb83 	bl	800b788 <USBD_CtlError>
                  break;
 800b082:	e041      	b.n	800b108 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	da0b      	bge.n	800b0a4 <USBD_StdEPReq+0x23e>
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b092:	4613      	mov	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	3310      	adds	r3, #16
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	4413      	add	r3, r2
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	e00b      	b.n	800b0bc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0be:	7bbb      	ldrb	r3, [r7, #14]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <USBD_StdEPReq+0x264>
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
 800b0c6:	2b80      	cmp	r3, #128	; 0x80
 800b0c8:	d103      	bne.n	800b0d2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	e00e      	b.n	800b0f0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f002 fc5e 	bl	800d998 <USBD_LL_IsStallEP>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	e002      	b.n	800b0f0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fbb7 	bl	800b86a <USBD_CtlSendData>
              break;
 800b0fc:	e004      	b.n	800b108 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fb41 	bl	800b788 <USBD_CtlError>
              break;
 800b106:	bf00      	nop
          }
          break;
 800b108:	e004      	b.n	800b114 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fb3b 	bl	800b788 <USBD_CtlError>
          break;
 800b112:	bf00      	nop
      }
      break;
 800b114:	e004      	b.n	800b120 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fb35 	bl	800b788 <USBD_CtlError>
      break;
 800b11e:	bf00      	nop
  }

  return ret;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b13e:	2300      	movs	r3, #0
 800b140:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	0a1b      	lsrs	r3, r3, #8
 800b148:	b29b      	uxth	r3, r3
 800b14a:	3b01      	subs	r3, #1
 800b14c:	2b06      	cmp	r3, #6
 800b14e:	f200 8128 	bhi.w	800b3a2 <USBD_GetDescriptor+0x276>
 800b152:	a201      	add	r2, pc, #4	; (adr r2, 800b158 <USBD_GetDescriptor+0x2c>)
 800b154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b158:	0800b175 	.word	0x0800b175
 800b15c:	0800b18d 	.word	0x0800b18d
 800b160:	0800b1cd 	.word	0x0800b1cd
 800b164:	0800b3a3 	.word	0x0800b3a3
 800b168:	0800b3a3 	.word	0x0800b3a3
 800b16c:	0800b343 	.word	0x0800b343
 800b170:	0800b36f 	.word	0x0800b36f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	7c12      	ldrb	r2, [r2, #16]
 800b180:	f107 0108 	add.w	r1, r7, #8
 800b184:	4610      	mov	r0, r2
 800b186:	4798      	blx	r3
 800b188:	60f8      	str	r0, [r7, #12]
      break;
 800b18a:	e112      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7c1b      	ldrb	r3, [r3, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10d      	bne.n	800b1b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19c:	f107 0208 	add.w	r2, r7, #8
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4798      	blx	r3
 800b1a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b1ae:	e100      	b.n	800b3b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b8:	f107 0208 	add.w	r2, r7, #8
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
 800b1c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	701a      	strb	r2, [r3, #0]
      break;
 800b1ca:	e0f2      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	885b      	ldrh	r3, [r3, #2]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	f200 80ac 	bhi.w	800b330 <USBD_GetDescriptor+0x204>
 800b1d8:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <USBD_GetDescriptor+0xb4>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b1f9 	.word	0x0800b1f9
 800b1e4:	0800b22d 	.word	0x0800b22d
 800b1e8:	0800b261 	.word	0x0800b261
 800b1ec:	0800b295 	.word	0x0800b295
 800b1f0:	0800b2c9 	.word	0x0800b2c9
 800b1f4:	0800b2fd 	.word	0x0800b2fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00b      	beq.n	800b21c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	7c12      	ldrb	r2, [r2, #16]
 800b210:	f107 0108 	add.w	r1, r7, #8
 800b214:	4610      	mov	r0, r2
 800b216:	4798      	blx	r3
 800b218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b21a:	e091      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fab2 	bl	800b788 <USBD_CtlError>
            err++;
 800b224:	7afb      	ldrb	r3, [r7, #11]
 800b226:	3301      	adds	r3, #1
 800b228:	72fb      	strb	r3, [r7, #11]
          break;
 800b22a:	e089      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00b      	beq.n	800b250 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	7c12      	ldrb	r2, [r2, #16]
 800b244:	f107 0108 	add.w	r1, r7, #8
 800b248:	4610      	mov	r0, r2
 800b24a:	4798      	blx	r3
 800b24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b24e:	e077      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fa98 	bl	800b788 <USBD_CtlError>
            err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
          break;
 800b25e:	e06f      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00b      	beq.n	800b284 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	7c12      	ldrb	r2, [r2, #16]
 800b278:	f107 0108 	add.w	r1, r7, #8
 800b27c:	4610      	mov	r0, r2
 800b27e:	4798      	blx	r3
 800b280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b282:	e05d      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa7e 	bl	800b788 <USBD_CtlError>
            err++;
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	3301      	adds	r3, #1
 800b290:	72fb      	strb	r3, [r7, #11]
          break;
 800b292:	e055      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	7c12      	ldrb	r2, [r2, #16]
 800b2ac:	f107 0108 	add.w	r1, r7, #8
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
 800b2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2b6:	e043      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fa64 	bl	800b788 <USBD_CtlError>
            err++;
 800b2c0:	7afb      	ldrb	r3, [r7, #11]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2c6:	e03b      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	7c12      	ldrb	r2, [r2, #16]
 800b2e0:	f107 0108 	add.w	r1, r7, #8
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4798      	blx	r3
 800b2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ea:	e029      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fa4a 	bl	800b788 <USBD_CtlError>
            err++;
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2fa:	e021      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	7c12      	ldrb	r2, [r2, #16]
 800b314:	f107 0108 	add.w	r1, r7, #8
 800b318:	4610      	mov	r0, r2
 800b31a:	4798      	blx	r3
 800b31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b31e:	e00f      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa30 	bl	800b788 <USBD_CtlError>
            err++;
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	3301      	adds	r3, #1
 800b32c:	72fb      	strb	r3, [r7, #11]
          break;
 800b32e:	e007      	b.n	800b340 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fa28 	bl	800b788 <USBD_CtlError>
          err++;
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	3301      	adds	r3, #1
 800b33c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b33e:	bf00      	nop
      }
      break;
 800b340:	e037      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7c1b      	ldrb	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d109      	bne.n	800b35e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b352:	f107 0208 	add.w	r2, r7, #8
 800b356:	4610      	mov	r0, r2
 800b358:	4798      	blx	r3
 800b35a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b35c:	e029      	b.n	800b3b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fa11 	bl	800b788 <USBD_CtlError>
        err++;
 800b366:	7afb      	ldrb	r3, [r7, #11]
 800b368:	3301      	adds	r3, #1
 800b36a:	72fb      	strb	r3, [r7, #11]
      break;
 800b36c:	e021      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7c1b      	ldrb	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10d      	bne.n	800b392 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b37e:	f107 0208 	add.w	r2, r7, #8
 800b382:	4610      	mov	r0, r2
 800b384:	4798      	blx	r3
 800b386:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3301      	adds	r3, #1
 800b38c:	2207      	movs	r2, #7
 800b38e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b390:	e00f      	b.n	800b3b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f9f7 	bl	800b788 <USBD_CtlError>
        err++;
 800b39a:	7afb      	ldrb	r3, [r7, #11]
 800b39c:	3301      	adds	r3, #1
 800b39e:	72fb      	strb	r3, [r7, #11]
      break;
 800b3a0:	e007      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f9ef 	bl	800b788 <USBD_CtlError>
      err++;
 800b3aa:	7afb      	ldrb	r3, [r7, #11]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b3b0:	bf00      	nop
  }

  if (err != 0U)
 800b3b2:	7afb      	ldrb	r3, [r7, #11]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d11e      	bne.n	800b3f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	88db      	ldrh	r3, [r3, #6]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d016      	beq.n	800b3ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b3c0:	893b      	ldrh	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00e      	beq.n	800b3e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	88da      	ldrh	r2, [r3, #6]
 800b3ca:	893b      	ldrh	r3, [r7, #8]
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	bf28      	it	cs
 800b3d0:	4613      	movcs	r3, r2
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3d6:	893b      	ldrh	r3, [r7, #8]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	68f9      	ldr	r1, [r7, #12]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fa44 	bl	800b86a <USBD_CtlSendData>
 800b3e2:	e009      	b.n	800b3f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f9ce 	bl	800b788 <USBD_CtlError>
 800b3ec:	e004      	b.n	800b3f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa95 	bl	800b91e <USBD_CtlSendStatus>
 800b3f4:	e000      	b.n	800b3f8 <USBD_GetDescriptor+0x2cc>
    return;
 800b3f6:	bf00      	nop
  }
}
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop

0800b400 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	889b      	ldrh	r3, [r3, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d131      	bne.n	800b476 <USBD_SetAddress+0x76>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	88db      	ldrh	r3, [r3, #6]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d12d      	bne.n	800b476 <USBD_SetAddress+0x76>
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	885b      	ldrh	r3, [r3, #2]
 800b41e:	2b7f      	cmp	r3, #127	; 0x7f
 800b420:	d829      	bhi.n	800b476 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	885b      	ldrh	r3, [r3, #2]
 800b426:	b2db      	uxtb	r3, r3
 800b428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b42c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b03      	cmp	r3, #3
 800b438:	d104      	bne.n	800b444 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f9a3 	bl	800b788 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b442:	e01d      	b.n	800b480 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	7bfa      	ldrb	r2, [r7, #15]
 800b448:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f002 facd 	bl	800d9f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa61 	bl	800b91e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2202      	movs	r2, #2
 800b466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b46a:	e009      	b.n	800b480 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b474:	e004      	b.n	800b480 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f985 	bl	800b788 <USBD_CtlError>
  }
}
 800b47e:	bf00      	nop
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	4b4c      	ldr	r3, [pc, #304]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b49e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4a0:	4b4b      	ldr	r3, [pc, #300]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d905      	bls.n	800b4b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f96c 	bl	800b788 <USBD_CtlError>
    return USBD_FAIL;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e088      	b.n	800b5c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d002      	beq.n	800b4c6 <USBD_SetConfig+0x3e>
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d025      	beq.n	800b510 <USBD_SetConfig+0x88>
 800b4c4:	e071      	b.n	800b5aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b4c6:	4b42      	ldr	r3, [pc, #264]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d01c      	beq.n	800b508 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b4ce:	4b40      	ldr	r3, [pc, #256]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4d8:	4b3d      	ldr	r3, [pc, #244]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff f948 	bl	800a774 <USBD_SetClassConfig>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f949 	bl	800b788 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4f6:	e065      	b.n	800b5c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fa10 	bl	800b91e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2203      	movs	r2, #3
 800b502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b506:	e05d      	b.n	800b5c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fa08 	bl	800b91e <USBD_CtlSendStatus>
      break;
 800b50e:	e059      	b.n	800b5c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b510:	4b2f      	ldr	r3, [pc, #188]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d112      	bne.n	800b53e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2202      	movs	r2, #2
 800b51c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b520:	4b2b      	ldr	r3, [pc, #172]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b52a:	4b29      	ldr	r3, [pc, #164]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff f93b 	bl	800a7ac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f9f1 	bl	800b91e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b53c:	e042      	b.n	800b5c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b53e:	4b24      	ldr	r3, [pc, #144]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d02a      	beq.n	800b5a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	b2db      	uxtb	r3, r3
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff f929 	bl	800a7ac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b55a:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b564:	4b1a      	ldr	r3, [pc, #104]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	4619      	mov	r1, r3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff f902 	bl	800a774 <USBD_SetClassConfig>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00f      	beq.n	800b59a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f903 	bl	800b788 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	b2db      	uxtb	r3, r3
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff f90e 	bl	800a7ac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2202      	movs	r2, #2
 800b594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b598:	e014      	b.n	800b5c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f9bf 	bl	800b91e <USBD_CtlSendStatus>
      break;
 800b5a0:	e010      	b.n	800b5c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f9bb 	bl	800b91e <USBD_CtlSendStatus>
      break;
 800b5a8:	e00c      	b.n	800b5c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f8eb 	bl	800b788 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5b2:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <USBD_SetConfig+0x148>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff f8f7 	bl	800a7ac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5c2:	bf00      	nop
  }

  return ret;
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	2000036c 	.word	0x2000036c

0800b5d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	88db      	ldrh	r3, [r3, #6]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d004      	beq.n	800b5f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f8cd 	bl	800b788 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5ee:	e023      	b.n	800b638 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	dc02      	bgt.n	800b602 <USBD_GetConfig+0x2e>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dc03      	bgt.n	800b608 <USBD_GetConfig+0x34>
 800b600:	e015      	b.n	800b62e <USBD_GetConfig+0x5a>
 800b602:	2b03      	cmp	r3, #3
 800b604:	d00b      	beq.n	800b61e <USBD_GetConfig+0x4a>
 800b606:	e012      	b.n	800b62e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3308      	adds	r3, #8
 800b612:	2201      	movs	r2, #1
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f927 	bl	800b86a <USBD_CtlSendData>
        break;
 800b61c:	e00c      	b.n	800b638 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3304      	adds	r3, #4
 800b622:	2201      	movs	r2, #1
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f91f 	bl	800b86a <USBD_CtlSendData>
        break;
 800b62c:	e004      	b.n	800b638 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f8a9 	bl	800b788 <USBD_CtlError>
        break;
 800b636:	bf00      	nop
}
 800b638:	bf00      	nop
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b650:	b2db      	uxtb	r3, r3
 800b652:	3b01      	subs	r3, #1
 800b654:	2b02      	cmp	r3, #2
 800b656:	d81e      	bhi.n	800b696 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	88db      	ldrh	r3, [r3, #6]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d004      	beq.n	800b66a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f890 	bl	800b788 <USBD_CtlError>
        break;
 800b668:	e01a      	b.n	800b6a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b676:	2b00      	cmp	r3, #0
 800b678:	d005      	beq.n	800b686 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f043 0202 	orr.w	r2, r3, #2
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	330c      	adds	r3, #12
 800b68a:	2202      	movs	r2, #2
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f8eb 	bl	800b86a <USBD_CtlSendData>
      break;
 800b694:	e004      	b.n	800b6a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f875 	bl	800b788 <USBD_CtlError>
      break;
 800b69e:	bf00      	nop
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	885b      	ldrh	r3, [r3, #2]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d106      	bne.n	800b6c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f92b 	bl	800b91e <USBD_CtlSendStatus>
  }
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d80b      	bhi.n	800b700 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	885b      	ldrh	r3, [r3, #2]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d10c      	bne.n	800b70a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f910 	bl	800b91e <USBD_CtlSendStatus>
      }
      break;
 800b6fe:	e004      	b.n	800b70a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f840 	bl	800b788 <USBD_CtlError>
      break;
 800b708:	e000      	b.n	800b70c <USBD_ClrFeature+0x3c>
      break;
 800b70a:	bf00      	nop
  }
}
 800b70c:	bf00      	nop
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	781a      	ldrb	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3301      	adds	r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	781a      	ldrb	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3301      	adds	r3, #1
 800b73c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fabb 	bl	800acba <SWAPBYTE>
 800b744:	4603      	mov	r3, r0
 800b746:	461a      	mov	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3301      	adds	r3, #1
 800b750:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff faae 	bl	800acba <SWAPBYTE>
 800b75e:	4603      	mov	r3, r0
 800b760:	461a      	mov	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3301      	adds	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	3301      	adds	r3, #1
 800b770:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7ff faa1 	bl	800acba <SWAPBYTE>
 800b778:	4603      	mov	r3, r0
 800b77a:	461a      	mov	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	80da      	strh	r2, [r3, #6]
}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b792:	2180      	movs	r1, #128	; 0x80
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f002 f8c1 	bl	800d91c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b79a:	2100      	movs	r1, #0
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f002 f8bd 	bl	800d91c <USBD_LL_StallEP>
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b086      	sub	sp, #24
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d036      	beq.n	800b82e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b7c4:	6938      	ldr	r0, [r7, #16]
 800b7c6:	f000 f836 	bl	800b836 <USBD_GetLen>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	4413      	add	r3, r2
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	7812      	ldrb	r2, [r2, #0]
 800b7e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	2203      	movs	r2, #3
 800b7f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b7fa:	e013      	b.n	800b824 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	4413      	add	r3, r2
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	3301      	adds	r3, #1
 800b80c:	613b      	str	r3, [r7, #16]
    idx++;
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
 800b810:	3301      	adds	r3, #1
 800b812:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	4413      	add	r3, r2
 800b81a:	2200      	movs	r2, #0
 800b81c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
 800b820:	3301      	adds	r3, #1
 800b822:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e7      	bne.n	800b7fc <USBD_GetString+0x52>
 800b82c:	e000      	b.n	800b830 <USBD_GetString+0x86>
    return;
 800b82e:	bf00      	nop
  }
}
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b836:	b480      	push	{r7}
 800b838:	b085      	sub	sp, #20
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b846:	e005      	b.n	800b854 <USBD_GetLen+0x1e>
  {
    len++;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	3301      	adds	r3, #1
 800b84c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	3301      	adds	r3, #1
 800b852:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1f5      	bne.n	800b848 <USBD_GetLen+0x12>
  }

  return len;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b084      	sub	sp, #16
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	60b9      	str	r1, [r7, #8]
 800b874:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2202      	movs	r2, #2
 800b87a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	2100      	movs	r1, #0
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f002 f8cc 	bl	800da2e <USBD_LL_Transmit>

  return USBD_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f002 f8bb 	bl	800da2e <USBD_LL_Transmit>

  return USBD_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2203      	movs	r2, #3
 800b8d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f002 f8bf 	bl	800da70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	2100      	movs	r1, #0
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f002 f8ae 	bl	800da70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2204      	movs	r2, #4
 800b92a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b92e:	2300      	movs	r3, #0
 800b930:	2200      	movs	r2, #0
 800b932:	2100      	movs	r1, #0
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f002 f87a 	bl	800da2e <USBD_LL_Transmit>

  return USBD_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2205      	movs	r2, #5
 800b950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b954:	2300      	movs	r3, #0
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f002 f888 	bl	800da70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
	...

0800b96c <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	af00      	add	r7, sp, #0

	switch(kApplicationBase.eApplicationState)
 800b970:	4b19      	ldr	r3, [pc, #100]	; (800b9d8 <ApplicationPerform+0x6c>)
 800b972:	7e5b      	ldrb	r3, [r3, #25]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b03      	cmp	r3, #3
 800b978:	d826      	bhi.n	800b9c8 <ApplicationPerform+0x5c>
 800b97a:	a201      	add	r2, pc, #4	; (adr r2, 800b980 <ApplicationPerform+0x14>)
 800b97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b980:	0800b991 	.word	0x0800b991
 800b984:	0800b99f 	.word	0x0800b99f
 800b988:	0800b9c3 	.word	0x0800b9c3
 800b98c:	0800b9d1 	.word	0x0800b9d1
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800b990:	2000      	movs	r0, #0
 800b992:	f7f5 fa8d 	bl	8000eb0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800b996:	2001      	movs	r0, #1
 800b998:	f000 f8b6 	bl	800bb08 <AppStateChangeRequest>
		break;
 800b99c:	e019      	b.n	800b9d2 <ApplicationPerform+0x66>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800b99e:	f000 f8ff 	bl	800bba0 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800b9a2:	f000 fca7 	bl	800c2f4 <TempCollect_Initialize>
		DataHandler_Initialize();
 800b9a6:	f000 f93f 	bl	800bc28 <DataHandler_Initialize>
		CommManager_Initialize();
 800b9aa:	f000 fcdf 	bl	800c36c <CommManager_Initialize>
		EventSystem_Initialize();
 800b9ae:	f000 fb1f 	bl	800bff0 <EventSystem_Initialize>
		TurnAllSensorOn();
 800b9b2:	f7f5 fb05 	bl	8000fc0 <TurnAllSensorOn>
		TurnOnSynchronousEvent(); //todo: add actual on/off functionality to synchronous timers
 800b9b6:	f000 f92f 	bl	800bc18 <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800b9ba:	2002      	movs	r0, #2
 800b9bc:	f000 f8a4 	bl	800bb08 <AppStateChangeRequest>
		break;
 800b9c0:	e007      	b.n	800b9d2 <ApplicationPerform+0x66>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800b9c2:	f000 f871 	bl	800baa8 <AsynchronousTaskScheduler>
		break;
 800b9c6:	e004      	b.n	800b9d2 <ApplicationPerform+0x66>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800b9c8:	2010      	movs	r0, #16
 800b9ca:	f000 f911 	bl	800bbf0 <AssertError>
		break;
 800b9ce:	e000      	b.n	800b9d2 <ApplicationPerform+0x66>
		break;
 800b9d0:	bf00      	nop
	}

}
 800b9d2:	bf00      	nop
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000370 	.word	0x20000370

0800b9dc <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800b9dc:	b480      	push	{r7}
 800b9de:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800b9e0:	4b20      	ldr	r3, [pc, #128]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d006      	beq.n	800b9f8 <AsynchronousTaskTimerUpdate+0x1c>
	{
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800b9ea:	4b1e      	ldr	r3, [pc, #120]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800b9ec:	885b      	ldrh	r3, [r3, #2]
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	4b1b      	ldr	r3, [pc, #108]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800b9f6:	805a      	strh	r2, [r3, #2]
	}
	if(kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800b9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800b9fa:	791b      	ldrb	r3, [r3, #4]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d006      	beq.n	800ba10 <AsynchronousTaskTimerUpdate+0x34>
	{
		kApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800ba02:	4b18      	ldr	r3, [pc, #96]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba04:	88db      	ldrh	r3, [r3, #6]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3301      	adds	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	4b15      	ldr	r3, [pc, #84]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba0e:	80da      	strh	r2, [r3, #6]
	}
	if(kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800ba10:	4b14      	ldr	r3, [pc, #80]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba12:	7a1b      	ldrb	r3, [r3, #8]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d006      	beq.n	800ba28 <AsynchronousTaskTimerUpdate+0x4c>
	{
		kApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800ba1a:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba1c:	895b      	ldrh	r3, [r3, #10]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	3301      	adds	r3, #1
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba26:	815a      	strh	r2, [r3, #10]
	}
	if(kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800ba28:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba2a:	7b1b      	ldrb	r3, [r3, #12]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d006      	beq.n	800ba40 <AsynchronousTaskTimerUpdate+0x64>
	{
		kApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800ba32:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba34:	89db      	ldrh	r3, [r3, #14]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	3301      	adds	r3, #1
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba3e:	81da      	strh	r2, [r3, #14]
	}
	if(kApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800ba40:	4b08      	ldr	r3, [pc, #32]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba42:	7c1b      	ldrb	r3, [r3, #16]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d006      	beq.n	800ba58 <AsynchronousTaskTimerUpdate+0x7c>
	{
		kApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800ba4a:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba4c:	8a5b      	ldrh	r3, [r3, #18]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	3301      	adds	r3, #1
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	4b03      	ldr	r3, [pc, #12]	; (800ba64 <AsynchronousTaskTimerUpdate+0x88>)
 800ba56:	825a      	strh	r2, [r3, #18]
	}

}
 800ba58:	bf00      	nop
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20000370 	.word	0x20000370

0800ba68 <AsynchronousTask_1ms>:

/* Internal functions */

void AsynchronousTask_1ms()
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	af00      	add	r7, sp, #0
	SetSecondDebugPinOn();
 800ba6c:	f7f5 faca 	bl	8001004 <SetSecondDebugPinOn>
	EventSystem_HandleEvent();
 800ba70:	f000 faca 	bl	800c008 <EventSystem_HandleEvent>
	CommManager_Operate();
 800ba74:	f000 fc86 	bl	800c384 <CommManager_Operate>
	SetSecondDebugPinOff();
 800ba78:	f7f5 fad0 	bl	800101c <SetSecondDebugPinOff>
}
 800ba7c:	bf00      	nop
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <AsynchronousTask_10ms>:

void AsynchronousTask_10ms()
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800ba84:	f000 fb3e 	bl	800c104 <TempCollect_Operate>
}
 800ba88:	bf00      	nop
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
	USB_CheckForUSBConnection();
 800ba90:	f000 fdf0 	bl	800c674 <USB_CheckForUSBConnection>
	DataHandler_Operate();
 800ba94:	f000 fa20 	bl	800bed8 <DataHandler_Operate>
}
 800ba98:	bf00      	nop
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800baa0:	f7f5 fa3e 	bl	8000f20 <ToggleLED_B>
}
 800baa4:	bf00      	nop
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800baac:	4b15      	ldr	r3, [pc, #84]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800baae:	885b      	ldrh	r3, [r3, #2]
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bab6:	d304      	bcc.n	800bac2 <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800bab8:	f7ff fff0 	bl	800ba9c <AsynchronousTask_1000ms>
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800babc:	4b11      	ldr	r3, [pc, #68]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800babe:	2200      	movs	r2, #0
 800bac0:	805a      	strh	r2, [r3, #2]
	}

	if(kApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800bac2:	4b10      	ldr	r3, [pc, #64]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800bac4:	88db      	ldrh	r3, [r3, #6]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	2b63      	cmp	r3, #99	; 0x63
 800baca:	d904      	bls.n	800bad6 <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800bacc:	f7ff ffde 	bl	800ba8c <AsynchronousTask_100ms>
		kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800bad0:	4b0c      	ldr	r3, [pc, #48]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	80da      	strh	r2, [r3, #6]
	}

	if(kApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800bad6:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800bad8:	895b      	ldrh	r3, [r3, #10]
 800bada:	b29b      	uxth	r3, r3
 800badc:	2b09      	cmp	r3, #9
 800bade:	d904      	bls.n	800baea <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800bae0:	f7ff ffce 	bl	800ba80 <AsynchronousTask_10ms>
		kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	815a      	strh	r2, [r3, #10]
	}

	if(kApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800baea:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800baec:	89db      	ldrh	r3, [r3, #14]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d004      	beq.n	800bafe <AsynchronousTaskScheduler+0x56>
	{
		AsynchronousTask_1ms();
 800baf4:	f7ff ffb8 	bl	800ba68 <AsynchronousTask_1ms>
		kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800baf8:	4b02      	ldr	r3, [pc, #8]	; (800bb04 <AsynchronousTaskScheduler+0x5c>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	81da      	strh	r2, [r3, #14]
	}

}
 800bafe:	bf00      	nop
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20000370 	.word	0x20000370

0800bb08 <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	71fb      	strb	r3, [r7, #7]
	switch(kApplicationBase.eApplicationState)
 800bb12:	4b22      	ldr	r3, [pc, #136]	; (800bb9c <AppStateChangeRequest+0x94>)
 800bb14:	7e5b      	ldrb	r3, [r3, #25]
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d837      	bhi.n	800bb8c <AppStateChangeRequest+0x84>
 800bb1c:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <AppStateChangeRequest+0x1c>)
 800bb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb22:	bf00      	nop
 800bb24:	0800bb35 	.word	0x0800bb35
 800bb28:	0800bb4b 	.word	0x0800bb4b
 800bb2c:	0800bb61 	.word	0x0800bb61
 800bb30:	0800bb85 	.word	0x0800bb85
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d103      	bne.n	800bb42 <AppStateChangeRequest+0x3a>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800bb3a:	4b18      	ldr	r3, [pc, #96]	; (800bb9c <AppStateChangeRequest+0x94>)
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800bb40:	e028      	b.n	800bb94 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800bb42:	2020      	movs	r0, #32
 800bb44:	f000 f854 	bl	800bbf0 <AssertError>
		break;
 800bb48:	e024      	b.n	800bb94 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d103      	bne.n	800bb58 <AppStateChangeRequest+0x50>
		{
			kApplicationBase.eApplicationState = eApp_Perform;
 800bb50:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <AppStateChangeRequest+0x94>)
 800bb52:	2202      	movs	r2, #2
 800bb54:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800bb56:	e01d      	b.n	800bb94 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800bb58:	2020      	movs	r0, #32
 800bb5a:	f000 f849 	bl	800bbf0 <AssertError>
		break;
 800bb5e:	e019      	b.n	800bb94 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800bb60:	79fb      	ldrb	r3, [r7, #7]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d103      	bne.n	800bb6e <AppStateChangeRequest+0x66>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800bb66:	4b0d      	ldr	r3, [pc, #52]	; (800bb9c <AppStateChangeRequest+0x94>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800bb6c:	e012      	b.n	800bb94 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800bb6e:	79fb      	ldrb	r3, [r7, #7]
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d103      	bne.n	800bb7c <AppStateChangeRequest+0x74>
			kApplicationBase.eApplicationState = eApp_Shutdown;
 800bb74:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <AppStateChangeRequest+0x94>)
 800bb76:	2203      	movs	r2, #3
 800bb78:	765a      	strb	r2, [r3, #25]
		break;
 800bb7a:	e00b      	b.n	800bb94 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800bb7c:	2020      	movs	r0, #32
 800bb7e:	f000 f837 	bl	800bbf0 <AssertError>
		break;
 800bb82:	e007      	b.n	800bb94 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800bb84:	2020      	movs	r0, #32
 800bb86:	f000 f833 	bl	800bbf0 <AssertError>
		break;
 800bb8a:	e003      	b.n	800bb94 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800bb8c:	2020      	movs	r0, #32
 800bb8e:	f000 f82f 	bl	800bbf0 <AssertError>
		break;
 800bb92:	bf00      	nop
	}

}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20000370 	.word	0x20000370

0800bba0 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
	kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800bba4:	4b11      	ldr	r3, [pc, #68]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	701a      	strb	r2, [r3, #0]
	kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800bbaa:	4b10      	ldr	r3, [pc, #64]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbac:	2201      	movs	r2, #1
 800bbae:	711a      	strb	r2, [r3, #4]
	kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800bbb0:	4b0e      	ldr	r3, [pc, #56]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	721a      	strb	r2, [r3, #8]
	kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbb8:	2201      	movs	r2, #1
 800bbba:	731a      	strb	r2, [r3, #12]
	kApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800bbbc:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	741a      	strb	r2, [r3, #16]

	kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800bbc2:	4b0a      	ldr	r3, [pc, #40]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	805a      	strh	r2, [r3, #2]
	kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800bbc8:	4b08      	ldr	r3, [pc, #32]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	80da      	strh	r2, [r3, #6]
	kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800bbce:	4b07      	ldr	r3, [pc, #28]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	815a      	strh	r2, [r3, #10]
	kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800bbd4:	4b05      	ldr	r3, [pc, #20]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	81da      	strh	r2, [r3, #14]
	kApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800bbda:	4b04      	ldr	r3, [pc, #16]	; (800bbec <AppEnableResetTaskTimers+0x4c>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	825a      	strh	r2, [r3, #18]
}
 800bbe0:	bf00      	nop
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20000370 	.word	0x20000370

0800bbf0 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	80fb      	strh	r3, [r7, #6]
	kApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800bbfa:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <AssertError+0x24>)
 800bbfc:	695a      	ldr	r2, [r3, #20]
 800bbfe:	88fb      	ldrh	r3, [r7, #6]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	4a04      	ldr	r2, [pc, #16]	; (800bc14 <AssertError+0x24>)
 800bc04:	6153      	str	r3, [r2, #20]
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20000370 	.word	0x20000370

0800bc18 <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800bc18:	b480      	push	{r7}
 800bc1a:	af00      	add	r7, sp, #0

}
 800bc1c:	bf00      	nop
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
	...

0800bc28 <DataHandler_Initialize>:
static MemoryInterchange_t kMemoryInterchange;

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray );

void DataHandler_Initialize()
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800bc2c:	f000 f808 	bl	800bc40 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800bc30:	4b02      	ldr	r3, [pc, #8]	; (800bc3c <DataHandler_Initialize+0x14>)
 800bc32:	2201      	movs	r2, #1
 800bc34:	701a      	strb	r2, [r3, #0]

}
 800bc36:	bf00      	nop
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	2000038c 	.word	0x2000038c

0800bc40 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800bc40:	b490      	push	{r4, r7}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800bc46:	4b35      	ldr	r3, [pc, #212]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800bc4e:	4b33      	ldr	r3, [pc, #204]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800bc56:	4b31      	ldr	r3, [pc, #196]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800bc5e:	4b2f      	ldr	r3, [pc, #188]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800bc66:	4b2d      	ldr	r3, [pc, #180]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	kDataHandler.bReadyToSend = false;
 800bc6e:	4b2b      	ldr	r3, [pc, #172]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800bc76:	2300      	movs	r3, #0
 800bc78:	71fb      	strb	r3, [r7, #7]
 800bc7a:	e046      	b.n	800bd0a <DataHandler_Reset+0xca>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	71bb      	strb	r3, [r7, #6]
 800bc80:	e03d      	b.n	800bcfe <DataHandler_Reset+0xbe>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800bc82:	79fa      	ldrb	r2, [r7, #7]
 800bc84:	4925      	ldr	r1, [pc, #148]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc86:	4613      	mov	r3, r2
 800bc88:	019b      	lsls	r3, r3, #6
 800bc8a:	4413      	add	r3, r2
 800bc8c:	00db      	lsls	r3, r3, #3
 800bc8e:	440b      	add	r3, r1
 800bc90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800bc98:	79fa      	ldrb	r2, [r7, #7]
 800bc9a:	4920      	ldr	r1, [pc, #128]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	019b      	lsls	r3, r3, #6
 800bca0:	4413      	add	r3, r2
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	440b      	add	r3, r1
 800bca6:	f203 2309 	addw	r3, r3, #521	; 0x209
 800bcaa:	2200      	movs	r2, #0
 800bcac:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800bcae:	79fa      	ldrb	r2, [r7, #7]
 800bcb0:	491a      	ldr	r1, [pc, #104]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	019b      	lsls	r3, r3, #6
 800bcb6:	4413      	add	r3, r2
 800bcb8:	00db      	lsls	r3, r3, #3
 800bcba:	440b      	add	r3, r1
 800bcbc:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	717b      	strb	r3, [r7, #5]
 800bcc8:	e013      	b.n	800bcf2 <DataHandler_Reset+0xb2>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800bcca:	79fa      	ldrb	r2, [r7, #7]
 800bccc:	79bb      	ldrb	r3, [r7, #6]
 800bcce:	7979      	ldrb	r1, [r7, #5]
 800bcd0:	4c12      	ldr	r4, [pc, #72]	; (800bd1c <DataHandler_Reset+0xdc>)
 800bcd2:	0118      	lsls	r0, r3, #4
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	019b      	lsls	r3, r3, #6
 800bcd8:	4413      	add	r3, r2
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	4403      	add	r3, r0
 800bcde:	440b      	add	r3, r1
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4423      	add	r3, r4
 800bce4:	3308      	adds	r3, #8
 800bce6:	f04f 0200 	mov.w	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800bcec:	797b      	ldrb	r3, [r7, #5]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	717b      	strb	r3, [r7, #5]
 800bcf2:	797b      	ldrb	r3, [r7, #5]
 800bcf4:	2b0f      	cmp	r3, #15
 800bcf6:	d9e8      	bls.n	800bcca <DataHandler_Reset+0x8a>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800bcf8:	79bb      	ldrb	r3, [r7, #6]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	71bb      	strb	r3, [r7, #6]
 800bcfe:	79bb      	ldrb	r3, [r7, #6]
 800bd00:	2b07      	cmp	r3, #7
 800bd02:	d9be      	bls.n	800bc82 <DataHandler_Reset+0x42>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800bd04:	79fb      	ldrb	r3, [r7, #7]
 800bd06:	3301      	adds	r3, #1
 800bd08:	71fb      	strb	r3, [r7, #7]
 800bd0a:	79fb      	ldrb	r3, [r7, #7]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d9b5      	bls.n	800bc7c <DataHandler_Reset+0x3c>
			}
		}
	}

}
 800bd10:	bf00      	nop
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bc90      	pop	{r4, r7}
 800bd1a:	4770      	bx	lr
 800bd1c:	2000038c 	.word	0x2000038c

0800bd20 <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800bd28:	4b46      	ldr	r3, [pc, #280]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 8081 	beq.w	800be34 <DataHandler_OpenNewMeasurement+0x114>
	{
		kDataHandler.u8LengthPointer++;
 800bd32:	4b44      	ldr	r3, [pc, #272]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd34:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800bd38:	3301      	adds	r3, #1
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	4b41      	ldr	r3, [pc, #260]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd3e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800bd42:	4b40      	ldr	r3, [pc, #256]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		/*
		 * Every time new measurement is opened the previous one is assumed to be ready for transmission
		 */
		kDataHandler.bReadyToSend = true;
 800bd4a:	4b3e      	ldr	r3, [pc, #248]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800bd52:	4b3c      	ldr	r3, [pc, #240]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd54:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800bd58:	2b07      	cmp	r3, #7
 800bd5a:	d96f      	bls.n	800be3c <DataHandler_OpenNewMeasurement+0x11c>
		{
			kDataHandler.u8LengthPointer = 0;
 800bd5c:	4b39      	ldr	r3, [pc, #228]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800bd64:	4b37      	ldr	r3, [pc, #220]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd66:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	4a35      	ldr	r2, [pc, #212]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd6e:	460b      	mov	r3, r1
 800bd70:	019b      	lsls	r3, r3, #6
 800bd72:	440b      	add	r3, r1
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	4413      	add	r3, r2
 800bd78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800bd80:	4b30      	ldr	r3, [pc, #192]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd82:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bd86:	4619      	mov	r1, r3
 800bd88:	4a2e      	ldr	r2, [pc, #184]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	019b      	lsls	r3, r3, #6
 800bd8e:	440b      	add	r3, r1
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	4413      	add	r3, r2
 800bd94:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800bd98:	2201      	movs	r2, #1
 800bd9a:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800bd9c:	4b29      	ldr	r3, [pc, #164]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bd9e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bda2:	4619      	mov	r1, r3
 800bda4:	4a27      	ldr	r2, [pc, #156]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bda6:	460b      	mov	r3, r1
 800bda8:	019b      	lsls	r3, r3, #6
 800bdaa:	440b      	add	r3, r1
 800bdac:	00db      	lsls	r3, r3, #3
 800bdae:	4413      	add	r3, r2
 800bdb0:	f203 2309 	addw	r3, r3, #521	; 0x209
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800bdb8:	4b22      	ldr	r3, [pc, #136]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bdba:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4a20      	ldr	r2, [pc, #128]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	019b      	lsls	r3, r3, #6
 800bdc6:	440b      	add	r3, r1
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	4413      	add	r3, r2
 800bdcc:	3304      	adds	r3, #4
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800bdd2:	4b1c      	ldr	r3, [pc, #112]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bdd4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4a1a      	ldr	r2, [pc, #104]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bddc:	460b      	mov	r3, r1
 800bdde:	019b      	lsls	r3, r3, #6
 800bde0:	440b      	add	r3, r1
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	f203 2309 	addw	r3, r3, #521	; 0x209
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	f083 0301 	eor.w	r3, r3, #1
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d002      	beq.n	800bdfc <DataHandler_OpenNewMeasurement+0xdc>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800bdf6:	2040      	movs	r0, #64	; 0x40
 800bdf8:	f7ff fefa 	bl	800bbf0 <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800bdfc:	4b11      	ldr	r3, [pc, #68]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800bdfe:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800be02:	4b10      	ldr	r3, [pc, #64]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800be04:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800be08:	4b0e      	ldr	r3, [pc, #56]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800be0a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800be0e:	3301      	adds	r3, #1
 800be10:	b2da      	uxtb	r2, r3
 800be12:	4b0c      	ldr	r3, [pc, #48]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800be14:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800be18:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800be1a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d903      	bls.n	800be2a <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800be22:	4b08      	ldr	r3, [pc, #32]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			}
			kDataHandler.bPageFilled = true;
 800be2a:	4b06      	ldr	r3, [pc, #24]	; (800be44 <DataHandler_OpenNewMeasurement+0x124>)
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800be32:	e003      	b.n	800be3c <DataHandler_OpenNewMeasurement+0x11c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800be34:	f44f 7080 	mov.w	r0, #256	; 0x100
 800be38:	f7ff feda 	bl	800bbf0 <AssertError>
}
 800be3c:	bf00      	nop
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	2000038c 	.word	0x2000038c

0800be48 <DataHandler_StoreMeasurement>:

void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800be48:	b590      	push	{r4, r7, lr}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800be52:	4b20      	ldr	r3, [pc, #128]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800be54:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800be58:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800be5a:	4b1e      	ldr	r3, [pc, #120]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800be5c:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800be60:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800be62:	4b1c      	ldr	r3, [pc, #112]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800be64:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800be68:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800be6a:	4b1a      	ldr	r3, [pc, #104]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d028      	beq.n	800bec4 <DataHandler_StoreMeasurement+0x7c>
	{
		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800be72:	7bfa      	ldrb	r2, [r7, #15]
 800be74:	7bbb      	ldrb	r3, [r7, #14]
 800be76:	7b79      	ldrb	r1, [r7, #13]
 800be78:	4c16      	ldr	r4, [pc, #88]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800be7a:	0118      	lsls	r0, r3, #4
 800be7c:	4613      	mov	r3, r2
 800be7e:	019b      	lsls	r3, r3, #6
 800be80:	4413      	add	r3, r2
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	4403      	add	r3, r0
 800be86:	440b      	add	r3, r1
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4423      	add	r3, r4
 800be8c:	3308      	adds	r3, #8
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	601a      	str	r2, [r3, #0]
		kDataHandler.u8WidthPointer++;
 800be92:	4b10      	ldr	r3, [pc, #64]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800be94:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800be98:	3301      	adds	r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	4b0d      	ldr	r3, [pc, #52]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800be9e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800bea2:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800bea4:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800bea8:	2b0f      	cmp	r3, #15
 800beaa:	d90f      	bls.n	800becc <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800beac:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800beae:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800beb2:	3b01      	subs	r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	4b07      	ldr	r3, [pc, #28]	; (800bed4 <DataHandler_StoreMeasurement+0x8c>)
 800beb8:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800bebc:	2080      	movs	r0, #128	; 0x80
 800bebe:	f7ff fe97 	bl	800bbf0 <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800bec2:	e003      	b.n	800becc <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800bec4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bec8:	f7ff fe92 	bl	800bbf0 <AssertError>
}
 800becc:	bf00      	nop
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd90      	pop	{r4, r7, pc}
 800bed4:	2000038c 	.word	0x2000038c

0800bed8 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800bedc:	4b2b      	ldr	r3, [pc, #172]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d04c      	beq.n	800bf7e <DataHandler_Operate+0xa6>
	{

		if( kDataHandler.bPageFilled )
 800bee4:	4b29      	ldr	r3, [pc, #164]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bee6:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800beea:	2b00      	cmp	r3, #0
 800beec:	d011      	beq.n	800bf12 <DataHandler_Operate+0x3a>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800beee:	4b27      	ldr	r3, [pc, #156]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bef0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800bef4:	4619      	mov	r1, r3
 800bef6:	4a25      	ldr	r2, [pc, #148]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bef8:	460b      	mov	r3, r1
 800befa:	019b      	lsls	r3, r3, #6
 800befc:	440b      	add	r3, r1
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	4413      	add	r3, r2
 800bf02:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800bf06:	2201      	movs	r2, #1
 800bf08:	701a      	strb	r2, [r3, #0]
			kDataHandler.bPageFilled = false;
 800bf0a:	4b20      	ldr	r3, [pc, #128]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
			// Call to save with SD card
		}

		if( kDataHandler.bReadyToSend )
 800bf12:	4b1e      	ldr	r3, [pc, #120]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf14:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d034      	beq.n	800bf86 <DataHandler_Operate+0xae>
		{
			if(kDataHandler.u8LengthPointer == 0)
 800bf1c:	4b1b      	ldr	r3, [pc, #108]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf1e:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d110      	bne.n	800bf48 <DataHandler_Operate+0x70>
			{
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
 800bf26:	4b19      	ldr	r3, [pc, #100]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf28:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4613      	mov	r3, r2
 800bf30:	019b      	lsls	r3, r3, #6
 800bf32:	4413      	add	r3, r2
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800bf3a:	4a14      	ldr	r2, [pc, #80]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf3c:	4413      	add	r3, r2
 800bf3e:	3308      	adds	r3, #8
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 f837 	bl	800bfb4 <DataHandler_CopyMemoryToTransmissionBuffer>
 800bf46:	e013      	b.n	800bf70 <DataHandler_Operate+0x98>
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
			}
			else
			{
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
 800bf48:	4b10      	ldr	r3, [pc, #64]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf4a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800bf4e:	4619      	mov	r1, r3
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf52:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800bf56:	3b01      	subs	r3, #1
 800bf58:	019a      	lsls	r2, r3, #6
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	019b      	lsls	r3, r3, #6
 800bf5e:	440b      	add	r3, r1
 800bf60:	00db      	lsls	r3, r3, #3
 800bf62:	4413      	add	r3, r2
 800bf64:	4a09      	ldr	r2, [pc, #36]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf66:	4413      	add	r3, r2
 800bf68:	3308      	adds	r3, #8
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f822 	bl	800bfb4 <DataHandler_CopyMemoryToTransmissionBuffer>
			}

			CallForTransmissionEvent(); //Inform main event system that there is a pending transmission and data is preloaded to Memory Interchange
 800bf70:	f000 f8b2 	bl	800c0d8 <CallForTransmissionEvent>
			kDataHandler.bReadyToSend = false;
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <DataHandler_Operate+0xb4>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800bf7c:	e003      	b.n	800bf86 <DataHandler_Operate+0xae>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800bf7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bf82:	f7ff fe35 	bl	800bbf0 <AssertError>
}
 800bf86:	bf00      	nop
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	2000038c 	.word	0x2000038c

0800bf90 <DataHandler_AccessMemoryInterchange>:

void DataHandler_AccessMemoryInterchange( MemoryInterchange_t ** pkMemoryInterchangeAddress)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
	MemoryInterchange_t *pkPointer;
	pkPointer = &kMemoryInterchange;
 800bf98:	4b05      	ldr	r3, [pc, #20]	; (800bfb0 <DataHandler_AccessMemoryInterchange+0x20>)
 800bf9a:	60fb      	str	r3, [r7, #12]
	*pkMemoryInterchangeAddress = pkPointer;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	601a      	str	r2, [r3, #0]
}
 800bfa2:	bf00      	nop
 800bfa4:	3714      	adds	r7, #20
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	200007a8 	.word	0x200007a8

0800bfb4 <DataHandler_CopyMemoryToTransmissionBuffer>:

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
	if( (kMemoryInterchange.eMemoryState != MemoryState_DataSent) && ( kMemoryInterchange.eMemoryState != MemoryState_DataSkipped ) )
 800bfbc:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800bfbe:	791b      	ldrb	r3, [r3, #4]
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d007      	beq.n	800bfd4 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
 800bfc4:	4b09      	ldr	r3, [pc, #36]	; (800bfec <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800bfc6:	791b      	ldrb	r3, [r3, #4]
 800bfc8:	2b03      	cmp	r3, #3
 800bfca:	d003      	beq.n	800bfd4 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
	{
		AssertError(AppError_DataLost); // Memory would be overwritten;
 800bfcc:	2040      	movs	r0, #64	; 0x40
 800bfce:	f7ff fe0f 	bl	800bbf0 <AssertError>
 800bfd2:	e006      	b.n	800bfe2 <DataHandler_CopyMemoryToTransmissionBuffer+0x2e>
	}
	else
	{
		kMemoryInterchange.fDataPointer = pfMemoryArray;
 800bfd4:	4a05      	ldr	r2, [pc, #20]	; (800bfec <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6013      	str	r3, [r2, #0]
		kMemoryInterchange.eMemoryState = MemoryState_NewData;
 800bfda:	4b04      	ldr	r3, [pc, #16]	; (800bfec <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	711a      	strb	r2, [r3, #4]
	}

}
 800bfe0:	bf00      	nop
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	200007a8 	.word	0x200007a8

0800bff0 <EventSystem_Initialize>:
}EventData_t;

static EventData_t kEventData;

void EventSystem_Initialize()
{
 800bff0:	b480      	push	{r7}
 800bff2:	af00      	add	r7, sp, #0
	kEventData.bInitalized = true;
 800bff4:	4b03      	ldr	r3, [pc, #12]	; (800c004 <EventSystem_Initialize+0x14>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	701a      	strb	r2, [r3, #0]
}
 800bffa:	bf00      	nop
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	200007b0 	.word	0x200007b0

0800c008 <EventSystem_HandleEvent>:
void EventSystem_HandleEvent()
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
	uint32_t u32EventCode = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	607b      	str	r3, [r7, #4]

	u32EventCode = (uint32_t)Event_DataReadyToTransmit;
 800c012:	2301      	movs	r3, #1
 800c014:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c016:	4b1d      	ldr	r3, [pc, #116]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4013      	ands	r3, r2
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	429a      	cmp	r2, r3
 800c022:	d108      	bne.n	800c036 <EventSystem_HandleEvent+0x2e>
	{
		ComManager_ArmTransmission();
 800c024:	f000 faa0 	bl	800c568 <ComManager_ArmTransmission>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c028:	4b18      	ldr	r3, [pc, #96]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	43db      	mvns	r3, r3
 800c030:	4013      	ands	r3, r2
 800c032:	4a16      	ldr	r2, [pc, #88]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c034:	6053      	str	r3, [r2, #4]
	}
	u32EventCode = (uint32_t)Event_USBConnected;
 800c036:	2302      	movs	r3, #2
 800c038:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c03a:	4b14      	ldr	r3, [pc, #80]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c03c:	685a      	ldr	r2, [r3, #4]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4013      	ands	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	429a      	cmp	r2, r3
 800c046:	d109      	bne.n	800c05c <EventSystem_HandleEvent+0x54>
	{
		CommManager_SetUSBConnectionState(USB_Connected);
 800c048:	2001      	movs	r0, #1
 800c04a:	f000 fa6f 	bl	800c52c <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c04e:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	43db      	mvns	r3, r3
 800c056:	4013      	ands	r3, r2
 800c058:	4a0c      	ldr	r2, [pc, #48]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c05a:	6053      	str	r3, [r2, #4]
	}
	u32EventCode = (uint32_t)Event_USBDisconnected;
 800c05c:	2304      	movs	r3, #4
 800c05e:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4013      	ands	r3, r2
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d109      	bne.n	800c082 <EventSystem_HandleEvent+0x7a>
	{
		CommManager_SetUSBConnectionState(USB_Disconnected);
 800c06e:	2000      	movs	r0, #0
 800c070:	f000 fa5c 	bl	800c52c <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c074:	4b05      	ldr	r3, [pc, #20]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	43db      	mvns	r3, r3
 800c07c:	4013      	ands	r3, r2
 800c07e:	4a03      	ldr	r2, [pc, #12]	; (800c08c <EventSystem_HandleEvent+0x84>)
 800c080:	6053      	str	r3, [r2, #4]
	}
}
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	200007b0 	.word	0x200007b0

0800c090 <EventSystem_Signalize>:

void EventSystem_Signalize(Event_t eEvent)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	71fb      	strb	r3, [r7, #7]
	uint32_t u32EventCode = (uint32_t)eEvent;
 800c09a:	79fb      	ldrb	r3, [r7, #7]
 800c09c:	60fb      	str	r3, [r7, #12]

	if(kEventData.bInitalized)
 800c09e:	4b0d      	ldr	r3, [pc, #52]	; (800c0d4 <EventSystem_Signalize+0x44>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d011      	beq.n	800c0ca <EventSystem_Signalize+0x3a>
	{
		if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c0a6:	4b0b      	ldr	r3, [pc, #44]	; (800c0d4 <EventSystem_Signalize+0x44>)
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d104      	bne.n	800c0be <EventSystem_Signalize+0x2e>
		{
			AssertError(AppError_EventOverlap); // Event already set, before handling it
 800c0b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c0b8:	f7ff fd9a 	bl	800bbf0 <AssertError>
		else
		{
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
		}
	}
}
 800c0bc:	e005      	b.n	800c0ca <EventSystem_Signalize+0x3a>
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
 800c0be:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <EventSystem_Signalize+0x44>)
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	4a03      	ldr	r2, [pc, #12]	; (800c0d4 <EventSystem_Signalize+0x44>)
 800c0c8:	6053      	str	r3, [r2, #4]
}
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	200007b0 	.word	0x200007b0

0800c0d8 <CallForTransmissionEvent>:
#include "ModuleInterconnect.h"
#include "EventSystem.h"
#include "DataCommon.h"

void CallForTransmissionEvent()
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_DataReadyToTransmit);
 800c0dc:	2001      	movs	r0, #1
 800c0de:	f7ff ffd7 	bl	800c090 <EventSystem_Signalize>
}
 800c0e2:	bf00      	nop
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <CallForUSBConnection>:

void CallForUSBConnection()
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBConnected);
 800c0ea:	2002      	movs	r0, #2
 800c0ec:	f7ff ffd0 	bl	800c090 <EventSystem_Signalize>
}
 800c0f0:	bf00      	nop
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <CallForUSBDisonnection>:
void CallForUSBDisonnection()
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBDisconnected);
 800c0f8:	2004      	movs	r0, #4
 800c0fa:	f7ff ffc9 	bl	800c090 <EventSystem_Signalize>
}
 800c0fe:	bf00      	nop
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800c104:	b580      	push	{r7, lr}
 800c106:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800c108:	4b77      	ldr	r3, [pc, #476]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c10a:	79db      	ldrb	r3, [r3, #7]
 800c10c:	2b05      	cmp	r3, #5
 800c10e:	f200 80e3 	bhi.w	800c2d8 <TempCollect_Operate+0x1d4>
 800c112:	a201      	add	r2, pc, #4	; (adr r2, 800c118 <TempCollect_Operate+0x14>)
 800c114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c118:	0800c131 	.word	0x0800c131
 800c11c:	0800c13b 	.word	0x0800c13b
 800c120:	0800c16b 	.word	0x0800c16b
 800c124:	0800c1f1 	.word	0x0800c1f1
 800c128:	0800c275 	.word	0x0800c275
 800c12c:	0800c1c5 	.word	0x0800c1c5
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800c130:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c134:	f7ff fd5c 	bl	800bbf0 <AssertError>
		break;
 800c138:	e0d4      	b.n	800c2e4 <TempCollect_Operate+0x1e0>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800c13a:	4b6b      	ldr	r3, [pc, #428]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c13c:	799b      	ldrb	r3, [r3, #6]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 80cf 	beq.w	800c2e2 <TempCollect_Operate+0x1de>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800c144:	4b68      	ldr	r3, [pc, #416]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c146:	2202      	movs	r2, #2
 800c148:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800c14a:	4b67      	ldr	r3, [pc, #412]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800c150:	4b65      	ldr	r3, [pc, #404]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c152:	2200      	movs	r2, #0
 800c154:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800c156:	4b64      	ldr	r3, [pc, #400]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c158:	2200      	movs	r2, #0
 800c15a:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800c15c:	4b62      	ldr	r3, [pc, #392]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c15e:	2200      	movs	r2, #0
 800c160:	725a      	strb	r2, [r3, #9]
			kTemperatureData.u8TimeoutCounter = 0;
 800c162:	4b61      	ldr	r3, [pc, #388]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c164:	2200      	movs	r2, #0
 800c166:	771a      	strb	r2, [r3, #28]
		}
		break;
 800c168:	e0bb      	b.n	800c2e2 <TempCollect_Operate+0x1de>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800c16a:	4b5f      	ldr	r3, [pc, #380]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800c170:	4b5d      	ldr	r3, [pc, #372]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c172:	8a9b      	ldrh	r3, [r3, #20]
 800c174:	2b04      	cmp	r3, #4
 800c176:	d80e      	bhi.n	800c196 <TempCollect_Operate+0x92>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800c178:	4b5b      	ldr	r3, [pc, #364]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800c17e:	4b5a      	ldr	r3, [pc, #360]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c180:	8a9b      	ldrh	r3, [r3, #20]
 800c182:	461a      	mov	r2, r3
 800c184:	4613      	mov	r3, r2
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	4413      	add	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4a57      	ldr	r2, [pc, #348]	; (800c2ec <TempCollect_Operate+0x1e8>)
 800c18e:	4413      	add	r3, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f7f4 ffb9 	bl	8001108 <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800c196:	4b54      	ldr	r3, [pc, #336]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c198:	8adb      	ldrh	r3, [r3, #22]
 800c19a:	2b04      	cmp	r3, #4
 800c19c:	d80e      	bhi.n	800c1bc <TempCollect_Operate+0xb8>
		{
			kTemperatureData.bStateReady[1] = false;
 800c19e:	4b52      	ldr	r3, [pc, #328]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800c1a4:	4b50      	ldr	r3, [pc, #320]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1a6:	8adb      	ldrh	r3, [r3, #22]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4a4f      	ldr	r2, [pc, #316]	; (800c2f0 <TempCollect_Operate+0x1ec>)
 800c1b4:	4413      	add	r3, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7f4 ffa6 	bl	8001108 <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800c1bc:	4b4a      	ldr	r3, [pc, #296]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1be:	2205      	movs	r2, #5
 800c1c0:	71da      	strb	r2, [r3, #7]
		break;
 800c1c2:	e08f      	b.n	800c2e4 <TempCollect_Operate+0x1e0>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800c1c4:	4b48      	ldr	r3, [pc, #288]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1c6:	7a9b      	ldrb	r3, [r3, #10]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00a      	beq.n	800c1e2 <TempCollect_Operate+0xde>
 800c1cc:	4b46      	ldr	r3, [pc, #280]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1ce:	7adb      	ldrb	r3, [r3, #11]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <TempCollect_Operate+0xde>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800c1d4:	4b44      	ldr	r3, [pc, #272]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1d6:	2203      	movs	r2, #3
 800c1d8:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u8TimeoutCounter = 0;
 800c1da:	4b43      	ldr	r3, [pc, #268]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	771a      	strb	r2, [r3, #28]
		else
		{
			kTemperatureData.u8TimeoutCounter++;
			//todo: implement a timeout comm reset function
		}
		break;
 800c1e0:	e080      	b.n	800c2e4 <TempCollect_Operate+0x1e0>
			kTemperatureData.u8TimeoutCounter++;
 800c1e2:	4b41      	ldr	r3, [pc, #260]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1e4:	7f1b      	ldrb	r3, [r3, #28]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	4b3f      	ldr	r3, [pc, #252]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1ec:	771a      	strb	r2, [r3, #28]
		break;
 800c1ee:	e079      	b.n	800c2e4 <TempCollect_Operate+0x1e0>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800c1f0:	4b3d      	ldr	r3, [pc, #244]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c1f2:	7a1b      	ldrb	r3, [r3, #8]
 800c1f4:	f083 0301 	eor.w	r3, r3, #1
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d017      	beq.n	800c22e <TempCollect_Operate+0x12a>
		{
			kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800c1fe:	4b3a      	ldr	r3, [pc, #232]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c200:	8a9b      	ldrh	r3, [r3, #20]
 800c202:	461a      	mov	r2, r3
 800c204:	4613      	mov	r3, r2
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	4413      	add	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4a37      	ldr	r2, [pc, #220]	; (800c2ec <TempCollect_Operate+0x1e8>)
 800c20e:	4413      	add	r3, r2
 800c210:	4618      	mov	r0, r3
 800c212:	f7f4 ff8f 	bl	8001134 <MCP9808_DecodeTemperature>
 800c216:	eef0 7a40 	vmov.f32	s15, s0
 800c21a:	4b33      	ldr	r3, [pc, #204]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c21c:	edc3 7a03 	vstr	s15, [r3, #12]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800c220:	4b31      	ldr	r3, [pc, #196]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c222:	edd3 7a03 	vldr	s15, [r3, #12]
 800c226:	eeb0 0a67 	vmov.f32	s0, s15
 800c22a:	f7ff fe0d 	bl	800be48 <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800c22e:	4b2e      	ldr	r3, [pc, #184]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c230:	7a5b      	ldrb	r3, [r3, #9]
 800c232:	f083 0301 	eor.w	r3, r3, #1
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d017      	beq.n	800c26c <TempCollect_Operate+0x168>
		{
			kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800c23c:	4b2a      	ldr	r3, [pc, #168]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c23e:	8adb      	ldrh	r3, [r3, #22]
 800c240:	461a      	mov	r2, r3
 800c242:	4613      	mov	r3, r2
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	4413      	add	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4a29      	ldr	r2, [pc, #164]	; (800c2f0 <TempCollect_Operate+0x1ec>)
 800c24c:	4413      	add	r3, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f4 ff70 	bl	8001134 <MCP9808_DecodeTemperature>
 800c254:	eef0 7a40 	vmov.f32	s15, s0
 800c258:	4b23      	ldr	r3, [pc, #140]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c25a:	edc3 7a04 	vstr	s15, [r3, #16]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800c25e:	4b22      	ldr	r3, [pc, #136]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c260:	edd3 7a04 	vldr	s15, [r3, #16]
 800c264:	eeb0 0a67 	vmov.f32	s0, s15
 800c268:	f7ff fdee 	bl	800be48 <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800c26c:	4b1e      	ldr	r3, [pc, #120]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c26e:	2204      	movs	r2, #4
 800c270:	71da      	strb	r2, [r3, #7]
		break;
 800c272:	e037      	b.n	800c2e4 <TempCollect_Operate+0x1e0>

	case(TempCollect_ArmNewReading):
		kTemperatureData.u16ArrayASensorIndex++;
 800c274:	4b1c      	ldr	r3, [pc, #112]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c276:	8a9b      	ldrh	r3, [r3, #20]
 800c278:	3301      	adds	r3, #1
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	4b1a      	ldr	r3, [pc, #104]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c27e:	829a      	strh	r2, [r3, #20]

		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800c280:	4b19      	ldr	r3, [pc, #100]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c282:	8a9b      	ldrh	r3, [r3, #20]
 800c284:	2b04      	cmp	r3, #4
 800c286:	d902      	bls.n	800c28e <TempCollect_Operate+0x18a>
		{
			kTemperatureData.bReadFinished[0] = true;
 800c288:	4b17      	ldr	r3, [pc, #92]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c28a:	2201      	movs	r2, #1
 800c28c:	721a      	strb	r2, [r3, #8]
		}

		kTemperatureData.u16ArrayBSensorIndex++;
 800c28e:	4b16      	ldr	r3, [pc, #88]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c290:	8adb      	ldrh	r3, [r3, #22]
 800c292:	3301      	adds	r3, #1
 800c294:	b29a      	uxth	r2, r3
 800c296:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c298:	82da      	strh	r2, [r3, #22]

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800c29a:	4b13      	ldr	r3, [pc, #76]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c29c:	8adb      	ldrh	r3, [r3, #22]
 800c29e:	2b04      	cmp	r3, #4
 800c2a0:	d902      	bls.n	800c2a8 <TempCollect_Operate+0x1a4>
		{
			kTemperatureData.bReadFinished[1] = true;
 800c2a2:	4b11      	ldr	r3, [pc, #68]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	725a      	strb	r2, [r3, #9]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800c2a8:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c2aa:	7a1b      	ldrb	r3, [r3, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00f      	beq.n	800c2d0 <TempCollect_Operate+0x1cc>
 800c2b0:	4b0d      	ldr	r3, [pc, #52]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c2b2:	7a5b      	ldrb	r3, [r3, #9]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <TempCollect_Operate+0x1cc>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800c2b8:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	71da      	strb	r2, [r3, #7]

			/*
			 * Open new measurement at the end of current session
			 */
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800c2be:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	4908      	ldr	r1, [pc, #32]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c2c6:	618a      	str	r2, [r1, #24]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff fd29 	bl	800bd20 <DataHandler_OpenNewMeasurement>
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800c2ce:	e009      	b.n	800c2e4 <TempCollect_Operate+0x1e0>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800c2d0:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <TempCollect_Operate+0x1e4>)
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	71da      	strb	r2, [r3, #7]
		break;
 800c2d6:	e005      	b.n	800c2e4 <TempCollect_Operate+0x1e0>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800c2d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c2dc:	f7ff fc88 	bl	800bbf0 <AssertError>
	break;
 800c2e0:	e000      	b.n	800c2e4 <TempCollect_Operate+0x1e0>
		break;
 800c2e2:	bf00      	nop
	}
}
 800c2e4:	bf00      	nop
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	200007b8 	.word	0x200007b8
 800c2ec:	20000a2c 	.word	0x20000a2c
 800c2f0:	20000a68 	.word	0x20000a68

0800c2f4 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <TempCollect_Initialize+0x1c>)
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800c2fe:	4b04      	ldr	r3, [pc, #16]	; (800c310 <TempCollect_Initialize+0x1c>)
 800c300:	2201      	movs	r2, #1
 800c302:	715a      	strb	r2, [r3, #5]
	}
	if(MCP9808_I2CB_DeviceCount == 0)
	{
		kTemperatureData.bStateReady[1] = true;
	}
}
 800c304:	bf00      	nop
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	200007b8 	.word	0x200007b8

0800c314 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800c318:	f7f4 fe0c 	bl	8000f34 <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <TempCollect_ScheduleMeasurement+0x24>)
 800c31e:	799b      	ldrb	r3, [r3, #6]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d004      	beq.n	800c32e <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800c324:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c328:	f7ff fc62 	bl	800bbf0 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800c32c:	e002      	b.n	800c334 <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800c32e:	4b02      	ldr	r3, [pc, #8]	; (800c338 <TempCollect_ScheduleMeasurement+0x24>)
 800c330:	2201      	movs	r2, #1
 800c332:	719a      	strb	r2, [r3, #6]
}
 800c334:	bf00      	nop
 800c336:	bd80      	pop	{r7, pc}
 800c338:	200007b8 	.word	0x200007b8

0800c33c <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800c340:	4b03      	ldr	r3, [pc, #12]	; (800c350 <TempCollect_I2CA_Done+0x14>)
 800c342:	2201      	movs	r2, #1
 800c344:	729a      	strb	r2, [r3, #10]
}
 800c346:	bf00      	nop
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	200007b8 	.word	0x200007b8

0800c354 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800c354:	b480      	push	{r7}
 800c356:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800c358:	4b03      	ldr	r3, [pc, #12]	; (800c368 <TempCollect_I2CB_Done+0x14>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	72da      	strb	r2, [r3, #11]
}
 800c35e:	bf00      	nop
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	200007b8 	.word	0x200007b8

0800c36c <CommManager_Initialize>:
}CommunicationData_t;

static CommunicationData_t kCommData;

void CommManager_Initialize()
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
	kCommData.bInitialized = true;
 800c370:	4b03      	ldr	r3, [pc, #12]	; (800c380 <CommManager_Initialize+0x14>)
 800c372:	2201      	movs	r2, #1
 800c374:	701a      	strb	r2, [r3, #0]
	CommManager_FlushFrame();
 800c376:	f000 f91b 	bl	800c5b0 <CommManager_FlushFrame>
}
 800c37a:	bf00      	nop
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	200007d8 	.word	0x200007d8

0800c384 <CommManager_Operate>:
void CommManager_Operate()
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
	bool bResult;
	float * pfPointer;
	float fValue;

	if(kCommData.bInitialized)
 800c38a:	4b66      	ldr	r3, [pc, #408]	; (800c524 <CommManager_Operate+0x1a0>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80be 	beq.w	800c510 <CommManager_Operate+0x18c>
	{

		switch (kCommData.eState)
 800c394:	4b63      	ldr	r3, [pc, #396]	; (800c524 <CommManager_Operate+0x1a0>)
 800c396:	7a1b      	ldrb	r3, [r3, #8]
 800c398:	2b07      	cmp	r3, #7
 800c39a:	f200 80bb 	bhi.w	800c514 <CommManager_Operate+0x190>
 800c39e:	a201      	add	r2, pc, #4	; (adr r2, 800c3a4 <CommManager_Operate+0x20>)
 800c3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a4:	0800c3c5 	.word	0x0800c3c5
 800c3a8:	0800c515 	.word	0x0800c515
 800c3ac:	0800c3cd 	.word	0x0800c3cd
 800c3b0:	0800c3e9 	.word	0x0800c3e9
 800c3b4:	0800c427 	.word	0x0800c427
 800c3b8:	0800c443 	.word	0x0800c443
 800c3bc:	0800c515 	.word	0x0800c515
 800c3c0:	0800c4f7 	.word	0x0800c4f7
		{
		case Comm_Initialized:

			kCommData.eState = Comm_Idle;
 800c3c4:	4b57      	ldr	r3, [pc, #348]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	721a      	strb	r2, [r3, #8]
			break;
 800c3ca:	e0a6      	b.n	800c51a <CommManager_Operate+0x196>

			//Wait for new Arm_Transmission call
			break;
		case Comm_OpenTransmission:

			kCommData.u8Frame[0] = dOpeningByte;
 800c3cc:	4b55      	ldr	r3, [pc, #340]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3ce:	220a      	movs	r2, #10
 800c3d0:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800c3d2:	4b54      	ldr	r3, [pc, #336]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800c3d8:	4b52      	ldr	r3, [pc, #328]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3da:	7a1a      	ldrb	r2, [r3, #8]
 800c3dc:	4b51      	ldr	r3, [pc, #324]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3de:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800c3e0:	4b50      	ldr	r3, [pc, #320]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3e2:	2205      	movs	r2, #5
 800c3e4:	721a      	strb	r2, [r3, #8]
			break;
 800c3e6:	e098      	b.n	800c51a <CommManager_Operate+0x196>
		case Comm_AssembleFrame:

			pfPointer = kCommData.pkMemoryPointer->fDataPointer;
 800c3e8:	4b4e      	ldr	r3, [pc, #312]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	60bb      	str	r3, [r7, #8]
			fValue = pfPointer[kCommData.u16ReadoutPointer];
 800c3f0:	4b4c      	ldr	r3, [pc, #304]	; (800c524 <CommManager_Operate+0x1a0>)
 800c3f2:	895b      	ldrh	r3, [r3, #10]
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	607b      	str	r3, [r7, #4]

			SetFirstDebugPinOn();
 800c3fe:	f7f4 fde9 	bl	8000fd4 <SetFirstDebugPinOn>
			FrameAssembler_ConvertFloatToCharArray(kCommData.u8Frame, fValue);
 800c402:	ed97 0a01 	vldr	s0, [r7, #4]
 800c406:	4848      	ldr	r0, [pc, #288]	; (800c528 <CommManager_Operate+0x1a4>)
 800c408:	f000 f8ec 	bl	800c5e4 <FrameAssembler_ConvertFloatToCharArray>
			SetFirstDebugPinOff();
 800c40c:	f7f4 fdee 	bl	8000fec <SetFirstDebugPinOff>
			kCommData.u8CurrentFrameLength = 10;
 800c410:	4b44      	ldr	r3, [pc, #272]	; (800c524 <CommManager_Operate+0x1a0>)
 800c412:	220a      	movs	r2, #10
 800c414:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800c416:	4b43      	ldr	r3, [pc, #268]	; (800c524 <CommManager_Operate+0x1a0>)
 800c418:	7a1a      	ldrb	r2, [r3, #8]
 800c41a:	4b42      	ldr	r3, [pc, #264]	; (800c524 <CommManager_Operate+0x1a0>)
 800c41c:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800c41e:	4b41      	ldr	r3, [pc, #260]	; (800c524 <CommManager_Operate+0x1a0>)
 800c420:	2205      	movs	r2, #5
 800c422:	721a      	strb	r2, [r3, #8]
			break;
 800c424:	e079      	b.n	800c51a <CommManager_Operate+0x196>
		case Comm_CloseTransmission:

			kCommData.u8Frame[0] = dClosingByte;
 800c426:	4b3f      	ldr	r3, [pc, #252]	; (800c524 <CommManager_Operate+0x1a0>)
 800c428:	220d      	movs	r2, #13
 800c42a:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800c42c:	4b3d      	ldr	r3, [pc, #244]	; (800c524 <CommManager_Operate+0x1a0>)
 800c42e:	2201      	movs	r2, #1
 800c430:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800c432:	4b3c      	ldr	r3, [pc, #240]	; (800c524 <CommManager_Operate+0x1a0>)
 800c434:	7a1a      	ldrb	r2, [r3, #8]
 800c436:	4b3b      	ldr	r3, [pc, #236]	; (800c524 <CommManager_Operate+0x1a0>)
 800c438:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800c43a:	4b3a      	ldr	r3, [pc, #232]	; (800c524 <CommManager_Operate+0x1a0>)
 800c43c:	2205      	movs	r2, #5
 800c43e:	721a      	strb	r2, [r3, #8]
			break;
 800c440:	e06b      	b.n	800c51a <CommManager_Operate+0x196>
		case Comm_Transmit:

			bResult = USB_TransmitData(kCommData.u8Frame, kCommData.u8CurrentFrameLength);
 800c442:	4b38      	ldr	r3, [pc, #224]	; (800c524 <CommManager_Operate+0x1a0>)
 800c444:	7d9b      	ldrb	r3, [r3, #22]
 800c446:	4619      	mov	r1, r3
 800c448:	4837      	ldr	r0, [pc, #220]	; (800c528 <CommManager_Operate+0x1a4>)
 800c44a:	f000 f8f3 	bl	800c634 <USB_TransmitData>
 800c44e:	4603      	mov	r3, r0
 800c450:	73fb      	strb	r3, [r7, #15]
			if( !bResult )
 800c452:	7bfb      	ldrb	r3, [r7, #15]
 800c454:	f083 0301 	eor.w	r3, r3, #1
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d039      	beq.n	800c4d2 <CommManager_Operate+0x14e>
			{
				kCommData.u8TrialsCounter = 0;
 800c45e:	4b31      	ldr	r3, [pc, #196]	; (800c524 <CommManager_Operate+0x1a0>)
 800c460:	2200      	movs	r2, #0
 800c462:	75da      	strb	r2, [r3, #23]
				if ( kCommData.ePreviousState == Comm_AssembleFrame )
 800c464:	4b2f      	ldr	r3, [pc, #188]	; (800c524 <CommManager_Operate+0x1a0>)
 800c466:	7a5b      	ldrb	r3, [r3, #9]
 800c468:	2b03      	cmp	r3, #3
 800c46a:	d113      	bne.n	800c494 <CommManager_Operate+0x110>
				{
					kCommData.u16ReadoutPointer++;
 800c46c:	4b2d      	ldr	r3, [pc, #180]	; (800c524 <CommManager_Operate+0x1a0>)
 800c46e:	895b      	ldrh	r3, [r3, #10]
 800c470:	3301      	adds	r3, #1
 800c472:	b29a      	uxth	r2, r3
 800c474:	4b2b      	ldr	r3, [pc, #172]	; (800c524 <CommManager_Operate+0x1a0>)
 800c476:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800c478:	4b2a      	ldr	r3, [pc, #168]	; (800c524 <CommManager_Operate+0x1a0>)
 800c47a:	2203      	movs	r2, #3
 800c47c:	721a      	strb	r2, [r3, #8]
					if( kCommData.u16ReadoutPointer >= dMemoryWidth)
 800c47e:	4b29      	ldr	r3, [pc, #164]	; (800c524 <CommManager_Operate+0x1a0>)
 800c480:	895b      	ldrh	r3, [r3, #10]
 800c482:	2b0f      	cmp	r3, #15
 800c484:	d948      	bls.n	800c518 <CommManager_Operate+0x194>
					{
						kCommData.eState = Comm_CloseTransmission;
 800c486:	4b27      	ldr	r3, [pc, #156]	; (800c524 <CommManager_Operate+0x1a0>)
 800c488:	2204      	movs	r2, #4
 800c48a:	721a      	strb	r2, [r3, #8]
						kCommData.u16ReadoutPointer = 0;
 800c48c:	4b25      	ldr	r3, [pc, #148]	; (800c524 <CommManager_Operate+0x1a0>)
 800c48e:	2200      	movs	r2, #0
 800c490:	815a      	strh	r2, [r3, #10]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
				{
					kCommData.eState = Comm_Abort;
				}
			}
			break;
 800c492:	e041      	b.n	800c518 <CommManager_Operate+0x194>
				else if( kCommData.ePreviousState == Comm_CloseTransmission)
 800c494:	4b23      	ldr	r3, [pc, #140]	; (800c524 <CommManager_Operate+0x1a0>)
 800c496:	7a5b      	ldrb	r3, [r3, #9]
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d107      	bne.n	800c4ac <CommManager_Operate+0x128>
					kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSent;
 800c49c:	4b21      	ldr	r3, [pc, #132]	; (800c524 <CommManager_Operate+0x1a0>)
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	711a      	strb	r2, [r3, #4]
					kCommData.eState = Comm_Idle;
 800c4a4:	4b1f      	ldr	r3, [pc, #124]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	721a      	strb	r2, [r3, #8]
			break;
 800c4aa:	e035      	b.n	800c518 <CommManager_Operate+0x194>
				else if ( kCommData.ePreviousState == Comm_OpenTransmission )
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4ae:	7a5b      	ldrb	r3, [r3, #9]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d106      	bne.n	800c4c2 <CommManager_Operate+0x13e>
					kCommData.u16ReadoutPointer = 0;
 800c4b4:	4b1b      	ldr	r3, [pc, #108]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800c4ba:	4b1a      	ldr	r3, [pc, #104]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4bc:	2203      	movs	r2, #3
 800c4be:	721a      	strb	r2, [r3, #8]
			break;
 800c4c0:	e02a      	b.n	800c518 <CommManager_Operate+0x194>
					AssertError(AppError_TransmissionLogicBroken);
 800c4c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c4c6:	f7ff fb93 	bl	800bbf0 <AssertError>
					kCommData.eState = Comm_Abort;
 800c4ca:	4b16      	ldr	r3, [pc, #88]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4cc:	2207      	movs	r2, #7
 800c4ce:	721a      	strb	r2, [r3, #8]
			break;
 800c4d0:	e022      	b.n	800c518 <CommManager_Operate+0x194>
				kCommData.eState = kCommData.ePreviousState;
 800c4d2:	4b14      	ldr	r3, [pc, #80]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4d4:	7a5a      	ldrb	r2, [r3, #9]
 800c4d6:	4b13      	ldr	r3, [pc, #76]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4d8:	721a      	strb	r2, [r3, #8]
				kCommData.u8TrialsCounter++;
 800c4da:	4b12      	ldr	r3, [pc, #72]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4dc:	7ddb      	ldrb	r3, [r3, #23]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	4b10      	ldr	r3, [pc, #64]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4e4:	75da      	strb	r2, [r3, #23]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4e8:	7ddb      	ldrb	r3, [r3, #23]
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d914      	bls.n	800c518 <CommManager_Operate+0x194>
					kCommData.eState = Comm_Abort;
 800c4ee:	4b0d      	ldr	r3, [pc, #52]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4f0:	2207      	movs	r2, #7
 800c4f2:	721a      	strb	r2, [r3, #8]
			break;
 800c4f4:	e010      	b.n	800c518 <CommManager_Operate+0x194>
		case Comm_Receiving:

			break;
		case Comm_Abort:

			kCommData.eState = Comm_Idle;
 800c4f6:	4b0b      	ldr	r3, [pc, #44]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	721a      	strb	r2, [r3, #8]

			kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800c4fc:	4b09      	ldr	r3, [pc, #36]	; (800c524 <CommManager_Operate+0x1a0>)
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	2203      	movs	r2, #3
 800c502:	711a      	strb	r2, [r3, #4]
			kCommData.u16ReadoutPointer = 0;
 800c504:	4b07      	ldr	r3, [pc, #28]	; (800c524 <CommManager_Operate+0x1a0>)
 800c506:	2200      	movs	r2, #0
 800c508:	815a      	strh	r2, [r3, #10]
			CommManager_FlushFrame();
 800c50a:	f000 f851 	bl	800c5b0 <CommManager_FlushFrame>
			break;
 800c50e:	e004      	b.n	800c51a <CommManager_Operate+0x196>
		default:

			break;
		}
	}
 800c510:	bf00      	nop
 800c512:	e002      	b.n	800c51a <CommManager_Operate+0x196>
			break;
 800c514:	bf00      	nop
 800c516:	e000      	b.n	800c51a <CommManager_Operate+0x196>
			break;
 800c518:	bf00      	nop
}
 800c51a:	bf00      	nop
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	200007d8 	.word	0x200007d8
 800c528:	200007e4 	.word	0x200007e4

0800c52c <CommManager_SetUSBConnectionState>:

void CommManager_SetUSBConnectionState( USBState_t eState )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	71fb      	strb	r3, [r7, #7]
	//todo: Add periodic change of the VSENSE pin
	if( eState == USB_Connected)
 800c536:	79fb      	ldrb	r3, [r7, #7]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d106      	bne.n	800c54a <CommManager_SetUSBConnectionState+0x1e>
	{
		kCommData.bUSBConnected = true;
 800c53c:	4b09      	ldr	r3, [pc, #36]	; (800c564 <CommManager_SetUSBConnectionState+0x38>)
 800c53e:	2201      	movs	r2, #1
 800c540:	761a      	strb	r2, [r3, #24]
		OperateLED_C(eLED_On);
 800c542:	2000      	movs	r0, #0
 800c544:	f7f4 fcd0 	bl	8000ee8 <OperateLED_C>
	{
		kCommData.bUSBConnected = false;
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
		OperateLED_C(eLED_Off);
	}
}
 800c548:	e008      	b.n	800c55c <CommManager_SetUSBConnectionState+0x30>
		kCommData.bUSBConnected = false;
 800c54a:	4b06      	ldr	r3, [pc, #24]	; (800c564 <CommManager_SetUSBConnectionState+0x38>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	761a      	strb	r2, [r3, #24]
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
 800c550:	4b04      	ldr	r3, [pc, #16]	; (800c564 <CommManager_SetUSBConnectionState+0x38>)
 800c552:	2207      	movs	r2, #7
 800c554:	721a      	strb	r2, [r3, #8]
		OperateLED_C(eLED_Off);
 800c556:	2001      	movs	r0, #1
 800c558:	f7f4 fcc6 	bl	8000ee8 <OperateLED_C>
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	200007d8 	.word	0x200007d8

0800c568 <ComManager_ArmTransmission>:

void ComManager_ArmTransmission()
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	af00      	add	r7, sp, #0
	DataHandler_AccessMemoryInterchange(&kCommData.pkMemoryPointer);
 800c56c:	480e      	ldr	r0, [pc, #56]	; (800c5a8 <ComManager_ArmTransmission+0x40>)
 800c56e:	f7ff fd0f 	bl	800bf90 <DataHandler_AccessMemoryInterchange>

	if( kCommData.bUSBConnected)
 800c572:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <ComManager_ArmTransmission+0x44>)
 800c574:	7e1b      	ldrb	r3, [r3, #24]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00f      	beq.n	800c59a <ComManager_ArmTransmission+0x32>
	{
		if(kCommData.eState == Comm_Idle)
 800c57a:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <ComManager_ArmTransmission+0x44>)
 800c57c:	7a1b      	ldrb	r3, [r3, #8]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d106      	bne.n	800c590 <ComManager_ArmTransmission+0x28>
		{
			kCommData.eState = Comm_OpenTransmission;
 800c582:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <ComManager_ArmTransmission+0x44>)
 800c584:	2202      	movs	r2, #2
 800c586:	721a      	strb	r2, [r3, #8]
			kCommData.u16ReadoutPointer = 0;
 800c588:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <ComManager_ArmTransmission+0x44>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	815a      	strh	r2, [r3, #10]
	else
	{
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
	}

}
 800c58e:	e008      	b.n	800c5a2 <ComManager_ArmTransmission+0x3a>
			AssertError(AppError_TransmissionOverlap);
 800c590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c594:	f7ff fb2c 	bl	800bbf0 <AssertError>
}
 800c598:	e003      	b.n	800c5a2 <ComManager_ArmTransmission+0x3a>
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800c59a:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <ComManager_ArmTransmission+0x44>)
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	2203      	movs	r2, #3
 800c5a0:	711a      	strb	r2, [r3, #4]
}
 800c5a2:	bf00      	nop
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	200007dc 	.word	0x200007dc
 800c5ac:	200007d8 	.word	0x200007d8

0800c5b0 <CommManager_FlushFrame>:

/* Internal functions */

void CommManager_FlushFrame()
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	71fb      	strb	r3, [r7, #7]
 800c5ba:	e007      	b.n	800c5cc <CommManager_FlushFrame+0x1c>
	{
		kCommData.u8Frame[u8Idx] = 0;
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	4a08      	ldr	r2, [pc, #32]	; (800c5e0 <CommManager_FlushFrame+0x30>)
 800c5c0:	4413      	add	r3, r2
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	731a      	strb	r2, [r3, #12]
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800c5c6:	79fb      	ldrb	r3, [r7, #7]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	71fb      	strb	r3, [r7, #7]
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	2b09      	cmp	r3, #9
 800c5d0:	d9f4      	bls.n	800c5bc <CommManager_FlushFrame+0xc>
	}
}
 800c5d2:	bf00      	nop
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	200007d8 	.word	0x200007d8

0800c5e4 <FrameAssembler_ConvertFloatToCharArray>:

#include "FrameAssembler.h"
#include <stdio.h>

void FrameAssembler_ConvertFloatToCharArray(uint8_t *pResultArray, float fNumber)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	ed87 0a00 	vstr	s0, [r7]
	sprintf((char*)pResultArray,"%+8.4f \t",fNumber);
 800c5f0:	6838      	ldr	r0, [r7, #0]
 800c5f2:	f7f3 ffb1 	bl	8000558 <__aeabi_f2d>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	4904      	ldr	r1, [pc, #16]	; (800c60c <FrameAssembler_ConvertFloatToCharArray+0x28>)
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f002 f87f 	bl	800e700 <siprintf>
}
 800c602:	bf00      	nop
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	08010c10 	.word	0x08010c10

0800c610 <USB_InitalizeTransmitterLogic>:
//static uint8_t Buf[] = "Test/r/n";

void ConvertDataToBytes(float *Dataset);

void USB_InitalizeTransmitterLogic(ADC_HandleTypeDef *phADCHandle)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
	kUSBTransmitterData.phADCHandle = phADCHandle;
 800c618:	4a05      	ldr	r2, [pc, #20]	; (800c630 <USB_InitalizeTransmitterLogic+0x20>)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6093      	str	r3, [r2, #8]
	kUSBTransmitterData.bInitialized = true;
 800c61e:	4b04      	ldr	r3, [pc, #16]	; (800c630 <USB_InitalizeTransmitterLogic+0x20>)
 800c620:	2201      	movs	r2, #1
 800c622:	701a      	strb	r2, [r3, #0]
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	200007f4 	.word	0x200007f4

0800c634 <USB_TransmitData>:

bool USB_TransmitData(uint8_t *Dataset, uint8_t u8Length)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
	bool bResult = true;
 800c640:	2301      	movs	r3, #1
 800c642:	73fb      	strb	r3, [r7, #15]

	if(kUSBTransmitterData.bInitialized)
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <USB_TransmitData+0x3c>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <USB_TransmitData+0x30>
	{
	/*
	 * result = true means that a fault occurred
	 */
	bResult = CDC_Transmit_FS(Dataset,  u8Length);
 800c64c:	78fb      	ldrb	r3, [r7, #3]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 ff42 	bl	800d4dc <CDC_Transmit_FS>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	bf14      	ite	ne
 800c65e:	2301      	movne	r3, #1
 800c660:	2300      	moveq	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
	}
	return bResult;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	200007f4 	.word	0x200007f4

0800c674 <USB_CheckForUSBConnection>:

void USB_CheckForUSBConnection()
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
	if( kUSBTransmitterData.bInitialized )
 800c678:	4b1e      	ldr	r3, [pc, #120]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d037      	beq.n	800c6f0 <USB_CheckForUSBConnection+0x7c>
	{
		if( !kUSBTransmitterData.bCheckStarted )
 800c680:	4b1c      	ldr	r3, [pc, #112]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c682:	785b      	ldrb	r3, [r3, #1]
 800c684:	f083 0301 	eor.w	r3, r3, #1
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d007      	beq.n	800c69e <USB_CheckForUSBConnection+0x2a>
		{
			HAL_ADC_Start_IT(kUSBTransmitterData.phADCHandle);
 800c68e:	4b19      	ldr	r3, [pc, #100]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	4618      	mov	r0, r3
 800c694:	f7f4 fe76 	bl	8001384 <HAL_ADC_Start_IT>
			kUSBTransmitterData.bCheckStarted = true;
 800c698:	4b16      	ldr	r3, [pc, #88]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c69a:	2201      	movs	r2, #1
 800c69c:	705a      	strb	r2, [r3, #1]
		}

		if( kUSBTransmitterData.bNewMeasurement )
 800c69e:	4b15      	ldr	r3, [pc, #84]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6a0:	789b      	ldrb	r3, [r3, #2]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d024      	beq.n	800c6f0 <USB_CheckForUSBConnection+0x7c>
		{
			kUSBTransmitterData.bNewMeasurement = false;
 800c6a6:	4b13      	ldr	r3, [pc, #76]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	709a      	strb	r2, [r3, #2]
			if( (kUSBTransmitterData.u32MeasuredVbus < dLowThreshold) && kUSBTransmitterData.bConnected )
 800c6ac:	4b11      	ldr	r3, [pc, #68]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6ae:	889b      	ldrh	r3, [r3, #4]
 800c6b0:	f640 429a 	movw	r2, #3226	; 0xc9a
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d809      	bhi.n	800c6cc <USB_CheckForUSBConnection+0x58>
 800c6b8:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6ba:	78db      	ldrb	r3, [r3, #3]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d005      	beq.n	800c6cc <USB_CheckForUSBConnection+0x58>
			{
				kUSBTransmitterData.bConnected = false;
 800c6c0:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	70da      	strb	r2, [r3, #3]
				CallForUSBDisonnection();
 800c6c6:	f7ff fd15 	bl	800c0f4 <CallForUSBDisonnection>
				CallForUSBConnection();
			}
		}
	}

}
 800c6ca:	e011      	b.n	800c6f0 <USB_CheckForUSBConnection+0x7c>
			else if ( (kUSBTransmitterData.u32MeasuredVbus > dHighThreshold) && !kUSBTransmitterData.bConnected )
 800c6cc:	4b09      	ldr	r3, [pc, #36]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6ce:	889b      	ldrh	r3, [r3, #4]
 800c6d0:	f640 5217 	movw	r2, #3351	; 0xd17
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d90b      	bls.n	800c6f0 <USB_CheckForUSBConnection+0x7c>
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6da:	78db      	ldrb	r3, [r3, #3]
 800c6dc:	f083 0301 	eor.w	r3, r3, #1
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d004      	beq.n	800c6f0 <USB_CheckForUSBConnection+0x7c>
				kUSBTransmitterData.bConnected = true;
 800c6e6:	4b03      	ldr	r3, [pc, #12]	; (800c6f4 <USB_CheckForUSBConnection+0x80>)
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	70da      	strb	r2, [r3, #3]
				CallForUSBConnection();
 800c6ec:	f7ff fcfb 	bl	800c0e6 <CallForUSBConnection>
}
 800c6f0:	bf00      	nop
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200007f4 	.word	0x200007f4

0800c6f8 <USB_SignalizeVBUSMeasurementReady>:

void USB_SignalizeVBUSMeasurementReady(uint32_t u32Result)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
	kUSBTransmitterData.bNewMeasurement = true;
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800c702:	2201      	movs	r2, #1
 800c704:	709a      	strb	r2, [r3, #2]
	kUSBTransmitterData.u32MeasuredVbus = u32Result;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	b29a      	uxth	r2, r3
 800c70a:	4b05      	ldr	r3, [pc, #20]	; (800c720 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800c70c:	809a      	strh	r2, [r3, #4]
	kUSBTransmitterData.bCheckStarted = false;
 800c70e:	4b04      	ldr	r3, [pc, #16]	; (800c720 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800c710:	2200      	movs	r2, #0
 800c712:	705a      	strb	r2, [r3, #1]
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	200007f4 	.word	0x200007f4

0800c724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c728:	f7f4 fd52 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c72c:	f000 f83c 	bl	800c7a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c730:	f000 fa68 	bl	800cc04 <MX_GPIO_Init>
  MX_DMA_Init();
 800c734:	f000 fa46 	bl	800cbc4 <MX_DMA_Init>
  MX_RTC_Init();
 800c738:	f000 f950 	bl	800c9dc <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800c73c:	f000 f974 	bl	800ca28 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800c740:	f000 f8f0 	bl	800c924 <MX_I2C1_Init>
  MX_I2C2_Init();
 800c744:	f000 f91c 	bl	800c980 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800c748:	f000 fa12 	bl	800cb70 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800c74c:	f000 fe08 	bl	800d360 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800c750:	f000 f99a 	bl	800ca88 <MX_TIM2_Init>
  MX_ADC1_Init();
 800c754:	f000 f894 	bl	800c880 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SensorArray_Init(&hi2c1, &hi2c2);
 800c758:	490e      	ldr	r1, [pc, #56]	; (800c794 <main+0x70>)
 800c75a:	480f      	ldr	r0, [pc, #60]	; (800c798 <main+0x74>)
 800c75c:	f7f4 fc6a 	bl	8001034 <SensorArray_Init>
  USB_InitalizeTransmitterLogic(&hadc1);
 800c760:	480e      	ldr	r0, [pc, #56]	; (800c79c <main+0x78>)
 800c762:	f7ff ff55 	bl	800c610 <USB_InitalizeTransmitterLogic>

  HAL_TIM_Base_Start_IT(&htim2);
 800c766:	480e      	ldr	r0, [pc, #56]	; (800c7a0 <main+0x7c>)
 800c768:	f7fa fc06 	bl	8006f78 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800c76c:	2201      	movs	r2, #1
 800c76e:	2101      	movs	r1, #1
 800c770:	480c      	ldr	r0, [pc, #48]	; (800c7a4 <main+0x80>)
 800c772:	f7f6 f831 	bl	80027d8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800c776:	2201      	movs	r2, #1
 800c778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c77c:	4809      	ldr	r0, [pc, #36]	; (800c7a4 <main+0x80>)
 800c77e:	f7f6 f82b 	bl	80027d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800c782:	2201      	movs	r2, #1
 800c784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c788:	4806      	ldr	r0, [pc, #24]	; (800c7a4 <main+0x80>)
 800c78a:	f7f6 f825 	bl	80027d8 <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800c78e:	f7ff f8ed 	bl	800b96c <ApplicationPerform>
 800c792:	e7fc      	b.n	800c78e <main+0x6a>
 800c794:	20000b5c 	.word	0x20000b5c
 800c798:	20000b08 	.word	0x20000b08
 800c79c:	20000bb0 	.word	0x20000bb0
 800c7a0:	20000ce0 	.word	0x20000ce0
 800c7a4:	40020800 	.word	0x40020800

0800c7a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b094      	sub	sp, #80	; 0x50
 800c7ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c7ae:	f107 0320 	add.w	r3, r7, #32
 800c7b2:	2230      	movs	r2, #48	; 0x30
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f001 fb30 	bl	800de1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c7bc:	f107 030c 	add.w	r3, r7, #12
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	605a      	str	r2, [r3, #4]
 800c7c6:	609a      	str	r2, [r3, #8]
 800c7c8:	60da      	str	r2, [r3, #12]
 800c7ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60bb      	str	r3, [r7, #8]
 800c7d0:	4b29      	ldr	r3, [pc, #164]	; (800c878 <SystemClock_Config+0xd0>)
 800c7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d4:	4a28      	ldr	r2, [pc, #160]	; (800c878 <SystemClock_Config+0xd0>)
 800c7d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7da:	6413      	str	r3, [r2, #64]	; 0x40
 800c7dc:	4b26      	ldr	r3, [pc, #152]	; (800c878 <SystemClock_Config+0xd0>)
 800c7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7e4:	60bb      	str	r3, [r7, #8]
 800c7e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	607b      	str	r3, [r7, #4]
 800c7ec:	4b23      	ldr	r3, [pc, #140]	; (800c87c <SystemClock_Config+0xd4>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a22      	ldr	r2, [pc, #136]	; (800c87c <SystemClock_Config+0xd4>)
 800c7f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	4b20      	ldr	r3, [pc, #128]	; (800c87c <SystemClock_Config+0xd4>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800c804:	2305      	movs	r3, #5
 800c806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c80c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c80e:	2301      	movs	r3, #1
 800c810:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c812:	2302      	movs	r3, #2
 800c814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800c81c:	230c      	movs	r3, #12
 800c81e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800c820:	2348      	movs	r3, #72	; 0x48
 800c822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c824:	2302      	movs	r3, #2
 800c826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800c828:	2303      	movs	r3, #3
 800c82a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c82c:	f107 0320 	add.w	r3, r7, #32
 800c830:	4618      	mov	r0, r3
 800c832:	f7f8 ff5f 	bl	80056f4 <HAL_RCC_OscConfig>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800c83c:	f000 fa6e 	bl	800cd1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c840:	230f      	movs	r3, #15
 800c842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c844:	2302      	movs	r3, #2
 800c846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c848:	2300      	movs	r3, #0
 800c84a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c84c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c852:	2300      	movs	r3, #0
 800c854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800c856:	f107 030c 	add.w	r3, r7, #12
 800c85a:	2102      	movs	r1, #2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f9 f9bf 	bl	8005be0 <HAL_RCC_ClockConfig>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800c868:	f000 fa58 	bl	800cd1c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800c86c:	f7f9 fa9e 	bl	8005dac <HAL_RCC_EnableCSS>
}
 800c870:	bf00      	nop
 800c872:	3750      	adds	r7, #80	; 0x50
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	40023800 	.word	0x40023800
 800c87c:	40007000 	.word	0x40007000

0800c880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c886:	463b      	mov	r3, r7
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	605a      	str	r2, [r3, #4]
 800c88e:	609a      	str	r2, [r3, #8]
 800c890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800c892:	4b21      	ldr	r3, [pc, #132]	; (800c918 <MX_ADC1_Init+0x98>)
 800c894:	4a21      	ldr	r2, [pc, #132]	; (800c91c <MX_ADC1_Init+0x9c>)
 800c896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800c898:	4b1f      	ldr	r3, [pc, #124]	; (800c918 <MX_ADC1_Init+0x98>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c89e:	4b1e      	ldr	r3, [pc, #120]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800c8a4:	4b1c      	ldr	r3, [pc, #112]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c8aa:	4b1b      	ldr	r3, [pc, #108]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c8b0:	4b19      	ldr	r3, [pc, #100]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c8b8:	4b17      	ldr	r3, [pc, #92]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c8be:	4b16      	ldr	r3, [pc, #88]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8c0:	4a17      	ldr	r2, [pc, #92]	; (800c920 <MX_ADC1_Init+0xa0>)
 800c8c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c8c4:	4b14      	ldr	r3, [pc, #80]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c8ca:	4b13      	ldr	r3, [pc, #76]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c8d0:	4b11      	ldr	r3, [pc, #68]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c8d8:	4b0f      	ldr	r3, [pc, #60]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8da:	2201      	movs	r2, #1
 800c8dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c8de:	480e      	ldr	r0, [pc, #56]	; (800c918 <MX_ADC1_Init+0x98>)
 800c8e0:	f7f4 fd0c 	bl	80012fc <HAL_ADC_Init>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800c8ea:	f000 fa17 	bl	800cd1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800c8ee:	2308      	movs	r3, #8
 800c8f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c8fa:	463b      	mov	r3, r7
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	4806      	ldr	r0, [pc, #24]	; (800c918 <MX_ADC1_Init+0x98>)
 800c900:	f7f4 ff6a 	bl	80017d8 <HAL_ADC_ConfigChannel>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800c90a:	f000 fa07 	bl	800cd1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c90e:	bf00      	nop
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20000bb0 	.word	0x20000bb0
 800c91c:	40012000 	.word	0x40012000
 800c920:	0f000001 	.word	0x0f000001

0800c924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c928:	4b13      	ldr	r3, [pc, #76]	; (800c978 <MX_I2C1_Init+0x54>)
 800c92a:	4a14      	ldr	r2, [pc, #80]	; (800c97c <MX_I2C1_Init+0x58>)
 800c92c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 800c92e:	4b12      	ldr	r3, [pc, #72]	; (800c978 <MX_I2C1_Init+0x54>)
 800c930:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800c934:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c936:	4b10      	ldr	r3, [pc, #64]	; (800c978 <MX_I2C1_Init+0x54>)
 800c938:	2200      	movs	r2, #0
 800c93a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800c93c:	4b0e      	ldr	r3, [pc, #56]	; (800c978 <MX_I2C1_Init+0x54>)
 800c93e:	2200      	movs	r2, #0
 800c940:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c942:	4b0d      	ldr	r3, [pc, #52]	; (800c978 <MX_I2C1_Init+0x54>)
 800c944:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c94a:	4b0b      	ldr	r3, [pc, #44]	; (800c978 <MX_I2C1_Init+0x54>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800c950:	4b09      	ldr	r3, [pc, #36]	; (800c978 <MX_I2C1_Init+0x54>)
 800c952:	2200      	movs	r2, #0
 800c954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c956:	4b08      	ldr	r3, [pc, #32]	; (800c978 <MX_I2C1_Init+0x54>)
 800c958:	2200      	movs	r2, #0
 800c95a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c95c:	4b06      	ldr	r3, [pc, #24]	; (800c978 <MX_I2C1_Init+0x54>)
 800c95e:	2200      	movs	r2, #0
 800c960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c962:	4805      	ldr	r0, [pc, #20]	; (800c978 <MX_I2C1_Init+0x54>)
 800c964:	f7f5 ff90 	bl	8002888 <HAL_I2C_Init>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800c96e:	f000 f9d5 	bl	800cd1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c972:	bf00      	nop
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20000b08 	.word	0x20000b08
 800c97c:	40005400 	.word	0x40005400

0800c980 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c984:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c986:	4a14      	ldr	r2, [pc, #80]	; (800c9d8 <MX_I2C2_Init+0x58>)
 800c988:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 25000;
 800c98a:	4b12      	ldr	r3, [pc, #72]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c98c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800c990:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c992:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c994:	2200      	movs	r2, #0
 800c996:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800c998:	4b0e      	ldr	r3, [pc, #56]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c99e:	4b0d      	ldr	r3, [pc, #52]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c9a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c9a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c9a6:	4b0b      	ldr	r3, [pc, #44]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800c9ac:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c9b2:	4b08      	ldr	r3, [pc, #32]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c9b8:	4b06      	ldr	r3, [pc, #24]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c9be:	4805      	ldr	r0, [pc, #20]	; (800c9d4 <MX_I2C2_Init+0x54>)
 800c9c0:	f7f5 ff62 	bl	8002888 <HAL_I2C_Init>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800c9ca:	f000 f9a7 	bl	800cd1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c9ce:	bf00      	nop
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20000b5c 	.word	0x20000b5c
 800c9d8:	40005800 	.word	0x40005800

0800c9dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c9e0:	4b0f      	ldr	r3, [pc, #60]	; (800ca20 <MX_RTC_Init+0x44>)
 800c9e2:	4a10      	ldr	r2, [pc, #64]	; (800ca24 <MX_RTC_Init+0x48>)
 800c9e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ca20 <MX_RTC_Init+0x44>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ca20 <MX_RTC_Init+0x44>)
 800c9ee:	227f      	movs	r2, #127	; 0x7f
 800c9f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <MX_RTC_Init+0x44>)
 800c9f4:	22ff      	movs	r2, #255	; 0xff
 800c9f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c9f8:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <MX_RTC_Init+0x44>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c9fe:	4b08      	ldr	r3, [pc, #32]	; (800ca20 <MX_RTC_Init+0x44>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ca04:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <MX_RTC_Init+0x44>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ca0a:	4805      	ldr	r0, [pc, #20]	; (800ca20 <MX_RTC_Init+0x44>)
 800ca0c:	f7f9 fbd0 	bl	80061b0 <HAL_RTC_Init>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800ca16:	f000 f981 	bl	800cd1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800ca1a:	bf00      	nop
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000c3c 	.word	0x20000c3c
 800ca24:	40002800 	.word	0x40002800

0800ca28 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800ca2c:	4b14      	ldr	r3, [pc, #80]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca2e:	4a15      	ldr	r2, [pc, #84]	; (800ca84 <MX_SDIO_SD_Init+0x5c>)
 800ca30:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800ca32:	4b13      	ldr	r3, [pc, #76]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800ca38:	4b11      	ldr	r3, [pc, #68]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ca3e:	4b10      	ldr	r3, [pc, #64]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800ca44:	4b0e      	ldr	r3, [pc, #56]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ca4a:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800ca50:	4b0b      	ldr	r3, [pc, #44]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800ca56:	480a      	ldr	r0, [pc, #40]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca58:	f7f9 fc8f 	bl	800637a <HAL_SD_Init>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d001      	beq.n	800ca66 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800ca62:	f000 f95b 	bl	800cd1c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ca66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca6a:	4805      	ldr	r0, [pc, #20]	; (800ca80 <MX_SDIO_SD_Init+0x58>)
 800ca6c:	f7f9 fed8 	bl	8006820 <HAL_SD_ConfigWideBusOperation>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800ca76:	f000 f951 	bl	800cd1c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800ca7a:	bf00      	nop
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	20000c5c 	.word	0x20000c5c
 800ca84:	40012c00 	.word	0x40012c00

0800ca88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08e      	sub	sp, #56	; 0x38
 800ca8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ca8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	605a      	str	r2, [r3, #4]
 800ca98:	609a      	str	r2, [r3, #8]
 800ca9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca9c:	f107 0320 	add.w	r3, r7, #32
 800caa0:	2200      	movs	r2, #0
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800caa6:	1d3b      	adds	r3, r7, #4
 800caa8:	2200      	movs	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	605a      	str	r2, [r3, #4]
 800caae:	609a      	str	r2, [r3, #8]
 800cab0:	60da      	str	r2, [r3, #12]
 800cab2:	611a      	str	r2, [r3, #16]
 800cab4:	615a      	str	r2, [r3, #20]
 800cab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800cab8:	4b2b      	ldr	r3, [pc, #172]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800caba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cabe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800cac0:	4b29      	ldr	r3, [pc, #164]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cac2:	2248      	movs	r2, #72	; 0x48
 800cac4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cac6:	4b28      	ldr	r3, [pc, #160]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cac8:	2200      	movs	r2, #0
 800caca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250000;
 800cacc:	4b26      	ldr	r3, [pc, #152]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cace:	4a27      	ldr	r2, [pc, #156]	; (800cb6c <MX_TIM2_Init+0xe4>)
 800cad0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cad2:	4b25      	ldr	r3, [pc, #148]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cad8:	4b23      	ldr	r3, [pc, #140]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cada:	2280      	movs	r2, #128	; 0x80
 800cadc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cade:	4822      	ldr	r0, [pc, #136]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cae0:	f7fa f9fb 	bl	8006eda <HAL_TIM_Base_Init>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d001      	beq.n	800caee <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800caea:	f000 f917 	bl	800cd1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800caee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800caf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800caf8:	4619      	mov	r1, r3
 800cafa:	481b      	ldr	r0, [pc, #108]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cafc:	f7fa fc5c 	bl	80073b8 <HAL_TIM_ConfigClockSource>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800cb06:	f000 f909 	bl	800cd1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800cb0a:	4817      	ldr	r0, [pc, #92]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cb0c:	f7fa fa96 	bl	800703c <HAL_TIM_OC_Init>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800cb16:	f000 f901 	bl	800cd1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cb22:	f107 0320 	add.w	r3, r7, #32
 800cb26:	4619      	mov	r1, r3
 800cb28:	480f      	ldr	r0, [pc, #60]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cb2a:	f7fa ffe5 	bl	8007af8 <HAL_TIMEx_MasterConfigSynchronization>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800cb34:	f000 f8f2 	bl	800cd1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cb48:	1d3b      	adds	r3, r7, #4
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4806      	ldr	r0, [pc, #24]	; (800cb68 <MX_TIM2_Init+0xe0>)
 800cb50:	f7fa fbd6 	bl	8007300 <HAL_TIM_OC_ConfigChannel>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800cb5a:	f000 f8df 	bl	800cd1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800cb5e:	bf00      	nop
 800cb60:	3738      	adds	r7, #56	; 0x38
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	20000ce0 	.word	0x20000ce0
 800cb6c:	0003d090 	.word	0x0003d090

0800cb70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cb74:	4b11      	ldr	r3, [pc, #68]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cb76:	4a12      	ldr	r2, [pc, #72]	; (800cbc0 <MX_USART1_UART_Init+0x50>)
 800cb78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800cb7a:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cb7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800cb80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cb82:	4b0e      	ldr	r3, [pc, #56]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cb88:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cb94:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cb96:	220c      	movs	r2, #12
 800cb98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb9a:	4b08      	ldr	r3, [pc, #32]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cba6:	4805      	ldr	r0, [pc, #20]	; (800cbbc <MX_USART1_UART_Init+0x4c>)
 800cba8:	f7fb f828 	bl	8007bfc <HAL_UART_Init>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d001      	beq.n	800cbb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800cbb2:	f000 f8b3 	bl	800cd1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cbb6:	bf00      	nop
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000bf8 	.word	0x20000bf8
 800cbc0:	40011000 	.word	0x40011000

0800cbc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800cbca:	2300      	movs	r3, #0
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	4b0c      	ldr	r3, [pc, #48]	; (800cc00 <MX_DMA_Init+0x3c>)
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd2:	4a0b      	ldr	r2, [pc, #44]	; (800cc00 <MX_DMA_Init+0x3c>)
 800cbd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cbd8:	6313      	str	r3, [r2, #48]	; 0x30
 800cbda:	4b09      	ldr	r3, [pc, #36]	; (800cc00 <MX_DMA_Init+0x3c>)
 800cbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbe2:	607b      	str	r3, [r7, #4]
 800cbe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	2100      	movs	r1, #0
 800cbea:	200c      	movs	r0, #12
 800cbec:	f7f5 f907 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800cbf0:	200c      	movs	r0, #12
 800cbf2:	f7f5 f920 	bl	8001e36 <HAL_NVIC_EnableIRQ>

}
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	40023800 	.word	0x40023800

0800cc04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08a      	sub	sp, #40	; 0x28
 800cc08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc0a:	f107 0314 	add.w	r3, r7, #20
 800cc0e:	2200      	movs	r2, #0
 800cc10:	601a      	str	r2, [r3, #0]
 800cc12:	605a      	str	r2, [r3, #4]
 800cc14:	609a      	str	r2, [r3, #8]
 800cc16:	60da      	str	r2, [r3, #12]
 800cc18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	613b      	str	r3, [r7, #16]
 800cc1e:	4b3c      	ldr	r3, [pc, #240]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc22:	4a3b      	ldr	r2, [pc, #236]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc24:	f043 0304 	orr.w	r3, r3, #4
 800cc28:	6313      	str	r3, [r2, #48]	; 0x30
 800cc2a:	4b39      	ldr	r3, [pc, #228]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2e:	f003 0304 	and.w	r3, r3, #4
 800cc32:	613b      	str	r3, [r7, #16]
 800cc34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cc36:	2300      	movs	r3, #0
 800cc38:	60fb      	str	r3, [r7, #12]
 800cc3a:	4b35      	ldr	r3, [pc, #212]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3e:	4a34      	ldr	r2, [pc, #208]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc44:	6313      	str	r3, [r2, #48]	; 0x30
 800cc46:	4b32      	ldr	r3, [pc, #200]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc52:	2300      	movs	r3, #0
 800cc54:	60bb      	str	r3, [r7, #8]
 800cc56:	4b2e      	ldr	r3, [pc, #184]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5a:	4a2d      	ldr	r2, [pc, #180]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc5c:	f043 0301 	orr.w	r3, r3, #1
 800cc60:	6313      	str	r3, [r2, #48]	; 0x30
 800cc62:	4b2b      	ldr	r3, [pc, #172]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc66:	f003 0301 	and.w	r3, r3, #1
 800cc6a:	60bb      	str	r3, [r7, #8]
 800cc6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc6e:	2300      	movs	r3, #0
 800cc70:	607b      	str	r3, [r7, #4]
 800cc72:	4b27      	ldr	r3, [pc, #156]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc76:	4a26      	ldr	r2, [pc, #152]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc78:	f043 0302 	orr.w	r3, r3, #2
 800cc7c:	6313      	str	r3, [r2, #48]	; 0x30
 800cc7e:	4b24      	ldr	r3, [pc, #144]	; (800cd10 <MX_GPIO_Init+0x10c>)
 800cc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	607b      	str	r3, [r7, #4]
 800cc88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f243 010f 	movw	r1, #12303	; 0x300f
 800cc90:	4820      	ldr	r0, [pc, #128]	; (800cd14 <MX_GPIO_Init+0x110>)
 800cc92:	f7f5 fda1 	bl	80027d8 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800cc96:	2200      	movs	r2, #0
 800cc98:	2107      	movs	r1, #7
 800cc9a:	481f      	ldr	r0, [pc, #124]	; (800cd18 <MX_GPIO_Init+0x114>)
 800cc9c:	f7f5 fd9c 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800cca0:	f243 030f 	movw	r3, #12303	; 0x300f
 800cca4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cca6:	2301      	movs	r3, #1
 800cca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ccb2:	f107 0314 	add.w	r3, r7, #20
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4816      	ldr	r0, [pc, #88]	; (800cd14 <MX_GPIO_Init+0x110>)
 800ccba:	f7f5 fbf1 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800ccbe:	2307      	movs	r3, #7
 800ccc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccca:	2300      	movs	r3, #0
 800cccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccce:	f107 0314 	add.w	r3, r7, #20
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4810      	ldr	r0, [pc, #64]	; (800cd18 <MX_GPIO_Init+0x114>)
 800ccd6:	f7f5 fbe3 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800ccda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800cce0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800cce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cce6:	2300      	movs	r3, #0
 800cce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800ccea:	f107 0314 	add.w	r3, r7, #20
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4809      	ldr	r0, [pc, #36]	; (800cd18 <MX_GPIO_Init+0x114>)
 800ccf2:	f7f5 fbd5 	bl	80024a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	2017      	movs	r0, #23
 800ccfc:	f7f5 f87f 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800cd00:	2017      	movs	r0, #23
 800cd02:	f7f5 f898 	bl	8001e36 <HAL_NVIC_EnableIRQ>

}
 800cd06:	bf00      	nop
 800cd08:	3728      	adds	r7, #40	; 0x28
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	40023800 	.word	0x40023800
 800cd14:	40020800 	.word	0x40020800
 800cd18:	40020000 	.word	0x40020000

0800cd1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800cd20:	b672      	cpsid	i
}
 800cd22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800cd24:	e7fe      	b.n	800cd24 <Error_Handler+0x8>
	...

0800cd28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd2e:	2300      	movs	r3, #0
 800cd30:	607b      	str	r3, [r7, #4]
 800cd32:	4b10      	ldr	r3, [pc, #64]	; (800cd74 <HAL_MspInit+0x4c>)
 800cd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd36:	4a0f      	ldr	r2, [pc, #60]	; (800cd74 <HAL_MspInit+0x4c>)
 800cd38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cd3c:	6453      	str	r3, [r2, #68]	; 0x44
 800cd3e:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <HAL_MspInit+0x4c>)
 800cd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd46:	607b      	str	r3, [r7, #4]
 800cd48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	603b      	str	r3, [r7, #0]
 800cd4e:	4b09      	ldr	r3, [pc, #36]	; (800cd74 <HAL_MspInit+0x4c>)
 800cd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd52:	4a08      	ldr	r2, [pc, #32]	; (800cd74 <HAL_MspInit+0x4c>)
 800cd54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd58:	6413      	str	r3, [r2, #64]	; 0x40
 800cd5a:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <HAL_MspInit+0x4c>)
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd62:	603b      	str	r3, [r7, #0]
 800cd64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cd66:	bf00      	nop
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	40023800 	.word	0x40023800

0800cd78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08a      	sub	sp, #40	; 0x28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd80:	f107 0314 	add.w	r3, r7, #20
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	605a      	str	r2, [r3, #4]
 800cd8a:	609a      	str	r2, [r3, #8]
 800cd8c:	60da      	str	r2, [r3, #12]
 800cd8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a1b      	ldr	r2, [pc, #108]	; (800ce04 <HAL_ADC_MspInit+0x8c>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d12f      	bne.n	800cdfa <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	613b      	str	r3, [r7, #16]
 800cd9e:	4b1a      	ldr	r3, [pc, #104]	; (800ce08 <HAL_ADC_MspInit+0x90>)
 800cda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda2:	4a19      	ldr	r2, [pc, #100]	; (800ce08 <HAL_ADC_MspInit+0x90>)
 800cda4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cda8:	6453      	str	r3, [r2, #68]	; 0x44
 800cdaa:	4b17      	ldr	r3, [pc, #92]	; (800ce08 <HAL_ADC_MspInit+0x90>)
 800cdac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb2:	613b      	str	r3, [r7, #16]
 800cdb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	4b13      	ldr	r3, [pc, #76]	; (800ce08 <HAL_ADC_MspInit+0x90>)
 800cdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbe:	4a12      	ldr	r2, [pc, #72]	; (800ce08 <HAL_ADC_MspInit+0x90>)
 800cdc0:	f043 0302 	orr.w	r3, r3, #2
 800cdc4:	6313      	str	r3, [r2, #48]	; 0x30
 800cdc6:	4b10      	ldr	r3, [pc, #64]	; (800ce08 <HAL_ADC_MspInit+0x90>)
 800cdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdca:	f003 0302 	and.w	r3, r3, #2
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cdde:	f107 0314 	add.w	r3, r7, #20
 800cde2:	4619      	mov	r1, r3
 800cde4:	4809      	ldr	r0, [pc, #36]	; (800ce0c <HAL_ADC_MspInit+0x94>)
 800cde6:	f7f5 fb5b 	bl	80024a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800cdea:	2200      	movs	r2, #0
 800cdec:	2100      	movs	r1, #0
 800cdee:	2012      	movs	r0, #18
 800cdf0:	f7f5 f805 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800cdf4:	2012      	movs	r0, #18
 800cdf6:	f7f5 f81e 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800cdfa:	bf00      	nop
 800cdfc:	3728      	adds	r7, #40	; 0x28
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	40012000 	.word	0x40012000
 800ce08:	40023800 	.word	0x40023800
 800ce0c:	40020400 	.word	0x40020400

0800ce10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08c      	sub	sp, #48	; 0x30
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce18:	f107 031c 	add.w	r3, r7, #28
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	605a      	str	r2, [r3, #4]
 800ce22:	609a      	str	r2, [r3, #8]
 800ce24:	60da      	str	r2, [r3, #12]
 800ce26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a59      	ldr	r2, [pc, #356]	; (800cf94 <HAL_I2C_MspInit+0x184>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d162      	bne.n	800cef8 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce32:	2300      	movs	r3, #0
 800ce34:	61bb      	str	r3, [r7, #24]
 800ce36:	4b58      	ldr	r3, [pc, #352]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800ce38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce3a:	4a57      	ldr	r2, [pc, #348]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800ce3c:	f043 0302 	orr.w	r3, r3, #2
 800ce40:	6313      	str	r3, [r2, #48]	; 0x30
 800ce42:	4b55      	ldr	r3, [pc, #340]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800ce44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce46:	f003 0302 	and.w	r3, r3, #2
 800ce4a:	61bb      	str	r3, [r7, #24]
 800ce4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce4e:	23c0      	movs	r3, #192	; 0xc0
 800ce50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ce52:	2312      	movs	r3, #18
 800ce54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce56:	2301      	movs	r3, #1
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ce5e:	2304      	movs	r3, #4
 800ce60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce62:	f107 031c 	add.w	r3, r7, #28
 800ce66:	4619      	mov	r1, r3
 800ce68:	484c      	ldr	r0, [pc, #304]	; (800cf9c <HAL_I2C_MspInit+0x18c>)
 800ce6a:	f7f5 fb19 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ce6e:	2300      	movs	r3, #0
 800ce70:	617b      	str	r3, [r7, #20]
 800ce72:	4b49      	ldr	r3, [pc, #292]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	4a48      	ldr	r2, [pc, #288]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800ce78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce7c:	6413      	str	r3, [r2, #64]	; 0x40
 800ce7e:	4b46      	ldr	r3, [pc, #280]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800ce80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800ce8a:	4b45      	ldr	r3, [pc, #276]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800ce8c:	4a45      	ldr	r2, [pc, #276]	; (800cfa4 <HAL_I2C_MspInit+0x194>)
 800ce8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800ce90:	4b43      	ldr	r3, [pc, #268]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ce96:	4b42      	ldr	r3, [pc, #264]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800ce98:	2240      	movs	r2, #64	; 0x40
 800ce9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ce9c:	4b40      	ldr	r3, [pc, #256]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cea2:	4b3f      	ldr	r3, [pc, #252]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800cea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cea8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ceaa:	4b3d      	ldr	r3, [pc, #244]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800ceac:	2200      	movs	r2, #0
 800ceae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ceb0:	4b3b      	ldr	r3, [pc, #236]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800ceb6:	4b3a      	ldr	r3, [pc, #232]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800cebc:	4b38      	ldr	r3, [pc, #224]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800cebe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cec2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cec4:	4b36      	ldr	r3, [pc, #216]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800cec6:	2200      	movs	r2, #0
 800cec8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800ceca:	4835      	ldr	r0, [pc, #212]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800cecc:	f7f4 ffce 	bl	8001e6c <HAL_DMA_Init>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800ced6:	f7ff ff21 	bl	800cd1c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a30      	ldr	r2, [pc, #192]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800cede:	635a      	str	r2, [r3, #52]	; 0x34
 800cee0:	4a2f      	ldr	r2, [pc, #188]	; (800cfa0 <HAL_I2C_MspInit+0x190>)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800cee6:	2200      	movs	r2, #0
 800cee8:	2100      	movs	r1, #0
 800ceea:	201f      	movs	r0, #31
 800ceec:	f7f4 ff87 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800cef0:	201f      	movs	r0, #31
 800cef2:	f7f4 ffa0 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800cef6:	e049      	b.n	800cf8c <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a2a      	ldr	r2, [pc, #168]	; (800cfa8 <HAL_I2C_MspInit+0x198>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d144      	bne.n	800cf8c <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf02:	2300      	movs	r3, #0
 800cf04:	613b      	str	r3, [r7, #16]
 800cf06:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800cf08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0a:	4a23      	ldr	r2, [pc, #140]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800cf0c:	f043 0302 	orr.w	r3, r3, #2
 800cf10:	6313      	str	r3, [r2, #48]	; 0x30
 800cf12:	4b21      	ldr	r3, [pc, #132]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800cf14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf16:	f003 0302 	and.w	r3, r3, #2
 800cf1a:	613b      	str	r3, [r7, #16]
 800cf1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800cf1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cf24:	2312      	movs	r3, #18
 800cf26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cf30:	2304      	movs	r3, #4
 800cf32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf34:	f107 031c 	add.w	r3, r7, #28
 800cf38:	4619      	mov	r1, r3
 800cf3a:	4818      	ldr	r0, [pc, #96]	; (800cf9c <HAL_I2C_MspInit+0x18c>)
 800cf3c:	f7f5 fab0 	bl	80024a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cf40:	2308      	movs	r3, #8
 800cf42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cf44:	2312      	movs	r3, #18
 800cf46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800cf50:	2309      	movs	r3, #9
 800cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf54:	f107 031c 	add.w	r3, r7, #28
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4810      	ldr	r0, [pc, #64]	; (800cf9c <HAL_I2C_MspInit+0x18c>)
 800cf5c:	f7f5 faa0 	bl	80024a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cf60:	2300      	movs	r3, #0
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800cf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf68:	4a0b      	ldr	r2, [pc, #44]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800cf6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf6e:	6413      	str	r3, [r2, #64]	; 0x40
 800cf70:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <HAL_I2C_MspInit+0x188>)
 800cf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2100      	movs	r1, #0
 800cf80:	2021      	movs	r0, #33	; 0x21
 800cf82:	f7f4 ff3c 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800cf86:	2021      	movs	r0, #33	; 0x21
 800cf88:	f7f4 ff55 	bl	8001e36 <HAL_NVIC_EnableIRQ>
}
 800cf8c:	bf00      	nop
 800cf8e:	3730      	adds	r7, #48	; 0x30
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	40005400 	.word	0x40005400
 800cf98:	40023800 	.word	0x40023800
 800cf9c:	40020400 	.word	0x40020400
 800cfa0:	20000aa8 	.word	0x20000aa8
 800cfa4:	40026028 	.word	0x40026028
 800cfa8:	40005800 	.word	0x40005800

0800cfac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cfb4:	f107 0308 	add.w	r3, r7, #8
 800cfb8:	2200      	movs	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	605a      	str	r2, [r3, #4]
 800cfbe:	609a      	str	r2, [r3, #8]
 800cfc0:	60da      	str	r2, [r3, #12]
 800cfc2:	611a      	str	r2, [r3, #16]
 800cfc4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a0c      	ldr	r2, [pc, #48]	; (800cffc <HAL_RTC_MspInit+0x50>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d111      	bne.n	800cff4 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800cfd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfd8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7f8 fff6 	bl	8005fd0 <HAL_RCCEx_PeriphCLKConfig>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800cfea:	f7ff fe97 	bl	800cd1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800cfee:	4b04      	ldr	r3, [pc, #16]	; (800d000 <HAL_RTC_MspInit+0x54>)
 800cff0:	2201      	movs	r2, #1
 800cff2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800cff4:	bf00      	nop
 800cff6:	3720      	adds	r7, #32
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	40002800 	.word	0x40002800
 800d000:	42470e3c 	.word	0x42470e3c

0800d004 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b08c      	sub	sp, #48	; 0x30
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d00c:	f107 031c 	add.w	r3, r7, #28
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	605a      	str	r2, [r3, #4]
 800d016:	609a      	str	r2, [r3, #8]
 800d018:	60da      	str	r2, [r3, #12]
 800d01a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a38      	ldr	r2, [pc, #224]	; (800d104 <HAL_SD_MspInit+0x100>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d169      	bne.n	800d0fa <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800d026:	2300      	movs	r3, #0
 800d028:	61bb      	str	r3, [r7, #24]
 800d02a:	4b37      	ldr	r3, [pc, #220]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d02e:	4a36      	ldr	r2, [pc, #216]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d030:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d034:	6453      	str	r3, [r2, #68]	; 0x44
 800d036:	4b34      	ldr	r3, [pc, #208]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d03a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d03e:	61bb      	str	r3, [r7, #24]
 800d040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d042:	2300      	movs	r3, #0
 800d044:	617b      	str	r3, [r7, #20]
 800d046:	4b30      	ldr	r3, [pc, #192]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04a:	4a2f      	ldr	r2, [pc, #188]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d04c:	f043 0301 	orr.w	r3, r3, #1
 800d050:	6313      	str	r3, [r2, #48]	; 0x30
 800d052:	4b2d      	ldr	r3, [pc, #180]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	617b      	str	r3, [r7, #20]
 800d05c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d05e:	2300      	movs	r3, #0
 800d060:	613b      	str	r3, [r7, #16]
 800d062:	4b29      	ldr	r3, [pc, #164]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d066:	4a28      	ldr	r2, [pc, #160]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d068:	f043 0302 	orr.w	r3, r3, #2
 800d06c:	6313      	str	r3, [r2, #48]	; 0x30
 800d06e:	4b26      	ldr	r3, [pc, #152]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d072:	f003 0302 	and.w	r3, r3, #2
 800d076:	613b      	str	r3, [r7, #16]
 800d078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d07a:	2300      	movs	r3, #0
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	4b22      	ldr	r3, [pc, #136]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d082:	4a21      	ldr	r2, [pc, #132]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d084:	f043 0304 	orr.w	r3, r3, #4
 800d088:	6313      	str	r3, [r2, #48]	; 0x30
 800d08a:	4b1f      	ldr	r3, [pc, #124]	; (800d108 <HAL_SD_MspInit+0x104>)
 800d08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d08e:	f003 0304 	and.w	r3, r3, #4
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d096:	2340      	movs	r3, #64	; 0x40
 800d098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d09a:	2302      	movs	r3, #2
 800d09c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0aa:	f107 031c 	add.w	r3, r7, #28
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4816      	ldr	r0, [pc, #88]	; (800d10c <HAL_SD_MspInit+0x108>)
 800d0b2:	f7f5 f9f5 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d0b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0bc:	2302      	movs	r3, #2
 800d0be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d0c8:	230c      	movs	r3, #12
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d0cc:	f107 031c 	add.w	r3, r7, #28
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	480f      	ldr	r0, [pc, #60]	; (800d110 <HAL_SD_MspInit+0x10c>)
 800d0d4:	f7f5 f9e4 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800d0d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d0dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0de:	2302      	movs	r3, #2
 800d0e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d0ea:	230c      	movs	r3, #12
 800d0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d0ee:	f107 031c 	add.w	r3, r7, #28
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4807      	ldr	r0, [pc, #28]	; (800d114 <HAL_SD_MspInit+0x110>)
 800d0f6:	f7f5 f9d3 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800d0fa:	bf00      	nop
 800d0fc:	3730      	adds	r7, #48	; 0x30
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	40012c00 	.word	0x40012c00
 800d108:	40023800 	.word	0x40023800
 800d10c:	40020000 	.word	0x40020000
 800d110:	40020400 	.word	0x40020400
 800d114:	40020800 	.word	0x40020800

0800d118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d128:	d115      	bne.n	800d156 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d12a:	2300      	movs	r3, #0
 800d12c:	60fb      	str	r3, [r7, #12]
 800d12e:	4b0c      	ldr	r3, [pc, #48]	; (800d160 <HAL_TIM_Base_MspInit+0x48>)
 800d130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d132:	4a0b      	ldr	r2, [pc, #44]	; (800d160 <HAL_TIM_Base_MspInit+0x48>)
 800d134:	f043 0301 	orr.w	r3, r3, #1
 800d138:	6413      	str	r3, [r2, #64]	; 0x40
 800d13a:	4b09      	ldr	r3, [pc, #36]	; (800d160 <HAL_TIM_Base_MspInit+0x48>)
 800d13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	60fb      	str	r3, [r7, #12]
 800d144:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800d146:	2200      	movs	r2, #0
 800d148:	2100      	movs	r1, #0
 800d14a:	201c      	movs	r0, #28
 800d14c:	f7f4 fe57 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d150:	201c      	movs	r0, #28
 800d152:	f7f4 fe70 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800d156:	bf00      	nop
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	40023800 	.word	0x40023800

0800d164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08a      	sub	sp, #40	; 0x28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d16c:	f107 0314 	add.w	r3, r7, #20
 800d170:	2200      	movs	r2, #0
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	605a      	str	r2, [r3, #4]
 800d176:	609a      	str	r2, [r3, #8]
 800d178:	60da      	str	r2, [r3, #12]
 800d17a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a19      	ldr	r2, [pc, #100]	; (800d1e8 <HAL_UART_MspInit+0x84>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d12c      	bne.n	800d1e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d186:	2300      	movs	r3, #0
 800d188:	613b      	str	r3, [r7, #16]
 800d18a:	4b18      	ldr	r3, [pc, #96]	; (800d1ec <HAL_UART_MspInit+0x88>)
 800d18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18e:	4a17      	ldr	r2, [pc, #92]	; (800d1ec <HAL_UART_MspInit+0x88>)
 800d190:	f043 0310 	orr.w	r3, r3, #16
 800d194:	6453      	str	r3, [r2, #68]	; 0x44
 800d196:	4b15      	ldr	r3, [pc, #84]	; (800d1ec <HAL_UART_MspInit+0x88>)
 800d198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d19a:	f003 0310 	and.w	r3, r3, #16
 800d19e:	613b      	str	r3, [r7, #16]
 800d1a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60fb      	str	r3, [r7, #12]
 800d1a6:	4b11      	ldr	r3, [pc, #68]	; (800d1ec <HAL_UART_MspInit+0x88>)
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1aa:	4a10      	ldr	r2, [pc, #64]	; (800d1ec <HAL_UART_MspInit+0x88>)
 800d1ac:	f043 0301 	orr.w	r3, r3, #1
 800d1b0:	6313      	str	r3, [r2, #48]	; 0x30
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	; (800d1ec <HAL_UART_MspInit+0x88>)
 800d1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	60fb      	str	r3, [r7, #12]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800d1be:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800d1c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d1d0:	2307      	movs	r3, #7
 800d1d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1d4:	f107 0314 	add.w	r3, r7, #20
 800d1d8:	4619      	mov	r1, r3
 800d1da:	4805      	ldr	r0, [pc, #20]	; (800d1f0 <HAL_UART_MspInit+0x8c>)
 800d1dc:	f7f5 f960 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d1e0:	bf00      	nop
 800d1e2:	3728      	adds	r7, #40	; 0x28
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	40011000 	.word	0x40011000
 800d1ec:	40023800 	.word	0x40023800
 800d1f0:	40020000 	.word	0x40020000

0800d1f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800d1f8:	f7f8 fece 	bl	8005f98 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d1fc:	e7fe      	b.n	800d1fc <NMI_Handler+0x8>

0800d1fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d1fe:	b480      	push	{r7}
 800d200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d202:	e7fe      	b.n	800d202 <HardFault_Handler+0x4>

0800d204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d204:	b480      	push	{r7}
 800d206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d208:	e7fe      	b.n	800d208 <MemManage_Handler+0x4>

0800d20a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d20a:	b480      	push	{r7}
 800d20c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d20e:	e7fe      	b.n	800d20e <BusFault_Handler+0x4>

0800d210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d210:	b480      	push	{r7}
 800d212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d214:	e7fe      	b.n	800d214 <UsageFault_Handler+0x4>

0800d216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d216:	b480      	push	{r7}
 800d218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d21a:	bf00      	nop
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d224:	b480      	push	{r7}
 800d226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d228:	bf00      	nop
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d232:	b480      	push	{r7}
 800d234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d236:	bf00      	nop
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800d244:	f7fe fbca 	bl	800b9dc <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d248:	f7f4 f814 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d24c:	bf00      	nop
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d254:	4802      	ldr	r0, [pc, #8]	; (800d260 <DMA1_Stream1_IRQHandler+0x10>)
 800d256:	f7f4 fed9 	bl	800200c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800d25a:	bf00      	nop
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	20000aa8 	.word	0x20000aa8

0800d264 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	uint32_t u32Result;

	u32Result = HAL_ADC_GetValue(&hadc1);
 800d26a:	4807      	ldr	r0, [pc, #28]	; (800d288 <ADC_IRQHandler+0x24>)
 800d26c:	f7f4 fa89 	bl	8001782 <HAL_ADC_GetValue>
 800d270:	6078      	str	r0, [r7, #4]

	USB_SignalizeVBUSMeasurementReady(u32Result);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fa40 	bl	800c6f8 <USB_SignalizeVBUSMeasurementReady>

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800d278:	4803      	ldr	r0, [pc, #12]	; (800d288 <ADC_IRQHandler+0x24>)
 800d27a:	f7f4 f941 	bl	8001500 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800d27e:	bf00      	nop
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	20000bb0 	.word	0x20000bb0

0800d28c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 800d290:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d294:	4804      	ldr	r0, [pc, #16]	; (800d2a8 <EXTI9_5_IRQHandler+0x1c>)
 800d296:	f7f5 fa87 	bl	80027a8 <HAL_GPIO_ReadPin>
	else
	{
//		CommManager_SetUSBConnectionState(USB_Disconnected);
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d29a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d29e:	f7f5 facf 	bl	8002840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d2a2:	bf00      	nop
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	40020000 	.word	0x40020000

0800d2ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d2b0:	4803      	ldr	r0, [pc, #12]	; (800d2c0 <TIM2_IRQHandler+0x14>)
 800d2b2:	f7f9 ff1c 	bl	80070ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800d2b6:	f7ff f82d 	bl	800c314 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800d2ba:	bf00      	nop
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	20000ce0 	.word	0x20000ce0

0800d2c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

//	TempCollect_I2CA_Done();

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800d2c8:	4802      	ldr	r0, [pc, #8]	; (800d2d4 <I2C1_EV_IRQHandler+0x10>)
 800d2ca:	f7f5 fcdf 	bl	8002c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800d2ce:	bf00      	nop
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20000b08 	.word	0x20000b08

0800d2d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
//	TempCollect_I2CB_Done();

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800d2dc:	4802      	ldr	r0, [pc, #8]	; (800d2e8 <I2C2_EV_IRQHandler+0x10>)
 800d2de:	f7f5 fcd5 	bl	8002c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800d2e2:	bf00      	nop
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	20000b5c 	.word	0x20000b5c

0800d2ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800d2f0:	4802      	ldr	r0, [pc, #8]	; (800d2fc <OTG_FS_IRQHandler+0x10>)
 800d2f2:	f7f7 f9cc 	bl	800468e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800d2f6:	bf00      	nop
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20001ff8 	.word	0x20001ff8

0800d300 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a0a      	ldr	r2, [pc, #40]	; (800d334 <HAL_I2C_MemRxCpltCallback+0x34>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d102      	bne.n	800d316 <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
 800d310:	f7ff f814 	bl	800c33c <TempCollect_I2CA_Done>
	}
	else
	{
		AssertError(AppError_UndefinedError);
	}
}
 800d314:	e009      	b.n	800d32a <HAL_I2C_MemRxCpltCallback+0x2a>
	else if ( hi2c == &hi2c2)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a07      	ldr	r2, [pc, #28]	; (800d338 <HAL_I2C_MemRxCpltCallback+0x38>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d102      	bne.n	800d324 <HAL_I2C_MemRxCpltCallback+0x24>
		TempCollect_I2CB_Done();
 800d31e:	f7ff f819 	bl	800c354 <TempCollect_I2CB_Done>
}
 800d322:	e002      	b.n	800d32a <HAL_I2C_MemRxCpltCallback+0x2a>
		AssertError(AppError_UndefinedError);
 800d324:	2008      	movs	r0, #8
 800d326:	f7fe fc63 	bl	800bbf0 <AssertError>
}
 800d32a:	bf00      	nop
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	20000b08 	.word	0x20000b08
 800d338:	20000b5c 	.word	0x20000b5c

0800d33c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d33c:	b480      	push	{r7}
 800d33e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d340:	4b06      	ldr	r3, [pc, #24]	; (800d35c <SystemInit+0x20>)
 800d342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d346:	4a05      	ldr	r2, [pc, #20]	; (800d35c <SystemInit+0x20>)
 800d348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d34c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d350:	bf00      	nop
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	e000ed00 	.word	0xe000ed00

0800d360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d364:	2200      	movs	r2, #0
 800d366:	4912      	ldr	r1, [pc, #72]	; (800d3b0 <MX_USB_DEVICE_Init+0x50>)
 800d368:	4812      	ldr	r0, [pc, #72]	; (800d3b4 <MX_USB_DEVICE_Init+0x54>)
 800d36a:	f7fd f995 	bl	800a698 <USBD_Init>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d374:	f7ff fcd2 	bl	800cd1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d378:	490f      	ldr	r1, [pc, #60]	; (800d3b8 <MX_USB_DEVICE_Init+0x58>)
 800d37a:	480e      	ldr	r0, [pc, #56]	; (800d3b4 <MX_USB_DEVICE_Init+0x54>)
 800d37c:	f7fd f9bc 	bl	800a6f8 <USBD_RegisterClass>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d386:	f7ff fcc9 	bl	800cd1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d38a:	490c      	ldr	r1, [pc, #48]	; (800d3bc <MX_USB_DEVICE_Init+0x5c>)
 800d38c:	4809      	ldr	r0, [pc, #36]	; (800d3b4 <MX_USB_DEVICE_Init+0x54>)
 800d38e:	f7fd f8dd 	bl	800a54c <USBD_CDC_RegisterInterface>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d398:	f7ff fcc0 	bl	800cd1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d39c:	4805      	ldr	r0, [pc, #20]	; (800d3b4 <MX_USB_DEVICE_Init+0x54>)
 800d39e:	f7fd f9d2 	bl	800a746 <USBD_Start>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d001      	beq.n	800d3ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d3a8:	f7ff fcb8 	bl	800cd1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d3ac:	bf00      	nop
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20000130 	.word	0x20000130
 800d3b4:	20000d28 	.word	0x20000d28
 800d3b8:	20000014 	.word	0x20000014
 800d3bc:	2000011c 	.word	0x2000011c

0800d3c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4905      	ldr	r1, [pc, #20]	; (800d3dc <CDC_Init_FS+0x1c>)
 800d3c8:	4805      	ldr	r0, [pc, #20]	; (800d3e0 <CDC_Init_FS+0x20>)
 800d3ca:	f7fd f8d4 	bl	800a576 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d3ce:	4905      	ldr	r1, [pc, #20]	; (800d3e4 <CDC_Init_FS+0x24>)
 800d3d0:	4803      	ldr	r0, [pc, #12]	; (800d3e0 <CDC_Init_FS+0x20>)
 800d3d2:	f7fd f8ee 	bl	800a5b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d3d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	200017f8 	.word	0x200017f8
 800d3e0:	20000d28 	.word	0x20000d28
 800d3e4:	20000ff8 	.word	0x20000ff8

0800d3e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	6039      	str	r1, [r7, #0]
 800d402:	71fb      	strb	r3, [r7, #7]
 800d404:	4613      	mov	r3, r2
 800d406:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d408:	79fb      	ldrb	r3, [r7, #7]
 800d40a:	2b23      	cmp	r3, #35	; 0x23
 800d40c:	d84a      	bhi.n	800d4a4 <CDC_Control_FS+0xac>
 800d40e:	a201      	add	r2, pc, #4	; (adr r2, 800d414 <CDC_Control_FS+0x1c>)
 800d410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d414:	0800d4a5 	.word	0x0800d4a5
 800d418:	0800d4a5 	.word	0x0800d4a5
 800d41c:	0800d4a5 	.word	0x0800d4a5
 800d420:	0800d4a5 	.word	0x0800d4a5
 800d424:	0800d4a5 	.word	0x0800d4a5
 800d428:	0800d4a5 	.word	0x0800d4a5
 800d42c:	0800d4a5 	.word	0x0800d4a5
 800d430:	0800d4a5 	.word	0x0800d4a5
 800d434:	0800d4a5 	.word	0x0800d4a5
 800d438:	0800d4a5 	.word	0x0800d4a5
 800d43c:	0800d4a5 	.word	0x0800d4a5
 800d440:	0800d4a5 	.word	0x0800d4a5
 800d444:	0800d4a5 	.word	0x0800d4a5
 800d448:	0800d4a5 	.word	0x0800d4a5
 800d44c:	0800d4a5 	.word	0x0800d4a5
 800d450:	0800d4a5 	.word	0x0800d4a5
 800d454:	0800d4a5 	.word	0x0800d4a5
 800d458:	0800d4a5 	.word	0x0800d4a5
 800d45c:	0800d4a5 	.word	0x0800d4a5
 800d460:	0800d4a5 	.word	0x0800d4a5
 800d464:	0800d4a5 	.word	0x0800d4a5
 800d468:	0800d4a5 	.word	0x0800d4a5
 800d46c:	0800d4a5 	.word	0x0800d4a5
 800d470:	0800d4a5 	.word	0x0800d4a5
 800d474:	0800d4a5 	.word	0x0800d4a5
 800d478:	0800d4a5 	.word	0x0800d4a5
 800d47c:	0800d4a5 	.word	0x0800d4a5
 800d480:	0800d4a5 	.word	0x0800d4a5
 800d484:	0800d4a5 	.word	0x0800d4a5
 800d488:	0800d4a5 	.word	0x0800d4a5
 800d48c:	0800d4a5 	.word	0x0800d4a5
 800d490:	0800d4a5 	.word	0x0800d4a5
 800d494:	0800d4a5 	.word	0x0800d4a5
 800d498:	0800d4a5 	.word	0x0800d4a5
 800d49c:	0800d4a5 	.word	0x0800d4a5
 800d4a0:	0800d4a5 	.word	0x0800d4a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d4a4:	bf00      	nop
  }

  return (USBD_OK);
 800d4a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	4805      	ldr	r0, [pc, #20]	; (800d4d8 <CDC_Receive_FS+0x24>)
 800d4c2:	f7fd f876 	bl	800a5b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d4c6:	4804      	ldr	r0, [pc, #16]	; (800d4d8 <CDC_Receive_FS+0x24>)
 800d4c8:	f7fd f8bc 	bl	800a644 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d4cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20000d28 	.word	0x20000d28

0800d4dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d4ec:	4b0d      	ldr	r3, [pc, #52]	; (800d524 <CDC_Transmit_FS+0x48>)
 800d4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d4fe:	2301      	movs	r3, #1
 800d500:	e00b      	b.n	800d51a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d502:	887b      	ldrh	r3, [r7, #2]
 800d504:	461a      	mov	r2, r3
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	4806      	ldr	r0, [pc, #24]	; (800d524 <CDC_Transmit_FS+0x48>)
 800d50a:	f7fd f834 	bl	800a576 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d50e:	4805      	ldr	r0, [pc, #20]	; (800d524 <CDC_Transmit_FS+0x48>)
 800d510:	f7fd f868 	bl	800a5e4 <USBD_CDC_TransmitPacket>
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20000d28 	.word	0x20000d28

0800d528 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d528:	b480      	push	{r7}
 800d52a:	b087      	sub	sp, #28
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	4613      	mov	r3, r2
 800d534:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d53a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
	...

0800d54c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08a      	sub	sp, #40	; 0x28
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d554:	f107 0314 	add.w	r3, r7, #20
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	605a      	str	r2, [r3, #4]
 800d55e:	609a      	str	r2, [r3, #8]
 800d560:	60da      	str	r2, [r3, #12]
 800d562:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d56c:	d13a      	bne.n	800d5e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d56e:	2300      	movs	r3, #0
 800d570:	613b      	str	r3, [r7, #16]
 800d572:	4b1e      	ldr	r3, [pc, #120]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d576:	4a1d      	ldr	r2, [pc, #116]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d578:	f043 0301 	orr.w	r3, r3, #1
 800d57c:	6313      	str	r3, [r2, #48]	; 0x30
 800d57e:	4b1b      	ldr	r3, [pc, #108]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	613b      	str	r3, [r7, #16]
 800d588:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d58a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d58e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d590:	2302      	movs	r3, #2
 800d592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d594:	2300      	movs	r3, #0
 800d596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d598:	2303      	movs	r3, #3
 800d59a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d59c:	230a      	movs	r3, #10
 800d59e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5a0:	f107 0314 	add.w	r3, r7, #20
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4812      	ldr	r0, [pc, #72]	; (800d5f0 <HAL_PCD_MspInit+0xa4>)
 800d5a8:	f7f4 ff7a 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d5ac:	4b0f      	ldr	r3, [pc, #60]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b0:	4a0e      	ldr	r2, [pc, #56]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5b6:	6353      	str	r3, [r2, #52]	; 0x34
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	60fb      	str	r3, [r7, #12]
 800d5bc:	4b0b      	ldr	r3, [pc, #44]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c0:	4a0a      	ldr	r2, [pc, #40]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d5c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5c6:	6453      	str	r3, [r2, #68]	; 0x44
 800d5c8:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <HAL_PCD_MspInit+0xa0>)
 800d5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d0:	60fb      	str	r3, [r7, #12]
 800d5d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	2100      	movs	r1, #0
 800d5d8:	2043      	movs	r0, #67	; 0x43
 800d5da:	f7f4 fc10 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5de:	2043      	movs	r0, #67	; 0x43
 800d5e0:	f7f4 fc29 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5e4:	bf00      	nop
 800d5e6:	3728      	adds	r7, #40	; 0x28
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	40023800 	.word	0x40023800
 800d5f0:	40020000 	.word	0x40020000

0800d5f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d608:	4619      	mov	r1, r3
 800d60a:	4610      	mov	r0, r2
 800d60c:	f7fd f8e6 	bl	800a7dc <USBD_LL_SetupStage>
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	460b      	mov	r3, r1
 800d622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d62a:	78fa      	ldrb	r2, [r7, #3]
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	4613      	mov	r3, r2
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	1a9b      	subs	r3, r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	440b      	add	r3, r1
 800d638:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	78fb      	ldrb	r3, [r7, #3]
 800d640:	4619      	mov	r1, r3
 800d642:	f7fd f920 	bl	800a886 <USBD_LL_DataOutStage>
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b082      	sub	sp, #8
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	460b      	mov	r3, r1
 800d658:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d660:	78fa      	ldrb	r2, [r7, #3]
 800d662:	6879      	ldr	r1, [r7, #4]
 800d664:	4613      	mov	r3, r2
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	1a9b      	subs	r3, r3, r2
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	440b      	add	r3, r1
 800d66e:	3348      	adds	r3, #72	; 0x48
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	78fb      	ldrb	r3, [r7, #3]
 800d674:	4619      	mov	r1, r3
 800d676:	f7fd f969 	bl	800a94c <USBD_LL_DataInStage>
}
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b082      	sub	sp, #8
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d690:	4618      	mov	r0, r3
 800d692:	f7fd fa7d 	bl	800ab90 <USBD_LL_SOF>
}
 800d696:	bf00      	nop
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d001      	beq.n	800d6b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d6b2:	f7ff fb33 	bl	800cd1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6bc:	7bfa      	ldrb	r2, [r7, #15]
 800d6be:	4611      	mov	r1, r2
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fd fa27 	bl	800ab14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fd f9d3 	bl	800aa78 <USBD_LL_Reset>
}
 800d6d2:	bf00      	nop
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fd fa22 	bl	800ab34 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6812      	ldr	r2, [r2, #0]
 800d6fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d702:	f043 0301 	orr.w	r3, r3, #1
 800d706:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d005      	beq.n	800d71c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d710:	4b04      	ldr	r3, [pc, #16]	; (800d724 <HAL_PCD_SuspendCallback+0x48>)
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	4a03      	ldr	r2, [pc, #12]	; (800d724 <HAL_PCD_SuspendCallback+0x48>)
 800d716:	f043 0306 	orr.w	r3, r3, #6
 800d71a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	e000ed00 	.word	0xe000ed00

0800d728 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d736:	4618      	mov	r0, r3
 800d738:	f7fd fa12 	bl	800ab60 <USBD_LL_Resume>
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d756:	78fa      	ldrb	r2, [r7, #3]
 800d758:	4611      	mov	r1, r2
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fd fa60 	bl	800ac20 <USBD_LL_IsoOUTIncomplete>
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d77a:	78fa      	ldrb	r2, [r7, #3]
 800d77c:	4611      	mov	r1, r2
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fd fa28 	bl	800abd4 <USBD_LL_IsoINIncomplete>
}
 800d784:	bf00      	nop
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fd fa66 	bl	800ac6c <USBD_LL_DevConnected>
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fd fa63 	bl	800ac82 <USBD_LL_DevDisconnected>
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d13c      	bne.n	800d84e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d7d4:	4a20      	ldr	r2, [pc, #128]	; (800d858 <USBD_LL_Init+0x94>)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a1e      	ldr	r2, [pc, #120]	; (800d858 <USBD_LL_Init+0x94>)
 800d7e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7e4:	4b1c      	ldr	r3, [pc, #112]	; (800d858 <USBD_LL_Init+0x94>)
 800d7e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d7ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d7ec:	4b1a      	ldr	r3, [pc, #104]	; (800d858 <USBD_LL_Init+0x94>)
 800d7ee:	2204      	movs	r2, #4
 800d7f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d7f2:	4b19      	ldr	r3, [pc, #100]	; (800d858 <USBD_LL_Init+0x94>)
 800d7f4:	2202      	movs	r2, #2
 800d7f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d7f8:	4b17      	ldr	r3, [pc, #92]	; (800d858 <USBD_LL_Init+0x94>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7fe:	4b16      	ldr	r3, [pc, #88]	; (800d858 <USBD_LL_Init+0x94>)
 800d800:	2202      	movs	r2, #2
 800d802:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d804:	4b14      	ldr	r3, [pc, #80]	; (800d858 <USBD_LL_Init+0x94>)
 800d806:	2200      	movs	r2, #0
 800d808:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d80a:	4b13      	ldr	r3, [pc, #76]	; (800d858 <USBD_LL_Init+0x94>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d810:	4b11      	ldr	r3, [pc, #68]	; (800d858 <USBD_LL_Init+0x94>)
 800d812:	2200      	movs	r2, #0
 800d814:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d816:	4b10      	ldr	r3, [pc, #64]	; (800d858 <USBD_LL_Init+0x94>)
 800d818:	2200      	movs	r2, #0
 800d81a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d81c:	4b0e      	ldr	r3, [pc, #56]	; (800d858 <USBD_LL_Init+0x94>)
 800d81e:	2200      	movs	r2, #0
 800d820:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d822:	480d      	ldr	r0, [pc, #52]	; (800d858 <USBD_LL_Init+0x94>)
 800d824:	f7f6 fde3 	bl	80043ee <HAL_PCD_Init>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d82e:	f7ff fa75 	bl	800cd1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d832:	2180      	movs	r1, #128	; 0x80
 800d834:	4808      	ldr	r0, [pc, #32]	; (800d858 <USBD_LL_Init+0x94>)
 800d836:	f7f7 ff40 	bl	80056ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d83a:	2240      	movs	r2, #64	; 0x40
 800d83c:	2100      	movs	r1, #0
 800d83e:	4806      	ldr	r0, [pc, #24]	; (800d858 <USBD_LL_Init+0x94>)
 800d840:	f7f7 fef4 	bl	800562c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d844:	2280      	movs	r2, #128	; 0x80
 800d846:	2101      	movs	r1, #1
 800d848:	4803      	ldr	r0, [pc, #12]	; (800d858 <USBD_LL_Init+0x94>)
 800d84a:	f7f7 feef 	bl	800562c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20001ff8 	.word	0x20001ff8

0800d85c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d872:	4618      	mov	r0, r3
 800d874:	f7f6 fed8 	bl	8004628 <HAL_PCD_Start>
 800d878:	4603      	mov	r3, r0
 800d87a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 f942 	bl	800db08 <USBD_Get_USB_Status>
 800d884:	4603      	mov	r3, r0
 800d886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d888:	7bbb      	ldrb	r3, [r7, #14]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	4608      	mov	r0, r1
 800d89c:	4611      	mov	r1, r2
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	70fb      	strb	r3, [r7, #3]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	70bb      	strb	r3, [r7, #2]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8ba:	78bb      	ldrb	r3, [r7, #2]
 800d8bc:	883a      	ldrh	r2, [r7, #0]
 800d8be:	78f9      	ldrb	r1, [r7, #3]
 800d8c0:	f7f7 fabc 	bl	8004e3c <HAL_PCD_EP_Open>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 f91c 	bl	800db08 <USBD_Get_USB_Status>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b084      	sub	sp, #16
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d8f8:	78fa      	ldrb	r2, [r7, #3]
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7f7 fb05 	bl	8004f0c <HAL_PCD_EP_Close>
 800d902:	4603      	mov	r3, r0
 800d904:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 f8fd 	bl	800db08 <USBD_Get_USB_Status>
 800d90e:	4603      	mov	r3, r0
 800d910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d912:	7bbb      	ldrb	r3, [r7, #14]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	460b      	mov	r3, r1
 800d926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d936:	78fa      	ldrb	r2, [r7, #3]
 800d938:	4611      	mov	r1, r2
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f7 fbdd 	bl	80050fa <HAL_PCD_EP_SetStall>
 800d940:	4603      	mov	r3, r0
 800d942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d944:	7bfb      	ldrb	r3, [r7, #15]
 800d946:	4618      	mov	r0, r3
 800d948:	f000 f8de 	bl	800db08 <USBD_Get_USB_Status>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d950:	7bbb      	ldrb	r3, [r7, #14]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d974:	78fa      	ldrb	r2, [r7, #3]
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f7 fc22 	bl	80051c2 <HAL_PCD_EP_ClrStall>
 800d97e:	4603      	mov	r3, r0
 800d980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d982:	7bfb      	ldrb	r3, [r7, #15]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 f8bf 	bl	800db08 <USBD_Get_USB_Status>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	da0b      	bge.n	800d9cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9ba:	68f9      	ldr	r1, [r7, #12]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	1a9b      	subs	r3, r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	440b      	add	r3, r1
 800d9c6:	333e      	adds	r3, #62	; 0x3e
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	e00b      	b.n	800d9e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9d2:	68f9      	ldr	r1, [r7, #12]
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	1a9b      	subs	r3, r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	440b      	add	r3, r1
 800d9de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da0a:	78fa      	ldrb	r2, [r7, #3]
 800da0c:	4611      	mov	r1, r2
 800da0e:	4618      	mov	r0, r3
 800da10:	f7f7 f9ef 	bl	8004df2 <HAL_PCD_SetAddress>
 800da14:	4603      	mov	r3, r0
 800da16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f000 f874 	bl	800db08 <USBD_Get_USB_Status>
 800da20:	4603      	mov	r3, r0
 800da22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da24:	7bbb      	ldrb	r3, [r7, #14]
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b086      	sub	sp, #24
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	603b      	str	r3, [r7, #0]
 800da3a:	460b      	mov	r3, r1
 800da3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da4c:	7af9      	ldrb	r1, [r7, #11]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	f7f7 fb08 	bl	8005066 <HAL_PCD_EP_Transmit>
 800da56:	4603      	mov	r3, r0
 800da58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f000 f853 	bl	800db08 <USBD_Get_USB_Status>
 800da62:	4603      	mov	r3, r0
 800da64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da66:	7dbb      	ldrb	r3, [r7, #22]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	607a      	str	r2, [r7, #4]
 800da7a:	603b      	str	r3, [r7, #0]
 800da7c:	460b      	mov	r3, r1
 800da7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da8e:	7af9      	ldrb	r1, [r7, #11]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	f7f7 fa84 	bl	8004fa0 <HAL_PCD_EP_Receive>
 800da98:	4603      	mov	r3, r0
 800da9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da9c:	7dfb      	ldrb	r3, [r7, #23]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f832 	bl	800db08 <USBD_Get_USB_Status>
 800daa4:	4603      	mov	r3, r0
 800daa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daa8:	7dbb      	ldrb	r3, [r7, #22]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	460b      	mov	r3, r1
 800dabc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dac4:	78fa      	ldrb	r2, [r7, #3]
 800dac6:	4611      	mov	r1, r2
 800dac8:	4618      	mov	r0, r3
 800daca:	f7f7 fab4 	bl	8005036 <HAL_PCD_EP_GetRxCount>
 800dace:	4603      	mov	r3, r0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dae0:	4b03      	ldr	r3, [pc, #12]	; (800daf0 <USBD_static_malloc+0x18>)
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	20000800 	.word	0x20000800

0800daf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]

}
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	4603      	mov	r3, r0
 800db10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db16:	79fb      	ldrb	r3, [r7, #7]
 800db18:	2b03      	cmp	r3, #3
 800db1a:	d817      	bhi.n	800db4c <USBD_Get_USB_Status+0x44>
 800db1c:	a201      	add	r2, pc, #4	; (adr r2, 800db24 <USBD_Get_USB_Status+0x1c>)
 800db1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db22:	bf00      	nop
 800db24:	0800db35 	.word	0x0800db35
 800db28:	0800db3b 	.word	0x0800db3b
 800db2c:	0800db41 	.word	0x0800db41
 800db30:	0800db47 	.word	0x0800db47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db34:	2300      	movs	r3, #0
 800db36:	73fb      	strb	r3, [r7, #15]
    break;
 800db38:	e00b      	b.n	800db52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db3a:	2303      	movs	r3, #3
 800db3c:	73fb      	strb	r3, [r7, #15]
    break;
 800db3e:	e008      	b.n	800db52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db40:	2301      	movs	r3, #1
 800db42:	73fb      	strb	r3, [r7, #15]
    break;
 800db44:	e005      	b.n	800db52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db46:	2303      	movs	r3, #3
 800db48:	73fb      	strb	r3, [r7, #15]
    break;
 800db4a:	e002      	b.n	800db52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db4c:	2303      	movs	r3, #3
 800db4e:	73fb      	strb	r3, [r7, #15]
    break;
 800db50:	bf00      	nop
  }
  return usb_status;
 800db52:	7bfb      	ldrb	r3, [r7, #15]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3714      	adds	r7, #20
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	6039      	str	r1, [r7, #0]
 800db6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2212      	movs	r2, #18
 800db70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db72:	4b03      	ldr	r3, [pc, #12]	; (800db80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800db74:	4618      	mov	r0, r3
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr
 800db80:	2000014c 	.word	0x2000014c

0800db84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	6039      	str	r1, [r7, #0]
 800db8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	2204      	movs	r2, #4
 800db94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db96:	4b03      	ldr	r3, [pc, #12]	; (800dba4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db98:	4618      	mov	r0, r3
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	20000160 	.word	0x20000160

0800dba8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	6039      	str	r1, [r7, #0]
 800dbb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d105      	bne.n	800dbc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	4907      	ldr	r1, [pc, #28]	; (800dbdc <USBD_FS_ProductStrDescriptor+0x34>)
 800dbbe:	4808      	ldr	r0, [pc, #32]	; (800dbe0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dbc0:	f7fd fdf3 	bl	800b7aa <USBD_GetString>
 800dbc4:	e004      	b.n	800dbd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbc6:	683a      	ldr	r2, [r7, #0]
 800dbc8:	4904      	ldr	r1, [pc, #16]	; (800dbdc <USBD_FS_ProductStrDescriptor+0x34>)
 800dbca:	4805      	ldr	r0, [pc, #20]	; (800dbe0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dbcc:	f7fd fded 	bl	800b7aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbd0:	4b02      	ldr	r3, [pc, #8]	; (800dbdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20002400 	.word	0x20002400
 800dbe0:	08010c1c 	.word	0x08010c1c

0800dbe4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	6039      	str	r1, [r7, #0]
 800dbee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	4904      	ldr	r1, [pc, #16]	; (800dc04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dbf4:	4804      	ldr	r0, [pc, #16]	; (800dc08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dbf6:	f7fd fdd8 	bl	800b7aa <USBD_GetString>
  return USBD_StrDesc;
 800dbfa:	4b02      	ldr	r3, [pc, #8]	; (800dc04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20002400 	.word	0x20002400
 800dc08:	08010c34 	.word	0x08010c34

0800dc0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	6039      	str	r1, [r7, #0]
 800dc16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	221a      	movs	r2, #26
 800dc1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc1e:	f000 f843 	bl	800dca8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc22:	4b02      	ldr	r3, [pc, #8]	; (800dc2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	20000164 	.word	0x20000164

0800dc30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	6039      	str	r1, [r7, #0]
 800dc3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc3c:	79fb      	ldrb	r3, [r7, #7]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d105      	bne.n	800dc4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	4907      	ldr	r1, [pc, #28]	; (800dc64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc46:	4808      	ldr	r0, [pc, #32]	; (800dc68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc48:	f7fd fdaf 	bl	800b7aa <USBD_GetString>
 800dc4c:	e004      	b.n	800dc58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc4e:	683a      	ldr	r2, [r7, #0]
 800dc50:	4904      	ldr	r1, [pc, #16]	; (800dc64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc52:	4805      	ldr	r0, [pc, #20]	; (800dc68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc54:	f7fd fda9 	bl	800b7aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc58:	4b02      	ldr	r3, [pc, #8]	; (800dc64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20002400 	.word	0x20002400
 800dc68:	08010c48 	.word	0x08010c48

0800dc6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	6039      	str	r1, [r7, #0]
 800dc76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc78:	79fb      	ldrb	r3, [r7, #7]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d105      	bne.n	800dc8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc7e:	683a      	ldr	r2, [r7, #0]
 800dc80:	4907      	ldr	r1, [pc, #28]	; (800dca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc82:	4808      	ldr	r0, [pc, #32]	; (800dca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc84:	f7fd fd91 	bl	800b7aa <USBD_GetString>
 800dc88:	e004      	b.n	800dc94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	4904      	ldr	r1, [pc, #16]	; (800dca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc8e:	4805      	ldr	r0, [pc, #20]	; (800dca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc90:	f7fd fd8b 	bl	800b7aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc94:	4b02      	ldr	r3, [pc, #8]	; (800dca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20002400 	.word	0x20002400
 800dca4:	08010c54 	.word	0x08010c54

0800dca8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcae:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <Get_SerialNum+0x44>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcb4:	4b0e      	ldr	r3, [pc, #56]	; (800dcf0 <Get_SerialNum+0x48>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcba:	4b0e      	ldr	r3, [pc, #56]	; (800dcf4 <Get_SerialNum+0x4c>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d009      	beq.n	800dce2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcce:	2208      	movs	r2, #8
 800dcd0:	4909      	ldr	r1, [pc, #36]	; (800dcf8 <Get_SerialNum+0x50>)
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f000 f814 	bl	800dd00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dcd8:	2204      	movs	r2, #4
 800dcda:	4908      	ldr	r1, [pc, #32]	; (800dcfc <Get_SerialNum+0x54>)
 800dcdc:	68b8      	ldr	r0, [r7, #8]
 800dcde:	f000 f80f 	bl	800dd00 <IntToUnicode>
  }
}
 800dce2:	bf00      	nop
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	1fff7a10 	.word	0x1fff7a10
 800dcf0:	1fff7a14 	.word	0x1fff7a14
 800dcf4:	1fff7a18 	.word	0x1fff7a18
 800dcf8:	20000166 	.word	0x20000166
 800dcfc:	20000176 	.word	0x20000176

0800dd00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b087      	sub	sp, #28
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd12:	2300      	movs	r3, #0
 800dd14:	75fb      	strb	r3, [r7, #23]
 800dd16:	e027      	b.n	800dd68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	0f1b      	lsrs	r3, r3, #28
 800dd1c:	2b09      	cmp	r3, #9
 800dd1e:	d80b      	bhi.n	800dd38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	0f1b      	lsrs	r3, r3, #28
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	440b      	add	r3, r1
 800dd30:	3230      	adds	r2, #48	; 0x30
 800dd32:	b2d2      	uxtb	r2, r2
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	e00a      	b.n	800dd4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	0f1b      	lsrs	r3, r3, #28
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
 800dd40:	005b      	lsls	r3, r3, #1
 800dd42:	4619      	mov	r1, r3
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	440b      	add	r3, r1
 800dd48:	3237      	adds	r2, #55	; 0x37
 800dd4a:	b2d2      	uxtb	r2, r2
 800dd4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	011b      	lsls	r3, r3, #4
 800dd52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	3301      	adds	r3, #1
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	2200      	movs	r2, #0
 800dd60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	3301      	adds	r3, #1
 800dd66:	75fb      	strb	r3, [r7, #23]
 800dd68:	7dfa      	ldrb	r2, [r7, #23]
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d3d3      	bcc.n	800dd18 <IntToUnicode+0x18>
  }
}
 800dd70:	bf00      	nop
 800dd72:	bf00      	nop
 800dd74:	371c      	adds	r7, #28
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
	...

0800dd80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800dd80:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ddb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800dd84:	480d      	ldr	r0, [pc, #52]	; (800ddbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800dd86:	490e      	ldr	r1, [pc, #56]	; (800ddc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800dd88:	4a0e      	ldr	r2, [pc, #56]	; (800ddc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800dd8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dd8c:	e002      	b.n	800dd94 <LoopCopyDataInit>

0800dd8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dd8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dd90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dd92:	3304      	adds	r3, #4

0800dd94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dd94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dd96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dd98:	d3f9      	bcc.n	800dd8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dd9a:	4a0b      	ldr	r2, [pc, #44]	; (800ddc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800dd9c:	4c0b      	ldr	r4, [pc, #44]	; (800ddcc <LoopFillZerobss+0x26>)
  movs r3, #0
 800dd9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dda0:	e001      	b.n	800dda6 <LoopFillZerobss>

0800dda2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dda2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dda4:	3204      	adds	r2, #4

0800dda6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dda6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dda8:	d3fb      	bcc.n	800dda2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ddaa:	f7ff fac7 	bl	800d33c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ddae:	f000 f811 	bl	800ddd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ddb2:	f7fe fcb7 	bl	800c724 <main>
  bx  lr    
 800ddb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ddb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ddbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ddc0:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800ddc4:	08011084 	.word	0x08011084
  ldr r2, =_sbss
 800ddc8:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800ddcc:	20002610 	.word	0x20002610

0800ddd0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ddd0:	e7fe      	b.n	800ddd0 <DMA1_Stream0_IRQHandler>
	...

0800ddd4 <__libc_init_array>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	4d0d      	ldr	r5, [pc, #52]	; (800de0c <__libc_init_array+0x38>)
 800ddd8:	4c0d      	ldr	r4, [pc, #52]	; (800de10 <__libc_init_array+0x3c>)
 800ddda:	1b64      	subs	r4, r4, r5
 800dddc:	10a4      	asrs	r4, r4, #2
 800ddde:	2600      	movs	r6, #0
 800dde0:	42a6      	cmp	r6, r4
 800dde2:	d109      	bne.n	800ddf8 <__libc_init_array+0x24>
 800dde4:	4d0b      	ldr	r5, [pc, #44]	; (800de14 <__libc_init_array+0x40>)
 800dde6:	4c0c      	ldr	r4, [pc, #48]	; (800de18 <__libc_init_array+0x44>)
 800dde8:	f002 ff04 	bl	8010bf4 <_init>
 800ddec:	1b64      	subs	r4, r4, r5
 800ddee:	10a4      	asrs	r4, r4, #2
 800ddf0:	2600      	movs	r6, #0
 800ddf2:	42a6      	cmp	r6, r4
 800ddf4:	d105      	bne.n	800de02 <__libc_init_array+0x2e>
 800ddf6:	bd70      	pop	{r4, r5, r6, pc}
 800ddf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddfc:	4798      	blx	r3
 800ddfe:	3601      	adds	r6, #1
 800de00:	e7ee      	b.n	800dde0 <__libc_init_array+0xc>
 800de02:	f855 3b04 	ldr.w	r3, [r5], #4
 800de06:	4798      	blx	r3
 800de08:	3601      	adds	r6, #1
 800de0a:	e7f2      	b.n	800ddf2 <__libc_init_array+0x1e>
 800de0c:	0801107c 	.word	0x0801107c
 800de10:	0801107c 	.word	0x0801107c
 800de14:	0801107c 	.word	0x0801107c
 800de18:	08011080 	.word	0x08011080

0800de1c <memset>:
 800de1c:	4402      	add	r2, r0
 800de1e:	4603      	mov	r3, r0
 800de20:	4293      	cmp	r3, r2
 800de22:	d100      	bne.n	800de26 <memset+0xa>
 800de24:	4770      	bx	lr
 800de26:	f803 1b01 	strb.w	r1, [r3], #1
 800de2a:	e7f9      	b.n	800de20 <memset+0x4>

0800de2c <__cvt>:
 800de2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de30:	ec55 4b10 	vmov	r4, r5, d0
 800de34:	2d00      	cmp	r5, #0
 800de36:	460e      	mov	r6, r1
 800de38:	4619      	mov	r1, r3
 800de3a:	462b      	mov	r3, r5
 800de3c:	bfbb      	ittet	lt
 800de3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de42:	461d      	movlt	r5, r3
 800de44:	2300      	movge	r3, #0
 800de46:	232d      	movlt	r3, #45	; 0x2d
 800de48:	700b      	strb	r3, [r1, #0]
 800de4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800de50:	4691      	mov	r9, r2
 800de52:	f023 0820 	bic.w	r8, r3, #32
 800de56:	bfbc      	itt	lt
 800de58:	4622      	movlt	r2, r4
 800de5a:	4614      	movlt	r4, r2
 800de5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de60:	d005      	beq.n	800de6e <__cvt+0x42>
 800de62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de66:	d100      	bne.n	800de6a <__cvt+0x3e>
 800de68:	3601      	adds	r6, #1
 800de6a:	2102      	movs	r1, #2
 800de6c:	e000      	b.n	800de70 <__cvt+0x44>
 800de6e:	2103      	movs	r1, #3
 800de70:	ab03      	add	r3, sp, #12
 800de72:	9301      	str	r3, [sp, #4]
 800de74:	ab02      	add	r3, sp, #8
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	ec45 4b10 	vmov	d0, r4, r5
 800de7c:	4653      	mov	r3, sl
 800de7e:	4632      	mov	r2, r6
 800de80:	f000 fcea 	bl	800e858 <_dtoa_r>
 800de84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800de88:	4607      	mov	r7, r0
 800de8a:	d102      	bne.n	800de92 <__cvt+0x66>
 800de8c:	f019 0f01 	tst.w	r9, #1
 800de90:	d022      	beq.n	800ded8 <__cvt+0xac>
 800de92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de96:	eb07 0906 	add.w	r9, r7, r6
 800de9a:	d110      	bne.n	800debe <__cvt+0x92>
 800de9c:	783b      	ldrb	r3, [r7, #0]
 800de9e:	2b30      	cmp	r3, #48	; 0x30
 800dea0:	d10a      	bne.n	800deb8 <__cvt+0x8c>
 800dea2:	2200      	movs	r2, #0
 800dea4:	2300      	movs	r3, #0
 800dea6:	4620      	mov	r0, r4
 800dea8:	4629      	mov	r1, r5
 800deaa:	f7f2 fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 800deae:	b918      	cbnz	r0, 800deb8 <__cvt+0x8c>
 800deb0:	f1c6 0601 	rsb	r6, r6, #1
 800deb4:	f8ca 6000 	str.w	r6, [sl]
 800deb8:	f8da 3000 	ldr.w	r3, [sl]
 800debc:	4499      	add	r9, r3
 800debe:	2200      	movs	r2, #0
 800dec0:	2300      	movs	r3, #0
 800dec2:	4620      	mov	r0, r4
 800dec4:	4629      	mov	r1, r5
 800dec6:	f7f2 fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 800deca:	b108      	cbz	r0, 800ded0 <__cvt+0xa4>
 800decc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ded0:	2230      	movs	r2, #48	; 0x30
 800ded2:	9b03      	ldr	r3, [sp, #12]
 800ded4:	454b      	cmp	r3, r9
 800ded6:	d307      	bcc.n	800dee8 <__cvt+0xbc>
 800ded8:	9b03      	ldr	r3, [sp, #12]
 800deda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dedc:	1bdb      	subs	r3, r3, r7
 800dede:	4638      	mov	r0, r7
 800dee0:	6013      	str	r3, [r2, #0]
 800dee2:	b004      	add	sp, #16
 800dee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee8:	1c59      	adds	r1, r3, #1
 800deea:	9103      	str	r1, [sp, #12]
 800deec:	701a      	strb	r2, [r3, #0]
 800deee:	e7f0      	b.n	800ded2 <__cvt+0xa6>

0800def0 <__exponent>:
 800def0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800def2:	4603      	mov	r3, r0
 800def4:	2900      	cmp	r1, #0
 800def6:	bfb8      	it	lt
 800def8:	4249      	neglt	r1, r1
 800defa:	f803 2b02 	strb.w	r2, [r3], #2
 800defe:	bfb4      	ite	lt
 800df00:	222d      	movlt	r2, #45	; 0x2d
 800df02:	222b      	movge	r2, #43	; 0x2b
 800df04:	2909      	cmp	r1, #9
 800df06:	7042      	strb	r2, [r0, #1]
 800df08:	dd2a      	ble.n	800df60 <__exponent+0x70>
 800df0a:	f10d 0407 	add.w	r4, sp, #7
 800df0e:	46a4      	mov	ip, r4
 800df10:	270a      	movs	r7, #10
 800df12:	46a6      	mov	lr, r4
 800df14:	460a      	mov	r2, r1
 800df16:	fb91 f6f7 	sdiv	r6, r1, r7
 800df1a:	fb07 1516 	mls	r5, r7, r6, r1
 800df1e:	3530      	adds	r5, #48	; 0x30
 800df20:	2a63      	cmp	r2, #99	; 0x63
 800df22:	f104 34ff 	add.w	r4, r4, #4294967295
 800df26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df2a:	4631      	mov	r1, r6
 800df2c:	dcf1      	bgt.n	800df12 <__exponent+0x22>
 800df2e:	3130      	adds	r1, #48	; 0x30
 800df30:	f1ae 0502 	sub.w	r5, lr, #2
 800df34:	f804 1c01 	strb.w	r1, [r4, #-1]
 800df38:	1c44      	adds	r4, r0, #1
 800df3a:	4629      	mov	r1, r5
 800df3c:	4561      	cmp	r1, ip
 800df3e:	d30a      	bcc.n	800df56 <__exponent+0x66>
 800df40:	f10d 0209 	add.w	r2, sp, #9
 800df44:	eba2 020e 	sub.w	r2, r2, lr
 800df48:	4565      	cmp	r5, ip
 800df4a:	bf88      	it	hi
 800df4c:	2200      	movhi	r2, #0
 800df4e:	4413      	add	r3, r2
 800df50:	1a18      	subs	r0, r3, r0
 800df52:	b003      	add	sp, #12
 800df54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800df5e:	e7ed      	b.n	800df3c <__exponent+0x4c>
 800df60:	2330      	movs	r3, #48	; 0x30
 800df62:	3130      	adds	r1, #48	; 0x30
 800df64:	7083      	strb	r3, [r0, #2]
 800df66:	70c1      	strb	r1, [r0, #3]
 800df68:	1d03      	adds	r3, r0, #4
 800df6a:	e7f1      	b.n	800df50 <__exponent+0x60>

0800df6c <_printf_float>:
 800df6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df70:	ed2d 8b02 	vpush	{d8}
 800df74:	b08d      	sub	sp, #52	; 0x34
 800df76:	460c      	mov	r4, r1
 800df78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800df7c:	4616      	mov	r6, r2
 800df7e:	461f      	mov	r7, r3
 800df80:	4605      	mov	r5, r0
 800df82:	f001 fa55 	bl	800f430 <_localeconv_r>
 800df86:	f8d0 a000 	ldr.w	sl, [r0]
 800df8a:	4650      	mov	r0, sl
 800df8c:	f7f2 f928 	bl	80001e0 <strlen>
 800df90:	2300      	movs	r3, #0
 800df92:	930a      	str	r3, [sp, #40]	; 0x28
 800df94:	6823      	ldr	r3, [r4, #0]
 800df96:	9305      	str	r3, [sp, #20]
 800df98:	f8d8 3000 	ldr.w	r3, [r8]
 800df9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dfa0:	3307      	adds	r3, #7
 800dfa2:	f023 0307 	bic.w	r3, r3, #7
 800dfa6:	f103 0208 	add.w	r2, r3, #8
 800dfaa:	f8c8 2000 	str.w	r2, [r8]
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dfb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dfba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dfbe:	9307      	str	r3, [sp, #28]
 800dfc0:	f8cd 8018 	str.w	r8, [sp, #24]
 800dfc4:	ee08 0a10 	vmov	s16, r0
 800dfc8:	4b9f      	ldr	r3, [pc, #636]	; (800e248 <_printf_float+0x2dc>)
 800dfca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfce:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd2:	f7f2 fdb3 	bl	8000b3c <__aeabi_dcmpun>
 800dfd6:	bb88      	cbnz	r0, 800e03c <_printf_float+0xd0>
 800dfd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfdc:	4b9a      	ldr	r3, [pc, #616]	; (800e248 <_printf_float+0x2dc>)
 800dfde:	f04f 32ff 	mov.w	r2, #4294967295
 800dfe2:	f7f2 fd8d 	bl	8000b00 <__aeabi_dcmple>
 800dfe6:	bb48      	cbnz	r0, 800e03c <_printf_float+0xd0>
 800dfe8:	2200      	movs	r2, #0
 800dfea:	2300      	movs	r3, #0
 800dfec:	4640      	mov	r0, r8
 800dfee:	4649      	mov	r1, r9
 800dff0:	f7f2 fd7c 	bl	8000aec <__aeabi_dcmplt>
 800dff4:	b110      	cbz	r0, 800dffc <_printf_float+0x90>
 800dff6:	232d      	movs	r3, #45	; 0x2d
 800dff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dffc:	4b93      	ldr	r3, [pc, #588]	; (800e24c <_printf_float+0x2e0>)
 800dffe:	4894      	ldr	r0, [pc, #592]	; (800e250 <_printf_float+0x2e4>)
 800e000:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e004:	bf94      	ite	ls
 800e006:	4698      	movls	r8, r3
 800e008:	4680      	movhi	r8, r0
 800e00a:	2303      	movs	r3, #3
 800e00c:	6123      	str	r3, [r4, #16]
 800e00e:	9b05      	ldr	r3, [sp, #20]
 800e010:	f023 0204 	bic.w	r2, r3, #4
 800e014:	6022      	str	r2, [r4, #0]
 800e016:	f04f 0900 	mov.w	r9, #0
 800e01a:	9700      	str	r7, [sp, #0]
 800e01c:	4633      	mov	r3, r6
 800e01e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e020:	4621      	mov	r1, r4
 800e022:	4628      	mov	r0, r5
 800e024:	f000 f9d8 	bl	800e3d8 <_printf_common>
 800e028:	3001      	adds	r0, #1
 800e02a:	f040 8090 	bne.w	800e14e <_printf_float+0x1e2>
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295
 800e032:	b00d      	add	sp, #52	; 0x34
 800e034:	ecbd 8b02 	vpop	{d8}
 800e038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03c:	4642      	mov	r2, r8
 800e03e:	464b      	mov	r3, r9
 800e040:	4640      	mov	r0, r8
 800e042:	4649      	mov	r1, r9
 800e044:	f7f2 fd7a 	bl	8000b3c <__aeabi_dcmpun>
 800e048:	b140      	cbz	r0, 800e05c <_printf_float+0xf0>
 800e04a:	464b      	mov	r3, r9
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	bfbc      	itt	lt
 800e050:	232d      	movlt	r3, #45	; 0x2d
 800e052:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e056:	487f      	ldr	r0, [pc, #508]	; (800e254 <_printf_float+0x2e8>)
 800e058:	4b7f      	ldr	r3, [pc, #508]	; (800e258 <_printf_float+0x2ec>)
 800e05a:	e7d1      	b.n	800e000 <_printf_float+0x94>
 800e05c:	6863      	ldr	r3, [r4, #4]
 800e05e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e062:	9206      	str	r2, [sp, #24]
 800e064:	1c5a      	adds	r2, r3, #1
 800e066:	d13f      	bne.n	800e0e8 <_printf_float+0x17c>
 800e068:	2306      	movs	r3, #6
 800e06a:	6063      	str	r3, [r4, #4]
 800e06c:	9b05      	ldr	r3, [sp, #20]
 800e06e:	6861      	ldr	r1, [r4, #4]
 800e070:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e074:	2300      	movs	r3, #0
 800e076:	9303      	str	r3, [sp, #12]
 800e078:	ab0a      	add	r3, sp, #40	; 0x28
 800e07a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e07e:	ab09      	add	r3, sp, #36	; 0x24
 800e080:	ec49 8b10 	vmov	d0, r8, r9
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	6022      	str	r2, [r4, #0]
 800e088:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e08c:	4628      	mov	r0, r5
 800e08e:	f7ff fecd 	bl	800de2c <__cvt>
 800e092:	9b06      	ldr	r3, [sp, #24]
 800e094:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e096:	2b47      	cmp	r3, #71	; 0x47
 800e098:	4680      	mov	r8, r0
 800e09a:	d108      	bne.n	800e0ae <_printf_float+0x142>
 800e09c:	1cc8      	adds	r0, r1, #3
 800e09e:	db02      	blt.n	800e0a6 <_printf_float+0x13a>
 800e0a0:	6863      	ldr	r3, [r4, #4]
 800e0a2:	4299      	cmp	r1, r3
 800e0a4:	dd41      	ble.n	800e12a <_printf_float+0x1be>
 800e0a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800e0aa:	fa5f fb8b 	uxtb.w	fp, fp
 800e0ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0b2:	d820      	bhi.n	800e0f6 <_printf_float+0x18a>
 800e0b4:	3901      	subs	r1, #1
 800e0b6:	465a      	mov	r2, fp
 800e0b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0bc:	9109      	str	r1, [sp, #36]	; 0x24
 800e0be:	f7ff ff17 	bl	800def0 <__exponent>
 800e0c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0c4:	1813      	adds	r3, r2, r0
 800e0c6:	2a01      	cmp	r2, #1
 800e0c8:	4681      	mov	r9, r0
 800e0ca:	6123      	str	r3, [r4, #16]
 800e0cc:	dc02      	bgt.n	800e0d4 <_printf_float+0x168>
 800e0ce:	6822      	ldr	r2, [r4, #0]
 800e0d0:	07d2      	lsls	r2, r2, #31
 800e0d2:	d501      	bpl.n	800e0d8 <_printf_float+0x16c>
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	6123      	str	r3, [r4, #16]
 800e0d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d09c      	beq.n	800e01a <_printf_float+0xae>
 800e0e0:	232d      	movs	r3, #45	; 0x2d
 800e0e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0e6:	e798      	b.n	800e01a <_printf_float+0xae>
 800e0e8:	9a06      	ldr	r2, [sp, #24]
 800e0ea:	2a47      	cmp	r2, #71	; 0x47
 800e0ec:	d1be      	bne.n	800e06c <_printf_float+0x100>
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1bc      	bne.n	800e06c <_printf_float+0x100>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e7b9      	b.n	800e06a <_printf_float+0xfe>
 800e0f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e0fa:	d118      	bne.n	800e12e <_printf_float+0x1c2>
 800e0fc:	2900      	cmp	r1, #0
 800e0fe:	6863      	ldr	r3, [r4, #4]
 800e100:	dd0b      	ble.n	800e11a <_printf_float+0x1ae>
 800e102:	6121      	str	r1, [r4, #16]
 800e104:	b913      	cbnz	r3, 800e10c <_printf_float+0x1a0>
 800e106:	6822      	ldr	r2, [r4, #0]
 800e108:	07d0      	lsls	r0, r2, #31
 800e10a:	d502      	bpl.n	800e112 <_printf_float+0x1a6>
 800e10c:	3301      	adds	r3, #1
 800e10e:	440b      	add	r3, r1
 800e110:	6123      	str	r3, [r4, #16]
 800e112:	65a1      	str	r1, [r4, #88]	; 0x58
 800e114:	f04f 0900 	mov.w	r9, #0
 800e118:	e7de      	b.n	800e0d8 <_printf_float+0x16c>
 800e11a:	b913      	cbnz	r3, 800e122 <_printf_float+0x1b6>
 800e11c:	6822      	ldr	r2, [r4, #0]
 800e11e:	07d2      	lsls	r2, r2, #31
 800e120:	d501      	bpl.n	800e126 <_printf_float+0x1ba>
 800e122:	3302      	adds	r3, #2
 800e124:	e7f4      	b.n	800e110 <_printf_float+0x1a4>
 800e126:	2301      	movs	r3, #1
 800e128:	e7f2      	b.n	800e110 <_printf_float+0x1a4>
 800e12a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e130:	4299      	cmp	r1, r3
 800e132:	db05      	blt.n	800e140 <_printf_float+0x1d4>
 800e134:	6823      	ldr	r3, [r4, #0]
 800e136:	6121      	str	r1, [r4, #16]
 800e138:	07d8      	lsls	r0, r3, #31
 800e13a:	d5ea      	bpl.n	800e112 <_printf_float+0x1a6>
 800e13c:	1c4b      	adds	r3, r1, #1
 800e13e:	e7e7      	b.n	800e110 <_printf_float+0x1a4>
 800e140:	2900      	cmp	r1, #0
 800e142:	bfd4      	ite	le
 800e144:	f1c1 0202 	rsble	r2, r1, #2
 800e148:	2201      	movgt	r2, #1
 800e14a:	4413      	add	r3, r2
 800e14c:	e7e0      	b.n	800e110 <_printf_float+0x1a4>
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	055a      	lsls	r2, r3, #21
 800e152:	d407      	bmi.n	800e164 <_printf_float+0x1f8>
 800e154:	6923      	ldr	r3, [r4, #16]
 800e156:	4642      	mov	r2, r8
 800e158:	4631      	mov	r1, r6
 800e15a:	4628      	mov	r0, r5
 800e15c:	47b8      	blx	r7
 800e15e:	3001      	adds	r0, #1
 800e160:	d12c      	bne.n	800e1bc <_printf_float+0x250>
 800e162:	e764      	b.n	800e02e <_printf_float+0xc2>
 800e164:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e168:	f240 80e0 	bls.w	800e32c <_printf_float+0x3c0>
 800e16c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e170:	2200      	movs	r2, #0
 800e172:	2300      	movs	r3, #0
 800e174:	f7f2 fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d034      	beq.n	800e1e6 <_printf_float+0x27a>
 800e17c:	4a37      	ldr	r2, [pc, #220]	; (800e25c <_printf_float+0x2f0>)
 800e17e:	2301      	movs	r3, #1
 800e180:	4631      	mov	r1, r6
 800e182:	4628      	mov	r0, r5
 800e184:	47b8      	blx	r7
 800e186:	3001      	adds	r0, #1
 800e188:	f43f af51 	beq.w	800e02e <_printf_float+0xc2>
 800e18c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e190:	429a      	cmp	r2, r3
 800e192:	db02      	blt.n	800e19a <_printf_float+0x22e>
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	07d8      	lsls	r0, r3, #31
 800e198:	d510      	bpl.n	800e1bc <_printf_float+0x250>
 800e19a:	ee18 3a10 	vmov	r3, s16
 800e19e:	4652      	mov	r2, sl
 800e1a0:	4631      	mov	r1, r6
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	47b8      	blx	r7
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	f43f af41 	beq.w	800e02e <_printf_float+0xc2>
 800e1ac:	f04f 0800 	mov.w	r8, #0
 800e1b0:	f104 091a 	add.w	r9, r4, #26
 800e1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	4543      	cmp	r3, r8
 800e1ba:	dc09      	bgt.n	800e1d0 <_printf_float+0x264>
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	079b      	lsls	r3, r3, #30
 800e1c0:	f100 8105 	bmi.w	800e3ce <_printf_float+0x462>
 800e1c4:	68e0      	ldr	r0, [r4, #12]
 800e1c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1c8:	4298      	cmp	r0, r3
 800e1ca:	bfb8      	it	lt
 800e1cc:	4618      	movlt	r0, r3
 800e1ce:	e730      	b.n	800e032 <_printf_float+0xc6>
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	464a      	mov	r2, r9
 800e1d4:	4631      	mov	r1, r6
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	47b8      	blx	r7
 800e1da:	3001      	adds	r0, #1
 800e1dc:	f43f af27 	beq.w	800e02e <_printf_float+0xc2>
 800e1e0:	f108 0801 	add.w	r8, r8, #1
 800e1e4:	e7e6      	b.n	800e1b4 <_printf_float+0x248>
 800e1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	dc39      	bgt.n	800e260 <_printf_float+0x2f4>
 800e1ec:	4a1b      	ldr	r2, [pc, #108]	; (800e25c <_printf_float+0x2f0>)
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	4631      	mov	r1, r6
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	47b8      	blx	r7
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	f43f af19 	beq.w	800e02e <_printf_float+0xc2>
 800e1fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e200:	4313      	orrs	r3, r2
 800e202:	d102      	bne.n	800e20a <_printf_float+0x29e>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	07d9      	lsls	r1, r3, #31
 800e208:	d5d8      	bpl.n	800e1bc <_printf_float+0x250>
 800e20a:	ee18 3a10 	vmov	r3, s16
 800e20e:	4652      	mov	r2, sl
 800e210:	4631      	mov	r1, r6
 800e212:	4628      	mov	r0, r5
 800e214:	47b8      	blx	r7
 800e216:	3001      	adds	r0, #1
 800e218:	f43f af09 	beq.w	800e02e <_printf_float+0xc2>
 800e21c:	f04f 0900 	mov.w	r9, #0
 800e220:	f104 0a1a 	add.w	sl, r4, #26
 800e224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e226:	425b      	negs	r3, r3
 800e228:	454b      	cmp	r3, r9
 800e22a:	dc01      	bgt.n	800e230 <_printf_float+0x2c4>
 800e22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e22e:	e792      	b.n	800e156 <_printf_float+0x1ea>
 800e230:	2301      	movs	r3, #1
 800e232:	4652      	mov	r2, sl
 800e234:	4631      	mov	r1, r6
 800e236:	4628      	mov	r0, r5
 800e238:	47b8      	blx	r7
 800e23a:	3001      	adds	r0, #1
 800e23c:	f43f aef7 	beq.w	800e02e <_printf_float+0xc2>
 800e240:	f109 0901 	add.w	r9, r9, #1
 800e244:	e7ee      	b.n	800e224 <_printf_float+0x2b8>
 800e246:	bf00      	nop
 800e248:	7fefffff 	.word	0x7fefffff
 800e24c:	08010c98 	.word	0x08010c98
 800e250:	08010c9c 	.word	0x08010c9c
 800e254:	08010ca4 	.word	0x08010ca4
 800e258:	08010ca0 	.word	0x08010ca0
 800e25c:	08010ca8 	.word	0x08010ca8
 800e260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e264:	429a      	cmp	r2, r3
 800e266:	bfa8      	it	ge
 800e268:	461a      	movge	r2, r3
 800e26a:	2a00      	cmp	r2, #0
 800e26c:	4691      	mov	r9, r2
 800e26e:	dc37      	bgt.n	800e2e0 <_printf_float+0x374>
 800e270:	f04f 0b00 	mov.w	fp, #0
 800e274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e278:	f104 021a 	add.w	r2, r4, #26
 800e27c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e27e:	9305      	str	r3, [sp, #20]
 800e280:	eba3 0309 	sub.w	r3, r3, r9
 800e284:	455b      	cmp	r3, fp
 800e286:	dc33      	bgt.n	800e2f0 <_printf_float+0x384>
 800e288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e28c:	429a      	cmp	r2, r3
 800e28e:	db3b      	blt.n	800e308 <_printf_float+0x39c>
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	07da      	lsls	r2, r3, #31
 800e294:	d438      	bmi.n	800e308 <_printf_float+0x39c>
 800e296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e298:	9b05      	ldr	r3, [sp, #20]
 800e29a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	eba2 0901 	sub.w	r9, r2, r1
 800e2a2:	4599      	cmp	r9, r3
 800e2a4:	bfa8      	it	ge
 800e2a6:	4699      	movge	r9, r3
 800e2a8:	f1b9 0f00 	cmp.w	r9, #0
 800e2ac:	dc35      	bgt.n	800e31a <_printf_float+0x3ae>
 800e2ae:	f04f 0800 	mov.w	r8, #0
 800e2b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2b6:	f104 0a1a 	add.w	sl, r4, #26
 800e2ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2be:	1a9b      	subs	r3, r3, r2
 800e2c0:	eba3 0309 	sub.w	r3, r3, r9
 800e2c4:	4543      	cmp	r3, r8
 800e2c6:	f77f af79 	ble.w	800e1bc <_printf_float+0x250>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	47b8      	blx	r7
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	f43f aeaa 	beq.w	800e02e <_printf_float+0xc2>
 800e2da:	f108 0801 	add.w	r8, r8, #1
 800e2de:	e7ec      	b.n	800e2ba <_printf_float+0x34e>
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	4631      	mov	r1, r6
 800e2e4:	4642      	mov	r2, r8
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	47b8      	blx	r7
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	d1c0      	bne.n	800e270 <_printf_float+0x304>
 800e2ee:	e69e      	b.n	800e02e <_printf_float+0xc2>
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	9205      	str	r2, [sp, #20]
 800e2f8:	47b8      	blx	r7
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	f43f ae97 	beq.w	800e02e <_printf_float+0xc2>
 800e300:	9a05      	ldr	r2, [sp, #20]
 800e302:	f10b 0b01 	add.w	fp, fp, #1
 800e306:	e7b9      	b.n	800e27c <_printf_float+0x310>
 800e308:	ee18 3a10 	vmov	r3, s16
 800e30c:	4652      	mov	r2, sl
 800e30e:	4631      	mov	r1, r6
 800e310:	4628      	mov	r0, r5
 800e312:	47b8      	blx	r7
 800e314:	3001      	adds	r0, #1
 800e316:	d1be      	bne.n	800e296 <_printf_float+0x32a>
 800e318:	e689      	b.n	800e02e <_printf_float+0xc2>
 800e31a:	9a05      	ldr	r2, [sp, #20]
 800e31c:	464b      	mov	r3, r9
 800e31e:	4442      	add	r2, r8
 800e320:	4631      	mov	r1, r6
 800e322:	4628      	mov	r0, r5
 800e324:	47b8      	blx	r7
 800e326:	3001      	adds	r0, #1
 800e328:	d1c1      	bne.n	800e2ae <_printf_float+0x342>
 800e32a:	e680      	b.n	800e02e <_printf_float+0xc2>
 800e32c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e32e:	2a01      	cmp	r2, #1
 800e330:	dc01      	bgt.n	800e336 <_printf_float+0x3ca>
 800e332:	07db      	lsls	r3, r3, #31
 800e334:	d538      	bpl.n	800e3a8 <_printf_float+0x43c>
 800e336:	2301      	movs	r3, #1
 800e338:	4642      	mov	r2, r8
 800e33a:	4631      	mov	r1, r6
 800e33c:	4628      	mov	r0, r5
 800e33e:	47b8      	blx	r7
 800e340:	3001      	adds	r0, #1
 800e342:	f43f ae74 	beq.w	800e02e <_printf_float+0xc2>
 800e346:	ee18 3a10 	vmov	r3, s16
 800e34a:	4652      	mov	r2, sl
 800e34c:	4631      	mov	r1, r6
 800e34e:	4628      	mov	r0, r5
 800e350:	47b8      	blx	r7
 800e352:	3001      	adds	r0, #1
 800e354:	f43f ae6b 	beq.w	800e02e <_printf_float+0xc2>
 800e358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e35c:	2200      	movs	r2, #0
 800e35e:	2300      	movs	r3, #0
 800e360:	f7f2 fbba 	bl	8000ad8 <__aeabi_dcmpeq>
 800e364:	b9d8      	cbnz	r0, 800e39e <_printf_float+0x432>
 800e366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e368:	f108 0201 	add.w	r2, r8, #1
 800e36c:	3b01      	subs	r3, #1
 800e36e:	4631      	mov	r1, r6
 800e370:	4628      	mov	r0, r5
 800e372:	47b8      	blx	r7
 800e374:	3001      	adds	r0, #1
 800e376:	d10e      	bne.n	800e396 <_printf_float+0x42a>
 800e378:	e659      	b.n	800e02e <_printf_float+0xc2>
 800e37a:	2301      	movs	r3, #1
 800e37c:	4652      	mov	r2, sl
 800e37e:	4631      	mov	r1, r6
 800e380:	4628      	mov	r0, r5
 800e382:	47b8      	blx	r7
 800e384:	3001      	adds	r0, #1
 800e386:	f43f ae52 	beq.w	800e02e <_printf_float+0xc2>
 800e38a:	f108 0801 	add.w	r8, r8, #1
 800e38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e390:	3b01      	subs	r3, #1
 800e392:	4543      	cmp	r3, r8
 800e394:	dcf1      	bgt.n	800e37a <_printf_float+0x40e>
 800e396:	464b      	mov	r3, r9
 800e398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e39c:	e6dc      	b.n	800e158 <_printf_float+0x1ec>
 800e39e:	f04f 0800 	mov.w	r8, #0
 800e3a2:	f104 0a1a 	add.w	sl, r4, #26
 800e3a6:	e7f2      	b.n	800e38e <_printf_float+0x422>
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	4642      	mov	r2, r8
 800e3ac:	e7df      	b.n	800e36e <_printf_float+0x402>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	464a      	mov	r2, r9
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	47b8      	blx	r7
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	f43f ae38 	beq.w	800e02e <_printf_float+0xc2>
 800e3be:	f108 0801 	add.w	r8, r8, #1
 800e3c2:	68e3      	ldr	r3, [r4, #12]
 800e3c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3c6:	1a5b      	subs	r3, r3, r1
 800e3c8:	4543      	cmp	r3, r8
 800e3ca:	dcf0      	bgt.n	800e3ae <_printf_float+0x442>
 800e3cc:	e6fa      	b.n	800e1c4 <_printf_float+0x258>
 800e3ce:	f04f 0800 	mov.w	r8, #0
 800e3d2:	f104 0919 	add.w	r9, r4, #25
 800e3d6:	e7f4      	b.n	800e3c2 <_printf_float+0x456>

0800e3d8 <_printf_common>:
 800e3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3dc:	4616      	mov	r6, r2
 800e3de:	4699      	mov	r9, r3
 800e3e0:	688a      	ldr	r2, [r1, #8]
 800e3e2:	690b      	ldr	r3, [r1, #16]
 800e3e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	bfb8      	it	lt
 800e3ec:	4613      	movlt	r3, r2
 800e3ee:	6033      	str	r3, [r6, #0]
 800e3f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3f4:	4607      	mov	r7, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	b10a      	cbz	r2, 800e3fe <_printf_common+0x26>
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	6033      	str	r3, [r6, #0]
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	0699      	lsls	r1, r3, #26
 800e402:	bf42      	ittt	mi
 800e404:	6833      	ldrmi	r3, [r6, #0]
 800e406:	3302      	addmi	r3, #2
 800e408:	6033      	strmi	r3, [r6, #0]
 800e40a:	6825      	ldr	r5, [r4, #0]
 800e40c:	f015 0506 	ands.w	r5, r5, #6
 800e410:	d106      	bne.n	800e420 <_printf_common+0x48>
 800e412:	f104 0a19 	add.w	sl, r4, #25
 800e416:	68e3      	ldr	r3, [r4, #12]
 800e418:	6832      	ldr	r2, [r6, #0]
 800e41a:	1a9b      	subs	r3, r3, r2
 800e41c:	42ab      	cmp	r3, r5
 800e41e:	dc26      	bgt.n	800e46e <_printf_common+0x96>
 800e420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e424:	1e13      	subs	r3, r2, #0
 800e426:	6822      	ldr	r2, [r4, #0]
 800e428:	bf18      	it	ne
 800e42a:	2301      	movne	r3, #1
 800e42c:	0692      	lsls	r2, r2, #26
 800e42e:	d42b      	bmi.n	800e488 <_printf_common+0xb0>
 800e430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e434:	4649      	mov	r1, r9
 800e436:	4638      	mov	r0, r7
 800e438:	47c0      	blx	r8
 800e43a:	3001      	adds	r0, #1
 800e43c:	d01e      	beq.n	800e47c <_printf_common+0xa4>
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	68e5      	ldr	r5, [r4, #12]
 800e442:	6832      	ldr	r2, [r6, #0]
 800e444:	f003 0306 	and.w	r3, r3, #6
 800e448:	2b04      	cmp	r3, #4
 800e44a:	bf08      	it	eq
 800e44c:	1aad      	subeq	r5, r5, r2
 800e44e:	68a3      	ldr	r3, [r4, #8]
 800e450:	6922      	ldr	r2, [r4, #16]
 800e452:	bf0c      	ite	eq
 800e454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e458:	2500      	movne	r5, #0
 800e45a:	4293      	cmp	r3, r2
 800e45c:	bfc4      	itt	gt
 800e45e:	1a9b      	subgt	r3, r3, r2
 800e460:	18ed      	addgt	r5, r5, r3
 800e462:	2600      	movs	r6, #0
 800e464:	341a      	adds	r4, #26
 800e466:	42b5      	cmp	r5, r6
 800e468:	d11a      	bne.n	800e4a0 <_printf_common+0xc8>
 800e46a:	2000      	movs	r0, #0
 800e46c:	e008      	b.n	800e480 <_printf_common+0xa8>
 800e46e:	2301      	movs	r3, #1
 800e470:	4652      	mov	r2, sl
 800e472:	4649      	mov	r1, r9
 800e474:	4638      	mov	r0, r7
 800e476:	47c0      	blx	r8
 800e478:	3001      	adds	r0, #1
 800e47a:	d103      	bne.n	800e484 <_printf_common+0xac>
 800e47c:	f04f 30ff 	mov.w	r0, #4294967295
 800e480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e484:	3501      	adds	r5, #1
 800e486:	e7c6      	b.n	800e416 <_printf_common+0x3e>
 800e488:	18e1      	adds	r1, r4, r3
 800e48a:	1c5a      	adds	r2, r3, #1
 800e48c:	2030      	movs	r0, #48	; 0x30
 800e48e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e492:	4422      	add	r2, r4
 800e494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e49c:	3302      	adds	r3, #2
 800e49e:	e7c7      	b.n	800e430 <_printf_common+0x58>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	4622      	mov	r2, r4
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	47c0      	blx	r8
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	d0e6      	beq.n	800e47c <_printf_common+0xa4>
 800e4ae:	3601      	adds	r6, #1
 800e4b0:	e7d9      	b.n	800e466 <_printf_common+0x8e>
	...

0800e4b4 <_printf_i>:
 800e4b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4b8:	460c      	mov	r4, r1
 800e4ba:	4691      	mov	r9, r2
 800e4bc:	7e27      	ldrb	r7, [r4, #24]
 800e4be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e4c0:	2f78      	cmp	r7, #120	; 0x78
 800e4c2:	4680      	mov	r8, r0
 800e4c4:	469a      	mov	sl, r3
 800e4c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4ca:	d807      	bhi.n	800e4dc <_printf_i+0x28>
 800e4cc:	2f62      	cmp	r7, #98	; 0x62
 800e4ce:	d80a      	bhi.n	800e4e6 <_printf_i+0x32>
 800e4d0:	2f00      	cmp	r7, #0
 800e4d2:	f000 80d8 	beq.w	800e686 <_printf_i+0x1d2>
 800e4d6:	2f58      	cmp	r7, #88	; 0x58
 800e4d8:	f000 80a3 	beq.w	800e622 <_printf_i+0x16e>
 800e4dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e4e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4e4:	e03a      	b.n	800e55c <_printf_i+0xa8>
 800e4e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4ea:	2b15      	cmp	r3, #21
 800e4ec:	d8f6      	bhi.n	800e4dc <_printf_i+0x28>
 800e4ee:	a001      	add	r0, pc, #4	; (adr r0, 800e4f4 <_printf_i+0x40>)
 800e4f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e4f4:	0800e54d 	.word	0x0800e54d
 800e4f8:	0800e561 	.word	0x0800e561
 800e4fc:	0800e4dd 	.word	0x0800e4dd
 800e500:	0800e4dd 	.word	0x0800e4dd
 800e504:	0800e4dd 	.word	0x0800e4dd
 800e508:	0800e4dd 	.word	0x0800e4dd
 800e50c:	0800e561 	.word	0x0800e561
 800e510:	0800e4dd 	.word	0x0800e4dd
 800e514:	0800e4dd 	.word	0x0800e4dd
 800e518:	0800e4dd 	.word	0x0800e4dd
 800e51c:	0800e4dd 	.word	0x0800e4dd
 800e520:	0800e66d 	.word	0x0800e66d
 800e524:	0800e591 	.word	0x0800e591
 800e528:	0800e64f 	.word	0x0800e64f
 800e52c:	0800e4dd 	.word	0x0800e4dd
 800e530:	0800e4dd 	.word	0x0800e4dd
 800e534:	0800e68f 	.word	0x0800e68f
 800e538:	0800e4dd 	.word	0x0800e4dd
 800e53c:	0800e591 	.word	0x0800e591
 800e540:	0800e4dd 	.word	0x0800e4dd
 800e544:	0800e4dd 	.word	0x0800e4dd
 800e548:	0800e657 	.word	0x0800e657
 800e54c:	680b      	ldr	r3, [r1, #0]
 800e54e:	1d1a      	adds	r2, r3, #4
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	600a      	str	r2, [r1, #0]
 800e554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e55c:	2301      	movs	r3, #1
 800e55e:	e0a3      	b.n	800e6a8 <_printf_i+0x1f4>
 800e560:	6825      	ldr	r5, [r4, #0]
 800e562:	6808      	ldr	r0, [r1, #0]
 800e564:	062e      	lsls	r6, r5, #24
 800e566:	f100 0304 	add.w	r3, r0, #4
 800e56a:	d50a      	bpl.n	800e582 <_printf_i+0xce>
 800e56c:	6805      	ldr	r5, [r0, #0]
 800e56e:	600b      	str	r3, [r1, #0]
 800e570:	2d00      	cmp	r5, #0
 800e572:	da03      	bge.n	800e57c <_printf_i+0xc8>
 800e574:	232d      	movs	r3, #45	; 0x2d
 800e576:	426d      	negs	r5, r5
 800e578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e57c:	485e      	ldr	r0, [pc, #376]	; (800e6f8 <_printf_i+0x244>)
 800e57e:	230a      	movs	r3, #10
 800e580:	e019      	b.n	800e5b6 <_printf_i+0x102>
 800e582:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e586:	6805      	ldr	r5, [r0, #0]
 800e588:	600b      	str	r3, [r1, #0]
 800e58a:	bf18      	it	ne
 800e58c:	b22d      	sxthne	r5, r5
 800e58e:	e7ef      	b.n	800e570 <_printf_i+0xbc>
 800e590:	680b      	ldr	r3, [r1, #0]
 800e592:	6825      	ldr	r5, [r4, #0]
 800e594:	1d18      	adds	r0, r3, #4
 800e596:	6008      	str	r0, [r1, #0]
 800e598:	0628      	lsls	r0, r5, #24
 800e59a:	d501      	bpl.n	800e5a0 <_printf_i+0xec>
 800e59c:	681d      	ldr	r5, [r3, #0]
 800e59e:	e002      	b.n	800e5a6 <_printf_i+0xf2>
 800e5a0:	0669      	lsls	r1, r5, #25
 800e5a2:	d5fb      	bpl.n	800e59c <_printf_i+0xe8>
 800e5a4:	881d      	ldrh	r5, [r3, #0]
 800e5a6:	4854      	ldr	r0, [pc, #336]	; (800e6f8 <_printf_i+0x244>)
 800e5a8:	2f6f      	cmp	r7, #111	; 0x6f
 800e5aa:	bf0c      	ite	eq
 800e5ac:	2308      	moveq	r3, #8
 800e5ae:	230a      	movne	r3, #10
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5b6:	6866      	ldr	r6, [r4, #4]
 800e5b8:	60a6      	str	r6, [r4, #8]
 800e5ba:	2e00      	cmp	r6, #0
 800e5bc:	bfa2      	ittt	ge
 800e5be:	6821      	ldrge	r1, [r4, #0]
 800e5c0:	f021 0104 	bicge.w	r1, r1, #4
 800e5c4:	6021      	strge	r1, [r4, #0]
 800e5c6:	b90d      	cbnz	r5, 800e5cc <_printf_i+0x118>
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	d04d      	beq.n	800e668 <_printf_i+0x1b4>
 800e5cc:	4616      	mov	r6, r2
 800e5ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5d2:	fb03 5711 	mls	r7, r3, r1, r5
 800e5d6:	5dc7      	ldrb	r7, [r0, r7]
 800e5d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5dc:	462f      	mov	r7, r5
 800e5de:	42bb      	cmp	r3, r7
 800e5e0:	460d      	mov	r5, r1
 800e5e2:	d9f4      	bls.n	800e5ce <_printf_i+0x11a>
 800e5e4:	2b08      	cmp	r3, #8
 800e5e6:	d10b      	bne.n	800e600 <_printf_i+0x14c>
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	07df      	lsls	r7, r3, #31
 800e5ec:	d508      	bpl.n	800e600 <_printf_i+0x14c>
 800e5ee:	6923      	ldr	r3, [r4, #16]
 800e5f0:	6861      	ldr	r1, [r4, #4]
 800e5f2:	4299      	cmp	r1, r3
 800e5f4:	bfde      	ittt	le
 800e5f6:	2330      	movle	r3, #48	; 0x30
 800e5f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e5fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e600:	1b92      	subs	r2, r2, r6
 800e602:	6122      	str	r2, [r4, #16]
 800e604:	f8cd a000 	str.w	sl, [sp]
 800e608:	464b      	mov	r3, r9
 800e60a:	aa03      	add	r2, sp, #12
 800e60c:	4621      	mov	r1, r4
 800e60e:	4640      	mov	r0, r8
 800e610:	f7ff fee2 	bl	800e3d8 <_printf_common>
 800e614:	3001      	adds	r0, #1
 800e616:	d14c      	bne.n	800e6b2 <_printf_i+0x1fe>
 800e618:	f04f 30ff 	mov.w	r0, #4294967295
 800e61c:	b004      	add	sp, #16
 800e61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e622:	4835      	ldr	r0, [pc, #212]	; (800e6f8 <_printf_i+0x244>)
 800e624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	680e      	ldr	r6, [r1, #0]
 800e62c:	061f      	lsls	r7, r3, #24
 800e62e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e632:	600e      	str	r6, [r1, #0]
 800e634:	d514      	bpl.n	800e660 <_printf_i+0x1ac>
 800e636:	07d9      	lsls	r1, r3, #31
 800e638:	bf44      	itt	mi
 800e63a:	f043 0320 	orrmi.w	r3, r3, #32
 800e63e:	6023      	strmi	r3, [r4, #0]
 800e640:	b91d      	cbnz	r5, 800e64a <_printf_i+0x196>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	f023 0320 	bic.w	r3, r3, #32
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	2310      	movs	r3, #16
 800e64c:	e7b0      	b.n	800e5b0 <_printf_i+0xfc>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f043 0320 	orr.w	r3, r3, #32
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	2378      	movs	r3, #120	; 0x78
 800e658:	4828      	ldr	r0, [pc, #160]	; (800e6fc <_printf_i+0x248>)
 800e65a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e65e:	e7e3      	b.n	800e628 <_printf_i+0x174>
 800e660:	065e      	lsls	r6, r3, #25
 800e662:	bf48      	it	mi
 800e664:	b2ad      	uxthmi	r5, r5
 800e666:	e7e6      	b.n	800e636 <_printf_i+0x182>
 800e668:	4616      	mov	r6, r2
 800e66a:	e7bb      	b.n	800e5e4 <_printf_i+0x130>
 800e66c:	680b      	ldr	r3, [r1, #0]
 800e66e:	6826      	ldr	r6, [r4, #0]
 800e670:	6960      	ldr	r0, [r4, #20]
 800e672:	1d1d      	adds	r5, r3, #4
 800e674:	600d      	str	r5, [r1, #0]
 800e676:	0635      	lsls	r5, r6, #24
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	d501      	bpl.n	800e680 <_printf_i+0x1cc>
 800e67c:	6018      	str	r0, [r3, #0]
 800e67e:	e002      	b.n	800e686 <_printf_i+0x1d2>
 800e680:	0671      	lsls	r1, r6, #25
 800e682:	d5fb      	bpl.n	800e67c <_printf_i+0x1c8>
 800e684:	8018      	strh	r0, [r3, #0]
 800e686:	2300      	movs	r3, #0
 800e688:	6123      	str	r3, [r4, #16]
 800e68a:	4616      	mov	r6, r2
 800e68c:	e7ba      	b.n	800e604 <_printf_i+0x150>
 800e68e:	680b      	ldr	r3, [r1, #0]
 800e690:	1d1a      	adds	r2, r3, #4
 800e692:	600a      	str	r2, [r1, #0]
 800e694:	681e      	ldr	r6, [r3, #0]
 800e696:	6862      	ldr	r2, [r4, #4]
 800e698:	2100      	movs	r1, #0
 800e69a:	4630      	mov	r0, r6
 800e69c:	f7f1 fda8 	bl	80001f0 <memchr>
 800e6a0:	b108      	cbz	r0, 800e6a6 <_printf_i+0x1f2>
 800e6a2:	1b80      	subs	r0, r0, r6
 800e6a4:	6060      	str	r0, [r4, #4]
 800e6a6:	6863      	ldr	r3, [r4, #4]
 800e6a8:	6123      	str	r3, [r4, #16]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6b0:	e7a8      	b.n	800e604 <_printf_i+0x150>
 800e6b2:	6923      	ldr	r3, [r4, #16]
 800e6b4:	4632      	mov	r2, r6
 800e6b6:	4649      	mov	r1, r9
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	47d0      	blx	sl
 800e6bc:	3001      	adds	r0, #1
 800e6be:	d0ab      	beq.n	800e618 <_printf_i+0x164>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	079b      	lsls	r3, r3, #30
 800e6c4:	d413      	bmi.n	800e6ee <_printf_i+0x23a>
 800e6c6:	68e0      	ldr	r0, [r4, #12]
 800e6c8:	9b03      	ldr	r3, [sp, #12]
 800e6ca:	4298      	cmp	r0, r3
 800e6cc:	bfb8      	it	lt
 800e6ce:	4618      	movlt	r0, r3
 800e6d0:	e7a4      	b.n	800e61c <_printf_i+0x168>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	4632      	mov	r2, r6
 800e6d6:	4649      	mov	r1, r9
 800e6d8:	4640      	mov	r0, r8
 800e6da:	47d0      	blx	sl
 800e6dc:	3001      	adds	r0, #1
 800e6de:	d09b      	beq.n	800e618 <_printf_i+0x164>
 800e6e0:	3501      	adds	r5, #1
 800e6e2:	68e3      	ldr	r3, [r4, #12]
 800e6e4:	9903      	ldr	r1, [sp, #12]
 800e6e6:	1a5b      	subs	r3, r3, r1
 800e6e8:	42ab      	cmp	r3, r5
 800e6ea:	dcf2      	bgt.n	800e6d2 <_printf_i+0x21e>
 800e6ec:	e7eb      	b.n	800e6c6 <_printf_i+0x212>
 800e6ee:	2500      	movs	r5, #0
 800e6f0:	f104 0619 	add.w	r6, r4, #25
 800e6f4:	e7f5      	b.n	800e6e2 <_printf_i+0x22e>
 800e6f6:	bf00      	nop
 800e6f8:	08010caa 	.word	0x08010caa
 800e6fc:	08010cbb 	.word	0x08010cbb

0800e700 <siprintf>:
 800e700:	b40e      	push	{r1, r2, r3}
 800e702:	b500      	push	{lr}
 800e704:	b09c      	sub	sp, #112	; 0x70
 800e706:	ab1d      	add	r3, sp, #116	; 0x74
 800e708:	9002      	str	r0, [sp, #8]
 800e70a:	9006      	str	r0, [sp, #24]
 800e70c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e710:	4809      	ldr	r0, [pc, #36]	; (800e738 <siprintf+0x38>)
 800e712:	9107      	str	r1, [sp, #28]
 800e714:	9104      	str	r1, [sp, #16]
 800e716:	4909      	ldr	r1, [pc, #36]	; (800e73c <siprintf+0x3c>)
 800e718:	f853 2b04 	ldr.w	r2, [r3], #4
 800e71c:	9105      	str	r1, [sp, #20]
 800e71e:	6800      	ldr	r0, [r0, #0]
 800e720:	9301      	str	r3, [sp, #4]
 800e722:	a902      	add	r1, sp, #8
 800e724:	f001 fb32 	bl	800fd8c <_svfiprintf_r>
 800e728:	9b02      	ldr	r3, [sp, #8]
 800e72a:	2200      	movs	r2, #0
 800e72c:	701a      	strb	r2, [r3, #0]
 800e72e:	b01c      	add	sp, #112	; 0x70
 800e730:	f85d eb04 	ldr.w	lr, [sp], #4
 800e734:	b003      	add	sp, #12
 800e736:	4770      	bx	lr
 800e738:	20000180 	.word	0x20000180
 800e73c:	ffff0208 	.word	0xffff0208

0800e740 <quorem>:
 800e740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	6903      	ldr	r3, [r0, #16]
 800e746:	690c      	ldr	r4, [r1, #16]
 800e748:	42a3      	cmp	r3, r4
 800e74a:	4607      	mov	r7, r0
 800e74c:	f2c0 8081 	blt.w	800e852 <quorem+0x112>
 800e750:	3c01      	subs	r4, #1
 800e752:	f101 0814 	add.w	r8, r1, #20
 800e756:	f100 0514 	add.w	r5, r0, #20
 800e75a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e768:	3301      	adds	r3, #1
 800e76a:	429a      	cmp	r2, r3
 800e76c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e770:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e774:	fbb2 f6f3 	udiv	r6, r2, r3
 800e778:	d331      	bcc.n	800e7de <quorem+0x9e>
 800e77a:	f04f 0e00 	mov.w	lr, #0
 800e77e:	4640      	mov	r0, r8
 800e780:	46ac      	mov	ip, r5
 800e782:	46f2      	mov	sl, lr
 800e784:	f850 2b04 	ldr.w	r2, [r0], #4
 800e788:	b293      	uxth	r3, r2
 800e78a:	fb06 e303 	mla	r3, r6, r3, lr
 800e78e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e792:	b29b      	uxth	r3, r3
 800e794:	ebaa 0303 	sub.w	r3, sl, r3
 800e798:	0c12      	lsrs	r2, r2, #16
 800e79a:	f8dc a000 	ldr.w	sl, [ip]
 800e79e:	fb06 e202 	mla	r2, r6, r2, lr
 800e7a2:	fa13 f38a 	uxtah	r3, r3, sl
 800e7a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7aa:	fa1f fa82 	uxth.w	sl, r2
 800e7ae:	f8dc 2000 	ldr.w	r2, [ip]
 800e7b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e7b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7c0:	4581      	cmp	r9, r0
 800e7c2:	f84c 3b04 	str.w	r3, [ip], #4
 800e7c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7ca:	d2db      	bcs.n	800e784 <quorem+0x44>
 800e7cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7d0:	b92b      	cbnz	r3, 800e7de <quorem+0x9e>
 800e7d2:	9b01      	ldr	r3, [sp, #4]
 800e7d4:	3b04      	subs	r3, #4
 800e7d6:	429d      	cmp	r5, r3
 800e7d8:	461a      	mov	r2, r3
 800e7da:	d32e      	bcc.n	800e83a <quorem+0xfa>
 800e7dc:	613c      	str	r4, [r7, #16]
 800e7de:	4638      	mov	r0, r7
 800e7e0:	f001 f8be 	bl	800f960 <__mcmp>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	db24      	blt.n	800e832 <quorem+0xf2>
 800e7e8:	3601      	adds	r6, #1
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	f04f 0c00 	mov.w	ip, #0
 800e7f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7f4:	f8d0 e000 	ldr.w	lr, [r0]
 800e7f8:	b293      	uxth	r3, r2
 800e7fa:	ebac 0303 	sub.w	r3, ip, r3
 800e7fe:	0c12      	lsrs	r2, r2, #16
 800e800:	fa13 f38e 	uxtah	r3, r3, lr
 800e804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e812:	45c1      	cmp	r9, r8
 800e814:	f840 3b04 	str.w	r3, [r0], #4
 800e818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e81c:	d2e8      	bcs.n	800e7f0 <quorem+0xb0>
 800e81e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e826:	b922      	cbnz	r2, 800e832 <quorem+0xf2>
 800e828:	3b04      	subs	r3, #4
 800e82a:	429d      	cmp	r5, r3
 800e82c:	461a      	mov	r2, r3
 800e82e:	d30a      	bcc.n	800e846 <quorem+0x106>
 800e830:	613c      	str	r4, [r7, #16]
 800e832:	4630      	mov	r0, r6
 800e834:	b003      	add	sp, #12
 800e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83a:	6812      	ldr	r2, [r2, #0]
 800e83c:	3b04      	subs	r3, #4
 800e83e:	2a00      	cmp	r2, #0
 800e840:	d1cc      	bne.n	800e7dc <quorem+0x9c>
 800e842:	3c01      	subs	r4, #1
 800e844:	e7c7      	b.n	800e7d6 <quorem+0x96>
 800e846:	6812      	ldr	r2, [r2, #0]
 800e848:	3b04      	subs	r3, #4
 800e84a:	2a00      	cmp	r2, #0
 800e84c:	d1f0      	bne.n	800e830 <quorem+0xf0>
 800e84e:	3c01      	subs	r4, #1
 800e850:	e7eb      	b.n	800e82a <quorem+0xea>
 800e852:	2000      	movs	r0, #0
 800e854:	e7ee      	b.n	800e834 <quorem+0xf4>
	...

0800e858 <_dtoa_r>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	ed2d 8b02 	vpush	{d8}
 800e860:	ec57 6b10 	vmov	r6, r7, d0
 800e864:	b095      	sub	sp, #84	; 0x54
 800e866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e86c:	9105      	str	r1, [sp, #20]
 800e86e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e872:	4604      	mov	r4, r0
 800e874:	9209      	str	r2, [sp, #36]	; 0x24
 800e876:	930f      	str	r3, [sp, #60]	; 0x3c
 800e878:	b975      	cbnz	r5, 800e898 <_dtoa_r+0x40>
 800e87a:	2010      	movs	r0, #16
 800e87c:	f000 fddc 	bl	800f438 <malloc>
 800e880:	4602      	mov	r2, r0
 800e882:	6260      	str	r0, [r4, #36]	; 0x24
 800e884:	b920      	cbnz	r0, 800e890 <_dtoa_r+0x38>
 800e886:	4bb2      	ldr	r3, [pc, #712]	; (800eb50 <_dtoa_r+0x2f8>)
 800e888:	21ea      	movs	r1, #234	; 0xea
 800e88a:	48b2      	ldr	r0, [pc, #712]	; (800eb54 <_dtoa_r+0x2fc>)
 800e88c:	f001 fb8e 	bl	800ffac <__assert_func>
 800e890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e894:	6005      	str	r5, [r0, #0]
 800e896:	60c5      	str	r5, [r0, #12]
 800e898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e89a:	6819      	ldr	r1, [r3, #0]
 800e89c:	b151      	cbz	r1, 800e8b4 <_dtoa_r+0x5c>
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	604a      	str	r2, [r1, #4]
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4093      	lsls	r3, r2
 800e8a6:	608b      	str	r3, [r1, #8]
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f000 fe1b 	bl	800f4e4 <_Bfree>
 800e8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	1e3b      	subs	r3, r7, #0
 800e8b6:	bfb9      	ittee	lt
 800e8b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e8bc:	9303      	strlt	r3, [sp, #12]
 800e8be:	2300      	movge	r3, #0
 800e8c0:	f8c8 3000 	strge.w	r3, [r8]
 800e8c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e8c8:	4ba3      	ldr	r3, [pc, #652]	; (800eb58 <_dtoa_r+0x300>)
 800e8ca:	bfbc      	itt	lt
 800e8cc:	2201      	movlt	r2, #1
 800e8ce:	f8c8 2000 	strlt.w	r2, [r8]
 800e8d2:	ea33 0309 	bics.w	r3, r3, r9
 800e8d6:	d11b      	bne.n	800e910 <_dtoa_r+0xb8>
 800e8d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8da:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8e4:	4333      	orrs	r3, r6
 800e8e6:	f000 857a 	beq.w	800f3de <_dtoa_r+0xb86>
 800e8ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8ec:	b963      	cbnz	r3, 800e908 <_dtoa_r+0xb0>
 800e8ee:	4b9b      	ldr	r3, [pc, #620]	; (800eb5c <_dtoa_r+0x304>)
 800e8f0:	e024      	b.n	800e93c <_dtoa_r+0xe4>
 800e8f2:	4b9b      	ldr	r3, [pc, #620]	; (800eb60 <_dtoa_r+0x308>)
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	3308      	adds	r3, #8
 800e8f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	9800      	ldr	r0, [sp, #0]
 800e8fe:	b015      	add	sp, #84	; 0x54
 800e900:	ecbd 8b02 	vpop	{d8}
 800e904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e908:	4b94      	ldr	r3, [pc, #592]	; (800eb5c <_dtoa_r+0x304>)
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	3303      	adds	r3, #3
 800e90e:	e7f3      	b.n	800e8f8 <_dtoa_r+0xa0>
 800e910:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e914:	2200      	movs	r2, #0
 800e916:	ec51 0b17 	vmov	r0, r1, d7
 800e91a:	2300      	movs	r3, #0
 800e91c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e920:	f7f2 f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 800e924:	4680      	mov	r8, r0
 800e926:	b158      	cbz	r0, 800e940 <_dtoa_r+0xe8>
 800e928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e92a:	2301      	movs	r3, #1
 800e92c:	6013      	str	r3, [r2, #0]
 800e92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e930:	2b00      	cmp	r3, #0
 800e932:	f000 8551 	beq.w	800f3d8 <_dtoa_r+0xb80>
 800e936:	488b      	ldr	r0, [pc, #556]	; (800eb64 <_dtoa_r+0x30c>)
 800e938:	6018      	str	r0, [r3, #0]
 800e93a:	1e43      	subs	r3, r0, #1
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	e7dd      	b.n	800e8fc <_dtoa_r+0xa4>
 800e940:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e944:	aa12      	add	r2, sp, #72	; 0x48
 800e946:	a913      	add	r1, sp, #76	; 0x4c
 800e948:	4620      	mov	r0, r4
 800e94a:	f001 f8ad 	bl	800faa8 <__d2b>
 800e94e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e952:	4683      	mov	fp, r0
 800e954:	2d00      	cmp	r5, #0
 800e956:	d07c      	beq.n	800ea52 <_dtoa_r+0x1fa>
 800e958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e95a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e95e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e962:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e966:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e96a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e96e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e972:	4b7d      	ldr	r3, [pc, #500]	; (800eb68 <_dtoa_r+0x310>)
 800e974:	2200      	movs	r2, #0
 800e976:	4630      	mov	r0, r6
 800e978:	4639      	mov	r1, r7
 800e97a:	f7f1 fc8d 	bl	8000298 <__aeabi_dsub>
 800e97e:	a36e      	add	r3, pc, #440	; (adr r3, 800eb38 <_dtoa_r+0x2e0>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	f7f1 fe40 	bl	8000608 <__aeabi_dmul>
 800e988:	a36d      	add	r3, pc, #436	; (adr r3, 800eb40 <_dtoa_r+0x2e8>)
 800e98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98e:	f7f1 fc85 	bl	800029c <__adddf3>
 800e992:	4606      	mov	r6, r0
 800e994:	4628      	mov	r0, r5
 800e996:	460f      	mov	r7, r1
 800e998:	f7f1 fdcc 	bl	8000534 <__aeabi_i2d>
 800e99c:	a36a      	add	r3, pc, #424	; (adr r3, 800eb48 <_dtoa_r+0x2f0>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	f7f1 fe31 	bl	8000608 <__aeabi_dmul>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	f7f1 fc75 	bl	800029c <__adddf3>
 800e9b2:	4606      	mov	r6, r0
 800e9b4:	460f      	mov	r7, r1
 800e9b6:	f7f2 f8d7 	bl	8000b68 <__aeabi_d2iz>
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	4682      	mov	sl, r0
 800e9be:	2300      	movs	r3, #0
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	f7f2 f892 	bl	8000aec <__aeabi_dcmplt>
 800e9c8:	b148      	cbz	r0, 800e9de <_dtoa_r+0x186>
 800e9ca:	4650      	mov	r0, sl
 800e9cc:	f7f1 fdb2 	bl	8000534 <__aeabi_i2d>
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	f7f2 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9d8:	b908      	cbnz	r0, 800e9de <_dtoa_r+0x186>
 800e9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9de:	f1ba 0f16 	cmp.w	sl, #22
 800e9e2:	d854      	bhi.n	800ea8e <_dtoa_r+0x236>
 800e9e4:	4b61      	ldr	r3, [pc, #388]	; (800eb6c <_dtoa_r+0x314>)
 800e9e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e9f2:	f7f2 f87b 	bl	8000aec <__aeabi_dcmplt>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d04b      	beq.n	800ea92 <_dtoa_r+0x23a>
 800e9fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9fe:	2300      	movs	r3, #0
 800ea00:	930e      	str	r3, [sp, #56]	; 0x38
 800ea02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea04:	1b5d      	subs	r5, r3, r5
 800ea06:	1e6b      	subs	r3, r5, #1
 800ea08:	9304      	str	r3, [sp, #16]
 800ea0a:	bf43      	ittte	mi
 800ea0c:	2300      	movmi	r3, #0
 800ea0e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ea12:	9304      	strmi	r3, [sp, #16]
 800ea14:	f04f 0800 	movpl.w	r8, #0
 800ea18:	f1ba 0f00 	cmp.w	sl, #0
 800ea1c:	db3b      	blt.n	800ea96 <_dtoa_r+0x23e>
 800ea1e:	9b04      	ldr	r3, [sp, #16]
 800ea20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ea24:	4453      	add	r3, sl
 800ea26:	9304      	str	r3, [sp, #16]
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9306      	str	r3, [sp, #24]
 800ea2c:	9b05      	ldr	r3, [sp, #20]
 800ea2e:	2b09      	cmp	r3, #9
 800ea30:	d869      	bhi.n	800eb06 <_dtoa_r+0x2ae>
 800ea32:	2b05      	cmp	r3, #5
 800ea34:	bfc4      	itt	gt
 800ea36:	3b04      	subgt	r3, #4
 800ea38:	9305      	strgt	r3, [sp, #20]
 800ea3a:	9b05      	ldr	r3, [sp, #20]
 800ea3c:	f1a3 0302 	sub.w	r3, r3, #2
 800ea40:	bfcc      	ite	gt
 800ea42:	2500      	movgt	r5, #0
 800ea44:	2501      	movle	r5, #1
 800ea46:	2b03      	cmp	r3, #3
 800ea48:	d869      	bhi.n	800eb1e <_dtoa_r+0x2c6>
 800ea4a:	e8df f003 	tbb	[pc, r3]
 800ea4e:	4e2c      	.short	0x4e2c
 800ea50:	5a4c      	.short	0x5a4c
 800ea52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ea56:	441d      	add	r5, r3
 800ea58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea5c:	2b20      	cmp	r3, #32
 800ea5e:	bfc1      	itttt	gt
 800ea60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea68:	fa09 f303 	lslgt.w	r3, r9, r3
 800ea6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea70:	bfda      	itte	le
 800ea72:	f1c3 0320 	rsble	r3, r3, #32
 800ea76:	fa06 f003 	lslle.w	r0, r6, r3
 800ea7a:	4318      	orrgt	r0, r3
 800ea7c:	f7f1 fd4a 	bl	8000514 <__aeabi_ui2d>
 800ea80:	2301      	movs	r3, #1
 800ea82:	4606      	mov	r6, r0
 800ea84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ea88:	3d01      	subs	r5, #1
 800ea8a:	9310      	str	r3, [sp, #64]	; 0x40
 800ea8c:	e771      	b.n	800e972 <_dtoa_r+0x11a>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e7b6      	b.n	800ea00 <_dtoa_r+0x1a8>
 800ea92:	900e      	str	r0, [sp, #56]	; 0x38
 800ea94:	e7b5      	b.n	800ea02 <_dtoa_r+0x1aa>
 800ea96:	f1ca 0300 	rsb	r3, sl, #0
 800ea9a:	9306      	str	r3, [sp, #24]
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	eba8 080a 	sub.w	r8, r8, sl
 800eaa2:	930d      	str	r3, [sp, #52]	; 0x34
 800eaa4:	e7c2      	b.n	800ea2c <_dtoa_r+0x1d4>
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	9308      	str	r3, [sp, #32]
 800eaaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	dc39      	bgt.n	800eb24 <_dtoa_r+0x2cc>
 800eab0:	f04f 0901 	mov.w	r9, #1
 800eab4:	f8cd 9004 	str.w	r9, [sp, #4]
 800eab8:	464b      	mov	r3, r9
 800eaba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800eabe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eac0:	2200      	movs	r2, #0
 800eac2:	6042      	str	r2, [r0, #4]
 800eac4:	2204      	movs	r2, #4
 800eac6:	f102 0614 	add.w	r6, r2, #20
 800eaca:	429e      	cmp	r6, r3
 800eacc:	6841      	ldr	r1, [r0, #4]
 800eace:	d92f      	bls.n	800eb30 <_dtoa_r+0x2d8>
 800ead0:	4620      	mov	r0, r4
 800ead2:	f000 fcc7 	bl	800f464 <_Balloc>
 800ead6:	9000      	str	r0, [sp, #0]
 800ead8:	2800      	cmp	r0, #0
 800eada:	d14b      	bne.n	800eb74 <_dtoa_r+0x31c>
 800eadc:	4b24      	ldr	r3, [pc, #144]	; (800eb70 <_dtoa_r+0x318>)
 800eade:	4602      	mov	r2, r0
 800eae0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eae4:	e6d1      	b.n	800e88a <_dtoa_r+0x32>
 800eae6:	2301      	movs	r3, #1
 800eae8:	e7de      	b.n	800eaa8 <_dtoa_r+0x250>
 800eaea:	2300      	movs	r3, #0
 800eaec:	9308      	str	r3, [sp, #32]
 800eaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf0:	eb0a 0903 	add.w	r9, sl, r3
 800eaf4:	f109 0301 	add.w	r3, r9, #1
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	bfb8      	it	lt
 800eafe:	2301      	movlt	r3, #1
 800eb00:	e7dd      	b.n	800eabe <_dtoa_r+0x266>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e7f2      	b.n	800eaec <_dtoa_r+0x294>
 800eb06:	2501      	movs	r5, #1
 800eb08:	2300      	movs	r3, #0
 800eb0a:	9305      	str	r3, [sp, #20]
 800eb0c:	9508      	str	r5, [sp, #32]
 800eb0e:	f04f 39ff 	mov.w	r9, #4294967295
 800eb12:	2200      	movs	r2, #0
 800eb14:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb18:	2312      	movs	r3, #18
 800eb1a:	9209      	str	r2, [sp, #36]	; 0x24
 800eb1c:	e7cf      	b.n	800eabe <_dtoa_r+0x266>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	9308      	str	r3, [sp, #32]
 800eb22:	e7f4      	b.n	800eb0e <_dtoa_r+0x2b6>
 800eb24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800eb28:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb2c:	464b      	mov	r3, r9
 800eb2e:	e7c6      	b.n	800eabe <_dtoa_r+0x266>
 800eb30:	3101      	adds	r1, #1
 800eb32:	6041      	str	r1, [r0, #4]
 800eb34:	0052      	lsls	r2, r2, #1
 800eb36:	e7c6      	b.n	800eac6 <_dtoa_r+0x26e>
 800eb38:	636f4361 	.word	0x636f4361
 800eb3c:	3fd287a7 	.word	0x3fd287a7
 800eb40:	8b60c8b3 	.word	0x8b60c8b3
 800eb44:	3fc68a28 	.word	0x3fc68a28
 800eb48:	509f79fb 	.word	0x509f79fb
 800eb4c:	3fd34413 	.word	0x3fd34413
 800eb50:	08010cd9 	.word	0x08010cd9
 800eb54:	08010cf0 	.word	0x08010cf0
 800eb58:	7ff00000 	.word	0x7ff00000
 800eb5c:	08010cd5 	.word	0x08010cd5
 800eb60:	08010ccc 	.word	0x08010ccc
 800eb64:	08010ca9 	.word	0x08010ca9
 800eb68:	3ff80000 	.word	0x3ff80000
 800eb6c:	08010de8 	.word	0x08010de8
 800eb70:	08010d4f 	.word	0x08010d4f
 800eb74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb76:	9a00      	ldr	r2, [sp, #0]
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	9b01      	ldr	r3, [sp, #4]
 800eb7c:	2b0e      	cmp	r3, #14
 800eb7e:	f200 80ad 	bhi.w	800ecdc <_dtoa_r+0x484>
 800eb82:	2d00      	cmp	r5, #0
 800eb84:	f000 80aa 	beq.w	800ecdc <_dtoa_r+0x484>
 800eb88:	f1ba 0f00 	cmp.w	sl, #0
 800eb8c:	dd36      	ble.n	800ebfc <_dtoa_r+0x3a4>
 800eb8e:	4ac3      	ldr	r2, [pc, #780]	; (800ee9c <_dtoa_r+0x644>)
 800eb90:	f00a 030f 	and.w	r3, sl, #15
 800eb94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb98:	ed93 7b00 	vldr	d7, [r3]
 800eb9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800eba0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800eba4:	eeb0 8a47 	vmov.f32	s16, s14
 800eba8:	eef0 8a67 	vmov.f32	s17, s15
 800ebac:	d016      	beq.n	800ebdc <_dtoa_r+0x384>
 800ebae:	4bbc      	ldr	r3, [pc, #752]	; (800eea0 <_dtoa_r+0x648>)
 800ebb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ebb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebb8:	f7f1 fe50 	bl	800085c <__aeabi_ddiv>
 800ebbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebc0:	f007 070f 	and.w	r7, r7, #15
 800ebc4:	2503      	movs	r5, #3
 800ebc6:	4eb6      	ldr	r6, [pc, #728]	; (800eea0 <_dtoa_r+0x648>)
 800ebc8:	b957      	cbnz	r7, 800ebe0 <_dtoa_r+0x388>
 800ebca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebce:	ec53 2b18 	vmov	r2, r3, d8
 800ebd2:	f7f1 fe43 	bl	800085c <__aeabi_ddiv>
 800ebd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebda:	e029      	b.n	800ec30 <_dtoa_r+0x3d8>
 800ebdc:	2502      	movs	r5, #2
 800ebde:	e7f2      	b.n	800ebc6 <_dtoa_r+0x36e>
 800ebe0:	07f9      	lsls	r1, r7, #31
 800ebe2:	d508      	bpl.n	800ebf6 <_dtoa_r+0x39e>
 800ebe4:	ec51 0b18 	vmov	r0, r1, d8
 800ebe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ebec:	f7f1 fd0c 	bl	8000608 <__aeabi_dmul>
 800ebf0:	ec41 0b18 	vmov	d8, r0, r1
 800ebf4:	3501      	adds	r5, #1
 800ebf6:	107f      	asrs	r7, r7, #1
 800ebf8:	3608      	adds	r6, #8
 800ebfa:	e7e5      	b.n	800ebc8 <_dtoa_r+0x370>
 800ebfc:	f000 80a6 	beq.w	800ed4c <_dtoa_r+0x4f4>
 800ec00:	f1ca 0600 	rsb	r6, sl, #0
 800ec04:	4ba5      	ldr	r3, [pc, #660]	; (800ee9c <_dtoa_r+0x644>)
 800ec06:	4fa6      	ldr	r7, [pc, #664]	; (800eea0 <_dtoa_r+0x648>)
 800ec08:	f006 020f 	and.w	r2, r6, #15
 800ec0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec18:	f7f1 fcf6 	bl	8000608 <__aeabi_dmul>
 800ec1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec20:	1136      	asrs	r6, r6, #4
 800ec22:	2300      	movs	r3, #0
 800ec24:	2502      	movs	r5, #2
 800ec26:	2e00      	cmp	r6, #0
 800ec28:	f040 8085 	bne.w	800ed36 <_dtoa_r+0x4de>
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1d2      	bne.n	800ebd6 <_dtoa_r+0x37e>
 800ec30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f000 808c 	beq.w	800ed50 <_dtoa_r+0x4f8>
 800ec38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec3c:	4b99      	ldr	r3, [pc, #612]	; (800eea4 <_dtoa_r+0x64c>)
 800ec3e:	2200      	movs	r2, #0
 800ec40:	4630      	mov	r0, r6
 800ec42:	4639      	mov	r1, r7
 800ec44:	f7f1 ff52 	bl	8000aec <__aeabi_dcmplt>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	f000 8081 	beq.w	800ed50 <_dtoa_r+0x4f8>
 800ec4e:	9b01      	ldr	r3, [sp, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d07d      	beq.n	800ed50 <_dtoa_r+0x4f8>
 800ec54:	f1b9 0f00 	cmp.w	r9, #0
 800ec58:	dd3c      	ble.n	800ecd4 <_dtoa_r+0x47c>
 800ec5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	2200      	movs	r2, #0
 800ec62:	4b91      	ldr	r3, [pc, #580]	; (800eea8 <_dtoa_r+0x650>)
 800ec64:	4630      	mov	r0, r6
 800ec66:	4639      	mov	r1, r7
 800ec68:	f7f1 fcce 	bl	8000608 <__aeabi_dmul>
 800ec6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec70:	3501      	adds	r5, #1
 800ec72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ec76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f7f1 fc5a 	bl	8000534 <__aeabi_i2d>
 800ec80:	4632      	mov	r2, r6
 800ec82:	463b      	mov	r3, r7
 800ec84:	f7f1 fcc0 	bl	8000608 <__aeabi_dmul>
 800ec88:	4b88      	ldr	r3, [pc, #544]	; (800eeac <_dtoa_r+0x654>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f7f1 fb06 	bl	800029c <__adddf3>
 800ec90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ec94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec98:	9303      	str	r3, [sp, #12]
 800ec9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d15c      	bne.n	800ed5a <_dtoa_r+0x502>
 800eca0:	4b83      	ldr	r3, [pc, #524]	; (800eeb0 <_dtoa_r+0x658>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	4630      	mov	r0, r6
 800eca6:	4639      	mov	r1, r7
 800eca8:	f7f1 faf6 	bl	8000298 <__aeabi_dsub>
 800ecac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecb0:	4606      	mov	r6, r0
 800ecb2:	460f      	mov	r7, r1
 800ecb4:	f7f1 ff38 	bl	8000b28 <__aeabi_dcmpgt>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	f040 8296 	bne.w	800f1ea <_dtoa_r+0x992>
 800ecbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecc8:	4639      	mov	r1, r7
 800ecca:	f7f1 ff0f 	bl	8000aec <__aeabi_dcmplt>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	f040 8288 	bne.w	800f1e4 <_dtoa_r+0x98c>
 800ecd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f2c0 8158 	blt.w	800ef94 <_dtoa_r+0x73c>
 800ece4:	f1ba 0f0e 	cmp.w	sl, #14
 800ece8:	f300 8154 	bgt.w	800ef94 <_dtoa_r+0x73c>
 800ecec:	4b6b      	ldr	r3, [pc, #428]	; (800ee9c <_dtoa_r+0x644>)
 800ecee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ecf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ecf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f280 80e3 	bge.w	800eec4 <_dtoa_r+0x66c>
 800ecfe:	9b01      	ldr	r3, [sp, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f300 80df 	bgt.w	800eec4 <_dtoa_r+0x66c>
 800ed06:	f040 826d 	bne.w	800f1e4 <_dtoa_r+0x98c>
 800ed0a:	4b69      	ldr	r3, [pc, #420]	; (800eeb0 <_dtoa_r+0x658>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	4640      	mov	r0, r8
 800ed10:	4649      	mov	r1, r9
 800ed12:	f7f1 fc79 	bl	8000608 <__aeabi_dmul>
 800ed16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed1a:	f7f1 fefb 	bl	8000b14 <__aeabi_dcmpge>
 800ed1e:	9e01      	ldr	r6, [sp, #4]
 800ed20:	4637      	mov	r7, r6
 800ed22:	2800      	cmp	r0, #0
 800ed24:	f040 8243 	bne.w	800f1ae <_dtoa_r+0x956>
 800ed28:	9d00      	ldr	r5, [sp, #0]
 800ed2a:	2331      	movs	r3, #49	; 0x31
 800ed2c:	f805 3b01 	strb.w	r3, [r5], #1
 800ed30:	f10a 0a01 	add.w	sl, sl, #1
 800ed34:	e23f      	b.n	800f1b6 <_dtoa_r+0x95e>
 800ed36:	07f2      	lsls	r2, r6, #31
 800ed38:	d505      	bpl.n	800ed46 <_dtoa_r+0x4ee>
 800ed3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed3e:	f7f1 fc63 	bl	8000608 <__aeabi_dmul>
 800ed42:	3501      	adds	r5, #1
 800ed44:	2301      	movs	r3, #1
 800ed46:	1076      	asrs	r6, r6, #1
 800ed48:	3708      	adds	r7, #8
 800ed4a:	e76c      	b.n	800ec26 <_dtoa_r+0x3ce>
 800ed4c:	2502      	movs	r5, #2
 800ed4e:	e76f      	b.n	800ec30 <_dtoa_r+0x3d8>
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed56:	930c      	str	r3, [sp, #48]	; 0x30
 800ed58:	e78d      	b.n	800ec76 <_dtoa_r+0x41e>
 800ed5a:	9900      	ldr	r1, [sp, #0]
 800ed5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ed5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed60:	4b4e      	ldr	r3, [pc, #312]	; (800ee9c <_dtoa_r+0x644>)
 800ed62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed66:	4401      	add	r1, r0
 800ed68:	9102      	str	r1, [sp, #8]
 800ed6a:	9908      	ldr	r1, [sp, #32]
 800ed6c:	eeb0 8a47 	vmov.f32	s16, s14
 800ed70:	eef0 8a67 	vmov.f32	s17, s15
 800ed74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed7c:	2900      	cmp	r1, #0
 800ed7e:	d045      	beq.n	800ee0c <_dtoa_r+0x5b4>
 800ed80:	494c      	ldr	r1, [pc, #304]	; (800eeb4 <_dtoa_r+0x65c>)
 800ed82:	2000      	movs	r0, #0
 800ed84:	f7f1 fd6a 	bl	800085c <__aeabi_ddiv>
 800ed88:	ec53 2b18 	vmov	r2, r3, d8
 800ed8c:	f7f1 fa84 	bl	8000298 <__aeabi_dsub>
 800ed90:	9d00      	ldr	r5, [sp, #0]
 800ed92:	ec41 0b18 	vmov	d8, r0, r1
 800ed96:	4639      	mov	r1, r7
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f7f1 fee5 	bl	8000b68 <__aeabi_d2iz>
 800ed9e:	900c      	str	r0, [sp, #48]	; 0x30
 800eda0:	f7f1 fbc8 	bl	8000534 <__aeabi_i2d>
 800eda4:	4602      	mov	r2, r0
 800eda6:	460b      	mov	r3, r1
 800eda8:	4630      	mov	r0, r6
 800edaa:	4639      	mov	r1, r7
 800edac:	f7f1 fa74 	bl	8000298 <__aeabi_dsub>
 800edb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edb2:	3330      	adds	r3, #48	; 0x30
 800edb4:	f805 3b01 	strb.w	r3, [r5], #1
 800edb8:	ec53 2b18 	vmov	r2, r3, d8
 800edbc:	4606      	mov	r6, r0
 800edbe:	460f      	mov	r7, r1
 800edc0:	f7f1 fe94 	bl	8000aec <__aeabi_dcmplt>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d165      	bne.n	800ee94 <_dtoa_r+0x63c>
 800edc8:	4632      	mov	r2, r6
 800edca:	463b      	mov	r3, r7
 800edcc:	4935      	ldr	r1, [pc, #212]	; (800eea4 <_dtoa_r+0x64c>)
 800edce:	2000      	movs	r0, #0
 800edd0:	f7f1 fa62 	bl	8000298 <__aeabi_dsub>
 800edd4:	ec53 2b18 	vmov	r2, r3, d8
 800edd8:	f7f1 fe88 	bl	8000aec <__aeabi_dcmplt>
 800eddc:	2800      	cmp	r0, #0
 800edde:	f040 80b9 	bne.w	800ef54 <_dtoa_r+0x6fc>
 800ede2:	9b02      	ldr	r3, [sp, #8]
 800ede4:	429d      	cmp	r5, r3
 800ede6:	f43f af75 	beq.w	800ecd4 <_dtoa_r+0x47c>
 800edea:	4b2f      	ldr	r3, [pc, #188]	; (800eea8 <_dtoa_r+0x650>)
 800edec:	ec51 0b18 	vmov	r0, r1, d8
 800edf0:	2200      	movs	r2, #0
 800edf2:	f7f1 fc09 	bl	8000608 <__aeabi_dmul>
 800edf6:	4b2c      	ldr	r3, [pc, #176]	; (800eea8 <_dtoa_r+0x650>)
 800edf8:	ec41 0b18 	vmov	d8, r0, r1
 800edfc:	2200      	movs	r2, #0
 800edfe:	4630      	mov	r0, r6
 800ee00:	4639      	mov	r1, r7
 800ee02:	f7f1 fc01 	bl	8000608 <__aeabi_dmul>
 800ee06:	4606      	mov	r6, r0
 800ee08:	460f      	mov	r7, r1
 800ee0a:	e7c4      	b.n	800ed96 <_dtoa_r+0x53e>
 800ee0c:	ec51 0b17 	vmov	r0, r1, d7
 800ee10:	f7f1 fbfa 	bl	8000608 <__aeabi_dmul>
 800ee14:	9b02      	ldr	r3, [sp, #8]
 800ee16:	9d00      	ldr	r5, [sp, #0]
 800ee18:	930c      	str	r3, [sp, #48]	; 0x30
 800ee1a:	ec41 0b18 	vmov	d8, r0, r1
 800ee1e:	4639      	mov	r1, r7
 800ee20:	4630      	mov	r0, r6
 800ee22:	f7f1 fea1 	bl	8000b68 <__aeabi_d2iz>
 800ee26:	9011      	str	r0, [sp, #68]	; 0x44
 800ee28:	f7f1 fb84 	bl	8000534 <__aeabi_i2d>
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	460b      	mov	r3, r1
 800ee30:	4630      	mov	r0, r6
 800ee32:	4639      	mov	r1, r7
 800ee34:	f7f1 fa30 	bl	8000298 <__aeabi_dsub>
 800ee38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee3a:	3330      	adds	r3, #48	; 0x30
 800ee3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ee40:	9b02      	ldr	r3, [sp, #8]
 800ee42:	429d      	cmp	r5, r3
 800ee44:	4606      	mov	r6, r0
 800ee46:	460f      	mov	r7, r1
 800ee48:	f04f 0200 	mov.w	r2, #0
 800ee4c:	d134      	bne.n	800eeb8 <_dtoa_r+0x660>
 800ee4e:	4b19      	ldr	r3, [pc, #100]	; (800eeb4 <_dtoa_r+0x65c>)
 800ee50:	ec51 0b18 	vmov	r0, r1, d8
 800ee54:	f7f1 fa22 	bl	800029c <__adddf3>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	4639      	mov	r1, r7
 800ee60:	f7f1 fe62 	bl	8000b28 <__aeabi_dcmpgt>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d175      	bne.n	800ef54 <_dtoa_r+0x6fc>
 800ee68:	ec53 2b18 	vmov	r2, r3, d8
 800ee6c:	4911      	ldr	r1, [pc, #68]	; (800eeb4 <_dtoa_r+0x65c>)
 800ee6e:	2000      	movs	r0, #0
 800ee70:	f7f1 fa12 	bl	8000298 <__aeabi_dsub>
 800ee74:	4602      	mov	r2, r0
 800ee76:	460b      	mov	r3, r1
 800ee78:	4630      	mov	r0, r6
 800ee7a:	4639      	mov	r1, r7
 800ee7c:	f7f1 fe36 	bl	8000aec <__aeabi_dcmplt>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	f43f af27 	beq.w	800ecd4 <_dtoa_r+0x47c>
 800ee86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee88:	1e6b      	subs	r3, r5, #1
 800ee8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ee8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee90:	2b30      	cmp	r3, #48	; 0x30
 800ee92:	d0f8      	beq.n	800ee86 <_dtoa_r+0x62e>
 800ee94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ee98:	e04a      	b.n	800ef30 <_dtoa_r+0x6d8>
 800ee9a:	bf00      	nop
 800ee9c:	08010de8 	.word	0x08010de8
 800eea0:	08010dc0 	.word	0x08010dc0
 800eea4:	3ff00000 	.word	0x3ff00000
 800eea8:	40240000 	.word	0x40240000
 800eeac:	401c0000 	.word	0x401c0000
 800eeb0:	40140000 	.word	0x40140000
 800eeb4:	3fe00000 	.word	0x3fe00000
 800eeb8:	4baf      	ldr	r3, [pc, #700]	; (800f178 <_dtoa_r+0x920>)
 800eeba:	f7f1 fba5 	bl	8000608 <__aeabi_dmul>
 800eebe:	4606      	mov	r6, r0
 800eec0:	460f      	mov	r7, r1
 800eec2:	e7ac      	b.n	800ee1e <_dtoa_r+0x5c6>
 800eec4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eec8:	9d00      	ldr	r5, [sp, #0]
 800eeca:	4642      	mov	r2, r8
 800eecc:	464b      	mov	r3, r9
 800eece:	4630      	mov	r0, r6
 800eed0:	4639      	mov	r1, r7
 800eed2:	f7f1 fcc3 	bl	800085c <__aeabi_ddiv>
 800eed6:	f7f1 fe47 	bl	8000b68 <__aeabi_d2iz>
 800eeda:	9002      	str	r0, [sp, #8]
 800eedc:	f7f1 fb2a 	bl	8000534 <__aeabi_i2d>
 800eee0:	4642      	mov	r2, r8
 800eee2:	464b      	mov	r3, r9
 800eee4:	f7f1 fb90 	bl	8000608 <__aeabi_dmul>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	4630      	mov	r0, r6
 800eeee:	4639      	mov	r1, r7
 800eef0:	f7f1 f9d2 	bl	8000298 <__aeabi_dsub>
 800eef4:	9e02      	ldr	r6, [sp, #8]
 800eef6:	9f01      	ldr	r7, [sp, #4]
 800eef8:	3630      	adds	r6, #48	; 0x30
 800eefa:	f805 6b01 	strb.w	r6, [r5], #1
 800eefe:	9e00      	ldr	r6, [sp, #0]
 800ef00:	1bae      	subs	r6, r5, r6
 800ef02:	42b7      	cmp	r7, r6
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	d137      	bne.n	800ef7a <_dtoa_r+0x722>
 800ef0a:	f7f1 f9c7 	bl	800029c <__adddf3>
 800ef0e:	4642      	mov	r2, r8
 800ef10:	464b      	mov	r3, r9
 800ef12:	4606      	mov	r6, r0
 800ef14:	460f      	mov	r7, r1
 800ef16:	f7f1 fe07 	bl	8000b28 <__aeabi_dcmpgt>
 800ef1a:	b9c8      	cbnz	r0, 800ef50 <_dtoa_r+0x6f8>
 800ef1c:	4642      	mov	r2, r8
 800ef1e:	464b      	mov	r3, r9
 800ef20:	4630      	mov	r0, r6
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef28:	b110      	cbz	r0, 800ef30 <_dtoa_r+0x6d8>
 800ef2a:	9b02      	ldr	r3, [sp, #8]
 800ef2c:	07d9      	lsls	r1, r3, #31
 800ef2e:	d40f      	bmi.n	800ef50 <_dtoa_r+0x6f8>
 800ef30:	4620      	mov	r0, r4
 800ef32:	4659      	mov	r1, fp
 800ef34:	f000 fad6 	bl	800f4e4 <_Bfree>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	702b      	strb	r3, [r5, #0]
 800ef3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef3e:	f10a 0001 	add.w	r0, sl, #1
 800ef42:	6018      	str	r0, [r3, #0]
 800ef44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f43f acd8 	beq.w	800e8fc <_dtoa_r+0xa4>
 800ef4c:	601d      	str	r5, [r3, #0]
 800ef4e:	e4d5      	b.n	800e8fc <_dtoa_r+0xa4>
 800ef50:	f8cd a01c 	str.w	sl, [sp, #28]
 800ef54:	462b      	mov	r3, r5
 800ef56:	461d      	mov	r5, r3
 800ef58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef5c:	2a39      	cmp	r2, #57	; 0x39
 800ef5e:	d108      	bne.n	800ef72 <_dtoa_r+0x71a>
 800ef60:	9a00      	ldr	r2, [sp, #0]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d1f7      	bne.n	800ef56 <_dtoa_r+0x6fe>
 800ef66:	9a07      	ldr	r2, [sp, #28]
 800ef68:	9900      	ldr	r1, [sp, #0]
 800ef6a:	3201      	adds	r2, #1
 800ef6c:	9207      	str	r2, [sp, #28]
 800ef6e:	2230      	movs	r2, #48	; 0x30
 800ef70:	700a      	strb	r2, [r1, #0]
 800ef72:	781a      	ldrb	r2, [r3, #0]
 800ef74:	3201      	adds	r2, #1
 800ef76:	701a      	strb	r2, [r3, #0]
 800ef78:	e78c      	b.n	800ee94 <_dtoa_r+0x63c>
 800ef7a:	4b7f      	ldr	r3, [pc, #508]	; (800f178 <_dtoa_r+0x920>)
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f7f1 fb43 	bl	8000608 <__aeabi_dmul>
 800ef82:	2200      	movs	r2, #0
 800ef84:	2300      	movs	r3, #0
 800ef86:	4606      	mov	r6, r0
 800ef88:	460f      	mov	r7, r1
 800ef8a:	f7f1 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d09b      	beq.n	800eeca <_dtoa_r+0x672>
 800ef92:	e7cd      	b.n	800ef30 <_dtoa_r+0x6d8>
 800ef94:	9a08      	ldr	r2, [sp, #32]
 800ef96:	2a00      	cmp	r2, #0
 800ef98:	f000 80c4 	beq.w	800f124 <_dtoa_r+0x8cc>
 800ef9c:	9a05      	ldr	r2, [sp, #20]
 800ef9e:	2a01      	cmp	r2, #1
 800efa0:	f300 80a8 	bgt.w	800f0f4 <_dtoa_r+0x89c>
 800efa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efa6:	2a00      	cmp	r2, #0
 800efa8:	f000 80a0 	beq.w	800f0ec <_dtoa_r+0x894>
 800efac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800efb0:	9e06      	ldr	r6, [sp, #24]
 800efb2:	4645      	mov	r5, r8
 800efb4:	9a04      	ldr	r2, [sp, #16]
 800efb6:	2101      	movs	r1, #1
 800efb8:	441a      	add	r2, r3
 800efba:	4620      	mov	r0, r4
 800efbc:	4498      	add	r8, r3
 800efbe:	9204      	str	r2, [sp, #16]
 800efc0:	f000 fb4c 	bl	800f65c <__i2b>
 800efc4:	4607      	mov	r7, r0
 800efc6:	2d00      	cmp	r5, #0
 800efc8:	dd0b      	ble.n	800efe2 <_dtoa_r+0x78a>
 800efca:	9b04      	ldr	r3, [sp, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	dd08      	ble.n	800efe2 <_dtoa_r+0x78a>
 800efd0:	42ab      	cmp	r3, r5
 800efd2:	9a04      	ldr	r2, [sp, #16]
 800efd4:	bfa8      	it	ge
 800efd6:	462b      	movge	r3, r5
 800efd8:	eba8 0803 	sub.w	r8, r8, r3
 800efdc:	1aed      	subs	r5, r5, r3
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	9304      	str	r3, [sp, #16]
 800efe2:	9b06      	ldr	r3, [sp, #24]
 800efe4:	b1fb      	cbz	r3, 800f026 <_dtoa_r+0x7ce>
 800efe6:	9b08      	ldr	r3, [sp, #32]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 809f 	beq.w	800f12c <_dtoa_r+0x8d4>
 800efee:	2e00      	cmp	r6, #0
 800eff0:	dd11      	ble.n	800f016 <_dtoa_r+0x7be>
 800eff2:	4639      	mov	r1, r7
 800eff4:	4632      	mov	r2, r6
 800eff6:	4620      	mov	r0, r4
 800eff8:	f000 fbec 	bl	800f7d4 <__pow5mult>
 800effc:	465a      	mov	r2, fp
 800effe:	4601      	mov	r1, r0
 800f000:	4607      	mov	r7, r0
 800f002:	4620      	mov	r0, r4
 800f004:	f000 fb40 	bl	800f688 <__multiply>
 800f008:	4659      	mov	r1, fp
 800f00a:	9007      	str	r0, [sp, #28]
 800f00c:	4620      	mov	r0, r4
 800f00e:	f000 fa69 	bl	800f4e4 <_Bfree>
 800f012:	9b07      	ldr	r3, [sp, #28]
 800f014:	469b      	mov	fp, r3
 800f016:	9b06      	ldr	r3, [sp, #24]
 800f018:	1b9a      	subs	r2, r3, r6
 800f01a:	d004      	beq.n	800f026 <_dtoa_r+0x7ce>
 800f01c:	4659      	mov	r1, fp
 800f01e:	4620      	mov	r0, r4
 800f020:	f000 fbd8 	bl	800f7d4 <__pow5mult>
 800f024:	4683      	mov	fp, r0
 800f026:	2101      	movs	r1, #1
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 fb17 	bl	800f65c <__i2b>
 800f02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f030:	2b00      	cmp	r3, #0
 800f032:	4606      	mov	r6, r0
 800f034:	dd7c      	ble.n	800f130 <_dtoa_r+0x8d8>
 800f036:	461a      	mov	r2, r3
 800f038:	4601      	mov	r1, r0
 800f03a:	4620      	mov	r0, r4
 800f03c:	f000 fbca 	bl	800f7d4 <__pow5mult>
 800f040:	9b05      	ldr	r3, [sp, #20]
 800f042:	2b01      	cmp	r3, #1
 800f044:	4606      	mov	r6, r0
 800f046:	dd76      	ble.n	800f136 <_dtoa_r+0x8de>
 800f048:	2300      	movs	r3, #0
 800f04a:	9306      	str	r3, [sp, #24]
 800f04c:	6933      	ldr	r3, [r6, #16]
 800f04e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f052:	6918      	ldr	r0, [r3, #16]
 800f054:	f000 fab2 	bl	800f5bc <__hi0bits>
 800f058:	f1c0 0020 	rsb	r0, r0, #32
 800f05c:	9b04      	ldr	r3, [sp, #16]
 800f05e:	4418      	add	r0, r3
 800f060:	f010 001f 	ands.w	r0, r0, #31
 800f064:	f000 8086 	beq.w	800f174 <_dtoa_r+0x91c>
 800f068:	f1c0 0320 	rsb	r3, r0, #32
 800f06c:	2b04      	cmp	r3, #4
 800f06e:	dd7f      	ble.n	800f170 <_dtoa_r+0x918>
 800f070:	f1c0 001c 	rsb	r0, r0, #28
 800f074:	9b04      	ldr	r3, [sp, #16]
 800f076:	4403      	add	r3, r0
 800f078:	4480      	add	r8, r0
 800f07a:	4405      	add	r5, r0
 800f07c:	9304      	str	r3, [sp, #16]
 800f07e:	f1b8 0f00 	cmp.w	r8, #0
 800f082:	dd05      	ble.n	800f090 <_dtoa_r+0x838>
 800f084:	4659      	mov	r1, fp
 800f086:	4642      	mov	r2, r8
 800f088:	4620      	mov	r0, r4
 800f08a:	f000 fbfd 	bl	800f888 <__lshift>
 800f08e:	4683      	mov	fp, r0
 800f090:	9b04      	ldr	r3, [sp, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	dd05      	ble.n	800f0a2 <_dtoa_r+0x84a>
 800f096:	4631      	mov	r1, r6
 800f098:	461a      	mov	r2, r3
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 fbf4 	bl	800f888 <__lshift>
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d069      	beq.n	800f17c <_dtoa_r+0x924>
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	4658      	mov	r0, fp
 800f0ac:	f000 fc58 	bl	800f960 <__mcmp>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	da63      	bge.n	800f17c <_dtoa_r+0x924>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4659      	mov	r1, fp
 800f0b8:	220a      	movs	r2, #10
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f000 fa34 	bl	800f528 <__multadd>
 800f0c0:	9b08      	ldr	r3, [sp, #32]
 800f0c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0c6:	4683      	mov	fp, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 818f 	beq.w	800f3ec <_dtoa_r+0xb94>
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	220a      	movs	r2, #10
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f000 fa27 	bl	800f528 <__multadd>
 800f0da:	f1b9 0f00 	cmp.w	r9, #0
 800f0de:	4607      	mov	r7, r0
 800f0e0:	f300 808e 	bgt.w	800f200 <_dtoa_r+0x9a8>
 800f0e4:	9b05      	ldr	r3, [sp, #20]
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	dc50      	bgt.n	800f18c <_dtoa_r+0x934>
 800f0ea:	e089      	b.n	800f200 <_dtoa_r+0x9a8>
 800f0ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f0f2:	e75d      	b.n	800efb0 <_dtoa_r+0x758>
 800f0f4:	9b01      	ldr	r3, [sp, #4]
 800f0f6:	1e5e      	subs	r6, r3, #1
 800f0f8:	9b06      	ldr	r3, [sp, #24]
 800f0fa:	42b3      	cmp	r3, r6
 800f0fc:	bfbf      	itttt	lt
 800f0fe:	9b06      	ldrlt	r3, [sp, #24]
 800f100:	9606      	strlt	r6, [sp, #24]
 800f102:	1af2      	sublt	r2, r6, r3
 800f104:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f106:	bfb6      	itet	lt
 800f108:	189b      	addlt	r3, r3, r2
 800f10a:	1b9e      	subge	r6, r3, r6
 800f10c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f10e:	9b01      	ldr	r3, [sp, #4]
 800f110:	bfb8      	it	lt
 800f112:	2600      	movlt	r6, #0
 800f114:	2b00      	cmp	r3, #0
 800f116:	bfb5      	itete	lt
 800f118:	eba8 0503 	sublt.w	r5, r8, r3
 800f11c:	9b01      	ldrge	r3, [sp, #4]
 800f11e:	2300      	movlt	r3, #0
 800f120:	4645      	movge	r5, r8
 800f122:	e747      	b.n	800efb4 <_dtoa_r+0x75c>
 800f124:	9e06      	ldr	r6, [sp, #24]
 800f126:	9f08      	ldr	r7, [sp, #32]
 800f128:	4645      	mov	r5, r8
 800f12a:	e74c      	b.n	800efc6 <_dtoa_r+0x76e>
 800f12c:	9a06      	ldr	r2, [sp, #24]
 800f12e:	e775      	b.n	800f01c <_dtoa_r+0x7c4>
 800f130:	9b05      	ldr	r3, [sp, #20]
 800f132:	2b01      	cmp	r3, #1
 800f134:	dc18      	bgt.n	800f168 <_dtoa_r+0x910>
 800f136:	9b02      	ldr	r3, [sp, #8]
 800f138:	b9b3      	cbnz	r3, 800f168 <_dtoa_r+0x910>
 800f13a:	9b03      	ldr	r3, [sp, #12]
 800f13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f140:	b9a3      	cbnz	r3, 800f16c <_dtoa_r+0x914>
 800f142:	9b03      	ldr	r3, [sp, #12]
 800f144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f148:	0d1b      	lsrs	r3, r3, #20
 800f14a:	051b      	lsls	r3, r3, #20
 800f14c:	b12b      	cbz	r3, 800f15a <_dtoa_r+0x902>
 800f14e:	9b04      	ldr	r3, [sp, #16]
 800f150:	3301      	adds	r3, #1
 800f152:	9304      	str	r3, [sp, #16]
 800f154:	f108 0801 	add.w	r8, r8, #1
 800f158:	2301      	movs	r3, #1
 800f15a:	9306      	str	r3, [sp, #24]
 800f15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f47f af74 	bne.w	800f04c <_dtoa_r+0x7f4>
 800f164:	2001      	movs	r0, #1
 800f166:	e779      	b.n	800f05c <_dtoa_r+0x804>
 800f168:	2300      	movs	r3, #0
 800f16a:	e7f6      	b.n	800f15a <_dtoa_r+0x902>
 800f16c:	9b02      	ldr	r3, [sp, #8]
 800f16e:	e7f4      	b.n	800f15a <_dtoa_r+0x902>
 800f170:	d085      	beq.n	800f07e <_dtoa_r+0x826>
 800f172:	4618      	mov	r0, r3
 800f174:	301c      	adds	r0, #28
 800f176:	e77d      	b.n	800f074 <_dtoa_r+0x81c>
 800f178:	40240000 	.word	0x40240000
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	dc38      	bgt.n	800f1f4 <_dtoa_r+0x99c>
 800f182:	9b05      	ldr	r3, [sp, #20]
 800f184:	2b02      	cmp	r3, #2
 800f186:	dd35      	ble.n	800f1f4 <_dtoa_r+0x99c>
 800f188:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f18c:	f1b9 0f00 	cmp.w	r9, #0
 800f190:	d10d      	bne.n	800f1ae <_dtoa_r+0x956>
 800f192:	4631      	mov	r1, r6
 800f194:	464b      	mov	r3, r9
 800f196:	2205      	movs	r2, #5
 800f198:	4620      	mov	r0, r4
 800f19a:	f000 f9c5 	bl	800f528 <__multadd>
 800f19e:	4601      	mov	r1, r0
 800f1a0:	4606      	mov	r6, r0
 800f1a2:	4658      	mov	r0, fp
 800f1a4:	f000 fbdc 	bl	800f960 <__mcmp>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	f73f adbd 	bgt.w	800ed28 <_dtoa_r+0x4d0>
 800f1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b0:	9d00      	ldr	r5, [sp, #0]
 800f1b2:	ea6f 0a03 	mvn.w	sl, r3
 800f1b6:	f04f 0800 	mov.w	r8, #0
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	4620      	mov	r0, r4
 800f1be:	f000 f991 	bl	800f4e4 <_Bfree>
 800f1c2:	2f00      	cmp	r7, #0
 800f1c4:	f43f aeb4 	beq.w	800ef30 <_dtoa_r+0x6d8>
 800f1c8:	f1b8 0f00 	cmp.w	r8, #0
 800f1cc:	d005      	beq.n	800f1da <_dtoa_r+0x982>
 800f1ce:	45b8      	cmp	r8, r7
 800f1d0:	d003      	beq.n	800f1da <_dtoa_r+0x982>
 800f1d2:	4641      	mov	r1, r8
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f000 f985 	bl	800f4e4 <_Bfree>
 800f1da:	4639      	mov	r1, r7
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 f981 	bl	800f4e4 <_Bfree>
 800f1e2:	e6a5      	b.n	800ef30 <_dtoa_r+0x6d8>
 800f1e4:	2600      	movs	r6, #0
 800f1e6:	4637      	mov	r7, r6
 800f1e8:	e7e1      	b.n	800f1ae <_dtoa_r+0x956>
 800f1ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f1ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f1f0:	4637      	mov	r7, r6
 800f1f2:	e599      	b.n	800ed28 <_dtoa_r+0x4d0>
 800f1f4:	9b08      	ldr	r3, [sp, #32]
 800f1f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f000 80fd 	beq.w	800f3fa <_dtoa_r+0xba2>
 800f200:	2d00      	cmp	r5, #0
 800f202:	dd05      	ble.n	800f210 <_dtoa_r+0x9b8>
 800f204:	4639      	mov	r1, r7
 800f206:	462a      	mov	r2, r5
 800f208:	4620      	mov	r0, r4
 800f20a:	f000 fb3d 	bl	800f888 <__lshift>
 800f20e:	4607      	mov	r7, r0
 800f210:	9b06      	ldr	r3, [sp, #24]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d05c      	beq.n	800f2d0 <_dtoa_r+0xa78>
 800f216:	6879      	ldr	r1, [r7, #4]
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 f923 	bl	800f464 <_Balloc>
 800f21e:	4605      	mov	r5, r0
 800f220:	b928      	cbnz	r0, 800f22e <_dtoa_r+0x9d6>
 800f222:	4b80      	ldr	r3, [pc, #512]	; (800f424 <_dtoa_r+0xbcc>)
 800f224:	4602      	mov	r2, r0
 800f226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f22a:	f7ff bb2e 	b.w	800e88a <_dtoa_r+0x32>
 800f22e:	693a      	ldr	r2, [r7, #16]
 800f230:	3202      	adds	r2, #2
 800f232:	0092      	lsls	r2, r2, #2
 800f234:	f107 010c 	add.w	r1, r7, #12
 800f238:	300c      	adds	r0, #12
 800f23a:	f000 f905 	bl	800f448 <memcpy>
 800f23e:	2201      	movs	r2, #1
 800f240:	4629      	mov	r1, r5
 800f242:	4620      	mov	r0, r4
 800f244:	f000 fb20 	bl	800f888 <__lshift>
 800f248:	9b00      	ldr	r3, [sp, #0]
 800f24a:	3301      	adds	r3, #1
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	9b00      	ldr	r3, [sp, #0]
 800f250:	444b      	add	r3, r9
 800f252:	9307      	str	r3, [sp, #28]
 800f254:	9b02      	ldr	r3, [sp, #8]
 800f256:	f003 0301 	and.w	r3, r3, #1
 800f25a:	46b8      	mov	r8, r7
 800f25c:	9306      	str	r3, [sp, #24]
 800f25e:	4607      	mov	r7, r0
 800f260:	9b01      	ldr	r3, [sp, #4]
 800f262:	4631      	mov	r1, r6
 800f264:	3b01      	subs	r3, #1
 800f266:	4658      	mov	r0, fp
 800f268:	9302      	str	r3, [sp, #8]
 800f26a:	f7ff fa69 	bl	800e740 <quorem>
 800f26e:	4603      	mov	r3, r0
 800f270:	3330      	adds	r3, #48	; 0x30
 800f272:	9004      	str	r0, [sp, #16]
 800f274:	4641      	mov	r1, r8
 800f276:	4658      	mov	r0, fp
 800f278:	9308      	str	r3, [sp, #32]
 800f27a:	f000 fb71 	bl	800f960 <__mcmp>
 800f27e:	463a      	mov	r2, r7
 800f280:	4681      	mov	r9, r0
 800f282:	4631      	mov	r1, r6
 800f284:	4620      	mov	r0, r4
 800f286:	f000 fb87 	bl	800f998 <__mdiff>
 800f28a:	68c2      	ldr	r2, [r0, #12]
 800f28c:	9b08      	ldr	r3, [sp, #32]
 800f28e:	4605      	mov	r5, r0
 800f290:	bb02      	cbnz	r2, 800f2d4 <_dtoa_r+0xa7c>
 800f292:	4601      	mov	r1, r0
 800f294:	4658      	mov	r0, fp
 800f296:	f000 fb63 	bl	800f960 <__mcmp>
 800f29a:	9b08      	ldr	r3, [sp, #32]
 800f29c:	4602      	mov	r2, r0
 800f29e:	4629      	mov	r1, r5
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f2a6:	f000 f91d 	bl	800f4e4 <_Bfree>
 800f2aa:	9b05      	ldr	r3, [sp, #20]
 800f2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2ae:	9d01      	ldr	r5, [sp, #4]
 800f2b0:	ea43 0102 	orr.w	r1, r3, r2
 800f2b4:	9b06      	ldr	r3, [sp, #24]
 800f2b6:	430b      	orrs	r3, r1
 800f2b8:	9b08      	ldr	r3, [sp, #32]
 800f2ba:	d10d      	bne.n	800f2d8 <_dtoa_r+0xa80>
 800f2bc:	2b39      	cmp	r3, #57	; 0x39
 800f2be:	d029      	beq.n	800f314 <_dtoa_r+0xabc>
 800f2c0:	f1b9 0f00 	cmp.w	r9, #0
 800f2c4:	dd01      	ble.n	800f2ca <_dtoa_r+0xa72>
 800f2c6:	9b04      	ldr	r3, [sp, #16]
 800f2c8:	3331      	adds	r3, #49	; 0x31
 800f2ca:	9a02      	ldr	r2, [sp, #8]
 800f2cc:	7013      	strb	r3, [r2, #0]
 800f2ce:	e774      	b.n	800f1ba <_dtoa_r+0x962>
 800f2d0:	4638      	mov	r0, r7
 800f2d2:	e7b9      	b.n	800f248 <_dtoa_r+0x9f0>
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	e7e2      	b.n	800f29e <_dtoa_r+0xa46>
 800f2d8:	f1b9 0f00 	cmp.w	r9, #0
 800f2dc:	db06      	blt.n	800f2ec <_dtoa_r+0xa94>
 800f2de:	9905      	ldr	r1, [sp, #20]
 800f2e0:	ea41 0909 	orr.w	r9, r1, r9
 800f2e4:	9906      	ldr	r1, [sp, #24]
 800f2e6:	ea59 0101 	orrs.w	r1, r9, r1
 800f2ea:	d120      	bne.n	800f32e <_dtoa_r+0xad6>
 800f2ec:	2a00      	cmp	r2, #0
 800f2ee:	ddec      	ble.n	800f2ca <_dtoa_r+0xa72>
 800f2f0:	4659      	mov	r1, fp
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	9301      	str	r3, [sp, #4]
 800f2f8:	f000 fac6 	bl	800f888 <__lshift>
 800f2fc:	4631      	mov	r1, r6
 800f2fe:	4683      	mov	fp, r0
 800f300:	f000 fb2e 	bl	800f960 <__mcmp>
 800f304:	2800      	cmp	r0, #0
 800f306:	9b01      	ldr	r3, [sp, #4]
 800f308:	dc02      	bgt.n	800f310 <_dtoa_r+0xab8>
 800f30a:	d1de      	bne.n	800f2ca <_dtoa_r+0xa72>
 800f30c:	07da      	lsls	r2, r3, #31
 800f30e:	d5dc      	bpl.n	800f2ca <_dtoa_r+0xa72>
 800f310:	2b39      	cmp	r3, #57	; 0x39
 800f312:	d1d8      	bne.n	800f2c6 <_dtoa_r+0xa6e>
 800f314:	9a02      	ldr	r2, [sp, #8]
 800f316:	2339      	movs	r3, #57	; 0x39
 800f318:	7013      	strb	r3, [r2, #0]
 800f31a:	462b      	mov	r3, r5
 800f31c:	461d      	mov	r5, r3
 800f31e:	3b01      	subs	r3, #1
 800f320:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f324:	2a39      	cmp	r2, #57	; 0x39
 800f326:	d050      	beq.n	800f3ca <_dtoa_r+0xb72>
 800f328:	3201      	adds	r2, #1
 800f32a:	701a      	strb	r2, [r3, #0]
 800f32c:	e745      	b.n	800f1ba <_dtoa_r+0x962>
 800f32e:	2a00      	cmp	r2, #0
 800f330:	dd03      	ble.n	800f33a <_dtoa_r+0xae2>
 800f332:	2b39      	cmp	r3, #57	; 0x39
 800f334:	d0ee      	beq.n	800f314 <_dtoa_r+0xabc>
 800f336:	3301      	adds	r3, #1
 800f338:	e7c7      	b.n	800f2ca <_dtoa_r+0xa72>
 800f33a:	9a01      	ldr	r2, [sp, #4]
 800f33c:	9907      	ldr	r1, [sp, #28]
 800f33e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f342:	428a      	cmp	r2, r1
 800f344:	d02a      	beq.n	800f39c <_dtoa_r+0xb44>
 800f346:	4659      	mov	r1, fp
 800f348:	2300      	movs	r3, #0
 800f34a:	220a      	movs	r2, #10
 800f34c:	4620      	mov	r0, r4
 800f34e:	f000 f8eb 	bl	800f528 <__multadd>
 800f352:	45b8      	cmp	r8, r7
 800f354:	4683      	mov	fp, r0
 800f356:	f04f 0300 	mov.w	r3, #0
 800f35a:	f04f 020a 	mov.w	r2, #10
 800f35e:	4641      	mov	r1, r8
 800f360:	4620      	mov	r0, r4
 800f362:	d107      	bne.n	800f374 <_dtoa_r+0xb1c>
 800f364:	f000 f8e0 	bl	800f528 <__multadd>
 800f368:	4680      	mov	r8, r0
 800f36a:	4607      	mov	r7, r0
 800f36c:	9b01      	ldr	r3, [sp, #4]
 800f36e:	3301      	adds	r3, #1
 800f370:	9301      	str	r3, [sp, #4]
 800f372:	e775      	b.n	800f260 <_dtoa_r+0xa08>
 800f374:	f000 f8d8 	bl	800f528 <__multadd>
 800f378:	4639      	mov	r1, r7
 800f37a:	4680      	mov	r8, r0
 800f37c:	2300      	movs	r3, #0
 800f37e:	220a      	movs	r2, #10
 800f380:	4620      	mov	r0, r4
 800f382:	f000 f8d1 	bl	800f528 <__multadd>
 800f386:	4607      	mov	r7, r0
 800f388:	e7f0      	b.n	800f36c <_dtoa_r+0xb14>
 800f38a:	f1b9 0f00 	cmp.w	r9, #0
 800f38e:	9a00      	ldr	r2, [sp, #0]
 800f390:	bfcc      	ite	gt
 800f392:	464d      	movgt	r5, r9
 800f394:	2501      	movle	r5, #1
 800f396:	4415      	add	r5, r2
 800f398:	f04f 0800 	mov.w	r8, #0
 800f39c:	4659      	mov	r1, fp
 800f39e:	2201      	movs	r2, #1
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	9301      	str	r3, [sp, #4]
 800f3a4:	f000 fa70 	bl	800f888 <__lshift>
 800f3a8:	4631      	mov	r1, r6
 800f3aa:	4683      	mov	fp, r0
 800f3ac:	f000 fad8 	bl	800f960 <__mcmp>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	dcb2      	bgt.n	800f31a <_dtoa_r+0xac2>
 800f3b4:	d102      	bne.n	800f3bc <_dtoa_r+0xb64>
 800f3b6:	9b01      	ldr	r3, [sp, #4]
 800f3b8:	07db      	lsls	r3, r3, #31
 800f3ba:	d4ae      	bmi.n	800f31a <_dtoa_r+0xac2>
 800f3bc:	462b      	mov	r3, r5
 800f3be:	461d      	mov	r5, r3
 800f3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3c4:	2a30      	cmp	r2, #48	; 0x30
 800f3c6:	d0fa      	beq.n	800f3be <_dtoa_r+0xb66>
 800f3c8:	e6f7      	b.n	800f1ba <_dtoa_r+0x962>
 800f3ca:	9a00      	ldr	r2, [sp, #0]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d1a5      	bne.n	800f31c <_dtoa_r+0xac4>
 800f3d0:	f10a 0a01 	add.w	sl, sl, #1
 800f3d4:	2331      	movs	r3, #49	; 0x31
 800f3d6:	e779      	b.n	800f2cc <_dtoa_r+0xa74>
 800f3d8:	4b13      	ldr	r3, [pc, #76]	; (800f428 <_dtoa_r+0xbd0>)
 800f3da:	f7ff baaf 	b.w	800e93c <_dtoa_r+0xe4>
 800f3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f47f aa86 	bne.w	800e8f2 <_dtoa_r+0x9a>
 800f3e6:	4b11      	ldr	r3, [pc, #68]	; (800f42c <_dtoa_r+0xbd4>)
 800f3e8:	f7ff baa8 	b.w	800e93c <_dtoa_r+0xe4>
 800f3ec:	f1b9 0f00 	cmp.w	r9, #0
 800f3f0:	dc03      	bgt.n	800f3fa <_dtoa_r+0xba2>
 800f3f2:	9b05      	ldr	r3, [sp, #20]
 800f3f4:	2b02      	cmp	r3, #2
 800f3f6:	f73f aec9 	bgt.w	800f18c <_dtoa_r+0x934>
 800f3fa:	9d00      	ldr	r5, [sp, #0]
 800f3fc:	4631      	mov	r1, r6
 800f3fe:	4658      	mov	r0, fp
 800f400:	f7ff f99e 	bl	800e740 <quorem>
 800f404:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f408:	f805 3b01 	strb.w	r3, [r5], #1
 800f40c:	9a00      	ldr	r2, [sp, #0]
 800f40e:	1aaa      	subs	r2, r5, r2
 800f410:	4591      	cmp	r9, r2
 800f412:	ddba      	ble.n	800f38a <_dtoa_r+0xb32>
 800f414:	4659      	mov	r1, fp
 800f416:	2300      	movs	r3, #0
 800f418:	220a      	movs	r2, #10
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 f884 	bl	800f528 <__multadd>
 800f420:	4683      	mov	fp, r0
 800f422:	e7eb      	b.n	800f3fc <_dtoa_r+0xba4>
 800f424:	08010d4f 	.word	0x08010d4f
 800f428:	08010ca8 	.word	0x08010ca8
 800f42c:	08010ccc 	.word	0x08010ccc

0800f430 <_localeconv_r>:
 800f430:	4800      	ldr	r0, [pc, #0]	; (800f434 <_localeconv_r+0x4>)
 800f432:	4770      	bx	lr
 800f434:	200002d4 	.word	0x200002d4

0800f438 <malloc>:
 800f438:	4b02      	ldr	r3, [pc, #8]	; (800f444 <malloc+0xc>)
 800f43a:	4601      	mov	r1, r0
 800f43c:	6818      	ldr	r0, [r3, #0]
 800f43e:	f000 bbef 	b.w	800fc20 <_malloc_r>
 800f442:	bf00      	nop
 800f444:	20000180 	.word	0x20000180

0800f448 <memcpy>:
 800f448:	440a      	add	r2, r1
 800f44a:	4291      	cmp	r1, r2
 800f44c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f450:	d100      	bne.n	800f454 <memcpy+0xc>
 800f452:	4770      	bx	lr
 800f454:	b510      	push	{r4, lr}
 800f456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f45a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f45e:	4291      	cmp	r1, r2
 800f460:	d1f9      	bne.n	800f456 <memcpy+0xe>
 800f462:	bd10      	pop	{r4, pc}

0800f464 <_Balloc>:
 800f464:	b570      	push	{r4, r5, r6, lr}
 800f466:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f468:	4604      	mov	r4, r0
 800f46a:	460d      	mov	r5, r1
 800f46c:	b976      	cbnz	r6, 800f48c <_Balloc+0x28>
 800f46e:	2010      	movs	r0, #16
 800f470:	f7ff ffe2 	bl	800f438 <malloc>
 800f474:	4602      	mov	r2, r0
 800f476:	6260      	str	r0, [r4, #36]	; 0x24
 800f478:	b920      	cbnz	r0, 800f484 <_Balloc+0x20>
 800f47a:	4b18      	ldr	r3, [pc, #96]	; (800f4dc <_Balloc+0x78>)
 800f47c:	4818      	ldr	r0, [pc, #96]	; (800f4e0 <_Balloc+0x7c>)
 800f47e:	2166      	movs	r1, #102	; 0x66
 800f480:	f000 fd94 	bl	800ffac <__assert_func>
 800f484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f488:	6006      	str	r6, [r0, #0]
 800f48a:	60c6      	str	r6, [r0, #12]
 800f48c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f48e:	68f3      	ldr	r3, [r6, #12]
 800f490:	b183      	cbz	r3, 800f4b4 <_Balloc+0x50>
 800f492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f49a:	b9b8      	cbnz	r0, 800f4cc <_Balloc+0x68>
 800f49c:	2101      	movs	r1, #1
 800f49e:	fa01 f605 	lsl.w	r6, r1, r5
 800f4a2:	1d72      	adds	r2, r6, #5
 800f4a4:	0092      	lsls	r2, r2, #2
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f000 fb5a 	bl	800fb60 <_calloc_r>
 800f4ac:	b160      	cbz	r0, 800f4c8 <_Balloc+0x64>
 800f4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4b2:	e00e      	b.n	800f4d2 <_Balloc+0x6e>
 800f4b4:	2221      	movs	r2, #33	; 0x21
 800f4b6:	2104      	movs	r1, #4
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f000 fb51 	bl	800fb60 <_calloc_r>
 800f4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4c0:	60f0      	str	r0, [r6, #12]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1e4      	bne.n	800f492 <_Balloc+0x2e>
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	bd70      	pop	{r4, r5, r6, pc}
 800f4cc:	6802      	ldr	r2, [r0, #0]
 800f4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4d8:	e7f7      	b.n	800f4ca <_Balloc+0x66>
 800f4da:	bf00      	nop
 800f4dc:	08010cd9 	.word	0x08010cd9
 800f4e0:	08010d60 	.word	0x08010d60

0800f4e4 <_Bfree>:
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	b976      	cbnz	r6, 800f50c <_Bfree+0x28>
 800f4ee:	2010      	movs	r0, #16
 800f4f0:	f7ff ffa2 	bl	800f438 <malloc>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	6268      	str	r0, [r5, #36]	; 0x24
 800f4f8:	b920      	cbnz	r0, 800f504 <_Bfree+0x20>
 800f4fa:	4b09      	ldr	r3, [pc, #36]	; (800f520 <_Bfree+0x3c>)
 800f4fc:	4809      	ldr	r0, [pc, #36]	; (800f524 <_Bfree+0x40>)
 800f4fe:	218a      	movs	r1, #138	; 0x8a
 800f500:	f000 fd54 	bl	800ffac <__assert_func>
 800f504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f508:	6006      	str	r6, [r0, #0]
 800f50a:	60c6      	str	r6, [r0, #12]
 800f50c:	b13c      	cbz	r4, 800f51e <_Bfree+0x3a>
 800f50e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f510:	6862      	ldr	r2, [r4, #4]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f518:	6021      	str	r1, [r4, #0]
 800f51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f51e:	bd70      	pop	{r4, r5, r6, pc}
 800f520:	08010cd9 	.word	0x08010cd9
 800f524:	08010d60 	.word	0x08010d60

0800f528 <__multadd>:
 800f528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52c:	690e      	ldr	r6, [r1, #16]
 800f52e:	4607      	mov	r7, r0
 800f530:	4698      	mov	r8, r3
 800f532:	460c      	mov	r4, r1
 800f534:	f101 0014 	add.w	r0, r1, #20
 800f538:	2300      	movs	r3, #0
 800f53a:	6805      	ldr	r5, [r0, #0]
 800f53c:	b2a9      	uxth	r1, r5
 800f53e:	fb02 8101 	mla	r1, r2, r1, r8
 800f542:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f546:	0c2d      	lsrs	r5, r5, #16
 800f548:	fb02 c505 	mla	r5, r2, r5, ip
 800f54c:	b289      	uxth	r1, r1
 800f54e:	3301      	adds	r3, #1
 800f550:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f554:	429e      	cmp	r6, r3
 800f556:	f840 1b04 	str.w	r1, [r0], #4
 800f55a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f55e:	dcec      	bgt.n	800f53a <__multadd+0x12>
 800f560:	f1b8 0f00 	cmp.w	r8, #0
 800f564:	d022      	beq.n	800f5ac <__multadd+0x84>
 800f566:	68a3      	ldr	r3, [r4, #8]
 800f568:	42b3      	cmp	r3, r6
 800f56a:	dc19      	bgt.n	800f5a0 <__multadd+0x78>
 800f56c:	6861      	ldr	r1, [r4, #4]
 800f56e:	4638      	mov	r0, r7
 800f570:	3101      	adds	r1, #1
 800f572:	f7ff ff77 	bl	800f464 <_Balloc>
 800f576:	4605      	mov	r5, r0
 800f578:	b928      	cbnz	r0, 800f586 <__multadd+0x5e>
 800f57a:	4602      	mov	r2, r0
 800f57c:	4b0d      	ldr	r3, [pc, #52]	; (800f5b4 <__multadd+0x8c>)
 800f57e:	480e      	ldr	r0, [pc, #56]	; (800f5b8 <__multadd+0x90>)
 800f580:	21b5      	movs	r1, #181	; 0xb5
 800f582:	f000 fd13 	bl	800ffac <__assert_func>
 800f586:	6922      	ldr	r2, [r4, #16]
 800f588:	3202      	adds	r2, #2
 800f58a:	f104 010c 	add.w	r1, r4, #12
 800f58e:	0092      	lsls	r2, r2, #2
 800f590:	300c      	adds	r0, #12
 800f592:	f7ff ff59 	bl	800f448 <memcpy>
 800f596:	4621      	mov	r1, r4
 800f598:	4638      	mov	r0, r7
 800f59a:	f7ff ffa3 	bl	800f4e4 <_Bfree>
 800f59e:	462c      	mov	r4, r5
 800f5a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f5a4:	3601      	adds	r6, #1
 800f5a6:	f8c3 8014 	str.w	r8, [r3, #20]
 800f5aa:	6126      	str	r6, [r4, #16]
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b2:	bf00      	nop
 800f5b4:	08010d4f 	.word	0x08010d4f
 800f5b8:	08010d60 	.word	0x08010d60

0800f5bc <__hi0bits>:
 800f5bc:	0c03      	lsrs	r3, r0, #16
 800f5be:	041b      	lsls	r3, r3, #16
 800f5c0:	b9d3      	cbnz	r3, 800f5f8 <__hi0bits+0x3c>
 800f5c2:	0400      	lsls	r0, r0, #16
 800f5c4:	2310      	movs	r3, #16
 800f5c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5ca:	bf04      	itt	eq
 800f5cc:	0200      	lsleq	r0, r0, #8
 800f5ce:	3308      	addeq	r3, #8
 800f5d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5d4:	bf04      	itt	eq
 800f5d6:	0100      	lsleq	r0, r0, #4
 800f5d8:	3304      	addeq	r3, #4
 800f5da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f5de:	bf04      	itt	eq
 800f5e0:	0080      	lsleq	r0, r0, #2
 800f5e2:	3302      	addeq	r3, #2
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	db05      	blt.n	800f5f4 <__hi0bits+0x38>
 800f5e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f5ec:	f103 0301 	add.w	r3, r3, #1
 800f5f0:	bf08      	it	eq
 800f5f2:	2320      	moveq	r3, #32
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	4770      	bx	lr
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	e7e4      	b.n	800f5c6 <__hi0bits+0xa>

0800f5fc <__lo0bits>:
 800f5fc:	6803      	ldr	r3, [r0, #0]
 800f5fe:	f013 0207 	ands.w	r2, r3, #7
 800f602:	4601      	mov	r1, r0
 800f604:	d00b      	beq.n	800f61e <__lo0bits+0x22>
 800f606:	07da      	lsls	r2, r3, #31
 800f608:	d424      	bmi.n	800f654 <__lo0bits+0x58>
 800f60a:	0798      	lsls	r0, r3, #30
 800f60c:	bf49      	itett	mi
 800f60e:	085b      	lsrmi	r3, r3, #1
 800f610:	089b      	lsrpl	r3, r3, #2
 800f612:	2001      	movmi	r0, #1
 800f614:	600b      	strmi	r3, [r1, #0]
 800f616:	bf5c      	itt	pl
 800f618:	600b      	strpl	r3, [r1, #0]
 800f61a:	2002      	movpl	r0, #2
 800f61c:	4770      	bx	lr
 800f61e:	b298      	uxth	r0, r3
 800f620:	b9b0      	cbnz	r0, 800f650 <__lo0bits+0x54>
 800f622:	0c1b      	lsrs	r3, r3, #16
 800f624:	2010      	movs	r0, #16
 800f626:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f62a:	bf04      	itt	eq
 800f62c:	0a1b      	lsreq	r3, r3, #8
 800f62e:	3008      	addeq	r0, #8
 800f630:	071a      	lsls	r2, r3, #28
 800f632:	bf04      	itt	eq
 800f634:	091b      	lsreq	r3, r3, #4
 800f636:	3004      	addeq	r0, #4
 800f638:	079a      	lsls	r2, r3, #30
 800f63a:	bf04      	itt	eq
 800f63c:	089b      	lsreq	r3, r3, #2
 800f63e:	3002      	addeq	r0, #2
 800f640:	07da      	lsls	r2, r3, #31
 800f642:	d403      	bmi.n	800f64c <__lo0bits+0x50>
 800f644:	085b      	lsrs	r3, r3, #1
 800f646:	f100 0001 	add.w	r0, r0, #1
 800f64a:	d005      	beq.n	800f658 <__lo0bits+0x5c>
 800f64c:	600b      	str	r3, [r1, #0]
 800f64e:	4770      	bx	lr
 800f650:	4610      	mov	r0, r2
 800f652:	e7e8      	b.n	800f626 <__lo0bits+0x2a>
 800f654:	2000      	movs	r0, #0
 800f656:	4770      	bx	lr
 800f658:	2020      	movs	r0, #32
 800f65a:	4770      	bx	lr

0800f65c <__i2b>:
 800f65c:	b510      	push	{r4, lr}
 800f65e:	460c      	mov	r4, r1
 800f660:	2101      	movs	r1, #1
 800f662:	f7ff feff 	bl	800f464 <_Balloc>
 800f666:	4602      	mov	r2, r0
 800f668:	b928      	cbnz	r0, 800f676 <__i2b+0x1a>
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <__i2b+0x24>)
 800f66c:	4805      	ldr	r0, [pc, #20]	; (800f684 <__i2b+0x28>)
 800f66e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f672:	f000 fc9b 	bl	800ffac <__assert_func>
 800f676:	2301      	movs	r3, #1
 800f678:	6144      	str	r4, [r0, #20]
 800f67a:	6103      	str	r3, [r0, #16]
 800f67c:	bd10      	pop	{r4, pc}
 800f67e:	bf00      	nop
 800f680:	08010d4f 	.word	0x08010d4f
 800f684:	08010d60 	.word	0x08010d60

0800f688 <__multiply>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	4614      	mov	r4, r2
 800f68e:	690a      	ldr	r2, [r1, #16]
 800f690:	6923      	ldr	r3, [r4, #16]
 800f692:	429a      	cmp	r2, r3
 800f694:	bfb8      	it	lt
 800f696:	460b      	movlt	r3, r1
 800f698:	460d      	mov	r5, r1
 800f69a:	bfbc      	itt	lt
 800f69c:	4625      	movlt	r5, r4
 800f69e:	461c      	movlt	r4, r3
 800f6a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f6a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f6a8:	68ab      	ldr	r3, [r5, #8]
 800f6aa:	6869      	ldr	r1, [r5, #4]
 800f6ac:	eb0a 0709 	add.w	r7, sl, r9
 800f6b0:	42bb      	cmp	r3, r7
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	bfb8      	it	lt
 800f6b6:	3101      	addlt	r1, #1
 800f6b8:	f7ff fed4 	bl	800f464 <_Balloc>
 800f6bc:	b930      	cbnz	r0, 800f6cc <__multiply+0x44>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	4b42      	ldr	r3, [pc, #264]	; (800f7cc <__multiply+0x144>)
 800f6c2:	4843      	ldr	r0, [pc, #268]	; (800f7d0 <__multiply+0x148>)
 800f6c4:	f240 115d 	movw	r1, #349	; 0x15d
 800f6c8:	f000 fc70 	bl	800ffac <__assert_func>
 800f6cc:	f100 0614 	add.w	r6, r0, #20
 800f6d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f6d4:	4633      	mov	r3, r6
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4543      	cmp	r3, r8
 800f6da:	d31e      	bcc.n	800f71a <__multiply+0x92>
 800f6dc:	f105 0c14 	add.w	ip, r5, #20
 800f6e0:	f104 0314 	add.w	r3, r4, #20
 800f6e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f6e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f6ec:	9202      	str	r2, [sp, #8]
 800f6ee:	ebac 0205 	sub.w	r2, ip, r5
 800f6f2:	3a15      	subs	r2, #21
 800f6f4:	f022 0203 	bic.w	r2, r2, #3
 800f6f8:	3204      	adds	r2, #4
 800f6fa:	f105 0115 	add.w	r1, r5, #21
 800f6fe:	458c      	cmp	ip, r1
 800f700:	bf38      	it	cc
 800f702:	2204      	movcc	r2, #4
 800f704:	9201      	str	r2, [sp, #4]
 800f706:	9a02      	ldr	r2, [sp, #8]
 800f708:	9303      	str	r3, [sp, #12]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d808      	bhi.n	800f720 <__multiply+0x98>
 800f70e:	2f00      	cmp	r7, #0
 800f710:	dc55      	bgt.n	800f7be <__multiply+0x136>
 800f712:	6107      	str	r7, [r0, #16]
 800f714:	b005      	add	sp, #20
 800f716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71a:	f843 2b04 	str.w	r2, [r3], #4
 800f71e:	e7db      	b.n	800f6d8 <__multiply+0x50>
 800f720:	f8b3 a000 	ldrh.w	sl, [r3]
 800f724:	f1ba 0f00 	cmp.w	sl, #0
 800f728:	d020      	beq.n	800f76c <__multiply+0xe4>
 800f72a:	f105 0e14 	add.w	lr, r5, #20
 800f72e:	46b1      	mov	r9, r6
 800f730:	2200      	movs	r2, #0
 800f732:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f736:	f8d9 b000 	ldr.w	fp, [r9]
 800f73a:	b2a1      	uxth	r1, r4
 800f73c:	fa1f fb8b 	uxth.w	fp, fp
 800f740:	fb0a b101 	mla	r1, sl, r1, fp
 800f744:	4411      	add	r1, r2
 800f746:	f8d9 2000 	ldr.w	r2, [r9]
 800f74a:	0c24      	lsrs	r4, r4, #16
 800f74c:	0c12      	lsrs	r2, r2, #16
 800f74e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f752:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f756:	b289      	uxth	r1, r1
 800f758:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f75c:	45f4      	cmp	ip, lr
 800f75e:	f849 1b04 	str.w	r1, [r9], #4
 800f762:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f766:	d8e4      	bhi.n	800f732 <__multiply+0xaa>
 800f768:	9901      	ldr	r1, [sp, #4]
 800f76a:	5072      	str	r2, [r6, r1]
 800f76c:	9a03      	ldr	r2, [sp, #12]
 800f76e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f772:	3304      	adds	r3, #4
 800f774:	f1b9 0f00 	cmp.w	r9, #0
 800f778:	d01f      	beq.n	800f7ba <__multiply+0x132>
 800f77a:	6834      	ldr	r4, [r6, #0]
 800f77c:	f105 0114 	add.w	r1, r5, #20
 800f780:	46b6      	mov	lr, r6
 800f782:	f04f 0a00 	mov.w	sl, #0
 800f786:	880a      	ldrh	r2, [r1, #0]
 800f788:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f78c:	fb09 b202 	mla	r2, r9, r2, fp
 800f790:	4492      	add	sl, r2
 800f792:	b2a4      	uxth	r4, r4
 800f794:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f798:	f84e 4b04 	str.w	r4, [lr], #4
 800f79c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f7a0:	f8be 2000 	ldrh.w	r2, [lr]
 800f7a4:	0c24      	lsrs	r4, r4, #16
 800f7a6:	fb09 2404 	mla	r4, r9, r4, r2
 800f7aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f7ae:	458c      	cmp	ip, r1
 800f7b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f7b4:	d8e7      	bhi.n	800f786 <__multiply+0xfe>
 800f7b6:	9a01      	ldr	r2, [sp, #4]
 800f7b8:	50b4      	str	r4, [r6, r2]
 800f7ba:	3604      	adds	r6, #4
 800f7bc:	e7a3      	b.n	800f706 <__multiply+0x7e>
 800f7be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1a5      	bne.n	800f712 <__multiply+0x8a>
 800f7c6:	3f01      	subs	r7, #1
 800f7c8:	e7a1      	b.n	800f70e <__multiply+0x86>
 800f7ca:	bf00      	nop
 800f7cc:	08010d4f 	.word	0x08010d4f
 800f7d0:	08010d60 	.word	0x08010d60

0800f7d4 <__pow5mult>:
 800f7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7d8:	4615      	mov	r5, r2
 800f7da:	f012 0203 	ands.w	r2, r2, #3
 800f7de:	4606      	mov	r6, r0
 800f7e0:	460f      	mov	r7, r1
 800f7e2:	d007      	beq.n	800f7f4 <__pow5mult+0x20>
 800f7e4:	4c25      	ldr	r4, [pc, #148]	; (800f87c <__pow5mult+0xa8>)
 800f7e6:	3a01      	subs	r2, #1
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f7ee:	f7ff fe9b 	bl	800f528 <__multadd>
 800f7f2:	4607      	mov	r7, r0
 800f7f4:	10ad      	asrs	r5, r5, #2
 800f7f6:	d03d      	beq.n	800f874 <__pow5mult+0xa0>
 800f7f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f7fa:	b97c      	cbnz	r4, 800f81c <__pow5mult+0x48>
 800f7fc:	2010      	movs	r0, #16
 800f7fe:	f7ff fe1b 	bl	800f438 <malloc>
 800f802:	4602      	mov	r2, r0
 800f804:	6270      	str	r0, [r6, #36]	; 0x24
 800f806:	b928      	cbnz	r0, 800f814 <__pow5mult+0x40>
 800f808:	4b1d      	ldr	r3, [pc, #116]	; (800f880 <__pow5mult+0xac>)
 800f80a:	481e      	ldr	r0, [pc, #120]	; (800f884 <__pow5mult+0xb0>)
 800f80c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f810:	f000 fbcc 	bl	800ffac <__assert_func>
 800f814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f818:	6004      	str	r4, [r0, #0]
 800f81a:	60c4      	str	r4, [r0, #12]
 800f81c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f824:	b94c      	cbnz	r4, 800f83a <__pow5mult+0x66>
 800f826:	f240 2171 	movw	r1, #625	; 0x271
 800f82a:	4630      	mov	r0, r6
 800f82c:	f7ff ff16 	bl	800f65c <__i2b>
 800f830:	2300      	movs	r3, #0
 800f832:	f8c8 0008 	str.w	r0, [r8, #8]
 800f836:	4604      	mov	r4, r0
 800f838:	6003      	str	r3, [r0, #0]
 800f83a:	f04f 0900 	mov.w	r9, #0
 800f83e:	07eb      	lsls	r3, r5, #31
 800f840:	d50a      	bpl.n	800f858 <__pow5mult+0x84>
 800f842:	4639      	mov	r1, r7
 800f844:	4622      	mov	r2, r4
 800f846:	4630      	mov	r0, r6
 800f848:	f7ff ff1e 	bl	800f688 <__multiply>
 800f84c:	4639      	mov	r1, r7
 800f84e:	4680      	mov	r8, r0
 800f850:	4630      	mov	r0, r6
 800f852:	f7ff fe47 	bl	800f4e4 <_Bfree>
 800f856:	4647      	mov	r7, r8
 800f858:	106d      	asrs	r5, r5, #1
 800f85a:	d00b      	beq.n	800f874 <__pow5mult+0xa0>
 800f85c:	6820      	ldr	r0, [r4, #0]
 800f85e:	b938      	cbnz	r0, 800f870 <__pow5mult+0x9c>
 800f860:	4622      	mov	r2, r4
 800f862:	4621      	mov	r1, r4
 800f864:	4630      	mov	r0, r6
 800f866:	f7ff ff0f 	bl	800f688 <__multiply>
 800f86a:	6020      	str	r0, [r4, #0]
 800f86c:	f8c0 9000 	str.w	r9, [r0]
 800f870:	4604      	mov	r4, r0
 800f872:	e7e4      	b.n	800f83e <__pow5mult+0x6a>
 800f874:	4638      	mov	r0, r7
 800f876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f87a:	bf00      	nop
 800f87c:	08010eb0 	.word	0x08010eb0
 800f880:	08010cd9 	.word	0x08010cd9
 800f884:	08010d60 	.word	0x08010d60

0800f888 <__lshift>:
 800f888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f88c:	460c      	mov	r4, r1
 800f88e:	6849      	ldr	r1, [r1, #4]
 800f890:	6923      	ldr	r3, [r4, #16]
 800f892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f896:	68a3      	ldr	r3, [r4, #8]
 800f898:	4607      	mov	r7, r0
 800f89a:	4691      	mov	r9, r2
 800f89c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8a0:	f108 0601 	add.w	r6, r8, #1
 800f8a4:	42b3      	cmp	r3, r6
 800f8a6:	db0b      	blt.n	800f8c0 <__lshift+0x38>
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f7ff fddb 	bl	800f464 <_Balloc>
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	b948      	cbnz	r0, 800f8c6 <__lshift+0x3e>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	4b28      	ldr	r3, [pc, #160]	; (800f958 <__lshift+0xd0>)
 800f8b6:	4829      	ldr	r0, [pc, #164]	; (800f95c <__lshift+0xd4>)
 800f8b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8bc:	f000 fb76 	bl	800ffac <__assert_func>
 800f8c0:	3101      	adds	r1, #1
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	e7ee      	b.n	800f8a4 <__lshift+0x1c>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	f100 0114 	add.w	r1, r0, #20
 800f8cc:	f100 0210 	add.w	r2, r0, #16
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	4553      	cmp	r3, sl
 800f8d4:	db33      	blt.n	800f93e <__lshift+0xb6>
 800f8d6:	6920      	ldr	r0, [r4, #16]
 800f8d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8dc:	f104 0314 	add.w	r3, r4, #20
 800f8e0:	f019 091f 	ands.w	r9, r9, #31
 800f8e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f8ec:	d02b      	beq.n	800f946 <__lshift+0xbe>
 800f8ee:	f1c9 0e20 	rsb	lr, r9, #32
 800f8f2:	468a      	mov	sl, r1
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	6818      	ldr	r0, [r3, #0]
 800f8f8:	fa00 f009 	lsl.w	r0, r0, r9
 800f8fc:	4302      	orrs	r2, r0
 800f8fe:	f84a 2b04 	str.w	r2, [sl], #4
 800f902:	f853 2b04 	ldr.w	r2, [r3], #4
 800f906:	459c      	cmp	ip, r3
 800f908:	fa22 f20e 	lsr.w	r2, r2, lr
 800f90c:	d8f3      	bhi.n	800f8f6 <__lshift+0x6e>
 800f90e:	ebac 0304 	sub.w	r3, ip, r4
 800f912:	3b15      	subs	r3, #21
 800f914:	f023 0303 	bic.w	r3, r3, #3
 800f918:	3304      	adds	r3, #4
 800f91a:	f104 0015 	add.w	r0, r4, #21
 800f91e:	4584      	cmp	ip, r0
 800f920:	bf38      	it	cc
 800f922:	2304      	movcc	r3, #4
 800f924:	50ca      	str	r2, [r1, r3]
 800f926:	b10a      	cbz	r2, 800f92c <__lshift+0xa4>
 800f928:	f108 0602 	add.w	r6, r8, #2
 800f92c:	3e01      	subs	r6, #1
 800f92e:	4638      	mov	r0, r7
 800f930:	612e      	str	r6, [r5, #16]
 800f932:	4621      	mov	r1, r4
 800f934:	f7ff fdd6 	bl	800f4e4 <_Bfree>
 800f938:	4628      	mov	r0, r5
 800f93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f93e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f942:	3301      	adds	r3, #1
 800f944:	e7c5      	b.n	800f8d2 <__lshift+0x4a>
 800f946:	3904      	subs	r1, #4
 800f948:	f853 2b04 	ldr.w	r2, [r3], #4
 800f94c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f950:	459c      	cmp	ip, r3
 800f952:	d8f9      	bhi.n	800f948 <__lshift+0xc0>
 800f954:	e7ea      	b.n	800f92c <__lshift+0xa4>
 800f956:	bf00      	nop
 800f958:	08010d4f 	.word	0x08010d4f
 800f95c:	08010d60 	.word	0x08010d60

0800f960 <__mcmp>:
 800f960:	b530      	push	{r4, r5, lr}
 800f962:	6902      	ldr	r2, [r0, #16]
 800f964:	690c      	ldr	r4, [r1, #16]
 800f966:	1b12      	subs	r2, r2, r4
 800f968:	d10e      	bne.n	800f988 <__mcmp+0x28>
 800f96a:	f100 0314 	add.w	r3, r0, #20
 800f96e:	3114      	adds	r1, #20
 800f970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f97c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f980:	42a5      	cmp	r5, r4
 800f982:	d003      	beq.n	800f98c <__mcmp+0x2c>
 800f984:	d305      	bcc.n	800f992 <__mcmp+0x32>
 800f986:	2201      	movs	r2, #1
 800f988:	4610      	mov	r0, r2
 800f98a:	bd30      	pop	{r4, r5, pc}
 800f98c:	4283      	cmp	r3, r0
 800f98e:	d3f3      	bcc.n	800f978 <__mcmp+0x18>
 800f990:	e7fa      	b.n	800f988 <__mcmp+0x28>
 800f992:	f04f 32ff 	mov.w	r2, #4294967295
 800f996:	e7f7      	b.n	800f988 <__mcmp+0x28>

0800f998 <__mdiff>:
 800f998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	4606      	mov	r6, r0
 800f9a0:	4611      	mov	r1, r2
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	4617      	mov	r7, r2
 800f9a6:	f7ff ffdb 	bl	800f960 <__mcmp>
 800f9aa:	1e05      	subs	r5, r0, #0
 800f9ac:	d110      	bne.n	800f9d0 <__mdiff+0x38>
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f7ff fd57 	bl	800f464 <_Balloc>
 800f9b6:	b930      	cbnz	r0, 800f9c6 <__mdiff+0x2e>
 800f9b8:	4b39      	ldr	r3, [pc, #228]	; (800faa0 <__mdiff+0x108>)
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	f240 2132 	movw	r1, #562	; 0x232
 800f9c0:	4838      	ldr	r0, [pc, #224]	; (800faa4 <__mdiff+0x10c>)
 800f9c2:	f000 faf3 	bl	800ffac <__assert_func>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d0:	bfa4      	itt	ge
 800f9d2:	463b      	movge	r3, r7
 800f9d4:	4627      	movge	r7, r4
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	6879      	ldr	r1, [r7, #4]
 800f9da:	bfa6      	itte	ge
 800f9dc:	461c      	movge	r4, r3
 800f9de:	2500      	movge	r5, #0
 800f9e0:	2501      	movlt	r5, #1
 800f9e2:	f7ff fd3f 	bl	800f464 <_Balloc>
 800f9e6:	b920      	cbnz	r0, 800f9f2 <__mdiff+0x5a>
 800f9e8:	4b2d      	ldr	r3, [pc, #180]	; (800faa0 <__mdiff+0x108>)
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f9f0:	e7e6      	b.n	800f9c0 <__mdiff+0x28>
 800f9f2:	693e      	ldr	r6, [r7, #16]
 800f9f4:	60c5      	str	r5, [r0, #12]
 800f9f6:	6925      	ldr	r5, [r4, #16]
 800f9f8:	f107 0114 	add.w	r1, r7, #20
 800f9fc:	f104 0914 	add.w	r9, r4, #20
 800fa00:	f100 0e14 	add.w	lr, r0, #20
 800fa04:	f107 0210 	add.w	r2, r7, #16
 800fa08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fa0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fa10:	46f2      	mov	sl, lr
 800fa12:	2700      	movs	r7, #0
 800fa14:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa1c:	fa1f f883 	uxth.w	r8, r3
 800fa20:	fa17 f78b 	uxtah	r7, r7, fp
 800fa24:	0c1b      	lsrs	r3, r3, #16
 800fa26:	eba7 0808 	sub.w	r8, r7, r8
 800fa2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa32:	fa1f f888 	uxth.w	r8, r8
 800fa36:	141f      	asrs	r7, r3, #16
 800fa38:	454d      	cmp	r5, r9
 800fa3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa3e:	f84a 3b04 	str.w	r3, [sl], #4
 800fa42:	d8e7      	bhi.n	800fa14 <__mdiff+0x7c>
 800fa44:	1b2b      	subs	r3, r5, r4
 800fa46:	3b15      	subs	r3, #21
 800fa48:	f023 0303 	bic.w	r3, r3, #3
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	3415      	adds	r4, #21
 800fa50:	42a5      	cmp	r5, r4
 800fa52:	bf38      	it	cc
 800fa54:	2304      	movcc	r3, #4
 800fa56:	4419      	add	r1, r3
 800fa58:	4473      	add	r3, lr
 800fa5a:	469e      	mov	lr, r3
 800fa5c:	460d      	mov	r5, r1
 800fa5e:	4565      	cmp	r5, ip
 800fa60:	d30e      	bcc.n	800fa80 <__mdiff+0xe8>
 800fa62:	f10c 0203 	add.w	r2, ip, #3
 800fa66:	1a52      	subs	r2, r2, r1
 800fa68:	f022 0203 	bic.w	r2, r2, #3
 800fa6c:	3903      	subs	r1, #3
 800fa6e:	458c      	cmp	ip, r1
 800fa70:	bf38      	it	cc
 800fa72:	2200      	movcc	r2, #0
 800fa74:	441a      	add	r2, r3
 800fa76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fa7a:	b17b      	cbz	r3, 800fa9c <__mdiff+0x104>
 800fa7c:	6106      	str	r6, [r0, #16]
 800fa7e:	e7a5      	b.n	800f9cc <__mdiff+0x34>
 800fa80:	f855 8b04 	ldr.w	r8, [r5], #4
 800fa84:	fa17 f488 	uxtah	r4, r7, r8
 800fa88:	1422      	asrs	r2, r4, #16
 800fa8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fa8e:	b2a4      	uxth	r4, r4
 800fa90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fa94:	f84e 4b04 	str.w	r4, [lr], #4
 800fa98:	1417      	asrs	r7, r2, #16
 800fa9a:	e7e0      	b.n	800fa5e <__mdiff+0xc6>
 800fa9c:	3e01      	subs	r6, #1
 800fa9e:	e7ea      	b.n	800fa76 <__mdiff+0xde>
 800faa0:	08010d4f 	.word	0x08010d4f
 800faa4:	08010d60 	.word	0x08010d60

0800faa8 <__d2b>:
 800faa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800faac:	4689      	mov	r9, r1
 800faae:	2101      	movs	r1, #1
 800fab0:	ec57 6b10 	vmov	r6, r7, d0
 800fab4:	4690      	mov	r8, r2
 800fab6:	f7ff fcd5 	bl	800f464 <_Balloc>
 800faba:	4604      	mov	r4, r0
 800fabc:	b930      	cbnz	r0, 800facc <__d2b+0x24>
 800fabe:	4602      	mov	r2, r0
 800fac0:	4b25      	ldr	r3, [pc, #148]	; (800fb58 <__d2b+0xb0>)
 800fac2:	4826      	ldr	r0, [pc, #152]	; (800fb5c <__d2b+0xb4>)
 800fac4:	f240 310a 	movw	r1, #778	; 0x30a
 800fac8:	f000 fa70 	bl	800ffac <__assert_func>
 800facc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fad4:	bb35      	cbnz	r5, 800fb24 <__d2b+0x7c>
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	d028      	beq.n	800fb2e <__d2b+0x86>
 800fadc:	4668      	mov	r0, sp
 800fade:	9600      	str	r6, [sp, #0]
 800fae0:	f7ff fd8c 	bl	800f5fc <__lo0bits>
 800fae4:	9900      	ldr	r1, [sp, #0]
 800fae6:	b300      	cbz	r0, 800fb2a <__d2b+0x82>
 800fae8:	9a01      	ldr	r2, [sp, #4]
 800faea:	f1c0 0320 	rsb	r3, r0, #32
 800faee:	fa02 f303 	lsl.w	r3, r2, r3
 800faf2:	430b      	orrs	r3, r1
 800faf4:	40c2      	lsrs	r2, r0
 800faf6:	6163      	str	r3, [r4, #20]
 800faf8:	9201      	str	r2, [sp, #4]
 800fafa:	9b01      	ldr	r3, [sp, #4]
 800fafc:	61a3      	str	r3, [r4, #24]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	bf14      	ite	ne
 800fb02:	2202      	movne	r2, #2
 800fb04:	2201      	moveq	r2, #1
 800fb06:	6122      	str	r2, [r4, #16]
 800fb08:	b1d5      	cbz	r5, 800fb40 <__d2b+0x98>
 800fb0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fb0e:	4405      	add	r5, r0
 800fb10:	f8c9 5000 	str.w	r5, [r9]
 800fb14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb18:	f8c8 0000 	str.w	r0, [r8]
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	b003      	add	sp, #12
 800fb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb28:	e7d5      	b.n	800fad6 <__d2b+0x2e>
 800fb2a:	6161      	str	r1, [r4, #20]
 800fb2c:	e7e5      	b.n	800fafa <__d2b+0x52>
 800fb2e:	a801      	add	r0, sp, #4
 800fb30:	f7ff fd64 	bl	800f5fc <__lo0bits>
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	6163      	str	r3, [r4, #20]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	6122      	str	r2, [r4, #16]
 800fb3c:	3020      	adds	r0, #32
 800fb3e:	e7e3      	b.n	800fb08 <__d2b+0x60>
 800fb40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb48:	f8c9 0000 	str.w	r0, [r9]
 800fb4c:	6918      	ldr	r0, [r3, #16]
 800fb4e:	f7ff fd35 	bl	800f5bc <__hi0bits>
 800fb52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb56:	e7df      	b.n	800fb18 <__d2b+0x70>
 800fb58:	08010d4f 	.word	0x08010d4f
 800fb5c:	08010d60 	.word	0x08010d60

0800fb60 <_calloc_r>:
 800fb60:	b513      	push	{r0, r1, r4, lr}
 800fb62:	434a      	muls	r2, r1
 800fb64:	4611      	mov	r1, r2
 800fb66:	9201      	str	r2, [sp, #4]
 800fb68:	f000 f85a 	bl	800fc20 <_malloc_r>
 800fb6c:	4604      	mov	r4, r0
 800fb6e:	b118      	cbz	r0, 800fb78 <_calloc_r+0x18>
 800fb70:	9a01      	ldr	r2, [sp, #4]
 800fb72:	2100      	movs	r1, #0
 800fb74:	f7fe f952 	bl	800de1c <memset>
 800fb78:	4620      	mov	r0, r4
 800fb7a:	b002      	add	sp, #8
 800fb7c:	bd10      	pop	{r4, pc}
	...

0800fb80 <_free_r>:
 800fb80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb82:	2900      	cmp	r1, #0
 800fb84:	d048      	beq.n	800fc18 <_free_r+0x98>
 800fb86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb8a:	9001      	str	r0, [sp, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f1a1 0404 	sub.w	r4, r1, #4
 800fb92:	bfb8      	it	lt
 800fb94:	18e4      	addlt	r4, r4, r3
 800fb96:	f000 fa65 	bl	8010064 <__malloc_lock>
 800fb9a:	4a20      	ldr	r2, [pc, #128]	; (800fc1c <_free_r+0x9c>)
 800fb9c:	9801      	ldr	r0, [sp, #4]
 800fb9e:	6813      	ldr	r3, [r2, #0]
 800fba0:	4615      	mov	r5, r2
 800fba2:	b933      	cbnz	r3, 800fbb2 <_free_r+0x32>
 800fba4:	6063      	str	r3, [r4, #4]
 800fba6:	6014      	str	r4, [r2, #0]
 800fba8:	b003      	add	sp, #12
 800fbaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbae:	f000 ba5f 	b.w	8010070 <__malloc_unlock>
 800fbb2:	42a3      	cmp	r3, r4
 800fbb4:	d90b      	bls.n	800fbce <_free_r+0x4e>
 800fbb6:	6821      	ldr	r1, [r4, #0]
 800fbb8:	1862      	adds	r2, r4, r1
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	bf04      	itt	eq
 800fbbe:	681a      	ldreq	r2, [r3, #0]
 800fbc0:	685b      	ldreq	r3, [r3, #4]
 800fbc2:	6063      	str	r3, [r4, #4]
 800fbc4:	bf04      	itt	eq
 800fbc6:	1852      	addeq	r2, r2, r1
 800fbc8:	6022      	streq	r2, [r4, #0]
 800fbca:	602c      	str	r4, [r5, #0]
 800fbcc:	e7ec      	b.n	800fba8 <_free_r+0x28>
 800fbce:	461a      	mov	r2, r3
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	b10b      	cbz	r3, 800fbd8 <_free_r+0x58>
 800fbd4:	42a3      	cmp	r3, r4
 800fbd6:	d9fa      	bls.n	800fbce <_free_r+0x4e>
 800fbd8:	6811      	ldr	r1, [r2, #0]
 800fbda:	1855      	adds	r5, r2, r1
 800fbdc:	42a5      	cmp	r5, r4
 800fbde:	d10b      	bne.n	800fbf8 <_free_r+0x78>
 800fbe0:	6824      	ldr	r4, [r4, #0]
 800fbe2:	4421      	add	r1, r4
 800fbe4:	1854      	adds	r4, r2, r1
 800fbe6:	42a3      	cmp	r3, r4
 800fbe8:	6011      	str	r1, [r2, #0]
 800fbea:	d1dd      	bne.n	800fba8 <_free_r+0x28>
 800fbec:	681c      	ldr	r4, [r3, #0]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	6053      	str	r3, [r2, #4]
 800fbf2:	4421      	add	r1, r4
 800fbf4:	6011      	str	r1, [r2, #0]
 800fbf6:	e7d7      	b.n	800fba8 <_free_r+0x28>
 800fbf8:	d902      	bls.n	800fc00 <_free_r+0x80>
 800fbfa:	230c      	movs	r3, #12
 800fbfc:	6003      	str	r3, [r0, #0]
 800fbfe:	e7d3      	b.n	800fba8 <_free_r+0x28>
 800fc00:	6825      	ldr	r5, [r4, #0]
 800fc02:	1961      	adds	r1, r4, r5
 800fc04:	428b      	cmp	r3, r1
 800fc06:	bf04      	itt	eq
 800fc08:	6819      	ldreq	r1, [r3, #0]
 800fc0a:	685b      	ldreq	r3, [r3, #4]
 800fc0c:	6063      	str	r3, [r4, #4]
 800fc0e:	bf04      	itt	eq
 800fc10:	1949      	addeq	r1, r1, r5
 800fc12:	6021      	streq	r1, [r4, #0]
 800fc14:	6054      	str	r4, [r2, #4]
 800fc16:	e7c7      	b.n	800fba8 <_free_r+0x28>
 800fc18:	b003      	add	sp, #12
 800fc1a:	bd30      	pop	{r4, r5, pc}
 800fc1c:	20000a20 	.word	0x20000a20

0800fc20 <_malloc_r>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	1ccd      	adds	r5, r1, #3
 800fc24:	f025 0503 	bic.w	r5, r5, #3
 800fc28:	3508      	adds	r5, #8
 800fc2a:	2d0c      	cmp	r5, #12
 800fc2c:	bf38      	it	cc
 800fc2e:	250c      	movcc	r5, #12
 800fc30:	2d00      	cmp	r5, #0
 800fc32:	4606      	mov	r6, r0
 800fc34:	db01      	blt.n	800fc3a <_malloc_r+0x1a>
 800fc36:	42a9      	cmp	r1, r5
 800fc38:	d903      	bls.n	800fc42 <_malloc_r+0x22>
 800fc3a:	230c      	movs	r3, #12
 800fc3c:	6033      	str	r3, [r6, #0]
 800fc3e:	2000      	movs	r0, #0
 800fc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc42:	f000 fa0f 	bl	8010064 <__malloc_lock>
 800fc46:	4921      	ldr	r1, [pc, #132]	; (800fccc <_malloc_r+0xac>)
 800fc48:	680a      	ldr	r2, [r1, #0]
 800fc4a:	4614      	mov	r4, r2
 800fc4c:	b99c      	cbnz	r4, 800fc76 <_malloc_r+0x56>
 800fc4e:	4f20      	ldr	r7, [pc, #128]	; (800fcd0 <_malloc_r+0xb0>)
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	b923      	cbnz	r3, 800fc5e <_malloc_r+0x3e>
 800fc54:	4621      	mov	r1, r4
 800fc56:	4630      	mov	r0, r6
 800fc58:	f000 f998 	bl	800ff8c <_sbrk_r>
 800fc5c:	6038      	str	r0, [r7, #0]
 800fc5e:	4629      	mov	r1, r5
 800fc60:	4630      	mov	r0, r6
 800fc62:	f000 f993 	bl	800ff8c <_sbrk_r>
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	d123      	bne.n	800fcb2 <_malloc_r+0x92>
 800fc6a:	230c      	movs	r3, #12
 800fc6c:	6033      	str	r3, [r6, #0]
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f000 f9fe 	bl	8010070 <__malloc_unlock>
 800fc74:	e7e3      	b.n	800fc3e <_malloc_r+0x1e>
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	1b5b      	subs	r3, r3, r5
 800fc7a:	d417      	bmi.n	800fcac <_malloc_r+0x8c>
 800fc7c:	2b0b      	cmp	r3, #11
 800fc7e:	d903      	bls.n	800fc88 <_malloc_r+0x68>
 800fc80:	6023      	str	r3, [r4, #0]
 800fc82:	441c      	add	r4, r3
 800fc84:	6025      	str	r5, [r4, #0]
 800fc86:	e004      	b.n	800fc92 <_malloc_r+0x72>
 800fc88:	6863      	ldr	r3, [r4, #4]
 800fc8a:	42a2      	cmp	r2, r4
 800fc8c:	bf0c      	ite	eq
 800fc8e:	600b      	streq	r3, [r1, #0]
 800fc90:	6053      	strne	r3, [r2, #4]
 800fc92:	4630      	mov	r0, r6
 800fc94:	f000 f9ec 	bl	8010070 <__malloc_unlock>
 800fc98:	f104 000b 	add.w	r0, r4, #11
 800fc9c:	1d23      	adds	r3, r4, #4
 800fc9e:	f020 0007 	bic.w	r0, r0, #7
 800fca2:	1ac2      	subs	r2, r0, r3
 800fca4:	d0cc      	beq.n	800fc40 <_malloc_r+0x20>
 800fca6:	1a1b      	subs	r3, r3, r0
 800fca8:	50a3      	str	r3, [r4, r2]
 800fcaa:	e7c9      	b.n	800fc40 <_malloc_r+0x20>
 800fcac:	4622      	mov	r2, r4
 800fcae:	6864      	ldr	r4, [r4, #4]
 800fcb0:	e7cc      	b.n	800fc4c <_malloc_r+0x2c>
 800fcb2:	1cc4      	adds	r4, r0, #3
 800fcb4:	f024 0403 	bic.w	r4, r4, #3
 800fcb8:	42a0      	cmp	r0, r4
 800fcba:	d0e3      	beq.n	800fc84 <_malloc_r+0x64>
 800fcbc:	1a21      	subs	r1, r4, r0
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f000 f964 	bl	800ff8c <_sbrk_r>
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	d1dd      	bne.n	800fc84 <_malloc_r+0x64>
 800fcc8:	e7cf      	b.n	800fc6a <_malloc_r+0x4a>
 800fcca:	bf00      	nop
 800fccc:	20000a20 	.word	0x20000a20
 800fcd0:	20000a24 	.word	0x20000a24

0800fcd4 <__ssputs_r>:
 800fcd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd8:	688e      	ldr	r6, [r1, #8]
 800fcda:	429e      	cmp	r6, r3
 800fcdc:	4682      	mov	sl, r0
 800fcde:	460c      	mov	r4, r1
 800fce0:	4690      	mov	r8, r2
 800fce2:	461f      	mov	r7, r3
 800fce4:	d838      	bhi.n	800fd58 <__ssputs_r+0x84>
 800fce6:	898a      	ldrh	r2, [r1, #12]
 800fce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fcec:	d032      	beq.n	800fd54 <__ssputs_r+0x80>
 800fcee:	6825      	ldr	r5, [r4, #0]
 800fcf0:	6909      	ldr	r1, [r1, #16]
 800fcf2:	eba5 0901 	sub.w	r9, r5, r1
 800fcf6:	6965      	ldr	r5, [r4, #20]
 800fcf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd00:	3301      	adds	r3, #1
 800fd02:	444b      	add	r3, r9
 800fd04:	106d      	asrs	r5, r5, #1
 800fd06:	429d      	cmp	r5, r3
 800fd08:	bf38      	it	cc
 800fd0a:	461d      	movcc	r5, r3
 800fd0c:	0553      	lsls	r3, r2, #21
 800fd0e:	d531      	bpl.n	800fd74 <__ssputs_r+0xa0>
 800fd10:	4629      	mov	r1, r5
 800fd12:	f7ff ff85 	bl	800fc20 <_malloc_r>
 800fd16:	4606      	mov	r6, r0
 800fd18:	b950      	cbnz	r0, 800fd30 <__ssputs_r+0x5c>
 800fd1a:	230c      	movs	r3, #12
 800fd1c:	f8ca 3000 	str.w	r3, [sl]
 800fd20:	89a3      	ldrh	r3, [r4, #12]
 800fd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd26:	81a3      	strh	r3, [r4, #12]
 800fd28:	f04f 30ff 	mov.w	r0, #4294967295
 800fd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd30:	6921      	ldr	r1, [r4, #16]
 800fd32:	464a      	mov	r2, r9
 800fd34:	f7ff fb88 	bl	800f448 <memcpy>
 800fd38:	89a3      	ldrh	r3, [r4, #12]
 800fd3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd42:	81a3      	strh	r3, [r4, #12]
 800fd44:	6126      	str	r6, [r4, #16]
 800fd46:	6165      	str	r5, [r4, #20]
 800fd48:	444e      	add	r6, r9
 800fd4a:	eba5 0509 	sub.w	r5, r5, r9
 800fd4e:	6026      	str	r6, [r4, #0]
 800fd50:	60a5      	str	r5, [r4, #8]
 800fd52:	463e      	mov	r6, r7
 800fd54:	42be      	cmp	r6, r7
 800fd56:	d900      	bls.n	800fd5a <__ssputs_r+0x86>
 800fd58:	463e      	mov	r6, r7
 800fd5a:	4632      	mov	r2, r6
 800fd5c:	6820      	ldr	r0, [r4, #0]
 800fd5e:	4641      	mov	r1, r8
 800fd60:	f000 f966 	bl	8010030 <memmove>
 800fd64:	68a3      	ldr	r3, [r4, #8]
 800fd66:	6822      	ldr	r2, [r4, #0]
 800fd68:	1b9b      	subs	r3, r3, r6
 800fd6a:	4432      	add	r2, r6
 800fd6c:	60a3      	str	r3, [r4, #8]
 800fd6e:	6022      	str	r2, [r4, #0]
 800fd70:	2000      	movs	r0, #0
 800fd72:	e7db      	b.n	800fd2c <__ssputs_r+0x58>
 800fd74:	462a      	mov	r2, r5
 800fd76:	f000 f981 	bl	801007c <_realloc_r>
 800fd7a:	4606      	mov	r6, r0
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d1e1      	bne.n	800fd44 <__ssputs_r+0x70>
 800fd80:	6921      	ldr	r1, [r4, #16]
 800fd82:	4650      	mov	r0, sl
 800fd84:	f7ff fefc 	bl	800fb80 <_free_r>
 800fd88:	e7c7      	b.n	800fd1a <__ssputs_r+0x46>
	...

0800fd8c <_svfiprintf_r>:
 800fd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd90:	4698      	mov	r8, r3
 800fd92:	898b      	ldrh	r3, [r1, #12]
 800fd94:	061b      	lsls	r3, r3, #24
 800fd96:	b09d      	sub	sp, #116	; 0x74
 800fd98:	4607      	mov	r7, r0
 800fd9a:	460d      	mov	r5, r1
 800fd9c:	4614      	mov	r4, r2
 800fd9e:	d50e      	bpl.n	800fdbe <_svfiprintf_r+0x32>
 800fda0:	690b      	ldr	r3, [r1, #16]
 800fda2:	b963      	cbnz	r3, 800fdbe <_svfiprintf_r+0x32>
 800fda4:	2140      	movs	r1, #64	; 0x40
 800fda6:	f7ff ff3b 	bl	800fc20 <_malloc_r>
 800fdaa:	6028      	str	r0, [r5, #0]
 800fdac:	6128      	str	r0, [r5, #16]
 800fdae:	b920      	cbnz	r0, 800fdba <_svfiprintf_r+0x2e>
 800fdb0:	230c      	movs	r3, #12
 800fdb2:	603b      	str	r3, [r7, #0]
 800fdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb8:	e0d1      	b.n	800ff5e <_svfiprintf_r+0x1d2>
 800fdba:	2340      	movs	r3, #64	; 0x40
 800fdbc:	616b      	str	r3, [r5, #20]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800fdc2:	2320      	movs	r3, #32
 800fdc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdcc:	2330      	movs	r3, #48	; 0x30
 800fdce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ff78 <_svfiprintf_r+0x1ec>
 800fdd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdd6:	f04f 0901 	mov.w	r9, #1
 800fdda:	4623      	mov	r3, r4
 800fddc:	469a      	mov	sl, r3
 800fdde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fde2:	b10a      	cbz	r2, 800fde8 <_svfiprintf_r+0x5c>
 800fde4:	2a25      	cmp	r2, #37	; 0x25
 800fde6:	d1f9      	bne.n	800fddc <_svfiprintf_r+0x50>
 800fde8:	ebba 0b04 	subs.w	fp, sl, r4
 800fdec:	d00b      	beq.n	800fe06 <_svfiprintf_r+0x7a>
 800fdee:	465b      	mov	r3, fp
 800fdf0:	4622      	mov	r2, r4
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	4638      	mov	r0, r7
 800fdf6:	f7ff ff6d 	bl	800fcd4 <__ssputs_r>
 800fdfa:	3001      	adds	r0, #1
 800fdfc:	f000 80aa 	beq.w	800ff54 <_svfiprintf_r+0x1c8>
 800fe00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe02:	445a      	add	r2, fp
 800fe04:	9209      	str	r2, [sp, #36]	; 0x24
 800fe06:	f89a 3000 	ldrb.w	r3, [sl]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f000 80a2 	beq.w	800ff54 <_svfiprintf_r+0x1c8>
 800fe10:	2300      	movs	r3, #0
 800fe12:	f04f 32ff 	mov.w	r2, #4294967295
 800fe16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe1a:	f10a 0a01 	add.w	sl, sl, #1
 800fe1e:	9304      	str	r3, [sp, #16]
 800fe20:	9307      	str	r3, [sp, #28]
 800fe22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe26:	931a      	str	r3, [sp, #104]	; 0x68
 800fe28:	4654      	mov	r4, sl
 800fe2a:	2205      	movs	r2, #5
 800fe2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe30:	4851      	ldr	r0, [pc, #324]	; (800ff78 <_svfiprintf_r+0x1ec>)
 800fe32:	f7f0 f9dd 	bl	80001f0 <memchr>
 800fe36:	9a04      	ldr	r2, [sp, #16]
 800fe38:	b9d8      	cbnz	r0, 800fe72 <_svfiprintf_r+0xe6>
 800fe3a:	06d0      	lsls	r0, r2, #27
 800fe3c:	bf44      	itt	mi
 800fe3e:	2320      	movmi	r3, #32
 800fe40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe44:	0711      	lsls	r1, r2, #28
 800fe46:	bf44      	itt	mi
 800fe48:	232b      	movmi	r3, #43	; 0x2b
 800fe4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe4e:	f89a 3000 	ldrb.w	r3, [sl]
 800fe52:	2b2a      	cmp	r3, #42	; 0x2a
 800fe54:	d015      	beq.n	800fe82 <_svfiprintf_r+0xf6>
 800fe56:	9a07      	ldr	r2, [sp, #28]
 800fe58:	4654      	mov	r4, sl
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	f04f 0c0a 	mov.w	ip, #10
 800fe60:	4621      	mov	r1, r4
 800fe62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe66:	3b30      	subs	r3, #48	; 0x30
 800fe68:	2b09      	cmp	r3, #9
 800fe6a:	d94e      	bls.n	800ff0a <_svfiprintf_r+0x17e>
 800fe6c:	b1b0      	cbz	r0, 800fe9c <_svfiprintf_r+0x110>
 800fe6e:	9207      	str	r2, [sp, #28]
 800fe70:	e014      	b.n	800fe9c <_svfiprintf_r+0x110>
 800fe72:	eba0 0308 	sub.w	r3, r0, r8
 800fe76:	fa09 f303 	lsl.w	r3, r9, r3
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	9304      	str	r3, [sp, #16]
 800fe7e:	46a2      	mov	sl, r4
 800fe80:	e7d2      	b.n	800fe28 <_svfiprintf_r+0x9c>
 800fe82:	9b03      	ldr	r3, [sp, #12]
 800fe84:	1d19      	adds	r1, r3, #4
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	9103      	str	r1, [sp, #12]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	bfbb      	ittet	lt
 800fe8e:	425b      	neglt	r3, r3
 800fe90:	f042 0202 	orrlt.w	r2, r2, #2
 800fe94:	9307      	strge	r3, [sp, #28]
 800fe96:	9307      	strlt	r3, [sp, #28]
 800fe98:	bfb8      	it	lt
 800fe9a:	9204      	strlt	r2, [sp, #16]
 800fe9c:	7823      	ldrb	r3, [r4, #0]
 800fe9e:	2b2e      	cmp	r3, #46	; 0x2e
 800fea0:	d10c      	bne.n	800febc <_svfiprintf_r+0x130>
 800fea2:	7863      	ldrb	r3, [r4, #1]
 800fea4:	2b2a      	cmp	r3, #42	; 0x2a
 800fea6:	d135      	bne.n	800ff14 <_svfiprintf_r+0x188>
 800fea8:	9b03      	ldr	r3, [sp, #12]
 800feaa:	1d1a      	adds	r2, r3, #4
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	9203      	str	r2, [sp, #12]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	bfb8      	it	lt
 800feb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800feb8:	3402      	adds	r4, #2
 800feba:	9305      	str	r3, [sp, #20]
 800febc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff88 <_svfiprintf_r+0x1fc>
 800fec0:	7821      	ldrb	r1, [r4, #0]
 800fec2:	2203      	movs	r2, #3
 800fec4:	4650      	mov	r0, sl
 800fec6:	f7f0 f993 	bl	80001f0 <memchr>
 800feca:	b140      	cbz	r0, 800fede <_svfiprintf_r+0x152>
 800fecc:	2340      	movs	r3, #64	; 0x40
 800fece:	eba0 000a 	sub.w	r0, r0, sl
 800fed2:	fa03 f000 	lsl.w	r0, r3, r0
 800fed6:	9b04      	ldr	r3, [sp, #16]
 800fed8:	4303      	orrs	r3, r0
 800feda:	3401      	adds	r4, #1
 800fedc:	9304      	str	r3, [sp, #16]
 800fede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee2:	4826      	ldr	r0, [pc, #152]	; (800ff7c <_svfiprintf_r+0x1f0>)
 800fee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fee8:	2206      	movs	r2, #6
 800feea:	f7f0 f981 	bl	80001f0 <memchr>
 800feee:	2800      	cmp	r0, #0
 800fef0:	d038      	beq.n	800ff64 <_svfiprintf_r+0x1d8>
 800fef2:	4b23      	ldr	r3, [pc, #140]	; (800ff80 <_svfiprintf_r+0x1f4>)
 800fef4:	bb1b      	cbnz	r3, 800ff3e <_svfiprintf_r+0x1b2>
 800fef6:	9b03      	ldr	r3, [sp, #12]
 800fef8:	3307      	adds	r3, #7
 800fefa:	f023 0307 	bic.w	r3, r3, #7
 800fefe:	3308      	adds	r3, #8
 800ff00:	9303      	str	r3, [sp, #12]
 800ff02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff04:	4433      	add	r3, r6
 800ff06:	9309      	str	r3, [sp, #36]	; 0x24
 800ff08:	e767      	b.n	800fdda <_svfiprintf_r+0x4e>
 800ff0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff0e:	460c      	mov	r4, r1
 800ff10:	2001      	movs	r0, #1
 800ff12:	e7a5      	b.n	800fe60 <_svfiprintf_r+0xd4>
 800ff14:	2300      	movs	r3, #0
 800ff16:	3401      	adds	r4, #1
 800ff18:	9305      	str	r3, [sp, #20]
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	f04f 0c0a 	mov.w	ip, #10
 800ff20:	4620      	mov	r0, r4
 800ff22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff26:	3a30      	subs	r2, #48	; 0x30
 800ff28:	2a09      	cmp	r2, #9
 800ff2a:	d903      	bls.n	800ff34 <_svfiprintf_r+0x1a8>
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d0c5      	beq.n	800febc <_svfiprintf_r+0x130>
 800ff30:	9105      	str	r1, [sp, #20]
 800ff32:	e7c3      	b.n	800febc <_svfiprintf_r+0x130>
 800ff34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff38:	4604      	mov	r4, r0
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e7f0      	b.n	800ff20 <_svfiprintf_r+0x194>
 800ff3e:	ab03      	add	r3, sp, #12
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	462a      	mov	r2, r5
 800ff44:	4b0f      	ldr	r3, [pc, #60]	; (800ff84 <_svfiprintf_r+0x1f8>)
 800ff46:	a904      	add	r1, sp, #16
 800ff48:	4638      	mov	r0, r7
 800ff4a:	f7fe f80f 	bl	800df6c <_printf_float>
 800ff4e:	1c42      	adds	r2, r0, #1
 800ff50:	4606      	mov	r6, r0
 800ff52:	d1d6      	bne.n	800ff02 <_svfiprintf_r+0x176>
 800ff54:	89ab      	ldrh	r3, [r5, #12]
 800ff56:	065b      	lsls	r3, r3, #25
 800ff58:	f53f af2c 	bmi.w	800fdb4 <_svfiprintf_r+0x28>
 800ff5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff5e:	b01d      	add	sp, #116	; 0x74
 800ff60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff64:	ab03      	add	r3, sp, #12
 800ff66:	9300      	str	r3, [sp, #0]
 800ff68:	462a      	mov	r2, r5
 800ff6a:	4b06      	ldr	r3, [pc, #24]	; (800ff84 <_svfiprintf_r+0x1f8>)
 800ff6c:	a904      	add	r1, sp, #16
 800ff6e:	4638      	mov	r0, r7
 800ff70:	f7fe faa0 	bl	800e4b4 <_printf_i>
 800ff74:	e7eb      	b.n	800ff4e <_svfiprintf_r+0x1c2>
 800ff76:	bf00      	nop
 800ff78:	08010ebc 	.word	0x08010ebc
 800ff7c:	08010ec6 	.word	0x08010ec6
 800ff80:	0800df6d 	.word	0x0800df6d
 800ff84:	0800fcd5 	.word	0x0800fcd5
 800ff88:	08010ec2 	.word	0x08010ec2

0800ff8c <_sbrk_r>:
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	4d06      	ldr	r5, [pc, #24]	; (800ffa8 <_sbrk_r+0x1c>)
 800ff90:	2300      	movs	r3, #0
 800ff92:	4604      	mov	r4, r0
 800ff94:	4608      	mov	r0, r1
 800ff96:	602b      	str	r3, [r5, #0]
 800ff98:	f000 fe14 	bl	8010bc4 <_sbrk>
 800ff9c:	1c43      	adds	r3, r0, #1
 800ff9e:	d102      	bne.n	800ffa6 <_sbrk_r+0x1a>
 800ffa0:	682b      	ldr	r3, [r5, #0]
 800ffa2:	b103      	cbz	r3, 800ffa6 <_sbrk_r+0x1a>
 800ffa4:	6023      	str	r3, [r4, #0]
 800ffa6:	bd38      	pop	{r3, r4, r5, pc}
 800ffa8:	20002600 	.word	0x20002600

0800ffac <__assert_func>:
 800ffac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffae:	4614      	mov	r4, r2
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <__assert_func+0x2c>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4605      	mov	r5, r0
 800ffb8:	68d8      	ldr	r0, [r3, #12]
 800ffba:	b14c      	cbz	r4, 800ffd0 <__assert_func+0x24>
 800ffbc:	4b07      	ldr	r3, [pc, #28]	; (800ffdc <__assert_func+0x30>)
 800ffbe:	9100      	str	r1, [sp, #0]
 800ffc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ffc4:	4906      	ldr	r1, [pc, #24]	; (800ffe0 <__assert_func+0x34>)
 800ffc6:	462b      	mov	r3, r5
 800ffc8:	f000 f80e 	bl	800ffe8 <fiprintf>
 800ffcc:	f000 faa4 	bl	8010518 <abort>
 800ffd0:	4b04      	ldr	r3, [pc, #16]	; (800ffe4 <__assert_func+0x38>)
 800ffd2:	461c      	mov	r4, r3
 800ffd4:	e7f3      	b.n	800ffbe <__assert_func+0x12>
 800ffd6:	bf00      	nop
 800ffd8:	20000180 	.word	0x20000180
 800ffdc:	08010ecd 	.word	0x08010ecd
 800ffe0:	08010eda 	.word	0x08010eda
 800ffe4:	08010f08 	.word	0x08010f08

0800ffe8 <fiprintf>:
 800ffe8:	b40e      	push	{r1, r2, r3}
 800ffea:	b503      	push	{r0, r1, lr}
 800ffec:	4601      	mov	r1, r0
 800ffee:	ab03      	add	r3, sp, #12
 800fff0:	4805      	ldr	r0, [pc, #20]	; (8010008 <fiprintf+0x20>)
 800fff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fff6:	6800      	ldr	r0, [r0, #0]
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	f000 f88f 	bl	801011c <_vfiprintf_r>
 800fffe:	b002      	add	sp, #8
 8010000:	f85d eb04 	ldr.w	lr, [sp], #4
 8010004:	b003      	add	sp, #12
 8010006:	4770      	bx	lr
 8010008:	20000180 	.word	0x20000180

0801000c <__ascii_mbtowc>:
 801000c:	b082      	sub	sp, #8
 801000e:	b901      	cbnz	r1, 8010012 <__ascii_mbtowc+0x6>
 8010010:	a901      	add	r1, sp, #4
 8010012:	b142      	cbz	r2, 8010026 <__ascii_mbtowc+0x1a>
 8010014:	b14b      	cbz	r3, 801002a <__ascii_mbtowc+0x1e>
 8010016:	7813      	ldrb	r3, [r2, #0]
 8010018:	600b      	str	r3, [r1, #0]
 801001a:	7812      	ldrb	r2, [r2, #0]
 801001c:	1e10      	subs	r0, r2, #0
 801001e:	bf18      	it	ne
 8010020:	2001      	movne	r0, #1
 8010022:	b002      	add	sp, #8
 8010024:	4770      	bx	lr
 8010026:	4610      	mov	r0, r2
 8010028:	e7fb      	b.n	8010022 <__ascii_mbtowc+0x16>
 801002a:	f06f 0001 	mvn.w	r0, #1
 801002e:	e7f8      	b.n	8010022 <__ascii_mbtowc+0x16>

08010030 <memmove>:
 8010030:	4288      	cmp	r0, r1
 8010032:	b510      	push	{r4, lr}
 8010034:	eb01 0402 	add.w	r4, r1, r2
 8010038:	d902      	bls.n	8010040 <memmove+0x10>
 801003a:	4284      	cmp	r4, r0
 801003c:	4623      	mov	r3, r4
 801003e:	d807      	bhi.n	8010050 <memmove+0x20>
 8010040:	1e43      	subs	r3, r0, #1
 8010042:	42a1      	cmp	r1, r4
 8010044:	d008      	beq.n	8010058 <memmove+0x28>
 8010046:	f811 2b01 	ldrb.w	r2, [r1], #1
 801004a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801004e:	e7f8      	b.n	8010042 <memmove+0x12>
 8010050:	4402      	add	r2, r0
 8010052:	4601      	mov	r1, r0
 8010054:	428a      	cmp	r2, r1
 8010056:	d100      	bne.n	801005a <memmove+0x2a>
 8010058:	bd10      	pop	{r4, pc}
 801005a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801005e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010062:	e7f7      	b.n	8010054 <memmove+0x24>

08010064 <__malloc_lock>:
 8010064:	4801      	ldr	r0, [pc, #4]	; (801006c <__malloc_lock+0x8>)
 8010066:	f000 bc17 	b.w	8010898 <__retarget_lock_acquire_recursive>
 801006a:	bf00      	nop
 801006c:	20002608 	.word	0x20002608

08010070 <__malloc_unlock>:
 8010070:	4801      	ldr	r0, [pc, #4]	; (8010078 <__malloc_unlock+0x8>)
 8010072:	f000 bc12 	b.w	801089a <__retarget_lock_release_recursive>
 8010076:	bf00      	nop
 8010078:	20002608 	.word	0x20002608

0801007c <_realloc_r>:
 801007c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007e:	4607      	mov	r7, r0
 8010080:	4614      	mov	r4, r2
 8010082:	460e      	mov	r6, r1
 8010084:	b921      	cbnz	r1, 8010090 <_realloc_r+0x14>
 8010086:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801008a:	4611      	mov	r1, r2
 801008c:	f7ff bdc8 	b.w	800fc20 <_malloc_r>
 8010090:	b922      	cbnz	r2, 801009c <_realloc_r+0x20>
 8010092:	f7ff fd75 	bl	800fb80 <_free_r>
 8010096:	4625      	mov	r5, r4
 8010098:	4628      	mov	r0, r5
 801009a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801009c:	f000 fc62 	bl	8010964 <_malloc_usable_size_r>
 80100a0:	42a0      	cmp	r0, r4
 80100a2:	d20f      	bcs.n	80100c4 <_realloc_r+0x48>
 80100a4:	4621      	mov	r1, r4
 80100a6:	4638      	mov	r0, r7
 80100a8:	f7ff fdba 	bl	800fc20 <_malloc_r>
 80100ac:	4605      	mov	r5, r0
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d0f2      	beq.n	8010098 <_realloc_r+0x1c>
 80100b2:	4631      	mov	r1, r6
 80100b4:	4622      	mov	r2, r4
 80100b6:	f7ff f9c7 	bl	800f448 <memcpy>
 80100ba:	4631      	mov	r1, r6
 80100bc:	4638      	mov	r0, r7
 80100be:	f7ff fd5f 	bl	800fb80 <_free_r>
 80100c2:	e7e9      	b.n	8010098 <_realloc_r+0x1c>
 80100c4:	4635      	mov	r5, r6
 80100c6:	e7e7      	b.n	8010098 <_realloc_r+0x1c>

080100c8 <__sfputc_r>:
 80100c8:	6893      	ldr	r3, [r2, #8]
 80100ca:	3b01      	subs	r3, #1
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	b410      	push	{r4}
 80100d0:	6093      	str	r3, [r2, #8]
 80100d2:	da08      	bge.n	80100e6 <__sfputc_r+0x1e>
 80100d4:	6994      	ldr	r4, [r2, #24]
 80100d6:	42a3      	cmp	r3, r4
 80100d8:	db01      	blt.n	80100de <__sfputc_r+0x16>
 80100da:	290a      	cmp	r1, #10
 80100dc:	d103      	bne.n	80100e6 <__sfputc_r+0x1e>
 80100de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100e2:	f000 b94b 	b.w	801037c <__swbuf_r>
 80100e6:	6813      	ldr	r3, [r2, #0]
 80100e8:	1c58      	adds	r0, r3, #1
 80100ea:	6010      	str	r0, [r2, #0]
 80100ec:	7019      	strb	r1, [r3, #0]
 80100ee:	4608      	mov	r0, r1
 80100f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <__sfputs_r>:
 80100f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100f8:	4606      	mov	r6, r0
 80100fa:	460f      	mov	r7, r1
 80100fc:	4614      	mov	r4, r2
 80100fe:	18d5      	adds	r5, r2, r3
 8010100:	42ac      	cmp	r4, r5
 8010102:	d101      	bne.n	8010108 <__sfputs_r+0x12>
 8010104:	2000      	movs	r0, #0
 8010106:	e007      	b.n	8010118 <__sfputs_r+0x22>
 8010108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801010c:	463a      	mov	r2, r7
 801010e:	4630      	mov	r0, r6
 8010110:	f7ff ffda 	bl	80100c8 <__sfputc_r>
 8010114:	1c43      	adds	r3, r0, #1
 8010116:	d1f3      	bne.n	8010100 <__sfputs_r+0xa>
 8010118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801011c <_vfiprintf_r>:
 801011c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010120:	460d      	mov	r5, r1
 8010122:	b09d      	sub	sp, #116	; 0x74
 8010124:	4614      	mov	r4, r2
 8010126:	4698      	mov	r8, r3
 8010128:	4606      	mov	r6, r0
 801012a:	b118      	cbz	r0, 8010134 <_vfiprintf_r+0x18>
 801012c:	6983      	ldr	r3, [r0, #24]
 801012e:	b90b      	cbnz	r3, 8010134 <_vfiprintf_r+0x18>
 8010130:	f000 fb14 	bl	801075c <__sinit>
 8010134:	4b89      	ldr	r3, [pc, #548]	; (801035c <_vfiprintf_r+0x240>)
 8010136:	429d      	cmp	r5, r3
 8010138:	d11b      	bne.n	8010172 <_vfiprintf_r+0x56>
 801013a:	6875      	ldr	r5, [r6, #4]
 801013c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801013e:	07d9      	lsls	r1, r3, #31
 8010140:	d405      	bmi.n	801014e <_vfiprintf_r+0x32>
 8010142:	89ab      	ldrh	r3, [r5, #12]
 8010144:	059a      	lsls	r2, r3, #22
 8010146:	d402      	bmi.n	801014e <_vfiprintf_r+0x32>
 8010148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801014a:	f000 fba5 	bl	8010898 <__retarget_lock_acquire_recursive>
 801014e:	89ab      	ldrh	r3, [r5, #12]
 8010150:	071b      	lsls	r3, r3, #28
 8010152:	d501      	bpl.n	8010158 <_vfiprintf_r+0x3c>
 8010154:	692b      	ldr	r3, [r5, #16]
 8010156:	b9eb      	cbnz	r3, 8010194 <_vfiprintf_r+0x78>
 8010158:	4629      	mov	r1, r5
 801015a:	4630      	mov	r0, r6
 801015c:	f000 f96e 	bl	801043c <__swsetup_r>
 8010160:	b1c0      	cbz	r0, 8010194 <_vfiprintf_r+0x78>
 8010162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010164:	07dc      	lsls	r4, r3, #31
 8010166:	d50e      	bpl.n	8010186 <_vfiprintf_r+0x6a>
 8010168:	f04f 30ff 	mov.w	r0, #4294967295
 801016c:	b01d      	add	sp, #116	; 0x74
 801016e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010172:	4b7b      	ldr	r3, [pc, #492]	; (8010360 <_vfiprintf_r+0x244>)
 8010174:	429d      	cmp	r5, r3
 8010176:	d101      	bne.n	801017c <_vfiprintf_r+0x60>
 8010178:	68b5      	ldr	r5, [r6, #8]
 801017a:	e7df      	b.n	801013c <_vfiprintf_r+0x20>
 801017c:	4b79      	ldr	r3, [pc, #484]	; (8010364 <_vfiprintf_r+0x248>)
 801017e:	429d      	cmp	r5, r3
 8010180:	bf08      	it	eq
 8010182:	68f5      	ldreq	r5, [r6, #12]
 8010184:	e7da      	b.n	801013c <_vfiprintf_r+0x20>
 8010186:	89ab      	ldrh	r3, [r5, #12]
 8010188:	0598      	lsls	r0, r3, #22
 801018a:	d4ed      	bmi.n	8010168 <_vfiprintf_r+0x4c>
 801018c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801018e:	f000 fb84 	bl	801089a <__retarget_lock_release_recursive>
 8010192:	e7e9      	b.n	8010168 <_vfiprintf_r+0x4c>
 8010194:	2300      	movs	r3, #0
 8010196:	9309      	str	r3, [sp, #36]	; 0x24
 8010198:	2320      	movs	r3, #32
 801019a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801019e:	f8cd 800c 	str.w	r8, [sp, #12]
 80101a2:	2330      	movs	r3, #48	; 0x30
 80101a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010368 <_vfiprintf_r+0x24c>
 80101a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101ac:	f04f 0901 	mov.w	r9, #1
 80101b0:	4623      	mov	r3, r4
 80101b2:	469a      	mov	sl, r3
 80101b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101b8:	b10a      	cbz	r2, 80101be <_vfiprintf_r+0xa2>
 80101ba:	2a25      	cmp	r2, #37	; 0x25
 80101bc:	d1f9      	bne.n	80101b2 <_vfiprintf_r+0x96>
 80101be:	ebba 0b04 	subs.w	fp, sl, r4
 80101c2:	d00b      	beq.n	80101dc <_vfiprintf_r+0xc0>
 80101c4:	465b      	mov	r3, fp
 80101c6:	4622      	mov	r2, r4
 80101c8:	4629      	mov	r1, r5
 80101ca:	4630      	mov	r0, r6
 80101cc:	f7ff ff93 	bl	80100f6 <__sfputs_r>
 80101d0:	3001      	adds	r0, #1
 80101d2:	f000 80aa 	beq.w	801032a <_vfiprintf_r+0x20e>
 80101d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101d8:	445a      	add	r2, fp
 80101da:	9209      	str	r2, [sp, #36]	; 0x24
 80101dc:	f89a 3000 	ldrb.w	r3, [sl]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f000 80a2 	beq.w	801032a <_vfiprintf_r+0x20e>
 80101e6:	2300      	movs	r3, #0
 80101e8:	f04f 32ff 	mov.w	r2, #4294967295
 80101ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101f0:	f10a 0a01 	add.w	sl, sl, #1
 80101f4:	9304      	str	r3, [sp, #16]
 80101f6:	9307      	str	r3, [sp, #28]
 80101f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101fc:	931a      	str	r3, [sp, #104]	; 0x68
 80101fe:	4654      	mov	r4, sl
 8010200:	2205      	movs	r2, #5
 8010202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010206:	4858      	ldr	r0, [pc, #352]	; (8010368 <_vfiprintf_r+0x24c>)
 8010208:	f7ef fff2 	bl	80001f0 <memchr>
 801020c:	9a04      	ldr	r2, [sp, #16]
 801020e:	b9d8      	cbnz	r0, 8010248 <_vfiprintf_r+0x12c>
 8010210:	06d1      	lsls	r1, r2, #27
 8010212:	bf44      	itt	mi
 8010214:	2320      	movmi	r3, #32
 8010216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801021a:	0713      	lsls	r3, r2, #28
 801021c:	bf44      	itt	mi
 801021e:	232b      	movmi	r3, #43	; 0x2b
 8010220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010224:	f89a 3000 	ldrb.w	r3, [sl]
 8010228:	2b2a      	cmp	r3, #42	; 0x2a
 801022a:	d015      	beq.n	8010258 <_vfiprintf_r+0x13c>
 801022c:	9a07      	ldr	r2, [sp, #28]
 801022e:	4654      	mov	r4, sl
 8010230:	2000      	movs	r0, #0
 8010232:	f04f 0c0a 	mov.w	ip, #10
 8010236:	4621      	mov	r1, r4
 8010238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801023c:	3b30      	subs	r3, #48	; 0x30
 801023e:	2b09      	cmp	r3, #9
 8010240:	d94e      	bls.n	80102e0 <_vfiprintf_r+0x1c4>
 8010242:	b1b0      	cbz	r0, 8010272 <_vfiprintf_r+0x156>
 8010244:	9207      	str	r2, [sp, #28]
 8010246:	e014      	b.n	8010272 <_vfiprintf_r+0x156>
 8010248:	eba0 0308 	sub.w	r3, r0, r8
 801024c:	fa09 f303 	lsl.w	r3, r9, r3
 8010250:	4313      	orrs	r3, r2
 8010252:	9304      	str	r3, [sp, #16]
 8010254:	46a2      	mov	sl, r4
 8010256:	e7d2      	b.n	80101fe <_vfiprintf_r+0xe2>
 8010258:	9b03      	ldr	r3, [sp, #12]
 801025a:	1d19      	adds	r1, r3, #4
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	9103      	str	r1, [sp, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	bfbb      	ittet	lt
 8010264:	425b      	neglt	r3, r3
 8010266:	f042 0202 	orrlt.w	r2, r2, #2
 801026a:	9307      	strge	r3, [sp, #28]
 801026c:	9307      	strlt	r3, [sp, #28]
 801026e:	bfb8      	it	lt
 8010270:	9204      	strlt	r2, [sp, #16]
 8010272:	7823      	ldrb	r3, [r4, #0]
 8010274:	2b2e      	cmp	r3, #46	; 0x2e
 8010276:	d10c      	bne.n	8010292 <_vfiprintf_r+0x176>
 8010278:	7863      	ldrb	r3, [r4, #1]
 801027a:	2b2a      	cmp	r3, #42	; 0x2a
 801027c:	d135      	bne.n	80102ea <_vfiprintf_r+0x1ce>
 801027e:	9b03      	ldr	r3, [sp, #12]
 8010280:	1d1a      	adds	r2, r3, #4
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	9203      	str	r2, [sp, #12]
 8010286:	2b00      	cmp	r3, #0
 8010288:	bfb8      	it	lt
 801028a:	f04f 33ff 	movlt.w	r3, #4294967295
 801028e:	3402      	adds	r4, #2
 8010290:	9305      	str	r3, [sp, #20]
 8010292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010378 <_vfiprintf_r+0x25c>
 8010296:	7821      	ldrb	r1, [r4, #0]
 8010298:	2203      	movs	r2, #3
 801029a:	4650      	mov	r0, sl
 801029c:	f7ef ffa8 	bl	80001f0 <memchr>
 80102a0:	b140      	cbz	r0, 80102b4 <_vfiprintf_r+0x198>
 80102a2:	2340      	movs	r3, #64	; 0x40
 80102a4:	eba0 000a 	sub.w	r0, r0, sl
 80102a8:	fa03 f000 	lsl.w	r0, r3, r0
 80102ac:	9b04      	ldr	r3, [sp, #16]
 80102ae:	4303      	orrs	r3, r0
 80102b0:	3401      	adds	r4, #1
 80102b2:	9304      	str	r3, [sp, #16]
 80102b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102b8:	482c      	ldr	r0, [pc, #176]	; (801036c <_vfiprintf_r+0x250>)
 80102ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102be:	2206      	movs	r2, #6
 80102c0:	f7ef ff96 	bl	80001f0 <memchr>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d03f      	beq.n	8010348 <_vfiprintf_r+0x22c>
 80102c8:	4b29      	ldr	r3, [pc, #164]	; (8010370 <_vfiprintf_r+0x254>)
 80102ca:	bb1b      	cbnz	r3, 8010314 <_vfiprintf_r+0x1f8>
 80102cc:	9b03      	ldr	r3, [sp, #12]
 80102ce:	3307      	adds	r3, #7
 80102d0:	f023 0307 	bic.w	r3, r3, #7
 80102d4:	3308      	adds	r3, #8
 80102d6:	9303      	str	r3, [sp, #12]
 80102d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102da:	443b      	add	r3, r7
 80102dc:	9309      	str	r3, [sp, #36]	; 0x24
 80102de:	e767      	b.n	80101b0 <_vfiprintf_r+0x94>
 80102e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80102e4:	460c      	mov	r4, r1
 80102e6:	2001      	movs	r0, #1
 80102e8:	e7a5      	b.n	8010236 <_vfiprintf_r+0x11a>
 80102ea:	2300      	movs	r3, #0
 80102ec:	3401      	adds	r4, #1
 80102ee:	9305      	str	r3, [sp, #20]
 80102f0:	4619      	mov	r1, r3
 80102f2:	f04f 0c0a 	mov.w	ip, #10
 80102f6:	4620      	mov	r0, r4
 80102f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102fc:	3a30      	subs	r2, #48	; 0x30
 80102fe:	2a09      	cmp	r2, #9
 8010300:	d903      	bls.n	801030a <_vfiprintf_r+0x1ee>
 8010302:	2b00      	cmp	r3, #0
 8010304:	d0c5      	beq.n	8010292 <_vfiprintf_r+0x176>
 8010306:	9105      	str	r1, [sp, #20]
 8010308:	e7c3      	b.n	8010292 <_vfiprintf_r+0x176>
 801030a:	fb0c 2101 	mla	r1, ip, r1, r2
 801030e:	4604      	mov	r4, r0
 8010310:	2301      	movs	r3, #1
 8010312:	e7f0      	b.n	80102f6 <_vfiprintf_r+0x1da>
 8010314:	ab03      	add	r3, sp, #12
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	462a      	mov	r2, r5
 801031a:	4b16      	ldr	r3, [pc, #88]	; (8010374 <_vfiprintf_r+0x258>)
 801031c:	a904      	add	r1, sp, #16
 801031e:	4630      	mov	r0, r6
 8010320:	f7fd fe24 	bl	800df6c <_printf_float>
 8010324:	4607      	mov	r7, r0
 8010326:	1c78      	adds	r0, r7, #1
 8010328:	d1d6      	bne.n	80102d8 <_vfiprintf_r+0x1bc>
 801032a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801032c:	07d9      	lsls	r1, r3, #31
 801032e:	d405      	bmi.n	801033c <_vfiprintf_r+0x220>
 8010330:	89ab      	ldrh	r3, [r5, #12]
 8010332:	059a      	lsls	r2, r3, #22
 8010334:	d402      	bmi.n	801033c <_vfiprintf_r+0x220>
 8010336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010338:	f000 faaf 	bl	801089a <__retarget_lock_release_recursive>
 801033c:	89ab      	ldrh	r3, [r5, #12]
 801033e:	065b      	lsls	r3, r3, #25
 8010340:	f53f af12 	bmi.w	8010168 <_vfiprintf_r+0x4c>
 8010344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010346:	e711      	b.n	801016c <_vfiprintf_r+0x50>
 8010348:	ab03      	add	r3, sp, #12
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	462a      	mov	r2, r5
 801034e:	4b09      	ldr	r3, [pc, #36]	; (8010374 <_vfiprintf_r+0x258>)
 8010350:	a904      	add	r1, sp, #16
 8010352:	4630      	mov	r0, r6
 8010354:	f7fe f8ae 	bl	800e4b4 <_printf_i>
 8010358:	e7e4      	b.n	8010324 <_vfiprintf_r+0x208>
 801035a:	bf00      	nop
 801035c:	08011034 	.word	0x08011034
 8010360:	08011054 	.word	0x08011054
 8010364:	08011014 	.word	0x08011014
 8010368:	08010ebc 	.word	0x08010ebc
 801036c:	08010ec6 	.word	0x08010ec6
 8010370:	0800df6d 	.word	0x0800df6d
 8010374:	080100f7 	.word	0x080100f7
 8010378:	08010ec2 	.word	0x08010ec2

0801037c <__swbuf_r>:
 801037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037e:	460e      	mov	r6, r1
 8010380:	4614      	mov	r4, r2
 8010382:	4605      	mov	r5, r0
 8010384:	b118      	cbz	r0, 801038e <__swbuf_r+0x12>
 8010386:	6983      	ldr	r3, [r0, #24]
 8010388:	b90b      	cbnz	r3, 801038e <__swbuf_r+0x12>
 801038a:	f000 f9e7 	bl	801075c <__sinit>
 801038e:	4b21      	ldr	r3, [pc, #132]	; (8010414 <__swbuf_r+0x98>)
 8010390:	429c      	cmp	r4, r3
 8010392:	d12b      	bne.n	80103ec <__swbuf_r+0x70>
 8010394:	686c      	ldr	r4, [r5, #4]
 8010396:	69a3      	ldr	r3, [r4, #24]
 8010398:	60a3      	str	r3, [r4, #8]
 801039a:	89a3      	ldrh	r3, [r4, #12]
 801039c:	071a      	lsls	r2, r3, #28
 801039e:	d52f      	bpl.n	8010400 <__swbuf_r+0x84>
 80103a0:	6923      	ldr	r3, [r4, #16]
 80103a2:	b36b      	cbz	r3, 8010400 <__swbuf_r+0x84>
 80103a4:	6923      	ldr	r3, [r4, #16]
 80103a6:	6820      	ldr	r0, [r4, #0]
 80103a8:	1ac0      	subs	r0, r0, r3
 80103aa:	6963      	ldr	r3, [r4, #20]
 80103ac:	b2f6      	uxtb	r6, r6
 80103ae:	4283      	cmp	r3, r0
 80103b0:	4637      	mov	r7, r6
 80103b2:	dc04      	bgt.n	80103be <__swbuf_r+0x42>
 80103b4:	4621      	mov	r1, r4
 80103b6:	4628      	mov	r0, r5
 80103b8:	f000 f93c 	bl	8010634 <_fflush_r>
 80103bc:	bb30      	cbnz	r0, 801040c <__swbuf_r+0x90>
 80103be:	68a3      	ldr	r3, [r4, #8]
 80103c0:	3b01      	subs	r3, #1
 80103c2:	60a3      	str	r3, [r4, #8]
 80103c4:	6823      	ldr	r3, [r4, #0]
 80103c6:	1c5a      	adds	r2, r3, #1
 80103c8:	6022      	str	r2, [r4, #0]
 80103ca:	701e      	strb	r6, [r3, #0]
 80103cc:	6963      	ldr	r3, [r4, #20]
 80103ce:	3001      	adds	r0, #1
 80103d0:	4283      	cmp	r3, r0
 80103d2:	d004      	beq.n	80103de <__swbuf_r+0x62>
 80103d4:	89a3      	ldrh	r3, [r4, #12]
 80103d6:	07db      	lsls	r3, r3, #31
 80103d8:	d506      	bpl.n	80103e8 <__swbuf_r+0x6c>
 80103da:	2e0a      	cmp	r6, #10
 80103dc:	d104      	bne.n	80103e8 <__swbuf_r+0x6c>
 80103de:	4621      	mov	r1, r4
 80103e0:	4628      	mov	r0, r5
 80103e2:	f000 f927 	bl	8010634 <_fflush_r>
 80103e6:	b988      	cbnz	r0, 801040c <__swbuf_r+0x90>
 80103e8:	4638      	mov	r0, r7
 80103ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ec:	4b0a      	ldr	r3, [pc, #40]	; (8010418 <__swbuf_r+0x9c>)
 80103ee:	429c      	cmp	r4, r3
 80103f0:	d101      	bne.n	80103f6 <__swbuf_r+0x7a>
 80103f2:	68ac      	ldr	r4, [r5, #8]
 80103f4:	e7cf      	b.n	8010396 <__swbuf_r+0x1a>
 80103f6:	4b09      	ldr	r3, [pc, #36]	; (801041c <__swbuf_r+0xa0>)
 80103f8:	429c      	cmp	r4, r3
 80103fa:	bf08      	it	eq
 80103fc:	68ec      	ldreq	r4, [r5, #12]
 80103fe:	e7ca      	b.n	8010396 <__swbuf_r+0x1a>
 8010400:	4621      	mov	r1, r4
 8010402:	4628      	mov	r0, r5
 8010404:	f000 f81a 	bl	801043c <__swsetup_r>
 8010408:	2800      	cmp	r0, #0
 801040a:	d0cb      	beq.n	80103a4 <__swbuf_r+0x28>
 801040c:	f04f 37ff 	mov.w	r7, #4294967295
 8010410:	e7ea      	b.n	80103e8 <__swbuf_r+0x6c>
 8010412:	bf00      	nop
 8010414:	08011034 	.word	0x08011034
 8010418:	08011054 	.word	0x08011054
 801041c:	08011014 	.word	0x08011014

08010420 <__ascii_wctomb>:
 8010420:	b149      	cbz	r1, 8010436 <__ascii_wctomb+0x16>
 8010422:	2aff      	cmp	r2, #255	; 0xff
 8010424:	bf85      	ittet	hi
 8010426:	238a      	movhi	r3, #138	; 0x8a
 8010428:	6003      	strhi	r3, [r0, #0]
 801042a:	700a      	strbls	r2, [r1, #0]
 801042c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010430:	bf98      	it	ls
 8010432:	2001      	movls	r0, #1
 8010434:	4770      	bx	lr
 8010436:	4608      	mov	r0, r1
 8010438:	4770      	bx	lr
	...

0801043c <__swsetup_r>:
 801043c:	4b32      	ldr	r3, [pc, #200]	; (8010508 <__swsetup_r+0xcc>)
 801043e:	b570      	push	{r4, r5, r6, lr}
 8010440:	681d      	ldr	r5, [r3, #0]
 8010442:	4606      	mov	r6, r0
 8010444:	460c      	mov	r4, r1
 8010446:	b125      	cbz	r5, 8010452 <__swsetup_r+0x16>
 8010448:	69ab      	ldr	r3, [r5, #24]
 801044a:	b913      	cbnz	r3, 8010452 <__swsetup_r+0x16>
 801044c:	4628      	mov	r0, r5
 801044e:	f000 f985 	bl	801075c <__sinit>
 8010452:	4b2e      	ldr	r3, [pc, #184]	; (801050c <__swsetup_r+0xd0>)
 8010454:	429c      	cmp	r4, r3
 8010456:	d10f      	bne.n	8010478 <__swsetup_r+0x3c>
 8010458:	686c      	ldr	r4, [r5, #4]
 801045a:	89a3      	ldrh	r3, [r4, #12]
 801045c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010460:	0719      	lsls	r1, r3, #28
 8010462:	d42c      	bmi.n	80104be <__swsetup_r+0x82>
 8010464:	06dd      	lsls	r5, r3, #27
 8010466:	d411      	bmi.n	801048c <__swsetup_r+0x50>
 8010468:	2309      	movs	r3, #9
 801046a:	6033      	str	r3, [r6, #0]
 801046c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010470:	81a3      	strh	r3, [r4, #12]
 8010472:	f04f 30ff 	mov.w	r0, #4294967295
 8010476:	e03e      	b.n	80104f6 <__swsetup_r+0xba>
 8010478:	4b25      	ldr	r3, [pc, #148]	; (8010510 <__swsetup_r+0xd4>)
 801047a:	429c      	cmp	r4, r3
 801047c:	d101      	bne.n	8010482 <__swsetup_r+0x46>
 801047e:	68ac      	ldr	r4, [r5, #8]
 8010480:	e7eb      	b.n	801045a <__swsetup_r+0x1e>
 8010482:	4b24      	ldr	r3, [pc, #144]	; (8010514 <__swsetup_r+0xd8>)
 8010484:	429c      	cmp	r4, r3
 8010486:	bf08      	it	eq
 8010488:	68ec      	ldreq	r4, [r5, #12]
 801048a:	e7e6      	b.n	801045a <__swsetup_r+0x1e>
 801048c:	0758      	lsls	r0, r3, #29
 801048e:	d512      	bpl.n	80104b6 <__swsetup_r+0x7a>
 8010490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010492:	b141      	cbz	r1, 80104a6 <__swsetup_r+0x6a>
 8010494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010498:	4299      	cmp	r1, r3
 801049a:	d002      	beq.n	80104a2 <__swsetup_r+0x66>
 801049c:	4630      	mov	r0, r6
 801049e:	f7ff fb6f 	bl	800fb80 <_free_r>
 80104a2:	2300      	movs	r3, #0
 80104a4:	6363      	str	r3, [r4, #52]	; 0x34
 80104a6:	89a3      	ldrh	r3, [r4, #12]
 80104a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104ac:	81a3      	strh	r3, [r4, #12]
 80104ae:	2300      	movs	r3, #0
 80104b0:	6063      	str	r3, [r4, #4]
 80104b2:	6923      	ldr	r3, [r4, #16]
 80104b4:	6023      	str	r3, [r4, #0]
 80104b6:	89a3      	ldrh	r3, [r4, #12]
 80104b8:	f043 0308 	orr.w	r3, r3, #8
 80104bc:	81a3      	strh	r3, [r4, #12]
 80104be:	6923      	ldr	r3, [r4, #16]
 80104c0:	b94b      	cbnz	r3, 80104d6 <__swsetup_r+0x9a>
 80104c2:	89a3      	ldrh	r3, [r4, #12]
 80104c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80104c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104cc:	d003      	beq.n	80104d6 <__swsetup_r+0x9a>
 80104ce:	4621      	mov	r1, r4
 80104d0:	4630      	mov	r0, r6
 80104d2:	f000 fa07 	bl	80108e4 <__smakebuf_r>
 80104d6:	89a0      	ldrh	r0, [r4, #12]
 80104d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104dc:	f010 0301 	ands.w	r3, r0, #1
 80104e0:	d00a      	beq.n	80104f8 <__swsetup_r+0xbc>
 80104e2:	2300      	movs	r3, #0
 80104e4:	60a3      	str	r3, [r4, #8]
 80104e6:	6963      	ldr	r3, [r4, #20]
 80104e8:	425b      	negs	r3, r3
 80104ea:	61a3      	str	r3, [r4, #24]
 80104ec:	6923      	ldr	r3, [r4, #16]
 80104ee:	b943      	cbnz	r3, 8010502 <__swsetup_r+0xc6>
 80104f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80104f4:	d1ba      	bne.n	801046c <__swsetup_r+0x30>
 80104f6:	bd70      	pop	{r4, r5, r6, pc}
 80104f8:	0781      	lsls	r1, r0, #30
 80104fa:	bf58      	it	pl
 80104fc:	6963      	ldrpl	r3, [r4, #20]
 80104fe:	60a3      	str	r3, [r4, #8]
 8010500:	e7f4      	b.n	80104ec <__swsetup_r+0xb0>
 8010502:	2000      	movs	r0, #0
 8010504:	e7f7      	b.n	80104f6 <__swsetup_r+0xba>
 8010506:	bf00      	nop
 8010508:	20000180 	.word	0x20000180
 801050c:	08011034 	.word	0x08011034
 8010510:	08011054 	.word	0x08011054
 8010514:	08011014 	.word	0x08011014

08010518 <abort>:
 8010518:	b508      	push	{r3, lr}
 801051a:	2006      	movs	r0, #6
 801051c:	f000 fa52 	bl	80109c4 <raise>
 8010520:	2001      	movs	r0, #1
 8010522:	f000 fb65 	bl	8010bf0 <_exit>
	...

08010528 <__sflush_r>:
 8010528:	898a      	ldrh	r2, [r1, #12]
 801052a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801052e:	4605      	mov	r5, r0
 8010530:	0710      	lsls	r0, r2, #28
 8010532:	460c      	mov	r4, r1
 8010534:	d458      	bmi.n	80105e8 <__sflush_r+0xc0>
 8010536:	684b      	ldr	r3, [r1, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	dc05      	bgt.n	8010548 <__sflush_r+0x20>
 801053c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801053e:	2b00      	cmp	r3, #0
 8010540:	dc02      	bgt.n	8010548 <__sflush_r+0x20>
 8010542:	2000      	movs	r0, #0
 8010544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801054a:	2e00      	cmp	r6, #0
 801054c:	d0f9      	beq.n	8010542 <__sflush_r+0x1a>
 801054e:	2300      	movs	r3, #0
 8010550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010554:	682f      	ldr	r7, [r5, #0]
 8010556:	602b      	str	r3, [r5, #0]
 8010558:	d032      	beq.n	80105c0 <__sflush_r+0x98>
 801055a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801055c:	89a3      	ldrh	r3, [r4, #12]
 801055e:	075a      	lsls	r2, r3, #29
 8010560:	d505      	bpl.n	801056e <__sflush_r+0x46>
 8010562:	6863      	ldr	r3, [r4, #4]
 8010564:	1ac0      	subs	r0, r0, r3
 8010566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010568:	b10b      	cbz	r3, 801056e <__sflush_r+0x46>
 801056a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801056c:	1ac0      	subs	r0, r0, r3
 801056e:	2300      	movs	r3, #0
 8010570:	4602      	mov	r2, r0
 8010572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010574:	6a21      	ldr	r1, [r4, #32]
 8010576:	4628      	mov	r0, r5
 8010578:	47b0      	blx	r6
 801057a:	1c43      	adds	r3, r0, #1
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	d106      	bne.n	801058e <__sflush_r+0x66>
 8010580:	6829      	ldr	r1, [r5, #0]
 8010582:	291d      	cmp	r1, #29
 8010584:	d82c      	bhi.n	80105e0 <__sflush_r+0xb8>
 8010586:	4a2a      	ldr	r2, [pc, #168]	; (8010630 <__sflush_r+0x108>)
 8010588:	40ca      	lsrs	r2, r1
 801058a:	07d6      	lsls	r6, r2, #31
 801058c:	d528      	bpl.n	80105e0 <__sflush_r+0xb8>
 801058e:	2200      	movs	r2, #0
 8010590:	6062      	str	r2, [r4, #4]
 8010592:	04d9      	lsls	r1, r3, #19
 8010594:	6922      	ldr	r2, [r4, #16]
 8010596:	6022      	str	r2, [r4, #0]
 8010598:	d504      	bpl.n	80105a4 <__sflush_r+0x7c>
 801059a:	1c42      	adds	r2, r0, #1
 801059c:	d101      	bne.n	80105a2 <__sflush_r+0x7a>
 801059e:	682b      	ldr	r3, [r5, #0]
 80105a0:	b903      	cbnz	r3, 80105a4 <__sflush_r+0x7c>
 80105a2:	6560      	str	r0, [r4, #84]	; 0x54
 80105a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105a6:	602f      	str	r7, [r5, #0]
 80105a8:	2900      	cmp	r1, #0
 80105aa:	d0ca      	beq.n	8010542 <__sflush_r+0x1a>
 80105ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105b0:	4299      	cmp	r1, r3
 80105b2:	d002      	beq.n	80105ba <__sflush_r+0x92>
 80105b4:	4628      	mov	r0, r5
 80105b6:	f7ff fae3 	bl	800fb80 <_free_r>
 80105ba:	2000      	movs	r0, #0
 80105bc:	6360      	str	r0, [r4, #52]	; 0x34
 80105be:	e7c1      	b.n	8010544 <__sflush_r+0x1c>
 80105c0:	6a21      	ldr	r1, [r4, #32]
 80105c2:	2301      	movs	r3, #1
 80105c4:	4628      	mov	r0, r5
 80105c6:	47b0      	blx	r6
 80105c8:	1c41      	adds	r1, r0, #1
 80105ca:	d1c7      	bne.n	801055c <__sflush_r+0x34>
 80105cc:	682b      	ldr	r3, [r5, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d0c4      	beq.n	801055c <__sflush_r+0x34>
 80105d2:	2b1d      	cmp	r3, #29
 80105d4:	d001      	beq.n	80105da <__sflush_r+0xb2>
 80105d6:	2b16      	cmp	r3, #22
 80105d8:	d101      	bne.n	80105de <__sflush_r+0xb6>
 80105da:	602f      	str	r7, [r5, #0]
 80105dc:	e7b1      	b.n	8010542 <__sflush_r+0x1a>
 80105de:	89a3      	ldrh	r3, [r4, #12]
 80105e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105e4:	81a3      	strh	r3, [r4, #12]
 80105e6:	e7ad      	b.n	8010544 <__sflush_r+0x1c>
 80105e8:	690f      	ldr	r7, [r1, #16]
 80105ea:	2f00      	cmp	r7, #0
 80105ec:	d0a9      	beq.n	8010542 <__sflush_r+0x1a>
 80105ee:	0793      	lsls	r3, r2, #30
 80105f0:	680e      	ldr	r6, [r1, #0]
 80105f2:	bf08      	it	eq
 80105f4:	694b      	ldreq	r3, [r1, #20]
 80105f6:	600f      	str	r7, [r1, #0]
 80105f8:	bf18      	it	ne
 80105fa:	2300      	movne	r3, #0
 80105fc:	eba6 0807 	sub.w	r8, r6, r7
 8010600:	608b      	str	r3, [r1, #8]
 8010602:	f1b8 0f00 	cmp.w	r8, #0
 8010606:	dd9c      	ble.n	8010542 <__sflush_r+0x1a>
 8010608:	6a21      	ldr	r1, [r4, #32]
 801060a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801060c:	4643      	mov	r3, r8
 801060e:	463a      	mov	r2, r7
 8010610:	4628      	mov	r0, r5
 8010612:	47b0      	blx	r6
 8010614:	2800      	cmp	r0, #0
 8010616:	dc06      	bgt.n	8010626 <__sflush_r+0xfe>
 8010618:	89a3      	ldrh	r3, [r4, #12]
 801061a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801061e:	81a3      	strh	r3, [r4, #12]
 8010620:	f04f 30ff 	mov.w	r0, #4294967295
 8010624:	e78e      	b.n	8010544 <__sflush_r+0x1c>
 8010626:	4407      	add	r7, r0
 8010628:	eba8 0800 	sub.w	r8, r8, r0
 801062c:	e7e9      	b.n	8010602 <__sflush_r+0xda>
 801062e:	bf00      	nop
 8010630:	20400001 	.word	0x20400001

08010634 <_fflush_r>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	690b      	ldr	r3, [r1, #16]
 8010638:	4605      	mov	r5, r0
 801063a:	460c      	mov	r4, r1
 801063c:	b913      	cbnz	r3, 8010644 <_fflush_r+0x10>
 801063e:	2500      	movs	r5, #0
 8010640:	4628      	mov	r0, r5
 8010642:	bd38      	pop	{r3, r4, r5, pc}
 8010644:	b118      	cbz	r0, 801064e <_fflush_r+0x1a>
 8010646:	6983      	ldr	r3, [r0, #24]
 8010648:	b90b      	cbnz	r3, 801064e <_fflush_r+0x1a>
 801064a:	f000 f887 	bl	801075c <__sinit>
 801064e:	4b14      	ldr	r3, [pc, #80]	; (80106a0 <_fflush_r+0x6c>)
 8010650:	429c      	cmp	r4, r3
 8010652:	d11b      	bne.n	801068c <_fflush_r+0x58>
 8010654:	686c      	ldr	r4, [r5, #4]
 8010656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d0ef      	beq.n	801063e <_fflush_r+0xa>
 801065e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010660:	07d0      	lsls	r0, r2, #31
 8010662:	d404      	bmi.n	801066e <_fflush_r+0x3a>
 8010664:	0599      	lsls	r1, r3, #22
 8010666:	d402      	bmi.n	801066e <_fflush_r+0x3a>
 8010668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801066a:	f000 f915 	bl	8010898 <__retarget_lock_acquire_recursive>
 801066e:	4628      	mov	r0, r5
 8010670:	4621      	mov	r1, r4
 8010672:	f7ff ff59 	bl	8010528 <__sflush_r>
 8010676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010678:	07da      	lsls	r2, r3, #31
 801067a:	4605      	mov	r5, r0
 801067c:	d4e0      	bmi.n	8010640 <_fflush_r+0xc>
 801067e:	89a3      	ldrh	r3, [r4, #12]
 8010680:	059b      	lsls	r3, r3, #22
 8010682:	d4dd      	bmi.n	8010640 <_fflush_r+0xc>
 8010684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010686:	f000 f908 	bl	801089a <__retarget_lock_release_recursive>
 801068a:	e7d9      	b.n	8010640 <_fflush_r+0xc>
 801068c:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <_fflush_r+0x70>)
 801068e:	429c      	cmp	r4, r3
 8010690:	d101      	bne.n	8010696 <_fflush_r+0x62>
 8010692:	68ac      	ldr	r4, [r5, #8]
 8010694:	e7df      	b.n	8010656 <_fflush_r+0x22>
 8010696:	4b04      	ldr	r3, [pc, #16]	; (80106a8 <_fflush_r+0x74>)
 8010698:	429c      	cmp	r4, r3
 801069a:	bf08      	it	eq
 801069c:	68ec      	ldreq	r4, [r5, #12]
 801069e:	e7da      	b.n	8010656 <_fflush_r+0x22>
 80106a0:	08011034 	.word	0x08011034
 80106a4:	08011054 	.word	0x08011054
 80106a8:	08011014 	.word	0x08011014

080106ac <std>:
 80106ac:	2300      	movs	r3, #0
 80106ae:	b510      	push	{r4, lr}
 80106b0:	4604      	mov	r4, r0
 80106b2:	e9c0 3300 	strd	r3, r3, [r0]
 80106b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106ba:	6083      	str	r3, [r0, #8]
 80106bc:	8181      	strh	r1, [r0, #12]
 80106be:	6643      	str	r3, [r0, #100]	; 0x64
 80106c0:	81c2      	strh	r2, [r0, #14]
 80106c2:	6183      	str	r3, [r0, #24]
 80106c4:	4619      	mov	r1, r3
 80106c6:	2208      	movs	r2, #8
 80106c8:	305c      	adds	r0, #92	; 0x5c
 80106ca:	f7fd fba7 	bl	800de1c <memset>
 80106ce:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <std+0x38>)
 80106d0:	6263      	str	r3, [r4, #36]	; 0x24
 80106d2:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <std+0x3c>)
 80106d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80106d6:	4b05      	ldr	r3, [pc, #20]	; (80106ec <std+0x40>)
 80106d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80106da:	4b05      	ldr	r3, [pc, #20]	; (80106f0 <std+0x44>)
 80106dc:	6224      	str	r4, [r4, #32]
 80106de:	6323      	str	r3, [r4, #48]	; 0x30
 80106e0:	bd10      	pop	{r4, pc}
 80106e2:	bf00      	nop
 80106e4:	080109fd 	.word	0x080109fd
 80106e8:	08010a1f 	.word	0x08010a1f
 80106ec:	08010a57 	.word	0x08010a57
 80106f0:	08010a7b 	.word	0x08010a7b

080106f4 <_cleanup_r>:
 80106f4:	4901      	ldr	r1, [pc, #4]	; (80106fc <_cleanup_r+0x8>)
 80106f6:	f000 b8af 	b.w	8010858 <_fwalk_reent>
 80106fa:	bf00      	nop
 80106fc:	08010635 	.word	0x08010635

08010700 <__sfmoreglue>:
 8010700:	b570      	push	{r4, r5, r6, lr}
 8010702:	1e4a      	subs	r2, r1, #1
 8010704:	2568      	movs	r5, #104	; 0x68
 8010706:	4355      	muls	r5, r2
 8010708:	460e      	mov	r6, r1
 801070a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801070e:	f7ff fa87 	bl	800fc20 <_malloc_r>
 8010712:	4604      	mov	r4, r0
 8010714:	b140      	cbz	r0, 8010728 <__sfmoreglue+0x28>
 8010716:	2100      	movs	r1, #0
 8010718:	e9c0 1600 	strd	r1, r6, [r0]
 801071c:	300c      	adds	r0, #12
 801071e:	60a0      	str	r0, [r4, #8]
 8010720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010724:	f7fd fb7a 	bl	800de1c <memset>
 8010728:	4620      	mov	r0, r4
 801072a:	bd70      	pop	{r4, r5, r6, pc}

0801072c <__sfp_lock_acquire>:
 801072c:	4801      	ldr	r0, [pc, #4]	; (8010734 <__sfp_lock_acquire+0x8>)
 801072e:	f000 b8b3 	b.w	8010898 <__retarget_lock_acquire_recursive>
 8010732:	bf00      	nop
 8010734:	2000260c 	.word	0x2000260c

08010738 <__sfp_lock_release>:
 8010738:	4801      	ldr	r0, [pc, #4]	; (8010740 <__sfp_lock_release+0x8>)
 801073a:	f000 b8ae 	b.w	801089a <__retarget_lock_release_recursive>
 801073e:	bf00      	nop
 8010740:	2000260c 	.word	0x2000260c

08010744 <__sinit_lock_acquire>:
 8010744:	4801      	ldr	r0, [pc, #4]	; (801074c <__sinit_lock_acquire+0x8>)
 8010746:	f000 b8a7 	b.w	8010898 <__retarget_lock_acquire_recursive>
 801074a:	bf00      	nop
 801074c:	20002607 	.word	0x20002607

08010750 <__sinit_lock_release>:
 8010750:	4801      	ldr	r0, [pc, #4]	; (8010758 <__sinit_lock_release+0x8>)
 8010752:	f000 b8a2 	b.w	801089a <__retarget_lock_release_recursive>
 8010756:	bf00      	nop
 8010758:	20002607 	.word	0x20002607

0801075c <__sinit>:
 801075c:	b510      	push	{r4, lr}
 801075e:	4604      	mov	r4, r0
 8010760:	f7ff fff0 	bl	8010744 <__sinit_lock_acquire>
 8010764:	69a3      	ldr	r3, [r4, #24]
 8010766:	b11b      	cbz	r3, 8010770 <__sinit+0x14>
 8010768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801076c:	f7ff bff0 	b.w	8010750 <__sinit_lock_release>
 8010770:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010774:	6523      	str	r3, [r4, #80]	; 0x50
 8010776:	4b13      	ldr	r3, [pc, #76]	; (80107c4 <__sinit+0x68>)
 8010778:	4a13      	ldr	r2, [pc, #76]	; (80107c8 <__sinit+0x6c>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	62a2      	str	r2, [r4, #40]	; 0x28
 801077e:	42a3      	cmp	r3, r4
 8010780:	bf04      	itt	eq
 8010782:	2301      	moveq	r3, #1
 8010784:	61a3      	streq	r3, [r4, #24]
 8010786:	4620      	mov	r0, r4
 8010788:	f000 f820 	bl	80107cc <__sfp>
 801078c:	6060      	str	r0, [r4, #4]
 801078e:	4620      	mov	r0, r4
 8010790:	f000 f81c 	bl	80107cc <__sfp>
 8010794:	60a0      	str	r0, [r4, #8]
 8010796:	4620      	mov	r0, r4
 8010798:	f000 f818 	bl	80107cc <__sfp>
 801079c:	2200      	movs	r2, #0
 801079e:	60e0      	str	r0, [r4, #12]
 80107a0:	2104      	movs	r1, #4
 80107a2:	6860      	ldr	r0, [r4, #4]
 80107a4:	f7ff ff82 	bl	80106ac <std>
 80107a8:	68a0      	ldr	r0, [r4, #8]
 80107aa:	2201      	movs	r2, #1
 80107ac:	2109      	movs	r1, #9
 80107ae:	f7ff ff7d 	bl	80106ac <std>
 80107b2:	68e0      	ldr	r0, [r4, #12]
 80107b4:	2202      	movs	r2, #2
 80107b6:	2112      	movs	r1, #18
 80107b8:	f7ff ff78 	bl	80106ac <std>
 80107bc:	2301      	movs	r3, #1
 80107be:	61a3      	str	r3, [r4, #24]
 80107c0:	e7d2      	b.n	8010768 <__sinit+0xc>
 80107c2:	bf00      	nop
 80107c4:	08010c94 	.word	0x08010c94
 80107c8:	080106f5 	.word	0x080106f5

080107cc <__sfp>:
 80107cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ce:	4607      	mov	r7, r0
 80107d0:	f7ff ffac 	bl	801072c <__sfp_lock_acquire>
 80107d4:	4b1e      	ldr	r3, [pc, #120]	; (8010850 <__sfp+0x84>)
 80107d6:	681e      	ldr	r6, [r3, #0]
 80107d8:	69b3      	ldr	r3, [r6, #24]
 80107da:	b913      	cbnz	r3, 80107e2 <__sfp+0x16>
 80107dc:	4630      	mov	r0, r6
 80107de:	f7ff ffbd 	bl	801075c <__sinit>
 80107e2:	3648      	adds	r6, #72	; 0x48
 80107e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80107e8:	3b01      	subs	r3, #1
 80107ea:	d503      	bpl.n	80107f4 <__sfp+0x28>
 80107ec:	6833      	ldr	r3, [r6, #0]
 80107ee:	b30b      	cbz	r3, 8010834 <__sfp+0x68>
 80107f0:	6836      	ldr	r6, [r6, #0]
 80107f2:	e7f7      	b.n	80107e4 <__sfp+0x18>
 80107f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80107f8:	b9d5      	cbnz	r5, 8010830 <__sfp+0x64>
 80107fa:	4b16      	ldr	r3, [pc, #88]	; (8010854 <__sfp+0x88>)
 80107fc:	60e3      	str	r3, [r4, #12]
 80107fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010802:	6665      	str	r5, [r4, #100]	; 0x64
 8010804:	f000 f847 	bl	8010896 <__retarget_lock_init_recursive>
 8010808:	f7ff ff96 	bl	8010738 <__sfp_lock_release>
 801080c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010810:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010814:	6025      	str	r5, [r4, #0]
 8010816:	61a5      	str	r5, [r4, #24]
 8010818:	2208      	movs	r2, #8
 801081a:	4629      	mov	r1, r5
 801081c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010820:	f7fd fafc 	bl	800de1c <memset>
 8010824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801082c:	4620      	mov	r0, r4
 801082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010830:	3468      	adds	r4, #104	; 0x68
 8010832:	e7d9      	b.n	80107e8 <__sfp+0x1c>
 8010834:	2104      	movs	r1, #4
 8010836:	4638      	mov	r0, r7
 8010838:	f7ff ff62 	bl	8010700 <__sfmoreglue>
 801083c:	4604      	mov	r4, r0
 801083e:	6030      	str	r0, [r6, #0]
 8010840:	2800      	cmp	r0, #0
 8010842:	d1d5      	bne.n	80107f0 <__sfp+0x24>
 8010844:	f7ff ff78 	bl	8010738 <__sfp_lock_release>
 8010848:	230c      	movs	r3, #12
 801084a:	603b      	str	r3, [r7, #0]
 801084c:	e7ee      	b.n	801082c <__sfp+0x60>
 801084e:	bf00      	nop
 8010850:	08010c94 	.word	0x08010c94
 8010854:	ffff0001 	.word	0xffff0001

08010858 <_fwalk_reent>:
 8010858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801085c:	4606      	mov	r6, r0
 801085e:	4688      	mov	r8, r1
 8010860:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010864:	2700      	movs	r7, #0
 8010866:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801086a:	f1b9 0901 	subs.w	r9, r9, #1
 801086e:	d505      	bpl.n	801087c <_fwalk_reent+0x24>
 8010870:	6824      	ldr	r4, [r4, #0]
 8010872:	2c00      	cmp	r4, #0
 8010874:	d1f7      	bne.n	8010866 <_fwalk_reent+0xe>
 8010876:	4638      	mov	r0, r7
 8010878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801087c:	89ab      	ldrh	r3, [r5, #12]
 801087e:	2b01      	cmp	r3, #1
 8010880:	d907      	bls.n	8010892 <_fwalk_reent+0x3a>
 8010882:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010886:	3301      	adds	r3, #1
 8010888:	d003      	beq.n	8010892 <_fwalk_reent+0x3a>
 801088a:	4629      	mov	r1, r5
 801088c:	4630      	mov	r0, r6
 801088e:	47c0      	blx	r8
 8010890:	4307      	orrs	r7, r0
 8010892:	3568      	adds	r5, #104	; 0x68
 8010894:	e7e9      	b.n	801086a <_fwalk_reent+0x12>

08010896 <__retarget_lock_init_recursive>:
 8010896:	4770      	bx	lr

08010898 <__retarget_lock_acquire_recursive>:
 8010898:	4770      	bx	lr

0801089a <__retarget_lock_release_recursive>:
 801089a:	4770      	bx	lr

0801089c <__swhatbuf_r>:
 801089c:	b570      	push	{r4, r5, r6, lr}
 801089e:	460e      	mov	r6, r1
 80108a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a4:	2900      	cmp	r1, #0
 80108a6:	b096      	sub	sp, #88	; 0x58
 80108a8:	4614      	mov	r4, r2
 80108aa:	461d      	mov	r5, r3
 80108ac:	da07      	bge.n	80108be <__swhatbuf_r+0x22>
 80108ae:	2300      	movs	r3, #0
 80108b0:	602b      	str	r3, [r5, #0]
 80108b2:	89b3      	ldrh	r3, [r6, #12]
 80108b4:	061a      	lsls	r2, r3, #24
 80108b6:	d410      	bmi.n	80108da <__swhatbuf_r+0x3e>
 80108b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108bc:	e00e      	b.n	80108dc <__swhatbuf_r+0x40>
 80108be:	466a      	mov	r2, sp
 80108c0:	f000 f902 	bl	8010ac8 <_fstat_r>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	dbf2      	blt.n	80108ae <__swhatbuf_r+0x12>
 80108c8:	9a01      	ldr	r2, [sp, #4]
 80108ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80108ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80108d2:	425a      	negs	r2, r3
 80108d4:	415a      	adcs	r2, r3
 80108d6:	602a      	str	r2, [r5, #0]
 80108d8:	e7ee      	b.n	80108b8 <__swhatbuf_r+0x1c>
 80108da:	2340      	movs	r3, #64	; 0x40
 80108dc:	2000      	movs	r0, #0
 80108de:	6023      	str	r3, [r4, #0]
 80108e0:	b016      	add	sp, #88	; 0x58
 80108e2:	bd70      	pop	{r4, r5, r6, pc}

080108e4 <__smakebuf_r>:
 80108e4:	898b      	ldrh	r3, [r1, #12]
 80108e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108e8:	079d      	lsls	r5, r3, #30
 80108ea:	4606      	mov	r6, r0
 80108ec:	460c      	mov	r4, r1
 80108ee:	d507      	bpl.n	8010900 <__smakebuf_r+0x1c>
 80108f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	6123      	str	r3, [r4, #16]
 80108f8:	2301      	movs	r3, #1
 80108fa:	6163      	str	r3, [r4, #20]
 80108fc:	b002      	add	sp, #8
 80108fe:	bd70      	pop	{r4, r5, r6, pc}
 8010900:	ab01      	add	r3, sp, #4
 8010902:	466a      	mov	r2, sp
 8010904:	f7ff ffca 	bl	801089c <__swhatbuf_r>
 8010908:	9900      	ldr	r1, [sp, #0]
 801090a:	4605      	mov	r5, r0
 801090c:	4630      	mov	r0, r6
 801090e:	f7ff f987 	bl	800fc20 <_malloc_r>
 8010912:	b948      	cbnz	r0, 8010928 <__smakebuf_r+0x44>
 8010914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010918:	059a      	lsls	r2, r3, #22
 801091a:	d4ef      	bmi.n	80108fc <__smakebuf_r+0x18>
 801091c:	f023 0303 	bic.w	r3, r3, #3
 8010920:	f043 0302 	orr.w	r3, r3, #2
 8010924:	81a3      	strh	r3, [r4, #12]
 8010926:	e7e3      	b.n	80108f0 <__smakebuf_r+0xc>
 8010928:	4b0d      	ldr	r3, [pc, #52]	; (8010960 <__smakebuf_r+0x7c>)
 801092a:	62b3      	str	r3, [r6, #40]	; 0x28
 801092c:	89a3      	ldrh	r3, [r4, #12]
 801092e:	6020      	str	r0, [r4, #0]
 8010930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010934:	81a3      	strh	r3, [r4, #12]
 8010936:	9b00      	ldr	r3, [sp, #0]
 8010938:	6163      	str	r3, [r4, #20]
 801093a:	9b01      	ldr	r3, [sp, #4]
 801093c:	6120      	str	r0, [r4, #16]
 801093e:	b15b      	cbz	r3, 8010958 <__smakebuf_r+0x74>
 8010940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010944:	4630      	mov	r0, r6
 8010946:	f000 f8d1 	bl	8010aec <_isatty_r>
 801094a:	b128      	cbz	r0, 8010958 <__smakebuf_r+0x74>
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	f023 0303 	bic.w	r3, r3, #3
 8010952:	f043 0301 	orr.w	r3, r3, #1
 8010956:	81a3      	strh	r3, [r4, #12]
 8010958:	89a0      	ldrh	r0, [r4, #12]
 801095a:	4305      	orrs	r5, r0
 801095c:	81a5      	strh	r5, [r4, #12]
 801095e:	e7cd      	b.n	80108fc <__smakebuf_r+0x18>
 8010960:	080106f5 	.word	0x080106f5

08010964 <_malloc_usable_size_r>:
 8010964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010968:	1f18      	subs	r0, r3, #4
 801096a:	2b00      	cmp	r3, #0
 801096c:	bfbc      	itt	lt
 801096e:	580b      	ldrlt	r3, [r1, r0]
 8010970:	18c0      	addlt	r0, r0, r3
 8010972:	4770      	bx	lr

08010974 <_raise_r>:
 8010974:	291f      	cmp	r1, #31
 8010976:	b538      	push	{r3, r4, r5, lr}
 8010978:	4604      	mov	r4, r0
 801097a:	460d      	mov	r5, r1
 801097c:	d904      	bls.n	8010988 <_raise_r+0x14>
 801097e:	2316      	movs	r3, #22
 8010980:	6003      	str	r3, [r0, #0]
 8010982:	f04f 30ff 	mov.w	r0, #4294967295
 8010986:	bd38      	pop	{r3, r4, r5, pc}
 8010988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801098a:	b112      	cbz	r2, 8010992 <_raise_r+0x1e>
 801098c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010990:	b94b      	cbnz	r3, 80109a6 <_raise_r+0x32>
 8010992:	4620      	mov	r0, r4
 8010994:	f000 f830 	bl	80109f8 <_getpid_r>
 8010998:	462a      	mov	r2, r5
 801099a:	4601      	mov	r1, r0
 801099c:	4620      	mov	r0, r4
 801099e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109a2:	f000 b817 	b.w	80109d4 <_kill_r>
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d00a      	beq.n	80109c0 <_raise_r+0x4c>
 80109aa:	1c59      	adds	r1, r3, #1
 80109ac:	d103      	bne.n	80109b6 <_raise_r+0x42>
 80109ae:	2316      	movs	r3, #22
 80109b0:	6003      	str	r3, [r0, #0]
 80109b2:	2001      	movs	r0, #1
 80109b4:	e7e7      	b.n	8010986 <_raise_r+0x12>
 80109b6:	2400      	movs	r4, #0
 80109b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109bc:	4628      	mov	r0, r5
 80109be:	4798      	blx	r3
 80109c0:	2000      	movs	r0, #0
 80109c2:	e7e0      	b.n	8010986 <_raise_r+0x12>

080109c4 <raise>:
 80109c4:	4b02      	ldr	r3, [pc, #8]	; (80109d0 <raise+0xc>)
 80109c6:	4601      	mov	r1, r0
 80109c8:	6818      	ldr	r0, [r3, #0]
 80109ca:	f7ff bfd3 	b.w	8010974 <_raise_r>
 80109ce:	bf00      	nop
 80109d0:	20000180 	.word	0x20000180

080109d4 <_kill_r>:
 80109d4:	b538      	push	{r3, r4, r5, lr}
 80109d6:	4d07      	ldr	r5, [pc, #28]	; (80109f4 <_kill_r+0x20>)
 80109d8:	2300      	movs	r3, #0
 80109da:	4604      	mov	r4, r0
 80109dc:	4608      	mov	r0, r1
 80109de:	4611      	mov	r1, r2
 80109e0:	602b      	str	r3, [r5, #0]
 80109e2:	f000 f8d7 	bl	8010b94 <_kill>
 80109e6:	1c43      	adds	r3, r0, #1
 80109e8:	d102      	bne.n	80109f0 <_kill_r+0x1c>
 80109ea:	682b      	ldr	r3, [r5, #0]
 80109ec:	b103      	cbz	r3, 80109f0 <_kill_r+0x1c>
 80109ee:	6023      	str	r3, [r4, #0]
 80109f0:	bd38      	pop	{r3, r4, r5, pc}
 80109f2:	bf00      	nop
 80109f4:	20002600 	.word	0x20002600

080109f8 <_getpid_r>:
 80109f8:	f000 b8bc 	b.w	8010b74 <_getpid>

080109fc <__sread>:
 80109fc:	b510      	push	{r4, lr}
 80109fe:	460c      	mov	r4, r1
 8010a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a04:	f000 f894 	bl	8010b30 <_read_r>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	bfab      	itete	ge
 8010a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8010a10:	181b      	addge	r3, r3, r0
 8010a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a16:	bfac      	ite	ge
 8010a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a1a:	81a3      	strhlt	r3, [r4, #12]
 8010a1c:	bd10      	pop	{r4, pc}

08010a1e <__swrite>:
 8010a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a22:	461f      	mov	r7, r3
 8010a24:	898b      	ldrh	r3, [r1, #12]
 8010a26:	05db      	lsls	r3, r3, #23
 8010a28:	4605      	mov	r5, r0
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	4616      	mov	r6, r2
 8010a2e:	d505      	bpl.n	8010a3c <__swrite+0x1e>
 8010a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a34:	2302      	movs	r3, #2
 8010a36:	2200      	movs	r2, #0
 8010a38:	f000 f868 	bl	8010b0c <_lseek_r>
 8010a3c:	89a3      	ldrh	r3, [r4, #12]
 8010a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a46:	81a3      	strh	r3, [r4, #12]
 8010a48:	4632      	mov	r2, r6
 8010a4a:	463b      	mov	r3, r7
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a52:	f000 b817 	b.w	8010a84 <_write_r>

08010a56 <__sseek>:
 8010a56:	b510      	push	{r4, lr}
 8010a58:	460c      	mov	r4, r1
 8010a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a5e:	f000 f855 	bl	8010b0c <_lseek_r>
 8010a62:	1c43      	adds	r3, r0, #1
 8010a64:	89a3      	ldrh	r3, [r4, #12]
 8010a66:	bf15      	itete	ne
 8010a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a72:	81a3      	strheq	r3, [r4, #12]
 8010a74:	bf18      	it	ne
 8010a76:	81a3      	strhne	r3, [r4, #12]
 8010a78:	bd10      	pop	{r4, pc}

08010a7a <__sclose>:
 8010a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a7e:	f000 b813 	b.w	8010aa8 <_close_r>
	...

08010a84 <_write_r>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	4d07      	ldr	r5, [pc, #28]	; (8010aa4 <_write_r+0x20>)
 8010a88:	4604      	mov	r4, r0
 8010a8a:	4608      	mov	r0, r1
 8010a8c:	4611      	mov	r1, r2
 8010a8e:	2200      	movs	r2, #0
 8010a90:	602a      	str	r2, [r5, #0]
 8010a92:	461a      	mov	r2, r3
 8010a94:	f000 f8a4 	bl	8010be0 <_write>
 8010a98:	1c43      	adds	r3, r0, #1
 8010a9a:	d102      	bne.n	8010aa2 <_write_r+0x1e>
 8010a9c:	682b      	ldr	r3, [r5, #0]
 8010a9e:	b103      	cbz	r3, 8010aa2 <_write_r+0x1e>
 8010aa0:	6023      	str	r3, [r4, #0]
 8010aa2:	bd38      	pop	{r3, r4, r5, pc}
 8010aa4:	20002600 	.word	0x20002600

08010aa8 <_close_r>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	4d06      	ldr	r5, [pc, #24]	; (8010ac4 <_close_r+0x1c>)
 8010aac:	2300      	movs	r3, #0
 8010aae:	4604      	mov	r4, r0
 8010ab0:	4608      	mov	r0, r1
 8010ab2:	602b      	str	r3, [r5, #0]
 8010ab4:	f000 f84e 	bl	8010b54 <_close>
 8010ab8:	1c43      	adds	r3, r0, #1
 8010aba:	d102      	bne.n	8010ac2 <_close_r+0x1a>
 8010abc:	682b      	ldr	r3, [r5, #0]
 8010abe:	b103      	cbz	r3, 8010ac2 <_close_r+0x1a>
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	bd38      	pop	{r3, r4, r5, pc}
 8010ac4:	20002600 	.word	0x20002600

08010ac8 <_fstat_r>:
 8010ac8:	b538      	push	{r3, r4, r5, lr}
 8010aca:	4d07      	ldr	r5, [pc, #28]	; (8010ae8 <_fstat_r+0x20>)
 8010acc:	2300      	movs	r3, #0
 8010ace:	4604      	mov	r4, r0
 8010ad0:	4608      	mov	r0, r1
 8010ad2:	4611      	mov	r1, r2
 8010ad4:	602b      	str	r3, [r5, #0]
 8010ad6:	f000 f845 	bl	8010b64 <_fstat>
 8010ada:	1c43      	adds	r3, r0, #1
 8010adc:	d102      	bne.n	8010ae4 <_fstat_r+0x1c>
 8010ade:	682b      	ldr	r3, [r5, #0]
 8010ae0:	b103      	cbz	r3, 8010ae4 <_fstat_r+0x1c>
 8010ae2:	6023      	str	r3, [r4, #0]
 8010ae4:	bd38      	pop	{r3, r4, r5, pc}
 8010ae6:	bf00      	nop
 8010ae8:	20002600 	.word	0x20002600

08010aec <_isatty_r>:
 8010aec:	b538      	push	{r3, r4, r5, lr}
 8010aee:	4d06      	ldr	r5, [pc, #24]	; (8010b08 <_isatty_r+0x1c>)
 8010af0:	2300      	movs	r3, #0
 8010af2:	4604      	mov	r4, r0
 8010af4:	4608      	mov	r0, r1
 8010af6:	602b      	str	r3, [r5, #0]
 8010af8:	f000 f844 	bl	8010b84 <_isatty>
 8010afc:	1c43      	adds	r3, r0, #1
 8010afe:	d102      	bne.n	8010b06 <_isatty_r+0x1a>
 8010b00:	682b      	ldr	r3, [r5, #0]
 8010b02:	b103      	cbz	r3, 8010b06 <_isatty_r+0x1a>
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	bd38      	pop	{r3, r4, r5, pc}
 8010b08:	20002600 	.word	0x20002600

08010b0c <_lseek_r>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	4d07      	ldr	r5, [pc, #28]	; (8010b2c <_lseek_r+0x20>)
 8010b10:	4604      	mov	r4, r0
 8010b12:	4608      	mov	r0, r1
 8010b14:	4611      	mov	r1, r2
 8010b16:	2200      	movs	r2, #0
 8010b18:	602a      	str	r2, [r5, #0]
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	f000 f842 	bl	8010ba4 <_lseek>
 8010b20:	1c43      	adds	r3, r0, #1
 8010b22:	d102      	bne.n	8010b2a <_lseek_r+0x1e>
 8010b24:	682b      	ldr	r3, [r5, #0]
 8010b26:	b103      	cbz	r3, 8010b2a <_lseek_r+0x1e>
 8010b28:	6023      	str	r3, [r4, #0]
 8010b2a:	bd38      	pop	{r3, r4, r5, pc}
 8010b2c:	20002600 	.word	0x20002600

08010b30 <_read_r>:
 8010b30:	b538      	push	{r3, r4, r5, lr}
 8010b32:	4d07      	ldr	r5, [pc, #28]	; (8010b50 <_read_r+0x20>)
 8010b34:	4604      	mov	r4, r0
 8010b36:	4608      	mov	r0, r1
 8010b38:	4611      	mov	r1, r2
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	602a      	str	r2, [r5, #0]
 8010b3e:	461a      	mov	r2, r3
 8010b40:	f000 f838 	bl	8010bb4 <_read>
 8010b44:	1c43      	adds	r3, r0, #1
 8010b46:	d102      	bne.n	8010b4e <_read_r+0x1e>
 8010b48:	682b      	ldr	r3, [r5, #0]
 8010b4a:	b103      	cbz	r3, 8010b4e <_read_r+0x1e>
 8010b4c:	6023      	str	r3, [r4, #0]
 8010b4e:	bd38      	pop	{r3, r4, r5, pc}
 8010b50:	20002600 	.word	0x20002600

08010b54 <_close>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <_close+0xc>)
 8010b56:	2258      	movs	r2, #88	; 0x58
 8010b58:	601a      	str	r2, [r3, #0]
 8010b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b5e:	4770      	bx	lr
 8010b60:	20002600 	.word	0x20002600

08010b64 <_fstat>:
 8010b64:	4b02      	ldr	r3, [pc, #8]	; (8010b70 <_fstat+0xc>)
 8010b66:	2258      	movs	r2, #88	; 0x58
 8010b68:	601a      	str	r2, [r3, #0]
 8010b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b6e:	4770      	bx	lr
 8010b70:	20002600 	.word	0x20002600

08010b74 <_getpid>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <_getpid+0xc>)
 8010b76:	2258      	movs	r2, #88	; 0x58
 8010b78:	601a      	str	r2, [r3, #0]
 8010b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b7e:	4770      	bx	lr
 8010b80:	20002600 	.word	0x20002600

08010b84 <_isatty>:
 8010b84:	4b02      	ldr	r3, [pc, #8]	; (8010b90 <_isatty+0xc>)
 8010b86:	2258      	movs	r2, #88	; 0x58
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	2000      	movs	r0, #0
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop
 8010b90:	20002600 	.word	0x20002600

08010b94 <_kill>:
 8010b94:	4b02      	ldr	r3, [pc, #8]	; (8010ba0 <_kill+0xc>)
 8010b96:	2258      	movs	r2, #88	; 0x58
 8010b98:	601a      	str	r2, [r3, #0]
 8010b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9e:	4770      	bx	lr
 8010ba0:	20002600 	.word	0x20002600

08010ba4 <_lseek>:
 8010ba4:	4b02      	ldr	r3, [pc, #8]	; (8010bb0 <_lseek+0xc>)
 8010ba6:	2258      	movs	r2, #88	; 0x58
 8010ba8:	601a      	str	r2, [r3, #0]
 8010baa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bae:	4770      	bx	lr
 8010bb0:	20002600 	.word	0x20002600

08010bb4 <_read>:
 8010bb4:	4b02      	ldr	r3, [pc, #8]	; (8010bc0 <_read+0xc>)
 8010bb6:	2258      	movs	r2, #88	; 0x58
 8010bb8:	601a      	str	r2, [r3, #0]
 8010bba:	f04f 30ff 	mov.w	r0, #4294967295
 8010bbe:	4770      	bx	lr
 8010bc0:	20002600 	.word	0x20002600

08010bc4 <_sbrk>:
 8010bc4:	4b04      	ldr	r3, [pc, #16]	; (8010bd8 <_sbrk+0x14>)
 8010bc6:	6819      	ldr	r1, [r3, #0]
 8010bc8:	4602      	mov	r2, r0
 8010bca:	b909      	cbnz	r1, 8010bd0 <_sbrk+0xc>
 8010bcc:	4903      	ldr	r1, [pc, #12]	; (8010bdc <_sbrk+0x18>)
 8010bce:	6019      	str	r1, [r3, #0]
 8010bd0:	6818      	ldr	r0, [r3, #0]
 8010bd2:	4402      	add	r2, r0
 8010bd4:	601a      	str	r2, [r3, #0]
 8010bd6:	4770      	bx	lr
 8010bd8:	20000a28 	.word	0x20000a28
 8010bdc:	20002610 	.word	0x20002610

08010be0 <_write>:
 8010be0:	4b02      	ldr	r3, [pc, #8]	; (8010bec <_write+0xc>)
 8010be2:	2258      	movs	r2, #88	; 0x58
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	f04f 30ff 	mov.w	r0, #4294967295
 8010bea:	4770      	bx	lr
 8010bec:	20002600 	.word	0x20002600

08010bf0 <_exit>:
 8010bf0:	e7fe      	b.n	8010bf0 <_exit>
	...

08010bf4 <_init>:
 8010bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bf6:	bf00      	nop
 8010bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bfa:	bc08      	pop	{r3}
 8010bfc:	469e      	mov	lr, r3
 8010bfe:	4770      	bx	lr

08010c00 <_fini>:
 8010c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c02:	bf00      	nop
 8010c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c06:	bc08      	pop	{r3}
 8010c08:	469e      	mov	lr, r3
 8010c0a:	4770      	bx	lr
