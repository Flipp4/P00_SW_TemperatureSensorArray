
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08013da8  08013da8  00023da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014234  08014234  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08014234  08014234  00024234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801423c  0801423c  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801423c  0801423c  0002423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014240  08014240  00024240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08014244  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036ac  20000350  08014594  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  200039fc  08014594  000339fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c19d  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007675  00000000  00000000  0006c51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a8  00000000  00000000  00073b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020b8  00000000  00000000  00075f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023aa1  00000000  00000000  00077ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000346ec  00000000  00000000  0009ba99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af76e  00000000  00000000  000d0185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017f8f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a498  00000000  00000000  0017f948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00189de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00189eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013d8c 	.word	0x08013d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	08013d8c 	.word	0x08013d8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2101      	movs	r1, #1
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <OperateLED_A+0x34>)
 8000f66:	f001 fc1b 	bl	80027a0 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 8000f6a:	e007      	b.n	8000f7c <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d104      	bne.n	8000f7c <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2101      	movs	r1, #1
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <OperateLED_A+0x34>)
 8000f78:	f001 fc12 	bl	80027a0 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020800 	.word	0x40020800

08000f88 <OperateLED_C>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
void OperateLED_C (LEDState_t eState)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <OperateLED_C+0x1c>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <OperateLED_C+0x34>)
 8000f9e:	f001 fbff 	bl	80027a0 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	}
}
 8000fa2:	e007      	b.n	8000fb4 <OperateLED_C+0x2c>
	else if(eState == eLED_Off)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d104      	bne.n	8000fb4 <OperateLED_C+0x2c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2104      	movs	r1, #4
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <OperateLED_C+0x34>)
 8000fb0:	f001 fbf6 	bl	80027a0 <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <ToggleLED_B+0x10>)
 8000fc8:	f001 fc03 	bl	80027d2 <HAL_GPIO_TogglePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020800 	.word	0x40020800

08000fd4 <ToggleLED_D>:

void ToggleLED_D()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <ToggleLED_D+0x10>)
 8000fdc:	f001 fbf9 	bl	80027d2 <HAL_GPIO_TogglePin>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d106      	bne.n	8001006 <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <OperateSensorPower_A+0x38>)
 8001000:	f001 fbce 	bl	80027a0 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 8001004:	e008      	b.n	8001018 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <OperateSensorPower_A+0x38>)
 8001014:	f001 fbc4 	bl	80027a0 <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020800 	.word	0x40020800

08001024 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <OperateSensorPower_B+0x38>)
 800103c:	f001 fbb0 	bl	80027a0 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8001040:	e008      	b.n	8001054 <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <OperateSensorPower_B+0x38>)
 8001050:	f001 fba6 	bl	80027a0 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020800 	.word	0x40020800

08001060 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff ffbf 	bl	8000fe8 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ffda 	bl	8001024 <OperateSensorPower_B>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_Init+0x40>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_Init+0x40>)
 800108a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x40>)
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 fdf5 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f00e fe3c 	bl	800fd24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023c00 	.word	0x40023c00

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fe0d 	bl	8001cf6 <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 fdd5 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000118 	.word	0x20000118
 8001110:	20000004 	.word	0x20000004
 8001114:	20000000 	.word	0x20000000

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000004 	.word	0x20000004
 800113c:	200017e8 	.word	0x200017e8

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200017e8 	.word	0x200017e8

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e033      	b.n	800121e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f00e fdd8 	bl	800fd74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e6:	f023 0302 	bic.w	r3, r3, #2
 80011ea:	f043 0202 	orr.w	r2, r3, #2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fb74 	bl	80018e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
 800120e:	e001      	b.n	8001214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Start_IT+0x1a>
 800123e:	2302      	movs	r3, #2
 8001240:	e0a1      	b.n	8001386 <HAL_ADC_Start_IT+0x15e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d018      	beq.n	800128a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001268:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <HAL_ADC_Start_IT+0x16c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_ADC_Start_IT+0x170>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9a      	lsrs	r2, r3, #18
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d169      	bne.n	800136c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d6:	d106      	bne.n	80012e6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	f023 0206 	bic.w	r2, r3, #6
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44
 80012e4:	e002      	b.n	80012ec <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_ADC_Start_IT+0x174>)
 80012f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001300:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10f      	bne.n	8001342 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d129      	bne.n	8001384 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e020      	b.n	8001384 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_ADC_Start_IT+0x178>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d11b      	bne.n	8001384 <HAL_ADC_Start_IT+0x15c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d114      	bne.n	8001384 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	e00b      	b.n	8001384 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f043 0210 	orr.w	r2, r3, #16
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000118 	.word	0x20000118
 8001398:	431bde83 	.word	0x431bde83
 800139c:	40012300 	.word	0x40012300
 80013a0:	40012000 	.word	0x40012000

080013a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b02      	cmp	r3, #2
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d049      	beq.n	800147a <HAL_ADC_IRQHandler+0xd6>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d046      	beq.n	800147a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d12b      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001416:	2b00      	cmp	r3, #0
 8001418:	d127      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001432:	2b00      	cmp	r3, #0
 8001434:	d119      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0220 	bic.w	r2, r2, #32
 8001444:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f8e8 	bl	8001640 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f06f 0212 	mvn.w	r2, #18
 8001478:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b04      	cmp	r3, #4
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	2b80      	cmp	r3, #128	; 0x80
 800149c:	bf0c      	ite	eq
 800149e:	2301      	moveq	r3, #1
 80014a0:	2300      	movne	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d057      	beq.n	800155c <HAL_ADC_IRQHandler+0x1b8>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d054      	beq.n	800155c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d139      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d12b      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d124      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11d      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d119      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001526:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fac3 	bl	8001ad8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 020c 	mvn.w	r2, #12
 800155a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	bf0c      	ite	eq
 800156a:	2301      	moveq	r3, #1
 800156c:	2300      	movne	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d017      	beq.n	80015be <HAL_ADC_IRQHandler+0x21a>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d014      	beq.n	80015be <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10d      	bne.n	80015be <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f850 	bl	8001654 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f06f 0201 	mvn.w	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <HAL_ADC_IRQHandler+0x27a>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d012      	beq.n	800161e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f06f 0220 	mvn.w	r2, #32
 800160c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f82a 	bl	8001668 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0220 	mvn.w	r2, #32
 800161c:	601a      	str	r2, [r3, #0]
  }
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1c>
 8001694:	2302      	movs	r3, #2
 8001696:	e113      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x244>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d925      	bls.n	80016f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68d9      	ldr	r1, [r3, #12]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b1e      	subs	r3, #30
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43da      	mvns	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	400a      	ands	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68d9      	ldr	r1, [r3, #12]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4403      	add	r3, r0
 80016e6:	3b1e      	subs	r3, #30
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	e022      	b.n	800173a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	2207      	movs	r2, #7
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6919      	ldr	r1, [r3, #16]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	4603      	mov	r3, r0
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4403      	add	r3, r0
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d824      	bhi.n	800178c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b05      	subs	r3, #5
 8001754:	221f      	movs	r2, #31
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b05      	subs	r3, #5
 800177e:	fa00 f203 	lsl.w	r2, r0, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
 800178a:	e04c      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d824      	bhi.n	80017de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	; 0x23
 80017a6:	221f      	movs	r2, #31
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43da      	mvns	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b23      	subs	r3, #35	; 0x23
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
 80017dc:	e023      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b41      	subs	r3, #65	; 0x41
 80017f0:	221f      	movs	r2, #31
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	400a      	ands	r2, r1
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b41      	subs	r3, #65	; 0x41
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_ADC_ConfigChannel+0x250>)
 8001828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_ADC_ConfigChannel+0x254>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d10f      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d8>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d10b      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_ADC_ConfigChannel+0x254>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12b      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_ADC_ConfigChannel+0x258>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d003      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x1f4>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b11      	cmp	r3, #17
 800186e:	d122      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_ADC_ConfigChannel+0x258>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d111      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_ADC_ConfigChannel+0x25c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_ADC_ConfigChannel+0x260>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	0c9a      	lsrs	r2, r3, #18
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40012300 	.word	0x40012300
 80018d0:	40012000 	.word	0x40012000
 80018d4:	10000012 	.word	0x10000012
 80018d8:	20000118 	.word	0x20000118
 80018dc:	431bde83 	.word	0x431bde83

080018e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <ADC_Init+0x1f0>)
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	431a      	orrs	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <ADC_Init+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d022      	beq.n	80019be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6899      	ldr	r1, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e00f      	b.n	80019de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0202 	bic.w	r2, r2, #2
 80019ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e1b      	ldrb	r3, [r3, #24]
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01b      	beq.n	8001a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	3b01      	subs	r3, #1
 8001a38:	035a      	lsls	r2, r3, #13
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	e007      	b.n	8001a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	051a      	lsls	r2, r3, #20
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6899      	ldr	r1, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a96:	025a      	lsls	r2, r3, #9
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6899      	ldr	r1, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	029a      	lsls	r2, r3, #10
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	0f000001 	.word	0x0f000001

08001ad8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	; (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff fa10 	bl	8001140 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e099      	b.n	8001e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	e00f      	b.n	8001d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4e:	f7ff f9f7 	bl	8001140 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d908      	bls.n	8001d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e078      	b.n	8001e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e8      	bne.n	8001d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_DMA_Init+0x158>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d107      	bne.n	8001dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d117      	bne.n	8001e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 faab 	bl	8002370 <DMA_CheckFifoParam>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e016      	b.n	8001e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fa62 	bl	8002304 <DMA_CalcBaseAndBitshift>
 8001e40:	4603      	mov	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	223f      	movs	r2, #63	; 0x3f
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	f010803f 	.word	0xf010803f

08001e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_DMA_Start_IT+0x26>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e040      	b.n	8001f14 <HAL_DMA_Start_IT+0xa8>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d12f      	bne.n	8001f06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f9f4 	bl	80022a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	223f      	movs	r2, #63	; 0x3f
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0216 	orr.w	r2, r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0208 	orr.w	r2, r2, #8
 8001ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e005      	b.n	8001f12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d004      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00c      	b.n	8001f54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f6c:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <HAL_DMA_IRQHandler+0x258>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a92      	ldr	r2, [pc, #584]	; (80021bc <HAL_DMA_IRQHandler+0x25c>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0204 	bic.w	r2, r2, #4
 8001fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2208      	movs	r2, #8
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d012      	beq.n	8002002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2201      	movs	r2, #1
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0202 	orr.w	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	2204      	movs	r2, #4
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2204      	movs	r2, #4
 8002026:	409a      	lsls	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2210      	movs	r2, #16
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d043      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d03c      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2210      	movs	r2, #16
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d018      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d108      	bne.n	8002090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d024      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e01f      	b.n	80020d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e016      	b.n	80020d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0208 	bic.w	r2, r2, #8
 80020be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2220      	movs	r2, #32
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 808e 	beq.w	80021fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8086 	beq.w	80021fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	2220      	movs	r2, #32
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b05      	cmp	r3, #5
 8002108:	d136      	bne.n	8002178 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0216 	bic.w	r2, r2, #22
 8002118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <HAL_DMA_IRQHandler+0x1da>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0208 	bic.w	r2, r2, #8
 8002148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	223f      	movs	r2, #63	; 0x3f
 8002150:	409a      	lsls	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	2b00      	cmp	r3, #0
 800216c:	d07d      	beq.n	800226a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
        }
        return;
 8002176:	e078      	b.n	800226a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01c      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	2b00      	cmp	r3, #0
 800219a:	d030      	beq.n	80021fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e02b      	b.n	80021fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d027      	beq.n	80021fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
 80021b6:	e022      	b.n	80021fe <HAL_DMA_IRQHandler+0x29e>
 80021b8:	20000118 	.word	0x20000118
 80021bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0210 	bic.w	r2, r2, #16
 80021dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	2b00      	cmp	r3, #0
 8002204:	d032      	beq.n	800226c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d022      	beq.n	8002258 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3301      	adds	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	429a      	cmp	r2, r3
 8002234:	d307      	bcc.n	8002246 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f2      	bne.n	800222a <HAL_DMA_IRQHandler+0x2ca>
 8002244:	e000      	b.n	8002248 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002246:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
 8002268:	e000      	b.n	800226c <HAL_DMA_IRQHandler+0x30c>
        return;
 800226a:	bf00      	nop
    }
  }
}
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop

08002274 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002282:	b2db      	uxtb	r3, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d108      	bne.n	80022e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022e6:	e007      	b.n	80022f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3b10      	subs	r3, #16
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <DMA_CalcBaseAndBitshift+0x64>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <DMA_CalcBaseAndBitshift+0x68>)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d909      	bls.n	8002346 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	1d1a      	adds	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	; 0x58
 8002344:	e007      	b.n	8002356 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234e:	f023 0303 	bic.w	r3, r3, #3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	aaaaaaab 	.word	0xaaaaaaab
 800236c:	08013dfc 	.word	0x08013dfc

08002370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11f      	bne.n	80023ca <DMA_CheckFifoParam+0x5a>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d856      	bhi.n	800243e <DMA_CheckFifoParam+0xce>
 8002390:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <DMA_CheckFifoParam+0x28>)
 8002392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002396:	bf00      	nop
 8002398:	080023a9 	.word	0x080023a9
 800239c:	080023bb 	.word	0x080023bb
 80023a0:	080023a9 	.word	0x080023a9
 80023a4:	0800243f 	.word	0x0800243f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d046      	beq.n	8002442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b8:	e043      	b.n	8002442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c2:	d140      	bne.n	8002446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c8:	e03d      	b.n	8002446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d2:	d121      	bne.n	8002418 <DMA_CheckFifoParam+0xa8>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d837      	bhi.n	800244a <DMA_CheckFifoParam+0xda>
 80023da:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <DMA_CheckFifoParam+0x70>)
 80023dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e0:	080023f1 	.word	0x080023f1
 80023e4:	080023f7 	.word	0x080023f7
 80023e8:	080023f1 	.word	0x080023f1
 80023ec:	08002409 	.word	0x08002409
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
      break;
 80023f4:	e030      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d025      	beq.n	800244e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002406:	e022      	b.n	800244e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002410:	d11f      	bne.n	8002452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002416:	e01c      	b.n	8002452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d903      	bls.n	8002426 <DMA_CheckFifoParam+0xb6>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d003      	beq.n	800242c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002424:	e018      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
      break;
 800242a:	e015      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00e      	beq.n	8002456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      break;
 800243c:	e00b      	b.n	8002456 <DMA_CheckFifoParam+0xe6>
      break;
 800243e:	bf00      	nop
 8002440:	e00a      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e008      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e006      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e004      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
 8002450:	e002      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;   
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 8002456:	bf00      	nop
    }
  } 
  
  return status; 
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e159      	b.n	8002738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8148 	bne.w	8002732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d130      	bne.n	800251c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0201 	and.w	r2, r3, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a2 	beq.w	8002732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x202>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x1fe>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_GPIO_Init+0x2f8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x1fa>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_GPIO_Init+0x2fc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x1f6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a45      	ldr	r2, [pc, #276]	; (8002768 <HAL_GPIO_Init+0x300>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x1f2>
 8002656:	2304      	movs	r3, #4
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265a:	2307      	movs	r3, #7
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x204>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_GPIO_Init+0x304>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ae:	4a2f      	ldr	r2, [pc, #188]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_GPIO_Init+0x304>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002702:	4a1a      	ldr	r2, [pc, #104]	; (800276c <HAL_GPIO_Init+0x304>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_GPIO_Init+0x304>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_GPIO_Init+0x304>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f aea2 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	041a      	lsls	r2, r3, #16
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	400b      	ands	r3, r1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f806 	bl	8002838 <HAL_GPIO_EXTI_Callback>
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e12b      	b.n	8002aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f00d fac8 	bl	800fe0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b4:	f003 ff5a 	bl	800676c <HAL_RCC_GetPCLK1Freq>
 80028b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a81      	ldr	r2, [pc, #516]	; (8002ac4 <HAL_I2C_Init+0x274>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d807      	bhi.n	80028d4 <HAL_I2C_Init+0x84>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <HAL_I2C_Init+0x278>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e006      	b.n	80028e2 <HAL_I2C_Init+0x92>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a7d      	ldr	r2, [pc, #500]	; (8002acc <HAL_I2C_Init+0x27c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e7      	b.n	8002aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a78      	ldr	r2, [pc, #480]	; (8002ad0 <HAL_I2C_Init+0x280>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0c9b      	lsrs	r3, r3, #18
 80028f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_I2C_Init+0x274>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d802      	bhi.n	8002924 <HAL_I2C_Init+0xd4>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	e009      	b.n	8002938 <HAL_I2C_Init+0xe8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_I2C_Init+0x284>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	495c      	ldr	r1, [pc, #368]	; (8002ac4 <HAL_I2C_Init+0x274>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d819      	bhi.n	800298c <HAL_I2C_Init+0x13c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e59      	subs	r1, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fbb1 f3f3 	udiv	r3, r1, r3
 8002966:	1c59      	adds	r1, r3, #1
 8002968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800296c:	400b      	ands	r3, r1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_I2C_Init+0x138>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e59      	subs	r1, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	e051      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002988:	2304      	movs	r3, #4
 800298a:	e04f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_I2C_Init+0x168>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e012      	b.n	80029de <HAL_I2C_Init+0x18e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e58      	subs	r0, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	0099      	lsls	r1, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Init+0x196>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <HAL_I2C_Init+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e58      	subs	r0, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0a:	e00f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	6809      	ldr	r1, [r1, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6911      	ldr	r1, [r2, #16]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	000186a0 	.word	0x000186a0
 8002ac8:	001e847f 	.word	0x001e847f
 8002acc:	003d08ff 	.word	0x003d08ff
 8002ad0:	431bde83 	.word	0x431bde83
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002af2:	f7fe fb25 	bl	8001140 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 80d9 	bne.w	8002cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2319      	movs	r3, #25
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	496d      	ldr	r1, [pc, #436]	; (8002cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f001 fea9 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0cc      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_Mem_Write+0x56>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0c5      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d007      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2221      	movs	r2, #33	; 0x21
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b96:	88f8      	ldrh	r0, [r7, #6]
 8002b98:	893a      	ldrh	r2, [r7, #8]
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f001 fd20 	bl	80045ec <I2C_RequestMemoryWrite>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d052      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e081      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f001 ff2a 	bl	8004a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_I2C_Mem_Write+0x180>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1aa      	bne.n	8002bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f001 ff16 	bl	8004a96 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e016      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	00100002 	.word	0x00100002
 8002cc8:	ffff0000 	.word	0xffff0000

08002ccc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	f040 809a 	bne.w	8002e2c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <HAL_I2C_Mem_Read_IT+0x170>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	4a50      	ldr	r2, [pc, #320]	; (8002e40 <HAL_I2C_Mem_Read_IT+0x174>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0a1a      	lsrs	r2, r3, #8
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e070      	b.n	8002e2e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d0db      	beq.n	8002d12 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2C_Mem_Read_IT+0x9c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e062      	b.n	8002e2e <HAL_I2C_Mem_Read_IT+0x162>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d007      	beq.n	8002d8e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2222      	movs	r2, #34	; 0x22
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2240      	movs	r2, #64	; 0x40
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a3a      	ldr	r2, [r7, #32]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <HAL_I2C_Mem_Read_IT+0x178>)
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002dd0:	897a      	ldrh	r2, [r7, #10]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002dd6:	893a      	ldrh	r2, [r7, #8]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e06:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002e26:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000118 	.word	0x20000118
 8002e40:	14f8b589 	.word	0x14f8b589
 8002e44:	ffff0000 	.word	0xffff0000

08002e48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d003      	beq.n	8002e80 <HAL_I2C_EV_IRQHandler+0x38>
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	f040 80c1 	bne.w	8003002 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ea0:	d003      	beq.n	8002eaa <HAL_I2C_EV_IRQHandler+0x62>
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ea8:	d101      	bne.n	8002eae <HAL_I2C_EV_IRQHandler+0x66>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_I2C_EV_IRQHandler+0x68>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f000 8132 	beq.w	800311a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00c      	beq.n	8002eda <HAL_I2C_EV_IRQHandler+0x92>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	0a5b      	lsrs	r3, r3, #9
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f001 fe84 	bl	8004bda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fd6f 	bl	80039b6 <I2C_Master_SB>
 8002ed8:	e092      	b.n	8003000 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_I2C_EV_IRQHandler+0xb2>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	0a5b      	lsrs	r3, r3, #9
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fde5 	bl	8003ac2 <I2C_Master_ADD10>
 8002ef8:	e082      	b.n	8003000 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_I2C_EV_IRQHandler+0xd2>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	0a5b      	lsrs	r3, r3, #9
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fdff 	bl	8003b16 <I2C_Master_ADDR>
 8002f18:	e072      	b.n	8003000 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d03b      	beq.n	8002f9e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f34:	f000 80f3 	beq.w	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	09db      	lsrs	r3, r3, #7
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00f      	beq.n	8002f64 <HAL_I2C_EV_IRQHandler+0x11c>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	0a9b      	lsrs	r3, r3, #10
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_I2C_EV_IRQHandler+0x11c>
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9e9 	bl	8003334 <I2C_MasterTransmit_TXE>
 8002f62:	e04d      	b.n	8003000 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80d6 	beq.w	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80cf 	beq.w	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	2b21      	cmp	r3, #33	; 0x21
 8002f84:	d103      	bne.n	8002f8e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa70 	bl	800346c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f8c:	e0c7      	b.n	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	f040 80c4 	bne.w	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fade 	bl	8003558 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9c:	e0bf      	b.n	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fac:	f000 80b7 	beq.w	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00f      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0x194>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_I2C_EV_IRQHandler+0x194>
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fb53 	bl	8003680 <I2C_MasterReceive_RXNE>
 8002fda:	e011      	b.n	8003000 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 809a 	beq.w	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	0a5b      	lsrs	r3, r3, #9
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8093 	beq.w	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fbf2 	bl	80037e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ffe:	e08e      	b.n	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003000:	e08d      	b.n	800311e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e007      	b.n	8003024 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x20e>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	0a5b      	lsrs	r3, r3, #9
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800304c:	69b9      	ldr	r1, [r7, #24]
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 ffb0 	bl	8003fb4 <I2C_Slave_ADDR>
 8003054:	e066      	b.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0x22e>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	0a5b      	lsrs	r3, r3, #9
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 ffea 	bl	8004048 <I2C_Slave_STOPF>
 8003074:	e056      	b.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003076:	7bbb      	ldrb	r3, [r7, #14]
 8003078:	2b21      	cmp	r3, #33	; 0x21
 800307a:	d002      	beq.n	8003082 <HAL_I2C_EV_IRQHandler+0x23a>
 800307c:	7bbb      	ldrb	r3, [r7, #14]
 800307e:	2b29      	cmp	r3, #41	; 0x29
 8003080:	d125      	bne.n	80030ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	09db      	lsrs	r3, r3, #7
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00f      	beq.n	80030ae <HAL_I2C_EV_IRQHandler+0x266>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	0a9b      	lsrs	r3, r3, #10
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_I2C_EV_IRQHandler+0x266>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fec6 	bl	8003e38 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ac:	e039      	b.n	8003122 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d033      	beq.n	8003122 <HAL_I2C_EV_IRQHandler+0x2da>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	0a5b      	lsrs	r3, r3, #9
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d02d      	beq.n	8003122 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fef3 	bl	8003eb2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030cc:	e029      	b.n	8003122 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00f      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	0a9b      	lsrs	r3, r3, #10
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fefe 	bl	8003ef4 <I2C_SlaveReceive_RXNE>
 80030f8:	e014      	b.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00e      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	0a5b      	lsrs	r3, r3, #9
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 ff2c 	bl	8003f70 <I2C_SlaveReceive_BTF>
 8003118:	e004      	b.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003122:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b08a      	sub	sp, #40	; 0x28
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800314c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00e      	beq.n	8003178 <HAL_I2C_ER_IRQHandler+0x4e>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003176:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	0a5b      	lsrs	r3, r3, #9
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_I2C_ER_IRQHandler+0x78>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80031a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	0a9b      	lsrs	r3, r3, #10
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03f      	beq.n	800322e <HAL_I2C_ER_IRQHandler+0x104>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d039      	beq.n	800322e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80031ba:	7efb      	ldrb	r3, [r7, #27]
 80031bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80031d4:	7ebb      	ldrb	r3, [r7, #26]
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d112      	bne.n	8003200 <HAL_I2C_ER_IRQHandler+0xd6>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <HAL_I2C_ER_IRQHandler+0xd6>
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	2b21      	cmp	r3, #33	; 0x21
 80031e4:	d008      	beq.n	80031f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b29      	cmp	r3, #41	; 0x29
 80031ea:	d005      	beq.n	80031f8 <HAL_I2C_ER_IRQHandler+0xce>
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	2b28      	cmp	r3, #40	; 0x28
 80031f0:	d106      	bne.n	8003200 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b21      	cmp	r3, #33	; 0x21
 80031f6:	d103      	bne.n	8003200 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f001 f855 	bl	80042a8 <I2C_Slave_AF>
 80031fe:	e016      	b.n	800322e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003208:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003212:	7efb      	ldrb	r3, [r7, #27]
 8003214:	2b10      	cmp	r3, #16
 8003216:	d002      	beq.n	800321e <HAL_I2C_ER_IRQHandler+0xf4>
 8003218:	7efb      	ldrb	r3, [r7, #27]
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d107      	bne.n	800322e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	0adb      	lsrs	r3, r3, #11
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00e      	beq.n	8003258 <HAL_I2C_ER_IRQHandler+0x12e>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003256:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f001 f88c 	bl	8004388 <I2C_ITError>
  }
}
 8003270:	bf00      	nop
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
 80032d4:	4613      	mov	r3, r2
 80032d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	d150      	bne.n	80033fc <I2C_MasterTransmit_TXE+0xc8>
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b21      	cmp	r3, #33	; 0x21
 800335e:	d14d      	bne.n	80033fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b08      	cmp	r3, #8
 8003364:	d01d      	beq.n	80033a2 <I2C_MasterTransmit_TXE+0x6e>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b20      	cmp	r3, #32
 800336a:	d01a      	beq.n	80033a2 <I2C_MasterTransmit_TXE+0x6e>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003372:	d016      	beq.n	80033a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003382:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2211      	movs	r2, #17
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff6c 	bl	8003278 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033a0:	e060      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d107      	bne.n	80033ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff87 	bl	80032f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ea:	e03b      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff3f 	bl	8003278 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fa:	e033      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b21      	cmp	r3, #33	; 0x21
 8003400:	d005      	beq.n	800340e <I2C_MasterTransmit_TXE+0xda>
 8003402:	7bbb      	ldrb	r3, [r7, #14]
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d12d      	bne.n	8003464 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b22      	cmp	r3, #34	; 0x22
 800340c:	d12a      	bne.n	8003464 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003426:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003428:	e01c      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d103      	bne.n	800343e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f88e 	bl	8003558 <I2C_MemoryTransmit_TXE_BTF>
}
 800343c:	e012      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003462:	e7ff      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b21      	cmp	r3, #33	; 0x21
 8003484:	d164      	bne.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d012      	beq.n	80034b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034b4:	e04c      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d01d      	beq.n	80034f8 <I2C_MasterTransmit_BTF+0x8c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d01a      	beq.n	80034f8 <I2C_MasterTransmit_BTF+0x8c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d016      	beq.n	80034f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2211      	movs	r2, #17
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff fec1 	bl	8003278 <HAL_I2C_MasterTxCpltCallback>
}
 80034f6:	e02b      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003506:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d107      	bne.n	8003542 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fedc 	bl	80032f8 <HAL_I2C_MemTxCpltCallback>
}
 8003540:	e006      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fe94 	bl	8003278 <HAL_I2C_MasterTxCpltCallback>
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11d      	bne.n	80035ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10b      	bne.n	8003590 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	b2da      	uxtb	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	1c9a      	adds	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800358e:	e073      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	b29b      	uxth	r3, r3
 8003596:	121b      	asrs	r3, r3, #8
 8003598:	b2da      	uxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035aa:	e065      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10b      	bne.n	80035cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035ca:	e055      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d151      	bne.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b22      	cmp	r3, #34	; 0x22
 80035d8:	d10d      	bne.n	80035f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035f4:	e040      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b21      	cmp	r3, #33	; 0x21
 8003604:	d112      	bne.n	800362c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800362a:	e025      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d120      	bne.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b21      	cmp	r3, #33	; 0x21
 800363a:	d11d      	bne.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800364a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fe40 	bl	80032f8 <HAL_I2C_MemTxCpltCallback>
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b22      	cmp	r3, #34	; 0x22
 8003692:	f040 80a2 	bne.w	80037da <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d921      	bls.n	80036e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	f040 8082 	bne.w	80037da <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80036e6:	e078      	b.n	80037da <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d074      	beq.n	80037da <I2C_MasterReceive_RXNE+0x15a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d002      	beq.n	80036fc <I2C_MasterReceive_RXNE+0x7c>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d16e      	bne.n	80037da <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 fa0b 	bl	8004b18 <I2C_WaitOnSTOPRequestThroughIT>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d142      	bne.n	800378e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003716:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003726:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d10a      	bne.n	8003778 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f00c fe91 	bl	8010498 <HAL_I2C_MemRxCpltCallback>
}
 8003776:	e030      	b.n	80037da <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2212      	movs	r2, #18
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fd80 	bl	800328c <HAL_I2C_MasterRxCpltCallback>
}
 800378c:	e025      	b.n	80037da <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800379c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fd99 	bl	800330c <HAL_I2C_ErrorCallback>
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d11b      	bne.n	8003832 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003830:	e0bd      	b.n	80039ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b03      	cmp	r3, #3
 800383a:	d129      	bne.n	8003890 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b04      	cmp	r3, #4
 8003850:	d00a      	beq.n	8003868 <I2C_MasterReceive_BTF+0x86>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d007      	beq.n	8003868 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800388e:	e08e      	b.n	80039ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d176      	bne.n	8003988 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d002      	beq.n	80038a6 <I2C_MasterReceive_BTF+0xc4>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d108      	bne.n	80038b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e019      	b.n	80038ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <I2C_MasterReceive_BTF+0xe2>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d108      	bne.n	80038d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e00a      	b.n	80038ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d007      	beq.n	80038ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003946:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d10a      	bne.n	8003972 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f00c fd94 	bl	8010498 <HAL_I2C_MemRxCpltCallback>
}
 8003970:	e01d      	b.n	80039ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2212      	movs	r2, #18
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fc83 	bl	800328c <HAL_I2C_MasterRxCpltCallback>
}
 8003986:	e012      	b.n	80039ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d117      	bne.n	80039fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039e4:	e067      	b.n	8003ab6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
}
 80039f8:	e05d      	b.n	8003ab6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a02:	d133      	bne.n	8003a6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b21      	cmp	r3, #33	; 0x21
 8003a0e:	d109      	bne.n	8003a24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a20:	611a      	str	r2, [r3, #16]
 8003a22:	e008      	b.n	8003a36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <I2C_Master_SB+0x92>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d108      	bne.n	8003a5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d032      	beq.n	8003ab6 <I2C_Master_SB+0x100>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02d      	beq.n	8003ab6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a68:	605a      	str	r2, [r3, #4]
}
 8003a6a:	e024      	b.n	8003ab6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10e      	bne.n	8003a92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	11db      	asrs	r3, r3, #7
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f003 0306 	and.w	r3, r3, #6
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f063 030f 	orn	r3, r3, #15
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	611a      	str	r2, [r3, #16]
}
 8003a90:	e011      	b.n	8003ab6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10d      	bne.n	8003ab6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	11db      	asrs	r3, r3, #7
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0306 	and.w	r3, r3, #6
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f063 030e 	orn	r3, r3, #14
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <I2C_Master_ADD10+0x26>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d108      	bne.n	8003afa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00c      	beq.n	8003b0a <I2C_Master_ADD10+0x48>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b08:	605a      	str	r2, [r3, #4]
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b091      	sub	sp, #68	; 0x44
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b22      	cmp	r3, #34	; 0x22
 8003b3e:	f040 8169 	bne.w	8003e14 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <I2C_Master_ADDR+0x54>
 8003b4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d10b      	bne.n	8003b6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b52:	2300      	movs	r3, #0
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	e160      	b.n	8003e2c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11d      	bne.n	8003bae <I2C_Master_ADDR+0x98>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b7a:	d118      	bne.n	8003bae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	651a      	str	r2, [r3, #80]	; 0x50
 8003bac:	e13e      	b.n	8003e2c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d113      	bne.n	8003be0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e115      	b.n	8003e0c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	f040 808a 	bne.w	8003d00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf2:	d137      	bne.n	8003c64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c12:	d113      	bne.n	8003c3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	e0e7      	b.n	8003e0c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	623b      	str	r3, [r7, #32]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e0d3      	b.n	8003e0c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d02e      	beq.n	8003cc8 <I2C_Master_ADDR+0x1b2>
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d02b      	beq.n	8003cc8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	2b12      	cmp	r3, #18
 8003c74:	d102      	bne.n	8003c7c <I2C_Master_ADDR+0x166>
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d125      	bne.n	8003cc8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00e      	beq.n	8003ca0 <I2C_Master_ADDR+0x18a>
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d00b      	beq.n	8003ca0 <I2C_Master_ADDR+0x18a>
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d008      	beq.n	8003ca0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e007      	b.n	8003cb0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	e0a1      	b.n	8003e0c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e085      	b.n	8003e0c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d14d      	bne.n	8003da6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d016      	beq.n	8003d3e <I2C_Master_ADDR+0x228>
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d013      	beq.n	8003d3e <I2C_Master_ADDR+0x228>
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d010      	beq.n	8003d3e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e007      	b.n	8003d4e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5c:	d117      	bne.n	8003d8e <I2C_Master_ADDR+0x278>
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d64:	d00b      	beq.n	8003d7e <I2C_Master_ADDR+0x268>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d008      	beq.n	8003d7e <I2C_Master_ADDR+0x268>
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d005      	beq.n	8003d7e <I2C_Master_ADDR+0x268>
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d002      	beq.n	8003d7e <I2C_Master_ADDR+0x268>
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d107      	bne.n	8003d8e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	e032      	b.n	8003e0c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003db4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc4:	d117      	bne.n	8003df6 <I2C_Master_ADDR+0x2e0>
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dcc:	d00b      	beq.n	8003de6 <I2C_Master_ADDR+0x2d0>
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d008      	beq.n	8003de6 <I2C_Master_ADDR+0x2d0>
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d005      	beq.n	8003de6 <I2C_Master_ADDR+0x2d0>
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d002      	beq.n	8003de6 <I2C_Master_ADDR+0x2d0>
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d107      	bne.n	8003df6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003df4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e12:	e00b      	b.n	8003e2c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
}
 8003e2a:	e7ff      	b.n	8003e2c <I2C_Master_ADDR+0x316>
 8003e2c:	bf00      	nop
 8003e2e:	3744      	adds	r7, #68	; 0x44
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d02b      	beq.n	8003eaa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d114      	bne.n	8003eaa <I2C_SlaveTransmit_TXE+0x72>
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b29      	cmp	r3, #41	; 0x29
 8003e84:	d111      	bne.n	8003eaa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2221      	movs	r2, #33	; 0x21
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2228      	movs	r2, #40	; 0x28
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff f9fb 	bl	80032a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d011      	beq.n	8003ee8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02c      	beq.n	8003f68 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d114      	bne.n	8003f68 <I2C_SlaveReceive_RXNE+0x74>
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b2a      	cmp	r3, #42	; 0x2a
 8003f42:	d111      	bne.n	8003f68 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2222      	movs	r2, #34	; 0x22
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2228      	movs	r2, #40	; 0x28
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff f9a6 	bl	80032b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d012      	beq.n	8003fa8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fce:	2b28      	cmp	r3, #40	; 0x28
 8003fd0:	d127      	bne.n	8004022 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	09db      	lsrs	r3, r3, #7
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	81bb      	strh	r3, [r7, #12]
 8004004:	e002      	b.n	800400c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004014:	89ba      	ldrh	r2, [r7, #12]
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff f954 	bl	80032c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004020:	e00e      	b.n	8004040 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004056:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004066:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004068:	2300      	movs	r3, #0
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004094:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a4:	d172      	bne.n	800418c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b22      	cmp	r3, #34	; 0x22
 80040aa:	d002      	beq.n	80040b2 <I2C_Slave_STOPF+0x6a>
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	d135      	bne.n	800411e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f043 0204 	orr.w	r2, r3, #4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe f8c2 	bl	8002274 <HAL_DMA_GetState>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d049      	beq.n	800418a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	4a69      	ldr	r2, [pc, #420]	; (80042a0 <I2C_Slave_STOPF+0x258>)
 80040fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd ff0a 	bl	8001f1c <HAL_DMA_Abort_IT>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d03d      	beq.n	800418a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004118:	4610      	mov	r0, r2
 800411a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800411c:	e035      	b.n	800418a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0204 	orr.w	r2, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f88c 	bl	8002274 <HAL_DMA_GetState>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	d014      	beq.n	800418c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	4a4e      	ldr	r2, [pc, #312]	; (80042a0 <I2C_Slave_STOPF+0x258>)
 8004168:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fed4 	bl	8001f1c <HAL_DMA_Abort_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004184:	4610      	mov	r0, r2
 8004186:	4798      	blx	r3
 8004188:	e000      	b.n	800418c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800418a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03e      	beq.n	8004214 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d112      	bne.n	80041ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d112      	bne.n	80041fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8b3 	bl	8004388 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004222:	e039      	b.n	8004298 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b2a      	cmp	r3, #42	; 0x2a
 8004228:	d109      	bne.n	800423e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2228      	movs	r2, #40	; 0x28
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff f83b 	bl	80032b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b28      	cmp	r3, #40	; 0x28
 8004248:	d111      	bne.n	800426e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <I2C_Slave_STOPF+0x25c>)
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff f83c 	bl	80032e4 <HAL_I2C_ListenCpltCallback>
}
 800426c:	e014      	b.n	8004298 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	2b22      	cmp	r3, #34	; 0x22
 8004274:	d002      	beq.n	800427c <I2C_Slave_STOPF+0x234>
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b22      	cmp	r3, #34	; 0x22
 800427a:	d10d      	bne.n	8004298 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff f80e 	bl	80032b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	08004719 	.word	0x08004719
 80042a4:	ffff0000 	.word	0xffff0000

080042a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d002      	beq.n	80042ca <I2C_Slave_AF+0x22>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d129      	bne.n	800431e <I2C_Slave_AF+0x76>
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b28      	cmp	r3, #40	; 0x28
 80042ce:	d126      	bne.n	800431e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a2c      	ldr	r2, [pc, #176]	; (8004384 <I2C_Slave_AF+0xdc>)
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fe ffe4 	bl	80032e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800431c:	e02e      	b.n	800437c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b21      	cmp	r3, #33	; 0x21
 8004322:	d126      	bne.n	8004372 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a17      	ldr	r2, [pc, #92]	; (8004384 <I2C_Slave_AF+0xdc>)
 8004328:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2221      	movs	r2, #33	; 0x21
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800434e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004358:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fe ff98 	bl	80032a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004370:	e004      	b.n	800437c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437a:	615a      	str	r2, [r3, #20]
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	ffff0000 	.word	0xffff0000

08004388 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043a0:	7bbb      	ldrb	r3, [r7, #14]
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d002      	beq.n	80043ac <I2C_ITError+0x24>
 80043a6:	7bbb      	ldrb	r3, [r7, #14]
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d10a      	bne.n	80043c2 <I2C_ITError+0x3a>
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b22      	cmp	r3, #34	; 0x22
 80043b0:	d107      	bne.n	80043c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043c8:	2b28      	cmp	r3, #40	; 0x28
 80043ca:	d107      	bne.n	80043dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2228      	movs	r2, #40	; 0x28
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043da:	e015      	b.n	8004408 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ea:	d00a      	beq.n	8004402 <I2C_ITError+0x7a>
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b60      	cmp	r3, #96	; 0x60
 80043f0:	d007      	beq.n	8004402 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	d162      	bne.n	80044de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004426:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d020      	beq.n	8004478 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	4a6a      	ldr	r2, [pc, #424]	; (80045e4 <I2C_ITError+0x25c>)
 800443c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd fd6a 	bl	8001f1c <HAL_DMA_Abort_IT>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8089 	beq.w	8004562 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004472:	4610      	mov	r0, r2
 8004474:	4798      	blx	r3
 8004476:	e074      	b.n	8004562 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	4a59      	ldr	r2, [pc, #356]	; (80045e4 <I2C_ITError+0x25c>)
 800447e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fd49 	bl	8001f1c <HAL_DMA_Abort_IT>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d068      	beq.n	8004562 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d10b      	bne.n	80044b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d8:	4610      	mov	r0, r2
 80044da:	4798      	blx	r3
 80044dc:	e041      	b.n	8004562 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b60      	cmp	r3, #96	; 0x60
 80044e8:	d125      	bne.n	8004536 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d10b      	bne.n	800451e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fe fef6 	bl	8003320 <HAL_I2C_AbortCpltCallback>
 8004534:	e015      	b.n	8004562 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d10b      	bne.n	800455c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fe fed5 	bl	800330c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10e      	bne.n	8004590 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d113      	bne.n	80045dc <I2C_ITError+0x254>
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b28      	cmp	r3, #40	; 0x28
 80045b8:	d110      	bne.n	80045dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <I2C_ITError+0x260>)
 80045be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fe fe84 	bl	80032e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	08004719 	.word	0x08004719
 80045e8:	ffff0000 	.word	0xffff0000

080045ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	460b      	mov	r3, r1
 8004600:	813b      	strh	r3, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004614:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	2200      	movs	r2, #0
 800461e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f920 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463c:	d103      	bne.n	8004646 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e05f      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004658:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	492d      	ldr	r1, [pc, #180]	; (8004714 <I2C_RequestMemoryWrite+0x128>)
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f958 	bl	8004916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e04c      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004688:	6a39      	ldr	r1, [r7, #32]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f9c2 	bl	8004a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2b04      	cmp	r3, #4
 800469c:	d107      	bne.n	80046ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e02b      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b8:	893b      	ldrh	r3, [r7, #8]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]
 80046c2:	e021      	b.n	8004708 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046c4:	893b      	ldrh	r3, [r7, #8]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	6a39      	ldr	r1, [r7, #32]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f99c 	bl	8004a14 <I2C_WaitOnTXEFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d107      	bne.n	80046fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e005      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046fe:	893b      	ldrh	r3, [r7, #8]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	00010002 	.word	0x00010002

08004718 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004732:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <I2C_DMAAbort+0x148>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <I2C_DMAAbort+0x14c>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0a1a      	lsrs	r2, r3, #8
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00da      	lsls	r2, r3, #3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0220 	orr.w	r2, r3, #32
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800475e:	e00a      	b.n	8004776 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3b01      	subs	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004774:	d0ea      	beq.n	800474c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	2200      	movs	r2, #0
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	2200      	movs	r2, #0
 8004794:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	2200      	movs	r2, #0
 80047ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	2200      	movs	r2, #0
 80047ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b60      	cmp	r3, #96	; 0x60
 80047e6:	d10e      	bne.n	8004806 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2200      	movs	r2, #0
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047fe:	6978      	ldr	r0, [r7, #20]
 8004800:	f7fe fd8e 	bl	8003320 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004804:	e027      	b.n	8004856 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800480c:	2b28      	cmp	r3, #40	; 0x28
 800480e:	d117      	bne.n	8004840 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800482e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2228      	movs	r2, #40	; 0x28
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800483e:	e007      	b.n	8004850 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004850:	6978      	ldr	r0, [r7, #20]
 8004852:	f7fe fd5b 	bl	800330c <HAL_I2C_ErrorCallback>
}
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000118 	.word	0x20000118
 8004864:	14f8b589 	.word	0x14f8b589

08004868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004878:	e025      	b.n	80048c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d021      	beq.n	80048c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004882:	f7fc fc5d 	bl	8001140 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e023      	b.n	800490e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10d      	bne.n	80048ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	43da      	mvns	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	e00c      	b.n	8004906 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	43da      	mvns	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4013      	ands	r3, r2
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	429a      	cmp	r2, r3
 800490a:	d0b6      	beq.n	800487a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004924:	e051      	b.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d123      	bne.n	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004944:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800494e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f043 0204 	orr.w	r2, r3, #4
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e046      	b.n	8004a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d021      	beq.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fc fbdb 	bl	8001140 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d116      	bne.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e020      	b.n	8004a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10c      	bne.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	43da      	mvns	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e00b      	b.n	8004a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	43da      	mvns	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4013      	ands	r3, r2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d18d      	bne.n	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a20:	e02d      	b.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f8aa 	bl	8004b7c <I2C_IsAcknowledgeFailed>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e02d      	b.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d021      	beq.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fc fb81 	bl	8001140 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d116      	bne.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e007      	b.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d1ca      	bne.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa2:	e02d      	b.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f869 	bl	8004b7c <I2C_IsAcknowledgeFailed>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e02d      	b.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d021      	beq.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abc:	f7fc fb40 	bl	8001140 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d302      	bcc.n	8004ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d116      	bne.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e007      	b.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d1ca      	bne.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b24:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	0a1a      	lsrs	r2, r3, #8
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d107      	bne.n	8004b56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e008      	b.n	8004b68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b64:	d0e9      	beq.n	8004b3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000118 	.word	0x20000118
 8004b78:	14f8b589 	.word	0x14f8b589

08004b7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b92:	d11b      	bne.n	8004bcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bea:	d103      	bne.n	8004bf4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bf2:	e007      	b.n	8004c04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bfc:	d102      	bne.n	8004c04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2208      	movs	r2, #8
 8004c02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c12:	b08f      	sub	sp, #60	; 0x3c
 8004c14:	af0a      	add	r7, sp, #40	; 0x28
 8004c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e10f      	b.n	8004e42 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f00b fd51 	bl	80106e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2203      	movs	r2, #3
 8004c46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f005 fb7e 	bl	800a362 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	687e      	ldr	r6, [r7, #4]
 8004c6e:	466d      	mov	r5, sp
 8004c70:	f106 0410 	add.w	r4, r6, #16
 8004c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c80:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c84:	1d33      	adds	r3, r6, #4
 8004c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c88:	6838      	ldr	r0, [r7, #0]
 8004c8a:	f005 fa55 	bl	800a138 <USB_CoreInit>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0d0      	b.n	8004e42 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f005 fb6c 	bl	800a384 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e04a      	b.n	8004d48 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	333d      	adds	r3, #61	; 0x3d
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	333c      	adds	r3, #60	; 0x3c
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	b298      	uxth	r0, r3
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3342      	adds	r3, #66	; 0x42
 8004cee:	4602      	mov	r2, r0
 8004cf0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	333f      	adds	r3, #63	; 0x3f
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	3344      	adds	r3, #68	; 0x44
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	3348      	adds	r3, #72	; 0x48
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3350      	adds	r3, #80	; 0x50
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	3301      	adds	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d3af      	bcc.n	8004cb2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e044      	b.n	8004de2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d80:	7bfa      	ldrb	r2, [r7, #15]
 8004d82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d9a:	7bfa      	ldrb	r2, [r7, #15]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dc6:	7bfa      	ldrb	r2, [r7, #15]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	3301      	adds	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
 8004de2:	7bfa      	ldrb	r2, [r7, #15]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d3b5      	bcc.n	8004d58 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	687e      	ldr	r6, [r7, #4]
 8004df4:	466d      	mov	r5, sp
 8004df6:	f106 0410 	add.w	r4, r6, #16
 8004dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e06:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e0a:	1d33      	adds	r3, r6, #4
 8004e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e0e:	6838      	ldr	r0, [r7, #0]
 8004e10:	f005 fb04 	bl	800a41c <USB_DevInit>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e00d      	b.n	8004e42 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f006 fb80 	bl	800b540 <USB_DevDisconnect>

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_PCD_Start+0x1c>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e020      	b.n	8004ea8 <HAL_PCD_Start+0x5e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d109      	bne.n	8004e8a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d005      	beq.n	8004e8a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f005 fa56 	bl	800a340 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f006 fb30 	bl	800b4fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b08d      	sub	sp, #52	; 0x34
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f006 fbee 	bl	800b6a8 <USB_GetMode>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 839d 	bne.w	800560e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f006 fb52 	bl	800b582 <USB_ReadInterrupts>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8393 	beq.w	800560c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f006 fb49 	bl	800b582 <USB_ReadInterrupts>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d107      	bne.n	8004f0a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f002 0202 	and.w	r2, r2, #2
 8004f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f006 fb37 	bl	800b582 <USB_ReadInterrupts>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d161      	bne.n	8004fe2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0210 	bic.w	r2, r2, #16
 8004f2c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f003 020f 	and.w	r2, r3, #15
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	0c5b      	lsrs	r3, r3, #17
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d124      	bne.n	8004fa4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d035      	beq.n	8004fd2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	6a38      	ldr	r0, [r7, #32]
 8004f7a:	f006 f96e 	bl	800b25a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f8a:	441a      	add	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9c:	441a      	add	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	619a      	str	r2, [r3, #24]
 8004fa2:	e016      	b.n	8004fd2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	0c5b      	lsrs	r3, r3, #17
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d110      	bne.n	8004fd2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6a38      	ldr	r0, [r7, #32]
 8004fbc:	f006 f94d 	bl	800b25a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fcc:	441a      	add	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699a      	ldr	r2, [r3, #24]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0210 	orr.w	r2, r2, #16
 8004fe0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f006 facb 	bl	800b582 <USB_ReadInterrupts>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ff2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ff6:	d16e      	bne.n	80050d6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f006 fad1 	bl	800b5a8 <USB_ReadDevAllOutEpInterrupt>
 8005006:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005008:	e062      	b.n	80050d0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d057      	beq.n	80050c4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f006 faf6 	bl	800b610 <USB_ReadDevOutEPInterrupt>
 8005024:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00c      	beq.n	800504a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	461a      	mov	r2, r3
 800503e:	2301      	movs	r3, #1
 8005040:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fdb1 	bl	8005bac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00c      	beq.n	800506e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	2308      	movs	r3, #8
 8005064:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 feab 	bl	8005dc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	461a      	mov	r2, r3
 8005086:	2310      	movs	r3, #16
 8005088:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	461a      	mov	r2, r3
 80050a2:	2320      	movs	r3, #32
 80050a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	461a      	mov	r2, r3
 80050be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	3301      	adds	r3, #1
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d199      	bne.n	800500a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f006 fa51 	bl	800b582 <USB_ReadInterrupts>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050ea:	f040 80c0 	bne.w	800526e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f006 fa72 	bl	800b5dc <USB_ReadDevAllInEpInterrupt>
 80050f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80050fe:	e0b2      	b.n	8005266 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80a7 	beq.w	800525a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f006 fa98 	bl	800b64c <USB_ReadDevInEPInterrupt>
 800511c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d057      	beq.n	80051d8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	2201      	movs	r2, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43db      	mvns	r3, r3
 8005142:	69f9      	ldr	r1, [r7, #28]
 8005144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005148:	4013      	ands	r3, r2
 800514a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	461a      	mov	r2, r3
 800515a:	2301      	movs	r3, #1
 800515c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d132      	bne.n	80051cc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3348      	adds	r3, #72	; 0x48
 8005176:	6819      	ldr	r1, [r3, #0]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4403      	add	r3, r0
 8005186:	3344      	adds	r3, #68	; 0x44
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4419      	add	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4403      	add	r3, r0
 800519a:	3348      	adds	r3, #72	; 0x48
 800519c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d113      	bne.n	80051cc <HAL_PCD_IRQHandler+0x31c>
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	4613      	mov	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3350      	adds	r3, #80	; 0x50
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d108      	bne.n	80051cc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051c4:	461a      	mov	r2, r3
 80051c6:	2101      	movs	r1, #1
 80051c8:	f006 faa0 	bl	800b70c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f00b fb07 	bl	80107e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	461a      	mov	r2, r3
 80051f0:	2308      	movs	r3, #8
 80051f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	461a      	mov	r2, r3
 800520c:	2310      	movs	r3, #16
 800520e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	461a      	mov	r2, r3
 8005228:	2340      	movs	r3, #64	; 0x40
 800522a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	461a      	mov	r2, r3
 8005244:	2302      	movs	r3, #2
 8005246:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fc1b 	bl	8005a90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	3301      	adds	r3, #1
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	2b00      	cmp	r3, #0
 800526a:	f47f af49 	bne.w	8005100 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f006 f985 	bl	800b582 <USB_ReadInterrupts>
 8005278:	4603      	mov	r3, r0
 800527a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005282:	d122      	bne.n	80052ca <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d108      	bne.n	80052b4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80052aa:	2100      	movs	r1, #0
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fe27 	bl	8005f00 <HAL_PCDEx_LPM_Callback>
 80052b2:	e002      	b.n	80052ba <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f00b fb03 	bl	80108c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80052c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f006 f957 	bl	800b582 <USB_ReadInterrupts>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052de:	d112      	bne.n	8005306 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d102      	bne.n	80052f6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f00b fabf 	bl	8010874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005304:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f006 f939 	bl	800b582 <USB_ReadInterrupts>
 8005310:	4603      	mov	r3, r0
 8005312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531a:	f040 80c7 	bne.w	80054ac <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2110      	movs	r1, #16
 8005338:	4618      	mov	r0, r3
 800533a:	f005 f9d3 	bl	800a6e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533e:	2300      	movs	r3, #0
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005342:	e056      	b.n	80053f2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	461a      	mov	r2, r3
 8005352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005356:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005376:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	440a      	add	r2, r1
 800538e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005392:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005396:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	461a      	mov	r2, r3
 80053a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	3301      	adds	r3, #1
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d3a3      	bcc.n	8005344 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800540a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800540e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	2b00      	cmp	r3, #0
 8005416:	d016      	beq.n	8005446 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005428:	f043 030b 	orr.w	r3, r3, #11
 800542c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800543e:	f043 030b 	orr.w	r3, r3, #11
 8005442:	6453      	str	r3, [r2, #68]	; 0x44
 8005444:	e015      	b.n	8005472 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005458:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800545c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546c:	f043 030b 	orr.w	r3, r3, #11
 8005470:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005480:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005484:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005496:	461a      	mov	r2, r3
 8005498:	f006 f938 	bl	800b70c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80054aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f006 f866 	bl	800b582 <USB_ReadInterrupts>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c0:	d124      	bne.n	800550c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f006 f8fc 	bl	800b6c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f005 f964 	bl	800a79e <USB_GetDevSpeed>
 80054d6:	4603      	mov	r3, r0
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681c      	ldr	r4, [r3, #0]
 80054e2:	f001 f937 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 80054e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	4620      	mov	r0, r4
 80054f2:	f004 fe83 	bl	800a1fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f00b f99d 	bl	8010836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800550a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f006 f836 	bl	800b582 <USB_ReadInterrupts>
 8005516:	4603      	mov	r3, r0
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10a      	bne.n	8005536 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f00b f97a 	bl	801081a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f002 0208 	and.w	r2, r2, #8
 8005534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f006 f821 	bl	800b582 <USB_ReadInterrupts>
 8005540:	4603      	mov	r3, r0
 8005542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554a:	d10f      	bne.n	800556c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	b2db      	uxtb	r3, r3
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f00b f9d2 	bl	8010900 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800556a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f006 f806 	bl	800b582 <USB_ReadInterrupts>
 8005576:	4603      	mov	r3, r0
 8005578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005580:	d10f      	bne.n	80055a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f00b f9a5 	bl	80108dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80055a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f005 ffeb 	bl	800b582 <USB_ReadInterrupts>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d10a      	bne.n	80055ce <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f00b f9b3 	bl	8010924 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f005 ffd5 	bl	800b582 <USB_ReadInterrupts>
 80055d8:	4603      	mov	r3, r0
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d115      	bne.n	800560e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f00b f9a3 	bl	8010940 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	e000      	b.n	800560e <HAL_PCD_IRQHandler+0x75e>
      return;
 800560c:	bf00      	nop
    }
  }
}
 800560e:	3734      	adds	r7, #52	; 0x34
 8005610:	46bd      	mov	sp, r7
 8005612:	bd90      	pop	{r4, r7, pc}

08005614 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_PCD_SetAddress+0x1a>
 800562a:	2302      	movs	r3, #2
 800562c:	e013      	b.n	8005656 <HAL_PCD_SetAddress+0x42>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	78fa      	ldrb	r2, [r7, #3]
 8005644:	4611      	mov	r1, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f005 ff33 	bl	800b4b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	461a      	mov	r2, r3
 800566c:	4603      	mov	r3, r0
 800566e:	70fb      	strb	r3, [r7, #3]
 8005670:	460b      	mov	r3, r1
 8005672:	803b      	strh	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800567c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	da0f      	bge.n	80056a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	f003 020f 	and.w	r2, r3, #15
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	3338      	adds	r3, #56	; 0x38
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4413      	add	r3, r2
 8005698:	3304      	adds	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	705a      	strb	r2, [r3, #1]
 80056a2:	e00f      	b.n	80056c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	4613      	mov	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4413      	add	r3, r2
 80056ba:	3304      	adds	r3, #4
 80056bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056d0:	883a      	ldrh	r2, [r7, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	78ba      	ldrb	r2, [r7, #2]
 80056da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056ee:	78bb      	ldrb	r3, [r7, #2]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d102      	bne.n	80056fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_PCD_EP_Open+0xaa>
 8005704:	2302      	movs	r3, #2
 8005706:	e00e      	b.n	8005726 <HAL_PCD_EP_Open+0xc8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68f9      	ldr	r1, [r7, #12]
 8005716:	4618      	mov	r0, r3
 8005718:	f005 f866 	bl	800a7e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005724:	7afb      	ldrb	r3, [r7, #11]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800573a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800573e:	2b00      	cmp	r3, #0
 8005740:	da0f      	bge.n	8005762 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	f003 020f 	and.w	r2, r3, #15
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	3338      	adds	r3, #56	; 0x38
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	3304      	adds	r3, #4
 8005758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	705a      	strb	r2, [r3, #1]
 8005760:	e00f      	b.n	8005782 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	3304      	adds	r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_PCD_EP_Close+0x6e>
 8005798:	2302      	movs	r3, #2
 800579a:	e00e      	b.n	80057ba <HAL_PCD_EP_Close+0x8c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f005 f8a4 	bl	800a8f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	460b      	mov	r3, r1
 80057d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057d2:	7afb      	ldrb	r3, [r7, #11]
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2200      	movs	r2, #0
 80057fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005804:	7afb      	ldrb	r3, [r7, #11]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	b2da      	uxtb	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d102      	bne.n	800581e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	6979      	ldr	r1, [r7, #20]
 8005836:	f005 fb7f 	bl	800af38 <USB_EP0StartXfer>
 800583a:	e008      	b.n	800584e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	6979      	ldr	r1, [r7, #20]
 800584a:	f005 f931 	bl	800aab0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	f003 020f 	and.w	r2, r3, #15
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	460b      	mov	r3, r1
 8005896:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	f003 020f 	and.w	r2, r3, #15
 800589e:	4613      	mov	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	3338      	adds	r3, #56	; 0x38
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	3304      	adds	r3, #4
 80058ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2201      	movs	r2, #1
 80058c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d102      	bne.n	80058e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	6979      	ldr	r1, [r7, #20]
 80058fa:	f005 fb1d 	bl	800af38 <USB_EP0StartXfer>
 80058fe:	e008      	b.n	8005912 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	f005 f8cf 	bl	800aab0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d901      	bls.n	800593a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e050      	b.n	80059dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800593a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800593e:	2b00      	cmp	r3, #0
 8005940:	da0f      	bge.n	8005962 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	3338      	adds	r3, #56	; 0x38
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4413      	add	r3, r2
 8005956:	3304      	adds	r3, #4
 8005958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	705a      	strb	r2, [r3, #1]
 8005960:	e00d      	b.n	800597e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	4613      	mov	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4413      	add	r3, r2
 8005974:	3304      	adds	r3, #4
 8005976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_PCD_EP_SetStall+0x82>
 800599a:	2302      	movs	r3, #2
 800599c:	e01e      	b.n	80059dc <HAL_PCD_EP_SetStall+0xc0>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f005 fcac 	bl	800b30a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	b2d9      	uxtb	r1, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059cc:	461a      	mov	r2, r3
 80059ce:	f005 fe9d 	bl	800b70c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d901      	bls.n	8005a02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e042      	b.n	8005a88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	da0f      	bge.n	8005a2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	f003 020f 	and.w	r2, r3, #15
 8005a10:	4613      	mov	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	3338      	adds	r3, #56	; 0x38
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3304      	adds	r3, #4
 8005a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	705a      	strb	r2, [r3, #1]
 8005a28:	e00f      	b.n	8005a4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	4613      	mov	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	4413      	add	r3, r2
 8005a40:	3304      	adds	r3, #4
 8005a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_PCD_EP_ClrStall+0x86>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e00e      	b.n	8005a88 <HAL_PCD_EP_ClrStall+0xa4>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f005 fcb4 	bl	800b3e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	3338      	adds	r3, #56	; 0x38
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	699a      	ldr	r2, [r3, #24]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d901      	bls.n	8005ac8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e06c      	b.n	8005ba2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d902      	bls.n	8005ae4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aec:	e02b      	b.n	8005b46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d902      	bls.n	8005b0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3303      	adds	r3, #3
 8005b0e:	089b      	lsrs	r3, r3, #2
 8005b10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68d9      	ldr	r1, [r3, #12]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4603      	mov	r3, r0
 8005b28:	6978      	ldr	r0, [r7, #20]
 8005b2a:	f005 fb58 	bl	800b1de <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	441a      	add	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d809      	bhi.n	8005b70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d203      	bcs.n	8005b70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1be      	bne.n	8005aee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d811      	bhi.n	8005ba0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	2201      	movs	r2, #1
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	333c      	adds	r3, #60	; 0x3c
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	f040 80a0 	bne.w	8005d24 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d015      	beq.n	8005c1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a72      	ldr	r2, [pc, #456]	; (8005dbc <PCD_EP_OutXfrComplete_int+0x210>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	f240 80dd 	bls.w	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80d7 	beq.w	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	461a      	mov	r2, r3
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	6093      	str	r3, [r2, #8]
 8005c18:	e0cb      	b.n	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d009      	beq.n	8005c38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	461a      	mov	r2, r3
 8005c32:	2320      	movs	r3, #32
 8005c34:	6093      	str	r3, [r2, #8]
 8005c36:	e0bc      	b.n	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 80b7 	bne.w	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a5d      	ldr	r2, [pc, #372]	; (8005dbc <PCD_EP_OutXfrComplete_int+0x210>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d90f      	bls.n	8005c6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c68:	6093      	str	r3, [r2, #8]
 8005c6a:	e0a2      	b.n	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	0159      	lsls	r1, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005c92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4403      	add	r3, r0
 8005ca2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005ca6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4403      	add	r3, r0
 8005cca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4419      	add	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4403      	add	r3, r0
 8005ce0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ce4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d114      	bne.n	8005d16 <PCD_EP_OutXfrComplete_int+0x16a>
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d108      	bne.n	8005d16 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2101      	movs	r1, #1
 8005d12:	f005 fcfb 	bl	800b70c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f00a fd47 	bl	80107b0 <HAL_PCD_DataOutStageCallback>
 8005d22:	e046      	b.n	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a26      	ldr	r2, [pc, #152]	; (8005dc0 <PCD_EP_OutXfrComplete_int+0x214>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d124      	bne.n	8005d76 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	461a      	mov	r2, r3
 8005d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d48:	6093      	str	r3, [r2, #8]
 8005d4a:	e032      	b.n	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	461a      	mov	r2, r3
 8005d64:	2320      	movs	r3, #32
 8005d66:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f00a fd1e 	bl	80107b0 <HAL_PCD_DataOutStageCallback>
 8005d74:	e01d      	b.n	8005db2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d114      	bne.n	8005da6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d108      	bne.n	8005da6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2100      	movs	r1, #0
 8005da2:	f005 fcb3 	bl	800b70c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f00a fcff 	bl	80107b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	4f54300a 	.word	0x4f54300a
 8005dc0:	4f54310a 	.word	0x4f54310a

08005dc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	333c      	adds	r3, #60	; 0x3c
 8005ddc:	3304      	adds	r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d90e      	bls.n	8005e18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	461a      	mov	r2, r3
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f00a fcb7 	bl	801078c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d90c      	bls.n	8005e40 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d108      	bne.n	8005e40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e38:	461a      	mov	r2, r3
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	f005 fc66 	bl	800b70c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	4f54300a 	.word	0x4f54300a

08005e50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e6e:	883b      	ldrh	r3, [r7, #0]
 8005e70:	0419      	lsls	r1, r3, #16
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e7c:	e028      	b.n	8005ed0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e00d      	b.n	8005eae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	3340      	adds	r3, #64	; 0x40
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	0c1b      	lsrs	r3, r3, #16
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d3ec      	bcc.n	8005e92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005eb8:	883b      	ldrh	r3, [r7, #0]
 8005eba:	0418      	lsls	r0, r3, #16
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4302      	orrs	r2, r0
 8005ec8:	3340      	adds	r3, #64	; 0x40
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	887a      	ldrh	r2, [r7, #2]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e262      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d075      	beq.n	8006022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f36:	4ba3      	ldr	r3, [pc, #652]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d00c      	beq.n	8005f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f42:	4ba0      	ldr	r3, [pc, #640]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d112      	bne.n	8005f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f4e:	4b9d      	ldr	r3, [pc, #628]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f5a:	d10b      	bne.n	8005f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5c:	4b99      	ldr	r3, [pc, #612]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d05b      	beq.n	8006020 <HAL_RCC_OscConfig+0x108>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d157      	bne.n	8006020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e23d      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	d106      	bne.n	8005f8c <HAL_RCC_OscConfig+0x74>
 8005f7e:	4b91      	ldr	r3, [pc, #580]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a90      	ldr	r2, [pc, #576]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e01d      	b.n	8005fc8 <HAL_RCC_OscConfig+0xb0>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x98>
 8005f96:	4b8b      	ldr	r3, [pc, #556]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a8a      	ldr	r2, [pc, #552]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b88      	ldr	r3, [pc, #544]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a87      	ldr	r2, [pc, #540]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCC_OscConfig+0xb0>
 8005fb0:	4b84      	ldr	r3, [pc, #528]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a83      	ldr	r2, [pc, #524]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b81      	ldr	r3, [pc, #516]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a80      	ldr	r2, [pc, #512]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d013      	beq.n	8005ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fb f8b6 	bl	8001140 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fd8:	f7fb f8b2 	bl	8001140 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b64      	cmp	r3, #100	; 0x64
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e202      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fea:	4b76      	ldr	r3, [pc, #472]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0xc0>
 8005ff6:	e014      	b.n	8006022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fb f8a2 	bl	8001140 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006000:	f7fb f89e 	bl	8001140 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	; 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e1ee      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006012:	4b6c      	ldr	r3, [pc, #432]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0xe8>
 800601e:	e000      	b.n	8006022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d063      	beq.n	80060f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800602e:	4b65      	ldr	r3, [pc, #404]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800603a:	4b62      	ldr	r3, [pc, #392]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006042:	2b08      	cmp	r3, #8
 8006044:	d11c      	bne.n	8006080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006046:	4b5f      	ldr	r3, [pc, #380]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d116      	bne.n	8006080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006052:	4b5c      	ldr	r3, [pc, #368]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_RCC_OscConfig+0x152>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d001      	beq.n	800606a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e1c2      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606a:	4b56      	ldr	r3, [pc, #344]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4952      	ldr	r1, [pc, #328]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 800607a:	4313      	orrs	r3, r2
 800607c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607e:	e03a      	b.n	80060f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d020      	beq.n	80060ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006088:	4b4f      	ldr	r3, [pc, #316]	; (80061c8 <HAL_RCC_OscConfig+0x2b0>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608e:	f7fb f857 	bl	8001140 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006096:	f7fb f853 	bl	8001140 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e1a3      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a8:	4b46      	ldr	r3, [pc, #280]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b4:	4b43      	ldr	r3, [pc, #268]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4940      	ldr	r1, [pc, #256]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]
 80060c8:	e015      	b.n	80060f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ca:	4b3f      	ldr	r3, [pc, #252]	; (80061c8 <HAL_RCC_OscConfig+0x2b0>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fb f836 	bl	8001140 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060d8:	f7fb f832 	bl	8001140 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e182      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ea:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d030      	beq.n	8006164 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800610a:	4b30      	ldr	r3, [pc, #192]	; (80061cc <HAL_RCC_OscConfig+0x2b4>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006110:	f7fb f816 	bl	8001140 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006118:	f7fb f812 	bl	8001140 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e162      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800612a:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 800612c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x200>
 8006136:	e015      	b.n	8006164 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006138:	4b24      	ldr	r3, [pc, #144]	; (80061cc <HAL_RCC_OscConfig+0x2b4>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613e:	f7fa ffff 	bl	8001140 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006146:	f7fa fffb 	bl	8001140 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e14b      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 800615a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f0      	bne.n	8006146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 809e 	beq.w	80062ae <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006176:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10f      	bne.n	80061a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006190:	6413      	str	r3, [r2, #64]	; 0x40
 8006192:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <HAL_RCC_OscConfig+0x2ac>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619a:	60bb      	str	r3, [r7, #8]
 800619c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_OscConfig+0x2b8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d121      	bne.n	80061f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ae:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <HAL_RCC_OscConfig+0x2b8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a07      	ldr	r2, [pc, #28]	; (80061d0 <HAL_RCC_OscConfig+0x2b8>)
 80061b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ba:	f7fa ffc1 	bl	8001140 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c0:	e011      	b.n	80061e6 <HAL_RCC_OscConfig+0x2ce>
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800
 80061c8:	42470000 	.word	0x42470000
 80061cc:	42470e80 	.word	0x42470e80
 80061d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d4:	f7fa ffb4 	bl	8001140 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e104      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e6:	4b84      	ldr	r3, [pc, #528]	; (80063f8 <HAL_RCC_OscConfig+0x4e0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d106      	bne.n	8006208 <HAL_RCC_OscConfig+0x2f0>
 80061fa:	4b80      	ldr	r3, [pc, #512]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4a7f      	ldr	r2, [pc, #508]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6713      	str	r3, [r2, #112]	; 0x70
 8006206:	e01c      	b.n	8006242 <HAL_RCC_OscConfig+0x32a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b05      	cmp	r3, #5
 800620e:	d10c      	bne.n	800622a <HAL_RCC_OscConfig+0x312>
 8006210:	4b7a      	ldr	r3, [pc, #488]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	4a79      	ldr	r2, [pc, #484]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006216:	f043 0304 	orr.w	r3, r3, #4
 800621a:	6713      	str	r3, [r2, #112]	; 0x70
 800621c:	4b77      	ldr	r3, [pc, #476]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	4a76      	ldr	r2, [pc, #472]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6713      	str	r3, [r2, #112]	; 0x70
 8006228:	e00b      	b.n	8006242 <HAL_RCC_OscConfig+0x32a>
 800622a:	4b74      	ldr	r3, [pc, #464]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	4a73      	ldr	r2, [pc, #460]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	6713      	str	r3, [r2, #112]	; 0x70
 8006236:	4b71      	ldr	r3, [pc, #452]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a70      	ldr	r2, [pc, #448]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 800623c:	f023 0304 	bic.w	r3, r3, #4
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d014      	beq.n	8006274 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624a:	f7fa ff79 	bl	8001140 <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006250:	e009      	b.n	8006266 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f7fa ff75 	bl	8001140 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e0c4      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006266:	4b65      	ldr	r3, [pc, #404]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0ef      	beq.n	8006252 <HAL_RCC_OscConfig+0x33a>
 8006272:	e013      	b.n	800629c <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006274:	f7fa ff64 	bl	8001140 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800627a:	e009      	b.n	8006290 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800627c:	f7fa ff60 	bl	8001140 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e0af      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006290:	4b5a      	ldr	r3, [pc, #360]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1ef      	bne.n	800627c <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d105      	bne.n	80062ae <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a2:	4b56      	ldr	r3, [pc, #344]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	4a55      	ldr	r2, [pc, #340]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 80062a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 809b 	beq.w	80063ee <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062b8:	4b50      	ldr	r3, [pc, #320]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 030c 	and.w	r3, r3, #12
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d05c      	beq.n	800637e <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d141      	bne.n	8006350 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062cc:	4b4c      	ldr	r3, [pc, #304]	; (8006400 <HAL_RCC_OscConfig+0x4e8>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fa ff35 	bl	8001140 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062da:	f7fa ff31 	bl	8001140 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e081      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ec:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f0      	bne.n	80062da <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	019b      	lsls	r3, r3, #6
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	085b      	lsrs	r3, r3, #1
 8006310:	3b01      	subs	r3, #1
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	061b      	lsls	r3, r3, #24
 800631c:	4937      	ldr	r1, [pc, #220]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 800631e:	4313      	orrs	r3, r2
 8006320:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006322:	4b37      	ldr	r3, [pc, #220]	; (8006400 <HAL_RCC_OscConfig+0x4e8>)
 8006324:	2201      	movs	r2, #1
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fa ff0a 	bl	8001140 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006330:	f7fa ff06 	bl	8001140 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e056      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006342:	4b2e      	ldr	r3, [pc, #184]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0f0      	beq.n	8006330 <HAL_RCC_OscConfig+0x418>
 800634e:	e04e      	b.n	80063ee <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006350:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <HAL_RCC_OscConfig+0x4e8>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006356:	f7fa fef3 	bl	8001140 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635e:	f7fa feef 	bl	8001140 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e03f      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <HAL_RCC_OscConfig+0x446>
 800637c:	e037      	b.n	80063ee <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e032      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800638a:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <HAL_RCC_OscConfig+0x4e4>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d028      	beq.n	80063ea <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d121      	bne.n	80063ea <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d11a      	bne.n	80063ea <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063ba:	4013      	ands	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d111      	bne.n	80063ea <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	3b01      	subs	r3, #1
 80063d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d107      	bne.n	80063ea <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d001      	beq.n	80063ee <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40007000 	.word	0x40007000
 80063fc:	40023800 	.word	0x40023800
 8006400:	42470060 	.word	0x42470060

08006404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0cc      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006418:	4b68      	ldr	r3, [pc, #416]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d90c      	bls.n	8006440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006426:	4b65      	ldr	r3, [pc, #404]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b63      	ldr	r3, [pc, #396]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e0b8      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006458:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006470:	4b53      	ldr	r3, [pc, #332]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4a52      	ldr	r2, [pc, #328]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800647a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800647c:	4b50      	ldr	r3, [pc, #320]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	494d      	ldr	r1, [pc, #308]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d044      	beq.n	8006524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a2:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d119      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e07f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d003      	beq.n	80064c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d107      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c2:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e06f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d2:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e067      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064e2:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f023 0203 	bic.w	r2, r3, #3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4934      	ldr	r1, [pc, #208]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064f4:	f7fa fe24 	bl	8001140 <HAL_GetTick>
 80064f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fa:	e00a      	b.n	8006512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fc:	f7fa fe20 	bl	8001140 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	f241 3288 	movw	r2, #5000	; 0x1388
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e04f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006512:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 020c 	and.w	r2, r3, #12
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	429a      	cmp	r2, r3
 8006522:	d1eb      	bne.n	80064fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006524:	4b25      	ldr	r3, [pc, #148]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d20c      	bcs.n	800654c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006532:	4b22      	ldr	r3, [pc, #136]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b20      	ldr	r3, [pc, #128]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e032      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4916      	ldr	r1, [pc, #88]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	490e      	ldr	r1, [pc, #56]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800658a:	f000 f82d 	bl	80065e8 <HAL_RCC_GetSysClockFreq>
 800658e:	4602      	mov	r2, r0
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	490a      	ldr	r1, [pc, #40]	; (80065c4 <HAL_RCC_ClockConfig+0x1c0>)
 800659c:	5ccb      	ldrb	r3, [r1, r3]
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <HAL_RCC_ClockConfig+0x1c4>)
 80065a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <HAL_RCC_ClockConfig+0x1c8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fa fd84 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40023c00 	.word	0x40023c00
 80065c0:	40023800 	.word	0x40023800
 80065c4:	08013e38 	.word	0x08013e38
 80065c8:	20000118 	.word	0x20000118
 80065cc:	20000000 	.word	0x20000000

080065d0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <HAL_RCC_EnableCSS+0x14>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	4247004c 	.word	0x4247004c

080065e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065e8:	b5b0      	push	{r4, r5, r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065ee:	2100      	movs	r1, #0
 80065f0:	6079      	str	r1, [r7, #4]
 80065f2:	2100      	movs	r1, #0
 80065f4:	60f9      	str	r1, [r7, #12]
 80065f6:	2100      	movs	r1, #0
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065fa:	2100      	movs	r1, #0
 80065fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065fe:	4952      	ldr	r1, [pc, #328]	; (8006748 <HAL_RCC_GetSysClockFreq+0x160>)
 8006600:	6889      	ldr	r1, [r1, #8]
 8006602:	f001 010c 	and.w	r1, r1, #12
 8006606:	2908      	cmp	r1, #8
 8006608:	d00d      	beq.n	8006626 <HAL_RCC_GetSysClockFreq+0x3e>
 800660a:	2908      	cmp	r1, #8
 800660c:	f200 8094 	bhi.w	8006738 <HAL_RCC_GetSysClockFreq+0x150>
 8006610:	2900      	cmp	r1, #0
 8006612:	d002      	beq.n	800661a <HAL_RCC_GetSysClockFreq+0x32>
 8006614:	2904      	cmp	r1, #4
 8006616:	d003      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0x38>
 8006618:	e08e      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800661a:	4b4c      	ldr	r3, [pc, #304]	; (800674c <HAL_RCC_GetSysClockFreq+0x164>)
 800661c:	60bb      	str	r3, [r7, #8]
       break;
 800661e:	e08e      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006620:	4b4b      	ldr	r3, [pc, #300]	; (8006750 <HAL_RCC_GetSysClockFreq+0x168>)
 8006622:	60bb      	str	r3, [r7, #8]
      break;
 8006624:	e08b      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006626:	4948      	ldr	r1, [pc, #288]	; (8006748 <HAL_RCC_GetSysClockFreq+0x160>)
 8006628:	6849      	ldr	r1, [r1, #4]
 800662a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800662e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006630:	4945      	ldr	r1, [pc, #276]	; (8006748 <HAL_RCC_GetSysClockFreq+0x160>)
 8006632:	6849      	ldr	r1, [r1, #4]
 8006634:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006638:	2900      	cmp	r1, #0
 800663a:	d024      	beq.n	8006686 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800663c:	4942      	ldr	r1, [pc, #264]	; (8006748 <HAL_RCC_GetSysClockFreq+0x160>)
 800663e:	6849      	ldr	r1, [r1, #4]
 8006640:	0989      	lsrs	r1, r1, #6
 8006642:	4608      	mov	r0, r1
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	f240 14ff 	movw	r4, #511	; 0x1ff
 800664c:	f04f 0500 	mov.w	r5, #0
 8006650:	ea00 0204 	and.w	r2, r0, r4
 8006654:	ea01 0305 	and.w	r3, r1, r5
 8006658:	493d      	ldr	r1, [pc, #244]	; (8006750 <HAL_RCC_GetSysClockFreq+0x168>)
 800665a:	fb01 f003 	mul.w	r0, r1, r3
 800665e:	2100      	movs	r1, #0
 8006660:	fb01 f102 	mul.w	r1, r1, r2
 8006664:	1844      	adds	r4, r0, r1
 8006666:	493a      	ldr	r1, [pc, #232]	; (8006750 <HAL_RCC_GetSysClockFreq+0x168>)
 8006668:	fba2 0101 	umull	r0, r1, r2, r1
 800666c:	1863      	adds	r3, r4, r1
 800666e:	4619      	mov	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	461a      	mov	r2, r3
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	f7fa faee 	bl	8000c58 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e04a      	b.n	800671c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006686:	4b30      	ldr	r3, [pc, #192]	; (8006748 <HAL_RCC_GetSysClockFreq+0x160>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	099b      	lsrs	r3, r3, #6
 800668c:	461a      	mov	r2, r3
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006696:	f04f 0100 	mov.w	r1, #0
 800669a:	ea02 0400 	and.w	r4, r2, r0
 800669e:	ea03 0501 	and.w	r5, r3, r1
 80066a2:	4620      	mov	r0, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	014b      	lsls	r3, r1, #5
 80066b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066b4:	0142      	lsls	r2, r0, #5
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	1b00      	subs	r0, r0, r4
 80066bc:	eb61 0105 	sbc.w	r1, r1, r5
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	018b      	lsls	r3, r1, #6
 80066ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066ce:	0182      	lsls	r2, r0, #6
 80066d0:	1a12      	subs	r2, r2, r0
 80066d2:	eb63 0301 	sbc.w	r3, r3, r1
 80066d6:	f04f 0000 	mov.w	r0, #0
 80066da:	f04f 0100 	mov.w	r1, #0
 80066de:	00d9      	lsls	r1, r3, #3
 80066e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066e4:	00d0      	lsls	r0, r2, #3
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	1912      	adds	r2, r2, r4
 80066ec:	eb45 0303 	adc.w	r3, r5, r3
 80066f0:	f04f 0000 	mov.w	r0, #0
 80066f4:	f04f 0100 	mov.w	r1, #0
 80066f8:	0299      	lsls	r1, r3, #10
 80066fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80066fe:	0290      	lsls	r0, r2, #10
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4610      	mov	r0, r2
 8006706:	4619      	mov	r1, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	461a      	mov	r2, r3
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	f7fa faa2 	bl	8000c58 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4613      	mov	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <HAL_RCC_GetSysClockFreq+0x160>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	3301      	adds	r3, #1
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	fbb2 f3f3 	udiv	r3, r2, r3
 8006734:	60bb      	str	r3, [r7, #8]
      break;
 8006736:	e002      	b.n	800673e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006738:	4b04      	ldr	r3, [pc, #16]	; (800674c <HAL_RCC_GetSysClockFreq+0x164>)
 800673a:	60bb      	str	r3, [r7, #8]
      break;
 800673c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800673e:	68bb      	ldr	r3, [r7, #8]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bdb0      	pop	{r4, r5, r7, pc}
 8006748:	40023800 	.word	0x40023800
 800674c:	00f42400 	.word	0x00f42400
 8006750:	016e3600 	.word	0x016e3600

08006754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006758:	4b03      	ldr	r3, [pc, #12]	; (8006768 <HAL_RCC_GetHCLKFreq+0x14>)
 800675a:	681b      	ldr	r3, [r3, #0]
}
 800675c:	4618      	mov	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000118 	.word	0x20000118

0800676c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006770:	f7ff fff0 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 8006774:	4602      	mov	r2, r0
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	0a9b      	lsrs	r3, r3, #10
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	4903      	ldr	r1, [pc, #12]	; (8006790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006782:	5ccb      	ldrb	r3, [r1, r3]
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006788:	4618      	mov	r0, r3
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40023800 	.word	0x40023800
 8006790:	08013e48 	.word	0x08013e48

08006794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006798:	f7ff ffdc 	bl	8006754 <HAL_RCC_GetHCLKFreq>
 800679c:	4602      	mov	r2, r0
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	0b5b      	lsrs	r3, r3, #13
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	4903      	ldr	r1, [pc, #12]	; (80067b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067aa:	5ccb      	ldrb	r3, [r1, r3]
 80067ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40023800 	.word	0x40023800
 80067b8:	08013e48 	.word	0x08013e48

080067bc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_RCC_NMI_IRQHandler+0x20>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d104      	bne.n	80067d6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80067cc:	f000 f80a 	bl	80067e4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80067d2:	2280      	movs	r2, #128	; 0x80
 80067d4:	701a      	strb	r2, [r3, #0]
  }
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800
 80067e0:	4002380e 	.word	0x4002380e

080067e4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006818:	2b00      	cmp	r3, #0
 800681a:	d038      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800681c:	4b68      	ldr	r3, [pc, #416]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006822:	f7fa fc8d 	bl	8001140 <HAL_GetTick>
 8006826:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006828:	e008      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800682a:	f7fa fc89 	bl	8001140 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e0bc      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800683c:	4b61      	ldr	r3, [pc, #388]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f0      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	019b      	lsls	r3, r3, #6
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	071b      	lsls	r3, r3, #28
 800685a:	495a      	ldr	r1, [pc, #360]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006862:	4b57      	ldr	r3, [pc, #348]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006868:	f7fa fc6a 	bl	8001140 <HAL_GetTick>
 800686c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006870:	f7fa fc66 	bl	8001140 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e099      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006882:	4b50      	ldr	r3, [pc, #320]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8082 	beq.w	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	4b48      	ldr	r3, [pc, #288]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	4a47      	ldr	r2, [pc, #284]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068aa:	6413      	str	r3, [r2, #64]	; 0x40
 80068ac:	4b45      	ldr	r3, [pc, #276]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068b8:	4b43      	ldr	r3, [pc, #268]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a42      	ldr	r2, [pc, #264]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068c4:	f7fa fc3c 	bl	8001140 <HAL_GetTick>
 80068c8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068cc:	f7fa fc38 	bl	8001140 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e06b      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068de:	4b3a      	ldr	r3, [pc, #232]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f0      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068ea:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d02e      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	429a      	cmp	r2, r3
 8006906:	d027      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006908:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006910:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006912:	4b2e      	ldr	r3, [pc, #184]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006918:	4b2c      	ldr	r3, [pc, #176]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800691e:	4a29      	ldr	r2, [pc, #164]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006924:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d113      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006930:	f7fa fc06 	bl	8001140 <HAL_GetTick>
 8006934:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006936:	e009      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f7fa fc02 	bl	8001140 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006946:	d901      	bls.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e034      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800694c:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0ef      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006960:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006964:	d10d      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006966:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697a:	4912      	ldr	r1, [pc, #72]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697c:	4313      	orrs	r3, r2
 800697e:	608b      	str	r3, [r1, #8]
 8006980:	e005      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	4a0f      	ldr	r2, [pc, #60]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006988:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800698c:	6093      	str	r3, [r2, #8]
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699a:	490a      	ldr	r1, [pc, #40]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7d1a      	ldrb	r2, [r3, #20]
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80069b2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	42470068 	.word	0x42470068
 80069c4:	40023800 	.word	0x40023800
 80069c8:	40007000 	.word	0x40007000
 80069cc:	42470e40 	.word	0x42470e40
 80069d0:	424711e0 	.word	0x424711e0

080069d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e083      	b.n	8006aee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7f5b      	ldrb	r3, [r3, #29]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f009 fae6 	bl	800ffc8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	22ca      	movs	r2, #202	; 0xca
 8006a08:	625a      	str	r2, [r3, #36]	; 0x24
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2253      	movs	r2, #83	; 0x53
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f9fb 	bl	8006e0e <RTC_EnterInitMode>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	22ff      	movs	r2, #255	; 0xff
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e05e      	b.n	8006aee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6899      	ldr	r1, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	68d2      	ldr	r2, [r2, #12]
 8006a6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6919      	ldr	r1, [r3, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	041a      	lsls	r2, r3, #16
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10e      	bne.n	8006abc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f98d 	bl	8006dbe <HAL_RTC_WaitForSynchro>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d008      	beq.n	8006abc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	22ff      	movs	r2, #255	; 0xff
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e018      	b.n	8006aee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	22ff      	movs	r2, #255	; 0xff
 8006ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006aec:	2300      	movs	r3, #0
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006af6:	b590      	push	{r4, r7, lr}
 8006af8:	b087      	sub	sp, #28
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	7f1b      	ldrb	r3, [r3, #28]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_RTC_SetTime+0x1c>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e0aa      	b.n	8006c68 <HAL_RTC_SetTime+0x172>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d126      	bne.n	8006b72 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 f992 	bl	8006e66 <RTC_ByteToBcd2>
 8006b42:	4603      	mov	r3, r0
 8006b44:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 f98b 	bl	8006e66 <RTC_ByteToBcd2>
 8006b50:	4603      	mov	r3, r0
 8006b52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b54:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	789b      	ldrb	r3, [r3, #2]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f983 	bl	8006e66 <RTC_ByteToBcd2>
 8006b60:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	78db      	ldrb	r3, [r3, #3]
 8006b6a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e018      	b.n	8006ba4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b92:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	78db      	ldrb	r3, [r3, #3]
 8006b9e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	22ca      	movs	r2, #202	; 0xca
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2253      	movs	r2, #83	; 0x53
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f92a 	bl	8006e0e <RTC_EnterInitMode>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	22ff      	movs	r2, #255	; 0xff
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2204      	movs	r2, #4
 8006bcc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e047      	b.n	8006c68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006be2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006be6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bf6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6899      	ldr	r1, [r3, #8]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d111      	bne.n	8006c52 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f8c5 	bl	8006dbe <HAL_RTC_WaitForSynchro>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	22ff      	movs	r2, #255	; 0xff
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2204      	movs	r2, #4
 8006c46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e00a      	b.n	8006c68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	22ff      	movs	r2, #255	; 0xff
 8006c58:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006c66:	2300      	movs	r3, #0
  }
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd90      	pop	{r4, r7, pc}

08006c70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	7f1b      	ldrb	r3, [r3, #28]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_RTC_SetDate+0x1c>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e094      	b.n	8006db6 <HAL_RTC_SetDate+0x146>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2202      	movs	r2, #2
 8006c96:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10e      	bne.n	8006cbc <HAL_RTC_SetDate+0x4c>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	785b      	ldrb	r3, [r3, #1]
 8006cae:	f023 0310 	bic.w	r3, r3, #16
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	330a      	adds	r3, #10
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d11c      	bne.n	8006cfc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	78db      	ldrb	r3, [r3, #3]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f8cd 	bl	8006e66 <RTC_ByteToBcd2>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f8c6 	bl	8006e66 <RTC_ByteToBcd2>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006cde:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	789b      	ldrb	r3, [r3, #2]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 f8be 	bl	8006e66 <RTC_ByteToBcd2>
 8006cea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006cec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	e00e      	b.n	8006d1a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	78db      	ldrb	r3, [r3, #3]
 8006d00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d08:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	22ca      	movs	r2, #202	; 0xca
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2253      	movs	r2, #83	; 0x53
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f86f 	bl	8006e0e <RTC_EnterInitMode>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	22ff      	movs	r2, #255	; 0xff
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2204      	movs	r2, #4
 8006d42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e033      	b.n	8006db6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d6c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d111      	bne.n	8006da0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f81e 	bl	8006dbe <HAL_RTC_WaitForSynchro>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	22ff      	movs	r2, #255	; 0xff
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2204      	movs	r2, #4
 8006d94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e00a      	b.n	8006db6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006db4:	2300      	movs	r3, #0
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd90      	pop	{r4, r7, pc}

08006dbe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006dd8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dda:	f7fa f9b1 	bl	8001140 <HAL_GetTick>
 8006dde:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006de0:	e009      	b.n	8006df6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006de2:	f7fa f9ad 	bl	8001140 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df0:	d901      	bls.n	8006df6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e007      	b.n	8006e06 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0ee      	beq.n	8006de2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d119      	bne.n	8006e5c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e32:	f7fa f985 	bl	8001140 <HAL_GetTick>
 8006e36:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e38:	e009      	b.n	8006e4e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e3a:	f7fa f981 	bl	8001140 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e48:	d901      	bls.n	8006e4e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e007      	b.n	8006e5e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0ee      	beq.n	8006e3a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006e74:	e005      	b.n	8006e82 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	3b0a      	subs	r3, #10
 8006e80:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d8f6      	bhi.n	8006e76 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	b2db      	uxtb	r3, r3
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e022      	b.n	8006efa <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d105      	bne.n	8006ecc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f009 f8aa 	bl	8010020 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2203      	movs	r2, #3
 8006ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f815 	bl	8006f04 <HAL_SD_InitCard>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e00a      	b.n	8006efa <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f04:	b5b0      	push	{r4, r5, r7, lr}
 8006f06:	b08e      	sub	sp, #56	; 0x38
 8006f08:	af04      	add	r7, sp, #16
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006f20:	2376      	movs	r3, #118	; 0x76
 8006f22:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681d      	ldr	r5, [r3, #0]
 8006f28:	466c      	mov	r4, sp
 8006f2a:	f107 0314 	add.w	r3, r7, #20
 8006f2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f36:	f107 0308 	add.w	r3, r7, #8
 8006f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f002 fb87 	bl	8009650 <SDIO_Init>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e04c      	b.n	8006fee <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006f54:	4b28      	ldr	r3, [pc, #160]	; (8006ff8 <HAL_SD_InitCard+0xf4>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f002 fbbf 	bl	80096e2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006f64:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <HAL_SD_InitCard+0xf4>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f804 	bl	8007f78 <SD_PowerON>
 8006f70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e02e      	b.n	8006fee <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 ff25 	bl	8007de0 <SD_InitCard>
 8006f96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e01b      	b.n	8006fee <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 fc22 	bl	8009808 <SDMMC_CmdBlockLength>
 8006fc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00f      	beq.n	8006fec <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	; (8006ffc <HAL_SD_InitCard+0xf8>)
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	; 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	422580a0 	.word	0x422580a0
 8006ffc:	004005ff 	.word	0x004005ff

08007000 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	; 0x30
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d107      	bne.n	8007028 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0c0      	b.n	80071aa <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	f040 80b9 	bne.w	80071a8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800703c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	429a      	cmp	r2, r3
 8007048:	d907      	bls.n	800705a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e0a7      	b.n	80071aa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2203      	movs	r2, #3
 800705e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2200      	movs	r2, #0
 8007068:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007078:	f043 0302 	orr.w	r3, r3, #2
 800707c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	4a4c      	ldr	r2, [pc, #304]	; (80071b4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	4a4b      	ldr	r2, [pc, #300]	; (80071b8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800708c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	2200      	movs	r2, #0
 8007094:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	2200      	movs	r2, #0
 800709c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3380      	adds	r3, #128	; 0x80
 80070c4:	4619      	mov	r1, r3
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	025b      	lsls	r3, r3, #9
 80070cc:	089b      	lsrs	r3, r3, #2
 80070ce:	f7fa fecd 	bl	8001e6c <HAL_DMA_Start_IT>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a33      	ldr	r2, [pc, #204]	; (80071bc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e050      	b.n	80071aa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007108:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800710a:	2201      	movs	r2, #1
 800710c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	2b01      	cmp	r3, #1
 8007114:	d002      	beq.n	800711c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	025b      	lsls	r3, r3, #9
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800711c:	f04f 33ff 	mov.w	r3, #4294967295
 8007120:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	025b      	lsls	r3, r3, #9
 8007126:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007128:	2390      	movs	r3, #144	; 0x90
 800712a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800712c:	2302      	movs	r3, #2
 800712e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007130:	2300      	movs	r3, #0
 8007132:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007134:	2301      	movs	r3, #1
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f107 0210 	add.w	r2, r7, #16
 8007140:	4611      	mov	r1, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f002 fb34 	bl	80097b0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d90a      	bls.n	8007164 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2282      	movs	r2, #130	; 0x82
 8007152:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800715a:	4618      	mov	r0, r3
 800715c:	f002 fb98 	bl	8009890 <SDMMC_CmdReadMultiBlock>
 8007160:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007162:	e009      	b.n	8007178 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2281      	movs	r2, #129	; 0x81
 8007168:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007170:	4618      	mov	r0, r3
 8007172:	f002 fb6b 	bl	800984c <SDMMC_CmdReadSingleBlock>
 8007176:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d012      	beq.n	80071a4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	431a      	orrs	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e002      	b.n	80071aa <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e000      	b.n	80071aa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80071a8:	2302      	movs	r3, #2
  }
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3730      	adds	r7, #48	; 0x30
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	08007bef 	.word	0x08007bef
 80071b8:	08007c61 	.word	0x08007c61
 80071bc:	004005ff 	.word	0x004005ff
 80071c0:	4225858c 	.word	0x4225858c

080071c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08c      	sub	sp, #48	; 0x30
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d107      	bne.n	80071ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0c5      	b.n	8007378 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	f040 80be 	bne.w	8007376 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	441a      	add	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720a:	429a      	cmp	r2, r3
 800720c:	d907      	bls.n	800721e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e0ac      	b.n	8007378 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2203      	movs	r2, #3
 8007222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800723c:	f043 0302 	orr.w	r3, r3, #2
 8007240:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	4a4e      	ldr	r2, [pc, #312]	; (8007380 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724e:	4a4d      	ldr	r2, [pc, #308]	; (8007384 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007250:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	2200      	movs	r2, #0
 8007258:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725e:	2b01      	cmp	r3, #1
 8007260:	d002      	beq.n	8007268 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	025b      	lsls	r3, r3, #9
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d90a      	bls.n	8007284 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	22a0      	movs	r2, #160	; 0xa0
 8007272:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800727a:	4618      	mov	r0, r3
 800727c:	f002 fb4c 	bl	8009918 <SDMMC_CmdWriteMultiBlock>
 8007280:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007282:	e009      	b.n	8007298 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2290      	movs	r2, #144	; 0x90
 8007288:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007290:	4618      	mov	r0, r3
 8007292:	f002 fb1f 	bl	80098d4 <SDMMC_CmdWriteSingleBlock>
 8007296:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d012      	beq.n	80072c4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a39      	ldr	r2, [pc, #228]	; (8007388 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e059      	b.n	8007378 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80072c4:	4b31      	ldr	r3, [pc, #196]	; (800738c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ce:	2240      	movs	r2, #64	; 0x40
 80072d0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3380      	adds	r3, #128	; 0x80
 80072fa:	461a      	mov	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	025b      	lsls	r3, r3, #9
 8007300:	089b      	lsrs	r3, r3, #2
 8007302:	f7fa fdb3 	bl	8001e6c <HAL_DMA_Start_IT>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800731a:	f023 0302 	bic.w	r3, r3, #2
 800731e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a18      	ldr	r2, [pc, #96]	; (8007388 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e018      	b.n	8007378 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
 800734a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	025b      	lsls	r3, r3, #9
 8007350:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007352:	2390      	movs	r3, #144	; 0x90
 8007354:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800735a:	2300      	movs	r3, #0
 800735c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800735e:	2301      	movs	r3, #1
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f107 0210 	add.w	r2, r7, #16
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f002 fa1f 	bl	80097b0 <SDIO_ConfigData>

      return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3730      	adds	r7, #48	; 0x30
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	08007bc5 	.word	0x08007bc5
 8007384:	08007c61 	.word	0x08007c61
 8007388:	004005ff 	.word	0x004005ff
 800738c:	4225858c 	.word	0x4225858c

08007390 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d008      	beq.n	80073be <HAL_SD_IRQHandler+0x2e>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fffd 	bl	80083b6 <SD_Read_IT>
 80073bc:	e165      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 808f 	beq.w	80074ec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80073e6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80073ea:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d039      	beq.n	800747a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d104      	bne.n	800741a <HAL_SD_IRQHandler+0x8a>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d011      	beq.n	800743e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f002 fa9c 	bl	800995c <SDMMC_CmdStopTransfer>
 8007424:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d008      	beq.n	800743e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f92f 	bl	800769c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f240 523a 	movw	r2, #1338	; 0x53a
 8007446:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <HAL_SD_IRQHandler+0xda>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f007 ff1c 	bl	800f2a8 <HAL_SD_RxCpltCallback>
 8007470:	e10b      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f007 ff0e 	bl	800f294 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007478:	e107      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8102 	beq.w	800768a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f002 fa61 	bl	800995c <SDMMC_CmdStopTransfer>
 800749a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8f4 	bl	800769c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f040 80e5 	bne.w	800768a <HAL_SD_IRQHandler+0x2fa>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f040 80df 	bne.w	800768a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0208 	bic.w	r2, r2, #8
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f007 fed5 	bl	800f294 <HAL_SD_TxCpltCallback>
}
 80074ea:	e0ce      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <HAL_SD_IRQHandler+0x17c>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 ffa7 	bl	8008458 <SD_Write_IT>
 800750a:	e0be      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007512:	f240 233a 	movw	r3, #570	; 0x23a
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80b6 	beq.w	800768a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	f043 0202 	orr.w	r2, r3, #2
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	f043 0208 	orr.w	r2, r3, #8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	f043 0220 	orr.w	r2, r3, #32
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	f043 0210 	orr.w	r2, r3, #16
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	f043 0208 	orr.w	r2, r3, #8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f240 723a 	movw	r2, #1850	; 0x73a
 80075a8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80075b8:	f023 0302 	bic.w	r3, r3, #2
 80075bc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f002 f9ca 	bl	800995c <SDMMC_CmdStopTransfer>
 80075c8:	4602      	mov	r2, r0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f855 	bl	800769c <HAL_SD_ErrorCallback>
}
 80075f2:	e04a      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d045      	beq.n	800768a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <HAL_SD_IRQHandler+0x282>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d011      	beq.n	8007636 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <HAL_SD_IRQHandler+0x304>)
 8007618:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	4618      	mov	r0, r3
 8007620:	f7fa fc7c 	bl	8001f1c <HAL_DMA_Abort_IT>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d02f      	beq.n	800768a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fb68 	bl	8007d04 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007634:	e029      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <HAL_SD_IRQHandler+0x2ba>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d011      	beq.n	800766e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	4a12      	ldr	r2, [pc, #72]	; (8007698 <HAL_SD_IRQHandler+0x308>)
 8007650:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	4618      	mov	r0, r3
 8007658:	f7fa fc60 	bl	8001f1c <HAL_DMA_Abort_IT>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d013      	beq.n	800768a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fb83 	bl	8007d72 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800766c:	e00d      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f007 fdfc 	bl	800f280 <HAL_SD_AbortCallback>
}
 8007688:	e7ff      	b.n	800768a <HAL_SD_IRQHandler+0x2fa>
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	08007d05 	.word	0x08007d05
 8007698:	08007d73 	.word	0x08007d73

0800769c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076be:	0f9b      	lsrs	r3, r3, #30
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ca:	0e9b      	lsrs	r3, r3, #26
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076dc:	0e1b      	lsrs	r3, r3, #24
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ee:	0c1b      	lsrs	r3, r3, #16
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007706:	b2da      	uxtb	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007710:	0d1b      	lsrs	r3, r3, #20
 8007712:	b29a      	uxth	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	b2da      	uxtb	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772e:	0bdb      	lsrs	r3, r3, #15
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	b2da      	uxtb	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007740:	0b9b      	lsrs	r3, r3, #14
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007752:	0b5b      	lsrs	r3, r3, #13
 8007754:	b2db      	uxtb	r3, r3
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007764:	0b1b      	lsrs	r3, r3, #12
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	b2da      	uxtb	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2200      	movs	r2, #0
 8007776:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777c:	2b00      	cmp	r3, #0
 800777e:	d163      	bne.n	8007848 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007784:	009a      	lsls	r2, r3, #2
 8007786:	f640 73fc 	movw	r3, #4092	; 0xffc
 800778a:	4013      	ands	r3, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007790:	0f92      	lsrs	r2, r2, #30
 8007792:	431a      	orrs	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779c:	0edb      	lsrs	r3, r3, #27
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ae:	0e1b      	lsrs	r3, r3, #24
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c0:	0d5b      	lsrs	r3, r3, #21
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d2:	0c9b      	lsrs	r3, r3, #18
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e4:	0bdb      	lsrs	r3, r3, #15
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	7e1b      	ldrb	r3, [r3, #24]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	3302      	adds	r3, #2
 8007808:	2201      	movs	r2, #1
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007812:	fb02 f203 	mul.w	r2, r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	7a1b      	ldrb	r3, [r3, #8]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007834:	0a52      	lsrs	r2, r2, #9
 8007836:	fb02 f203 	mul.w	r2, r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007844:	661a      	str	r2, [r3, #96]	; 0x60
 8007846:	e031      	b.n	80078ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784c:	2b01      	cmp	r3, #1
 800784e:	d11d      	bne.n	800788c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785e:	0c1b      	lsrs	r3, r3, #16
 8007860:	431a      	orrs	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	3301      	adds	r3, #1
 800786c:	029a      	lsls	r2, r3, #10
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007880:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	661a      	str	r2, [r3, #96]	; 0x60
 800788a:	e00f      	b.n	80078ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a58      	ldr	r2, [pc, #352]	; (80079f4 <HAL_SD_GetCardCSD+0x344>)
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e09d      	b.n	80079e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	0b9b      	lsrs	r3, r3, #14
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c2:	09db      	lsrs	r3, r3, #7
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	0fdb      	lsrs	r3, r3, #31
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f0:	0f5b      	lsrs	r3, r3, #29
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	0e9b      	lsrs	r3, r3, #26
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	b2da      	uxtb	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007914:	0d9b      	lsrs	r3, r3, #22
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	b2da      	uxtb	r2, r3
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	0d5b      	lsrs	r3, r3, #21
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	0c1b      	lsrs	r3, r3, #16
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	b2da      	uxtb	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	0bdb      	lsrs	r3, r3, #15
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	0b9b      	lsrs	r3, r3, #14
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	0b5b      	lsrs	r3, r3, #13
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	0b1b      	lsrs	r3, r3, #12
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	0a9b      	lsrs	r3, r3, #10
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	004005ff 	.word	0x004005ff

080079f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a50:	b5b0      	push	{r4, r5, r7, lr}
 8007a52:	b08e      	sub	sp, #56	; 0x38
 8007a54:	af04      	add	r7, sp, #16
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2203      	movs	r2, #3
 8007a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d02e      	beq.n	8007ace <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d106      	bne.n	8007a86 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
 8007a84:	e029      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fb28 	bl	80080e4 <SD_WideBus_Enable>
 8007a94:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8007aa2:	e01a      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fb65 	bl	800817a <SD_WideBus_Disable>
 8007ab0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
 8007abe:	e00c      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
 8007acc:	e005      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007af8:	e01f      	b.n	8007b3a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681d      	ldr	r5, [r3, #0]
 8007b20:	466c      	mov	r4, sp
 8007b22:	f107 0314 	add.w	r3, r7, #20
 8007b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b34:	4628      	mov	r0, r5
 8007b36:	f001 fd8b 	bl	8009650 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 fe60 	bl	8009808 <SDMMC_CmdBlockLength>
 8007b48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3728      	adds	r7, #40	; 0x28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	004005ff 	.word	0x004005ff

08007b84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa7c 	bl	8008094 <SD_SendStatus>
 8007b9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	0a5b      	lsrs	r3, r3, #9
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007bba:	693b      	ldr	r3, [r7, #16]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	2b82      	cmp	r3, #130	; 0x82
 8007c02:	d111      	bne.n	8007c28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 fea7 	bl	800995c <SDMMC_CmdStopTransfer>
 8007c0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff fd3a 	bl	800769c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0208 	bic.w	r2, r2, #8
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f007 fb29 	bl	800f2a8 <HAL_SD_RxCpltCallback>
#endif
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fa fb0e 	bl	8002290 <HAL_DMA_GetError>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d03e      	beq.n	8007cf8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d002      	beq.n	8007c96 <SD_DMAError+0x36>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d12d      	bne.n	8007cf2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <SD_DMAError+0xa0>)
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007cba:	6978      	ldr	r0, [r7, #20]
 8007cbc:	f7ff ff62 	bl	8007b84 <HAL_SD_GetCardState>
 8007cc0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	d002      	beq.n	8007cce <SD_DMAError+0x6e>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d10a      	bne.n	8007ce4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 fe42 	bl	800995c <SDMMC_CmdStopTransfer>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007cf2:	6978      	ldr	r0, [r7, #20]
 8007cf4:	f7ff fcd2 	bl	800769c <HAL_SD_ErrorCallback>
#endif
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	004005ff 	.word	0x004005ff

08007d04 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff ff31 	bl	8007b84 <HAL_SD_GetCardState>
 8007d22:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b06      	cmp	r3, #6
 8007d36:	d002      	beq.n	8007d3e <SD_DMATxAbort+0x3a>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	d10a      	bne.n	8007d54 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 fe0a 	bl	800995c <SDMMC_CmdStopTransfer>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f007 fa8f 	bl	800f280 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d62:	e002      	b.n	8007d6a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fc99 	bl	800769c <HAL_SD_ErrorCallback>
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff fefa 	bl	8007b84 <HAL_SD_GetCardState>
 8007d90:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b06      	cmp	r3, #6
 8007da4:	d002      	beq.n	8007dac <SD_DMARxAbort+0x3a>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d10a      	bne.n	8007dc2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 fdd3 	bl	800995c <SDMMC_CmdStopTransfer>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d103      	bne.n	8007dd2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f007 fa58 	bl	800f280 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007dd0:	e002      	b.n	8007dd8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff fc62 	bl	800769c <HAL_SD_ErrorCallback>
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007de0:	b5b0      	push	{r4, r5, r7, lr}
 8007de2:	b094      	sub	sp, #80	; 0x50
 8007de4:	af04      	add	r7, sp, #16
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 fc85 	bl	8009700 <SDIO_GetPowerState>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007dfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e00:	e0b6      	b.n	8007f70 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d02f      	beq.n	8007e6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 feae 	bl	8009b70 <SDMMC_CmdSendCID>
 8007e14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <SD_InitCard+0x40>
    {
      return errorstate;
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	e0a7      	b.n	8007f70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 fcaf 	bl	800978a <SDIO_GetResponse>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2104      	movs	r1, #4
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 fca6 	bl	800978a <SDIO_GetResponse>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2108      	movs	r1, #8
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 fc9d 	bl	800978a <SDIO_GetResponse>
 8007e50:	4602      	mov	r2, r0
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	210c      	movs	r1, #12
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f001 fc94 	bl	800978a <SDIO_GetResponse>
 8007e62:	4602      	mov	r2, r0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d00d      	beq.n	8007e8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f107 020e 	add.w	r2, r7, #14
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 feb4 	bl	8009bea <SDMMC_CmdSetRelAdd>
 8007e82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <SD_InitCard+0xae>
    {
      return errorstate;
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	e070      	b.n	8007f70 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d036      	beq.n	8007f04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007e96:	89fb      	ldrh	r3, [r7, #14]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f001 fe7e 	bl	8009bac <SDMMC_CmdSendCSD>
 8007eb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <SD_InitCard+0xdc>
    {
      return errorstate;
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eba:	e059      	b.n	8007f70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fc61 	bl	800978a <SDIO_GetResponse>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2104      	movs	r1, #4
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fc58 	bl	800978a <SDIO_GetResponse>
 8007eda:	4602      	mov	r2, r0
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 fc4f 	bl	800978a <SDIO_GetResponse>
 8007eec:	4602      	mov	r2, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	210c      	movs	r1, #12
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 fc46 	bl	800978a <SDIO_GetResponse>
 8007efe:	4602      	mov	r2, r0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2104      	movs	r1, #4
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fc3d 	bl	800978a <SDIO_GetResponse>
 8007f10:	4603      	mov	r3, r0
 8007f12:	0d1a      	lsrs	r2, r3, #20
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f18:	f107 0310 	add.w	r3, r7, #16
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fbc6 	bl	80076b0 <HAL_SD_GetCardCSD>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f2e:	e01f      	b.n	8007f70 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	4608      	mov	r0, r1
 8007f42:	f001 fd2d 	bl	80099a0 <SDMMC_CmdSelDesel>
 8007f46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <SD_InitCard+0x172>
  {
    return errorstate;
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f50:	e00e      	b.n	8007f70 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	466c      	mov	r4, sp
 8007f5a:	f103 0210 	add.w	r2, r3, #16
 8007f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f64:	3304      	adds	r3, #4
 8007f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f001 fb71 	bl	8009650 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3740      	adds	r7, #64	; 0x40
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bdb0      	pop	{r4, r5, r7, pc}

08007f78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 fd28 	bl	80099e6 <SDMMC_CmdGoIdleState>
 8007f96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	e072      	b.n	8008088 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 fd3b 	bl	8009a22 <SDMMC_CmdOperCond>
 8007fac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fd11 	bl	80099e6 <SDMMC_CmdGoIdleState>
 8007fc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	e05b      	b.n	8008088 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d137      	bne.n	800804e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 fd3b 	bl	8009a60 <SDMMC_CmdAppCommand>
 8007fea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d02d      	beq.n	800804e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ff2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ff6:	e047      	b.n	8008088 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fd2e 	bl	8009a60 <SDMMC_CmdAppCommand>
 8008004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <SD_PowerON+0x98>
    {
      return errorstate;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e03b      	b.n	8008088 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	491e      	ldr	r1, [pc, #120]	; (8008090 <SD_PowerON+0x118>)
 8008016:	4618      	mov	r0, r3
 8008018:	f001 fd44 	bl	8009aa4 <SDMMC_CmdAppOperCommand>
 800801c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008024:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008028:	e02e      	b.n	8008088 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fbaa 	bl	800978a <SDIO_GetResponse>
 8008036:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	0fdb      	lsrs	r3, r3, #31
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <SD_PowerON+0xcc>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <SD_PowerON+0xce>
 8008044:	2300      	movs	r3, #0
 8008046:	613b      	str	r3, [r7, #16]

    count++;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3301      	adds	r3, #1
 800804c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008054:	4293      	cmp	r3, r2
 8008056:	d802      	bhi.n	800805e <SD_PowerON+0xe6>
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0cc      	beq.n	8007ff8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008064:	4293      	cmp	r3, r2
 8008066:	d902      	bls.n	800806e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800806c:	e00c      	b.n	8008088 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	645a      	str	r2, [r3, #68]	; 0x44
 800807e:	e002      	b.n	8008086 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	c1100000 	.word	0xc1100000

08008094 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80080a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080a8:	e018      	b.n	80080dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f001 fdb8 	bl	8009c2c <SDMMC_CmdSendStatus>
 80080bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	e009      	b.n	80080dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 fb5b 	bl	800978a <SDIO_GetResponse>
 80080d4:	4602      	mov	r2, r0
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	2300      	movs	r3, #0
 80080f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fb45 	bl	800978a <SDIO_GetResponse>
 8008100:	4603      	mov	r3, r0
 8008102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800810a:	d102      	bne.n	8008112 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800810c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008110:	e02f      	b.n	8008172 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008112:	f107 030c 	add.w	r3, r7, #12
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f879 	bl	8008210 <SD_FindSCR>
 800811e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	e023      	b.n	8008172 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01c      	beq.n	800816e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813c:	041b      	lsls	r3, r3, #16
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f001 fc8d 	bl	8009a60 <SDMMC_CmdAppCommand>
 8008146:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	e00f      	b.n	8008172 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2102      	movs	r1, #2
 8008158:	4618      	mov	r0, r3
 800815a:	f001 fcc6 	bl	8009aea <SDMMC_CmdBusWidth>
 800815e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	e003      	b.n	8008172 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800816a:	2300      	movs	r3, #0
 800816c:	e001      	b.n	8008172 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800816e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2100      	movs	r1, #0
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fafa 	bl	800978a <SDIO_GetResponse>
 8008196:	4603      	mov	r3, r0
 8008198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081a0:	d102      	bne.n	80081a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081a6:	e02f      	b.n	8008208 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081a8:	f107 030c 	add.w	r3, r7, #12
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f82e 	bl	8008210 <SD_FindSCR>
 80081b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	e023      	b.n	8008208 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01c      	beq.n	8008204 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f001 fc42 	bl	8009a60 <SDMMC_CmdAppCommand>
 80081dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	e00f      	b.n	8008208 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fc7b 	bl	8009aea <SDMMC_CmdBusWidth>
 80081f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	e003      	b.n	8008208 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008200:	2300      	movs	r3, #0
 8008202:	e001      	b.n	8008208 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008204:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b08f      	sub	sp, #60	; 0x3c
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800821a:	f7f8 ff91 	bl	8001140 <HAL_GetTick>
 800821e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2108      	movs	r1, #8
 8008236:	4618      	mov	r0, r3
 8008238:	f001 fae6 	bl	8009808 <SDMMC_CmdBlockLength>
 800823c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	e0b2      	b.n	80083ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	041b      	lsls	r3, r3, #16
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f001 fc03 	bl	8009a60 <SDMMC_CmdAppCommand>
 800825a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	e0a3      	b.n	80083ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008266:	f04f 33ff 	mov.w	r3, #4294967295
 800826a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800826c:	2308      	movs	r3, #8
 800826e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008270:	2330      	movs	r3, #48	; 0x30
 8008272:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008274:	2302      	movs	r3, #2
 8008276:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008278:	2300      	movs	r3, #0
 800827a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800827c:	2301      	movs	r3, #1
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f107 0210 	add.w	r2, r7, #16
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f001 fa90 	bl	80097b0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fc4a 	bl	8009b2e <SDMMC_CmdSendSCR>
 800829a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d02a      	beq.n	80082f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	e083      	b.n	80083ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00f      	beq.n	80082d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6819      	ldr	r1, [r3, #0]
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	f107 0208 	add.w	r2, r7, #8
 80082c0:	18d4      	adds	r4, r2, r3
 80082c2:	4608      	mov	r0, r1
 80082c4:	f001 f9ef 	bl	80096a6 <SDIO_ReadFIFO>
 80082c8:	4603      	mov	r3, r0
 80082ca:	6023      	str	r3, [r4, #0]
      index++;
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	3301      	adds	r3, #1
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
 80082d2:	e006      	b.n	80082e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d012      	beq.n	8008308 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082e2:	f7f8 ff2d 	bl	8001140 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d102      	bne.n	80082f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082f6:	e05a      	b.n	80083ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0cf      	beq.n	80082a6 <SD_FindSCR+0x96>
 8008306:	e000      	b.n	800830a <SD_FindSCR+0xfa>
      break;
 8008308:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2208      	movs	r2, #8
 800831e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008320:	2308      	movs	r3, #8
 8008322:	e044      	b.n	80083ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2202      	movs	r2, #2
 8008338:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800833a:	2302      	movs	r3, #2
 800833c:	e037      	b.n	80083ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2220      	movs	r2, #32
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008354:	2320      	movs	r3, #32
 8008356:	e02a      	b.n	80083ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008360:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	061a      	lsls	r2, r3, #24
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800836e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	0a1b      	lsrs	r3, r3, #8
 8008374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008378:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	0e1b      	lsrs	r3, r3, #24
 800837e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	601a      	str	r2, [r3, #0]
    scr++;
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	3304      	adds	r3, #4
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	061a      	lsls	r2, r3, #24
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008396:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	0e1b      	lsrs	r3, r3, #24
 80083a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	373c      	adds	r7, #60	; 0x3c
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd90      	pop	{r4, r7, pc}

080083b6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d03f      	beq.n	8008450 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e033      	b.n	800843e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 f963 	bl	80096a6 <SDIO_ReadFIFO>
 80083e0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	3b01      	subs	r3, #1
 800840a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	b2da      	uxtb	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	3b01      	subs	r3, #1
 8008420:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	0e1b      	lsrs	r3, r3, #24
 8008426:	b2da      	uxtb	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	3b01      	subs	r3, #1
 8008436:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	3301      	adds	r3, #1
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b07      	cmp	r3, #7
 8008442:	d9c8      	bls.n	80083d6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008450:	bf00      	nop
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d043      	beq.n	80084fa <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e037      	b.n	80084e8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3b01      	subs	r3, #1
 8008488:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	021a      	lsls	r2, r3, #8
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4313      	orrs	r3, r2
 8008494:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	3b01      	subs	r3, #1
 80084a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	041a      	lsls	r2, r3, #16
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	061a      	lsls	r2, r3, #24
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f107 0208 	add.w	r2, r7, #8
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 f8ef 	bl	80096c0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	3301      	adds	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b07      	cmp	r3, #7
 80084ec:	d9c4      	bls.n	8008478 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80084fa:	bf00      	nop
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e041      	b.n	8008598 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f007 fe89 	bl	8010240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 fb47 	bl	8008bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d001      	beq.n	80085b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e044      	b.n	8008642 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0201 	orr.w	r2, r2, #1
 80085ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1e      	ldr	r2, [pc, #120]	; (8008650 <HAL_TIM_Base_Start_IT+0xb0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d018      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x6c>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e2:	d013      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x6c>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <HAL_TIM_Base_Start_IT+0xb4>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00e      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x6c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a19      	ldr	r2, [pc, #100]	; (8008658 <HAL_TIM_Base_Start_IT+0xb8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d009      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x6c>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a17      	ldr	r2, [pc, #92]	; (800865c <HAL_TIM_Base_Start_IT+0xbc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x6c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a16      	ldr	r2, [pc, #88]	; (8008660 <HAL_TIM_Base_Start_IT+0xc0>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d111      	bne.n	8008630 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b06      	cmp	r3, #6
 800861c:	d010      	beq.n	8008640 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f042 0201 	orr.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800862e:	e007      	b.n	8008640 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0201 	orr.w	r2, r2, #1
 800863e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	40010000 	.word	0x40010000
 8008654:	40000400 	.word	0x40000400
 8008658:	40000800 	.word	0x40000800
 800865c:	40000c00 	.word	0x40000c00
 8008660:	40014000 	.word	0x40014000

08008664 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e041      	b.n	80086fa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f839 	bl	8008702 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3304      	adds	r3, #4
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f000 fa96 	bl	8008bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b02      	cmp	r3, #2
 800872a:	d122      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d11b      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f06f 0202 	mvn.w	r2, #2
 8008742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fa1c 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 800875e:	e005      	b.n	800876c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa0e 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa1f 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d122      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d11b      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f06f 0204 	mvn.w	r2, #4
 8008796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9f2 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 80087b2:	e005      	b.n	80087c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9e4 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9f5 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d122      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d11b      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f06f 0208 	mvn.w	r2, #8
 80087ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2204      	movs	r2, #4
 80087f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9c8 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 8008806:	e005      	b.n	8008814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9ba 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f9cb 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b10      	cmp	r3, #16
 8008826:	d122      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d11b      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0210 	mvn.w	r2, #16
 800883e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2208      	movs	r2, #8
 8008844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f99e 	bl	8008b96 <HAL_TIM_IC_CaptureCallback>
 800885a:	e005      	b.n	8008868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f990 	bl	8008b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f9a1 	bl	8008baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d10e      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d107      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f06f 0201 	mvn.w	r2, #1
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f96a 	bl	8008b6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b80      	cmp	r3, #128	; 0x80
 80088a6:	d10e      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d107      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fca5 	bl	8009210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	d10e      	bne.n	80088f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	d107      	bne.n	80088f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f966 	bl	8008bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d10e      	bne.n	800891e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b20      	cmp	r3, #32
 800890c:	d107      	bne.n	800891e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f06f 0220 	mvn.w	r2, #32
 8008916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fc6f 	bl	80091fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008942:	2302      	movs	r3, #2
 8008944:	e048      	b.n	80089d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b0c      	cmp	r3, #12
 8008952:	d839      	bhi.n	80089c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	08008991 	.word	0x08008991
 8008960:	080089c9 	.word	0x080089c9
 8008964:	080089c9 	.word	0x080089c9
 8008968:	080089c9 	.word	0x080089c9
 800896c:	0800899f 	.word	0x0800899f
 8008970:	080089c9 	.word	0x080089c9
 8008974:	080089c9 	.word	0x080089c9
 8008978:	080089c9 	.word	0x080089c9
 800897c:	080089ad 	.word	0x080089ad
 8008980:	080089c9 	.word	0x080089c9
 8008984:	080089c9 	.word	0x080089c9
 8008988:	080089c9 	.word	0x080089c9
 800898c:	080089bb 	.word	0x080089bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f99c 	bl	8008cd4 <TIM_OC1_SetConfig>
      break;
 800899c:	e017      	b.n	80089ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f9fb 	bl	8008da0 <TIM_OC2_SetConfig>
      break;
 80089aa:	e010      	b.n	80089ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fa60 	bl	8008e78 <TIM_OC3_SetConfig>
      break;
 80089b8:	e009      	b.n	80089ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68b9      	ldr	r1, [r7, #8]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fac3 	bl	8008f4c <TIM_OC4_SetConfig>
      break;
 80089c6:	e002      	b.n	80089ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	75fb      	strb	r3, [r7, #23]
      break;
 80089cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_TIM_ConfigClockSource+0x1c>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e0b4      	b.n	8008b66 <HAL_TIM_ConfigClockSource+0x186>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a34:	d03e      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8008a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3a:	f200 8087 	bhi.w	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a42:	f000 8086 	beq.w	8008b52 <HAL_TIM_ConfigClockSource+0x172>
 8008a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4a:	d87f      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a4c:	2b70      	cmp	r3, #112	; 0x70
 8008a4e:	d01a      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0xa6>
 8008a50:	2b70      	cmp	r3, #112	; 0x70
 8008a52:	d87b      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a54:	2b60      	cmp	r3, #96	; 0x60
 8008a56:	d050      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x11a>
 8008a58:	2b60      	cmp	r3, #96	; 0x60
 8008a5a:	d877      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a5c:	2b50      	cmp	r3, #80	; 0x50
 8008a5e:	d03c      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0xfa>
 8008a60:	2b50      	cmp	r3, #80	; 0x50
 8008a62:	d873      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a64:	2b40      	cmp	r3, #64	; 0x40
 8008a66:	d058      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x13a>
 8008a68:	2b40      	cmp	r3, #64	; 0x40
 8008a6a:	d86f      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a6c:	2b30      	cmp	r3, #48	; 0x30
 8008a6e:	d064      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x15a>
 8008a70:	2b30      	cmp	r3, #48	; 0x30
 8008a72:	d86b      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	d060      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x15a>
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d867      	bhi.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d05c      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x15a>
 8008a80:	2b10      	cmp	r3, #16
 8008a82:	d05a      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x15a>
 8008a84:	e062      	b.n	8008b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	6899      	ldr	r1, [r3, #8]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f000 fb23 	bl	80090e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	609a      	str	r2, [r3, #8]
      break;
 8008ab2:	e04f      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	6899      	ldr	r1, [r3, #8]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f000 fb0c 	bl	80090e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ad6:	609a      	str	r2, [r3, #8]
      break;
 8008ad8:	e03c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6859      	ldr	r1, [r3, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f000 fa80 	bl	8008fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2150      	movs	r1, #80	; 0x50
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fad9 	bl	80090aa <TIM_ITRx_SetConfig>
      break;
 8008af8:	e02c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6859      	ldr	r1, [r3, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f000 fa9f 	bl	800904a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2160      	movs	r1, #96	; 0x60
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fac9 	bl	80090aa <TIM_ITRx_SetConfig>
      break;
 8008b18:	e01c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6859      	ldr	r1, [r3, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f000 fa60 	bl	8008fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2140      	movs	r1, #64	; 0x40
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fab9 	bl	80090aa <TIM_ITRx_SetConfig>
      break;
 8008b38:	e00c      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f000 fab0 	bl	80090aa <TIM_ITRx_SetConfig>
      break;
 8008b4a:	e003      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b50:	e000      	b.n	8008b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a34      	ldr	r2, [pc, #208]	; (8008cb8 <TIM_Base_SetConfig+0xe4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d00f      	beq.n	8008c0c <TIM_Base_SetConfig+0x38>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf2:	d00b      	beq.n	8008c0c <TIM_Base_SetConfig+0x38>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a31      	ldr	r2, [pc, #196]	; (8008cbc <TIM_Base_SetConfig+0xe8>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d007      	beq.n	8008c0c <TIM_Base_SetConfig+0x38>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a30      	ldr	r2, [pc, #192]	; (8008cc0 <TIM_Base_SetConfig+0xec>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d003      	beq.n	8008c0c <TIM_Base_SetConfig+0x38>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a2f      	ldr	r2, [pc, #188]	; (8008cc4 <TIM_Base_SetConfig+0xf0>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d108      	bne.n	8008c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a25      	ldr	r2, [pc, #148]	; (8008cb8 <TIM_Base_SetConfig+0xe4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d01b      	beq.n	8008c5e <TIM_Base_SetConfig+0x8a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2c:	d017      	beq.n	8008c5e <TIM_Base_SetConfig+0x8a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a22      	ldr	r2, [pc, #136]	; (8008cbc <TIM_Base_SetConfig+0xe8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d013      	beq.n	8008c5e <TIM_Base_SetConfig+0x8a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a21      	ldr	r2, [pc, #132]	; (8008cc0 <TIM_Base_SetConfig+0xec>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00f      	beq.n	8008c5e <TIM_Base_SetConfig+0x8a>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a20      	ldr	r2, [pc, #128]	; (8008cc4 <TIM_Base_SetConfig+0xf0>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00b      	beq.n	8008c5e <TIM_Base_SetConfig+0x8a>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a1f      	ldr	r2, [pc, #124]	; (8008cc8 <TIM_Base_SetConfig+0xf4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d007      	beq.n	8008c5e <TIM_Base_SetConfig+0x8a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a1e      	ldr	r2, [pc, #120]	; (8008ccc <TIM_Base_SetConfig+0xf8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d003      	beq.n	8008c5e <TIM_Base_SetConfig+0x8a>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a1d      	ldr	r2, [pc, #116]	; (8008cd0 <TIM_Base_SetConfig+0xfc>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d108      	bne.n	8008c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a08      	ldr	r2, [pc, #32]	; (8008cb8 <TIM_Base_SetConfig+0xe4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d103      	bne.n	8008ca4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	615a      	str	r2, [r3, #20]
}
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40010000 	.word	0x40010000
 8008cbc:	40000400 	.word	0x40000400
 8008cc0:	40000800 	.word	0x40000800
 8008cc4:	40000c00 	.word	0x40000c00
 8008cc8:	40014000 	.word	0x40014000
 8008ccc:	40014400 	.word	0x40014400
 8008cd0:	40014800 	.word	0x40014800

08008cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f023 0201 	bic.w	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f023 0302 	bic.w	r3, r3, #2
 8008d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a1c      	ldr	r2, [pc, #112]	; (8008d9c <TIM_OC1_SetConfig+0xc8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10c      	bne.n	8008d4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	f023 0308 	bic.w	r3, r3, #8
 8008d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f023 0304 	bic.w	r3, r3, #4
 8008d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a13      	ldr	r2, [pc, #76]	; (8008d9c <TIM_OC1_SetConfig+0xc8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d111      	bne.n	8008d76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	621a      	str	r2, [r3, #32]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	40010000 	.word	0x40010000

08008da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	f023 0210 	bic.w	r2, r3, #16
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	021b      	lsls	r3, r3, #8
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f023 0320 	bic.w	r3, r3, #32
 8008dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	011b      	lsls	r3, r3, #4
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <TIM_OC2_SetConfig+0xd4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10d      	bne.n	8008e1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a15      	ldr	r2, [pc, #84]	; (8008e74 <TIM_OC2_SetConfig+0xd4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d113      	bne.n	8008e4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	621a      	str	r2, [r3, #32]
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40010000 	.word	0x40010000

08008e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a1d      	ldr	r2, [pc, #116]	; (8008f48 <TIM_OC3_SetConfig+0xd0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d10d      	bne.n	8008ef2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a14      	ldr	r2, [pc, #80]	; (8008f48 <TIM_OC3_SetConfig+0xd0>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d113      	bne.n	8008f22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	621a      	str	r2, [r3, #32]
}
 8008f3c:	bf00      	nop
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	40010000 	.word	0x40010000

08008f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	021b      	lsls	r3, r3, #8
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	031b      	lsls	r3, r3, #12
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a10      	ldr	r2, [pc, #64]	; (8008fe8 <TIM_OC4_SetConfig+0x9c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d109      	bne.n	8008fc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	019b      	lsls	r3, r3, #6
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	621a      	str	r2, [r3, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	40010000 	.word	0x40010000

08008fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	f023 0201 	bic.w	r2, r3, #1
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	4313      	orrs	r3, r2
 8009020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f023 030a 	bic.w	r3, r3, #10
 8009028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	621a      	str	r2, [r3, #32]
}
 800903e:	bf00      	nop
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800904a:	b480      	push	{r7}
 800904c:	b087      	sub	sp, #28
 800904e:	af00      	add	r7, sp, #0
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	f023 0210 	bic.w	r2, r3, #16
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	031b      	lsls	r3, r3, #12
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	621a      	str	r2, [r3, #32]
}
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b085      	sub	sp, #20
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	f043 0307 	orr.w	r3, r3, #7
 80090cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	609a      	str	r2, [r3, #8]
}
 80090d4:	bf00      	nop
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	021a      	lsls	r2, r3, #8
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	431a      	orrs	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4313      	orrs	r3, r2
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	609a      	str	r2, [r3, #8]
}
 8009114:	bf00      	nop
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009134:	2302      	movs	r3, #2
 8009136:	e050      	b.n	80091da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a1c      	ldr	r2, [pc, #112]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d018      	beq.n	80091ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009184:	d013      	beq.n	80091ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a18      	ldr	r2, [pc, #96]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d00e      	beq.n	80091ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a16      	ldr	r2, [pc, #88]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d009      	beq.n	80091ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a15      	ldr	r2, [pc, #84]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d004      	beq.n	80091ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a13      	ldr	r2, [pc, #76]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d10c      	bne.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4313      	orrs	r3, r2
 80091be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40010000 	.word	0x40010000
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40000c00 	.word	0x40000c00
 80091f8:	40014000 	.word	0x40014000

080091fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e03f      	b.n	80092b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f007 f81e 	bl	801028c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2224      	movs	r2, #36	; 0x24
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f829 	bl	80092c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800927c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	695a      	ldr	r2, [r3, #20]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800928c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800929c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	b09f      	sub	sp, #124	; 0x7c
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80092d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d6:	68d9      	ldr	r1, [r3, #12]
 80092d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	ea40 0301 	orr.w	r3, r0, r1
 80092e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e4:	689a      	ldr	r2, [r3, #8]
 80092e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	431a      	orrs	r2, r3
 80092ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	431a      	orrs	r2, r3
 80092f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80092fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009304:	f021 010c 	bic.w	r1, r1, #12
 8009308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800930e:	430b      	orrs	r3, r1
 8009310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800931c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931e:	6999      	ldr	r1, [r3, #24]
 8009320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	ea40 0301 	orr.w	r3, r0, r1
 8009328:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800932a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	4bc5      	ldr	r3, [pc, #788]	; (8009644 <UART_SetConfig+0x384>)
 8009330:	429a      	cmp	r2, r3
 8009332:	d004      	beq.n	800933e <UART_SetConfig+0x7e>
 8009334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	4bc3      	ldr	r3, [pc, #780]	; (8009648 <UART_SetConfig+0x388>)
 800933a:	429a      	cmp	r2, r3
 800933c:	d103      	bne.n	8009346 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800933e:	f7fd fa29 	bl	8006794 <HAL_RCC_GetPCLK2Freq>
 8009342:	6778      	str	r0, [r7, #116]	; 0x74
 8009344:	e002      	b.n	800934c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009346:	f7fd fa11 	bl	800676c <HAL_RCC_GetPCLK1Freq>
 800934a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800934c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009354:	f040 80b6 	bne.w	80094c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800935a:	461c      	mov	r4, r3
 800935c:	f04f 0500 	mov.w	r5, #0
 8009360:	4622      	mov	r2, r4
 8009362:	462b      	mov	r3, r5
 8009364:	1891      	adds	r1, r2, r2
 8009366:	6439      	str	r1, [r7, #64]	; 0x40
 8009368:	415b      	adcs	r3, r3
 800936a:	647b      	str	r3, [r7, #68]	; 0x44
 800936c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009370:	1912      	adds	r2, r2, r4
 8009372:	eb45 0303 	adc.w	r3, r5, r3
 8009376:	f04f 0000 	mov.w	r0, #0
 800937a:	f04f 0100 	mov.w	r1, #0
 800937e:	00d9      	lsls	r1, r3, #3
 8009380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009384:	00d0      	lsls	r0, r2, #3
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	1911      	adds	r1, r2, r4
 800938c:	6639      	str	r1, [r7, #96]	; 0x60
 800938e:	416b      	adcs	r3, r5
 8009390:	667b      	str	r3, [r7, #100]	; 0x64
 8009392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	461a      	mov	r2, r3
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	1891      	adds	r1, r2, r2
 800939e:	63b9      	str	r1, [r7, #56]	; 0x38
 80093a0:	415b      	adcs	r3, r3
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80093ac:	f7f7 fc54 	bl	8000c58 <__aeabi_uldivmod>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4ba5      	ldr	r3, [pc, #660]	; (800964c <UART_SetConfig+0x38c>)
 80093b6:	fba3 2302 	umull	r2, r3, r3, r2
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	011e      	lsls	r6, r3, #4
 80093be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093c0:	461c      	mov	r4, r3
 80093c2:	f04f 0500 	mov.w	r5, #0
 80093c6:	4622      	mov	r2, r4
 80093c8:	462b      	mov	r3, r5
 80093ca:	1891      	adds	r1, r2, r2
 80093cc:	6339      	str	r1, [r7, #48]	; 0x30
 80093ce:	415b      	adcs	r3, r3
 80093d0:	637b      	str	r3, [r7, #52]	; 0x34
 80093d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80093d6:	1912      	adds	r2, r2, r4
 80093d8:	eb45 0303 	adc.w	r3, r5, r3
 80093dc:	f04f 0000 	mov.w	r0, #0
 80093e0:	f04f 0100 	mov.w	r1, #0
 80093e4:	00d9      	lsls	r1, r3, #3
 80093e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093ea:	00d0      	lsls	r0, r2, #3
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	1911      	adds	r1, r2, r4
 80093f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80093f4:	416b      	adcs	r3, r5
 80093f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	461a      	mov	r2, r3
 80093fe:	f04f 0300 	mov.w	r3, #0
 8009402:	1891      	adds	r1, r2, r2
 8009404:	62b9      	str	r1, [r7, #40]	; 0x28
 8009406:	415b      	adcs	r3, r3
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800940a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800940e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009412:	f7f7 fc21 	bl	8000c58 <__aeabi_uldivmod>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4b8c      	ldr	r3, [pc, #560]	; (800964c <UART_SetConfig+0x38c>)
 800941c:	fba3 1302 	umull	r1, r3, r3, r2
 8009420:	095b      	lsrs	r3, r3, #5
 8009422:	2164      	movs	r1, #100	; 0x64
 8009424:	fb01 f303 	mul.w	r3, r1, r3
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	3332      	adds	r3, #50	; 0x32
 800942e:	4a87      	ldr	r2, [pc, #540]	; (800964c <UART_SetConfig+0x38c>)
 8009430:	fba2 2303 	umull	r2, r3, r2, r3
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800943c:	441e      	add	r6, r3
 800943e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009440:	4618      	mov	r0, r3
 8009442:	f04f 0100 	mov.w	r1, #0
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	1894      	adds	r4, r2, r2
 800944c:	623c      	str	r4, [r7, #32]
 800944e:	415b      	adcs	r3, r3
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
 8009452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009456:	1812      	adds	r2, r2, r0
 8009458:	eb41 0303 	adc.w	r3, r1, r3
 800945c:	f04f 0400 	mov.w	r4, #0
 8009460:	f04f 0500 	mov.w	r5, #0
 8009464:	00dd      	lsls	r5, r3, #3
 8009466:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800946a:	00d4      	lsls	r4, r2, #3
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	1814      	adds	r4, r2, r0
 8009472:	653c      	str	r4, [r7, #80]	; 0x50
 8009474:	414b      	adcs	r3, r1
 8009476:	657b      	str	r3, [r7, #84]	; 0x54
 8009478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	461a      	mov	r2, r3
 800947e:	f04f 0300 	mov.w	r3, #0
 8009482:	1891      	adds	r1, r2, r2
 8009484:	61b9      	str	r1, [r7, #24]
 8009486:	415b      	adcs	r3, r3
 8009488:	61fb      	str	r3, [r7, #28]
 800948a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800948e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009492:	f7f7 fbe1 	bl	8000c58 <__aeabi_uldivmod>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4b6c      	ldr	r3, [pc, #432]	; (800964c <UART_SetConfig+0x38c>)
 800949c:	fba3 1302 	umull	r1, r3, r3, r2
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	2164      	movs	r1, #100	; 0x64
 80094a4:	fb01 f303 	mul.w	r3, r1, r3
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	3332      	adds	r3, #50	; 0x32
 80094ae:	4a67      	ldr	r2, [pc, #412]	; (800964c <UART_SetConfig+0x38c>)
 80094b0:	fba2 2303 	umull	r2, r3, r2, r3
 80094b4:	095b      	lsrs	r3, r3, #5
 80094b6:	f003 0207 	and.w	r2, r3, #7
 80094ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4432      	add	r2, r6
 80094c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094c2:	e0b9      	b.n	8009638 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c6:	461c      	mov	r4, r3
 80094c8:	f04f 0500 	mov.w	r5, #0
 80094cc:	4622      	mov	r2, r4
 80094ce:	462b      	mov	r3, r5
 80094d0:	1891      	adds	r1, r2, r2
 80094d2:	6139      	str	r1, [r7, #16]
 80094d4:	415b      	adcs	r3, r3
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80094dc:	1912      	adds	r2, r2, r4
 80094de:	eb45 0303 	adc.w	r3, r5, r3
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f04f 0100 	mov.w	r1, #0
 80094ea:	00d9      	lsls	r1, r3, #3
 80094ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094f0:	00d0      	lsls	r0, r2, #3
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	eb12 0804 	adds.w	r8, r2, r4
 80094fa:	eb43 0905 	adc.w	r9, r3, r5
 80094fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	f04f 0100 	mov.w	r1, #0
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	008b      	lsls	r3, r1, #2
 8009512:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009516:	0082      	lsls	r2, r0, #2
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f7 fb9c 	bl	8000c58 <__aeabi_uldivmod>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4b49      	ldr	r3, [pc, #292]	; (800964c <UART_SetConfig+0x38c>)
 8009526:	fba3 2302 	umull	r2, r3, r3, r2
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	011e      	lsls	r6, r3, #4
 800952e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009530:	4618      	mov	r0, r3
 8009532:	f04f 0100 	mov.w	r1, #0
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	1894      	adds	r4, r2, r2
 800953c:	60bc      	str	r4, [r7, #8]
 800953e:	415b      	adcs	r3, r3
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009546:	1812      	adds	r2, r2, r0
 8009548:	eb41 0303 	adc.w	r3, r1, r3
 800954c:	f04f 0400 	mov.w	r4, #0
 8009550:	f04f 0500 	mov.w	r5, #0
 8009554:	00dd      	lsls	r5, r3, #3
 8009556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800955a:	00d4      	lsls	r4, r2, #3
 800955c:	4622      	mov	r2, r4
 800955e:	462b      	mov	r3, r5
 8009560:	1814      	adds	r4, r2, r0
 8009562:	64bc      	str	r4, [r7, #72]	; 0x48
 8009564:	414b      	adcs	r3, r1
 8009566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	4618      	mov	r0, r3
 800956e:	f04f 0100 	mov.w	r1, #0
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	f04f 0300 	mov.w	r3, #0
 800957a:	008b      	lsls	r3, r1, #2
 800957c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009580:	0082      	lsls	r2, r0, #2
 8009582:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009586:	f7f7 fb67 	bl	8000c58 <__aeabi_uldivmod>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4b2f      	ldr	r3, [pc, #188]	; (800964c <UART_SetConfig+0x38c>)
 8009590:	fba3 1302 	umull	r1, r3, r3, r2
 8009594:	095b      	lsrs	r3, r3, #5
 8009596:	2164      	movs	r1, #100	; 0x64
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	011b      	lsls	r3, r3, #4
 80095a0:	3332      	adds	r3, #50	; 0x32
 80095a2:	4a2a      	ldr	r2, [pc, #168]	; (800964c <UART_SetConfig+0x38c>)
 80095a4:	fba2 2303 	umull	r2, r3, r2, r3
 80095a8:	095b      	lsrs	r3, r3, #5
 80095aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ae:	441e      	add	r6, r3
 80095b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095b2:	4618      	mov	r0, r3
 80095b4:	f04f 0100 	mov.w	r1, #0
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	1894      	adds	r4, r2, r2
 80095be:	603c      	str	r4, [r7, #0]
 80095c0:	415b      	adcs	r3, r3
 80095c2:	607b      	str	r3, [r7, #4]
 80095c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c8:	1812      	adds	r2, r2, r0
 80095ca:	eb41 0303 	adc.w	r3, r1, r3
 80095ce:	f04f 0400 	mov.w	r4, #0
 80095d2:	f04f 0500 	mov.w	r5, #0
 80095d6:	00dd      	lsls	r5, r3, #3
 80095d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095dc:	00d4      	lsls	r4, r2, #3
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	eb12 0a00 	adds.w	sl, r2, r0
 80095e6:	eb43 0b01 	adc.w	fp, r3, r1
 80095ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f04f 0100 	mov.w	r1, #0
 80095f4:	f04f 0200 	mov.w	r2, #0
 80095f8:	f04f 0300 	mov.w	r3, #0
 80095fc:	008b      	lsls	r3, r1, #2
 80095fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009602:	0082      	lsls	r2, r0, #2
 8009604:	4650      	mov	r0, sl
 8009606:	4659      	mov	r1, fp
 8009608:	f7f7 fb26 	bl	8000c58 <__aeabi_uldivmod>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4b0e      	ldr	r3, [pc, #56]	; (800964c <UART_SetConfig+0x38c>)
 8009612:	fba3 1302 	umull	r1, r3, r3, r2
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	2164      	movs	r1, #100	; 0x64
 800961a:	fb01 f303 	mul.w	r3, r1, r3
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	3332      	adds	r3, #50	; 0x32
 8009624:	4a09      	ldr	r2, [pc, #36]	; (800964c <UART_SetConfig+0x38c>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	095b      	lsrs	r3, r3, #5
 800962c:	f003 020f 	and.w	r2, r3, #15
 8009630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4432      	add	r2, r6
 8009636:	609a      	str	r2, [r3, #8]
}
 8009638:	bf00      	nop
 800963a:	377c      	adds	r7, #124	; 0x7c
 800963c:	46bd      	mov	sp, r7
 800963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009642:	bf00      	nop
 8009644:	40011000 	.word	0x40011000
 8009648:	40011400 	.word	0x40011400
 800964c:	51eb851f 	.word	0x51eb851f

08009650 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009650:	b084      	sub	sp, #16
 8009652:	b480      	push	{r7}
 8009654:	b085      	sub	sp, #20
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	f107 001c 	add.w	r0, r7, #28
 800965e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009666:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009668:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800966a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800966e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009672:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009676:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800967a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800968a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	431a      	orrs	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	b004      	add	sp, #16
 80096a4:	4770      	bx	lr

080096a6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2203      	movs	r2, #3
 80096ee:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80096f0:	2002      	movs	r0, #2
 80096f2:	f7f7 fd31 	bl	8001158 <HAL_Delay>
  
  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0303 	and.w	r3, r3, #3
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800973a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009740:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009746:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009756:	f023 030f 	bic.w	r3, r3, #15
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	431a      	orrs	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	b2db      	uxtb	r3, r3
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800978a:	b480      	push	{r7}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3314      	adds	r3, #20
 8009798:	461a      	mov	r2, r3
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	4413      	add	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
}  
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80097dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80097e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ee:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	431a      	orrs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0

}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009816:	2310      	movs	r3, #16
 8009818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009828:	f107 0308 	add.w	r3, r7, #8
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff ff74 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009834:	f241 3288 	movw	r2, #5000	; 0x1388
 8009838:	2110      	movs	r1, #16
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa44 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009842:	69fb      	ldr	r3, [r7, #28]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800985a:	2311      	movs	r3, #17
 800985c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800985e:	2340      	movs	r3, #64	; 0x40
 8009860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009862:	2300      	movs	r3, #0
 8009864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800986a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800986c:	f107 0308 	add.w	r3, r7, #8
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff ff52 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009878:	f241 3288 	movw	r2, #5000	; 0x1388
 800987c:	2111      	movs	r1, #17
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa22 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009886:	69fb      	ldr	r3, [r7, #28]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800989e:	2312      	movs	r3, #18
 80098a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098a2:	2340      	movs	r3, #64	; 0x40
 80098a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098a6:	2300      	movs	r3, #0
 80098a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff ff30 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c0:	2112      	movs	r1, #18
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fa00 	bl	8009cc8 <SDMMC_GetCmdResp1>
 80098c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ca:	69fb      	ldr	r3, [r7, #28]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3720      	adds	r7, #32
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80098e2:	2318      	movs	r3, #24
 80098e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098e6:	2340      	movs	r3, #64	; 0x40
 80098e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098f4:	f107 0308 	add.w	r3, r7, #8
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff ff0e 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009900:	f241 3288 	movw	r2, #5000	; 0x1388
 8009904:	2118      	movs	r1, #24
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f9de 	bl	8009cc8 <SDMMC_GetCmdResp1>
 800990c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800990e:	69fb      	ldr	r3, [r7, #28]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3720      	adds	r7, #32
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009926:	2319      	movs	r3, #25
 8009928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800992a:	2340      	movs	r3, #64	; 0x40
 800992c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009936:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009938:	f107 0308 	add.w	r3, r7, #8
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff feec 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009944:	f241 3288 	movw	r2, #5000	; 0x1388
 8009948:	2119      	movs	r1, #25
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f9bc 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009952:	69fb      	ldr	r3, [r7, #28]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b088      	sub	sp, #32
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009968:	230c      	movs	r3, #12
 800996a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800996c:	2340      	movs	r3, #64	; 0x40
 800996e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009978:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800997a:	f107 0308 	add.w	r3, r7, #8
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff fecb 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009986:	4a05      	ldr	r2, [pc, #20]	; (800999c <SDMMC_CmdStopTransfer+0x40>)
 8009988:	210c      	movs	r1, #12
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f99c 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009992:	69fb      	ldr	r3, [r7, #28]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	05f5e100 	.word	0x05f5e100

080099a0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	; 0x28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80099b0:	2307      	movs	r3, #7
 80099b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099b8:	2300      	movs	r3, #0
 80099ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099c2:	f107 0310 	add.w	r3, r7, #16
 80099c6:	4619      	mov	r1, r3
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f7ff fea7 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80099ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d2:	2107      	movs	r1, #7
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f977 	bl	8009cc8 <SDMMC_GetCmdResp1>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3728      	adds	r7, #40	; 0x28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b088      	sub	sp, #32
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80099f6:	2300      	movs	r3, #0
 80099f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a04:	f107 0308 	add.w	r3, r7, #8
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff fe86 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f92d 	bl	8009c70 <SDMMC_GetCmdError>
 8009a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a18:	69fb      	ldr	r3, [r7, #28]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3720      	adds	r7, #32
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b088      	sub	sp, #32
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a2a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a30:	2308      	movs	r3, #8
 8009a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a34:	2340      	movs	r3, #64	; 0x40
 8009a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff fe67 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fb24 	bl	800a09c <SDMMC_GetCmdResp7>
 8009a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a56:	69fb      	ldr	r3, [r7, #28]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a6e:	2337      	movs	r3, #55	; 0x37
 8009a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a72:	2340      	movs	r3, #64	; 0x40
 8009a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a76:	2300      	movs	r3, #0
 8009a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fe48 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a90:	2137      	movs	r1, #55	; 0x37
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f918 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009aba:	2329      	movs	r3, #41	; 0x29
 8009abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009abe:	2340      	movs	r3, #64	; 0x40
 8009ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009acc:	f107 0308 	add.w	r3, r7, #8
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff fe22 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa2b 	bl	8009f34 <SDMMC_GetCmdResp3>
 8009ade:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ae0:	69fb      	ldr	r3, [r7, #28]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3720      	adds	r7, #32
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b088      	sub	sp, #32
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009af8:	2306      	movs	r3, #6
 8009afa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b00:	2300      	movs	r3, #0
 8009b02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b0a:	f107 0308 	add.w	r3, r7, #8
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff fe03 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b1a:	2106      	movs	r1, #6
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f8d3 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b24:	69fb      	ldr	r3, [r7, #28]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3720      	adds	r7, #32
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b088      	sub	sp, #32
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b3a:	2333      	movs	r3, #51	; 0x33
 8009b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b3e:	2340      	movs	r3, #64	; 0x40
 8009b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fde2 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b5c:	2133      	movs	r1, #51	; 0x33
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f8b2 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b66:	69fb      	ldr	r3, [r7, #28]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3720      	adds	r7, #32
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b80:	23c0      	movs	r3, #192	; 0xc0
 8009b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b8e:	f107 0308 	add.w	r3, r7, #8
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff fdc1 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f982 	bl	8009ea4 <SDMMC_GetCmdResp2>
 8009ba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ba2:	69fb      	ldr	r3, [r7, #28]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bba:	2309      	movs	r3, #9
 8009bbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009bbe:	23c0      	movs	r3, #192	; 0xc0
 8009bc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff fda2 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f963 	bl	8009ea4 <SDMMC_GetCmdResp2>
 8009bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009be0:	69fb      	ldr	r3, [r7, #28]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3720      	adds	r7, #32
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b088      	sub	sp, #32
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bfc:	2340      	movs	r3, #64	; 0x40
 8009bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fd83 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	2103      	movs	r1, #3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f9c8 	bl	8009fb0 <SDMMC_GetCmdResp6>
 8009c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c22:	69fb      	ldr	r3, [r7, #28]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3720      	adds	r7, #32
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c3a:	230d      	movs	r3, #13
 8009c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c3e:	2340      	movs	r3, #64	; 0x40
 8009c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c42:	2300      	movs	r3, #0
 8009c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c4c:	f107 0308 	add.w	r3, r7, #8
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff fd62 	bl	800971c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c5c:	210d      	movs	r1, #13
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f832 	bl	8009cc8 <SDMMC_GetCmdResp1>
 8009c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c66:	69fb      	ldr	r3, [r7, #28]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3720      	adds	r7, #32
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c78:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <SDMMC_GetCmdError+0x50>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <SDMMC_GetCmdError+0x54>)
 8009c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c82:	0a5b      	lsrs	r3, r3, #9
 8009c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c88:	fb02 f303 	mul.w	r3, r2, r3
 8009c8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1e5a      	subs	r2, r3, #1
 8009c92:	60fa      	str	r2, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c9c:	e009      	b.n	8009cb2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0f1      	beq.n	8009c8e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	22c5      	movs	r2, #197	; 0xc5
 8009cae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	20000118 	.word	0x20000118
 8009cc4:	10624dd3 	.word	0x10624dd3

08009cc8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009cd6:	4b70      	ldr	r3, [pc, #448]	; (8009e98 <SDMMC_GetCmdResp1+0x1d0>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a70      	ldr	r2, [pc, #448]	; (8009e9c <SDMMC_GetCmdResp1+0x1d4>)
 8009cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce0:	0a5a      	lsrs	r2, r3, #9
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	fb02 f303 	mul.w	r3, r2, r3
 8009ce8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	1e5a      	subs	r2, r3, #1
 8009cee:	61fa      	str	r2, [r7, #28]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cf8:	e0c9      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0ef      	beq.n	8009cea <SDMMC_GetCmdResp1+0x22>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1ea      	bne.n	8009cea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d18:	f003 0304 	and.w	r3, r3, #4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d004      	beq.n	8009d2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2204      	movs	r2, #4
 8009d24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d26:	2304      	movs	r3, #4
 8009d28:	e0b1      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d004      	beq.n	8009d40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e0a6      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	22c5      	movs	r2, #197	; 0xc5
 8009d44:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f7ff fd12 	bl	8009770 <SDIO_GetCommandResponse>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	461a      	mov	r2, r3
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d001      	beq.n	8009d5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e099      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fd14 	bl	800978a <SDIO_GetResponse>
 8009d62:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	4b4e      	ldr	r3, [pc, #312]	; (8009ea0 <SDMMC_GetCmdResp1+0x1d8>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e08d      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da02      	bge.n	8009d7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d7c:	e087      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	e080      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d96:	2380      	movs	r3, #128	; 0x80
 8009d98:	e079      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009da8:	e071      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009db8:	e069      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc8:	e061      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dd8:	e059      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de8:	e051      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009df8:	e049      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009e04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e08:	e041      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e18:	e039      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e28:	e031      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009e34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e38:	e029      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e48:	e021      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e58:	e019      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e68:	e011      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e78:	e009      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f003 0308 	and.w	r3, r3, #8
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e88:	e001      	b.n	8009e8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20000118 	.word	0x20000118
 8009e9c:	10624dd3 	.word	0x10624dd3
 8009ea0:	fdffe008 	.word	0xfdffe008

08009ea4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009eac:	4b1f      	ldr	r3, [pc, #124]	; (8009f2c <SDMMC_GetCmdResp2+0x88>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <SDMMC_GetCmdResp2+0x8c>)
 8009eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb6:	0a5b      	lsrs	r3, r3, #9
 8009eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ebc:	fb02 f303 	mul.w	r3, r2, r3
 8009ec0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1e5a      	subs	r2, r3, #1
 8009ec6:	60fa      	str	r2, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ed0:	e026      	b.n	8009f20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0ef      	beq.n	8009ec2 <SDMMC_GetCmdResp2+0x1e>
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1ea      	bne.n	8009ec2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d004      	beq.n	8009f02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2204      	movs	r2, #4
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009efe:	2304      	movs	r3, #4
 8009f00:	e00e      	b.n	8009f20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e003      	b.n	8009f20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	22c5      	movs	r2, #197	; 0xc5
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20000118 	.word	0x20000118
 8009f30:	10624dd3 	.word	0x10624dd3

08009f34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f3c:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <SDMMC_GetCmdResp3+0x74>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a1a      	ldr	r2, [pc, #104]	; (8009fac <SDMMC_GetCmdResp3+0x78>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	0a5b      	lsrs	r3, r3, #9
 8009f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4c:	fb02 f303 	mul.w	r3, r2, r3
 8009f50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	1e5a      	subs	r2, r3, #1
 8009f56:	60fa      	str	r2, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f60:	e01b      	b.n	8009f9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0ef      	beq.n	8009f52 <SDMMC_GetCmdResp3+0x1e>
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1ea      	bne.n	8009f52 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2204      	movs	r2, #4
 8009f8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f8e:	2304      	movs	r3, #4
 8009f90:	e003      	b.n	8009f9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	22c5      	movs	r2, #197	; 0xc5
 8009f96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20000118 	.word	0x20000118
 8009fac:	10624dd3 	.word	0x10624dd3

08009fb0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fbe:	4b35      	ldr	r3, [pc, #212]	; (800a094 <SDMMC_GetCmdResp6+0xe4>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a35      	ldr	r2, [pc, #212]	; (800a098 <SDMMC_GetCmdResp6+0xe8>)
 8009fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc8:	0a5b      	lsrs	r3, r3, #9
 8009fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fce:	fb02 f303 	mul.w	r3, r2, r3
 8009fd2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	1e5a      	subs	r2, r3, #1
 8009fd8:	61fa      	str	r2, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d102      	bne.n	8009fe4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fe2:	e052      	b.n	800a08a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0ef      	beq.n	8009fd4 <SDMMC_GetCmdResp6+0x24>
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1ea      	bne.n	8009fd4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2204      	movs	r2, #4
 800a00e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a010:	2304      	movs	r3, #4
 800a012:	e03a      	b.n	800a08a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a026:	2301      	movs	r3, #1
 800a028:	e02f      	b.n	800a08a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff fba0 	bl	8009770 <SDIO_GetCommandResponse>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	7afb      	ldrb	r3, [r7, #11]
 800a036:	4293      	cmp	r3, r2
 800a038:	d001      	beq.n	800a03e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e025      	b.n	800a08a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	22c5      	movs	r2, #197	; 0xc5
 800a042:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a044:	2100      	movs	r1, #0
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff fb9f 	bl	800978a <SDIO_GetResponse>
 800a04c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d106      	bne.n	800a066 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	0c1b      	lsrs	r3, r3, #16
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a062:	2300      	movs	r3, #0
 800a064:	e011      	b.n	800a08a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a074:	e009      	b.n	800a08a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a084:	e001      	b.n	800a08a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20000118 	.word	0x20000118
 800a098:	10624dd3 	.word	0x10624dd3

0800a09c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0a4:	4b22      	ldr	r3, [pc, #136]	; (800a130 <SDMMC_GetCmdResp7+0x94>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a22      	ldr	r2, [pc, #136]	; (800a134 <SDMMC_GetCmdResp7+0x98>)
 800a0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ae:	0a5b      	lsrs	r3, r3, #9
 800a0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b4:	fb02 f303 	mul.w	r3, r2, r3
 800a0b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	1e5a      	subs	r2, r3, #1
 800a0be:	60fa      	str	r2, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0c8:	e02c      	b.n	800a124 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0ef      	beq.n	800a0ba <SDMMC_GetCmdResp7+0x1e>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1ea      	bne.n	800a0ba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2204      	movs	r2, #4
 800a0f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0f6:	2304      	movs	r3, #4
 800a0f8:	e014      	b.n	800a124 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d004      	beq.n	800a110 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e009      	b.n	800a124 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2240      	movs	r2, #64	; 0x40
 800a120:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a122:	2300      	movs	r3, #0
  
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	20000118 	.word	0x20000118
 800a134:	10624dd3 	.word	0x10624dd3

0800a138 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a138:	b084      	sub	sp, #16
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	f107 001c 	add.w	r0, r7, #28
 800a146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d122      	bne.n	800a196 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a154:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d105      	bne.n	800a18a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fb1c 	bl	800b7c8 <USB_CoreReset>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	e01a      	b.n	800a1cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 fb10 	bl	800b7c8 <USB_CoreReset>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	639a      	str	r2, [r3, #56]	; 0x38
 800a1be:	e005      	b.n	800a1cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d10b      	bne.n	800a1ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f043 0206 	orr.w	r2, r3, #6
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f043 0220 	orr.w	r2, r3, #32
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1f6:	b004      	add	sp, #16
 800a1f8:	4770      	bx	lr
	...

0800a1fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d165      	bne.n	800a2dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	4a41      	ldr	r2, [pc, #260]	; (800a318 <USB_SetTurnaroundTime+0x11c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d906      	bls.n	800a226 <USB_SetTurnaroundTime+0x2a>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4a40      	ldr	r2, [pc, #256]	; (800a31c <USB_SetTurnaroundTime+0x120>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d202      	bcs.n	800a226 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a220:	230f      	movs	r3, #15
 800a222:	617b      	str	r3, [r7, #20]
 800a224:	e062      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4a3c      	ldr	r2, [pc, #240]	; (800a31c <USB_SetTurnaroundTime+0x120>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d306      	bcc.n	800a23c <USB_SetTurnaroundTime+0x40>
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	4a3b      	ldr	r2, [pc, #236]	; (800a320 <USB_SetTurnaroundTime+0x124>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d202      	bcs.n	800a23c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a236:	230e      	movs	r3, #14
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	e057      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4a38      	ldr	r2, [pc, #224]	; (800a320 <USB_SetTurnaroundTime+0x124>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d306      	bcc.n	800a252 <USB_SetTurnaroundTime+0x56>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4a37      	ldr	r2, [pc, #220]	; (800a324 <USB_SetTurnaroundTime+0x128>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d202      	bcs.n	800a252 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a24c:	230d      	movs	r3, #13
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e04c      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4a33      	ldr	r2, [pc, #204]	; (800a324 <USB_SetTurnaroundTime+0x128>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d306      	bcc.n	800a268 <USB_SetTurnaroundTime+0x6c>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4a32      	ldr	r2, [pc, #200]	; (800a328 <USB_SetTurnaroundTime+0x12c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d802      	bhi.n	800a268 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a262:	230c      	movs	r3, #12
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	e041      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4a2f      	ldr	r2, [pc, #188]	; (800a328 <USB_SetTurnaroundTime+0x12c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d906      	bls.n	800a27e <USB_SetTurnaroundTime+0x82>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4a2e      	ldr	r2, [pc, #184]	; (800a32c <USB_SetTurnaroundTime+0x130>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d802      	bhi.n	800a27e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a278:	230b      	movs	r3, #11
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e036      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4a2a      	ldr	r2, [pc, #168]	; (800a32c <USB_SetTurnaroundTime+0x130>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d906      	bls.n	800a294 <USB_SetTurnaroundTime+0x98>
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	4a29      	ldr	r2, [pc, #164]	; (800a330 <USB_SetTurnaroundTime+0x134>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d802      	bhi.n	800a294 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a28e:	230a      	movs	r3, #10
 800a290:	617b      	str	r3, [r7, #20]
 800a292:	e02b      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	4a26      	ldr	r2, [pc, #152]	; (800a330 <USB_SetTurnaroundTime+0x134>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d906      	bls.n	800a2aa <USB_SetTurnaroundTime+0xae>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	4a25      	ldr	r2, [pc, #148]	; (800a334 <USB_SetTurnaroundTime+0x138>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d202      	bcs.n	800a2aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a2a4:	2309      	movs	r3, #9
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	e020      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	4a21      	ldr	r2, [pc, #132]	; (800a334 <USB_SetTurnaroundTime+0x138>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d306      	bcc.n	800a2c0 <USB_SetTurnaroundTime+0xc4>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	4a20      	ldr	r2, [pc, #128]	; (800a338 <USB_SetTurnaroundTime+0x13c>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d802      	bhi.n	800a2c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	617b      	str	r3, [r7, #20]
 800a2be:	e015      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4a1d      	ldr	r2, [pc, #116]	; (800a338 <USB_SetTurnaroundTime+0x13c>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d906      	bls.n	800a2d6 <USB_SetTurnaroundTime+0xda>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4a1c      	ldr	r2, [pc, #112]	; (800a33c <USB_SetTurnaroundTime+0x140>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d202      	bcs.n	800a2d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a2d0:	2307      	movs	r3, #7
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	e00a      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a2d6:	2306      	movs	r3, #6
 800a2d8:	617b      	str	r3, [r7, #20]
 800a2da:	e007      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a2e2:	2309      	movs	r3, #9
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e001      	b.n	800a2ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a2e8:	2309      	movs	r3, #9
 800a2ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	68da      	ldr	r2, [r3, #12]
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	029b      	lsls	r3, r3, #10
 800a300:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a304:	431a      	orrs	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	00d8acbf 	.word	0x00d8acbf
 800a31c:	00e4e1c0 	.word	0x00e4e1c0
 800a320:	00f42400 	.word	0x00f42400
 800a324:	01067380 	.word	0x01067380
 800a328:	011a499f 	.word	0x011a499f
 800a32c:	01312cff 	.word	0x01312cff
 800a330:	014ca43f 	.word	0x014ca43f
 800a334:	016e3600 	.word	0x016e3600
 800a338:	01a6ab1f 	.word	0x01a6ab1f
 800a33c:	01e84800 	.word	0x01e84800

0800a340 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f043 0201 	orr.w	r2, r3, #1
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	f023 0201 	bic.w	r2, r3, #1
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d115      	bne.n	800a3d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	f7f6 fed0 	bl	8001158 <HAL_Delay>
      ms++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 f972 	bl	800b6a8 <USB_GetMode>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d01e      	beq.n	800a408 <USB_SetCurrentMode+0x84>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b31      	cmp	r3, #49	; 0x31
 800a3ce:	d9f0      	bls.n	800a3b2 <USB_SetCurrentMode+0x2e>
 800a3d0:	e01a      	b.n	800a408 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3d2:	78fb      	ldrb	r3, [r7, #3]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d115      	bne.n	800a404 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	f7f6 feb7 	bl	8001158 <HAL_Delay>
      ms++;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 f959 	bl	800b6a8 <USB_GetMode>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d005      	beq.n	800a408 <USB_SetCurrentMode+0x84>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b31      	cmp	r3, #49	; 0x31
 800a400:	d9f0      	bls.n	800a3e4 <USB_SetCurrentMode+0x60>
 800a402:	e001      	b.n	800a408 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e005      	b.n	800a414 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b32      	cmp	r3, #50	; 0x32
 800a40c:	d101      	bne.n	800a412 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a41c:	b084      	sub	sp, #16
 800a41e:	b580      	push	{r7, lr}
 800a420:	b086      	sub	sp, #24
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a42a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	e009      	b.n	800a450 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3340      	adds	r3, #64	; 0x40
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	2200      	movs	r2, #0
 800a448:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3301      	adds	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b0e      	cmp	r3, #14
 800a454:	d9f2      	bls.n	800a43c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d11c      	bne.n	800a496 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a46a:	f043 0302 	orr.w	r3, r3, #2
 800a46e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	639a      	str	r2, [r3, #56]	; 0x38
 800a494:	e00b      	b.n	800a4ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	680b      	ldr	r3, [r1, #0]
 800a4cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d10c      	bne.n	800a4ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a4da:	2100      	movs	r1, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f945 	bl	800a76c <USB_SetDevSpeed>
 800a4e2:	e008      	b.n	800a4f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f940 	bl	800a76c <USB_SetDevSpeed>
 800a4ec:	e003      	b.n	800a4f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a4ee:	2103      	movs	r1, #3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f93b 	bl	800a76c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a4f6:	2110      	movs	r1, #16
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f8f3 	bl	800a6e4 <USB_FlushTxFifo>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f90f 	bl	800a72c <USB_FlushRxFifo>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51e:	461a      	mov	r2, r3
 800a520:	2300      	movs	r3, #0
 800a522:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52a:	461a      	mov	r2, r3
 800a52c:	2300      	movs	r3, #0
 800a52e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a536:	461a      	mov	r2, r3
 800a538:	2300      	movs	r3, #0
 800a53a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a53c:	2300      	movs	r3, #0
 800a53e:	613b      	str	r3, [r7, #16]
 800a540:	e043      	b.n	800a5ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a558:	d118      	bne.n	800a58c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56c:	461a      	mov	r2, r3
 800a56e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	e013      	b.n	800a59e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a582:	461a      	mov	r2, r3
 800a584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	e008      	b.n	800a59e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a598:	461a      	mov	r2, r3
 800a59a:	2300      	movs	r3, #0
 800a59c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5bc:	461a      	mov	r2, r3
 800a5be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	613b      	str	r3, [r7, #16]
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d3b7      	bcc.n	800a542 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	613b      	str	r3, [r7, #16]
 800a5d6:	e043      	b.n	800a660 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5ee:	d118      	bne.n	800a622 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a602:	461a      	mov	r2, r3
 800a604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	e013      	b.n	800a634 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a618:	461a      	mov	r2, r3
 800a61a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e008      	b.n	800a634 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62e:	461a      	mov	r2, r3
 800a630:	2300      	movs	r3, #0
 800a632:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a640:	461a      	mov	r2, r3
 800a642:	2300      	movs	r3, #0
 800a644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a652:	461a      	mov	r2, r3
 800a654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a658:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	3301      	adds	r3, #1
 800a65e:	613b      	str	r3, [r7, #16]
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	429a      	cmp	r2, r3
 800a666:	d3b7      	bcc.n	800a5d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a67a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a688:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d105      	bne.n	800a69c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f043 0210 	orr.w	r2, r3, #16
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699a      	ldr	r2, [r3, #24]
 800a6a0:	4b0f      	ldr	r3, [pc, #60]	; (800a6e0 <USB_DevInit+0x2c4>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d005      	beq.n	800a6ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	f043 0208 	orr.w	r2, r3, #8
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d107      	bne.n	800a6d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6c8:	f043 0304 	orr.w	r3, r3, #4
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6dc:	b004      	add	sp, #16
 800a6de:	4770      	bx	lr
 800a6e0:	803c3800 	.word	0x803c3800

0800a6e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	019b      	lsls	r3, r3, #6
 800a6f6:	f043 0220 	orr.w	r2, r3, #32
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3301      	adds	r3, #1
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <USB_FlushTxFifo+0x44>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d901      	bls.n	800a70e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e006      	b.n	800a71c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 0320 	and.w	r3, r3, #32
 800a716:	2b20      	cmp	r3, #32
 800a718:	d0f1      	beq.n	800a6fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	00030d40 	.word	0x00030d40

0800a72c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2210      	movs	r2, #16
 800a73c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3301      	adds	r3, #1
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	4a08      	ldr	r2, [pc, #32]	; (800a768 <USB_FlushRxFifo+0x3c>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d901      	bls.n	800a74e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e006      	b.n	800a75c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	f003 0310 	and.w	r3, r3, #16
 800a756:	2b10      	cmp	r3, #16
 800a758:	d0f1      	beq.n	800a73e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	00030d40 	.word	0x00030d40

0800a76c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	78fb      	ldrb	r3, [r7, #3]
 800a786:	68f9      	ldr	r1, [r7, #12]
 800a788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a78c:	4313      	orrs	r3, r2
 800a78e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b087      	sub	sp, #28
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f003 0306 	and.w	r3, r3, #6
 800a7b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d102      	bne.n	800a7c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]
 800a7c2:	e00a      	b.n	800a7da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d002      	beq.n	800a7d0 <USB_GetDevSpeed+0x32>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b06      	cmp	r3, #6
 800a7ce:	d102      	bne.n	800a7d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	75fb      	strb	r3, [r7, #23]
 800a7d4:	e001      	b.n	800a7da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a7d6:	230f      	movs	r3, #15
 800a7d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	371c      	adds	r7, #28
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	785b      	ldrb	r3, [r3, #1]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d13a      	bne.n	800a87a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80a:	69da      	ldr	r2, [r3, #28]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	f003 030f 	and.w	r3, r3, #15
 800a814:	2101      	movs	r1, #1
 800a816:	fa01 f303 	lsl.w	r3, r1, r3
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	68f9      	ldr	r1, [r7, #12]
 800a81e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a822:	4313      	orrs	r3, r2
 800a824:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d155      	bne.n	800a8e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	78db      	ldrb	r3, [r3, #3]
 800a856:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a858:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	059b      	lsls	r3, r3, #22
 800a85e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a860:	4313      	orrs	r3, r2
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	0151      	lsls	r1, r2, #5
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	440a      	add	r2, r1
 800a86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a86e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	e036      	b.n	800a8e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a880:	69da      	ldr	r2, [r3, #28]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	f003 030f 	and.w	r3, r3, #15
 800a88a:	2101      	movs	r1, #1
 800a88c:	fa01 f303 	lsl.w	r3, r1, r3
 800a890:	041b      	lsls	r3, r3, #16
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a898:	4313      	orrs	r3, r2
 800a89a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d11a      	bne.n	800a8e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	78db      	ldrb	r3, [r3, #3]
 800a8cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	0151      	lsls	r1, r2, #5
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	440a      	add	r2, r1
 800a8da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d161      	bne.n	800a9d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a92a:	d11f      	bne.n	800a96c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	0151      	lsls	r1, r2, #5
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	440a      	add	r2, r1
 800a942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a94a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	0151      	lsls	r1, r2, #5
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	440a      	add	r2, r1
 800a962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a96a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f003 030f 	and.w	r3, r3, #15
 800a97c:	2101      	movs	r1, #1
 800a97e:	fa01 f303 	lsl.w	r3, r1, r3
 800a982:	b29b      	uxth	r3, r3
 800a984:	43db      	mvns	r3, r3
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a98c:	4013      	ands	r3, r2
 800a98e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	f003 030f 	and.w	r3, r3, #15
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	43db      	mvns	r3, r3
 800a9aa:	68f9      	ldr	r1, [r7, #12]
 800a9ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	0159      	lsls	r1, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	440b      	add	r3, r1
 800a9ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4b35      	ldr	r3, [pc, #212]	; (800aaa8 <USB_DeactivateEndpoint+0x1b0>)
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	600b      	str	r3, [r1, #0]
 800a9d6:	e060      	b.n	800aa9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ee:	d11f      	bne.n	800aa30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	0151      	lsls	r1, r2, #5
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	440a      	add	r2, r1
 800aa06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	0151      	lsls	r1, r2, #5
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	440a      	add	r2, r1
 800aa26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f003 030f 	and.w	r3, r3, #15
 800aa40:	2101      	movs	r1, #1
 800aa42:	fa01 f303 	lsl.w	r3, r1, r3
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	68f9      	ldr	r1, [r7, #12]
 800aa4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa50:	4013      	ands	r3, r2
 800aa52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa5a:	69da      	ldr	r2, [r3, #28]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	f003 030f 	and.w	r3, r3, #15
 800aa64:	2101      	movs	r1, #1
 800aa66:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6a:	041b      	lsls	r3, r3, #16
 800aa6c:	43db      	mvns	r3, r3
 800aa6e:	68f9      	ldr	r1, [r7, #12]
 800aa70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa74:	4013      	ands	r3, r2
 800aa76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	0159      	lsls	r1, r3, #5
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	440b      	add	r3, r1
 800aa8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa92:	4619      	mov	r1, r3
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <USB_DeactivateEndpoint+0x1b4>)
 800aa96:	4013      	ands	r3, r2
 800aa98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	ec337800 	.word	0xec337800
 800aaac:	eff37800 	.word	0xeff37800

0800aab0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	; 0x28
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	4613      	mov	r3, r2
 800aabc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	785b      	ldrb	r3, [r3, #1]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	f040 815c 	bne.w	800ad8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d132      	bne.n	800ab40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	0151      	lsls	r1, r2, #5
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	440a      	add	r2, r1
 800aaf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aaf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aafc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	0151      	lsls	r1, r2, #5
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	440a      	add	r2, r1
 800ab14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	015a      	lsls	r2, r3, #5
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	4413      	add	r3, r2
 800ab26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	0151      	lsls	r1, r2, #5
 800ab30:	69fa      	ldr	r2, [r7, #28]
 800ab32:	440a      	add	r2, r1
 800ab34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab38:	0cdb      	lsrs	r3, r3, #19
 800ab3a:	04db      	lsls	r3, r3, #19
 800ab3c:	6113      	str	r3, [r2, #16]
 800ab3e:	e074      	b.n	800ac2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	69ba      	ldr	r2, [r7, #24]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab5a:	0cdb      	lsrs	r3, r3, #19
 800ab5c:	04db      	lsls	r3, r3, #19
 800ab5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	015a      	lsls	r2, r3, #5
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	4413      	add	r3, r2
 800ab68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	0151      	lsls	r1, r2, #5
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	440a      	add	r2, r1
 800ab76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	6959      	ldr	r1, [r3, #20]
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	440b      	add	r3, r1
 800ab9c:	1e59      	subs	r1, r3, #1
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	fbb1 f3f3 	udiv	r3, r1, r3
 800aba6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aba8:	4b9d      	ldr	r3, [pc, #628]	; (800ae20 <USB_EPStartXfer+0x370>)
 800abaa:	400b      	ands	r3, r1
 800abac:	69b9      	ldr	r1, [r7, #24]
 800abae:	0148      	lsls	r0, r1, #5
 800abb0:	69f9      	ldr	r1, [r7, #28]
 800abb2:	4401      	add	r1, r0
 800abb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abb8:	4313      	orrs	r3, r2
 800abba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abd2:	69b9      	ldr	r1, [r7, #24]
 800abd4:	0148      	lsls	r0, r1, #5
 800abd6:	69f9      	ldr	r1, [r7, #28]
 800abd8:	4401      	add	r1, r0
 800abda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abde:	4313      	orrs	r3, r2
 800abe0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	78db      	ldrb	r3, [r3, #3]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d11f      	bne.n	800ac2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	0151      	lsls	r1, r2, #5
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	440a      	add	r2, r1
 800ac00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ac08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	015a      	lsls	r2, r3, #5
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	0151      	lsls	r1, r2, #5
 800ac1c:	69fa      	ldr	r2, [r7, #28]
 800ac1e:	440a      	add	r2, r1
 800ac20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d14b      	bne.n	800acc8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d009      	beq.n	800ac4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac44:	461a      	mov	r2, r3
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	78db      	ldrb	r3, [r3, #3]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d128      	bne.n	800aca6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d110      	bne.n	800ac86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	015a      	lsls	r2, r3, #5
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	0151      	lsls	r1, r2, #5
 800ac76:	69fa      	ldr	r2, [r7, #28]
 800ac78:	440a      	add	r2, r1
 800ac7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	e00f      	b.n	800aca6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	0151      	lsls	r1, r2, #5
 800ac98:	69fa      	ldr	r2, [r7, #28]
 800ac9a:	440a      	add	r2, r1
 800ac9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	0151      	lsls	r1, r2, #5
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	440a      	add	r2, r1
 800acbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	e12f      	b.n	800af28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	015a      	lsls	r2, r3, #5
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	0151      	lsls	r1, r2, #5
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	440a      	add	r2, r1
 800acde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ace6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	78db      	ldrb	r3, [r3, #3]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d015      	beq.n	800ad1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8117 	beq.w	800af28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad10:	69f9      	ldr	r1, [r7, #28]
 800ad12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad16:	4313      	orrs	r3, r2
 800ad18:	634b      	str	r3, [r1, #52]	; 0x34
 800ad1a:	e105      	b.n	800af28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d110      	bne.n	800ad4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	0151      	lsls	r1, r2, #5
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	440a      	add	r2, r1
 800ad42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	e00f      	b.n	800ad6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	69ba      	ldr	r2, [r7, #24]
 800ad5e:	0151      	lsls	r1, r2, #5
 800ad60:	69fa      	ldr	r2, [r7, #28]
 800ad62:	440a      	add	r2, r1
 800ad64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	68d9      	ldr	r1, [r3, #12]
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	781a      	ldrb	r2, [r3, #0]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	b298      	uxth	r0, r3
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	4603      	mov	r3, r0
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 fa2b 	bl	800b1de <USB_WritePacket>
 800ad88:	e0ce      	b.n	800af28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	4413      	add	r3, r2
 800ad92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	69ba      	ldr	r2, [r7, #24]
 800ad9a:	0151      	lsls	r1, r2, #5
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	440a      	add	r2, r1
 800ada0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada4:	0cdb      	lsrs	r3, r3, #19
 800ada6:	04db      	lsls	r3, r3, #19
 800ada8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	0151      	lsls	r1, r2, #5
 800adbc:	69fa      	ldr	r2, [r7, #28]
 800adbe:	440a      	add	r2, r1
 800adc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800adc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800adcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d126      	bne.n	800ae24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adec:	69b9      	ldr	r1, [r7, #24]
 800adee:	0148      	lsls	r0, r1, #5
 800adf0:	69f9      	ldr	r1, [r7, #28]
 800adf2:	4401      	add	r1, r0
 800adf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800adf8:	4313      	orrs	r3, r2
 800adfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	0151      	lsls	r1, r2, #5
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	440a      	add	r2, r1
 800ae12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae1a:	6113      	str	r3, [r2, #16]
 800ae1c:	e036      	b.n	800ae8c <USB_EPStartXfer+0x3dc>
 800ae1e:	bf00      	nop
 800ae20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	695a      	ldr	r2, [r3, #20]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	1e5a      	subs	r2, r3, #1
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae46:	691a      	ldr	r2, [r3, #16]
 800ae48:	8afb      	ldrh	r3, [r7, #22]
 800ae4a:	04d9      	lsls	r1, r3, #19
 800ae4c:	4b39      	ldr	r3, [pc, #228]	; (800af34 <USB_EPStartXfer+0x484>)
 800ae4e:	400b      	ands	r3, r1
 800ae50:	69b9      	ldr	r1, [r7, #24]
 800ae52:	0148      	lsls	r0, r1, #5
 800ae54:	69f9      	ldr	r1, [r7, #28]
 800ae56:	4401      	add	r1, r0
 800ae58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae6c:	691a      	ldr	r2, [r3, #16]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	8af9      	ldrh	r1, [r7, #22]
 800ae74:	fb01 f303 	mul.w	r3, r1, r3
 800ae78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae7c:	69b9      	ldr	r1, [r7, #24]
 800ae7e:	0148      	lsls	r0, r1, #5
 800ae80:	69f9      	ldr	r1, [r7, #28]
 800ae82:	4401      	add	r1, r0
 800ae84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d10d      	bne.n	800aeae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	68d9      	ldr	r1, [r3, #12]
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeaa:	460a      	mov	r2, r1
 800aeac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	78db      	ldrb	r3, [r3, #3]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d128      	bne.n	800af08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d110      	bne.n	800aee8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	0151      	lsls	r1, r2, #5
 800aed8:	69fa      	ldr	r2, [r7, #28]
 800aeda:	440a      	add	r2, r1
 800aedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aee4:	6013      	str	r3, [r2, #0]
 800aee6:	e00f      	b.n	800af08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	69ba      	ldr	r2, [r7, #24]
 800af18:	0151      	lsls	r1, r2, #5
 800af1a:	69fa      	ldr	r2, [r7, #28]
 800af1c:	440a      	add	r2, r1
 800af1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3720      	adds	r7, #32
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	1ff80000 	.word	0x1ff80000

0800af38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	4613      	mov	r3, r2
 800af44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	2b01      	cmp	r3, #1
 800af56:	f040 80cd 	bne.w	800b0f4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d132      	bne.n	800afc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	015a      	lsls	r2, r3, #5
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	4413      	add	r3, r2
 800af6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	0151      	lsls	r1, r2, #5
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	440a      	add	r2, r1
 800af78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	0151      	lsls	r1, r2, #5
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	440a      	add	r2, r1
 800af9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	015a      	lsls	r2, r3, #5
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	0151      	lsls	r1, r2, #5
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	440a      	add	r2, r1
 800afbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc0:	0cdb      	lsrs	r3, r3, #19
 800afc2:	04db      	lsls	r3, r3, #19
 800afc4:	6113      	str	r3, [r2, #16]
 800afc6:	e04e      	b.n	800b066 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	015a      	lsls	r2, r3, #5
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	4413      	add	r3, r2
 800afd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	0151      	lsls	r1, r2, #5
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	440a      	add	r2, r1
 800afde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe2:	0cdb      	lsrs	r3, r3, #19
 800afe4:	04db      	lsls	r3, r3, #19
 800afe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	0151      	lsls	r1, r2, #5
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	440a      	add	r2, r1
 800affe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b00a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	695a      	ldr	r2, [r3, #20]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	429a      	cmp	r2, r3
 800b016:	d903      	bls.n	800b020 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	0151      	lsls	r1, r2, #5
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	440a      	add	r2, r1
 800b036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b03a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b03e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b056:	6939      	ldr	r1, [r7, #16]
 800b058:	0148      	lsls	r0, r1, #5
 800b05a:	6979      	ldr	r1, [r7, #20]
 800b05c:	4401      	add	r1, r0
 800b05e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b062:	4313      	orrs	r3, r2
 800b064:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d11e      	bne.n	800b0aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	015a      	lsls	r2, r3, #5
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	4413      	add	r3, r2
 800b07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b080:	461a      	mov	r2, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0a6:	6013      	str	r3, [r2, #0]
 800b0a8:	e092      	b.n	800b1d0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	697a      	ldr	r2, [r7, #20]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d07e      	beq.n	800b1d0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	f003 030f 	and.w	r3, r3, #15
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0e8:	6979      	ldr	r1, [r7, #20]
 800b0ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	634b      	str	r3, [r1, #52]	; 0x34
 800b0f2:	e06d      	b.n	800b1d0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b10e:	0cdb      	lsrs	r3, r3, #19
 800b110:	04db      	lsls	r3, r3, #19
 800b112:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	0151      	lsls	r1, r2, #5
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	440a      	add	r2, r1
 800b12a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b12e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b132:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b136:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	689a      	ldr	r2, [r3, #8]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	0151      	lsls	r1, r2, #5
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	440a      	add	r2, r1
 800b15e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b166:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b174:	691a      	ldr	r2, [r3, #16]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b17e:	6939      	ldr	r1, [r7, #16]
 800b180:	0148      	lsls	r0, r1, #5
 800b182:	6979      	ldr	r1, [r7, #20]
 800b184:	4401      	add	r1, r0
 800b186:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b18a:	4313      	orrs	r3, r2
 800b18c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d10d      	bne.n	800b1b0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d009      	beq.n	800b1b0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	68d9      	ldr	r1, [r3, #12]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ac:	460a      	mov	r2, r1
 800b1ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	015a      	lsls	r2, r3, #5
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	0151      	lsls	r1, r2, #5
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	440a      	add	r2, r1
 800b1c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	371c      	adds	r7, #28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b089      	sub	sp, #36	; 0x24
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	71fb      	strb	r3, [r7, #7]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b1fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b200:	2b00      	cmp	r3, #0
 800b202:	d123      	bne.n	800b24c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b204:	88bb      	ldrh	r3, [r7, #4]
 800b206:	3303      	adds	r3, #3
 800b208:	089b      	lsrs	r3, r3, #2
 800b20a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b20c:	2300      	movs	r3, #0
 800b20e:	61bb      	str	r3, [r7, #24]
 800b210:	e018      	b.n	800b244 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	031a      	lsls	r2, r3, #12
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b21e:	461a      	mov	r2, r3
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	3301      	adds	r3, #1
 800b22a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	3301      	adds	r3, #1
 800b230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	3301      	adds	r3, #1
 800b236:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	3301      	adds	r3, #1
 800b23c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	3301      	adds	r3, #1
 800b242:	61bb      	str	r3, [r7, #24]
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d3e2      	bcc.n	800b212 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3724      	adds	r7, #36	; 0x24
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr

0800b25a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b25a:	b480      	push	{r7}
 800b25c:	b08b      	sub	sp, #44	; 0x2c
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	4613      	mov	r3, r2
 800b266:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	089b      	lsrs	r3, r3, #2
 800b274:	b29b      	uxth	r3, r3
 800b276:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b278:	88fb      	ldrh	r3, [r7, #6]
 800b27a:	f003 0303 	and.w	r3, r3, #3
 800b27e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b280:	2300      	movs	r3, #0
 800b282:	623b      	str	r3, [r7, #32]
 800b284:	e014      	b.n	800b2b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	601a      	str	r2, [r3, #0]
    pDest++;
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	3301      	adds	r3, #1
 800b296:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	3301      	adds	r3, #1
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	623b      	str	r3, [r7, #32]
 800b2b0:	6a3a      	ldr	r2, [r7, #32]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d3e6      	bcc.n	800b286 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b2b8:	8bfb      	ldrh	r3, [r7, #30]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d01e      	beq.n	800b2fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	f107 0310 	add.w	r3, r7, #16
 800b2ce:	6812      	ldr	r2, [r2, #0]
 800b2d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b2d2:	693a      	ldr	r2, [r7, #16]
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	701a      	strb	r2, [r3, #0]
      i++;
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	623b      	str	r3, [r7, #32]
      pDest++;
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b2f0:	8bfb      	ldrh	r3, [r7, #30]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b2f6:	8bfb      	ldrh	r3, [r7, #30]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1ea      	bne.n	800b2d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	372c      	adds	r7, #44	; 0x2c
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b085      	sub	sp, #20
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	785b      	ldrb	r3, [r3, #1]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d12c      	bne.n	800b380 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	db12      	blt.n	800b35e <USB_EPSetStall+0x54>
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00f      	beq.n	800b35e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	0151      	lsls	r1, r2, #5
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	440a      	add	r2, r1
 800b354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b358:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b35c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	0151      	lsls	r1, r2, #5
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	440a      	add	r2, r1
 800b374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	e02b      	b.n	800b3d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	db12      	blt.n	800b3b8 <USB_EPSetStall+0xae>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00f      	beq.n	800b3b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	0151      	lsls	r1, r2, #5
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	440a      	add	r2, r1
 800b3ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	785b      	ldrb	r3, [r3, #1]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d128      	bne.n	800b454 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	0151      	lsls	r1, r2, #5
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	440a      	add	r2, r1
 800b418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b41c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b420:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	78db      	ldrb	r3, [r3, #3]
 800b426:	2b03      	cmp	r3, #3
 800b428:	d003      	beq.n	800b432 <USB_EPClearStall+0x4c>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	78db      	ldrb	r3, [r3, #3]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d138      	bne.n	800b4a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	0151      	lsls	r1, r2, #5
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	440a      	add	r2, r1
 800b448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	e027      	b.n	800b4a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	0151      	lsls	r1, r2, #5
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	440a      	add	r2, r1
 800b46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b46e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b472:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	78db      	ldrb	r3, [r3, #3]
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d003      	beq.n	800b484 <USB_EPClearStall+0x9e>
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	78db      	ldrb	r3, [r3, #3]
 800b480:	2b02      	cmp	r3, #2
 800b482:	d10f      	bne.n	800b4a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	0151      	lsls	r1, r2, #5
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	440a      	add	r2, r1
 800b49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b49e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b085      	sub	sp, #20
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b4d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	78fb      	ldrb	r3, [r7, #3]
 800b4e0:	011b      	lsls	r3, r3, #4
 800b4e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b4e6:	68f9      	ldr	r1, [r7, #12]
 800b4e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b518:	f023 0303 	bic.w	r3, r3, #3
 800b51c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b52c:	f023 0302 	bic.w	r3, r3, #2
 800b530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b55a:	f023 0303 	bic.w	r3, r3, #3
 800b55e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b56e:	f043 0302 	orr.w	r3, r3, #2
 800b572:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b582:	b480      	push	{r7}
 800b584:	b085      	sub	sp, #20
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4013      	ands	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b59a:	68fb      	ldr	r3, [r7, #12]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	0c1b      	lsrs	r3, r3, #16
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	b29b      	uxth	r3, r3
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	4013      	ands	r3, r2
 800b63c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b63e:	68bb      	ldr	r3, [r7, #8]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	460b      	mov	r3, r1
 800b656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b670:	78fb      	ldrb	r3, [r7, #3]
 800b672:	f003 030f 	and.w	r3, r3, #15
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	fa22 f303 	lsr.w	r3, r2, r3
 800b67c:	01db      	lsls	r3, r3, #7
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	4313      	orrs	r3, r2
 800b684:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b686:	78fb      	ldrb	r3, [r7, #3]
 800b688:	015a      	lsls	r2, r3, #5
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	4413      	add	r3, r2
 800b68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	4013      	ands	r3, r2
 800b698:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b69a:	68bb      	ldr	r3, [r7, #8]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	371c      	adds	r7, #28
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b6e2:	f023 0307 	bic.w	r3, r3, #7
 800b6e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
	...

0800b70c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	460b      	mov	r3, r1
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	333c      	adds	r3, #60	; 0x3c
 800b722:	3304      	adds	r3, #4
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	4a26      	ldr	r2, [pc, #152]	; (800b7c4 <USB_EP0_OutStart+0xb8>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d90a      	bls.n	800b746 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b73c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b740:	d101      	bne.n	800b746 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	e037      	b.n	800b7b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	461a      	mov	r2, r3
 800b74e:	2300      	movs	r3, #0
 800b750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b774:	f043 0318 	orr.w	r3, r3, #24
 800b778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b788:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b78c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b78e:	7afb      	ldrb	r3, [r7, #11]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d10f      	bne.n	800b7b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79a:	461a      	mov	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b7b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	371c      	adds	r7, #28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	4f54300a 	.word	0x4f54300a

0800b7c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	60fb      	str	r3, [r7, #12]
 800b7da:	4a13      	ldr	r2, [pc, #76]	; (800b828 <USB_CoreReset+0x60>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d901      	bls.n	800b7e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e01a      	b.n	800b81a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	daf3      	bge.n	800b7d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	f043 0201 	orr.w	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	4a09      	ldr	r2, [pc, #36]	; (800b828 <USB_CoreReset+0x60>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d901      	bls.n	800b80c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e006      	b.n	800b81a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b01      	cmp	r3, #1
 800b816:	d0f1      	beq.n	800b7fc <USB_CoreReset+0x34>

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	00030d40 	.word	0x00030d40

0800b82c <SensorArray_Init>:
		eSensor_MCP9808,
		eSensor_MCP9808
};

void SensorArray_Init()
{
 800b82c:	b590      	push	{r4, r7, lr}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
	I2C_HandleTypeDef *hI2CA = HandlesAssigner_GetHandle(eHandle_I2C1);
 800b832:	2001      	movs	r0, #1
 800b834:	f003 f84e 	bl	800e8d4 <HandlesAssigner_GetHandle>
 800b838:	60b8      	str	r0, [r7, #8]
	I2C_HandleTypeDef *hI2CB = HandlesAssigner_GetHandle(eHandle_I2C2);
 800b83a:	2002      	movs	r0, #2
 800b83c:	f003 f84a 	bl	800e8d4 <HandlesAssigner_GetHandle>
 800b840:	6078      	str	r0, [r7, #4]

	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++)
 800b842:	2300      	movs	r3, #0
 800b844:	73fb      	strb	r3, [r7, #15]
 800b846:	e083      	b.n	800b950 <SensorArray_Init+0x124>
	{
		kaSensorArrayDataA[u8Idx].eSensorType = eSensorTypeListArrayA[u8Idx];
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	7bfa      	ldrb	r2, [r7, #15]
 800b84c:	498a      	ldr	r1, [pc, #552]	; (800ba78 <SensorArray_Init+0x24c>)
 800b84e:	5cc8      	ldrb	r0, [r1, r3]
 800b850:	498a      	ldr	r1, [pc, #552]	; (800ba7c <SensorArray_Init+0x250>)
 800b852:	4613      	mov	r3, r2
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	4413      	add	r3, r2
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	440b      	add	r3, r1
 800b85c:	330b      	adds	r3, #11
 800b85e:	4602      	mov	r2, r0
 800b860:	701a      	strb	r2, [r3, #0]

		if(eSensorTypeListArrayA[u8Idx] == eSensor_MCP9803)
 800b862:	7bfb      	ldrb	r3, [r7, #15]
 800b864:	4a84      	ldr	r2, [pc, #528]	; (800ba78 <SensorArray_Init+0x24c>)
 800b866:	5cd3      	ldrb	r3, [r2, r3]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d130      	bne.n	800b8ce <SensorArray_Init+0xa2>
		{

			kaSensorArrayDataA[u8Idx].u8Address = MCP9803_CalculateAddress(u8DeviceAddressListA[u8Idx]);
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	4a84      	ldr	r2, [pc, #528]	; (800ba80 <SensorArray_Init+0x254>)
 800b870:	5cd3      	ldrb	r3, [r2, r3]
 800b872:	7bfc      	ldrb	r4, [r7, #15]
 800b874:	4618      	mov	r0, r3
 800b876:	f000 f955 	bl	800bb24 <MCP9803_CalculateAddress>
 800b87a:	4603      	mov	r3, r0
 800b87c:	4619      	mov	r1, r3
 800b87e:	4a7f      	ldr	r2, [pc, #508]	; (800ba7c <SensorArray_Init+0x250>)
 800b880:	4623      	mov	r3, r4
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	4423      	add	r3, r4
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	4413      	add	r3, r2
 800b88a:	3301      	adds	r3, #1
 800b88c:	460a      	mov	r2, r1
 800b88e:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnDecodeTemperature = &MCP9803_DecodeTemperature;
 800b890:	7bfa      	ldrb	r2, [r7, #15]
 800b892:	497a      	ldr	r1, [pc, #488]	; (800ba7c <SensorArray_Init+0x250>)
 800b894:	4613      	mov	r3, r2
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	4413      	add	r3, r2
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	440b      	add	r3, r1
 800b89e:	330c      	adds	r3, #12
 800b8a0:	4a78      	ldr	r2, [pc, #480]	; (800ba84 <SensorArray_Init+0x258>)
 800b8a2:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnReadTemperature = &MCP9803_Read;
 800b8a4:	7bfa      	ldrb	r2, [r7, #15]
 800b8a6:	4975      	ldr	r1, [pc, #468]	; (800ba7c <SensorArray_Init+0x250>)
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	4413      	add	r3, r2
 800b8ae:	00db      	lsls	r3, r3, #3
 800b8b0:	440b      	add	r3, r1
 800b8b2:	3310      	adds	r3, #16
 800b8b4:	4a74      	ldr	r2, [pc, #464]	; (800ba88 <SensorArray_Init+0x25c>)
 800b8b6:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnSendConfig = &MCP9803_ConfigureResolution;
 800b8b8:	7bfa      	ldrb	r2, [r7, #15]
 800b8ba:	4970      	ldr	r1, [pc, #448]	; (800ba7c <SensorArray_Init+0x250>)
 800b8bc:	4613      	mov	r3, r2
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	4413      	add	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	440b      	add	r3, r1
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	4a70      	ldr	r2, [pc, #448]	; (800ba8c <SensorArray_Init+0x260>)
 800b8ca:	601a      	str	r2, [r3, #0]
 800b8cc:	e02a      	b.n	800b924 <SensorArray_Init+0xf8>
		}
		else if (eSensorTypeListArrayA[u8Idx] == eSensor_MCP9808)
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	4a69      	ldr	r2, [pc, #420]	; (800ba78 <SensorArray_Init+0x24c>)
 800b8d2:	5cd3      	ldrb	r3, [r2, r3]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d125      	bne.n	800b924 <SensorArray_Init+0xf8>
		{
			kaSensorArrayDataA[u8Idx].u8Address = MCP9808_CalculateAddress(u8DeviceAddressListA[u8Idx]);
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	4a69      	ldr	r2, [pc, #420]	; (800ba80 <SensorArray_Init+0x254>)
 800b8dc:	5cd3      	ldrb	r3, [r2, r3]
 800b8de:	7bfc      	ldrb	r4, [r7, #15]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 f9c5 	bl	800bc70 <MCP9808_CalculateAddress>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4a64      	ldr	r2, [pc, #400]	; (800ba7c <SensorArray_Init+0x250>)
 800b8ec:	4623      	mov	r3, r4
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	4423      	add	r3, r4
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	4413      	add	r3, r2
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	460a      	mov	r2, r1
 800b8fa:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnDecodeTemperature = &MCP9808_DecodeTemperature;
 800b8fc:	7bfa      	ldrb	r2, [r7, #15]
 800b8fe:	495f      	ldr	r1, [pc, #380]	; (800ba7c <SensorArray_Init+0x250>)
 800b900:	4613      	mov	r3, r2
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	4413      	add	r3, r2
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	440b      	add	r3, r1
 800b90a:	330c      	adds	r3, #12
 800b90c:	4a60      	ldr	r2, [pc, #384]	; (800ba90 <SensorArray_Init+0x264>)
 800b90e:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnReadTemperature = &MCP9808_Read;
 800b910:	7bfa      	ldrb	r2, [r7, #15]
 800b912:	495a      	ldr	r1, [pc, #360]	; (800ba7c <SensorArray_Init+0x250>)
 800b914:	4613      	mov	r3, r2
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	4413      	add	r3, r2
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	440b      	add	r3, r1
 800b91e:	3310      	adds	r3, #16
 800b920:	4a5c      	ldr	r2, [pc, #368]	; (800ba94 <SensorArray_Init+0x268>)
 800b922:	601a      	str	r2, [r3, #0]
			//todo: manage the fact that there is no config for MCP9808
		}
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 800b924:	7bfa      	ldrb	r2, [r7, #15]
 800b926:	4955      	ldr	r1, [pc, #340]	; (800ba7c <SensorArray_Init+0x250>)
 800b928:	4613      	mov	r3, r2
 800b92a:	005b      	lsls	r3, r3, #1
 800b92c:	4413      	add	r3, r2
 800b92e:	00db      	lsls	r3, r3, #3
 800b930:	440b      	add	r3, r1
 800b932:	3304      	adds	r3, #4
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 800b938:	7bfa      	ldrb	r2, [r7, #15]
 800b93a:	4950      	ldr	r1, [pc, #320]	; (800ba7c <SensorArray_Init+0x250>)
 800b93c:	4613      	mov	r3, r2
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	4413      	add	r3, r2
 800b942:	00db      	lsls	r3, r3, #3
 800b944:	440b      	add	r3, r1
 800b946:	2201      	movs	r2, #1
 800b948:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++)
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	3301      	adds	r3, #1
 800b94e:	73fb      	strb	r3, [r7, #15]
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	2b07      	cmp	r3, #7
 800b954:	f67f af78 	bls.w	800b848 <SensorArray_Init+0x1c>
	}
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++)
 800b958:	2300      	movs	r3, #0
 800b95a:	73bb      	strb	r3, [r7, #14]
 800b95c:	e083      	b.n	800ba66 <SensorArray_Init+0x23a>
	{
		kaSensorArrayDataB[u8Idx].eSensorType = eSensorTypeListArrayB[u8Idx];
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
 800b960:	7bba      	ldrb	r2, [r7, #14]
 800b962:	494d      	ldr	r1, [pc, #308]	; (800ba98 <SensorArray_Init+0x26c>)
 800b964:	5cc8      	ldrb	r0, [r1, r3]
 800b966:	494d      	ldr	r1, [pc, #308]	; (800ba9c <SensorArray_Init+0x270>)
 800b968:	4613      	mov	r3, r2
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	4413      	add	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	440b      	add	r3, r1
 800b972:	330b      	adds	r3, #11
 800b974:	4602      	mov	r2, r0
 800b976:	701a      	strb	r2, [r3, #0]

		if(eSensorTypeListArrayB[u8Idx] == eSensor_MCP9803)
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	4a47      	ldr	r2, [pc, #284]	; (800ba98 <SensorArray_Init+0x26c>)
 800b97c:	5cd3      	ldrb	r3, [r2, r3]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d130      	bne.n	800b9e4 <SensorArray_Init+0x1b8>
		{
			kaSensorArrayDataB[u8Idx].u8Address = MCP9803_CalculateAddress(u8DeviceAddressListB[u8Idx]);
 800b982:	7bbb      	ldrb	r3, [r7, #14]
 800b984:	4a46      	ldr	r2, [pc, #280]	; (800baa0 <SensorArray_Init+0x274>)
 800b986:	5cd3      	ldrb	r3, [r2, r3]
 800b988:	7bbc      	ldrb	r4, [r7, #14]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 f8ca 	bl	800bb24 <MCP9803_CalculateAddress>
 800b990:	4603      	mov	r3, r0
 800b992:	4619      	mov	r1, r3
 800b994:	4a41      	ldr	r2, [pc, #260]	; (800ba9c <SensorArray_Init+0x270>)
 800b996:	4623      	mov	r3, r4
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	4423      	add	r3, r4
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	4413      	add	r3, r2
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	460a      	mov	r2, r1
 800b9a4:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnDecodeTemperature = &MCP9803_DecodeTemperature;
 800b9a6:	7bba      	ldrb	r2, [r7, #14]
 800b9a8:	493c      	ldr	r1, [pc, #240]	; (800ba9c <SensorArray_Init+0x270>)
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	005b      	lsls	r3, r3, #1
 800b9ae:	4413      	add	r3, r2
 800b9b0:	00db      	lsls	r3, r3, #3
 800b9b2:	440b      	add	r3, r1
 800b9b4:	330c      	adds	r3, #12
 800b9b6:	4a33      	ldr	r2, [pc, #204]	; (800ba84 <SensorArray_Init+0x258>)
 800b9b8:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnReadTemperature = &MCP9803_Read;
 800b9ba:	7bba      	ldrb	r2, [r7, #14]
 800b9bc:	4937      	ldr	r1, [pc, #220]	; (800ba9c <SensorArray_Init+0x270>)
 800b9be:	4613      	mov	r3, r2
 800b9c0:	005b      	lsls	r3, r3, #1
 800b9c2:	4413      	add	r3, r2
 800b9c4:	00db      	lsls	r3, r3, #3
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3310      	adds	r3, #16
 800b9ca:	4a2f      	ldr	r2, [pc, #188]	; (800ba88 <SensorArray_Init+0x25c>)
 800b9cc:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnSendConfig = &MCP9803_ConfigureResolution;
 800b9ce:	7bba      	ldrb	r2, [r7, #14]
 800b9d0:	4932      	ldr	r1, [pc, #200]	; (800ba9c <SensorArray_Init+0x270>)
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	4413      	add	r3, r2
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	440b      	add	r3, r1
 800b9dc:	3314      	adds	r3, #20
 800b9de:	4a2b      	ldr	r2, [pc, #172]	; (800ba8c <SensorArray_Init+0x260>)
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	e02a      	b.n	800ba3a <SensorArray_Init+0x20e>
		}
		else if (eSensorTypeListArrayB[u8Idx] == eSensor_MCP9808)
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	4a2c      	ldr	r2, [pc, #176]	; (800ba98 <SensorArray_Init+0x26c>)
 800b9e8:	5cd3      	ldrb	r3, [r2, r3]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d125      	bne.n	800ba3a <SensorArray_Init+0x20e>
		{
			kaSensorArrayDataB[u8Idx].u8Address = MCP9808_CalculateAddress(u8DeviceAddressListB[u8Idx]);
 800b9ee:	7bbb      	ldrb	r3, [r7, #14]
 800b9f0:	4a2b      	ldr	r2, [pc, #172]	; (800baa0 <SensorArray_Init+0x274>)
 800b9f2:	5cd3      	ldrb	r3, [r2, r3]
 800b9f4:	7bbc      	ldrb	r4, [r7, #14]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 f93a 	bl	800bc70 <MCP9808_CalculateAddress>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4a26      	ldr	r2, [pc, #152]	; (800ba9c <SensorArray_Init+0x270>)
 800ba02:	4623      	mov	r3, r4
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	4423      	add	r3, r4
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	460a      	mov	r2, r1
 800ba10:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnDecodeTemperature = &MCP9808_DecodeTemperature;
 800ba12:	7bba      	ldrb	r2, [r7, #14]
 800ba14:	4921      	ldr	r1, [pc, #132]	; (800ba9c <SensorArray_Init+0x270>)
 800ba16:	4613      	mov	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	00db      	lsls	r3, r3, #3
 800ba1e:	440b      	add	r3, r1
 800ba20:	330c      	adds	r3, #12
 800ba22:	4a1b      	ldr	r2, [pc, #108]	; (800ba90 <SensorArray_Init+0x264>)
 800ba24:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnReadTemperature = &MCP9808_Read;
 800ba26:	7bba      	ldrb	r2, [r7, #14]
 800ba28:	491c      	ldr	r1, [pc, #112]	; (800ba9c <SensorArray_Init+0x270>)
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	005b      	lsls	r3, r3, #1
 800ba2e:	4413      	add	r3, r2
 800ba30:	00db      	lsls	r3, r3, #3
 800ba32:	440b      	add	r3, r1
 800ba34:	3310      	adds	r3, #16
 800ba36:	4a17      	ldr	r2, [pc, #92]	; (800ba94 <SensorArray_Init+0x268>)
 800ba38:	601a      	str	r2, [r3, #0]
			//todo: manage the fact that there is no config for MCP9808
		}
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 800ba3a:	7bba      	ldrb	r2, [r7, #14]
 800ba3c:	4917      	ldr	r1, [pc, #92]	; (800ba9c <SensorArray_Init+0x270>)
 800ba3e:	4613      	mov	r3, r2
 800ba40:	005b      	lsls	r3, r3, #1
 800ba42:	4413      	add	r3, r2
 800ba44:	00db      	lsls	r3, r3, #3
 800ba46:	440b      	add	r3, r1
 800ba48:	3304      	adds	r3, #4
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 800ba4e:	7bba      	ldrb	r2, [r7, #14]
 800ba50:	4912      	ldr	r1, [pc, #72]	; (800ba9c <SensorArray_Init+0x270>)
 800ba52:	4613      	mov	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	440b      	add	r3, r1
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++)
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	3301      	adds	r3, #1
 800ba64:	73bb      	strb	r3, [r7, #14]
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b07      	cmp	r3, #7
 800ba6a:	f67f af78 	bls.w	800b95e <SensorArray_Init+0x132>
	}
}
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd90      	pop	{r4, r7, pc}
 800ba78:	08013e14 	.word	0x08013e14
 800ba7c:	200017ec 	.word	0x200017ec
 800ba80:	08013e04 	.word	0x08013e04
 800ba84:	0800bb41 	.word	0x0800bb41
 800ba88:	0800baa5 	.word	0x0800baa5
 800ba8c:	0800bad1 	.word	0x0800bad1
 800ba90:	0800bc8d 	.word	0x0800bc8d
 800ba94:	0800bc45 	.word	0x0800bc45
 800ba98:	08013e1c 	.word	0x08013e1c
 800ba9c:	200018ac 	.word	0x200018ac
 800baa0:	08013e0c 	.word	0x08013e0c

0800baa4 <MCP9803_Read>:
#define MCP9803_ResolutionConfigMask	( 0x60 )
/* Since initialization is made in blocking mode there is a necessity for a timeout */
#define MCP9803_InitizalizationTimeout	( 50 )

void MCP9803_Read(TemperatureSensor_t *kSensor)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9803_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6858      	ldr	r0, [r3, #4]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	785b      	ldrb	r3, [r3, #1]
 800bab4:	b299      	uxth	r1, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3308      	adds	r3, #8
 800baba:	2202      	movs	r2, #2
 800babc:	9201      	str	r2, [sp, #4]
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	2301      	movs	r3, #1
 800bac2:	2200      	movs	r2, #0
 800bac4:	f7f7 f902 	bl	8002ccc <HAL_I2C_Mem_Read_IT>
}
 800bac8:	bf00      	nop
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <MCP9803_ConfigureResolution>:

void MCP9803_ConfigureResolution(TemperatureSensor_t *kSensor, MCP9803_Resolution_t eBitResolution)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af04      	add	r7, sp, #16
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
	static uint8_t u8Data;
	u8Data = ((uint8_t)eBitResolution) & MCP9803_ResolutionConfigMask;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <MCP9803_ConfigureResolution+0x50>)
 800bae6:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef Result = HAL_I2C_Mem_Write(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9803_AddressConfiguration, 1, &u8Data, 1, MCP9803_InitizalizationTimeout);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6858      	ldr	r0, [r3, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	b299      	uxth	r1, r3
 800baf2:	2332      	movs	r3, #50	; 0x32
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	2301      	movs	r3, #1
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <MCP9803_ConfigureResolution+0x50>)
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	2301      	movs	r3, #1
 800bb00:	2201      	movs	r2, #1
 800bb02:	f7f6 ffe9 	bl	8002ad8 <HAL_I2C_Mem_Write>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73fb      	strb	r3, [r7, #15]

	if(Result == HAL_OK)
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d102      	bne.n	800bb16 <MCP9803_ConfigureResolution+0x46>
	{
		u8Data = 0; //todo: make a AssertError upon HAL_Status in all HAL calls
 800bb10:	4b03      	ldr	r3, [pc, #12]	; (800bb20 <MCP9803_ConfigureResolution+0x50>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]
	}
}
 800bb16:	bf00      	nop
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	2000036c 	.word	0x2000036c

0800bb24 <MCP9803_CalculateAddress>:

uint8_t MCP9803_CalculateAddress(uint8_t u8BitSettings)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	71fb      	strb	r3, [r7, #7]
	return ((MCP9803_AddresLowerNibble << 4) + u8BitSettings);
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	3b70      	subs	r3, #112	; 0x70
 800bb32:	b2db      	uxtb	r3, r3
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <MCP9803_DecodeTemperature>:

float MCP9803_DecodeTemperature(TemperatureSensor_t *kSensor)
{
 800bb40:	b5b0      	push	{r4, r5, r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	823b      	strh	r3, [r7, #16]
	bool bNegativeSign = false;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]
	float fResult = 0.0;
 800bb54:	f04f 0300 	mov.w	r3, #0
 800bb58:	617b      	str	r3, [r7, #20]


	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0]));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7a1b      	ldrb	r3, [r3, #8]
 800bb5e:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x80) && 0x80;
 800bb60:	8a7b      	ldrh	r3, [r7, #18]
 800bb62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	bf14      	ite	ne
 800bb6a:	2301      	movne	r3, #1
 800bb6c:	2300      	moveq	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x007F); // Mask to delete threshold data and sign
 800bb70:	8a7b      	ldrh	r3, [r7, #18]
 800bb72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb76:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1])) >> 4;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7a5b      	ldrb	r3, [r3, #9]
 800bb7c:	091b      	lsrs	r3, r3, #4
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	823b      	strh	r3, [r7, #16]

	if (bNegativeSign)
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d02c      	beq.n	800bbe2 <MCP9803_DecodeTemperature+0xa2>
	{
		fResult = (((float)u16FixedPointReadingLow) + (((float)u16FixedPointReadingHigh) * 0.0625)) * -1;
 800bb88:	8a7b      	ldrh	r3, [r7, #18]
 800bb8a:	ee07 3a90 	vmov	s15, r3
 800bb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb92:	ee17 0a90 	vmov	r0, s15
 800bb96:	f7f4 fcdf 	bl	8000558 <__aeabi_f2d>
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	8a3b      	ldrh	r3, [r7, #16]
 800bba0:	ee07 3a90 	vmov	s15, r3
 800bba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba8:	ee17 0a90 	vmov	r0, s15
 800bbac:	f7f4 fcd4 	bl	8000558 <__aeabi_f2d>
 800bbb0:	f04f 0200 	mov.w	r2, #0
 800bbb4:	4b22      	ldr	r3, [pc, #136]	; (800bc40 <MCP9803_DecodeTemperature+0x100>)
 800bbb6:	f7f4 fd27 	bl	8000608 <__aeabi_dmul>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	f7f4 fb6b 	bl	800029c <__adddf3>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4610      	mov	r0, r2
 800bbcc:	4619      	mov	r1, r3
 800bbce:	f7f4 fff3 	bl	8000bb8 <__aeabi_d2f>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	ee07 3a90 	vmov	s15, r3
 800bbd8:	eef1 7a67 	vneg.f32	s15, s15
 800bbdc:	edc7 7a05 	vstr	s15, [r7, #20]
 800bbe0:	e026      	b.n	800bc30 <MCP9803_DecodeTemperature+0xf0>
	}
	else
	{
		fResult = ((float)u16FixedPointReadingLow) + (((float)u16FixedPointReadingHigh) * 0.0625);
 800bbe2:	8a7b      	ldrh	r3, [r7, #18]
 800bbe4:	ee07 3a90 	vmov	s15, r3
 800bbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbec:	ee17 0a90 	vmov	r0, s15
 800bbf0:	f7f4 fcb2 	bl	8000558 <__aeabi_f2d>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	8a3b      	ldrh	r3, [r7, #16]
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc02:	ee17 0a90 	vmov	r0, s15
 800bc06:	f7f4 fca7 	bl	8000558 <__aeabi_f2d>
 800bc0a:	f04f 0200 	mov.w	r2, #0
 800bc0e:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <MCP9803_DecodeTemperature+0x100>)
 800bc10:	f7f4 fcfa 	bl	8000608 <__aeabi_dmul>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	4620      	mov	r0, r4
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	f7f4 fb3e 	bl	800029c <__adddf3>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4610      	mov	r0, r2
 800bc26:	4619      	mov	r1, r3
 800bc28:	f7f4 ffc6 	bl	8000bb8 <__aeabi_d2f>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	617b      	str	r3, [r7, #20]
	}

	return fResult;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	ee07 3a90 	vmov	s15, r3
}
 800bc36:	eeb0 0a67 	vmov.f32	s0, s15
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bdb0      	pop	{r4, r5, r7, pc}
 800bc40:	3fb00000 	.word	0x3fb00000

0800bc44 <MCP9808_Read>:
#include "TemperatureSensor_ArrayData.h"

#define MCP9808_AddresLowerNibble 0x3

void MCP9808_Read(TemperatureSensor_t *kSensor)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6858      	ldr	r0, [r3, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	785b      	ldrb	r3, [r3, #1]
 800bc54:	b299      	uxth	r1, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3308      	adds	r3, #8
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	9201      	str	r2, [sp, #4]
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	2301      	movs	r3, #1
 800bc62:	2205      	movs	r2, #5
 800bc64:	f7f7 f832 	bl	8002ccc <HAL_I2C_Mem_Read_IT>
}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <MCP9808_CalculateAddress>:

uint8_t MCP9808_CalculateAddress(uint8_t u8BitSettings)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4603      	mov	r3, r0
 800bc78:	71fb      	strb	r3, [r7, #7]
	return ((MCP9808_AddresLowerNibble << 4) + u8BitSettings);
 800bc7a:	79fb      	ldrb	r3, [r7, #7]
 800bc7c:	3330      	adds	r3, #48	; 0x30
 800bc7e:	b2db      	uxtb	r3, r3
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <MCP9808_DecodeTemperature>:

float MCP9808_DecodeTemperature(TemperatureSensor_t *kSensor)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b087      	sub	sp, #28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	823b      	strh	r3, [r7, #16]
	uint16_t u16FixedPointReading = 0;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	81fb      	strh	r3, [r7, #14]
	bool bNegativeSign = false;
 800bca0:	2300      	movs	r3, #0
 800bca2:	737b      	strb	r3, [r7, #13]
	float fResult = 0.0;
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	617b      	str	r3, [r7, #20]

	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7a1b      	ldrb	r3, [r3, #8]
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	021b      	lsls	r3, r3, #8
 800bcb2:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
 800bcb4:	8a7b      	ldrh	r3, [r7, #18]
 800bcb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	bf14      	ite	ne
 800bcbe:	2301      	movne	r3, #1
 800bcc0:	2300      	moveq	r3, #0
 800bcc2:	737b      	strb	r3, [r7, #13]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 800bcc4:	8a7b      	ldrh	r3, [r7, #18]
 800bcc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcca:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	7a5b      	ldrb	r3, [r3, #9]
 800bcd0:	823b      	strh	r3, [r7, #16]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 800bcd2:	8a7a      	ldrh	r2, [r7, #18]
 800bcd4:	8a3b      	ldrh	r3, [r7, #16]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	81fb      	strh	r3, [r7, #14]

	if (bNegativeSign)
 800bcda:	7b7b      	ldrb	r3, [r7, #13]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00d      	beq.n	800bcfc <MCP9808_DecodeTemperature+0x70>
	{
		fResult = ((float)(u16FixedPointReading) / 16) * -1;
 800bce0:	89fb      	ldrh	r3, [r7, #14]
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcea:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800bcee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bcf2:	eef1 7a67 	vneg.f32	s15, s15
 800bcf6:	edc7 7a05 	vstr	s15, [r7, #20]
 800bcfa:	e00a      	b.n	800bd12 <MCP9808_DecodeTemperature+0x86>
	}
	else
	{
		fResult = ((float)(u16FixedPointReading) / 16);
 800bcfc:	89fb      	ldrh	r3, [r7, #14]
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd06:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800bd0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd0e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return fResult;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	ee07 3a90 	vmov	s15, r3
}
 800bd18:	eeb0 0a67 	vmov.f32	s0, s15
 800bd1c:	371c      	adds	r7, #28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd32:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd36:	f004 ff9b 	bl	8010c70 <USBD_static_malloc>
 800bd3a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d105      	bne.n	800bd4e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	e066      	b.n	800be1c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	7c1b      	ldrb	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d119      	bne.n	800bd92 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd62:	2202      	movs	r2, #2
 800bd64:	2181      	movs	r1, #129	; 0x81
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f004 fe5f 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bd72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd76:	2202      	movs	r2, #2
 800bd78:	2101      	movs	r1, #1
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f004 fe55 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2210      	movs	r2, #16
 800bd8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bd90:	e016      	b.n	800bdc0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd92:	2340      	movs	r3, #64	; 0x40
 800bd94:	2202      	movs	r2, #2
 800bd96:	2181      	movs	r1, #129	; 0x81
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f004 fe46 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bda4:	2340      	movs	r3, #64	; 0x40
 800bda6:	2202      	movs	r2, #2
 800bda8:	2101      	movs	r1, #1
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f004 fe3d 	bl	8010a2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2210      	movs	r2, #16
 800bdbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdc0:	2308      	movs	r3, #8
 800bdc2:	2203      	movs	r2, #3
 800bdc4:	2182      	movs	r1, #130	; 0x82
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f004 fe2f 	bl	8010a2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7c1b      	ldrb	r3, [r3, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d109      	bne.n	800be0a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be00:	2101      	movs	r1, #1
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f004 ff00 	bl	8010c08 <USBD_LL_PrepareReceive>
 800be08:	e007      	b.n	800be1a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be10:	2340      	movs	r3, #64	; 0x40
 800be12:	2101      	movs	r1, #1
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f004 fef7 	bl	8010c08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be30:	2181      	movs	r1, #129	; 0x81
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f004 fe1f 	bl	8010a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be3e:	2101      	movs	r1, #1
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f004 fe18 	bl	8010a76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be4e:	2182      	movs	r1, #130	; 0x82
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f004 fe10 	bl	8010a76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00e      	beq.n	800be8e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be80:	4618      	mov	r0, r3
 800be82:	f004 ff03 	bl	8010c8c <USBD_static_free>
    pdev->pClassData = NULL;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e0af      	b.n	800c020 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d03f      	beq.n	800bf4c <USBD_CDC_Setup+0xb4>
 800becc:	2b20      	cmp	r3, #32
 800bece:	f040 809f 	bne.w	800c010 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d02e      	beq.n	800bf38 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	b25b      	sxtb	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	da16      	bge.n	800bf12 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bef0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	88d2      	ldrh	r2, [r2, #6]
 800bef6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	88db      	ldrh	r3, [r3, #6]
 800befc:	2b07      	cmp	r3, #7
 800befe:	bf28      	it	cs
 800bf00:	2307      	movcs	r3, #7
 800bf02:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	89fa      	ldrh	r2, [r7, #14]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f001 fb19 	bl	800d542 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bf10:	e085      	b.n	800c01e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	785a      	ldrb	r2, [r3, #1]
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	88db      	ldrh	r3, [r3, #6]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bf28:	6939      	ldr	r1, [r7, #16]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	88db      	ldrh	r3, [r3, #6]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 fb32 	bl	800d59a <USBD_CtlPrepareRx>
      break;
 800bf36:	e072      	b.n	800c01e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	7850      	ldrb	r0, [r2, #1]
 800bf44:	2200      	movs	r2, #0
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	4798      	blx	r3
      break;
 800bf4a:	e068      	b.n	800c01e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	785b      	ldrb	r3, [r3, #1]
 800bf50:	2b0b      	cmp	r3, #11
 800bf52:	d852      	bhi.n	800bffa <USBD_CDC_Setup+0x162>
 800bf54:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <USBD_CDC_Setup+0xc4>)
 800bf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5a:	bf00      	nop
 800bf5c:	0800bf8d 	.word	0x0800bf8d
 800bf60:	0800c009 	.word	0x0800c009
 800bf64:	0800bffb 	.word	0x0800bffb
 800bf68:	0800bffb 	.word	0x0800bffb
 800bf6c:	0800bffb 	.word	0x0800bffb
 800bf70:	0800bffb 	.word	0x0800bffb
 800bf74:	0800bffb 	.word	0x0800bffb
 800bf78:	0800bffb 	.word	0x0800bffb
 800bf7c:	0800bffb 	.word	0x0800bffb
 800bf80:	0800bffb 	.word	0x0800bffb
 800bf84:	0800bfb7 	.word	0x0800bfb7
 800bf88:	0800bfe1 	.word	0x0800bfe1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d107      	bne.n	800bfa8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf98:	f107 030a 	add.w	r3, r7, #10
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f001 face 	bl	800d542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfa6:	e032      	b.n	800c00e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f001 fa58 	bl	800d460 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	75fb      	strb	r3, [r7, #23]
          break;
 800bfb4:	e02b      	b.n	800c00e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d107      	bne.n	800bfd2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfc2:	f107 030d 	add.w	r3, r7, #13
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f001 fab9 	bl	800d542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfd0:	e01d      	b.n	800c00e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 fa43 	bl	800d460 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	75fb      	strb	r3, [r7, #23]
          break;
 800bfde:	e016      	b.n	800c00e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d00f      	beq.n	800c00c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f001 fa36 	bl	800d460 <USBD_CtlError>
            ret = USBD_FAIL;
 800bff4:	2303      	movs	r3, #3
 800bff6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bff8:	e008      	b.n	800c00c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 fa2f 	bl	800d460 <USBD_CtlError>
          ret = USBD_FAIL;
 800c002:	2303      	movs	r3, #3
 800c004:	75fb      	strb	r3, [r7, #23]
          break;
 800c006:	e002      	b.n	800c00e <USBD_CDC_Setup+0x176>
          break;
 800c008:	bf00      	nop
 800c00a:	e008      	b.n	800c01e <USBD_CDC_Setup+0x186>
          break;
 800c00c:	bf00      	nop
      }
      break;
 800c00e:	e006      	b.n	800c01e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f001 fa24 	bl	800d460 <USBD_CtlError>
      ret = USBD_FAIL;
 800c018:	2303      	movs	r3, #3
 800c01a:	75fb      	strb	r3, [r7, #23]
      break;
 800c01c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c03a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c046:	2303      	movs	r3, #3
 800c048:	e04f      	b.n	800c0ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c052:	78fa      	ldrb	r2, [r7, #3]
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	440b      	add	r3, r1
 800c060:	3318      	adds	r3, #24
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d029      	beq.n	800c0bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	3318      	adds	r3, #24
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	78f9      	ldrb	r1, [r7, #3]
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	460b      	mov	r3, r1
 800c080:	00db      	lsls	r3, r3, #3
 800c082:	1a5b      	subs	r3, r3, r1
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4403      	add	r3, r0
 800c088:	3344      	adds	r3, #68	; 0x44
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c090:	fb03 f301 	mul.w	r3, r3, r1
 800c094:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c096:	2b00      	cmp	r3, #0
 800c098:	d110      	bne.n	800c0bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c09a:	78fa      	ldrb	r2, [r7, #3]
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	3318      	adds	r3, #24
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0ae:	78f9      	ldrb	r1, [r7, #3]
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f004 fd86 	bl	8010bc6 <USBD_LL_Transmit>
 800c0ba:	e015      	b.n	800c0e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00b      	beq.n	800c0e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c104:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c110:	2303      	movs	r3, #3
 800c112:	e015      	b.n	800c140 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f004 fd96 	bl	8010c4a <USBD_LL_GetRxDataSize>
 800c11e:	4602      	mov	r2, r0
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c13a:	4611      	mov	r1, r2
 800c13c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c15e:	2303      	movs	r3, #3
 800c160:	e01b      	b.n	800c19a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d015      	beq.n	800c198 <USBD_CDC_EP0_RxReady+0x50>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c172:	2bff      	cmp	r3, #255	; 0xff
 800c174:	d010      	beq.n	800c198 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c184:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c18c:	b292      	uxth	r2, r2
 800c18e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	22ff      	movs	r2, #255	; 0xff
 800c194:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2243      	movs	r2, #67	; 0x43
 800c1b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c1b2:	4b03      	ldr	r3, [pc, #12]	; (800c1c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	20000090 	.word	0x20000090

0800c1c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2243      	movs	r2, #67	; 0x43
 800c1d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c1d2:	4b03      	ldr	r3, [pc, #12]	; (800c1e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	2000004c 	.word	0x2000004c

0800c1e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2243      	movs	r2, #67	; 0x43
 800c1f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c1f2:	4b03      	ldr	r3, [pc, #12]	; (800c200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	200000d4 	.word	0x200000d4

0800c204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	220a      	movs	r2, #10
 800c210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c212:	4b03      	ldr	r3, [pc, #12]	; (800c220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	20000008 	.word	0x20000008

0800c224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e004      	b.n	800c242 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c24e:	b480      	push	{r7}
 800c250:	b087      	sub	sp, #28
 800c252:	af00      	add	r7, sp, #0
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	60b9      	str	r1, [r7, #8]
 800c258:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c260:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c268:	2303      	movs	r3, #3
 800c26a:	e008      	b.n	800c27e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	371c      	adds	r7, #28
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b085      	sub	sp, #20
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c29a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	e004      	b.n	800c2b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e01a      	b.n	800c314 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d114      	bne.n	800c312 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c306:	2181      	movs	r1, #129	; 0x81
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f004 fc5c 	bl	8010bc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c312:	7bfb      	ldrb	r3, [r7, #15]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c32a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c336:	2303      	movs	r3, #3
 800c338:	e016      	b.n	800c368 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	7c1b      	ldrb	r3, [r3, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d109      	bne.n	800c356 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c34c:	2101      	movs	r1, #1
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f004 fc5a 	bl	8010c08 <USBD_LL_PrepareReceive>
 800c354:	e007      	b.n	800c366 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c35c:	2340      	movs	r3, #64	; 0x40
 800c35e:	2101      	movs	r1, #1
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f004 fc51 	bl	8010c08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e01f      	b.n	800c3c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f004 facd 	bl	801095c <USBD_LL_Init>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e016      	b.n	800c416 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00b      	beq.n	800c414 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	f107 020e 	add.w	r2, r7, #14
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	4602      	mov	r2, r0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f004 fae4 	bl	80109f4 <USBD_LL_Start>
 800c42c:	4603      	mov	r3, r0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c436:	b480      	push	{r7}
 800c438:	b083      	sub	sp, #12
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c458:	2303      	movs	r3, #3
 800c45a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c462:	2b00      	cmp	r3, #0
 800c464:	d009      	beq.n	800c47a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	78fa      	ldrb	r2, [r7, #3]
 800c470:	4611      	mov	r1, r2
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	460b      	mov	r3, r1
 800c48e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c496:	2b00      	cmp	r3, #0
 800c498:	d007      	beq.n	800c4aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	78fa      	ldrb	r2, [r7, #3]
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	4798      	blx	r3
  }

  return USBD_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 ff90 	bl	800d3ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c4da:	461a      	mov	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4e8:	f003 031f 	and.w	r3, r3, #31
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d01a      	beq.n	800c526 <USBD_LL_SetupStage+0x72>
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d822      	bhi.n	800c53a <USBD_LL_SetupStage+0x86>
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <USBD_LL_SetupStage+0x4a>
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d00a      	beq.n	800c512 <USBD_LL_SetupStage+0x5e>
 800c4fc:	e01d      	b.n	800c53a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa62 	bl	800c9d0 <USBD_StdDevReq>
 800c50c:	4603      	mov	r3, r0
 800c50e:	73fb      	strb	r3, [r7, #15]
      break;
 800c510:	e020      	b.n	800c554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fac6 	bl	800caac <USBD_StdItfReq>
 800c520:	4603      	mov	r3, r0
 800c522:	73fb      	strb	r3, [r7, #15]
      break;
 800c524:	e016      	b.n	800c554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c52c:	4619      	mov	r1, r3
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fb05 	bl	800cb3e <USBD_StdEPReq>
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
      break;
 800c538:	e00c      	b.n	800c554 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c544:	b2db      	uxtb	r3, r3
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f004 fab3 	bl	8010ab4 <USBD_LL_StallEP>
 800c54e:	4603      	mov	r3, r0
 800c550:	73fb      	strb	r3, [r7, #15]
      break;
 800c552:	bf00      	nop
  }

  return ret;
 800c554:	7bfb      	ldrb	r3, [r7, #15]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b086      	sub	sp, #24
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	460b      	mov	r3, r1
 800c568:	607a      	str	r2, [r7, #4]
 800c56a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c56c:	7afb      	ldrb	r3, [r7, #11]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d138      	bne.n	800c5e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c578:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c580:	2b03      	cmp	r3, #3
 800c582:	d14a      	bne.n	800c61a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	689a      	ldr	r2, [r3, #8]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d913      	bls.n	800c5b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	689a      	ldr	r2, [r3, #8]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	1ad2      	subs	r2, r2, r3
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	bf28      	it	cs
 800c5aa:	4613      	movcs	r3, r2
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f001 f80f 	bl	800d5d4 <USBD_CtlContinueRx>
 800c5b6:	e030      	b.n	800c61a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	d10b      	bne.n	800c5dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d005      	beq.n	800c5dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f001 f80a 	bl	800d5f6 <USBD_CtlSendStatus>
 800c5e2:	e01a      	b.n	800c61a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	d114      	bne.n	800c61a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00e      	beq.n	800c61a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	7afa      	ldrb	r2, [r7, #11]
 800c606:	4611      	mov	r1, r2
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	4798      	blx	r3
 800c60c:	4603      	mov	r3, r0
 800c60e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c610:	7dfb      	ldrb	r3, [r7, #23]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	e000      	b.n	800c61c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3718      	adds	r7, #24
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	460b      	mov	r3, r1
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c632:	7afb      	ldrb	r3, [r7, #11]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d16b      	bne.n	800c710 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	3314      	adds	r3, #20
 800c63c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c644:	2b02      	cmp	r3, #2
 800c646:	d156      	bne.n	800c6f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	429a      	cmp	r2, r3
 800c652:	d914      	bls.n	800c67e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	1ad2      	subs	r2, r2, r3
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	461a      	mov	r2, r3
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f000 ff84 	bl	800d578 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c670:	2300      	movs	r3, #0
 800c672:	2200      	movs	r2, #0
 800c674:	2100      	movs	r1, #0
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f004 fac6 	bl	8010c08 <USBD_LL_PrepareReceive>
 800c67c:	e03b      	b.n	800c6f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	d11c      	bne.n	800c6c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c692:	429a      	cmp	r2, r3
 800c694:	d316      	bcc.n	800c6c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	685a      	ldr	r2, [r3, #4]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d20f      	bcs.n	800c6c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 ff65 	bl	800d578 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f004 faa3 	bl	8010c08 <USBD_LL_PrepareReceive>
 800c6c2:	e018      	b.n	800c6f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d10b      	bne.n	800c6e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d005      	beq.n	800c6e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6e8:	2180      	movs	r1, #128	; 0x80
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f004 f9e2 	bl	8010ab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 ff93 	bl	800d61c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d122      	bne.n	800c746 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f7ff fe98 	bl	800c436 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c70e:	e01a      	b.n	800c746 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c716:	b2db      	uxtb	r3, r3
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d114      	bne.n	800c746 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00e      	beq.n	800c746 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72e:	695b      	ldr	r3, [r3, #20]
 800c730:	7afa      	ldrb	r2, [r7, #11]
 800c732:	4611      	mov	r1, r2
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	4798      	blx	r3
 800c738:	4603      	mov	r3, r0
 800c73a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	e000      	b.n	800c748 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c780:	2303      	movs	r3, #3
 800c782:	e02f      	b.n	800c7e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00f      	beq.n	800c7ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d009      	beq.n	800c7ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6852      	ldr	r2, [r2, #4]
 800c7a6:	b2d2      	uxtb	r2, r2
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ae:	2340      	movs	r3, #64	; 0x40
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f004 f938 	bl	8010a2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2240      	movs	r2, #64	; 0x40
 800c7c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ca:	2340      	movs	r3, #64	; 0x40
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2180      	movs	r1, #128	; 0x80
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f004 f92a 	bl	8010a2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2240      	movs	r2, #64	; 0x40
 800c7e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	78fa      	ldrb	r2, [r7, #3]
 800c7fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2204      	movs	r2, #4
 800c826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d106      	bne.n	800c85a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c852:	b2da      	uxtb	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c87a:	2303      	movs	r3, #3
 800c87c:	e012      	b.n	800c8a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b03      	cmp	r3, #3
 800c888:	d10b      	bne.n	800c8a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d005      	beq.n	800c8a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e014      	b.n	800c8f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d10d      	bne.n	800c8ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	78fa      	ldrb	r2, [r7, #3]
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c90e:	2303      	movs	r3, #3
 800c910:	e014      	b.n	800c93c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d10d      	bne.n	800c93a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c932:	78fa      	ldrb	r2, [r7, #3]
 800c934:	4611      	mov	r1, r2
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	6852      	ldr	r2, [r2, #4]
 800c980:	b2d2      	uxtb	r2, r2
 800c982:	4611      	mov	r1, r2
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	4798      	blx	r3
  }

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c992:	b480      	push	{r7}
 800c994:	b087      	sub	sp, #28
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9b0:	8a3b      	ldrh	r3, [r7, #16]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	b21a      	sxth	r2, r3
 800c9b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	b21b      	sxth	r3, r3
 800c9be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9c0:	89fb      	ldrh	r3, [r7, #14]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	371c      	adds	r7, #28
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
	...

0800c9d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9e6:	2b40      	cmp	r3, #64	; 0x40
 800c9e8:	d005      	beq.n	800c9f6 <USBD_StdDevReq+0x26>
 800c9ea:	2b40      	cmp	r3, #64	; 0x40
 800c9ec:	d853      	bhi.n	800ca96 <USBD_StdDevReq+0xc6>
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00b      	beq.n	800ca0a <USBD_StdDevReq+0x3a>
 800c9f2:	2b20      	cmp	r3, #32
 800c9f4:	d14f      	bne.n	800ca96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	6839      	ldr	r1, [r7, #0]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	4798      	blx	r3
 800ca04:	4603      	mov	r3, r0
 800ca06:	73fb      	strb	r3, [r7, #15]
      break;
 800ca08:	e04a      	b.n	800caa0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	785b      	ldrb	r3, [r3, #1]
 800ca0e:	2b09      	cmp	r3, #9
 800ca10:	d83b      	bhi.n	800ca8a <USBD_StdDevReq+0xba>
 800ca12:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <USBD_StdDevReq+0x48>)
 800ca14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca18:	0800ca6d 	.word	0x0800ca6d
 800ca1c:	0800ca81 	.word	0x0800ca81
 800ca20:	0800ca8b 	.word	0x0800ca8b
 800ca24:	0800ca77 	.word	0x0800ca77
 800ca28:	0800ca8b 	.word	0x0800ca8b
 800ca2c:	0800ca4b 	.word	0x0800ca4b
 800ca30:	0800ca41 	.word	0x0800ca41
 800ca34:	0800ca8b 	.word	0x0800ca8b
 800ca38:	0800ca63 	.word	0x0800ca63
 800ca3c:	0800ca55 	.word	0x0800ca55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9de 	bl	800ce04 <USBD_GetDescriptor>
          break;
 800ca48:	e024      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fb43 	bl	800d0d8 <USBD_SetAddress>
          break;
 800ca52:	e01f      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fb82 	bl	800d160 <USBD_SetConfig>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]
          break;
 800ca60:	e018      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fc21 	bl	800d2ac <USBD_GetConfig>
          break;
 800ca6a:	e013      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fc52 	bl	800d318 <USBD_GetStatus>
          break;
 800ca74:	e00e      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fc81 	bl	800d380 <USBD_SetFeature>
          break;
 800ca7e:	e009      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fc90 	bl	800d3a8 <USBD_ClrFeature>
          break;
 800ca88:	e004      	b.n	800ca94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fce7 	bl	800d460 <USBD_CtlError>
          break;
 800ca92:	bf00      	nop
      }
      break;
 800ca94:	e004      	b.n	800caa0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fce1 	bl	800d460 <USBD_CtlError>
      break;
 800ca9e:	bf00      	nop
  }

  return ret;
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop

0800caac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cac2:	2b40      	cmp	r3, #64	; 0x40
 800cac4:	d005      	beq.n	800cad2 <USBD_StdItfReq+0x26>
 800cac6:	2b40      	cmp	r3, #64	; 0x40
 800cac8:	d82f      	bhi.n	800cb2a <USBD_StdItfReq+0x7e>
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <USBD_StdItfReq+0x26>
 800cace:	2b20      	cmp	r3, #32
 800cad0:	d12b      	bne.n	800cb2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	3b01      	subs	r3, #1
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d81d      	bhi.n	800cb1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	889b      	ldrh	r3, [r3, #4]
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d813      	bhi.n	800cb12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	4798      	blx	r3
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	88db      	ldrh	r3, [r3, #6]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d110      	bne.n	800cb26 <USBD_StdItfReq+0x7a>
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d10d      	bne.n	800cb26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fd73 	bl	800d5f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb10:	e009      	b.n	800cb26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fca3 	bl	800d460 <USBD_CtlError>
          break;
 800cb1a:	e004      	b.n	800cb26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fc9e 	bl	800d460 <USBD_CtlError>
          break;
 800cb24:	e000      	b.n	800cb28 <USBD_StdItfReq+0x7c>
          break;
 800cb26:	bf00      	nop
      }
      break;
 800cb28:	e004      	b.n	800cb34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fc97 	bl	800d460 <USBD_CtlError>
      break;
 800cb32:	bf00      	nop
  }

  return ret;
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b084      	sub	sp, #16
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	889b      	ldrh	r3, [r3, #4]
 800cb50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb5a:	2b40      	cmp	r3, #64	; 0x40
 800cb5c:	d007      	beq.n	800cb6e <USBD_StdEPReq+0x30>
 800cb5e:	2b40      	cmp	r3, #64	; 0x40
 800cb60:	f200 8145 	bhi.w	800cdee <USBD_StdEPReq+0x2b0>
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00c      	beq.n	800cb82 <USBD_StdEPReq+0x44>
 800cb68:	2b20      	cmp	r3, #32
 800cb6a:	f040 8140 	bne.w	800cdee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	4798      	blx	r3
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb80:	e13a      	b.n	800cdf8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	785b      	ldrb	r3, [r3, #1]
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d007      	beq.n	800cb9a <USBD_StdEPReq+0x5c>
 800cb8a:	2b03      	cmp	r3, #3
 800cb8c:	f300 8129 	bgt.w	800cde2 <USBD_StdEPReq+0x2a4>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d07f      	beq.n	800cc94 <USBD_StdEPReq+0x156>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d03c      	beq.n	800cc12 <USBD_StdEPReq+0xd4>
 800cb98:	e123      	b.n	800cde2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d002      	beq.n	800cbac <USBD_StdEPReq+0x6e>
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d016      	beq.n	800cbd8 <USBD_StdEPReq+0x9a>
 800cbaa:	e02c      	b.n	800cc06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00d      	beq.n	800cbce <USBD_StdEPReq+0x90>
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	2b80      	cmp	r3, #128	; 0x80
 800cbb6:	d00a      	beq.n	800cbce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f003 ff79 	bl	8010ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbc2:	2180      	movs	r1, #128	; 0x80
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f003 ff75 	bl	8010ab4 <USBD_LL_StallEP>
 800cbca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbcc:	e020      	b.n	800cc10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fc45 	bl	800d460 <USBD_CtlError>
              break;
 800cbd6:	e01b      	b.n	800cc10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	885b      	ldrh	r3, [r3, #2]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10e      	bne.n	800cbfe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00b      	beq.n	800cbfe <USBD_StdEPReq+0xc0>
 800cbe6:	7bbb      	ldrb	r3, [r7, #14]
 800cbe8:	2b80      	cmp	r3, #128	; 0x80
 800cbea:	d008      	beq.n	800cbfe <USBD_StdEPReq+0xc0>
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	88db      	ldrh	r3, [r3, #6]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d104      	bne.n	800cbfe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f003 ff5b 	bl	8010ab4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fcf9 	bl	800d5f6 <USBD_CtlSendStatus>

              break;
 800cc04:	e004      	b.n	800cc10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fc29 	bl	800d460 <USBD_CtlError>
              break;
 800cc0e:	bf00      	nop
          }
          break;
 800cc10:	e0ec      	b.n	800cdec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d002      	beq.n	800cc24 <USBD_StdEPReq+0xe6>
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d016      	beq.n	800cc50 <USBD_StdEPReq+0x112>
 800cc22:	e030      	b.n	800cc86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00d      	beq.n	800cc46 <USBD_StdEPReq+0x108>
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b80      	cmp	r3, #128	; 0x80
 800cc2e:	d00a      	beq.n	800cc46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f003 ff3d 	bl	8010ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc3a:	2180      	movs	r1, #128	; 0x80
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f003 ff39 	bl	8010ab4 <USBD_LL_StallEP>
 800cc42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc44:	e025      	b.n	800cc92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fc09 	bl	800d460 <USBD_CtlError>
              break;
 800cc4e:	e020      	b.n	800cc92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	885b      	ldrh	r3, [r3, #2]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d11b      	bne.n	800cc90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	4619      	mov	r1, r3
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f003 ff43 	bl	8010af2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fcc2 	bl	800d5f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	4798      	blx	r3
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cc84:	e004      	b.n	800cc90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fbe9 	bl	800d460 <USBD_CtlError>
              break;
 800cc8e:	e000      	b.n	800cc92 <USBD_StdEPReq+0x154>
              break;
 800cc90:	bf00      	nop
          }
          break;
 800cc92:	e0ab      	b.n	800cdec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d002      	beq.n	800cca6 <USBD_StdEPReq+0x168>
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d032      	beq.n	800cd0a <USBD_StdEPReq+0x1cc>
 800cca4:	e097      	b.n	800cdd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d007      	beq.n	800ccbc <USBD_StdEPReq+0x17e>
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
 800ccae:	2b80      	cmp	r3, #128	; 0x80
 800ccb0:	d004      	beq.n	800ccbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fbd3 	bl	800d460 <USBD_CtlError>
                break;
 800ccba:	e091      	b.n	800cde0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	da0b      	bge.n	800ccdc <USBD_StdEPReq+0x19e>
 800ccc4:	7bbb      	ldrb	r3, [r7, #14]
 800ccc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccca:	4613      	mov	r3, r2
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	3310      	adds	r3, #16
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	3304      	adds	r3, #4
 800ccda:	e00b      	b.n	800ccf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cce2:	4613      	mov	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	2202      	movs	r2, #2
 800cd00:	4619      	mov	r1, r3
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fc1d 	bl	800d542 <USBD_CtlSendData>
              break;
 800cd08:	e06a      	b.n	800cde0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	da11      	bge.n	800cd36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	f003 020f 	and.w	r2, r3, #15
 800cd18:	6879      	ldr	r1, [r7, #4]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	440b      	add	r3, r1
 800cd24:	3324      	adds	r3, #36	; 0x24
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d117      	bne.n	800cd5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fb96 	bl	800d460 <USBD_CtlError>
                  break;
 800cd34:	e054      	b.n	800cde0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
 800cd38:	f003 020f 	and.w	r2, r3, #15
 800cd3c:	6879      	ldr	r1, [r7, #4]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	440b      	add	r3, r1
 800cd48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d104      	bne.n	800cd5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fb83 	bl	800d460 <USBD_CtlError>
                  break;
 800cd5a:	e041      	b.n	800cde0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	da0b      	bge.n	800cd7c <USBD_StdEPReq+0x23e>
 800cd64:	7bbb      	ldrb	r3, [r7, #14]
 800cd66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	3310      	adds	r3, #16
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	4413      	add	r3, r2
 800cd78:	3304      	adds	r3, #4
 800cd7a:	e00b      	b.n	800cd94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd82:	4613      	mov	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	3304      	adds	r3, #4
 800cd94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <USBD_StdEPReq+0x264>
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	2b80      	cmp	r3, #128	; 0x80
 800cda0:	d103      	bne.n	800cdaa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2200      	movs	r2, #0
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	e00e      	b.n	800cdc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cdaa:	7bbb      	ldrb	r3, [r7, #14]
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f003 febe 	bl	8010b30 <USBD_LL_IsStallEP>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	e002      	b.n	800cdc8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2202      	movs	r2, #2
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fbb7 	bl	800d542 <USBD_CtlSendData>
              break;
 800cdd4:	e004      	b.n	800cde0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fb41 	bl	800d460 <USBD_CtlError>
              break;
 800cdde:	bf00      	nop
          }
          break;
 800cde0:	e004      	b.n	800cdec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fb3b 	bl	800d460 <USBD_CtlError>
          break;
 800cdea:	bf00      	nop
      }
      break;
 800cdec:	e004      	b.n	800cdf8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fb35 	bl	800d460 <USBD_CtlError>
      break;
 800cdf6:	bf00      	nop
  }

  return ret;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce16:	2300      	movs	r3, #0
 800ce18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	885b      	ldrh	r3, [r3, #2]
 800ce1e:	0a1b      	lsrs	r3, r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3b01      	subs	r3, #1
 800ce24:	2b06      	cmp	r3, #6
 800ce26:	f200 8128 	bhi.w	800d07a <USBD_GetDescriptor+0x276>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <USBD_GetDescriptor+0x2c>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce4d 	.word	0x0800ce4d
 800ce34:	0800ce65 	.word	0x0800ce65
 800ce38:	0800cea5 	.word	0x0800cea5
 800ce3c:	0800d07b 	.word	0x0800d07b
 800ce40:	0800d07b 	.word	0x0800d07b
 800ce44:	0800d01b 	.word	0x0800d01b
 800ce48:	0800d047 	.word	0x0800d047
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	7c12      	ldrb	r2, [r2, #16]
 800ce58:	f107 0108 	add.w	r1, r7, #8
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	4798      	blx	r3
 800ce60:	60f8      	str	r0, [r7, #12]
      break;
 800ce62:	e112      	b.n	800d08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7c1b      	ldrb	r3, [r3, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10d      	bne.n	800ce88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce74:	f107 0208 	add.w	r2, r7, #8
 800ce78:	4610      	mov	r0, r2
 800ce7a:	4798      	blx	r3
 800ce7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3301      	adds	r3, #1
 800ce82:	2202      	movs	r2, #2
 800ce84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce86:	e100      	b.n	800d08a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	f107 0208 	add.w	r2, r7, #8
 800ce94:	4610      	mov	r0, r2
 800ce96:	4798      	blx	r3
 800ce98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	2202      	movs	r2, #2
 800cea0:	701a      	strb	r2, [r3, #0]
      break;
 800cea2:	e0f2      	b.n	800d08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	885b      	ldrh	r3, [r3, #2]
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	f200 80ac 	bhi.w	800d008 <USBD_GetDescriptor+0x204>
 800ceb0:	a201      	add	r2, pc, #4	; (adr r2, 800ceb8 <USBD_GetDescriptor+0xb4>)
 800ceb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb6:	bf00      	nop
 800ceb8:	0800ced1 	.word	0x0800ced1
 800cebc:	0800cf05 	.word	0x0800cf05
 800cec0:	0800cf39 	.word	0x0800cf39
 800cec4:	0800cf6d 	.word	0x0800cf6d
 800cec8:	0800cfa1 	.word	0x0800cfa1
 800cecc:	0800cfd5 	.word	0x0800cfd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	7c12      	ldrb	r2, [r2, #16]
 800cee8:	f107 0108 	add.w	r1, r7, #8
 800ceec:	4610      	mov	r0, r2
 800ceee:	4798      	blx	r3
 800cef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cef2:	e091      	b.n	800d018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fab2 	bl	800d460 <USBD_CtlError>
            err++;
 800cefc:	7afb      	ldrb	r3, [r7, #11]
 800cefe:	3301      	adds	r3, #1
 800cf00:	72fb      	strb	r3, [r7, #11]
          break;
 800cf02:	e089      	b.n	800d018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d00b      	beq.n	800cf28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	7c12      	ldrb	r2, [r2, #16]
 800cf1c:	f107 0108 	add.w	r1, r7, #8
 800cf20:	4610      	mov	r0, r2
 800cf22:	4798      	blx	r3
 800cf24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf26:	e077      	b.n	800d018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf28:	6839      	ldr	r1, [r7, #0]
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fa98 	bl	800d460 <USBD_CtlError>
            err++;
 800cf30:	7afb      	ldrb	r3, [r7, #11]
 800cf32:	3301      	adds	r3, #1
 800cf34:	72fb      	strb	r3, [r7, #11]
          break;
 800cf36:	e06f      	b.n	800d018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00b      	beq.n	800cf5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	7c12      	ldrb	r2, [r2, #16]
 800cf50:	f107 0108 	add.w	r1, r7, #8
 800cf54:	4610      	mov	r0, r2
 800cf56:	4798      	blx	r3
 800cf58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf5a:	e05d      	b.n	800d018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf5c:	6839      	ldr	r1, [r7, #0]
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fa7e 	bl	800d460 <USBD_CtlError>
            err++;
 800cf64:	7afb      	ldrb	r3, [r7, #11]
 800cf66:	3301      	adds	r3, #1
 800cf68:	72fb      	strb	r3, [r7, #11]
          break;
 800cf6a:	e055      	b.n	800d018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00b      	beq.n	800cf90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	7c12      	ldrb	r2, [r2, #16]
 800cf84:	f107 0108 	add.w	r1, r7, #8
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4798      	blx	r3
 800cf8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf8e:	e043      	b.n	800d018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fa64 	bl	800d460 <USBD_CtlError>
            err++;
 800cf98:	7afb      	ldrb	r3, [r7, #11]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf9e:	e03b      	b.n	800d018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfa6:	695b      	ldr	r3, [r3, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00b      	beq.n	800cfc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	7c12      	ldrb	r2, [r2, #16]
 800cfb8:	f107 0108 	add.w	r1, r7, #8
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4798      	blx	r3
 800cfc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfc2:	e029      	b.n	800d018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fa4a 	bl	800d460 <USBD_CtlError>
            err++;
 800cfcc:	7afb      	ldrb	r3, [r7, #11]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfd2:	e021      	b.n	800d018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfda:	699b      	ldr	r3, [r3, #24]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00b      	beq.n	800cff8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	7c12      	ldrb	r2, [r2, #16]
 800cfec:	f107 0108 	add.w	r1, r7, #8
 800cff0:	4610      	mov	r0, r2
 800cff2:	4798      	blx	r3
 800cff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cff6:	e00f      	b.n	800d018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fa30 	bl	800d460 <USBD_CtlError>
            err++;
 800d000:	7afb      	ldrb	r3, [r7, #11]
 800d002:	3301      	adds	r3, #1
 800d004:	72fb      	strb	r3, [r7, #11]
          break;
 800d006:	e007      	b.n	800d018 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fa28 	bl	800d460 <USBD_CtlError>
          err++;
 800d010:	7afb      	ldrb	r3, [r7, #11]
 800d012:	3301      	adds	r3, #1
 800d014:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d016:	bf00      	nop
      }
      break;
 800d018:	e037      	b.n	800d08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	7c1b      	ldrb	r3, [r3, #16]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d109      	bne.n	800d036 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02a:	f107 0208 	add.w	r2, r7, #8
 800d02e:	4610      	mov	r0, r2
 800d030:	4798      	blx	r3
 800d032:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d034:	e029      	b.n	800d08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d036:	6839      	ldr	r1, [r7, #0]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fa11 	bl	800d460 <USBD_CtlError>
        err++;
 800d03e:	7afb      	ldrb	r3, [r7, #11]
 800d040:	3301      	adds	r3, #1
 800d042:	72fb      	strb	r3, [r7, #11]
      break;
 800d044:	e021      	b.n	800d08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7c1b      	ldrb	r3, [r3, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10d      	bne.n	800d06a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d056:	f107 0208 	add.w	r2, r7, #8
 800d05a:	4610      	mov	r0, r2
 800d05c:	4798      	blx	r3
 800d05e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	3301      	adds	r3, #1
 800d064:	2207      	movs	r2, #7
 800d066:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d068:	e00f      	b.n	800d08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d06a:	6839      	ldr	r1, [r7, #0]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f9f7 	bl	800d460 <USBD_CtlError>
        err++;
 800d072:	7afb      	ldrb	r3, [r7, #11]
 800d074:	3301      	adds	r3, #1
 800d076:	72fb      	strb	r3, [r7, #11]
      break;
 800d078:	e007      	b.n	800d08a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f9ef 	bl	800d460 <USBD_CtlError>
      err++;
 800d082:	7afb      	ldrb	r3, [r7, #11]
 800d084:	3301      	adds	r3, #1
 800d086:	72fb      	strb	r3, [r7, #11]
      break;
 800d088:	bf00      	nop
  }

  if (err != 0U)
 800d08a:	7afb      	ldrb	r3, [r7, #11]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d11e      	bne.n	800d0ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	88db      	ldrh	r3, [r3, #6]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d016      	beq.n	800d0c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d098:	893b      	ldrh	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00e      	beq.n	800d0bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	88da      	ldrh	r2, [r3, #6]
 800d0a2:	893b      	ldrh	r3, [r7, #8]
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	bf28      	it	cs
 800d0a8:	4613      	movcs	r3, r2
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0ae:	893b      	ldrh	r3, [r7, #8]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	68f9      	ldr	r1, [r7, #12]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fa44 	bl	800d542 <USBD_CtlSendData>
 800d0ba:	e009      	b.n	800d0d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f9ce 	bl	800d460 <USBD_CtlError>
 800d0c4:	e004      	b.n	800d0d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fa95 	bl	800d5f6 <USBD_CtlSendStatus>
 800d0cc:	e000      	b.n	800d0d0 <USBD_GetDescriptor+0x2cc>
    return;
 800d0ce:	bf00      	nop
  }
}
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop

0800d0d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	889b      	ldrh	r3, [r3, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d131      	bne.n	800d14e <USBD_SetAddress+0x76>
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	88db      	ldrh	r3, [r3, #6]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d12d      	bne.n	800d14e <USBD_SetAddress+0x76>
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	885b      	ldrh	r3, [r3, #2]
 800d0f6:	2b7f      	cmp	r3, #127	; 0x7f
 800d0f8:	d829      	bhi.n	800d14e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	885b      	ldrh	r3, [r3, #2]
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	2b03      	cmp	r3, #3
 800d110:	d104      	bne.n	800d11c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f9a3 	bl	800d460 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d11a:	e01d      	b.n	800d158 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	7bfa      	ldrb	r2, [r7, #15]
 800d120:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d124:	7bfb      	ldrb	r3, [r7, #15]
 800d126:	4619      	mov	r1, r3
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f003 fd2d 	bl	8010b88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fa61 	bl	800d5f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d004      	beq.n	800d144 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2202      	movs	r2, #2
 800d13e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d142:	e009      	b.n	800d158 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d14c:	e004      	b.n	800d158 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 f985 	bl	800d460 <USBD_CtlError>
  }
}
 800d156:	bf00      	nop
 800d158:	bf00      	nop
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	885b      	ldrh	r3, [r3, #2]
 800d172:	b2da      	uxtb	r2, r3
 800d174:	4b4c      	ldr	r3, [pc, #304]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d178:	4b4b      	ldr	r3, [pc, #300]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d905      	bls.n	800d18c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f96c 	bl	800d460 <USBD_CtlError>
    return USBD_FAIL;
 800d188:	2303      	movs	r3, #3
 800d18a:	e088      	b.n	800d29e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b02      	cmp	r3, #2
 800d196:	d002      	beq.n	800d19e <USBD_SetConfig+0x3e>
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d025      	beq.n	800d1e8 <USBD_SetConfig+0x88>
 800d19c:	e071      	b.n	800d282 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d19e:	4b42      	ldr	r3, [pc, #264]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d01c      	beq.n	800d1e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d1a6:	4b40      	ldr	r3, [pc, #256]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1b0:	4b3d      	ldr	r3, [pc, #244]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff f948 	bl	800c44c <USBD_SetClassConfig>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d004      	beq.n	800d1d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f949 	bl	800d460 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d1ce:	e065      	b.n	800d29c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fa10 	bl	800d5f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2203      	movs	r2, #3
 800d1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d1de:	e05d      	b.n	800d29c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fa08 	bl	800d5f6 <USBD_CtlSendStatus>
      break;
 800d1e6:	e059      	b.n	800d29c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d1e8:	4b2f      	ldr	r3, [pc, #188]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d112      	bne.n	800d216 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d1f8:	4b2b      	ldr	r3, [pc, #172]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d202:	4b29      	ldr	r3, [pc, #164]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	4619      	mov	r1, r3
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff f93b 	bl	800c484 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f9f1 	bl	800d5f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d214:	e042      	b.n	800d29c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d216:	4b24      	ldr	r3, [pc, #144]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	461a      	mov	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	429a      	cmp	r2, r3
 800d222:	d02a      	beq.n	800d27a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	4619      	mov	r1, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff f929 	bl	800c484 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d232:	4b1d      	ldr	r3, [pc, #116]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	461a      	mov	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d23c:	4b1a      	ldr	r3, [pc, #104]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff f902 	bl	800c44c <USBD_SetClassConfig>
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00f      	beq.n	800d272 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f903 	bl	800d460 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff f90e 	bl	800c484 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2202      	movs	r2, #2
 800d26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d270:	e014      	b.n	800d29c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f9bf 	bl	800d5f6 <USBD_CtlSendStatus>
      break;
 800d278:	e010      	b.n	800d29c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f9bb 	bl	800d5f6 <USBD_CtlSendStatus>
      break;
 800d280:	e00c      	b.n	800d29c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f8eb 	bl	800d460 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d28a:	4b07      	ldr	r3, [pc, #28]	; (800d2a8 <USBD_SetConfig+0x148>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	4619      	mov	r1, r3
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7ff f8f7 	bl	800c484 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d296:	2303      	movs	r3, #3
 800d298:	73fb      	strb	r3, [r7, #15]
      break;
 800d29a:	bf00      	nop
  }

  return ret;
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	2000036d 	.word	0x2000036d

0800d2ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	88db      	ldrh	r3, [r3, #6]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d004      	beq.n	800d2c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f8cd 	bl	800d460 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2c6:	e023      	b.n	800d310 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	dc02      	bgt.n	800d2da <USBD_GetConfig+0x2e>
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	dc03      	bgt.n	800d2e0 <USBD_GetConfig+0x34>
 800d2d8:	e015      	b.n	800d306 <USBD_GetConfig+0x5a>
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d00b      	beq.n	800d2f6 <USBD_GetConfig+0x4a>
 800d2de:	e012      	b.n	800d306 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3308      	adds	r3, #8
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f927 	bl	800d542 <USBD_CtlSendData>
        break;
 800d2f4:	e00c      	b.n	800d310 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f91f 	bl	800d542 <USBD_CtlSendData>
        break;
 800d304:	e004      	b.n	800d310 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f8a9 	bl	800d460 <USBD_CtlError>
        break;
 800d30e:	bf00      	nop
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	3b01      	subs	r3, #1
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d81e      	bhi.n	800d36e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	88db      	ldrh	r3, [r3, #6]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d004      	beq.n	800d342 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d338:	6839      	ldr	r1, [r7, #0]
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f890 	bl	800d460 <USBD_CtlError>
        break;
 800d340:	e01a      	b.n	800d378 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2201      	movs	r2, #1
 800d346:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d005      	beq.n	800d35e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	f043 0202 	orr.w	r2, r3, #2
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	330c      	adds	r3, #12
 800d362:	2202      	movs	r2, #2
 800d364:	4619      	mov	r1, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f8eb 	bl	800d542 <USBD_CtlSendData>
      break;
 800d36c:	e004      	b.n	800d378 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 f875 	bl	800d460 <USBD_CtlError>
      break;
 800d376:	bf00      	nop
  }
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	885b      	ldrh	r3, [r3, #2]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d106      	bne.n	800d3a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f92b 	bl	800d5f6 <USBD_CtlSendStatus>
  }
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d80b      	bhi.n	800d3d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	885b      	ldrh	r3, [r3, #2]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d10c      	bne.n	800d3e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f910 	bl	800d5f6 <USBD_CtlSendStatus>
      }
      break;
 800d3d6:	e004      	b.n	800d3e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 f840 	bl	800d460 <USBD_CtlError>
      break;
 800d3e0:	e000      	b.n	800d3e4 <USBD_ClrFeature+0x3c>
      break;
 800d3e2:	bf00      	nop
  }
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	781a      	ldrb	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	3301      	adds	r3, #1
 800d406:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	781a      	ldrb	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3301      	adds	r3, #1
 800d414:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f7ff fabb 	bl	800c992 <SWAPBYTE>
 800d41c:	4603      	mov	r3, r0
 800d41e:	461a      	mov	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	3301      	adds	r3, #1
 800d428:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	3301      	adds	r3, #1
 800d42e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7ff faae 	bl	800c992 <SWAPBYTE>
 800d436:	4603      	mov	r3, r0
 800d438:	461a      	mov	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	3301      	adds	r3, #1
 800d442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3301      	adds	r3, #1
 800d448:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7ff faa1 	bl	800c992 <SWAPBYTE>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	80da      	strh	r2, [r3, #6]
}
 800d458:	bf00      	nop
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d46a:	2180      	movs	r1, #128	; 0x80
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f003 fb21 	bl	8010ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d472:	2100      	movs	r1, #0
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f003 fb1d 	bl	8010ab4 <USBD_LL_StallEP>
}
 800d47a:	bf00      	nop
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b086      	sub	sp, #24
 800d486:	af00      	add	r7, sp, #0
 800d488:	60f8      	str	r0, [r7, #12]
 800d48a:	60b9      	str	r1, [r7, #8]
 800d48c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d48e:	2300      	movs	r3, #0
 800d490:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d036      	beq.n	800d506 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d49c:	6938      	ldr	r0, [r7, #16]
 800d49e:	f000 f836 	bl	800d50e <USBD_GetLen>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	7812      	ldrb	r2, [r2, #0]
 800d4ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d4c2:	7dfb      	ldrb	r3, [r7, #23]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	2203      	movs	r2, #3
 800d4ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d4d2:	e013      	b.n	800d4fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d4d4:	7dfb      	ldrb	r3, [r7, #23]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	4413      	add	r3, r2
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	7812      	ldrb	r2, [r2, #0]
 800d4de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	613b      	str	r3, [r7, #16]
    idx++;
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1e7      	bne.n	800d4d4 <USBD_GetString+0x52>
 800d504:	e000      	b.n	800d508 <USBD_GetString+0x86>
    return;
 800d506:	bf00      	nop
  }
}
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d50e:	b480      	push	{r7}
 800d510:	b085      	sub	sp, #20
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d51e:	e005      	b.n	800d52c <USBD_GetLen+0x1e>
  {
    len++;
 800d520:	7bfb      	ldrb	r3, [r7, #15]
 800d522:	3301      	adds	r3, #1
 800d524:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	3301      	adds	r3, #1
 800d52a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1f5      	bne.n	800d520 <USBD_GetLen+0x12>
  }

  return len;
 800d534:	7bfb      	ldrb	r3, [r7, #15]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b084      	sub	sp, #16
 800d546:	af00      	add	r7, sp, #0
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2202      	movs	r2, #2
 800d552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	2100      	movs	r1, #0
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f003 fb2c 	bl	8010bc6 <USBD_LL_Transmit>

  return USBD_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	2100      	movs	r1, #0
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f003 fb1b 	bl	8010bc6 <USBD_LL_Transmit>

  return USBD_OK;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b084      	sub	sp, #16
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2203      	movs	r2, #3
 800d5aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	2100      	movs	r1, #0
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f003 fb1f 	bl	8010c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	68ba      	ldr	r2, [r7, #8]
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f003 fb0e 	bl	8010c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2204      	movs	r2, #4
 800d602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d606:	2300      	movs	r3, #0
 800d608:	2200      	movs	r2, #0
 800d60a:	2100      	movs	r1, #0
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f003 fada 	bl	8010bc6 <USBD_LL_Transmit>

  return USBD_OK;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2205      	movs	r2, #5
 800d628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d62c:	2300      	movs	r3, #0
 800d62e:	2200      	movs	r2, #0
 800d630:	2100      	movs	r1, #0
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f003 fae8 	bl	8010c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d64e:	79fb      	ldrb	r3, [r7, #7]
 800d650:	4a08      	ldr	r2, [pc, #32]	; (800d674 <disk_status+0x30>)
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	4413      	add	r3, r2
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	79fa      	ldrb	r2, [r7, #7]
 800d65c:	4905      	ldr	r1, [pc, #20]	; (800d674 <disk_status+0x30>)
 800d65e:	440a      	add	r2, r1
 800d660:	7a12      	ldrb	r2, [r2, #8]
 800d662:	4610      	mov	r0, r2
 800d664:	4798      	blx	r3
 800d666:	4603      	mov	r3, r0
 800d668:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	20000398 	.word	0x20000398

0800d678 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4603      	mov	r3, r0
 800d680:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d682:	2300      	movs	r3, #0
 800d684:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d686:	79fb      	ldrb	r3, [r7, #7]
 800d688:	4a0d      	ldr	r2, [pc, #52]	; (800d6c0 <disk_initialize+0x48>)
 800d68a:	5cd3      	ldrb	r3, [r2, r3]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d111      	bne.n	800d6b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	4a0b      	ldr	r2, [pc, #44]	; (800d6c0 <disk_initialize+0x48>)
 800d694:	2101      	movs	r1, #1
 800d696:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d698:	79fb      	ldrb	r3, [r7, #7]
 800d69a:	4a09      	ldr	r2, [pc, #36]	; (800d6c0 <disk_initialize+0x48>)
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	79fa      	ldrb	r2, [r7, #7]
 800d6a6:	4906      	ldr	r1, [pc, #24]	; (800d6c0 <disk_initialize+0x48>)
 800d6a8:	440a      	add	r2, r1
 800d6aa:	7a12      	ldrb	r2, [r2, #8]
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	20000398 	.word	0x20000398

0800d6c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d6c4:	b590      	push	{r4, r7, lr}
 800d6c6:	b087      	sub	sp, #28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	607a      	str	r2, [r7, #4]
 800d6ce:	603b      	str	r3, [r7, #0]
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
 800d6d6:	4a0a      	ldr	r2, [pc, #40]	; (800d700 <disk_read+0x3c>)
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4413      	add	r3, r2
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	689c      	ldr	r4, [r3, #8]
 800d6e0:	7bfb      	ldrb	r3, [r7, #15]
 800d6e2:	4a07      	ldr	r2, [pc, #28]	; (800d700 <disk_read+0x3c>)
 800d6e4:	4413      	add	r3, r2
 800d6e6:	7a18      	ldrb	r0, [r3, #8]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	68b9      	ldr	r1, [r7, #8]
 800d6ee:	47a0      	blx	r4
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	371c      	adds	r7, #28
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd90      	pop	{r4, r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20000398 	.word	0x20000398

0800d704 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b087      	sub	sp, #28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60b9      	str	r1, [r7, #8]
 800d70c:	607a      	str	r2, [r7, #4]
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	4a0a      	ldr	r2, [pc, #40]	; (800d740 <disk_write+0x3c>)
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	68dc      	ldr	r4, [r3, #12]
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	4a07      	ldr	r2, [pc, #28]	; (800d740 <disk_write+0x3c>)
 800d724:	4413      	add	r3, r2
 800d726:	7a18      	ldrb	r0, [r3, #8]
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	68b9      	ldr	r1, [r7, #8]
 800d72e:	47a0      	blx	r4
 800d730:	4603      	mov	r3, r0
 800d732:	75fb      	strb	r3, [r7, #23]
  return res;
 800d734:	7dfb      	ldrb	r3, [r7, #23]
}
 800d736:	4618      	mov	r0, r3
 800d738:	371c      	adds	r7, #28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd90      	pop	{r4, r7, pc}
 800d73e:	bf00      	nop
 800d740:	20000398 	.word	0x20000398

0800d744 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3301      	adds	r3, #1
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d754:	89fb      	ldrh	r3, [r7, #14]
 800d756:	021b      	lsls	r3, r3, #8
 800d758:	b21a      	sxth	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	b21b      	sxth	r3, r3
 800d760:	4313      	orrs	r3, r2
 800d762:	b21b      	sxth	r3, r3
 800d764:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d766:	89fb      	ldrh	r3, [r7, #14]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3303      	adds	r3, #3
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	021b      	lsls	r3, r3, #8
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	3202      	adds	r2, #2
 800d78c:	7812      	ldrb	r2, [r2, #0]
 800d78e:	4313      	orrs	r3, r2
 800d790:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	021b      	lsls	r3, r3, #8
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	3201      	adds	r2, #1
 800d79a:	7812      	ldrb	r2, [r2, #0]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	021b      	lsls	r3, r3, #8
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	7812      	ldrb	r2, [r2, #0]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	60fb      	str	r3, [r7, #12]
	return rv;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
	...

0800d7bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60fb      	str	r3, [r7, #12]
 800d7c8:	e010      	b.n	800d7ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d7ca:	4a0d      	ldr	r2, [pc, #52]	; (800d800 <clear_lock+0x44>)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	011b      	lsls	r3, r3, #4
 800d7d0:	4413      	add	r3, r2
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d105      	bne.n	800d7e6 <clear_lock+0x2a>
 800d7da:	4a09      	ldr	r2, [pc, #36]	; (800d800 <clear_lock+0x44>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	011b      	lsls	r3, r3, #4
 800d7e0:	4413      	add	r3, r2
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d9eb      	bls.n	800d7ca <clear_lock+0xe>
	}
}
 800d7f2:	bf00      	nop
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	20000378 	.word	0x20000378

0800d804 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	78db      	ldrb	r3, [r3, #3]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d034      	beq.n	800d882 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	7858      	ldrb	r0, [r3, #1]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d828:	2301      	movs	r3, #1
 800d82a:	697a      	ldr	r2, [r7, #20]
 800d82c:	f7ff ff6a 	bl	800d704 <disk_write>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d002      	beq.n	800d83c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d836:	2301      	movs	r3, #1
 800d838:	73fb      	strb	r3, [r7, #15]
 800d83a:	e022      	b.n	800d882 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a1b      	ldr	r3, [r3, #32]
 800d846:	697a      	ldr	r2, [r7, #20]
 800d848:	1ad2      	subs	r2, r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d217      	bcs.n	800d882 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	789b      	ldrb	r3, [r3, #2]
 800d856:	613b      	str	r3, [r7, #16]
 800d858:	e010      	b.n	800d87c <sync_window+0x78>
					wsect += fs->fsize;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	4413      	add	r3, r2
 800d862:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	7858      	ldrb	r0, [r3, #1]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d86e:	2301      	movs	r3, #1
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	f7ff ff47 	bl	800d704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	3b01      	subs	r3, #1
 800d87a:	613b      	str	r3, [r7, #16]
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d8eb      	bhi.n	800d85a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d882:	7bfb      	ldrb	r3, [r7, #15]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d896:	2300      	movs	r3, #0
 800d898:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d01b      	beq.n	800d8dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ffad 	bl	800d804 <sync_window>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d113      	bne.n	800d8dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7858      	ldrb	r0, [r3, #1]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8be:	2301      	movs	r3, #1
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	f7ff feff 	bl	800d6c4 <disk_read>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d004      	beq.n	800d8d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b087      	sub	sp, #28
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d031      	beq.n	800d960 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	617b      	str	r3, [r7, #20]
 800d902:	e002      	b.n	800d90a <get_ldnumber+0x24>
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	3301      	adds	r3, #1
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b20      	cmp	r3, #32
 800d910:	d903      	bls.n	800d91a <get_ldnumber+0x34>
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b3a      	cmp	r3, #58	; 0x3a
 800d918:	d1f4      	bne.n	800d904 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	2b3a      	cmp	r3, #58	; 0x3a
 800d920:	d11c      	bne.n	800d95c <get_ldnumber+0x76>
			tp = *path;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	1c5a      	adds	r2, r3, #1
 800d92c:	60fa      	str	r2, [r7, #12]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	3b30      	subs	r3, #48	; 0x30
 800d932:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b09      	cmp	r3, #9
 800d938:	d80e      	bhi.n	800d958 <get_ldnumber+0x72>
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d10a      	bne.n	800d958 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d107      	bne.n	800d958 <get_ldnumber+0x72>
					vol = (int)i;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	3301      	adds	r3, #1
 800d950:	617b      	str	r3, [r7, #20]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	697a      	ldr	r2, [r7, #20]
 800d956:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	e002      	b.n	800d962 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d95c:	2300      	movs	r3, #0
 800d95e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d960:	693b      	ldr	r3, [r7, #16]
}
 800d962:	4618      	mov	r0, r3
 800d964:	371c      	adds	r7, #28
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
	...

0800d970 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	70da      	strb	r2, [r3, #3]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f04f 32ff 	mov.w	r2, #4294967295
 800d986:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d988:	6839      	ldr	r1, [r7, #0]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff ff7e 	bl	800d88c <move_window>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <check_fs+0x2a>
 800d996:	2304      	movs	r3, #4
 800d998:	e038      	b.n	800da0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	3330      	adds	r3, #48	; 0x30
 800d99e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff fece 	bl	800d744 <ld_word>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d001      	beq.n	800d9b8 <check_fs+0x48>
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	e029      	b.n	800da0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9be:	2be9      	cmp	r3, #233	; 0xe9
 800d9c0:	d009      	beq.n	800d9d6 <check_fs+0x66>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9c8:	2beb      	cmp	r3, #235	; 0xeb
 800d9ca:	d11e      	bne.n	800da0a <check_fs+0x9a>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d9d2:	2b90      	cmp	r3, #144	; 0x90
 800d9d4:	d119      	bne.n	800da0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	3330      	adds	r3, #48	; 0x30
 800d9da:	3336      	adds	r3, #54	; 0x36
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fec9 	bl	800d774 <ld_dword>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9e8:	4a0a      	ldr	r2, [pc, #40]	; (800da14 <check_fs+0xa4>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d101      	bne.n	800d9f2 <check_fs+0x82>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e00c      	b.n	800da0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	3330      	adds	r3, #48	; 0x30
 800d9f6:	3352      	adds	r3, #82	; 0x52
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7ff febb 	bl	800d774 <ld_dword>
 800d9fe:	4603      	mov	r3, r0
 800da00:	4a05      	ldr	r2, [pc, #20]	; (800da18 <check_fs+0xa8>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d101      	bne.n	800da0a <check_fs+0x9a>
 800da06:	2300      	movs	r3, #0
 800da08:	e000      	b.n	800da0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800da0a:	2302      	movs	r3, #2
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	00544146 	.word	0x00544146
 800da18:	33544146 	.word	0x33544146

0800da1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b096      	sub	sp, #88	; 0x58
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	4613      	mov	r3, r2
 800da28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2200      	movs	r2, #0
 800da2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f7ff ff58 	bl	800d8e6 <get_ldnumber>
 800da36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800da38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	da01      	bge.n	800da42 <find_volume+0x26>
 800da3e:	230b      	movs	r3, #11
 800da40:	e22e      	b.n	800dea0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800da42:	4aa8      	ldr	r2, [pc, #672]	; (800dce4 <find_volume+0x2c8>)
 800da44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d101      	bne.n	800da56 <find_volume+0x3a>
 800da52:	230c      	movs	r3, #12
 800da54:	e224      	b.n	800dea0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800da5c:	79fb      	ldrb	r3, [r7, #7]
 800da5e:	f023 0301 	bic.w	r3, r3, #1
 800da62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d01a      	beq.n	800daa2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	785b      	ldrb	r3, [r3, #1]
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff fde7 	bl	800d644 <disk_status>
 800da76:	4603      	mov	r3, r0
 800da78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800da7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da80:	f003 0301 	and.w	r3, r3, #1
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10c      	bne.n	800daa2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800da88:	79fb      	ldrb	r3, [r7, #7]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d007      	beq.n	800da9e <find_volume+0x82>
 800da8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da92:	f003 0304 	and.w	r3, r3, #4
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800da9a:	230a      	movs	r3, #10
 800da9c:	e200      	b.n	800dea0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800da9e:	2300      	movs	r3, #0
 800daa0:	e1fe      	b.n	800dea0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	2200      	movs	r2, #0
 800daa6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800daa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	785b      	ldrb	r3, [r3, #1]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7ff fddf 	bl	800d678 <disk_initialize>
 800daba:	4603      	mov	r3, r0
 800dabc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dac4:	f003 0301 	and.w	r3, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dacc:	2303      	movs	r3, #3
 800dace:	e1e7      	b.n	800dea0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d007      	beq.n	800dae6 <find_volume+0xca>
 800dad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dada:	f003 0304 	and.w	r3, r3, #4
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dae2:	230a      	movs	r3, #10
 800dae4:	e1dc      	b.n	800dea0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800daea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800daec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daee:	f7ff ff3f 	bl	800d970 <check_fs>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800daf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d14b      	bne.n	800db98 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db00:	2300      	movs	r3, #0
 800db02:	643b      	str	r3, [r7, #64]	; 0x40
 800db04:	e01f      	b.n	800db46 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800db06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db14:	4413      	add	r3, r2
 800db16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800db18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1a:	3304      	adds	r3, #4
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d006      	beq.n	800db30 <find_volume+0x114>
 800db22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db24:	3308      	adds	r3, #8
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fe24 	bl	800d774 <ld_dword>
 800db2c:	4602      	mov	r2, r0
 800db2e:	e000      	b.n	800db32 <find_volume+0x116>
 800db30:	2200      	movs	r2, #0
 800db32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800db3a:	440b      	add	r3, r1
 800db3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db42:	3301      	adds	r3, #1
 800db44:	643b      	str	r3, [r7, #64]	; 0x40
 800db46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d9dc      	bls.n	800db06 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800db4c:	2300      	movs	r3, #0
 800db4e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800db50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db52:	2b00      	cmp	r3, #0
 800db54:	d002      	beq.n	800db5c <find_volume+0x140>
 800db56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db58:	3b01      	subs	r3, #1
 800db5a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800db5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800db64:	4413      	add	r3, r2
 800db66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800db6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800db6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d005      	beq.n	800db7e <find_volume+0x162>
 800db72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db76:	f7ff fefb 	bl	800d970 <check_fs>
 800db7a:	4603      	mov	r3, r0
 800db7c:	e000      	b.n	800db80 <find_volume+0x164>
 800db7e:	2303      	movs	r3, #3
 800db80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800db84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d905      	bls.n	800db98 <find_volume+0x17c>
 800db8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db8e:	3301      	adds	r3, #1
 800db90:	643b      	str	r3, [r7, #64]	; 0x40
 800db92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db94:	2b03      	cmp	r3, #3
 800db96:	d9e1      	bls.n	800db5c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800db98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db9c:	2b04      	cmp	r3, #4
 800db9e:	d101      	bne.n	800dba4 <find_volume+0x188>
 800dba0:	2301      	movs	r3, #1
 800dba2:	e17d      	b.n	800dea0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d901      	bls.n	800dbb0 <find_volume+0x194>
 800dbac:	230d      	movs	r3, #13
 800dbae:	e177      	b.n	800dea0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	3330      	adds	r3, #48	; 0x30
 800dbb4:	330b      	adds	r3, #11
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff fdc4 	bl	800d744 <ld_word>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbc2:	d001      	beq.n	800dbc8 <find_volume+0x1ac>
 800dbc4:	230d      	movs	r3, #13
 800dbc6:	e16b      	b.n	800dea0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbca:	3330      	adds	r3, #48	; 0x30
 800dbcc:	3316      	adds	r3, #22
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff fdb8 	bl	800d744 <ld_word>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <find_volume+0x1d0>
 800dbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe0:	3330      	adds	r3, #48	; 0x30
 800dbe2:	3324      	adds	r3, #36	; 0x24
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff fdc5 	bl	800d774 <ld_dword>
 800dbea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbf0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfe:	789b      	ldrb	r3, [r3, #2]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d005      	beq.n	800dc10 <find_volume+0x1f4>
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	789b      	ldrb	r3, [r3, #2]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d001      	beq.n	800dc10 <find_volume+0x1f4>
 800dc0c:	230d      	movs	r3, #13
 800dc0e:	e147      	b.n	800dea0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	789b      	ldrb	r3, [r3, #2]
 800dc14:	461a      	mov	r2, r3
 800dc16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc18:	fb02 f303 	mul.w	r3, r2, r3
 800dc1c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	895b      	ldrh	r3, [r3, #10]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d008      	beq.n	800dc44 <find_volume+0x228>
 800dc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc34:	895b      	ldrh	r3, [r3, #10]
 800dc36:	461a      	mov	r2, r3
 800dc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3a:	895b      	ldrh	r3, [r3, #10]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	4013      	ands	r3, r2
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d001      	beq.n	800dc48 <find_volume+0x22c>
 800dc44:	230d      	movs	r3, #13
 800dc46:	e12b      	b.n	800dea0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	3330      	adds	r3, #48	; 0x30
 800dc4c:	3311      	adds	r3, #17
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fd78 	bl	800d744 <ld_word>
 800dc54:	4603      	mov	r3, r0
 800dc56:	461a      	mov	r2, r3
 800dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	891b      	ldrh	r3, [r3, #8]
 800dc60:	f003 030f 	and.w	r3, r3, #15
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <find_volume+0x252>
 800dc6a:	230d      	movs	r3, #13
 800dc6c:	e118      	b.n	800dea0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc70:	3330      	adds	r3, #48	; 0x30
 800dc72:	3313      	adds	r3, #19
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff fd65 	bl	800d744 <ld_word>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d106      	bne.n	800dc92 <find_volume+0x276>
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	3330      	adds	r3, #48	; 0x30
 800dc88:	3320      	adds	r3, #32
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff fd72 	bl	800d774 <ld_dword>
 800dc90:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	3330      	adds	r3, #48	; 0x30
 800dc96:	330e      	adds	r3, #14
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff fd53 	bl	800d744 <ld_word>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dca2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <find_volume+0x290>
 800dca8:	230d      	movs	r3, #13
 800dcaa:	e0f9      	b.n	800dea0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dcac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dcae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb0:	4413      	add	r3, r2
 800dcb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcb4:	8912      	ldrh	r2, [r2, #8]
 800dcb6:	0912      	lsrs	r2, r2, #4
 800dcb8:	b292      	uxth	r2, r2
 800dcba:	4413      	add	r3, r2
 800dcbc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dcbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d201      	bcs.n	800dcca <find_volume+0x2ae>
 800dcc6:	230d      	movs	r3, #13
 800dcc8:	e0ea      	b.n	800dea0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dcca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcd2:	8952      	ldrh	r2, [r2, #10]
 800dcd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcd8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d103      	bne.n	800dce8 <find_volume+0x2cc>
 800dce0:	230d      	movs	r3, #13
 800dce2:	e0dd      	b.n	800dea0 <find_volume+0x484>
 800dce4:	20000370 	.word	0x20000370
		fmt = FS_FAT32;
 800dce8:	2303      	movs	r3, #3
 800dcea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d802      	bhi.n	800dcfe <find_volume+0x2e2>
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d802      	bhi.n	800dd0e <find_volume+0x2f2>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	1c9a      	adds	r2, r3, #2
 800dd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd14:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd1a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dd1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd20:	441a      	add	r2, r3
 800dd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd24:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dd26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	441a      	add	r2, r3
 800dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800dd30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	d11e      	bne.n	800dd76 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	3330      	adds	r3, #48	; 0x30
 800dd3c:	332a      	adds	r3, #42	; 0x2a
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff fd00 	bl	800d744 <ld_word>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <find_volume+0x332>
 800dd4a:	230d      	movs	r3, #13
 800dd4c:	e0a8      	b.n	800dea0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd50:	891b      	ldrh	r3, [r3, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <find_volume+0x33e>
 800dd56:	230d      	movs	r3, #13
 800dd58:	e0a2      	b.n	800dea0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5c:	3330      	adds	r3, #48	; 0x30
 800dd5e:	332c      	adds	r3, #44	; 0x2c
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff fd07 	bl	800d774 <ld_dword>
 800dd66:	4602      	mov	r2, r0
 800dd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	647b      	str	r3, [r7, #68]	; 0x44
 800dd74:	e01f      	b.n	800ddb6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	891b      	ldrh	r3, [r3, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d101      	bne.n	800dd82 <find_volume+0x366>
 800dd7e:	230d      	movs	r3, #13
 800dd80:	e08e      	b.n	800dea0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd84:	6a1a      	ldr	r2, [r3, #32]
 800dd86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd88:	441a      	add	r2, r3
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dd8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d103      	bne.n	800dd9e <find_volume+0x382>
 800dd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	e00a      	b.n	800ddb4 <find_volume+0x398>
 800dd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda0:	695a      	ldr	r2, [r3, #20]
 800dda2:	4613      	mov	r3, r2
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	4413      	add	r3, r2
 800dda8:	085a      	lsrs	r2, r3, #1
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddac:	695b      	ldr	r3, [r3, #20]
 800ddae:	f003 0301 	and.w	r3, r3, #1
 800ddb2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ddb4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb8:	699a      	ldr	r2, [r3, #24]
 800ddba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddbc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ddc0:	0a5b      	lsrs	r3, r3, #9
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d201      	bcs.n	800ddca <find_volume+0x3ae>
 800ddc6:	230d      	movs	r3, #13
 800ddc8:	e06a      	b.n	800dea0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd0:	611a      	str	r2, [r3, #16]
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd4:	691a      	ldr	r2, [r3, #16]
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ddda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dddc:	2280      	movs	r2, #128	; 0x80
 800ddde:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dde0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	d149      	bne.n	800de7c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddea:	3330      	adds	r3, #48	; 0x30
 800ddec:	3330      	adds	r3, #48	; 0x30
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff fca8 	bl	800d744 <ld_word>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d140      	bne.n	800de7c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ddfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	4619      	mov	r1, r3
 800de00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de02:	f7ff fd43 	bl	800d88c <move_window>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d137      	bne.n	800de7c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	2200      	movs	r2, #0
 800de10:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800de12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de14:	3330      	adds	r3, #48	; 0x30
 800de16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7ff fc92 	bl	800d744 <ld_word>
 800de20:	4603      	mov	r3, r0
 800de22:	461a      	mov	r2, r3
 800de24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de28:	429a      	cmp	r2, r3
 800de2a:	d127      	bne.n	800de7c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	3330      	adds	r3, #48	; 0x30
 800de30:	4618      	mov	r0, r3
 800de32:	f7ff fc9f 	bl	800d774 <ld_dword>
 800de36:	4603      	mov	r3, r0
 800de38:	4a1b      	ldr	r2, [pc, #108]	; (800dea8 <find_volume+0x48c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d11e      	bne.n	800de7c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800de3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de40:	3330      	adds	r3, #48	; 0x30
 800de42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff fc94 	bl	800d774 <ld_dword>
 800de4c:	4603      	mov	r3, r0
 800de4e:	4a17      	ldr	r2, [pc, #92]	; (800deac <find_volume+0x490>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d113      	bne.n	800de7c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	3330      	adds	r3, #48	; 0x30
 800de58:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7ff fc89 	bl	800d774 <ld_dword>
 800de62:	4602      	mov	r2, r0
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800de68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6a:	3330      	adds	r3, #48	; 0x30
 800de6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800de70:	4618      	mov	r0, r3
 800de72:	f7ff fc7f 	bl	800d774 <ld_dword>
 800de76:	4602      	mov	r2, r0
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800de7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800de82:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <find_volume+0x494>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	3301      	adds	r3, #1
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	4b08      	ldr	r3, [pc, #32]	; (800deb0 <find_volume+0x494>)
 800de8e:	801a      	strh	r2, [r3, #0]
 800de90:	4b07      	ldr	r3, [pc, #28]	; (800deb0 <find_volume+0x494>)
 800de92:	881a      	ldrh	r2, [r3, #0]
 800de94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de96:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800de98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de9a:	f7ff fc8f 	bl	800d7bc <clear_lock>
#endif
	return FR_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3758      	adds	r7, #88	; 0x58
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	41615252 	.word	0x41615252
 800deac:	61417272 	.word	0x61417272
 800deb0:	20000374 	.word	0x20000374

0800deb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b088      	sub	sp, #32
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	4613      	mov	r3, r2
 800dec0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dec6:	f107 0310 	add.w	r3, r7, #16
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff fd0b 	bl	800d8e6 <get_ldnumber>
 800ded0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	da01      	bge.n	800dedc <f_mount+0x28>
 800ded8:	230b      	movs	r3, #11
 800deda:	e02b      	b.n	800df34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dedc:	4a17      	ldr	r2, [pc, #92]	; (800df3c <f_mount+0x88>)
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d005      	beq.n	800def8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800deec:	69b8      	ldr	r0, [r7, #24]
 800deee:	f7ff fc65 	bl	800d7bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	2200      	movs	r2, #0
 800def6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d002      	beq.n	800df04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	490d      	ldr	r1, [pc, #52]	; (800df3c <f_mount+0x88>)
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <f_mount+0x66>
 800df14:	79fb      	ldrb	r3, [r7, #7]
 800df16:	2b01      	cmp	r3, #1
 800df18:	d001      	beq.n	800df1e <f_mount+0x6a>
 800df1a:	2300      	movs	r3, #0
 800df1c:	e00a      	b.n	800df34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800df1e:	f107 010c 	add.w	r1, r7, #12
 800df22:	f107 0308 	add.w	r3, r7, #8
 800df26:	2200      	movs	r2, #0
 800df28:	4618      	mov	r0, r3
 800df2a:	f7ff fd77 	bl	800da1c <find_volume>
 800df2e:	4603      	mov	r3, r0
 800df30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800df32:	7dfb      	ldrb	r3, [r7, #23]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3720      	adds	r7, #32
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20000370 	.word	0x20000370

0800df40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df40:	b480      	push	{r7}
 800df42:	b087      	sub	sp, #28
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	4613      	mov	r3, r2
 800df4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df4e:	2301      	movs	r3, #1
 800df50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df56:	4b1f      	ldr	r3, [pc, #124]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df58:	7a5b      	ldrb	r3, [r3, #9]
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d131      	bne.n	800dfc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df60:	4b1c      	ldr	r3, [pc, #112]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df62:	7a5b      	ldrb	r3, [r3, #9]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	461a      	mov	r2, r3
 800df68:	4b1a      	ldr	r3, [pc, #104]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df6a:	2100      	movs	r1, #0
 800df6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df6e:	4b19      	ldr	r3, [pc, #100]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df70:	7a5b      	ldrb	r3, [r3, #9]
 800df72:	b2db      	uxtb	r3, r3
 800df74:	4a17      	ldr	r2, [pc, #92]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df7e:	4b15      	ldr	r3, [pc, #84]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df80:	7a5b      	ldrb	r3, [r3, #9]
 800df82:	b2db      	uxtb	r3, r3
 800df84:	461a      	mov	r2, r3
 800df86:	4b13      	ldr	r3, [pc, #76]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df88:	4413      	add	r3, r2
 800df8a:	79fa      	ldrb	r2, [r7, #7]
 800df8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df8e:	4b11      	ldr	r3, [pc, #68]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df90:	7a5b      	ldrb	r3, [r3, #9]
 800df92:	b2db      	uxtb	r3, r3
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	b2d1      	uxtb	r1, r2
 800df98:	4a0e      	ldr	r2, [pc, #56]	; (800dfd4 <FATFS_LinkDriverEx+0x94>)
 800df9a:	7251      	strb	r1, [r2, #9]
 800df9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df9e:	7dbb      	ldrb	r3, [r7, #22]
 800dfa0:	3330      	adds	r3, #48	; 0x30
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	223a      	movs	r2, #58	; 0x3a
 800dfae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	3302      	adds	r3, #2
 800dfb4:	222f      	movs	r2, #47	; 0x2f
 800dfb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	3303      	adds	r3, #3
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	371c      	adds	r7, #28
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20000398 	.word	0x20000398

0800dfd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	6839      	ldr	r1, [r7, #0]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff ffaa 	bl	800df40 <FATFS_LinkDriverEx>
 800dfec:	4603      	mov	r3, r0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
	...

0800dff8 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
	switch(kApplicationBase.eApplicationState)
 800dffc:	4b24      	ldr	r3, [pc, #144]	; (800e090 <ApplicationPerform+0x98>)
 800dffe:	7e5b      	ldrb	r3, [r3, #25]
 800e000:	b2db      	uxtb	r3, r3
 800e002:	2b03      	cmp	r3, #3
 800e004:	d83c      	bhi.n	800e080 <ApplicationPerform+0x88>
 800e006:	a201      	add	r2, pc, #4	; (adr r2, 800e00c <ApplicationPerform+0x14>)
 800e008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00c:	0800e01d 	.word	0x0800e01d
 800e010:	0800e037 	.word	0x0800e037
 800e014:	0800e07b 	.word	0x0800e07b
 800e018:	0800e089 	.word	0x0800e089
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800e01c:	2000      	movs	r0, #0
 800e01e:	f7f2 ff97 	bl	8000f50 <OperateLED_A>
		kApplicationBase.phSynchronousEventTimer = HandlesAssigner_GetHandle(eHandle_TIM2);
 800e022:	2000      	movs	r0, #0
 800e024:	f000 fc56 	bl	800e8d4 <HandlesAssigner_GetHandle>
 800e028:	4603      	mov	r3, r0
 800e02a:	4a19      	ldr	r2, [pc, #100]	; (800e090 <ApplicationPerform+0x98>)
 800e02c:	61d3      	str	r3, [r2, #28]
		AppStateChangeRequest(eApp_Initialization);
 800e02e:	2001      	movs	r0, #1
 800e030:	f000 f8d0 	bl	800e1d4 <AppStateChangeRequest>
		break;
 800e034:	e029      	b.n	800e08a <ApplicationPerform+0x92>

	case eApp_Initialization:
		TurnAllSensorOn();
 800e036:	f7f3 f813 	bl	8001060 <TurnAllSensorOn>
		SensorArray_Init();
 800e03a:	f7fd fbf7 	bl	800b82c <SensorArray_Init>
		USB_InitalizeTransmitterLogic();
 800e03e:	f001 f80b 	bl	800f058 <USB_InitalizeTransmitterLogic>
		AppEnableResetTaskTimers();
 800e042:	f000 f913 	bl	800e26c <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800e046:	f000 fe11 	bl	800ec6c <TempCollect_Initialize>
		DataHandler_Initialize();
 800e04a:	f000 f955 	bl	800e2f8 <DataHandler_Initialize>
		CommManager_Initialize();
 800e04e:	f000 feb5 	bl	800edbc <CommManager_Initialize>
		EventSystem_Initialize();
 800e052:	f000 fb77 	bl	800e744 <EventSystem_Initialize>
		SignalProcessing_Initialize((uint8_t)dMemoryWidth);
 800e056:	2010      	movs	r0, #16
 800e058:	f001 f886 	bl	800f168 <SignalProcessing_Initialize>
		TurnOnSynchronousEvent();
 800e05c:	f000 f940 	bl	800e2e0 <TurnOnSynchronousEvent>
		kCardResult = f_mount(&SDFatFS, (TCHAR const*)SDPath ,1);
 800e060:	2201      	movs	r2, #1
 800e062:	490c      	ldr	r1, [pc, #48]	; (800e094 <ApplicationPerform+0x9c>)
 800e064:	480c      	ldr	r0, [pc, #48]	; (800e098 <ApplicationPerform+0xa0>)
 800e066:	f7ff ff25 	bl	800deb4 <f_mount>
 800e06a:	4603      	mov	r3, r0
 800e06c:	461a      	mov	r2, r3
 800e06e:	4b0b      	ldr	r3, [pc, #44]	; (800e09c <ApplicationPerform+0xa4>)
 800e070:	701a      	strb	r2, [r3, #0]
//		kCardResult = f_open(&SDFile, "Test_3.txt", FA_CREATE_ALWAYS | FA_WRITE );
		AppStateChangeRequest(eApp_Perform);
 800e072:	2002      	movs	r0, #2
 800e074:	f000 f8ae 	bl	800e1d4 <AppStateChangeRequest>
		break;
 800e078:	e007      	b.n	800e08a <ApplicationPerform+0x92>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800e07a:	f000 f87b 	bl	800e174 <AsynchronousTaskScheduler>
		break;
 800e07e:	e004      	b.n	800e08a <ApplicationPerform+0x92>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800e080:	2010      	movs	r0, #16
 800e082:	f000 f91b 	bl	800e2bc <AssertError>
		break;
 800e086:	e000      	b.n	800e08a <ApplicationPerform+0x92>
		break;
 800e088:	bf00      	nop
	}

}
 800e08a:	bf00      	nop
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	200003a4 	.word	0x200003a4
 800e094:	20001970 	.word	0x20001970
 800e098:	20001ba4 	.word	0x20001ba4
 800e09c:	200003c4 	.word	0x200003c4

0800e0a0 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800e0a4:	4b20      	ldr	r3, [pc, #128]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d006      	beq.n	800e0bc <AsynchronousTaskTimerUpdate+0x1c>
	{
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800e0ae:	4b1e      	ldr	r3, [pc, #120]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0b0:	885b      	ldrh	r3, [r3, #2]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	4b1b      	ldr	r3, [pc, #108]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0ba:	805a      	strh	r2, [r3, #2]
	}
	if(kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800e0bc:	4b1a      	ldr	r3, [pc, #104]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0be:	791b      	ldrb	r3, [r3, #4]
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d006      	beq.n	800e0d4 <AsynchronousTaskTimerUpdate+0x34>
	{
		kApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800e0c6:	4b18      	ldr	r3, [pc, #96]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0c8:	88db      	ldrh	r3, [r3, #6]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	4b15      	ldr	r3, [pc, #84]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0d2:	80da      	strh	r2, [r3, #6]
	}
	if(kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800e0d4:	4b14      	ldr	r3, [pc, #80]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0d6:	7a1b      	ldrb	r3, [r3, #8]
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d006      	beq.n	800e0ec <AsynchronousTaskTimerUpdate+0x4c>
	{
		kApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800e0de:	4b12      	ldr	r3, [pc, #72]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0e0:	895b      	ldrh	r3, [r3, #10]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	4b0f      	ldr	r3, [pc, #60]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0ea:	815a      	strh	r2, [r3, #10]
	}
	if(kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800e0ec:	4b0e      	ldr	r3, [pc, #56]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0ee:	7b1b      	ldrb	r3, [r3, #12]
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d006      	beq.n	800e104 <AsynchronousTaskTimerUpdate+0x64>
	{
		kApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800e0f6:	4b0c      	ldr	r3, [pc, #48]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e0f8:	89db      	ldrh	r3, [r3, #14]
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	4b09      	ldr	r3, [pc, #36]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e102:	81da      	strh	r2, [r3, #14]
	}
	if(kApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800e104:	4b08      	ldr	r3, [pc, #32]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e106:	7c1b      	ldrb	r3, [r3, #16]
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d006      	beq.n	800e11c <AsynchronousTaskTimerUpdate+0x7c>
	{
		kApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800e10e:	4b06      	ldr	r3, [pc, #24]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e110:	8a5b      	ldrh	r3, [r3, #18]
 800e112:	b29b      	uxth	r3, r3
 800e114:	3301      	adds	r3, #1
 800e116:	b29a      	uxth	r2, r3
 800e118:	4b03      	ldr	r3, [pc, #12]	; (800e128 <AsynchronousTaskTimerUpdate+0x88>)
 800e11a:	825a      	strh	r2, [r3, #18]
	}

}
 800e11c:	bf00      	nop
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	200003a4 	.word	0x200003a4

0800e12c <AsynchronousTask_1ms>:

/* Internal functions */

void AsynchronousTask_1ms()
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	af00      	add	r7, sp, #0
	 * 10 us with no frame assembly,
	 * 70 us with frame assembly
	 *
	 * two functions (22.12.2201): EventSystem and CommManager
	 */
	EventSystem_HandleEvent();
 800e130:	f000 fb14 	bl	800e75c <EventSystem_HandleEvent>
	CommManager_Operate();
 800e134:	f000 fe4e 	bl	800edd4 <CommManager_Operate>
}
 800e138:	bf00      	nop
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <AsynchronousTask_10ms>:

void AsynchronousTask_10ms()
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	af00      	add	r7, sp, #0
	 * 5-10 us with no communication
	 * 1-9 us with communication
	 *
	 * one function (22.12.2201): TempCollect
	 */
	TempCollect_Operate();
 800e140:	f000 fc20 	bl	800e984 <TempCollect_Operate>
}
 800e144:	bf00      	nop
 800e146:	bd80      	pop	{r7, pc}

0800e148 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	af00      	add	r7, sp, #0
	 * 8-11 us with no communication
	 * same with communication
	 *
	 * two functions (22.12.2201): USB_Check and DataHandler
	 */
	USB_CheckForUSBConnection();
 800e14c:	f000 ffb4 	bl	800f0b8 <USB_CheckForUSBConnection>
	DataHandler_Operate();
 800e150:	f000 fa2a 	bl	800e5a8 <DataHandler_Operate>
}
 800e154:	bf00      	nop
 800e156:	bd80      	pop	{r7, pc}

0800e158 <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	af00      	add	r7, sp, #0
	 * 999 ms without communication
	 * same with communication
	 *
	 * Measured 22.12.2021
	 */
	ToggleLED_B();
 800e15c:	f7f2 ff30 	bl	8000fc0 <ToggleLED_B>



	if(u8WriteCounter++ > 1)
 800e160:	4b03      	ldr	r3, [pc, #12]	; (800e170 <AsynchronousTask_1000ms+0x18>)
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	b2da      	uxtb	r2, r3
 800e168:	4b01      	ldr	r3, [pc, #4]	; (800e170 <AsynchronousTask_1000ms+0x18>)
 800e16a:	701a      	strb	r2, [r3, #0]
	{
//		kCardResult = f_write(&SDFile, &cDataToBeWritten, 10, &kWordCount);
	}


}
 800e16c:	bf00      	nop
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	200003c5 	.word	0x200003c5

0800e174 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800e174:	b580      	push	{r7, lr}
 800e176:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800e178:	4b15      	ldr	r3, [pc, #84]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e17a:	885b      	ldrh	r3, [r3, #2]
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e182:	d304      	bcc.n	800e18e <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800e184:	f7ff ffe8 	bl	800e158 <AsynchronousTask_1000ms>
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800e188:	4b11      	ldr	r3, [pc, #68]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	805a      	strh	r2, [r3, #2]
	}

	if(kApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800e18e:	4b10      	ldr	r3, [pc, #64]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e190:	88db      	ldrh	r3, [r3, #6]
 800e192:	b29b      	uxth	r3, r3
 800e194:	2b63      	cmp	r3, #99	; 0x63
 800e196:	d904      	bls.n	800e1a2 <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800e198:	f7ff ffd6 	bl	800e148 <AsynchronousTask_100ms>
		kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800e19c:	4b0c      	ldr	r3, [pc, #48]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	80da      	strh	r2, [r3, #6]
	}

	if(kApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800e1a2:	4b0b      	ldr	r3, [pc, #44]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e1a4:	895b      	ldrh	r3, [r3, #10]
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	2b09      	cmp	r3, #9
 800e1aa:	d904      	bls.n	800e1b6 <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800e1ac:	f7ff ffc6 	bl	800e13c <AsynchronousTask_10ms>
		kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	815a      	strh	r2, [r3, #10]
	}

 	if(kApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800e1b6:	4b06      	ldr	r3, [pc, #24]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e1b8:	89db      	ldrh	r3, [r3, #14]
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d004      	beq.n	800e1ca <AsynchronousTaskScheduler+0x56>
	{
		AsynchronousTask_1ms();
 800e1c0:	f7ff ffb4 	bl	800e12c <AsynchronousTask_1ms>
		kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800e1c4:	4b02      	ldr	r3, [pc, #8]	; (800e1d0 <AsynchronousTaskScheduler+0x5c>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	81da      	strh	r2, [r3, #14]
	}

}
 800e1ca:	bf00      	nop
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	200003a4 	.word	0x200003a4

0800e1d4 <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	71fb      	strb	r3, [r7, #7]
	switch(kApplicationBase.eApplicationState)
 800e1de:	4b22      	ldr	r3, [pc, #136]	; (800e268 <AppStateChangeRequest+0x94>)
 800e1e0:	7e5b      	ldrb	r3, [r3, #25]
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d837      	bhi.n	800e258 <AppStateChangeRequest+0x84>
 800e1e8:	a201      	add	r2, pc, #4	; (adr r2, 800e1f0 <AppStateChangeRequest+0x1c>)
 800e1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ee:	bf00      	nop
 800e1f0:	0800e201 	.word	0x0800e201
 800e1f4:	0800e217 	.word	0x0800e217
 800e1f8:	0800e22d 	.word	0x0800e22d
 800e1fc:	0800e251 	.word	0x0800e251
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d103      	bne.n	800e20e <AppStateChangeRequest+0x3a>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800e206:	4b18      	ldr	r3, [pc, #96]	; (800e268 <AppStateChangeRequest+0x94>)
 800e208:	2201      	movs	r2, #1
 800e20a:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800e20c:	e028      	b.n	800e260 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800e20e:	2020      	movs	r0, #32
 800e210:	f000 f854 	bl	800e2bc <AssertError>
		break;
 800e214:	e024      	b.n	800e260 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800e216:	79fb      	ldrb	r3, [r7, #7]
 800e218:	2b02      	cmp	r3, #2
 800e21a:	d103      	bne.n	800e224 <AppStateChangeRequest+0x50>
		{
			kApplicationBase.eApplicationState = eApp_Perform;
 800e21c:	4b12      	ldr	r3, [pc, #72]	; (800e268 <AppStateChangeRequest+0x94>)
 800e21e:	2202      	movs	r2, #2
 800e220:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800e222:	e01d      	b.n	800e260 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800e224:	2020      	movs	r0, #32
 800e226:	f000 f849 	bl	800e2bc <AssertError>
		break;
 800e22a:	e019      	b.n	800e260 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d103      	bne.n	800e23a <AppStateChangeRequest+0x66>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800e232:	4b0d      	ldr	r3, [pc, #52]	; (800e268 <AppStateChangeRequest+0x94>)
 800e234:	2201      	movs	r2, #1
 800e236:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800e238:	e012      	b.n	800e260 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	2b03      	cmp	r3, #3
 800e23e:	d103      	bne.n	800e248 <AppStateChangeRequest+0x74>
			kApplicationBase.eApplicationState = eApp_Shutdown;
 800e240:	4b09      	ldr	r3, [pc, #36]	; (800e268 <AppStateChangeRequest+0x94>)
 800e242:	2203      	movs	r2, #3
 800e244:	765a      	strb	r2, [r3, #25]
		break;
 800e246:	e00b      	b.n	800e260 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800e248:	2020      	movs	r0, #32
 800e24a:	f000 f837 	bl	800e2bc <AssertError>
		break;
 800e24e:	e007      	b.n	800e260 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800e250:	2020      	movs	r0, #32
 800e252:	f000 f833 	bl	800e2bc <AssertError>
		break;
 800e256:	e003      	b.n	800e260 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800e258:	2020      	movs	r0, #32
 800e25a:	f000 f82f 	bl	800e2bc <AssertError>
		break;
 800e25e:	bf00      	nop
	}

}
 800e260:	bf00      	nop
 800e262:	3708      	adds	r7, #8
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	200003a4 	.word	0x200003a4

0800e26c <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800e26c:	b480      	push	{r7}
 800e26e:	af00      	add	r7, sp, #0
	kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800e270:	4b11      	ldr	r3, [pc, #68]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e272:	2201      	movs	r2, #1
 800e274:	701a      	strb	r2, [r3, #0]
	kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800e276:	4b10      	ldr	r3, [pc, #64]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e278:	2201      	movs	r2, #1
 800e27a:	711a      	strb	r2, [r3, #4]
	kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800e27c:	4b0e      	ldr	r3, [pc, #56]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e27e:	2201      	movs	r2, #1
 800e280:	721a      	strb	r2, [r3, #8]
	kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800e282:	4b0d      	ldr	r3, [pc, #52]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e284:	2201      	movs	r2, #1
 800e286:	731a      	strb	r2, [r3, #12]
	kApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800e288:	4b0b      	ldr	r3, [pc, #44]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e28a:	2201      	movs	r2, #1
 800e28c:	741a      	strb	r2, [r3, #16]

	kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800e28e:	4b0a      	ldr	r3, [pc, #40]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e290:	2200      	movs	r2, #0
 800e292:	805a      	strh	r2, [r3, #2]
	kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800e294:	4b08      	ldr	r3, [pc, #32]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e296:	2200      	movs	r2, #0
 800e298:	80da      	strh	r2, [r3, #6]
	kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800e29a:	4b07      	ldr	r3, [pc, #28]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	815a      	strh	r2, [r3, #10]
	kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800e2a0:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	81da      	strh	r2, [r3, #14]
	kApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800e2a6:	4b04      	ldr	r3, [pc, #16]	; (800e2b8 <AppEnableResetTaskTimers+0x4c>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	825a      	strh	r2, [r3, #18]
}
 800e2ac:	bf00      	nop
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	200003a4 	.word	0x200003a4

0800e2bc <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
	kApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800e2c4:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <AssertError+0x20>)
 800e2c6:	695a      	ldr	r2, [r3, #20]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	4a03      	ldr	r2, [pc, #12]	; (800e2dc <AssertError+0x20>)
 800e2ce:	6153      	str	r3, [r2, #20]
}
 800e2d0:	bf00      	nop
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr
 800e2dc:	200003a4 	.word	0x200003a4

0800e2e0 <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Start_IT(kApplicationBase.phSynchronousEventTimer);
 800e2e4:	4b03      	ldr	r3, [pc, #12]	; (800e2f4 <TurnOnSynchronousEvent+0x14>)
 800e2e6:	69db      	ldr	r3, [r3, #28]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fa f959 	bl	80085a0 <HAL_TIM_Base_Start_IT>
}
 800e2ee:	bf00      	nop
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	200003a4 	.word	0x200003a4

0800e2f8 <DataHandler_Initialize>:
static MemoryInterchange_t kTransmissionMemoryInterchange;

void DataHandler_CopyMemoryToInterchangeBuffer( float *pfMemoryArray );

void DataHandler_Initialize()
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800e2fc:	f000 f808 	bl	800e310 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800e300:	4b02      	ldr	r3, [pc, #8]	; (800e30c <DataHandler_Initialize+0x14>)
 800e302:	2201      	movs	r2, #1
 800e304:	701a      	strb	r2, [r3, #0]

}
 800e306:	bf00      	nop
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	200003c8 	.word	0x200003c8

0800e310 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800e310:	b490      	push	{r4, r7}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800e316:	4b35      	ldr	r3, [pc, #212]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e318:	2200      	movs	r2, #0
 800e31a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800e31e:	4b33      	ldr	r3, [pc, #204]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e320:	2200      	movs	r2, #0
 800e322:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800e326:	4b31      	ldr	r3, [pc, #196]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800e32e:	4b2f      	ldr	r3, [pc, #188]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e330:	2200      	movs	r2, #0
 800e332:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800e336:	4b2d      	ldr	r3, [pc, #180]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	kDataHandler.bReadyToSend = false;
 800e33e:	4b2b      	ldr	r3, [pc, #172]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e340:	2200      	movs	r2, #0
 800e342:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800e346:	2300      	movs	r3, #0
 800e348:	71fb      	strb	r3, [r7, #7]
 800e34a:	e046      	b.n	800e3da <DataHandler_Reset+0xca>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800e34c:	2300      	movs	r3, #0
 800e34e:	71bb      	strb	r3, [r7, #6]
 800e350:	e03d      	b.n	800e3ce <DataHandler_Reset+0xbe>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800e352:	79fa      	ldrb	r2, [r7, #7]
 800e354:	4925      	ldr	r1, [pc, #148]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e356:	4613      	mov	r3, r2
 800e358:	019b      	lsls	r3, r3, #6
 800e35a:	4413      	add	r3, r2
 800e35c:	00db      	lsls	r3, r3, #3
 800e35e:	440b      	add	r3, r1
 800e360:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e364:	2200      	movs	r2, #0
 800e366:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800e368:	79fa      	ldrb	r2, [r7, #7]
 800e36a:	4920      	ldr	r1, [pc, #128]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e36c:	4613      	mov	r3, r2
 800e36e:	019b      	lsls	r3, r3, #6
 800e370:	4413      	add	r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	440b      	add	r3, r1
 800e376:	f203 2309 	addw	r3, r3, #521	; 0x209
 800e37a:	2200      	movs	r2, #0
 800e37c:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800e37e:	79fa      	ldrb	r2, [r7, #7]
 800e380:	491a      	ldr	r1, [pc, #104]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e382:	4613      	mov	r3, r2
 800e384:	019b      	lsls	r3, r3, #6
 800e386:	4413      	add	r3, r2
 800e388:	00db      	lsls	r3, r3, #3
 800e38a:	440b      	add	r3, r1
 800e38c:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800e390:	2200      	movs	r2, #0
 800e392:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800e394:	2300      	movs	r3, #0
 800e396:	717b      	strb	r3, [r7, #5]
 800e398:	e013      	b.n	800e3c2 <DataHandler_Reset+0xb2>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800e39a:	79fa      	ldrb	r2, [r7, #7]
 800e39c:	79bb      	ldrb	r3, [r7, #6]
 800e39e:	7979      	ldrb	r1, [r7, #5]
 800e3a0:	4c12      	ldr	r4, [pc, #72]	; (800e3ec <DataHandler_Reset+0xdc>)
 800e3a2:	0118      	lsls	r0, r3, #4
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	019b      	lsls	r3, r3, #6
 800e3a8:	4413      	add	r3, r2
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	4403      	add	r3, r0
 800e3ae:	440b      	add	r3, r1
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	4423      	add	r3, r4
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	f04f 0200 	mov.w	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800e3bc:	797b      	ldrb	r3, [r7, #5]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	717b      	strb	r3, [r7, #5]
 800e3c2:	797b      	ldrb	r3, [r7, #5]
 800e3c4:	2b0f      	cmp	r3, #15
 800e3c6:	d9e8      	bls.n	800e39a <DataHandler_Reset+0x8a>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800e3c8:	79bb      	ldrb	r3, [r7, #6]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	71bb      	strb	r3, [r7, #6]
 800e3ce:	79bb      	ldrb	r3, [r7, #6]
 800e3d0:	2b07      	cmp	r3, #7
 800e3d2:	d9be      	bls.n	800e352 <DataHandler_Reset+0x42>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	71fb      	strb	r3, [r7, #7]
 800e3da:	79fb      	ldrb	r3, [r7, #7]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d9b5      	bls.n	800e34c <DataHandler_Reset+0x3c>
			}
		}
	}

}
 800e3e0:	bf00      	nop
 800e3e2:	bf00      	nop
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bc90      	pop	{r4, r7}
 800e3ea:	4770      	bx	lr
 800e3ec:	200003c8 	.word	0x200003c8

0800e3f0 <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800e3f8:	4b46      	ldr	r3, [pc, #280]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f000 8081 	beq.w	800e504 <DataHandler_OpenNewMeasurement+0x114>
	{
		kDataHandler.u8LengthPointer++;
 800e402:	4b44      	ldr	r3, [pc, #272]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e404:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800e408:	3301      	adds	r3, #1
 800e40a:	b2da      	uxtb	r2, r3
 800e40c:	4b41      	ldr	r3, [pc, #260]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e40e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800e412:	4b40      	ldr	r3, [pc, #256]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		/*
		 * Every time new measurement is opened the previous one is assumed to be ready for transmission
		 */
		kDataHandler.bReadyToSend = true;
 800e41a:	4b3e      	ldr	r3, [pc, #248]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e41c:	2201      	movs	r2, #1
 800e41e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800e422:	4b3c      	ldr	r3, [pc, #240]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e424:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800e428:	2b07      	cmp	r3, #7
 800e42a:	d96f      	bls.n	800e50c <DataHandler_OpenNewMeasurement+0x11c>
		{
			kDataHandler.u8LengthPointer = 0;
 800e42c:	4b39      	ldr	r3, [pc, #228]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e42e:	2200      	movs	r2, #0
 800e430:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800e434:	4b37      	ldr	r3, [pc, #220]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e436:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e43a:	4619      	mov	r1, r3
 800e43c:	4a35      	ldr	r2, [pc, #212]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e43e:	460b      	mov	r3, r1
 800e440:	019b      	lsls	r3, r3, #6
 800e442:	440b      	add	r3, r1
 800e444:	00db      	lsls	r3, r3, #3
 800e446:	4413      	add	r3, r2
 800e448:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e44c:	2200      	movs	r2, #0
 800e44e:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800e450:	4b30      	ldr	r3, [pc, #192]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e452:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e456:	4619      	mov	r1, r3
 800e458:	4a2e      	ldr	r2, [pc, #184]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e45a:	460b      	mov	r3, r1
 800e45c:	019b      	lsls	r3, r3, #6
 800e45e:	440b      	add	r3, r1
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	4413      	add	r3, r2
 800e464:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800e468:	2201      	movs	r2, #1
 800e46a:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800e46c:	4b29      	ldr	r3, [pc, #164]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e46e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e472:	4619      	mov	r1, r3
 800e474:	4a27      	ldr	r2, [pc, #156]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e476:	460b      	mov	r3, r1
 800e478:	019b      	lsls	r3, r3, #6
 800e47a:	440b      	add	r3, r1
 800e47c:	00db      	lsls	r3, r3, #3
 800e47e:	4413      	add	r3, r2
 800e480:	f203 2309 	addw	r3, r3, #521	; 0x209
 800e484:	2200      	movs	r2, #0
 800e486:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800e488:	4b22      	ldr	r3, [pc, #136]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e48a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e48e:	4619      	mov	r1, r3
 800e490:	4a20      	ldr	r2, [pc, #128]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e492:	460b      	mov	r3, r1
 800e494:	019b      	lsls	r3, r3, #6
 800e496:	440b      	add	r3, r1
 800e498:	00db      	lsls	r3, r3, #3
 800e49a:	4413      	add	r3, r2
 800e49c:	3304      	adds	r3, #4
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800e4a2:	4b1c      	ldr	r3, [pc, #112]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4a4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	4a1a      	ldr	r2, [pc, #104]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	019b      	lsls	r3, r3, #6
 800e4b0:	440b      	add	r3, r1
 800e4b2:	00db      	lsls	r3, r3, #3
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f203 2309 	addw	r3, r3, #521	; 0x209
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	f083 0301 	eor.w	r3, r3, #1
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <DataHandler_OpenNewMeasurement+0xdc>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800e4c6:	2040      	movs	r0, #64	; 0x40
 800e4c8:	f7ff fef8 	bl	800e2bc <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800e4cc:	4b11      	ldr	r3, [pc, #68]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4ce:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800e4d2:	4b10      	ldr	r3, [pc, #64]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4d4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800e4d8:	4b0e      	ldr	r3, [pc, #56]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4da:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4de:	3301      	adds	r3, #1
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	4b0c      	ldr	r3, [pc, #48]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4e4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800e4e8:	4b0a      	ldr	r3, [pc, #40]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4ea:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d903      	bls.n	800e4fa <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800e4f2:	4b08      	ldr	r3, [pc, #32]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			}
			kDataHandler.bPageFilled = true;
 800e4fa:	4b06      	ldr	r3, [pc, #24]	; (800e514 <DataHandler_OpenNewMeasurement+0x124>)
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800e502:	e003      	b.n	800e50c <DataHandler_OpenNewMeasurement+0x11c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800e504:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e508:	f7ff fed8 	bl	800e2bc <AssertError>
}
 800e50c:	bf00      	nop
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	200003c8 	.word	0x200003c8

0800e518 <DataHandler_StoreMeasurement>:

void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800e518:	b590      	push	{r4, r7, lr}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800e522:	4b20      	ldr	r3, [pc, #128]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e524:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e528:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800e52a:	4b1e      	ldr	r3, [pc, #120]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e52c:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800e530:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800e532:	4b1c      	ldr	r3, [pc, #112]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e534:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800e538:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800e53a:	4b1a      	ldr	r3, [pc, #104]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d028      	beq.n	800e594 <DataHandler_StoreMeasurement+0x7c>
	{
		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800e542:	7bfa      	ldrb	r2, [r7, #15]
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	7b79      	ldrb	r1, [r7, #13]
 800e548:	4c16      	ldr	r4, [pc, #88]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e54a:	0118      	lsls	r0, r3, #4
 800e54c:	4613      	mov	r3, r2
 800e54e:	019b      	lsls	r3, r3, #6
 800e550:	4413      	add	r3, r2
 800e552:	005b      	lsls	r3, r3, #1
 800e554:	4403      	add	r3, r0
 800e556:	440b      	add	r3, r1
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4423      	add	r3, r4
 800e55c:	3308      	adds	r3, #8
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
		kDataHandler.u8WidthPointer++;
 800e562:	4b10      	ldr	r3, [pc, #64]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e564:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800e568:	3301      	adds	r3, #1
 800e56a:	b2da      	uxtb	r2, r3
 800e56c:	4b0d      	ldr	r3, [pc, #52]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e56e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800e572:	4b0c      	ldr	r3, [pc, #48]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e574:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800e578:	2b0f      	cmp	r3, #15
 800e57a:	d90f      	bls.n	800e59c <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800e57c:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e57e:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800e582:	3b01      	subs	r3, #1
 800e584:	b2da      	uxtb	r2, r3
 800e586:	4b07      	ldr	r3, [pc, #28]	; (800e5a4 <DataHandler_StoreMeasurement+0x8c>)
 800e588:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800e58c:	2080      	movs	r0, #128	; 0x80
 800e58e:	f7ff fe95 	bl	800e2bc <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800e592:	e003      	b.n	800e59c <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800e594:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e598:	f7ff fe90 	bl	800e2bc <AssertError>
}
 800e59c:	bf00      	nop
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd90      	pop	{r4, r7, pc}
 800e5a4:	200003c8 	.word	0x200003c8

0800e5a8 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800e5ac:	4b2b      	ldr	r3, [pc, #172]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d04c      	beq.n	800e64e <DataHandler_Operate+0xa6>
	{

		if( kDataHandler.bPageFilled )
 800e5b4:	4b29      	ldr	r3, [pc, #164]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5b6:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d011      	beq.n	800e5e2 <DataHandler_Operate+0x3a>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800e5be:	4b27      	ldr	r3, [pc, #156]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5c0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	4a25      	ldr	r2, [pc, #148]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	019b      	lsls	r3, r3, #6
 800e5cc:	440b      	add	r3, r1
 800e5ce:	00db      	lsls	r3, r3, #3
 800e5d0:	4413      	add	r3, r2
 800e5d2:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	701a      	strb	r2, [r3, #0]
			kDataHandler.bPageFilled = false;
 800e5da:	4b20      	ldr	r3, [pc, #128]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
			// Call to save with SD card
		}

		if( kDataHandler.bReadyToSend )
 800e5e2:	4b1e      	ldr	r3, [pc, #120]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5e4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d034      	beq.n	800e656 <DataHandler_Operate+0xae>
		{
			if(kDataHandler.u8LengthPointer == 0)
 800e5ec:	4b1b      	ldr	r3, [pc, #108]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5ee:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d110      	bne.n	800e618 <DataHandler_Operate+0x70>
			{
				DataHandler_CopyMemoryToInterchangeBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
 800e5f6:	4b19      	ldr	r3, [pc, #100]	; (800e65c <DataHandler_Operate+0xb4>)
 800e5f8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	4613      	mov	r3, r2
 800e600:	019b      	lsls	r3, r3, #6
 800e602:	4413      	add	r3, r2
 800e604:	00db      	lsls	r3, r3, #3
 800e606:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800e60a:	4a14      	ldr	r2, [pc, #80]	; (800e65c <DataHandler_Operate+0xb4>)
 800e60c:	4413      	add	r3, r2
 800e60e:	3308      	adds	r3, #8
 800e610:	4618      	mov	r0, r3
 800e612:	f000 f837 	bl	800e684 <DataHandler_CopyMemoryToInterchangeBuffer>
 800e616:	e013      	b.n	800e640 <DataHandler_Operate+0x98>
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
			}
			else
			{
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
				DataHandler_CopyMemoryToInterchangeBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
 800e618:	4b10      	ldr	r3, [pc, #64]	; (800e65c <DataHandler_Operate+0xb4>)
 800e61a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e61e:	4619      	mov	r1, r3
 800e620:	4b0e      	ldr	r3, [pc, #56]	; (800e65c <DataHandler_Operate+0xb4>)
 800e622:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800e626:	3b01      	subs	r3, #1
 800e628:	019a      	lsls	r2, r3, #6
 800e62a:	460b      	mov	r3, r1
 800e62c:	019b      	lsls	r3, r3, #6
 800e62e:	440b      	add	r3, r1
 800e630:	00db      	lsls	r3, r3, #3
 800e632:	4413      	add	r3, r2
 800e634:	4a09      	ldr	r2, [pc, #36]	; (800e65c <DataHandler_Operate+0xb4>)
 800e636:	4413      	add	r3, r2
 800e638:	3308      	adds	r3, #8
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 f822 	bl	800e684 <DataHandler_CopyMemoryToInterchangeBuffer>
			}

			CallForTransmissionEvent(); // Inform main event system that there is a pending transmission and data is preloaded to Memory Interchange
 800e640:	f000 f98a 	bl	800e958 <CallForTransmissionEvent>
			void CallForAverageAddition(); // Inform event system that data is also ready for averaging
			kDataHandler.bReadyToSend = false;
 800e644:	4b05      	ldr	r3, [pc, #20]	; (800e65c <DataHandler_Operate+0xb4>)
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800e64c:	e003      	b.n	800e656 <DataHandler_Operate+0xae>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800e64e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e652:	f7ff fe33 	bl	800e2bc <AssertError>
}
 800e656:	bf00      	nop
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	200003c8 	.word	0x200003c8

0800e660 <DataHandler_AccessMemoryInterchange>:

void DataHandler_AccessMemoryInterchange( MemoryInterchange_t ** pkMemoryInterchangeAddress)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
	MemoryInterchange_t *pkPointer;
	pkPointer = &kTransmissionMemoryInterchange;
 800e668:	4b05      	ldr	r3, [pc, #20]	; (800e680 <DataHandler_AccessMemoryInterchange+0x20>)
 800e66a:	60fb      	str	r3, [r7, #12]
	*pkMemoryInterchangeAddress = pkPointer;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	601a      	str	r2, [r3, #0]
}
 800e672:	bf00      	nop
 800e674:	3714      	adds	r7, #20
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	200007e4 	.word	0x200007e4

0800e684 <DataHandler_CopyMemoryToInterchangeBuffer>:

void DataHandler_CopyMemoryToInterchangeBuffer( float *pfMemoryArray )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
	if( (kTransmissionMemoryInterchange.eMemoryState != MemoryState_DataSent) && ( kTransmissionMemoryInterchange.eMemoryState != MemoryState_DataSkipped ) )
 800e68c:	4b0c      	ldr	r3, [pc, #48]	; (800e6c0 <DataHandler_CopyMemoryToInterchangeBuffer+0x3c>)
 800e68e:	795b      	ldrb	r3, [r3, #5]
 800e690:	2b02      	cmp	r3, #2
 800e692:	d007      	beq.n	800e6a4 <DataHandler_CopyMemoryToInterchangeBuffer+0x20>
 800e694:	4b0a      	ldr	r3, [pc, #40]	; (800e6c0 <DataHandler_CopyMemoryToInterchangeBuffer+0x3c>)
 800e696:	795b      	ldrb	r3, [r3, #5]
 800e698:	2b03      	cmp	r3, #3
 800e69a:	d003      	beq.n	800e6a4 <DataHandler_CopyMemoryToInterchangeBuffer+0x20>
	{
		AssertError(AppError_DataLost); // Memory would be overwritten otherwise;
 800e69c:	2040      	movs	r0, #64	; 0x40
 800e69e:	f7ff fe0d 	bl	800e2bc <AssertError>
		if( !kTransmissionMemoryInterchange.bAddedToAverage )
 800e6a2:	e009      	b.n	800e6b8 <DataHandler_CopyMemoryToInterchangeBuffer+0x34>
			//todo: add average missing error;
		}
	}
	else
	{
		kTransmissionMemoryInterchange.fDataPointer = pfMemoryArray;
 800e6a4:	4a06      	ldr	r2, [pc, #24]	; (800e6c0 <DataHandler_CopyMemoryToInterchangeBuffer+0x3c>)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6013      	str	r3, [r2, #0]
		kTransmissionMemoryInterchange.eMemoryState = MemoryState_NewData;
 800e6aa:	4b05      	ldr	r3, [pc, #20]	; (800e6c0 <DataHandler_CopyMemoryToInterchangeBuffer+0x3c>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	715a      	strb	r2, [r3, #5]
		kTransmissionMemoryInterchange.bAddedToAverage = false;
 800e6b0:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <DataHandler_CopyMemoryToInterchangeBuffer+0x3c>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	711a      	strb	r2, [r3, #4]
	}

}
 800e6b6:	bf00      	nop
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	200007e4 	.word	0x200007e4

0800e6c4 <DataSaver_NewDataAvailable>:

	}
}

void DataSaver_NewDataAvailable()
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0
	if( !kDataSaver.bNewDataAvailable )
 800e6c8:	4b08      	ldr	r3, [pc, #32]	; (800e6ec <DataSaver_NewDataAvailable+0x28>)
 800e6ca:	789b      	ldrb	r3, [r3, #2]
 800e6cc:	f083 0301 	eor.w	r3, r3, #1
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d003      	beq.n	800e6de <DataSaver_NewDataAvailable+0x1a>
	{
		kDataSaver.bNewDataAvailable = true;
 800e6d6:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <DataSaver_NewDataAvailable+0x28>)
 800e6d8:	2201      	movs	r2, #1
 800e6da:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		AssertError(AppError_AveragingDataOverlaped);
	}
}
 800e6dc:	e003      	b.n	800e6e6 <DataSaver_NewDataAvailable+0x22>
		AssertError(AppError_AveragingDataOverlaped);
 800e6de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e6e2:	f7ff fdeb 	bl	800e2bc <AssertError>
}
 800e6e6:	bf00      	nop
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	200007ec 	.word	0x200007ec

0800e6f0 <DataSaver_TickAveragingPeriod>:

void DataSaver_TickAveragingPeriod()
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	af00      	add	r7, sp, #0
	if( kDataSaver.bEnabled )
 800e6f4:	4b12      	ldr	r3, [pc, #72]	; (800e740 <DataSaver_TickAveragingPeriod+0x50>)
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01f      	beq.n	800e73c <DataSaver_TickAveragingPeriod+0x4c>
	{
		kDataSaver.u16TickCounter++;
 800e6fc:	4b10      	ldr	r3, [pc, #64]	; (800e740 <DataSaver_TickAveragingPeriod+0x50>)
 800e6fe:	f8b3 3c90 	ldrh.w	r3, [r3, #3216]	; 0xc90
 800e702:	3301      	adds	r3, #1
 800e704:	b29a      	uxth	r2, r3
 800e706:	4b0e      	ldr	r3, [pc, #56]	; (800e740 <DataSaver_TickAveragingPeriod+0x50>)
 800e708:	f8a3 2c90 	strh.w	r2, [r3, #3216]	; 0xc90

		if(kDataSaver.u16TickCounter >= ((uint16_t)dAveragingPeriodTicks ) )
 800e70c:	4b0c      	ldr	r3, [pc, #48]	; (800e740 <DataSaver_TickAveragingPeriod+0x50>)
 800e70e:	f8b3 3c90 	ldrh.w	r3, [r3, #3216]	; 0xc90
 800e712:	2b07      	cmp	r3, #7
 800e714:	d912      	bls.n	800e73c <DataSaver_TickAveragingPeriod+0x4c>
		{
			kDataSaver.u16TickCounter = 0;
 800e716:	4b0a      	ldr	r3, [pc, #40]	; (800e740 <DataSaver_TickAveragingPeriod+0x50>)
 800e718:	2200      	movs	r2, #0
 800e71a:	f8a3 2c90 	strh.w	r2, [r3, #3216]	; 0xc90
			if( !kDataSaver.bAveragingPeriodElapsed )
 800e71e:	4b08      	ldr	r3, [pc, #32]	; (800e740 <DataSaver_TickAveragingPeriod+0x50>)
 800e720:	785b      	ldrb	r3, [r3, #1]
 800e722:	f083 0301 	eor.w	r3, r3, #1
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d003      	beq.n	800e734 <DataSaver_TickAveragingPeriod+0x44>
			{
				kDataSaver.bAveragingPeriodElapsed = true;
 800e72c:	4b04      	ldr	r3, [pc, #16]	; (800e740 <DataSaver_TickAveragingPeriod+0x50>)
 800e72e:	2201      	movs	r2, #1
 800e730:	705a      	strb	r2, [r3, #1]
			{
				AssertError(AppError_AveragingDataLost);
			}
		}
	}
}
 800e732:	e003      	b.n	800e73c <DataSaver_TickAveragingPeriod+0x4c>
				AssertError(AppError_AveragingDataLost);
 800e734:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e738:	f7ff fdc0 	bl	800e2bc <AssertError>
}
 800e73c:	bf00      	nop
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	200007ec 	.word	0x200007ec

0800e744 <EventSystem_Initialize>:
}EventData_t;

static EventData_t kEventData;

void EventSystem_Initialize()
{
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0
	kEventData.bInitalized = true;
 800e748:	4b03      	ldr	r3, [pc, #12]	; (800e758 <EventSystem_Initialize+0x14>)
 800e74a:	2201      	movs	r2, #1
 800e74c:	701a      	strb	r2, [r3, #0]
}
 800e74e:	bf00      	nop
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	20001480 	.word	0x20001480

0800e75c <EventSystem_HandleEvent>:
void EventSystem_HandleEvent()
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
	uint32_t u32EventCode = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	607b      	str	r3, [r7, #4]

	u32EventCode = (uint32_t)Event_DataReadyToTransmit;
 800e766:	2301      	movs	r3, #1
 800e768:	607b      	str	r3, [r7, #4]
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800e76a:	4b26      	ldr	r3, [pc, #152]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4013      	ands	r3, r2
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	429a      	cmp	r2, r3
 800e776:	d108      	bne.n	800e78a <EventSystem_HandleEvent+0x2e>
	{
		ComManager_ArmTransmission();
 800e778:	f000 fc1a 	bl	800efb0 <ComManager_ArmTransmission>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800e77c:	4b21      	ldr	r3, [pc, #132]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	43db      	mvns	r3, r3
 800e784:	4013      	ands	r3, r2
 800e786:	4a1f      	ldr	r2, [pc, #124]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e788:	6053      	str	r3, [r2, #4]
	}

	u32EventCode = (uint32_t)Event_USBConnected;
 800e78a:	2302      	movs	r3, #2
 800e78c:	607b      	str	r3, [r7, #4]
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800e78e:	4b1d      	ldr	r3, [pc, #116]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4013      	ands	r3, r2
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d109      	bne.n	800e7b0 <EventSystem_HandleEvent+0x54>
	{
		CommManager_SetUSBConnectionState(USB_Connected);
 800e79c:	2001      	movs	r0, #1
 800e79e:	f000 fbe9 	bl	800ef74 <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800e7a2:	4b18      	ldr	r3, [pc, #96]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	43db      	mvns	r3, r3
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	4a15      	ldr	r2, [pc, #84]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7ae:	6053      	str	r3, [r2, #4]
	}

	u32EventCode = (uint32_t)Event_USBDisconnected;
 800e7b0:	2304      	movs	r3, #4
 800e7b2:	607b      	str	r3, [r7, #4]
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800e7b4:	4b13      	ldr	r3, [pc, #76]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d109      	bne.n	800e7d6 <EventSystem_HandleEvent+0x7a>
	{
		CommManager_SetUSBConnectionState(USB_Disconnected);
 800e7c2:	2000      	movs	r0, #0
 800e7c4:	f000 fbd6 	bl	800ef74 <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800e7c8:	4b0e      	ldr	r3, [pc, #56]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	43db      	mvns	r3, r3
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	4a0c      	ldr	r2, [pc, #48]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7d4:	6053      	str	r3, [r2, #4]
	}

	u32EventCode = (uint32_t)Event_DataReadyForAverage;
 800e7d6:	2310      	movs	r3, #16
 800e7d8:	607b      	str	r3, [r7, #4]
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800e7da:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d108      	bne.n	800e7fa <EventSystem_HandleEvent+0x9e>
	{
		DataSaver_NewDataAvailable();
 800e7e8:	f7ff ff6c 	bl	800e6c4 <DataSaver_NewDataAvailable>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800e7ec:	4b05      	ldr	r3, [pc, #20]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	43db      	mvns	r3, r3
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	4a03      	ldr	r2, [pc, #12]	; (800e804 <EventSystem_HandleEvent+0xa8>)
 800e7f8:	6053      	str	r3, [r2, #4]
	}
}
 800e7fa:	bf00      	nop
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	20001480 	.word	0x20001480

0800e808 <EventSystem_Signalize>:

void EventSystem_Signalize(Event_t eEvent)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	71fb      	strb	r3, [r7, #7]
	uint32_t u32EventCode = (uint32_t)eEvent;
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	60fb      	str	r3, [r7, #12]

	if(kEventData.bInitalized)
 800e816:	4b0d      	ldr	r3, [pc, #52]	; (800e84c <EventSystem_Signalize+0x44>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d011      	beq.n	800e842 <EventSystem_Signalize+0x3a>
	{
		if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800e81e:	4b0b      	ldr	r3, [pc, #44]	; (800e84c <EventSystem_Signalize+0x44>)
 800e820:	685a      	ldr	r2, [r3, #4]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	4013      	ands	r3, r2
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d104      	bne.n	800e836 <EventSystem_Signalize+0x2e>
		{
			AssertError(AppError_EventOverlap); // Event already set, before handling it
 800e82c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e830:	f7ff fd44 	bl	800e2bc <AssertError>
		else
		{
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
		}
	}
}
 800e834:	e005      	b.n	800e842 <EventSystem_Signalize+0x3a>
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
 800e836:	4b05      	ldr	r3, [pc, #20]	; (800e84c <EventSystem_Signalize+0x44>)
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	4313      	orrs	r3, r2
 800e83e:	4a03      	ldr	r2, [pc, #12]	; (800e84c <EventSystem_Signalize+0x44>)
 800e840:	6053      	str	r3, [r2, #4]
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	20001480 	.word	0x20001480

0800e850 <HandlesAssigner_ShareHandle>:
}HandleAssignerData_t;

static HandleAssignerData_t kHandleAssignerData;

void HandlesAssigner_ShareHandle(void * phHandle, HandleType_t eHandleDeviceType)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	460b      	mov	r3, r1
 800e85a:	70fb      	strb	r3, [r7, #3]
	switch(eHandleDeviceType)
 800e85c:	78fb      	ldrb	r3, [r7, #3]
 800e85e:	2b06      	cmp	r3, #6
 800e860:	d82c      	bhi.n	800e8bc <HandlesAssigner_ShareHandle+0x6c>
 800e862:	a201      	add	r2, pc, #4	; (adr r2, 800e868 <HandlesAssigner_ShareHandle+0x18>)
 800e864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e868:	0800e885 	.word	0x0800e885
 800e86c:	0800e88d 	.word	0x0800e88d
 800e870:	0800e895 	.word	0x0800e895
 800e874:	0800e89d 	.word	0x0800e89d
 800e878:	0800e8a5 	.word	0x0800e8a5
 800e87c:	0800e8ad 	.word	0x0800e8ad
 800e880:	0800e8b5 	.word	0x0800e8b5
	{
		case (eHandle_TIM2):
			kHandleAssignerData.phTIM2 = phHandle;
 800e884:	4a12      	ldr	r2, [pc, #72]	; (800e8d0 <HandlesAssigner_ShareHandle+0x80>)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6153      	str	r3, [r2, #20]
			break;
 800e88a:	e01c      	b.n	800e8c6 <HandlesAssigner_ShareHandle+0x76>
		case (eHandle_I2C1):
			kHandleAssignerData.phI2C1 = phHandle;
 800e88c:	4a10      	ldr	r2, [pc, #64]	; (800e8d0 <HandlesAssigner_ShareHandle+0x80>)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6053      	str	r3, [r2, #4]
			break;
 800e892:	e018      	b.n	800e8c6 <HandlesAssigner_ShareHandle+0x76>
		case (eHandle_I2C2):
			kHandleAssignerData.phI2C2 = phHandle;
 800e894:	4a0e      	ldr	r2, [pc, #56]	; (800e8d0 <HandlesAssigner_ShareHandle+0x80>)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6093      	str	r3, [r2, #8]
			break;
 800e89a:	e014      	b.n	800e8c6 <HandlesAssigner_ShareHandle+0x76>
		case (eHandle_RTC):
			kHandleAssignerData.phRTC = phHandle;
 800e89c:	4a0c      	ldr	r2, [pc, #48]	; (800e8d0 <HandlesAssigner_ShareHandle+0x80>)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	60d3      	str	r3, [r2, #12]
			break;
 800e8a2:	e010      	b.n	800e8c6 <HandlesAssigner_ShareHandle+0x76>
		case (eHandle_SD):
			kHandleAssignerData.phSD = phHandle;
 800e8a4:	4a0a      	ldr	r2, [pc, #40]	; (800e8d0 <HandlesAssigner_ShareHandle+0x80>)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6113      	str	r3, [r2, #16]
			break;
 800e8aa:	e00c      	b.n	800e8c6 <HandlesAssigner_ShareHandle+0x76>
		case (eHandle_ADC):
			kHandleAssignerData.phADC1 = phHandle;
 800e8ac:	4a08      	ldr	r2, [pc, #32]	; (800e8d0 <HandlesAssigner_ShareHandle+0x80>)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6013      	str	r3, [r2, #0]
			break;
 800e8b2:	e008      	b.n	800e8c6 <HandlesAssigner_ShareHandle+0x76>
		case (eHandle_UART1):
			kHandleAssignerData.phUART1 = phHandle;
 800e8b4:	4a06      	ldr	r2, [pc, #24]	; (800e8d0 <HandlesAssigner_ShareHandle+0x80>)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6193      	str	r3, [r2, #24]
			break;
 800e8ba:	e004      	b.n	800e8c6 <HandlesAssigner_ShareHandle+0x76>
		default:
			AssertError(AppError_HALHandleAssignmentError);
 800e8bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e8c0:	f7ff fcfc 	bl	800e2bc <AssertError>
			break;
 800e8c4:	bf00      	nop
	}
}
 800e8c6:	bf00      	nop
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20001488 	.word	0x20001488

0800e8d4 <HandlesAssigner_GetHandle>:

void* HandlesAssigner_GetHandle(HandleType_t eHandleDeviceType)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	4603      	mov	r3, r0
 800e8dc:	71fb      	strb	r3, [r7, #7]
	void * phHandle;
	switch(eHandleDeviceType)
 800e8de:	79fb      	ldrb	r3, [r7, #7]
 800e8e0:	2b06      	cmp	r3, #6
 800e8e2:	d82d      	bhi.n	800e940 <HandlesAssigner_GetHandle+0x6c>
 800e8e4:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <HandlesAssigner_GetHandle+0x18>)
 800e8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ea:	bf00      	nop
 800e8ec:	0800e909 	.word	0x0800e909
 800e8f0:	0800e911 	.word	0x0800e911
 800e8f4:	0800e919 	.word	0x0800e919
 800e8f8:	0800e921 	.word	0x0800e921
 800e8fc:	0800e929 	.word	0x0800e929
 800e900:	0800e931 	.word	0x0800e931
 800e904:	0800e939 	.word	0x0800e939
	{
		case (eHandle_TIM2):
			phHandle = kHandleAssignerData.phTIM2;
 800e908:	4b12      	ldr	r3, [pc, #72]	; (800e954 <HandlesAssigner_GetHandle+0x80>)
 800e90a:	695b      	ldr	r3, [r3, #20]
 800e90c:	60fb      	str	r3, [r7, #12]
			break;
 800e90e:	e01c      	b.n	800e94a <HandlesAssigner_GetHandle+0x76>
		case (eHandle_I2C1):
			phHandle = kHandleAssignerData.phI2C1;
 800e910:	4b10      	ldr	r3, [pc, #64]	; (800e954 <HandlesAssigner_GetHandle+0x80>)
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	60fb      	str	r3, [r7, #12]
			break;
 800e916:	e018      	b.n	800e94a <HandlesAssigner_GetHandle+0x76>
		case (eHandle_I2C2):
			phHandle = kHandleAssignerData.phI2C2;
 800e918:	4b0e      	ldr	r3, [pc, #56]	; (800e954 <HandlesAssigner_GetHandle+0x80>)
 800e91a:	689b      	ldr	r3, [r3, #8]
 800e91c:	60fb      	str	r3, [r7, #12]
			break;
 800e91e:	e014      	b.n	800e94a <HandlesAssigner_GetHandle+0x76>
		case (eHandle_RTC):
			phHandle = kHandleAssignerData.phRTC;
 800e920:	4b0c      	ldr	r3, [pc, #48]	; (800e954 <HandlesAssigner_GetHandle+0x80>)
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	60fb      	str	r3, [r7, #12]
			break;
 800e926:	e010      	b.n	800e94a <HandlesAssigner_GetHandle+0x76>
		case (eHandle_SD):
			phHandle = kHandleAssignerData.phSD;
 800e928:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <HandlesAssigner_GetHandle+0x80>)
 800e92a:	691b      	ldr	r3, [r3, #16]
 800e92c:	60fb      	str	r3, [r7, #12]
			break;
 800e92e:	e00c      	b.n	800e94a <HandlesAssigner_GetHandle+0x76>
		case (eHandle_ADC):
			phHandle = kHandleAssignerData.phADC1;
 800e930:	4b08      	ldr	r3, [pc, #32]	; (800e954 <HandlesAssigner_GetHandle+0x80>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	60fb      	str	r3, [r7, #12]
			break;
 800e936:	e008      	b.n	800e94a <HandlesAssigner_GetHandle+0x76>
		case (eHandle_UART1):
			phHandle = kHandleAssignerData.phUART1;
 800e938:	4b06      	ldr	r3, [pc, #24]	; (800e954 <HandlesAssigner_GetHandle+0x80>)
 800e93a:	699b      	ldr	r3, [r3, #24]
 800e93c:	60fb      	str	r3, [r7, #12]
			break;
 800e93e:	e004      	b.n	800e94a <HandlesAssigner_GetHandle+0x76>
		default:
			AssertError(AppError_HALHandleAssignmentError);
 800e940:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e944:	f7ff fcba 	bl	800e2bc <AssertError>
			break;
 800e948:	bf00      	nop
	}
	return phHandle;
 800e94a:	68fb      	ldr	r3, [r7, #12]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	20001488 	.word	0x20001488

0800e958 <CallForTransmissionEvent>:
#include "ModuleInterconnect.h"
#include "EventSystem.h"
#include "DataCommon.h"

void CallForTransmissionEvent()
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_DataReadyToTransmit);
 800e95c:	2001      	movs	r0, #1
 800e95e:	f7ff ff53 	bl	800e808 <EventSystem_Signalize>
}
 800e962:	bf00      	nop
 800e964:	bd80      	pop	{r7, pc}

0800e966 <CallForUSBConnection>:

void CallForUSBConnection()
{
 800e966:	b580      	push	{r7, lr}
 800e968:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBConnected);
 800e96a:	2002      	movs	r0, #2
 800e96c:	f7ff ff4c 	bl	800e808 <EventSystem_Signalize>
}
 800e970:	bf00      	nop
 800e972:	bd80      	pop	{r7, pc}

0800e974 <CallForUSBDisonnection>:
void CallForUSBDisonnection()
{
 800e974:	b580      	push	{r7, lr}
 800e976:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBDisconnected);
 800e978:	2004      	movs	r0, #4
 800e97a:	f7ff ff45 	bl	800e808 <EventSystem_Signalize>
}
 800e97e:	bf00      	nop
 800e980:	bd80      	pop	{r7, pc}
	...

0800e984 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800e984:	b580      	push	{r7, lr}
 800e986:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800e988:	4bac      	ldr	r3, [pc, #688]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e98a:	79db      	ldrb	r3, [r3, #7]
 800e98c:	2b05      	cmp	r3, #5
 800e98e:	f200 8161 	bhi.w	800ec54 <TempCollect_Operate+0x2d0>
 800e992:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <TempCollect_Operate+0x14>)
 800e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e998:	0800e9b1 	.word	0x0800e9b1
 800e99c:	0800e9bb 	.word	0x0800e9bb
 800e9a0:	0800e9eb 	.word	0x0800e9eb
 800e9a4:	0800eb07 	.word	0x0800eb07
 800e9a8:	0800ebdf 	.word	0x0800ebdf
 800e9ac:	0800ea6d 	.word	0x0800ea6d
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800e9b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e9b4:	f7ff fc82 	bl	800e2bc <AssertError>
		break;
 800e9b8:	e154      	b.n	800ec64 <TempCollect_Operate+0x2e0>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800e9ba:	4ba0      	ldr	r3, [pc, #640]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9bc:	799b      	ldrb	r3, [r3, #6]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 814d 	beq.w	800ec5e <TempCollect_Operate+0x2da>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800e9c4:	4b9d      	ldr	r3, [pc, #628]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800e9ca:	4b9c      	ldr	r3, [pc, #624]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800e9d0:	4b9a      	ldr	r3, [pc, #616]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800e9d6:	4b99      	ldr	r3, [pc, #612]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800e9dc:	4b97      	ldr	r3, [pc, #604]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9de:	2200      	movs	r2, #0
 800e9e0:	725a      	strb	r2, [r3, #9]
			kTemperatureData.u8TimeoutCounter = 0;
 800e9e2:	4b96      	ldr	r3, [pc, #600]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	771a      	strb	r2, [r3, #28]
		}
		break;
 800e9e8:	e139      	b.n	800ec5e <TempCollect_Operate+0x2da>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800e9ea:	4b94      	ldr	r3, [pc, #592]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < Sensor_I2CA_DeviceCount)
 800e9f0:	4b92      	ldr	r3, [pc, #584]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9f2:	8a9b      	ldrh	r3, [r3, #20]
 800e9f4:	2b07      	cmp	r3, #7
 800e9f6:	d818      	bhi.n	800ea2a <TempCollect_Operate+0xa6>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800e9f8:	4b90      	ldr	r3, [pc, #576]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	729a      	strb	r2, [r3, #10]
			kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex].fcnReadTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800e9fe:	4b8f      	ldr	r3, [pc, #572]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea00:	8a9b      	ldrh	r3, [r3, #20]
 800ea02:	4619      	mov	r1, r3
 800ea04:	4a8e      	ldr	r2, [pc, #568]	; (800ec40 <TempCollect_Operate+0x2bc>)
 800ea06:	460b      	mov	r3, r1
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	440b      	add	r3, r1
 800ea0c:	00db      	lsls	r3, r3, #3
 800ea0e:	4413      	add	r3, r2
 800ea10:	3310      	adds	r3, #16
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	4b89      	ldr	r3, [pc, #548]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea16:	8a9b      	ldrh	r3, [r3, #20]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	440b      	add	r3, r1
 800ea20:	00db      	lsls	r3, r3, #3
 800ea22:	4987      	ldr	r1, [pc, #540]	; (800ec40 <TempCollect_Operate+0x2bc>)
 800ea24:	440b      	add	r3, r1
 800ea26:	4618      	mov	r0, r3
 800ea28:	4790      	blx	r2
		}
		if(kTemperatureData.u16ArrayBSensorIndex < Sensor_I2CB_DeviceCount)
 800ea2a:	4b84      	ldr	r3, [pc, #528]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea2c:	8adb      	ldrh	r3, [r3, #22]
 800ea2e:	2b07      	cmp	r3, #7
 800ea30:	d818      	bhi.n	800ea64 <TempCollect_Operate+0xe0>
		{
			kTemperatureData.bStateReady[1] = false;
 800ea32:	4b82      	ldr	r3, [pc, #520]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	72da      	strb	r2, [r3, #11]
			kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex].fcnReadTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800ea38:	4b80      	ldr	r3, [pc, #512]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea3a:	8adb      	ldrh	r3, [r3, #22]
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4a81      	ldr	r2, [pc, #516]	; (800ec44 <TempCollect_Operate+0x2c0>)
 800ea40:	460b      	mov	r3, r1
 800ea42:	005b      	lsls	r3, r3, #1
 800ea44:	440b      	add	r3, r1
 800ea46:	00db      	lsls	r3, r3, #3
 800ea48:	4413      	add	r3, r2
 800ea4a:	3310      	adds	r3, #16
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	4b7b      	ldr	r3, [pc, #492]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea50:	8adb      	ldrh	r3, [r3, #22]
 800ea52:	4619      	mov	r1, r3
 800ea54:	460b      	mov	r3, r1
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	440b      	add	r3, r1
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	4979      	ldr	r1, [pc, #484]	; (800ec44 <TempCollect_Operate+0x2c0>)
 800ea5e:	440b      	add	r3, r1
 800ea60:	4618      	mov	r0, r3
 800ea62:	4790      	blx	r2
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800ea64:	4b75      	ldr	r3, [pc, #468]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea66:	2205      	movs	r2, #5
 800ea68:	71da      	strb	r2, [r3, #7]
		break;
 800ea6a:	e0fb      	b.n	800ec64 <TempCollect_Operate+0x2e0>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800ea6c:	4b73      	ldr	r3, [pc, #460]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea6e:	7a9b      	ldrb	r3, [r3, #10]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00a      	beq.n	800ea8a <TempCollect_Operate+0x106>
 800ea74:	4b71      	ldr	r3, [pc, #452]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea76:	7adb      	ldrb	r3, [r3, #11]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d006      	beq.n	800ea8a <TempCollect_Operate+0x106>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800ea7c:	4b6f      	ldr	r3, [pc, #444]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea7e:	2203      	movs	r2, #3
 800ea80:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u8TimeoutCounter = 0;
 800ea82:	4b6e      	ldr	r3, [pc, #440]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	771a      	strb	r2, [r3, #28]
					AssertError(AppError_ArrayBError);
				}
				kTemperatureData.eState = TempCollect_ProcessData;
			}
		}
		break;
 800ea88:	e0eb      	b.n	800ec62 <TempCollect_Operate+0x2de>
			kTemperatureData.u8TimeoutCounter++;
 800ea8a:	4b6c      	ldr	r3, [pc, #432]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea8c:	7f1b      	ldrb	r3, [r3, #28]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	4b6a      	ldr	r3, [pc, #424]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea94:	771a      	strb	r2, [r3, #28]
			if( (kTemperatureData.u8TimeoutCounter > dTimeoutMaxWait) || kTemperatureData.bErrorOnArray[0] || kTemperatureData.bErrorOnArray[1] )
 800ea96:	4b69      	ldr	r3, [pc, #420]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ea98:	7f1b      	ldrb	r3, [r3, #28]
 800ea9a:	2b0f      	cmp	r3, #15
 800ea9c:	d808      	bhi.n	800eab0 <TempCollect_Operate+0x12c>
 800ea9e:	4b67      	ldr	r3, [pc, #412]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eaa0:	7f5b      	ldrb	r3, [r3, #29]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d104      	bne.n	800eab0 <TempCollect_Operate+0x12c>
 800eaa6:	4b65      	ldr	r3, [pc, #404]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eaa8:	7f9b      	ldrb	r3, [r3, #30]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f000 80d9 	beq.w	800ec62 <TempCollect_Operate+0x2de>
				kTemperatureData.u8TimeoutCounter = 0;
 800eab0:	4b62      	ldr	r3, [pc, #392]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	771a      	strb	r2, [r3, #28]
				if(!kTemperatureData.bStateReady[0] || kTemperatureData.bErrorOnArray[0])
 800eab6:	4b61      	ldr	r3, [pc, #388]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eab8:	7a9b      	ldrb	r3, [r3, #10]
 800eaba:	f083 0301 	eor.w	r3, r3, #1
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d103      	bne.n	800eacc <TempCollect_Operate+0x148>
 800eac4:	4b5d      	ldr	r3, [pc, #372]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eac6:	7f5b      	ldrb	r3, [r3, #29]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d006      	beq.n	800eada <TempCollect_Operate+0x156>
					kTemperatureData.bErrorOnArray[0] = true;
 800eacc:	4b5b      	ldr	r3, [pc, #364]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eace:	2201      	movs	r2, #1
 800ead0:	775a      	strb	r2, [r3, #29]
					AssertError(AppError_ArrayAError);
 800ead2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ead6:	f7ff fbf1 	bl	800e2bc <AssertError>
				if(!kTemperatureData.bStateReady[1] || kTemperatureData.bErrorOnArray[1])
 800eada:	4b58      	ldr	r3, [pc, #352]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eadc:	7adb      	ldrb	r3, [r3, #11]
 800eade:	f083 0301 	eor.w	r3, r3, #1
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d103      	bne.n	800eaf0 <TempCollect_Operate+0x16c>
 800eae8:	4b54      	ldr	r3, [pc, #336]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eaea:	7f9b      	ldrb	r3, [r3, #30]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d006      	beq.n	800eafe <TempCollect_Operate+0x17a>
					kTemperatureData.bErrorOnArray[1] = true;
 800eaf0:	4b52      	ldr	r3, [pc, #328]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	779a      	strb	r2, [r3, #30]
					AssertError(AppError_ArrayBError);
 800eaf6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800eafa:	f7ff fbdf 	bl	800e2bc <AssertError>
				kTemperatureData.eState = TempCollect_ProcessData;
 800eafe:	4b4f      	ldr	r3, [pc, #316]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb00:	2203      	movs	r2, #3
 800eb02:	71da      	strb	r2, [r3, #7]
		break;
 800eb04:	e0ad      	b.n	800ec62 <TempCollect_Operate+0x2de>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800eb06:	4b4d      	ldr	r3, [pc, #308]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb08:	7a1b      	ldrb	r3, [r3, #8]
 800eb0a:	f083 0301 	eor.w	r3, r3, #1
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d02c      	beq.n	800eb6e <TempCollect_Operate+0x1ea>
		{
			if(kTemperatureData.bErrorOnArray[0])
 800eb14:	4b49      	ldr	r3, [pc, #292]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb16:	7f5b      	ldrb	r3, [r3, #29]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d006      	beq.n	800eb2a <TempCollect_Operate+0x1a6>
			{
				kTemperatureData.fConvertedTemperature[0] = dErrorIndication;
 800eb1c:	4b47      	ldr	r3, [pc, #284]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb1e:	4a4a      	ldr	r2, [pc, #296]	; (800ec48 <TempCollect_Operate+0x2c4>)
 800eb20:	60da      	str	r2, [r3, #12]
				kTemperatureData.bErrorOnArray[0] = false;
 800eb22:	4b46      	ldr	r3, [pc, #280]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	775a      	strb	r2, [r3, #29]
 800eb28:	e01a      	b.n	800eb60 <TempCollect_Operate+0x1dc>
			}
			else
			{
				kTemperatureData.fConvertedTemperature[0] = kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex].fcnDecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800eb2a:	4b44      	ldr	r3, [pc, #272]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb2c:	8a9b      	ldrh	r3, [r3, #20]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	4a43      	ldr	r2, [pc, #268]	; (800ec40 <TempCollect_Operate+0x2bc>)
 800eb32:	460b      	mov	r3, r1
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	440b      	add	r3, r1
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	4413      	add	r3, r2
 800eb3c:	330c      	adds	r3, #12
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	4b3e      	ldr	r3, [pc, #248]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb42:	8a9b      	ldrh	r3, [r3, #20]
 800eb44:	4619      	mov	r1, r3
 800eb46:	460b      	mov	r3, r1
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	440b      	add	r3, r1
 800eb4c:	00db      	lsls	r3, r3, #3
 800eb4e:	493c      	ldr	r1, [pc, #240]	; (800ec40 <TempCollect_Operate+0x2bc>)
 800eb50:	440b      	add	r3, r1
 800eb52:	4618      	mov	r0, r3
 800eb54:	4790      	blx	r2
 800eb56:	eef0 7a40 	vmov.f32	s15, s0
 800eb5a:	4b38      	ldr	r3, [pc, #224]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb5c:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800eb60:	4b36      	ldr	r3, [pc, #216]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb62:	edd3 7a03 	vldr	s15, [r3, #12]
 800eb66:	eeb0 0a67 	vmov.f32	s0, s15
 800eb6a:	f7ff fcd5 	bl	800e518 <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800eb6e:	4b33      	ldr	r3, [pc, #204]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb70:	7a5b      	ldrb	r3, [r3, #9]
 800eb72:	f083 0301 	eor.w	r3, r3, #1
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d02c      	beq.n	800ebd6 <TempCollect_Operate+0x252>
		{
			if(kTemperatureData.bErrorOnArray[1])
 800eb7c:	4b2f      	ldr	r3, [pc, #188]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb7e:	7f9b      	ldrb	r3, [r3, #30]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d006      	beq.n	800eb92 <TempCollect_Operate+0x20e>
			{
				kTemperatureData.fConvertedTemperature[1] = dErrorIndication;
 800eb84:	4b2d      	ldr	r3, [pc, #180]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb86:	4a30      	ldr	r2, [pc, #192]	; (800ec48 <TempCollect_Operate+0x2c4>)
 800eb88:	611a      	str	r2, [r3, #16]
				kTemperatureData.bErrorOnArray[1] = false;
 800eb8a:	4b2c      	ldr	r3, [pc, #176]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	779a      	strb	r2, [r3, #30]
 800eb90:	e01a      	b.n	800ebc8 <TempCollect_Operate+0x244>
			}
			else
			{
				kTemperatureData.fConvertedTemperature[1] = kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex].fcnDecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800eb92:	4b2a      	ldr	r3, [pc, #168]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800eb94:	8adb      	ldrh	r3, [r3, #22]
 800eb96:	4619      	mov	r1, r3
 800eb98:	4a2a      	ldr	r2, [pc, #168]	; (800ec44 <TempCollect_Operate+0x2c0>)
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	005b      	lsls	r3, r3, #1
 800eb9e:	440b      	add	r3, r1
 800eba0:	00db      	lsls	r3, r3, #3
 800eba2:	4413      	add	r3, r2
 800eba4:	330c      	adds	r3, #12
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	4b24      	ldr	r3, [pc, #144]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebaa:	8adb      	ldrh	r3, [r3, #22]
 800ebac:	4619      	mov	r1, r3
 800ebae:	460b      	mov	r3, r1
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	440b      	add	r3, r1
 800ebb4:	00db      	lsls	r3, r3, #3
 800ebb6:	4923      	ldr	r1, [pc, #140]	; (800ec44 <TempCollect_Operate+0x2c0>)
 800ebb8:	440b      	add	r3, r1
 800ebba:	4618      	mov	r0, r3
 800ebbc:	4790      	blx	r2
 800ebbe:	eef0 7a40 	vmov.f32	s15, s0
 800ebc2:	4b1e      	ldr	r3, [pc, #120]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebc4:	edc3 7a04 	vstr	s15, [r3, #16]
			}
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800ebc8:	4b1c      	ldr	r3, [pc, #112]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebca:	edd3 7a04 	vldr	s15, [r3, #16]
 800ebce:	eeb0 0a67 	vmov.f32	s0, s15
 800ebd2:	f7ff fca1 	bl	800e518 <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800ebd6:	4b19      	ldr	r3, [pc, #100]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebd8:	2204      	movs	r2, #4
 800ebda:	71da      	strb	r2, [r3, #7]
		break;
 800ebdc:	e042      	b.n	800ec64 <TempCollect_Operate+0x2e0>

	case(TempCollect_ArmNewReading):
		kTemperatureData.u16ArrayASensorIndex++;
 800ebde:	4b17      	ldr	r3, [pc, #92]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebe0:	8a9b      	ldrh	r3, [r3, #20]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	4b15      	ldr	r3, [pc, #84]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebe8:	829a      	strh	r2, [r3, #20]

		if( kTemperatureData.u16ArrayASensorIndex >= Sensor_I2CA_DeviceCount)
 800ebea:	4b14      	ldr	r3, [pc, #80]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebec:	8a9b      	ldrh	r3, [r3, #20]
 800ebee:	2b07      	cmp	r3, #7
 800ebf0:	d902      	bls.n	800ebf8 <TempCollect_Operate+0x274>
		{
			kTemperatureData.bReadFinished[0] = true;
 800ebf2:	4b12      	ldr	r3, [pc, #72]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	721a      	strb	r2, [r3, #8]
		}

		kTemperatureData.u16ArrayBSensorIndex++;
 800ebf8:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ebfa:	8adb      	ldrh	r3, [r3, #22]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	4b0e      	ldr	r3, [pc, #56]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec02:	82da      	strh	r2, [r3, #22]

		if( kTemperatureData.u16ArrayBSensorIndex >= Sensor_I2CB_DeviceCount)
 800ec04:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec06:	8adb      	ldrh	r3, [r3, #22]
 800ec08:	2b07      	cmp	r3, #7
 800ec0a:	d902      	bls.n	800ec12 <TempCollect_Operate+0x28e>
		{
			kTemperatureData.bReadFinished[1] = true;
 800ec0c:	4b0b      	ldr	r3, [pc, #44]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec0e:	2201      	movs	r2, #1
 800ec10:	725a      	strb	r2, [r3, #9]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800ec12:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec14:	7a1b      	ldrb	r3, [r3, #8]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d018      	beq.n	800ec4c <TempCollect_Operate+0x2c8>
 800ec1a:	4b08      	ldr	r3, [pc, #32]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec1c:	7a5b      	ldrb	r3, [r3, #9]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d014      	beq.n	800ec4c <TempCollect_Operate+0x2c8>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800ec22:	4b06      	ldr	r3, [pc, #24]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec24:	2201      	movs	r2, #1
 800ec26:	71da      	strb	r2, [r3, #7]

			/*
			 * Open new measurement at the end of current session
			 */
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800ec28:	4b04      	ldr	r3, [pc, #16]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	1c5a      	adds	r2, r3, #1
 800ec2e:	4903      	ldr	r1, [pc, #12]	; (800ec3c <TempCollect_Operate+0x2b8>)
 800ec30:	618a      	str	r2, [r1, #24]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff fbdc 	bl	800e3f0 <DataHandler_OpenNewMeasurement>
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800ec38:	e014      	b.n	800ec64 <TempCollect_Operate+0x2e0>
 800ec3a:	bf00      	nop
 800ec3c:	200014a8 	.word	0x200014a8
 800ec40:	200017ec 	.word	0x200017ec
 800ec44:	200018ac 	.word	0x200018ac
 800ec48:	43480000 	.word	0x43480000
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800ec4c:	4b06      	ldr	r3, [pc, #24]	; (800ec68 <TempCollect_Operate+0x2e4>)
 800ec4e:	2202      	movs	r2, #2
 800ec50:	71da      	strb	r2, [r3, #7]
		break;
 800ec52:	e007      	b.n	800ec64 <TempCollect_Operate+0x2e0>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800ec54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ec58:	f7ff fb30 	bl	800e2bc <AssertError>
	break;
 800ec5c:	e002      	b.n	800ec64 <TempCollect_Operate+0x2e0>
		break;
 800ec5e:	bf00      	nop
 800ec60:	e000      	b.n	800ec64 <TempCollect_Operate+0x2e0>
		break;
 800ec62:	bf00      	nop
	}
}
 800ec64:	bf00      	nop
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	200014a8 	.word	0x200014a8

0800ec6c <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800ec6c:	b590      	push	{r4, r7, lr}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800ec72:	4b2c      	ldr	r3, [pc, #176]	; (800ed24 <TempCollect_Initialize+0xb8>)
 800ec74:	2201      	movs	r2, #1
 800ec76:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800ec78:	4b2a      	ldr	r3, [pc, #168]	; (800ed24 <TempCollect_Initialize+0xb8>)
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	715a      	strb	r2, [r3, #5]
	{
		kTemperatureData.bStateReady[1] = true;
	}
	/* Sensor configuration in blocking mode: once during startup */
	//todo: Reconsider the implementation
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++ )
 800ec7e:	2300      	movs	r3, #0
 800ec80:	71fb      	strb	r3, [r7, #7]
 800ec82:	e020      	b.n	800ecc6 <TempCollect_Initialize+0x5a>
	{
		if (kaSensorArrayDataA[u8Idx].eSensorType == eSensor_MCP9803)
 800ec84:	79fa      	ldrb	r2, [r7, #7]
 800ec86:	4928      	ldr	r1, [pc, #160]	; (800ed28 <TempCollect_Initialize+0xbc>)
 800ec88:	4613      	mov	r3, r2
 800ec8a:	005b      	lsls	r3, r3, #1
 800ec8c:	4413      	add	r3, r2
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	440b      	add	r3, r1
 800ec92:	330b      	adds	r3, #11
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d112      	bne.n	800ecc0 <TempCollect_Initialize+0x54>
		{
			kaSensorArrayDataA[u8Idx].fcnSendConfig(&kaSensorArrayDataA[u8Idx], eMCP9803_Resolution_12bit);
 800ec9a:	79fa      	ldrb	r2, [r7, #7]
 800ec9c:	4922      	ldr	r1, [pc, #136]	; (800ed28 <TempCollect_Initialize+0xbc>)
 800ec9e:	4613      	mov	r3, r2
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	4413      	add	r3, r2
 800eca4:	00db      	lsls	r3, r3, #3
 800eca6:	440b      	add	r3, r1
 800eca8:	3314      	adds	r3, #20
 800ecaa:	681c      	ldr	r4, [r3, #0]
 800ecac:	79fa      	ldrb	r2, [r7, #7]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	4413      	add	r3, r2
 800ecb4:	00db      	lsls	r3, r3, #3
 800ecb6:	4a1c      	ldr	r2, [pc, #112]	; (800ed28 <TempCollect_Initialize+0xbc>)
 800ecb8:	4413      	add	r3, r2
 800ecba:	2160      	movs	r1, #96	; 0x60
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	47a0      	blx	r4
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++ )
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	71fb      	strb	r3, [r7, #7]
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	2b07      	cmp	r3, #7
 800ecca:	d9db      	bls.n	800ec84 <TempCollect_Initialize+0x18>
		}
	}
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++ )
 800eccc:	2300      	movs	r3, #0
 800ecce:	71bb      	strb	r3, [r7, #6]
 800ecd0:	e020      	b.n	800ed14 <TempCollect_Initialize+0xa8>
	{
		if (kaSensorArrayDataB[u8Idx].eSensorType == eSensor_MCP9803)
 800ecd2:	79ba      	ldrb	r2, [r7, #6]
 800ecd4:	4915      	ldr	r1, [pc, #84]	; (800ed2c <TempCollect_Initialize+0xc0>)
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	4413      	add	r3, r2
 800ecdc:	00db      	lsls	r3, r3, #3
 800ecde:	440b      	add	r3, r1
 800ece0:	330b      	adds	r3, #11
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d112      	bne.n	800ed0e <TempCollect_Initialize+0xa2>
		{
			kaSensorArrayDataB[u8Idx].fcnSendConfig(&kaSensorArrayDataB[u8Idx], eMCP9803_Resolution_12bit);
 800ece8:	79ba      	ldrb	r2, [r7, #6]
 800ecea:	4910      	ldr	r1, [pc, #64]	; (800ed2c <TempCollect_Initialize+0xc0>)
 800ecec:	4613      	mov	r3, r2
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	4413      	add	r3, r2
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	440b      	add	r3, r1
 800ecf6:	3314      	adds	r3, #20
 800ecf8:	681c      	ldr	r4, [r3, #0]
 800ecfa:	79ba      	ldrb	r2, [r7, #6]
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	005b      	lsls	r3, r3, #1
 800ed00:	4413      	add	r3, r2
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	4a09      	ldr	r2, [pc, #36]	; (800ed2c <TempCollect_Initialize+0xc0>)
 800ed06:	4413      	add	r3, r2
 800ed08:	2160      	movs	r1, #96	; 0x60
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	47a0      	blx	r4
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++ )
 800ed0e:	79bb      	ldrb	r3, [r7, #6]
 800ed10:	3301      	adds	r3, #1
 800ed12:	71bb      	strb	r3, [r7, #6]
 800ed14:	79bb      	ldrb	r3, [r7, #6]
 800ed16:	2b07      	cmp	r3, #7
 800ed18:	d9db      	bls.n	800ecd2 <TempCollect_Initialize+0x66>
		}
	}
}
 800ed1a:	bf00      	nop
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd90      	pop	{r4, r7, pc}
 800ed24:	200014a8 	.word	0x200014a8
 800ed28:	200017ec 	.word	0x200017ec
 800ed2c:	200018ac 	.word	0x200018ac

0800ed30 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800ed34:	f7f2 f94e 	bl	8000fd4 <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800ed38:	4b06      	ldr	r3, [pc, #24]	; (800ed54 <TempCollect_ScheduleMeasurement+0x24>)
 800ed3a:	799b      	ldrb	r3, [r3, #6]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d004      	beq.n	800ed4a <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800ed40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ed44:	f7ff faba 	bl	800e2bc <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800ed48:	e002      	b.n	800ed50 <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800ed4a:	4b02      	ldr	r3, [pc, #8]	; (800ed54 <TempCollect_ScheduleMeasurement+0x24>)
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	719a      	strb	r2, [r3, #6]
}
 800ed50:	bf00      	nop
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	200014a8 	.word	0x200014a8

0800ed58 <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800ed58:	b480      	push	{r7}
 800ed5a:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800ed5c:	4b03      	ldr	r3, [pc, #12]	; (800ed6c <TempCollect_I2CA_Done+0x14>)
 800ed5e:	2201      	movs	r2, #1
 800ed60:	729a      	strb	r2, [r3, #10]
}
 800ed62:	bf00      	nop
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	200014a8 	.word	0x200014a8

0800ed70 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800ed70:	b480      	push	{r7}
 800ed72:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800ed74:	4b03      	ldr	r3, [pc, #12]	; (800ed84 <TempCollect_I2CB_Done+0x14>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	72da      	strb	r2, [r3, #11]
}
 800ed7a:	bf00      	nop
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	200014a8 	.word	0x200014a8

0800ed88 <TempCollect_CommFaultOccured>:

void TempCollect_CommFaultOccured(CommunicationModule_t eModule)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	4603      	mov	r3, r0
 800ed90:	71fb      	strb	r3, [r7, #7]
	if( eModule == eModule_I2CA)
 800ed92:	79fb      	ldrb	r3, [r7, #7]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d102      	bne.n	800ed9e <TempCollect_CommFaultOccured+0x16>
	{
		kTemperatureData.bErrorOnArray[0] = true;
 800ed98:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <TempCollect_CommFaultOccured+0x30>)
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	775a      	strb	r2, [r3, #29]
	}
	if( eModule == eModule_I2CB)
 800ed9e:	79fb      	ldrb	r3, [r7, #7]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d102      	bne.n	800edaa <TempCollect_CommFaultOccured+0x22>
	{
		kTemperatureData.bErrorOnArray[1] = true;
 800eda4:	4b04      	ldr	r3, [pc, #16]	; (800edb8 <TempCollect_CommFaultOccured+0x30>)
 800eda6:	2201      	movs	r2, #1
 800eda8:	779a      	strb	r2, [r3, #30]
	}
}
 800edaa:	bf00      	nop
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	200014a8 	.word	0x200014a8

0800edbc <CommManager_Initialize>:
}CommunicationData_t;

static CommunicationData_t kCommData;

void CommManager_Initialize()
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0
	kCommData.bInitialized = true;
 800edc0:	4b03      	ldr	r3, [pc, #12]	; (800edd0 <CommManager_Initialize+0x14>)
 800edc2:	2201      	movs	r2, #1
 800edc4:	701a      	strb	r2, [r3, #0]
	CommManager_FlushFrame();
 800edc6:	f000 f917 	bl	800eff8 <CommManager_FlushFrame>
}
 800edca:	bf00      	nop
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	200014c8 	.word	0x200014c8

0800edd4 <CommManager_Operate>:
void CommManager_Operate()
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
	bool bResult;
	float * pfPointer;
	float fValue;

	if(kCommData.bInitialized)
 800edda:	4b64      	ldr	r3, [pc, #400]	; (800ef6c <CommManager_Operate+0x198>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f000 80ba 	beq.w	800ef58 <CommManager_Operate+0x184>
	{

		switch (kCommData.eState)
 800ede4:	4b61      	ldr	r3, [pc, #388]	; (800ef6c <CommManager_Operate+0x198>)
 800ede6:	7a1b      	ldrb	r3, [r3, #8]
 800ede8:	2b07      	cmp	r3, #7
 800edea:	f200 80b7 	bhi.w	800ef5c <CommManager_Operate+0x188>
 800edee:	a201      	add	r2, pc, #4	; (adr r2, 800edf4 <CommManager_Operate+0x20>)
 800edf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf4:	0800ee15 	.word	0x0800ee15
 800edf8:	0800ef5d 	.word	0x0800ef5d
 800edfc:	0800ee1d 	.word	0x0800ee1d
 800ee00:	0800ee39 	.word	0x0800ee39
 800ee04:	0800ee6f 	.word	0x0800ee6f
 800ee08:	0800ee8b 	.word	0x0800ee8b
 800ee0c:	0800ef5d 	.word	0x0800ef5d
 800ee10:	0800ef3f 	.word	0x0800ef3f
		{
		case Comm_Initialized:

			kCommData.eState = Comm_Idle;
 800ee14:	4b55      	ldr	r3, [pc, #340]	; (800ef6c <CommManager_Operate+0x198>)
 800ee16:	2201      	movs	r2, #1
 800ee18:	721a      	strb	r2, [r3, #8]
			break;
 800ee1a:	e0a2      	b.n	800ef62 <CommManager_Operate+0x18e>

			//Wait for new Arm_Transmission call
			break;
		case Comm_OpenTransmission:

			kCommData.u8Frame[0] = dOpeningByte;
 800ee1c:	4b53      	ldr	r3, [pc, #332]	; (800ef6c <CommManager_Operate+0x198>)
 800ee1e:	220a      	movs	r2, #10
 800ee20:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800ee22:	4b52      	ldr	r3, [pc, #328]	; (800ef6c <CommManager_Operate+0x198>)
 800ee24:	2201      	movs	r2, #1
 800ee26:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800ee28:	4b50      	ldr	r3, [pc, #320]	; (800ef6c <CommManager_Operate+0x198>)
 800ee2a:	7a1a      	ldrb	r2, [r3, #8]
 800ee2c:	4b4f      	ldr	r3, [pc, #316]	; (800ef6c <CommManager_Operate+0x198>)
 800ee2e:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800ee30:	4b4e      	ldr	r3, [pc, #312]	; (800ef6c <CommManager_Operate+0x198>)
 800ee32:	2205      	movs	r2, #5
 800ee34:	721a      	strb	r2, [r3, #8]
			break;
 800ee36:	e094      	b.n	800ef62 <CommManager_Operate+0x18e>
		case Comm_AssembleFrame:

			pfPointer = kCommData.pkMemoryPointer->fDataPointer;
 800ee38:	4b4c      	ldr	r3, [pc, #304]	; (800ef6c <CommManager_Operate+0x198>)
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60bb      	str	r3, [r7, #8]
			fValue = pfPointer[kCommData.u16ReadoutPointer];
 800ee40:	4b4a      	ldr	r3, [pc, #296]	; (800ef6c <CommManager_Operate+0x198>)
 800ee42:	895b      	ldrh	r3, [r3, #10]
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	68ba      	ldr	r2, [r7, #8]
 800ee48:	4413      	add	r3, r2
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	607b      	str	r3, [r7, #4]
			FrameAssembler_ConvertFloatToCharArray(kCommData.u8Frame, fValue);
 800ee4e:	ed97 0a01 	vldr	s0, [r7, #4]
 800ee52:	4847      	ldr	r0, [pc, #284]	; (800ef70 <CommManager_Operate+0x19c>)
 800ee54:	f000 f8ea 	bl	800f02c <FrameAssembler_ConvertFloatToCharArray>
			kCommData.u8CurrentFrameLength = 10;
 800ee58:	4b44      	ldr	r3, [pc, #272]	; (800ef6c <CommManager_Operate+0x198>)
 800ee5a:	220a      	movs	r2, #10
 800ee5c:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800ee5e:	4b43      	ldr	r3, [pc, #268]	; (800ef6c <CommManager_Operate+0x198>)
 800ee60:	7a1a      	ldrb	r2, [r3, #8]
 800ee62:	4b42      	ldr	r3, [pc, #264]	; (800ef6c <CommManager_Operate+0x198>)
 800ee64:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800ee66:	4b41      	ldr	r3, [pc, #260]	; (800ef6c <CommManager_Operate+0x198>)
 800ee68:	2205      	movs	r2, #5
 800ee6a:	721a      	strb	r2, [r3, #8]
			break;
 800ee6c:	e079      	b.n	800ef62 <CommManager_Operate+0x18e>
		case Comm_CloseTransmission:

			kCommData.u8Frame[0] = dClosingByte;
 800ee6e:	4b3f      	ldr	r3, [pc, #252]	; (800ef6c <CommManager_Operate+0x198>)
 800ee70:	220d      	movs	r2, #13
 800ee72:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800ee74:	4b3d      	ldr	r3, [pc, #244]	; (800ef6c <CommManager_Operate+0x198>)
 800ee76:	2201      	movs	r2, #1
 800ee78:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800ee7a:	4b3c      	ldr	r3, [pc, #240]	; (800ef6c <CommManager_Operate+0x198>)
 800ee7c:	7a1a      	ldrb	r2, [r3, #8]
 800ee7e:	4b3b      	ldr	r3, [pc, #236]	; (800ef6c <CommManager_Operate+0x198>)
 800ee80:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800ee82:	4b3a      	ldr	r3, [pc, #232]	; (800ef6c <CommManager_Operate+0x198>)
 800ee84:	2205      	movs	r2, #5
 800ee86:	721a      	strb	r2, [r3, #8]
			break;
 800ee88:	e06b      	b.n	800ef62 <CommManager_Operate+0x18e>
		case Comm_Transmit:

			bResult = USB_TransmitData(kCommData.u8Frame, kCommData.u8CurrentFrameLength);
 800ee8a:	4b38      	ldr	r3, [pc, #224]	; (800ef6c <CommManager_Operate+0x198>)
 800ee8c:	7d9b      	ldrb	r3, [r3, #22]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4837      	ldr	r0, [pc, #220]	; (800ef70 <CommManager_Operate+0x19c>)
 800ee92:	f000 f8f1 	bl	800f078 <USB_TransmitData>
 800ee96:	4603      	mov	r3, r0
 800ee98:	73fb      	strb	r3, [r7, #15]
			if( !bResult )
 800ee9a:	7bfb      	ldrb	r3, [r7, #15]
 800ee9c:	f083 0301 	eor.w	r3, r3, #1
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d039      	beq.n	800ef1a <CommManager_Operate+0x146>
			{
				kCommData.u8TrialsCounter = 0;
 800eea6:	4b31      	ldr	r3, [pc, #196]	; (800ef6c <CommManager_Operate+0x198>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	75da      	strb	r2, [r3, #23]
				if ( kCommData.ePreviousState == Comm_AssembleFrame )
 800eeac:	4b2f      	ldr	r3, [pc, #188]	; (800ef6c <CommManager_Operate+0x198>)
 800eeae:	7a5b      	ldrb	r3, [r3, #9]
 800eeb0:	2b03      	cmp	r3, #3
 800eeb2:	d113      	bne.n	800eedc <CommManager_Operate+0x108>
				{
					kCommData.u16ReadoutPointer++;
 800eeb4:	4b2d      	ldr	r3, [pc, #180]	; (800ef6c <CommManager_Operate+0x198>)
 800eeb6:	895b      	ldrh	r3, [r3, #10]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	4b2b      	ldr	r3, [pc, #172]	; (800ef6c <CommManager_Operate+0x198>)
 800eebe:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800eec0:	4b2a      	ldr	r3, [pc, #168]	; (800ef6c <CommManager_Operate+0x198>)
 800eec2:	2203      	movs	r2, #3
 800eec4:	721a      	strb	r2, [r3, #8]
					if( kCommData.u16ReadoutPointer >= dMemoryWidth)
 800eec6:	4b29      	ldr	r3, [pc, #164]	; (800ef6c <CommManager_Operate+0x198>)
 800eec8:	895b      	ldrh	r3, [r3, #10]
 800eeca:	2b0f      	cmp	r3, #15
 800eecc:	d948      	bls.n	800ef60 <CommManager_Operate+0x18c>
					{
						kCommData.eState = Comm_CloseTransmission;
 800eece:	4b27      	ldr	r3, [pc, #156]	; (800ef6c <CommManager_Operate+0x198>)
 800eed0:	2204      	movs	r2, #4
 800eed2:	721a      	strb	r2, [r3, #8]
						kCommData.u16ReadoutPointer = 0;
 800eed4:	4b25      	ldr	r3, [pc, #148]	; (800ef6c <CommManager_Operate+0x198>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	815a      	strh	r2, [r3, #10]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
				{
					kCommData.eState = Comm_Abort;
				}
			}
			break;
 800eeda:	e041      	b.n	800ef60 <CommManager_Operate+0x18c>
				else if( kCommData.ePreviousState == Comm_CloseTransmission)
 800eedc:	4b23      	ldr	r3, [pc, #140]	; (800ef6c <CommManager_Operate+0x198>)
 800eede:	7a5b      	ldrb	r3, [r3, #9]
 800eee0:	2b04      	cmp	r3, #4
 800eee2:	d107      	bne.n	800eef4 <CommManager_Operate+0x120>
					kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSent;
 800eee4:	4b21      	ldr	r3, [pc, #132]	; (800ef6c <CommManager_Operate+0x198>)
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	2202      	movs	r2, #2
 800eeea:	715a      	strb	r2, [r3, #5]
					kCommData.eState = Comm_Idle;
 800eeec:	4b1f      	ldr	r3, [pc, #124]	; (800ef6c <CommManager_Operate+0x198>)
 800eeee:	2201      	movs	r2, #1
 800eef0:	721a      	strb	r2, [r3, #8]
			break;
 800eef2:	e035      	b.n	800ef60 <CommManager_Operate+0x18c>
				else if ( kCommData.ePreviousState == Comm_OpenTransmission )
 800eef4:	4b1d      	ldr	r3, [pc, #116]	; (800ef6c <CommManager_Operate+0x198>)
 800eef6:	7a5b      	ldrb	r3, [r3, #9]
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d106      	bne.n	800ef0a <CommManager_Operate+0x136>
					kCommData.u16ReadoutPointer = 0;
 800eefc:	4b1b      	ldr	r3, [pc, #108]	; (800ef6c <CommManager_Operate+0x198>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800ef02:	4b1a      	ldr	r3, [pc, #104]	; (800ef6c <CommManager_Operate+0x198>)
 800ef04:	2203      	movs	r2, #3
 800ef06:	721a      	strb	r2, [r3, #8]
			break;
 800ef08:	e02a      	b.n	800ef60 <CommManager_Operate+0x18c>
					AssertError(AppError_TransmissionLogicBroken);
 800ef0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ef0e:	f7ff f9d5 	bl	800e2bc <AssertError>
					kCommData.eState = Comm_Abort;
 800ef12:	4b16      	ldr	r3, [pc, #88]	; (800ef6c <CommManager_Operate+0x198>)
 800ef14:	2207      	movs	r2, #7
 800ef16:	721a      	strb	r2, [r3, #8]
			break;
 800ef18:	e022      	b.n	800ef60 <CommManager_Operate+0x18c>
				kCommData.eState = kCommData.ePreviousState;
 800ef1a:	4b14      	ldr	r3, [pc, #80]	; (800ef6c <CommManager_Operate+0x198>)
 800ef1c:	7a5a      	ldrb	r2, [r3, #9]
 800ef1e:	4b13      	ldr	r3, [pc, #76]	; (800ef6c <CommManager_Operate+0x198>)
 800ef20:	721a      	strb	r2, [r3, #8]
				kCommData.u8TrialsCounter++;
 800ef22:	4b12      	ldr	r3, [pc, #72]	; (800ef6c <CommManager_Operate+0x198>)
 800ef24:	7ddb      	ldrb	r3, [r3, #23]
 800ef26:	3301      	adds	r3, #1
 800ef28:	b2da      	uxtb	r2, r3
 800ef2a:	4b10      	ldr	r3, [pc, #64]	; (800ef6c <CommManager_Operate+0x198>)
 800ef2c:	75da      	strb	r2, [r3, #23]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
 800ef2e:	4b0f      	ldr	r3, [pc, #60]	; (800ef6c <CommManager_Operate+0x198>)
 800ef30:	7ddb      	ldrb	r3, [r3, #23]
 800ef32:	2b03      	cmp	r3, #3
 800ef34:	d914      	bls.n	800ef60 <CommManager_Operate+0x18c>
					kCommData.eState = Comm_Abort;
 800ef36:	4b0d      	ldr	r3, [pc, #52]	; (800ef6c <CommManager_Operate+0x198>)
 800ef38:	2207      	movs	r2, #7
 800ef3a:	721a      	strb	r2, [r3, #8]
			break;
 800ef3c:	e010      	b.n	800ef60 <CommManager_Operate+0x18c>
		case Comm_Receiving:

			break;
		case Comm_Abort:

			kCommData.eState = Comm_Idle;
 800ef3e:	4b0b      	ldr	r3, [pc, #44]	; (800ef6c <CommManager_Operate+0x198>)
 800ef40:	2201      	movs	r2, #1
 800ef42:	721a      	strb	r2, [r3, #8]

			kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800ef44:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <CommManager_Operate+0x198>)
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	2203      	movs	r2, #3
 800ef4a:	715a      	strb	r2, [r3, #5]
			kCommData.u16ReadoutPointer = 0;
 800ef4c:	4b07      	ldr	r3, [pc, #28]	; (800ef6c <CommManager_Operate+0x198>)
 800ef4e:	2200      	movs	r2, #0
 800ef50:	815a      	strh	r2, [r3, #10]
			CommManager_FlushFrame();
 800ef52:	f000 f851 	bl	800eff8 <CommManager_FlushFrame>
			break;
 800ef56:	e004      	b.n	800ef62 <CommManager_Operate+0x18e>
		default:

			break;
		}
	}
 800ef58:	bf00      	nop
 800ef5a:	e002      	b.n	800ef62 <CommManager_Operate+0x18e>
			break;
 800ef5c:	bf00      	nop
 800ef5e:	e000      	b.n	800ef62 <CommManager_Operate+0x18e>
			break;
 800ef60:	bf00      	nop
}
 800ef62:	bf00      	nop
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	200014c8 	.word	0x200014c8
 800ef70:	200014d4 	.word	0x200014d4

0800ef74 <CommManager_SetUSBConnectionState>:

void CommManager_SetUSBConnectionState( USBState_t eState )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	71fb      	strb	r3, [r7, #7]
	//todo: Add periodic change of the VSENSE pin
	if( eState == USB_Connected)
 800ef7e:	79fb      	ldrb	r3, [r7, #7]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d106      	bne.n	800ef92 <CommManager_SetUSBConnectionState+0x1e>
	{
		kCommData.bUSBConnected = true;
 800ef84:	4b09      	ldr	r3, [pc, #36]	; (800efac <CommManager_SetUSBConnectionState+0x38>)
 800ef86:	2201      	movs	r2, #1
 800ef88:	761a      	strb	r2, [r3, #24]
		OperateLED_C(eLED_On);
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	f7f1 fffc 	bl	8000f88 <OperateLED_C>
	{
		kCommData.bUSBConnected = false;
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
		OperateLED_C(eLED_Off);
	}
}
 800ef90:	e008      	b.n	800efa4 <CommManager_SetUSBConnectionState+0x30>
		kCommData.bUSBConnected = false;
 800ef92:	4b06      	ldr	r3, [pc, #24]	; (800efac <CommManager_SetUSBConnectionState+0x38>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	761a      	strb	r2, [r3, #24]
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
 800ef98:	4b04      	ldr	r3, [pc, #16]	; (800efac <CommManager_SetUSBConnectionState+0x38>)
 800ef9a:	2207      	movs	r2, #7
 800ef9c:	721a      	strb	r2, [r3, #8]
		OperateLED_C(eLED_Off);
 800ef9e:	2001      	movs	r0, #1
 800efa0:	f7f1 fff2 	bl	8000f88 <OperateLED_C>
}
 800efa4:	bf00      	nop
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	200014c8 	.word	0x200014c8

0800efb0 <ComManager_ArmTransmission>:

void ComManager_ArmTransmission()
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0
	DataHandler_AccessMemoryInterchange(&kCommData.pkMemoryPointer);
 800efb4:	480e      	ldr	r0, [pc, #56]	; (800eff0 <ComManager_ArmTransmission+0x40>)
 800efb6:	f7ff fb53 	bl	800e660 <DataHandler_AccessMemoryInterchange>

	if( kCommData.bUSBConnected)
 800efba:	4b0e      	ldr	r3, [pc, #56]	; (800eff4 <ComManager_ArmTransmission+0x44>)
 800efbc:	7e1b      	ldrb	r3, [r3, #24]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00f      	beq.n	800efe2 <ComManager_ArmTransmission+0x32>
	{
		if(kCommData.eState == Comm_Idle)
 800efc2:	4b0c      	ldr	r3, [pc, #48]	; (800eff4 <ComManager_ArmTransmission+0x44>)
 800efc4:	7a1b      	ldrb	r3, [r3, #8]
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d106      	bne.n	800efd8 <ComManager_ArmTransmission+0x28>
		{
			kCommData.eState = Comm_OpenTransmission;
 800efca:	4b0a      	ldr	r3, [pc, #40]	; (800eff4 <ComManager_ArmTransmission+0x44>)
 800efcc:	2202      	movs	r2, #2
 800efce:	721a      	strb	r2, [r3, #8]
			kCommData.u16ReadoutPointer = 0;
 800efd0:	4b08      	ldr	r3, [pc, #32]	; (800eff4 <ComManager_ArmTransmission+0x44>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	815a      	strh	r2, [r3, #10]
	else
	{
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
	}

}
 800efd6:	e008      	b.n	800efea <ComManager_ArmTransmission+0x3a>
			AssertError(AppError_TransmissionOverlap);
 800efd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800efdc:	f7ff f96e 	bl	800e2bc <AssertError>
}
 800efe0:	e003      	b.n	800efea <ComManager_ArmTransmission+0x3a>
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800efe2:	4b04      	ldr	r3, [pc, #16]	; (800eff4 <ComManager_ArmTransmission+0x44>)
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	2203      	movs	r2, #3
 800efe8:	715a      	strb	r2, [r3, #5]
}
 800efea:	bf00      	nop
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	200014cc 	.word	0x200014cc
 800eff4:	200014c8 	.word	0x200014c8

0800eff8 <CommManager_FlushFrame>:

/* Internal functions */

void CommManager_FlushFrame()
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800effe:	2300      	movs	r3, #0
 800f000:	71fb      	strb	r3, [r7, #7]
 800f002:	e007      	b.n	800f014 <CommManager_FlushFrame+0x1c>
	{
		kCommData.u8Frame[u8Idx] = 0;
 800f004:	79fb      	ldrb	r3, [r7, #7]
 800f006:	4a08      	ldr	r2, [pc, #32]	; (800f028 <CommManager_FlushFrame+0x30>)
 800f008:	4413      	add	r3, r2
 800f00a:	2200      	movs	r2, #0
 800f00c:	731a      	strb	r2, [r3, #12]
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800f00e:	79fb      	ldrb	r3, [r7, #7]
 800f010:	3301      	adds	r3, #1
 800f012:	71fb      	strb	r3, [r7, #7]
 800f014:	79fb      	ldrb	r3, [r7, #7]
 800f016:	2b09      	cmp	r3, #9
 800f018:	d9f4      	bls.n	800f004 <CommManager_FlushFrame+0xc>
	}
}
 800f01a:	bf00      	nop
 800f01c:	bf00      	nop
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	200014c8 	.word	0x200014c8

0800f02c <FrameAssembler_ConvertFloatToCharArray>:

#include "FrameAssembler.h"
#include <stdio.h>

void FrameAssembler_ConvertFloatToCharArray(uint8_t *pResultArray, float fNumber)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	ed87 0a00 	vstr	s0, [r7]
	sprintf((char*)pResultArray,"%+8.4f \t",fNumber);
 800f038:	6838      	ldr	r0, [r7, #0]
 800f03a:	f7f1 fa8d 	bl	8000558 <__aeabi_f2d>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	4904      	ldr	r1, [pc, #16]	; (800f054 <FrameAssembler_ConvertFloatToCharArray+0x28>)
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f002 fc27 	bl	8011898 <siprintf>
}
 800f04a:	bf00      	nop
 800f04c:	3708      	adds	r7, #8
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	08013da8 	.word	0x08013da8

0800f058 <USB_InitalizeTransmitterLogic>:
//static uint8_t Buf[] = "Test/r/n";

void ConvertDataToBytes(float *Dataset);

void USB_InitalizeTransmitterLogic()
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	af00      	add	r7, sp, #0
	kUSBTransmitterData.phADCHandle = HandlesAssigner_GetHandle(eHandle_ADC);
 800f05c:	2005      	movs	r0, #5
 800f05e:	f7ff fc39 	bl	800e8d4 <HandlesAssigner_GetHandle>
 800f062:	4603      	mov	r3, r0
 800f064:	4a03      	ldr	r2, [pc, #12]	; (800f074 <USB_InitalizeTransmitterLogic+0x1c>)
 800f066:	6093      	str	r3, [r2, #8]
	kUSBTransmitterData.bInitialized = true;
 800f068:	4b02      	ldr	r3, [pc, #8]	; (800f074 <USB_InitalizeTransmitterLogic+0x1c>)
 800f06a:	2201      	movs	r2, #1
 800f06c:	701a      	strb	r2, [r3, #0]
}
 800f06e:	bf00      	nop
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	200014e4 	.word	0x200014e4

0800f078 <USB_TransmitData>:

bool USB_TransmitData(uint8_t *Dataset, uint8_t u8Length)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	460b      	mov	r3, r1
 800f082:	70fb      	strb	r3, [r7, #3]
	bool bResult = true;
 800f084:	2301      	movs	r3, #1
 800f086:	73fb      	strb	r3, [r7, #15]

	if(kUSBTransmitterData.bInitialized)
 800f088:	4b0a      	ldr	r3, [pc, #40]	; (800f0b4 <USB_TransmitData+0x3c>)
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00b      	beq.n	800f0a8 <USB_TransmitData+0x30>
	{
	/*
	 * result = true means that a fault occurred
	 */
	bResult = CDC_Transmit_FS(Dataset,  u8Length);
 800f090:	78fb      	ldrb	r3, [r7, #3]
 800f092:	b29b      	uxth	r3, r3
 800f094:	4619      	mov	r1, r3
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f001 faec 	bl	8010674 <CDC_Transmit_FS>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	bf14      	ite	ne
 800f0a2:	2301      	movne	r3, #1
 800f0a4:	2300      	moveq	r3, #0
 800f0a6:	73fb      	strb	r3, [r7, #15]
	}
	return bResult;
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	200014e4 	.word	0x200014e4

0800f0b8 <USB_CheckForUSBConnection>:

void USB_CheckForUSBConnection()
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	af00      	add	r7, sp, #0
	if( kUSBTransmitterData.bInitialized )
 800f0bc:	4b1e      	ldr	r3, [pc, #120]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d037      	beq.n	800f134 <USB_CheckForUSBConnection+0x7c>
	{
		if( !kUSBTransmitterData.bCheckStarted )
 800f0c4:	4b1c      	ldr	r3, [pc, #112]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0c6:	785b      	ldrb	r3, [r3, #1]
 800f0c8:	f083 0301 	eor.w	r3, r3, #1
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d007      	beq.n	800f0e2 <USB_CheckForUSBConnection+0x2a>
		{
			HAL_ADC_Start_IT(kUSBTransmitterData.phADCHandle);
 800f0d2:	4b19      	ldr	r3, [pc, #100]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7f2 f8a6 	bl	8001228 <HAL_ADC_Start_IT>
			kUSBTransmitterData.bCheckStarted = true;
 800f0dc:	4b16      	ldr	r3, [pc, #88]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0de:	2201      	movs	r2, #1
 800f0e0:	705a      	strb	r2, [r3, #1]
		}

		if( kUSBTransmitterData.bNewMeasurement )
 800f0e2:	4b15      	ldr	r3, [pc, #84]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0e4:	789b      	ldrb	r3, [r3, #2]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d024      	beq.n	800f134 <USB_CheckForUSBConnection+0x7c>
		{
			kUSBTransmitterData.bNewMeasurement = false;
 800f0ea:	4b13      	ldr	r3, [pc, #76]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	709a      	strb	r2, [r3, #2]
			if( (kUSBTransmitterData.u32MeasuredVbus < dLowThreshold) && kUSBTransmitterData.bConnected )
 800f0f0:	4b11      	ldr	r3, [pc, #68]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0f2:	889b      	ldrh	r3, [r3, #4]
 800f0f4:	f640 429a 	movw	r2, #3226	; 0xc9a
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d809      	bhi.n	800f110 <USB_CheckForUSBConnection+0x58>
 800f0fc:	4b0e      	ldr	r3, [pc, #56]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f0fe:	78db      	ldrb	r3, [r3, #3]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d005      	beq.n	800f110 <USB_CheckForUSBConnection+0x58>
			{
				kUSBTransmitterData.bConnected = false;
 800f104:	4b0c      	ldr	r3, [pc, #48]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f106:	2200      	movs	r2, #0
 800f108:	70da      	strb	r2, [r3, #3]
				CallForUSBDisonnection();
 800f10a:	f7ff fc33 	bl	800e974 <CallForUSBDisonnection>
				CallForUSBConnection();
			}
		}
	}

}
 800f10e:	e011      	b.n	800f134 <USB_CheckForUSBConnection+0x7c>
			else if ( (kUSBTransmitterData.u32MeasuredVbus > dHighThreshold) && !kUSBTransmitterData.bConnected )
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f112:	889b      	ldrh	r3, [r3, #4]
 800f114:	f640 5217 	movw	r2, #3351	; 0xd17
 800f118:	4293      	cmp	r3, r2
 800f11a:	d90b      	bls.n	800f134 <USB_CheckForUSBConnection+0x7c>
 800f11c:	4b06      	ldr	r3, [pc, #24]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f11e:	78db      	ldrb	r3, [r3, #3]
 800f120:	f083 0301 	eor.w	r3, r3, #1
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b00      	cmp	r3, #0
 800f128:	d004      	beq.n	800f134 <USB_CheckForUSBConnection+0x7c>
				kUSBTransmitterData.bConnected = true;
 800f12a:	4b03      	ldr	r3, [pc, #12]	; (800f138 <USB_CheckForUSBConnection+0x80>)
 800f12c:	2201      	movs	r2, #1
 800f12e:	70da      	strb	r2, [r3, #3]
				CallForUSBConnection();
 800f130:	f7ff fc19 	bl	800e966 <CallForUSBConnection>
}
 800f134:	bf00      	nop
 800f136:	bd80      	pop	{r7, pc}
 800f138:	200014e4 	.word	0x200014e4

0800f13c <USB_SignalizeVBUSMeasurementReady>:

void USB_SignalizeVBUSMeasurementReady(uint32_t u32Result)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
	kUSBTransmitterData.bNewMeasurement = true;
 800f144:	4b07      	ldr	r3, [pc, #28]	; (800f164 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800f146:	2201      	movs	r2, #1
 800f148:	709a      	strb	r2, [r3, #2]
	kUSBTransmitterData.u32MeasuredVbus = u32Result;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	4b05      	ldr	r3, [pc, #20]	; (800f164 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800f150:	809a      	strh	r2, [r3, #4]
	kUSBTransmitterData.bCheckStarted = false;
 800f152:	4b04      	ldr	r3, [pc, #16]	; (800f164 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800f154:	2200      	movs	r2, #0
 800f156:	705a      	strb	r2, [r3, #1]
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	200014e4 	.word	0x200014e4

0800f168 <SignalProcessing_Initialize>:
static SignalProcessingData_t kSignalProcessingData;

static void SignalProcessing_ResetChannels();

void SignalProcessing_Initialize(uint8_t u8Channels)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	71fb      	strb	r3, [r7, #7]
	kSignalProcessingData.bEnabled = true;
 800f172:	4b06      	ldr	r3, [pc, #24]	; (800f18c <SignalProcessing_Initialize+0x24>)
 800f174:	2201      	movs	r2, #1
 800f176:	701a      	strb	r2, [r3, #0]
	kSignalProcessingData.u8ChannelCount = u8Channels;
 800f178:	4a04      	ldr	r2, [pc, #16]	; (800f18c <SignalProcessing_Initialize+0x24>)
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	7093      	strb	r3, [r2, #2]
}
 800f17e:	bf00      	nop
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	200014f0 	.word	0x200014f0

0800f190 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f19a:	f000 f896 	bl	800f2ca <BSP_SD_IsDetected>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d001      	beq.n	800f1a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e012      	b.n	800f1ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f1a8:	480b      	ldr	r0, [pc, #44]	; (800f1d8 <BSP_SD_Init+0x48>)
 800f1aa:	f7f7 fe7a 	bl	8006ea2 <HAL_SD_Init>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f1b2:	79fb      	ldrb	r3, [r7, #7]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d109      	bne.n	800f1cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800f1b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f1bc:	4806      	ldr	r0, [pc, #24]	; (800f1d8 <BSP_SD_Init+0x48>)
 800f1be:	f7f8 fc47 	bl	8007a50 <HAL_SD_ConfigWideBusOperation>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d001      	beq.n	800f1cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f1cc:	79fb      	ldrb	r3, [r7, #7]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20002048 	.word	0x20002048

0800f1dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	68f9      	ldr	r1, [r7, #12]
 800f1f2:	4806      	ldr	r0, [pc, #24]	; (800f20c <BSP_SD_ReadBlocks_DMA+0x30>)
 800f1f4:	f7f7 ff04 	bl	8007000 <HAL_SD_ReadBlocks_DMA>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f202:	7dfb      	ldrb	r3, [r7, #23]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20002048 	.word	0x20002048

0800f210 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f21c:	2300      	movs	r3, #0
 800f21e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	68f9      	ldr	r1, [r7, #12]
 800f226:	4806      	ldr	r0, [pc, #24]	; (800f240 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f228:	f7f7 ffcc 	bl	80071c4 <HAL_SD_WriteBlocks_DMA>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f236:	7dfb      	ldrb	r3, [r7, #23]
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3718      	adds	r7, #24
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	20002048 	.word	0x20002048

0800f244 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f248:	4805      	ldr	r0, [pc, #20]	; (800f260 <BSP_SD_GetCardState+0x1c>)
 800f24a:	f7f8 fc9b 	bl	8007b84 <HAL_SD_GetCardState>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b04      	cmp	r3, #4
 800f252:	bf14      	ite	ne
 800f254:	2301      	movne	r3, #1
 800f256:	2300      	moveq	r3, #0
 800f258:	b2db      	uxtb	r3, r3
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	20002048 	.word	0x20002048

0800f264 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f26c:	6879      	ldr	r1, [r7, #4]
 800f26e:	4803      	ldr	r0, [pc, #12]	; (800f27c <BSP_SD_GetCardInfo+0x18>)
 800f270:	f7f8 fbc2 	bl	80079f8 <HAL_SD_GetCardInfo>
}
 800f274:	bf00      	nop
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	20002048 	.word	0x20002048

0800f280 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800f288:	f000 f818 	bl	800f2bc <BSP_SD_AbortCallback>
}
 800f28c:	bf00      	nop
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f29c:	f000 fd2a 	bl	800fcf4 <BSP_SD_WriteCpltCallback>
}
 800f2a0:	bf00      	nop
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f2b0:	f000 fd2c 	bl	800fd0c <BSP_SD_ReadCpltCallback>
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	af00      	add	r7, sp, #0

}
 800f2c0:	bf00      	nop
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f2d4:	f000 f81e 	bl	800f314 <BSP_PlatformIsDetected>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d101      	bne.n	800f2e2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	b2db      	uxtb	r3, r3
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f2f4:	4904      	ldr	r1, [pc, #16]	; (800f308 <MX_FATFS_Init+0x18>)
 800f2f6:	4805      	ldr	r0, [pc, #20]	; (800f30c <MX_FATFS_Init+0x1c>)
 800f2f8:	f7fe fe6e 	bl	800dfd8 <FATFS_LinkDriver>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	461a      	mov	r2, r3
 800f300:	4b03      	ldr	r3, [pc, #12]	; (800f310 <MX_FATFS_Init+0x20>)
 800f302:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f304:	bf00      	nop
 800f306:	bd80      	pop	{r7, pc}
 800f308:	20001970 	.word	0x20001970
 800f30c:	08013e24 	.word	0x08013e24
 800f310:	2000196c 	.word	0x2000196c

0800f314 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f31a:	2301      	movs	r3, #1
 800f31c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f31e:	2180      	movs	r1, #128	; 0x80
 800f320:	4807      	ldr	r0, [pc, #28]	; (800f340 <BSP_PlatformIsDetected+0x2c>)
 800f322:	f7f3 fa25 	bl	8002770 <HAL_GPIO_ReadPin>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f32c:	2300      	movs	r3, #0
 800f32e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT; // inserted here only because the SD_DETECT pin was not actually foreseen in the project
 800f330:	2301      	movs	r3, #1
 800f332:	71fb      	strb	r3, [r7, #7]
    //todo: add HW connection to SD detect
    /* USER CODE END 1 */
    return status;
 800f334:	79fb      	ldrb	r3, [r7, #7]
}
 800f336:	4618      	mov	r0, r3
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	40020800 	.word	0x40020800

0800f344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f348:	f7f1 fe94 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f34c:	f000 f82e 	bl	800f3ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f350:	f000 fa9c 	bl	800f88c <MX_GPIO_Init>
  MX_DMA_Init();
 800f354:	f000 fa5c 	bl	800f810 <MX_DMA_Init>
  MX_RTC_Init();
 800f358:	f000 f942 	bl	800f5e0 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800f35c:	f000 f99a 	bl	800f694 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800f360:	f000 f8e2 	bl	800f528 <MX_I2C1_Init>
  MX_I2C2_Init();
 800f364:	f000 f90e 	bl	800f584 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800f368:	f000 fa28 	bl	800f7bc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800f36c:	f001 f8c4 	bl	80104f8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800f370:	f000 f9b0 	bl	800f6d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 800f374:	f000 f886 	bl	800f484 <MX_ADC1_Init>
  MX_FATFS_Init();
 800f378:	f7ff ffba 	bl	800f2f0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800f37c:	2201      	movs	r2, #1
 800f37e:	2101      	movs	r1, #1
 800f380:	4809      	ldr	r0, [pc, #36]	; (800f3a8 <main+0x64>)
 800f382:	f7f3 fa0d 	bl	80027a0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800f386:	2201      	movs	r2, #1
 800f388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f38c:	4806      	ldr	r0, [pc, #24]	; (800f3a8 <main+0x64>)
 800f38e:	f7f3 fa07 	bl	80027a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800f392:	2201      	movs	r2, #1
 800f394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f398:	4803      	ldr	r0, [pc, #12]	; (800f3a8 <main+0x64>)
 800f39a:	f7f3 fa01 	bl	80027a0 <HAL_GPIO_WritePin>

  AssignHandles();
 800f39e:	f000 fb0d 	bl	800f9bc <AssignHandles>

  while (1)
  {
	  ApplicationPerform();
 800f3a2:	f7fe fe29 	bl	800dff8 <ApplicationPerform>
 800f3a6:	e7fc      	b.n	800f3a2 <main+0x5e>
 800f3a8:	40020800 	.word	0x40020800

0800f3ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b094      	sub	sp, #80	; 0x50
 800f3b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f3b2:	f107 0320 	add.w	r3, r7, #32
 800f3b6:	2230      	movs	r2, #48	; 0x30
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f001 fdfa 	bl	8010fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f3c0:	f107 030c 	add.w	r3, r7, #12
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	601a      	str	r2, [r3, #0]
 800f3c8:	605a      	str	r2, [r3, #4]
 800f3ca:	609a      	str	r2, [r3, #8]
 800f3cc:	60da      	str	r2, [r3, #12]
 800f3ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60bb      	str	r3, [r7, #8]
 800f3d4:	4b29      	ldr	r3, [pc, #164]	; (800f47c <SystemClock_Config+0xd0>)
 800f3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d8:	4a28      	ldr	r2, [pc, #160]	; (800f47c <SystemClock_Config+0xd0>)
 800f3da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3de:	6413      	str	r3, [r2, #64]	; 0x40
 800f3e0:	4b26      	ldr	r3, [pc, #152]	; (800f47c <SystemClock_Config+0xd0>)
 800f3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3e8:	60bb      	str	r3, [r7, #8]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	607b      	str	r3, [r7, #4]
 800f3f0:	4b23      	ldr	r3, [pc, #140]	; (800f480 <SystemClock_Config+0xd4>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a22      	ldr	r2, [pc, #136]	; (800f480 <SystemClock_Config+0xd4>)
 800f3f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f3fa:	6013      	str	r3, [r2, #0]
 800f3fc:	4b20      	ldr	r3, [pc, #128]	; (800f480 <SystemClock_Config+0xd4>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f404:	607b      	str	r3, [r7, #4]
 800f406:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800f408:	2305      	movs	r3, #5
 800f40a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f40c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800f412:	2301      	movs	r3, #1
 800f414:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f416:	2302      	movs	r3, #2
 800f418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f41a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f41e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800f420:	230c      	movs	r3, #12
 800f422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800f424:	2348      	movs	r3, #72	; 0x48
 800f426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f428:	2302      	movs	r3, #2
 800f42a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800f42c:	2303      	movs	r3, #3
 800f42e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f430:	f107 0320 	add.w	r3, r7, #32
 800f434:	4618      	mov	r0, r3
 800f436:	f7f6 fd6f 	bl	8005f18 <HAL_RCC_OscConfig>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d001      	beq.n	800f444 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800f440:	f000 faea 	bl	800fa18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f444:	230f      	movs	r3, #15
 800f446:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f448:	2302      	movs	r3, #2
 800f44a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f44c:	2300      	movs	r3, #0
 800f44e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800f450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f456:	2300      	movs	r3, #0
 800f458:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800f45a:	f107 030c 	add.w	r3, r7, #12
 800f45e:	2102      	movs	r1, #2
 800f460:	4618      	mov	r0, r3
 800f462:	f7f6 ffcf 	bl	8006404 <HAL_RCC_ClockConfig>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d001      	beq.n	800f470 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800f46c:	f000 fad4 	bl	800fa18 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800f470:	f7f7 f8ae 	bl	80065d0 <HAL_RCC_EnableCSS>
}
 800f474:	bf00      	nop
 800f476:	3750      	adds	r7, #80	; 0x50
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	40023800 	.word	0x40023800
 800f480:	40007000 	.word	0x40007000

0800f484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f48a:	463b      	mov	r3, r7
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]
 800f490:	605a      	str	r2, [r3, #4]
 800f492:	609a      	str	r2, [r3, #8]
 800f494:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800f496:	4b21      	ldr	r3, [pc, #132]	; (800f51c <MX_ADC1_Init+0x98>)
 800f498:	4a21      	ldr	r2, [pc, #132]	; (800f520 <MX_ADC1_Init+0x9c>)
 800f49a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800f49c:	4b1f      	ldr	r3, [pc, #124]	; (800f51c <MX_ADC1_Init+0x98>)
 800f49e:	2200      	movs	r2, #0
 800f4a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f4a2:	4b1e      	ldr	r3, [pc, #120]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800f4a8:	4b1c      	ldr	r3, [pc, #112]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800f4ae:	4b1b      	ldr	r3, [pc, #108]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f4b4:	4b19      	ldr	r3, [pc, #100]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f4bc:	4b17      	ldr	r3, [pc, #92]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f4c2:	4b16      	ldr	r3, [pc, #88]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4c4:	4a17      	ldr	r2, [pc, #92]	; (800f524 <MX_ADC1_Init+0xa0>)
 800f4c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f4c8:	4b14      	ldr	r3, [pc, #80]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800f4ce:	4b13      	ldr	r3, [pc, #76]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800f4d4:	4b11      	ldr	r3, [pc, #68]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f4dc:	4b0f      	ldr	r3, [pc, #60]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4de:	2201      	movs	r2, #1
 800f4e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f4e2:	480e      	ldr	r0, [pc, #56]	; (800f51c <MX_ADC1_Init+0x98>)
 800f4e4:	f7f1 fe5c 	bl	80011a0 <HAL_ADC_Init>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d001      	beq.n	800f4f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800f4ee:	f000 fa93 	bl	800fa18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800f4f2:	2308      	movs	r3, #8
 800f4f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f4fe:	463b      	mov	r3, r7
 800f500:	4619      	mov	r1, r3
 800f502:	4806      	ldr	r0, [pc, #24]	; (800f51c <MX_ADC1_Init+0x98>)
 800f504:	f7f2 f8ba 	bl	800167c <HAL_ADC_ConfigChannel>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800f50e:	f000 fa83 	bl	800fa18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f512:	bf00      	nop
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	20001f3c 	.word	0x20001f3c
 800f520:	40012000 	.word	0x40012000
 800f524:	0f000001 	.word	0x0f000001

0800f528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800f52c:	4b13      	ldr	r3, [pc, #76]	; (800f57c <MX_I2C1_Init+0x54>)
 800f52e:	4a14      	ldr	r2, [pc, #80]	; (800f580 <MX_I2C1_Init+0x58>)
 800f530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 800f532:	4b12      	ldr	r3, [pc, #72]	; (800f57c <MX_I2C1_Init+0x54>)
 800f534:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800f538:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f53a:	4b10      	ldr	r3, [pc, #64]	; (800f57c <MX_I2C1_Init+0x54>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800f540:	4b0e      	ldr	r3, [pc, #56]	; (800f57c <MX_I2C1_Init+0x54>)
 800f542:	2200      	movs	r2, #0
 800f544:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f546:	4b0d      	ldr	r3, [pc, #52]	; (800f57c <MX_I2C1_Init+0x54>)
 800f548:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f54c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f54e:	4b0b      	ldr	r3, [pc, #44]	; (800f57c <MX_I2C1_Init+0x54>)
 800f550:	2200      	movs	r2, #0
 800f552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800f554:	4b09      	ldr	r3, [pc, #36]	; (800f57c <MX_I2C1_Init+0x54>)
 800f556:	2200      	movs	r2, #0
 800f558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f55a:	4b08      	ldr	r3, [pc, #32]	; (800f57c <MX_I2C1_Init+0x54>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f560:	4b06      	ldr	r3, [pc, #24]	; (800f57c <MX_I2C1_Init+0x54>)
 800f562:	2200      	movs	r2, #0
 800f564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f566:	4805      	ldr	r0, [pc, #20]	; (800f57c <MX_I2C1_Init+0x54>)
 800f568:	f7f3 f972 	bl	8002850 <HAL_I2C_Init>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800f572:	f000 fa51 	bl	800fa18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800f576:	bf00      	nop
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	20001e94 	.word	0x20001e94
 800f580:	40005400 	.word	0x40005400

0800f584 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800f588:	4b13      	ldr	r3, [pc, #76]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f58a:	4a14      	ldr	r2, [pc, #80]	; (800f5dc <MX_I2C2_Init+0x58>)
 800f58c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 25000;
 800f58e:	4b12      	ldr	r3, [pc, #72]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f590:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800f594:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f596:	4b10      	ldr	r3, [pc, #64]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f598:	2200      	movs	r2, #0
 800f59a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800f59c:	4b0e      	ldr	r3, [pc, #56]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f59e:	2200      	movs	r2, #0
 800f5a0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f5a2:	4b0d      	ldr	r3, [pc, #52]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f5a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f5a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f5aa:	4b0b      	ldr	r3, [pc, #44]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800f5b0:	4b09      	ldr	r3, [pc, #36]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f5b6:	4b08      	ldr	r3, [pc, #32]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f5bc:	4b06      	ldr	r3, [pc, #24]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f5be:	2200      	movs	r2, #0
 800f5c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f5c2:	4805      	ldr	r0, [pc, #20]	; (800f5d8 <MX_I2C2_Init+0x54>)
 800f5c4:	f7f3 f944 	bl	8002850 <HAL_I2C_Init>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d001      	beq.n	800f5d2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800f5ce:	f000 fa23 	bl	800fa18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800f5d2:	bf00      	nop
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	20001ee8 	.word	0x20001ee8
 800f5dc:	40005800 	.word	0x40005800

0800f5e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800f5e6:	1d3b      	adds	r3, r7, #4
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	601a      	str	r2, [r3, #0]
 800f5ec:	605a      	str	r2, [r3, #4]
 800f5ee:	609a      	str	r2, [r3, #8]
 800f5f0:	60da      	str	r2, [r3, #12]
 800f5f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800f5f8:	4b24      	ldr	r3, [pc, #144]	; (800f68c <MX_RTC_Init+0xac>)
 800f5fa:	4a25      	ldr	r2, [pc, #148]	; (800f690 <MX_RTC_Init+0xb0>)
 800f5fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800f5fe:	4b23      	ldr	r3, [pc, #140]	; (800f68c <MX_RTC_Init+0xac>)
 800f600:	2200      	movs	r2, #0
 800f602:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800f604:	4b21      	ldr	r3, [pc, #132]	; (800f68c <MX_RTC_Init+0xac>)
 800f606:	227f      	movs	r2, #127	; 0x7f
 800f608:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800f60a:	4b20      	ldr	r3, [pc, #128]	; (800f68c <MX_RTC_Init+0xac>)
 800f60c:	22ff      	movs	r2, #255	; 0xff
 800f60e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f610:	4b1e      	ldr	r3, [pc, #120]	; (800f68c <MX_RTC_Init+0xac>)
 800f612:	2200      	movs	r2, #0
 800f614:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f616:	4b1d      	ldr	r3, [pc, #116]	; (800f68c <MX_RTC_Init+0xac>)
 800f618:	2200      	movs	r2, #0
 800f61a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f61c:	4b1b      	ldr	r3, [pc, #108]	; (800f68c <MX_RTC_Init+0xac>)
 800f61e:	2200      	movs	r2, #0
 800f620:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800f622:	481a      	ldr	r0, [pc, #104]	; (800f68c <MX_RTC_Init+0xac>)
 800f624:	f7f7 f9d6 	bl	80069d4 <HAL_RTC_Init>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d001      	beq.n	800f632 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800f62e:	f000 f9f3 	bl	800fa18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800f632:	2300      	movs	r3, #0
 800f634:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800f636:	2300      	movs	r3, #0
 800f638:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800f63a:	2300      	movs	r3, #0
 800f63c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f63e:	2300      	movs	r3, #0
 800f640:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800f642:	2300      	movs	r3, #0
 800f644:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800f646:	1d3b      	adds	r3, r7, #4
 800f648:	2201      	movs	r2, #1
 800f64a:	4619      	mov	r1, r3
 800f64c:	480f      	ldr	r0, [pc, #60]	; (800f68c <MX_RTC_Init+0xac>)
 800f64e:	f7f7 fa52 	bl	8006af6 <HAL_RTC_SetTime>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800f658:	f000 f9de 	bl	800fa18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800f65c:	2301      	movs	r3, #1
 800f65e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 800f660:	2312      	movs	r3, #18
 800f662:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 800f664:	2327      	movs	r3, #39	; 0x27
 800f666:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 800f668:	2321      	movs	r3, #33	; 0x21
 800f66a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800f66c:	463b      	mov	r3, r7
 800f66e:	2201      	movs	r2, #1
 800f670:	4619      	mov	r1, r3
 800f672:	4806      	ldr	r0, [pc, #24]	; (800f68c <MX_RTC_Init+0xac>)
 800f674:	f7f7 fafc 	bl	8006c70 <HAL_RTC_SetDate>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d001      	beq.n	800f682 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800f67e:	f000 f9cb 	bl	800fa18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800f682:	bf00      	nop
 800f684:	3718      	adds	r7, #24
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	20001fc8 	.word	0x20001fc8
 800f690:	40002800 	.word	0x40002800

0800f694 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800f694:	b480      	push	{r7}
 800f696:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800f698:	4b0c      	ldr	r3, [pc, #48]	; (800f6cc <MX_SDIO_SD_Init+0x38>)
 800f69a:	4a0d      	ldr	r2, [pc, #52]	; (800f6d0 <MX_SDIO_SD_Init+0x3c>)
 800f69c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800f69e:	4b0b      	ldr	r3, [pc, #44]	; (800f6cc <MX_SDIO_SD_Init+0x38>)
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800f6a4:	4b09      	ldr	r3, [pc, #36]	; (800f6cc <MX_SDIO_SD_Init+0x38>)
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800f6aa:	4b08      	ldr	r3, [pc, #32]	; (800f6cc <MX_SDIO_SD_Init+0x38>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800f6b0:	4b06      	ldr	r3, [pc, #24]	; (800f6cc <MX_SDIO_SD_Init+0x38>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800f6b6:	4b05      	ldr	r3, [pc, #20]	; (800f6cc <MX_SDIO_SD_Init+0x38>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800f6bc:	4b03      	ldr	r3, [pc, #12]	; (800f6cc <MX_SDIO_SD_Init+0x38>)
 800f6be:	2204      	movs	r2, #4
 800f6c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800f6c2:	bf00      	nop
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	20002048 	.word	0x20002048
 800f6d0:	40012c00 	.word	0x40012c00

0800f6d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b08e      	sub	sp, #56	; 0x38
 800f6d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f6da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6de:	2200      	movs	r2, #0
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	605a      	str	r2, [r3, #4]
 800f6e4:	609a      	str	r2, [r3, #8]
 800f6e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f6e8:	f107 0320 	add.w	r3, r7, #32
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f6f2:	1d3b      	adds	r3, r7, #4
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	601a      	str	r2, [r3, #0]
 800f6f8:	605a      	str	r2, [r3, #4]
 800f6fa:	609a      	str	r2, [r3, #8]
 800f6fc:	60da      	str	r2, [r3, #12]
 800f6fe:	611a      	str	r2, [r3, #16]
 800f700:	615a      	str	r2, [r3, #20]
 800f702:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800f704:	4b2b      	ldr	r3, [pc, #172]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f70a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800f70c:	4b29      	ldr	r3, [pc, #164]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f70e:	2248      	movs	r2, #72	; 0x48
 800f710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f712:	4b28      	ldr	r3, [pc, #160]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f714:	2200      	movs	r2, #0
 800f716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250000;
 800f718:	4b26      	ldr	r3, [pc, #152]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f71a:	4a27      	ldr	r2, [pc, #156]	; (800f7b8 <MX_TIM2_Init+0xe4>)
 800f71c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f71e:	4b25      	ldr	r3, [pc, #148]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f720:	2200      	movs	r2, #0
 800f722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f724:	4b23      	ldr	r3, [pc, #140]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f726:	2280      	movs	r2, #128	; 0x80
 800f728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800f72a:	4822      	ldr	r0, [pc, #136]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f72c:	f7f8 fee9 	bl	8008502 <HAL_TIM_Base_Init>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d001      	beq.n	800f73a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800f736:	f000 f96f 	bl	800fa18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f73e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800f740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f744:	4619      	mov	r1, r3
 800f746:	481b      	ldr	r0, [pc, #108]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f748:	f7f9 f94a 	bl	80089e0 <HAL_TIM_ConfigClockSource>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d001      	beq.n	800f756 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800f752:	f000 f961 	bl	800fa18 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800f756:	4817      	ldr	r0, [pc, #92]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f758:	f7f8 ff84 	bl	8008664 <HAL_TIM_OC_Init>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800f762:	f000 f959 	bl	800fa18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f766:	2300      	movs	r3, #0
 800f768:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f76a:	2300      	movs	r3, #0
 800f76c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800f76e:	f107 0320 	add.w	r3, r7, #32
 800f772:	4619      	mov	r1, r3
 800f774:	480f      	ldr	r0, [pc, #60]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f776:	f7f9 fcd3 	bl	8009120 <HAL_TIMEx_MasterConfigSynchronization>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800f780:	f000 f94a 	bl	800fa18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800f784:	2300      	movs	r3, #0
 800f786:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f790:	2300      	movs	r3, #0
 800f792:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f794:	1d3b      	adds	r3, r7, #4
 800f796:	2200      	movs	r2, #0
 800f798:	4619      	mov	r1, r3
 800f79a:	4806      	ldr	r0, [pc, #24]	; (800f7b4 <MX_TIM2_Init+0xe0>)
 800f79c:	f7f9 f8c4 	bl	8008928 <HAL_TIM_OC_ConfigChannel>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d001      	beq.n	800f7aa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800f7a6:	f000 f937 	bl	800fa18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800f7aa:	bf00      	nop
 800f7ac:	3738      	adds	r7, #56	; 0x38
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	200020cc 	.word	0x200020cc
 800f7b8:	0003d090 	.word	0x0003d090

0800f7bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800f7c0:	4b11      	ldr	r3, [pc, #68]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7c2:	4a12      	ldr	r2, [pc, #72]	; (800f80c <MX_USART1_UART_Init+0x50>)
 800f7c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800f7c6:	4b10      	ldr	r3, [pc, #64]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f7cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f7ce:	4b0e      	ldr	r3, [pc, #56]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f7d4:	4b0c      	ldr	r3, [pc, #48]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f7da:	4b0b      	ldr	r3, [pc, #44]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800f7e0:	4b09      	ldr	r3, [pc, #36]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7e2:	220c      	movs	r2, #12
 800f7e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f7e6:	4b08      	ldr	r3, [pc, #32]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f7ec:	4b06      	ldr	r3, [pc, #24]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f7f2:	4805      	ldr	r0, [pc, #20]	; (800f808 <MX_USART1_UART_Init+0x4c>)
 800f7f4:	f7f9 fd16 	bl	8009224 <HAL_UART_Init>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800f7fe:	f000 f90b 	bl	800fa18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800f802:	bf00      	nop
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	20001f84 	.word	0x20001f84
 800f80c:	40011000 	.word	0x40011000

0800f810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f816:	2300      	movs	r3, #0
 800f818:	607b      	str	r3, [r7, #4]
 800f81a:	4b1b      	ldr	r3, [pc, #108]	; (800f888 <MX_DMA_Init+0x78>)
 800f81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f81e:	4a1a      	ldr	r2, [pc, #104]	; (800f888 <MX_DMA_Init+0x78>)
 800f820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f824:	6313      	str	r3, [r2, #48]	; 0x30
 800f826:	4b18      	ldr	r3, [pc, #96]	; (800f888 <MX_DMA_Init+0x78>)
 800f828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f82e:	607b      	str	r3, [r7, #4]
 800f830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f832:	2300      	movs	r3, #0
 800f834:	603b      	str	r3, [r7, #0]
 800f836:	4b14      	ldr	r3, [pc, #80]	; (800f888 <MX_DMA_Init+0x78>)
 800f838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f83a:	4a13      	ldr	r2, [pc, #76]	; (800f888 <MX_DMA_Init+0x78>)
 800f83c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f840:	6313      	str	r3, [r2, #48]	; 0x30
 800f842:	4b11      	ldr	r3, [pc, #68]	; (800f888 <MX_DMA_Init+0x78>)
 800f844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800f84e:	2200      	movs	r2, #0
 800f850:	2100      	movs	r1, #0
 800f852:	200c      	movs	r0, #12
 800f854:	f7f2 fa25 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800f858:	200c      	movs	r0, #12
 800f85a:	f7f2 fa3e 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800f85e:	2200      	movs	r2, #0
 800f860:	2100      	movs	r1, #0
 800f862:	203b      	movs	r0, #59	; 0x3b
 800f864:	f7f2 fa1d 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800f868:	203b      	movs	r0, #59	; 0x3b
 800f86a:	f7f2 fa36 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800f86e:	2200      	movs	r2, #0
 800f870:	2100      	movs	r1, #0
 800f872:	2045      	movs	r0, #69	; 0x45
 800f874:	f7f2 fa15 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800f878:	2045      	movs	r0, #69	; 0x45
 800f87a:	f7f2 fa2e 	bl	8001cda <HAL_NVIC_EnableIRQ>

}
 800f87e:	bf00      	nop
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	40023800 	.word	0x40023800

0800f88c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b08a      	sub	sp, #40	; 0x28
 800f890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f892:	f107 0314 	add.w	r3, r7, #20
 800f896:	2200      	movs	r2, #0
 800f898:	601a      	str	r2, [r3, #0]
 800f89a:	605a      	str	r2, [r3, #4]
 800f89c:	609a      	str	r2, [r3, #8]
 800f89e:	60da      	str	r2, [r3, #12]
 800f8a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	613b      	str	r3, [r7, #16]
 800f8a6:	4b42      	ldr	r3, [pc, #264]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8aa:	4a41      	ldr	r2, [pc, #260]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8ac:	f043 0304 	orr.w	r3, r3, #4
 800f8b0:	6313      	str	r3, [r2, #48]	; 0x30
 800f8b2:	4b3f      	ldr	r3, [pc, #252]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b6:	f003 0304 	and.w	r3, r3, #4
 800f8ba:	613b      	str	r3, [r7, #16]
 800f8bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f8be:	2300      	movs	r3, #0
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	4b3b      	ldr	r3, [pc, #236]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8c6:	4a3a      	ldr	r2, [pc, #232]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8cc:	6313      	str	r3, [r2, #48]	; 0x30
 800f8ce:	4b38      	ldr	r3, [pc, #224]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8d6:	60fb      	str	r3, [r7, #12]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8da:	2300      	movs	r3, #0
 800f8dc:	60bb      	str	r3, [r7, #8]
 800f8de:	4b34      	ldr	r3, [pc, #208]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e2:	4a33      	ldr	r2, [pc, #204]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8e4:	f043 0301 	orr.w	r3, r3, #1
 800f8e8:	6313      	str	r3, [r2, #48]	; 0x30
 800f8ea:	4b31      	ldr	r3, [pc, #196]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	60bb      	str	r3, [r7, #8]
 800f8f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	607b      	str	r3, [r7, #4]
 800f8fa:	4b2d      	ldr	r3, [pc, #180]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fe:	4a2c      	ldr	r2, [pc, #176]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f900:	f043 0302 	orr.w	r3, r3, #2
 800f904:	6313      	str	r3, [r2, #48]	; 0x30
 800f906:	4b2a      	ldr	r3, [pc, #168]	; (800f9b0 <MX_GPIO_Init+0x124>)
 800f908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90a:	f003 0302 	and.w	r3, r3, #2
 800f90e:	607b      	str	r3, [r7, #4]
 800f910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800f912:	2200      	movs	r2, #0
 800f914:	f243 010f 	movw	r1, #12303	; 0x300f
 800f918:	4826      	ldr	r0, [pc, #152]	; (800f9b4 <MX_GPIO_Init+0x128>)
 800f91a:	f7f2 ff41 	bl	80027a0 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800f91e:	2200      	movs	r2, #0
 800f920:	2107      	movs	r1, #7
 800f922:	4825      	ldr	r0, [pc, #148]	; (800f9b8 <MX_GPIO_Init+0x12c>)
 800f924:	f7f2 ff3c 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800f928:	f243 030f 	movw	r3, #12303	; 0x300f
 800f92c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f92e:	2301      	movs	r3, #1
 800f930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f932:	2300      	movs	r3, #0
 800f934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f936:	2300      	movs	r3, #0
 800f938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f93a:	f107 0314 	add.w	r3, r7, #20
 800f93e:	4619      	mov	r1, r3
 800f940:	481c      	ldr	r0, [pc, #112]	; (800f9b4 <MX_GPIO_Init+0x128>)
 800f942:	f7f2 fd91 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800f946:	2307      	movs	r3, #7
 800f948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f94a:	2301      	movs	r3, #1
 800f94c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f94e:	2300      	movs	r3, #0
 800f950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f952:	2300      	movs	r3, #0
 800f954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f956:	f107 0314 	add.w	r3, r7, #20
 800f95a:	4619      	mov	r1, r3
 800f95c:	4816      	ldr	r0, [pc, #88]	; (800f9b8 <MX_GPIO_Init+0x12c>)
 800f95e:	f7f2 fd83 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 800f962:	2380      	movs	r3, #128	; 0x80
 800f964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f966:	2300      	movs	r3, #0
 800f968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f96a:	2300      	movs	r3, #0
 800f96c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 800f96e:	f107 0314 	add.w	r3, r7, #20
 800f972:	4619      	mov	r1, r3
 800f974:	480f      	ldr	r0, [pc, #60]	; (800f9b4 <MX_GPIO_Init+0x128>)
 800f976:	f7f2 fd77 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800f97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f97e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f980:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800f984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f986:	2300      	movs	r3, #0
 800f988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800f98a:	f107 0314 	add.w	r3, r7, #20
 800f98e:	4619      	mov	r1, r3
 800f990:	4809      	ldr	r0, [pc, #36]	; (800f9b8 <MX_GPIO_Init+0x12c>)
 800f992:	f7f2 fd69 	bl	8002468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800f996:	2200      	movs	r2, #0
 800f998:	2100      	movs	r1, #0
 800f99a:	2017      	movs	r0, #23
 800f99c:	f7f2 f981 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800f9a0:	2017      	movs	r0, #23
 800f9a2:	f7f2 f99a 	bl	8001cda <HAL_NVIC_EnableIRQ>

}
 800f9a6:	bf00      	nop
 800f9a8:	3728      	adds	r7, #40	; 0x28
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	40023800 	.word	0x40023800
 800f9b4:	40020800 	.word	0x40020800
 800f9b8:	40020000 	.word	0x40020000

0800f9bc <AssignHandles>:

/* USER CODE BEGIN 4 */

void AssignHandles()
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	af00      	add	r7, sp, #0
	HandlesAssigner_ShareHandle(&hadc1, eHandle_ADC);
 800f9c0:	2105      	movs	r1, #5
 800f9c2:	480e      	ldr	r0, [pc, #56]	; (800f9fc <AssignHandles+0x40>)
 800f9c4:	f7fe ff44 	bl	800e850 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hi2c1, eHandle_I2C1);
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	480d      	ldr	r0, [pc, #52]	; (800fa00 <AssignHandles+0x44>)
 800f9cc:	f7fe ff40 	bl	800e850 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hi2c2, eHandle_I2C2);
 800f9d0:	2102      	movs	r1, #2
 800f9d2:	480c      	ldr	r0, [pc, #48]	; (800fa04 <AssignHandles+0x48>)
 800f9d4:	f7fe ff3c 	bl	800e850 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hrtc, eHandle_RTC);
 800f9d8:	2103      	movs	r1, #3
 800f9da:	480b      	ldr	r0, [pc, #44]	; (800fa08 <AssignHandles+0x4c>)
 800f9dc:	f7fe ff38 	bl	800e850 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hsd, eHandle_SD);
 800f9e0:	2104      	movs	r1, #4
 800f9e2:	480a      	ldr	r0, [pc, #40]	; (800fa0c <AssignHandles+0x50>)
 800f9e4:	f7fe ff34 	bl	800e850 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&htim2, eHandle_TIM2);
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	4809      	ldr	r0, [pc, #36]	; (800fa10 <AssignHandles+0x54>)
 800f9ec:	f7fe ff30 	bl	800e850 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&huart1, eHandle_UART1);
 800f9f0:	2106      	movs	r1, #6
 800f9f2:	4808      	ldr	r0, [pc, #32]	; (800fa14 <AssignHandles+0x58>)
 800f9f4:	f7fe ff2c 	bl	800e850 <HandlesAssigner_ShareHandle>
}
 800f9f8:	bf00      	nop
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	20001f3c 	.word	0x20001f3c
 800fa00:	20001e94 	.word	0x20001e94
 800fa04:	20001ee8 	.word	0x20001ee8
 800fa08:	20001fc8 	.word	0x20001fc8
 800fa0c:	20002048 	.word	0x20002048
 800fa10:	200020cc 	.word	0x200020cc
 800fa14:	20001f84 	.word	0x20001f84

0800fa18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800fa1c:	b672      	cpsid	i
}
 800fa1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800fa20:	e7fe      	b.n	800fa20 <Error_Handler+0x8>

0800fa22 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b084      	sub	sp, #16
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fa2a:	f7f1 fb89 	bl	8001140 <HAL_GetTick>
 800fa2e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fa30:	e006      	b.n	800fa40 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fa32:	f7ff fc07 	bl	800f244 <BSP_SD_GetCardState>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d101      	bne.n	800fa40 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e009      	b.n	800fa54 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fa40:	f7f1 fb7e 	bl	8001140 <HAL_GetTick>
 800fa44:	4602      	mov	r2, r0
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d8f0      	bhi.n	800fa32 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fa50:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	4603      	mov	r3, r0
 800fa64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fa66:	4b0b      	ldr	r3, [pc, #44]	; (800fa94 <SD_CheckStatus+0x38>)
 800fa68:	2201      	movs	r2, #1
 800fa6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fa6c:	f7ff fbea 	bl	800f244 <BSP_SD_GetCardState>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d107      	bne.n	800fa86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fa76:	4b07      	ldr	r3, [pc, #28]	; (800fa94 <SD_CheckStatus+0x38>)
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f023 0301 	bic.w	r3, r3, #1
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	4b04      	ldr	r3, [pc, #16]	; (800fa94 <SD_CheckStatus+0x38>)
 800fa84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fa86:	4b03      	ldr	r3, [pc, #12]	; (800fa94 <SD_CheckStatus+0x38>)
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	b2db      	uxtb	r3, r3
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	20000117 	.word	0x20000117

0800fa98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	4603      	mov	r3, r0
 800faa0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800faa2:	f7ff fb75 	bl	800f190 <BSP_SD_Init>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d107      	bne.n	800fabc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800faac:	79fb      	ldrb	r3, [r7, #7]
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff ffd4 	bl	800fa5c <SD_CheckStatus>
 800fab4:	4603      	mov	r3, r0
 800fab6:	461a      	mov	r2, r3
 800fab8:	4b04      	ldr	r3, [pc, #16]	; (800facc <SD_initialize+0x34>)
 800faba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fabc:	4b03      	ldr	r3, [pc, #12]	; (800facc <SD_initialize+0x34>)
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	b2db      	uxtb	r3, r3
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	20000117 	.word	0x20000117

0800fad0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	4603      	mov	r3, r0
 800fad8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fada:	79fb      	ldrb	r3, [r7, #7]
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff ffbd 	bl	800fa5c <SD_CheckStatus>
 800fae2:	4603      	mov	r3, r0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	60b9      	str	r1, [r7, #8]
 800faf4:	607a      	str	r2, [r7, #4]
 800faf6:	603b      	str	r3, [r7, #0]
 800faf8:	4603      	mov	r3, r0
 800fafa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fafc:	2301      	movs	r3, #1
 800fafe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fb00:	f247 5030 	movw	r0, #30000	; 0x7530
 800fb04:	f7ff ff8d 	bl	800fa22 <SD_CheckStatusWithTimeout>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	da01      	bge.n	800fb12 <SD_read+0x26>
  {
    return res;
 800fb0e:	7dfb      	ldrb	r3, [r7, #23]
 800fb10:	e03b      	b.n	800fb8a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fb12:	683a      	ldr	r2, [r7, #0]
 800fb14:	6879      	ldr	r1, [r7, #4]
 800fb16:	68b8      	ldr	r0, [r7, #8]
 800fb18:	f7ff fb60 	bl	800f1dc <BSP_SD_ReadBlocks_DMA>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d132      	bne.n	800fb88 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fb22:	4b1c      	ldr	r3, [pc, #112]	; (800fb94 <SD_read+0xa8>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fb28:	f7f1 fb0a 	bl	8001140 <HAL_GetTick>
 800fb2c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fb2e:	bf00      	nop
 800fb30:	4b18      	ldr	r3, [pc, #96]	; (800fb94 <SD_read+0xa8>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d108      	bne.n	800fb4a <SD_read+0x5e>
 800fb38:	f7f1 fb02 	bl	8001140 <HAL_GetTick>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	f247 522f 	movw	r2, #29999	; 0x752f
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d9f2      	bls.n	800fb30 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800fb4a:	4b12      	ldr	r3, [pc, #72]	; (800fb94 <SD_read+0xa8>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d102      	bne.n	800fb58 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fb52:	2301      	movs	r3, #1
 800fb54:	75fb      	strb	r3, [r7, #23]
 800fb56:	e017      	b.n	800fb88 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fb58:	4b0e      	ldr	r3, [pc, #56]	; (800fb94 <SD_read+0xa8>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fb5e:	f7f1 faef 	bl	8001140 <HAL_GetTick>
 800fb62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fb64:	e007      	b.n	800fb76 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fb66:	f7ff fb6d 	bl	800f244 <BSP_SD_GetCardState>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d102      	bne.n	800fb76 <SD_read+0x8a>
          {
            res = RES_OK;
 800fb70:	2300      	movs	r3, #0
 800fb72:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fb74:	e008      	b.n	800fb88 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fb76:	f7f1 fae3 	bl	8001140 <HAL_GetTick>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	f247 522f 	movw	r2, #29999	; 0x752f
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d9ee      	bls.n	800fb66 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fb88:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3718      	adds	r7, #24
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	200015b8 	.word	0x200015b8

0800fb98 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b086      	sub	sp, #24
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60b9      	str	r1, [r7, #8]
 800fba0:	607a      	str	r2, [r7, #4]
 800fba2:	603b      	str	r3, [r7, #0]
 800fba4:	4603      	mov	r3, r0
 800fba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fbac:	4b24      	ldr	r3, [pc, #144]	; (800fc40 <SD_write+0xa8>)
 800fbae:	2200      	movs	r2, #0
 800fbb0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fbb2:	f247 5030 	movw	r0, #30000	; 0x7530
 800fbb6:	f7ff ff34 	bl	800fa22 <SD_CheckStatusWithTimeout>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	da01      	bge.n	800fbc4 <SD_write+0x2c>
  {
    return res;
 800fbc0:	7dfb      	ldrb	r3, [r7, #23]
 800fbc2:	e038      	b.n	800fc36 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	6879      	ldr	r1, [r7, #4]
 800fbc8:	68b8      	ldr	r0, [r7, #8]
 800fbca:	f7ff fb21 	bl	800f210 <BSP_SD_WriteBlocks_DMA>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d12f      	bne.n	800fc34 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fbd4:	f7f1 fab4 	bl	8001140 <HAL_GetTick>
 800fbd8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fbda:	bf00      	nop
 800fbdc:	4b18      	ldr	r3, [pc, #96]	; (800fc40 <SD_write+0xa8>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d108      	bne.n	800fbf6 <SD_write+0x5e>
 800fbe4:	f7f1 faac 	bl	8001140 <HAL_GetTick>
 800fbe8:	4602      	mov	r2, r0
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	1ad3      	subs	r3, r2, r3
 800fbee:	f247 522f 	movw	r2, #29999	; 0x752f
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d9f2      	bls.n	800fbdc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800fbf6:	4b12      	ldr	r3, [pc, #72]	; (800fc40 <SD_write+0xa8>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d102      	bne.n	800fc04 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	75fb      	strb	r3, [r7, #23]
 800fc02:	e017      	b.n	800fc34 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fc04:	4b0e      	ldr	r3, [pc, #56]	; (800fc40 <SD_write+0xa8>)
 800fc06:	2200      	movs	r2, #0
 800fc08:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fc0a:	f7f1 fa99 	bl	8001140 <HAL_GetTick>
 800fc0e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fc10:	e007      	b.n	800fc22 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fc12:	f7ff fb17 	bl	800f244 <BSP_SD_GetCardState>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d102      	bne.n	800fc22 <SD_write+0x8a>
          {
            res = RES_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	75fb      	strb	r3, [r7, #23]
            break;
 800fc20:	e008      	b.n	800fc34 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fc22:	f7f1 fa8d 	bl	8001140 <HAL_GetTick>
 800fc26:	4602      	mov	r2, r0
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	1ad3      	subs	r3, r2, r3
 800fc2c:	f247 522f 	movw	r2, #29999	; 0x752f
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d9ee      	bls.n	800fc12 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3718      	adds	r7, #24
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	200015b4 	.word	0x200015b4

0800fc44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b08c      	sub	sp, #48	; 0x30
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	603a      	str	r2, [r7, #0]
 800fc4e:	71fb      	strb	r3, [r7, #7]
 800fc50:	460b      	mov	r3, r1
 800fc52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fc54:	2301      	movs	r3, #1
 800fc56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fc5a:	4b25      	ldr	r3, [pc, #148]	; (800fcf0 <SD_ioctl+0xac>)
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	f003 0301 	and.w	r3, r3, #1
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d001      	beq.n	800fc6c <SD_ioctl+0x28>
 800fc68:	2303      	movs	r3, #3
 800fc6a:	e03c      	b.n	800fce6 <SD_ioctl+0xa2>

  switch (cmd)
 800fc6c:	79bb      	ldrb	r3, [r7, #6]
 800fc6e:	2b03      	cmp	r3, #3
 800fc70:	d834      	bhi.n	800fcdc <SD_ioctl+0x98>
 800fc72:	a201      	add	r2, pc, #4	; (adr r2, 800fc78 <SD_ioctl+0x34>)
 800fc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc78:	0800fc89 	.word	0x0800fc89
 800fc7c:	0800fc91 	.word	0x0800fc91
 800fc80:	0800fca9 	.word	0x0800fca9
 800fc84:	0800fcc3 	.word	0x0800fcc3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fc8e:	e028      	b.n	800fce2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fc90:	f107 030c 	add.w	r3, r7, #12
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7ff fae5 	bl	800f264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fc9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fca6:	e01c      	b.n	800fce2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fca8:	f107 030c 	add.w	r3, r7, #12
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7ff fad9 	bl	800f264 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fcc0:	e00f      	b.n	800fce2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fcc2:	f107 030c 	add.w	r3, r7, #12
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff facc 	bl	800f264 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	0a5a      	lsrs	r2, r3, #9
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fcda:	e002      	b.n	800fce2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fcdc:	2304      	movs	r3, #4
 800fcde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3730      	adds	r7, #48	; 0x30
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	20000117 	.word	0x20000117

0800fcf4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800fcf8:	4b03      	ldr	r3, [pc, #12]	; (800fd08 <BSP_SD_WriteCpltCallback+0x14>)
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	601a      	str	r2, [r3, #0]
}
 800fcfe:	bf00      	nop
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr
 800fd08:	200015b4 	.word	0x200015b4

0800fd0c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800fd10:	4b03      	ldr	r3, [pc, #12]	; (800fd20 <BSP_SD_ReadCpltCallback+0x14>)
 800fd12:	2201      	movs	r2, #1
 800fd14:	601a      	str	r2, [r3, #0]
}
 800fd16:	bf00      	nop
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	200015b8 	.word	0x200015b8

0800fd24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	607b      	str	r3, [r7, #4]
 800fd2e:	4b10      	ldr	r3, [pc, #64]	; (800fd70 <HAL_MspInit+0x4c>)
 800fd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd32:	4a0f      	ldr	r2, [pc, #60]	; (800fd70 <HAL_MspInit+0x4c>)
 800fd34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd38:	6453      	str	r3, [r2, #68]	; 0x44
 800fd3a:	4b0d      	ldr	r3, [pc, #52]	; (800fd70 <HAL_MspInit+0x4c>)
 800fd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd42:	607b      	str	r3, [r7, #4]
 800fd44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fd46:	2300      	movs	r3, #0
 800fd48:	603b      	str	r3, [r7, #0]
 800fd4a:	4b09      	ldr	r3, [pc, #36]	; (800fd70 <HAL_MspInit+0x4c>)
 800fd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd4e:	4a08      	ldr	r2, [pc, #32]	; (800fd70 <HAL_MspInit+0x4c>)
 800fd50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd54:	6413      	str	r3, [r2, #64]	; 0x40
 800fd56:	4b06      	ldr	r3, [pc, #24]	; (800fd70 <HAL_MspInit+0x4c>)
 800fd58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd5e:	603b      	str	r3, [r7, #0]
 800fd60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fd62:	bf00      	nop
 800fd64:	370c      	adds	r7, #12
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	40023800 	.word	0x40023800

0800fd74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b08a      	sub	sp, #40	; 0x28
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd7c:	f107 0314 	add.w	r3, r7, #20
 800fd80:	2200      	movs	r2, #0
 800fd82:	601a      	str	r2, [r3, #0]
 800fd84:	605a      	str	r2, [r3, #4]
 800fd86:	609a      	str	r2, [r3, #8]
 800fd88:	60da      	str	r2, [r3, #12]
 800fd8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a1b      	ldr	r2, [pc, #108]	; (800fe00 <HAL_ADC_MspInit+0x8c>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d12f      	bne.n	800fdf6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800fd96:	2300      	movs	r3, #0
 800fd98:	613b      	str	r3, [r7, #16]
 800fd9a:	4b1a      	ldr	r3, [pc, #104]	; (800fe04 <HAL_ADC_MspInit+0x90>)
 800fd9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd9e:	4a19      	ldr	r2, [pc, #100]	; (800fe04 <HAL_ADC_MspInit+0x90>)
 800fda0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fda4:	6453      	str	r3, [r2, #68]	; 0x44
 800fda6:	4b17      	ldr	r3, [pc, #92]	; (800fe04 <HAL_ADC_MspInit+0x90>)
 800fda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdae:	613b      	str	r3, [r7, #16]
 800fdb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	60fb      	str	r3, [r7, #12]
 800fdb6:	4b13      	ldr	r3, [pc, #76]	; (800fe04 <HAL_ADC_MspInit+0x90>)
 800fdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdba:	4a12      	ldr	r2, [pc, #72]	; (800fe04 <HAL_ADC_MspInit+0x90>)
 800fdbc:	f043 0302 	orr.w	r3, r3, #2
 800fdc0:	6313      	str	r3, [r2, #48]	; 0x30
 800fdc2:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <HAL_ADC_MspInit+0x90>)
 800fdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc6:	f003 0302 	and.w	r3, r3, #2
 800fdca:	60fb      	str	r3, [r7, #12]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fdda:	f107 0314 	add.w	r3, r7, #20
 800fdde:	4619      	mov	r1, r3
 800fde0:	4809      	ldr	r0, [pc, #36]	; (800fe08 <HAL_ADC_MspInit+0x94>)
 800fde2:	f7f2 fb41 	bl	8002468 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800fde6:	2200      	movs	r2, #0
 800fde8:	2100      	movs	r1, #0
 800fdea:	2012      	movs	r0, #18
 800fdec:	f7f1 ff59 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800fdf0:	2012      	movs	r0, #18
 800fdf2:	f7f1 ff72 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800fdf6:	bf00      	nop
 800fdf8:	3728      	adds	r7, #40	; 0x28
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	40012000 	.word	0x40012000
 800fe04:	40023800 	.word	0x40023800
 800fe08:	40020400 	.word	0x40020400

0800fe0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b08c      	sub	sp, #48	; 0x30
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe14:	f107 031c 	add.w	r3, r7, #28
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]
 800fe1c:	605a      	str	r2, [r3, #4]
 800fe1e:	609a      	str	r2, [r3, #8]
 800fe20:	60da      	str	r2, [r3, #12]
 800fe22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a61      	ldr	r2, [pc, #388]	; (800ffb0 <HAL_I2C_MspInit+0x1a4>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d16a      	bne.n	800ff04 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fe2e:	2300      	movs	r3, #0
 800fe30:	61bb      	str	r3, [r7, #24]
 800fe32:	4b60      	ldr	r3, [pc, #384]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800fe34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe36:	4a5f      	ldr	r2, [pc, #380]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800fe38:	f043 0302 	orr.w	r3, r3, #2
 800fe3c:	6313      	str	r3, [r2, #48]	; 0x30
 800fe3e:	4b5d      	ldr	r3, [pc, #372]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800fe40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe42:	f003 0302 	and.w	r3, r3, #2
 800fe46:	61bb      	str	r3, [r7, #24]
 800fe48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800fe4a:	23c0      	movs	r3, #192	; 0xc0
 800fe4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fe4e:	2312      	movs	r3, #18
 800fe50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fe52:	2301      	movs	r3, #1
 800fe54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe56:	2303      	movs	r3, #3
 800fe58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800fe5a:	2304      	movs	r3, #4
 800fe5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fe5e:	f107 031c 	add.w	r3, r7, #28
 800fe62:	4619      	mov	r1, r3
 800fe64:	4854      	ldr	r0, [pc, #336]	; (800ffb8 <HAL_I2C_MspInit+0x1ac>)
 800fe66:	f7f2 faff 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	4b51      	ldr	r3, [pc, #324]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800fe70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe72:	4a50      	ldr	r2, [pc, #320]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800fe74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fe78:	6413      	str	r3, [r2, #64]	; 0x40
 800fe7a:	4b4e      	ldr	r3, [pc, #312]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800fe7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fe82:	617b      	str	r3, [r7, #20]
 800fe84:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800fe86:	4b4d      	ldr	r3, [pc, #308]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fe88:	4a4d      	ldr	r2, [pc, #308]	; (800ffc0 <HAL_I2C_MspInit+0x1b4>)
 800fe8a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800fe8c:	4b4b      	ldr	r3, [pc, #300]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fe8e:	2200      	movs	r2, #0
 800fe90:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fe92:	4b4a      	ldr	r3, [pc, #296]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fe94:	2240      	movs	r2, #64	; 0x40
 800fe96:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fe98:	4b48      	ldr	r3, [pc, #288]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800fe9e:	4b47      	ldr	r3, [pc, #284]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fea4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fea6:	4b45      	ldr	r3, [pc, #276]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fea8:	2200      	movs	r2, #0
 800feaa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800feac:	4b43      	ldr	r3, [pc, #268]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800feae:	2200      	movs	r2, #0
 800feb0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800feb2:	4b42      	ldr	r3, [pc, #264]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800feb8:	4b40      	ldr	r3, [pc, #256]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800feba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800febe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fec0:	4b3e      	ldr	r3, [pc, #248]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800fec6:	483d      	ldr	r0, [pc, #244]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fec8:	f7f1 ff22 	bl	8001d10 <HAL_DMA_Init>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d001      	beq.n	800fed6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800fed2:	f7ff fda1 	bl	800fa18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4a38      	ldr	r2, [pc, #224]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800feda:	635a      	str	r2, [r3, #52]	; 0x34
 800fedc:	4a37      	ldr	r2, [pc, #220]	; (800ffbc <HAL_I2C_MspInit+0x1b0>)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800fee2:	2200      	movs	r2, #0
 800fee4:	2100      	movs	r1, #0
 800fee6:	201f      	movs	r0, #31
 800fee8:	f7f1 fedb 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800feec:	201f      	movs	r0, #31
 800feee:	f7f1 fef4 	bl	8001cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800fef2:	2200      	movs	r2, #0
 800fef4:	2100      	movs	r1, #0
 800fef6:	2020      	movs	r0, #32
 800fef8:	f7f1 fed3 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800fefc:	2020      	movs	r0, #32
 800fefe:	f7f1 feec 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ff02:	e051      	b.n	800ffa8 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C2)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4a2e      	ldr	r2, [pc, #184]	; (800ffc4 <HAL_I2C_MspInit+0x1b8>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d14c      	bne.n	800ffa8 <HAL_I2C_MspInit+0x19c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ff0e:	2300      	movs	r3, #0
 800ff10:	613b      	str	r3, [r7, #16]
 800ff12:	4b28      	ldr	r3, [pc, #160]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800ff14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff16:	4a27      	ldr	r2, [pc, #156]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800ff18:	f043 0302 	orr.w	r3, r3, #2
 800ff1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ff1e:	4b25      	ldr	r3, [pc, #148]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800ff20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff22:	f003 0302 	and.w	r3, r3, #2
 800ff26:	613b      	str	r3, [r7, #16]
 800ff28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ff2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ff30:	2312      	movs	r3, #18
 800ff32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ff34:	2301      	movs	r3, #1
 800ff36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff38:	2303      	movs	r3, #3
 800ff3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ff3c:	2304      	movs	r3, #4
 800ff3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ff40:	f107 031c 	add.w	r3, r7, #28
 800ff44:	4619      	mov	r1, r3
 800ff46:	481c      	ldr	r0, [pc, #112]	; (800ffb8 <HAL_I2C_MspInit+0x1ac>)
 800ff48:	f7f2 fa8e 	bl	8002468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ff4c:	2308      	movs	r3, #8
 800ff4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ff50:	2312      	movs	r3, #18
 800ff52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ff54:	2301      	movs	r3, #1
 800ff56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff58:	2303      	movs	r3, #3
 800ff5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800ff5c:	2309      	movs	r3, #9
 800ff5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ff60:	f107 031c 	add.w	r3, r7, #28
 800ff64:	4619      	mov	r1, r3
 800ff66:	4814      	ldr	r0, [pc, #80]	; (800ffb8 <HAL_I2C_MspInit+0x1ac>)
 800ff68:	f7f2 fa7e 	bl	8002468 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	60fb      	str	r3, [r7, #12]
 800ff70:	4b10      	ldr	r3, [pc, #64]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800ff72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff74:	4a0f      	ldr	r2, [pc, #60]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800ff76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ff7a:	6413      	str	r3, [r2, #64]	; 0x40
 800ff7c:	4b0d      	ldr	r3, [pc, #52]	; (800ffb4 <HAL_I2C_MspInit+0x1a8>)
 800ff7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff84:	60fb      	str	r3, [r7, #12]
 800ff86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	2021      	movs	r0, #33	; 0x21
 800ff8e:	f7f1 fe88 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800ff92:	2021      	movs	r0, #33	; 0x21
 800ff94:	f7f1 fea1 	bl	8001cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	2022      	movs	r0, #34	; 0x22
 800ff9e:	f7f1 fe80 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800ffa2:	2022      	movs	r0, #34	; 0x22
 800ffa4:	f7f1 fe99 	bl	8001cda <HAL_NVIC_EnableIRQ>
}
 800ffa8:	bf00      	nop
 800ffaa:	3730      	adds	r7, #48	; 0x30
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	40005400 	.word	0x40005400
 800ffb4:	40023800 	.word	0x40023800
 800ffb8:	40020400 	.word	0x40020400
 800ffbc:	20001e34 	.word	0x20001e34
 800ffc0:	40026028 	.word	0x40026028
 800ffc4:	40005800 	.word	0x40005800

0800ffc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b088      	sub	sp, #32
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ffd0:	f107 0308 	add.w	r3, r7, #8
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	601a      	str	r2, [r3, #0]
 800ffd8:	605a      	str	r2, [r3, #4]
 800ffda:	609a      	str	r2, [r3, #8]
 800ffdc:	60da      	str	r2, [r3, #12]
 800ffde:	611a      	str	r2, [r3, #16]
 800ffe0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a0c      	ldr	r2, [pc, #48]	; (8010018 <HAL_RTC_MspInit+0x50>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d111      	bne.n	8010010 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ffec:	2302      	movs	r3, #2
 800ffee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800fff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fff4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fff6:	f107 0308 	add.w	r3, r7, #8
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f6 fbfa 	bl	80067f4 <HAL_RCCEx_PeriphCLKConfig>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	d001      	beq.n	801000a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8010006:	f7ff fd07 	bl	800fa18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801000a:	4b04      	ldr	r3, [pc, #16]	; (801001c <HAL_RTC_MspInit+0x54>)
 801000c:	2201      	movs	r2, #1
 801000e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8010010:	bf00      	nop
 8010012:	3720      	adds	r7, #32
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	40002800 	.word	0x40002800
 801001c:	42470e3c 	.word	0x42470e3c

08010020 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b08c      	sub	sp, #48	; 0x30
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010028:	f107 031c 	add.w	r3, r7, #28
 801002c:	2200      	movs	r2, #0
 801002e:	601a      	str	r2, [r3, #0]
 8010030:	605a      	str	r2, [r3, #4]
 8010032:	609a      	str	r2, [r3, #8]
 8010034:	60da      	str	r2, [r3, #12]
 8010036:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a77      	ldr	r2, [pc, #476]	; (801021c <HAL_SD_MspInit+0x1fc>)
 801003e:	4293      	cmp	r3, r2
 8010040:	f040 80e8 	bne.w	8010214 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8010044:	2300      	movs	r3, #0
 8010046:	61bb      	str	r3, [r7, #24]
 8010048:	4b75      	ldr	r3, [pc, #468]	; (8010220 <HAL_SD_MspInit+0x200>)
 801004a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801004c:	4a74      	ldr	r2, [pc, #464]	; (8010220 <HAL_SD_MspInit+0x200>)
 801004e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010052:	6453      	str	r3, [r2, #68]	; 0x44
 8010054:	4b72      	ldr	r3, [pc, #456]	; (8010220 <HAL_SD_MspInit+0x200>)
 8010056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801005c:	61bb      	str	r3, [r7, #24]
 801005e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010060:	2300      	movs	r3, #0
 8010062:	617b      	str	r3, [r7, #20]
 8010064:	4b6e      	ldr	r3, [pc, #440]	; (8010220 <HAL_SD_MspInit+0x200>)
 8010066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010068:	4a6d      	ldr	r2, [pc, #436]	; (8010220 <HAL_SD_MspInit+0x200>)
 801006a:	f043 0301 	orr.w	r3, r3, #1
 801006e:	6313      	str	r3, [r2, #48]	; 0x30
 8010070:	4b6b      	ldr	r3, [pc, #428]	; (8010220 <HAL_SD_MspInit+0x200>)
 8010072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010074:	f003 0301 	and.w	r3, r3, #1
 8010078:	617b      	str	r3, [r7, #20]
 801007a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801007c:	2300      	movs	r3, #0
 801007e:	613b      	str	r3, [r7, #16]
 8010080:	4b67      	ldr	r3, [pc, #412]	; (8010220 <HAL_SD_MspInit+0x200>)
 8010082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010084:	4a66      	ldr	r2, [pc, #408]	; (8010220 <HAL_SD_MspInit+0x200>)
 8010086:	f043 0302 	orr.w	r3, r3, #2
 801008a:	6313      	str	r3, [r2, #48]	; 0x30
 801008c:	4b64      	ldr	r3, [pc, #400]	; (8010220 <HAL_SD_MspInit+0x200>)
 801008e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010090:	f003 0302 	and.w	r3, r3, #2
 8010094:	613b      	str	r3, [r7, #16]
 8010096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010098:	2300      	movs	r3, #0
 801009a:	60fb      	str	r3, [r7, #12]
 801009c:	4b60      	ldr	r3, [pc, #384]	; (8010220 <HAL_SD_MspInit+0x200>)
 801009e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a0:	4a5f      	ldr	r2, [pc, #380]	; (8010220 <HAL_SD_MspInit+0x200>)
 80100a2:	f043 0304 	orr.w	r3, r3, #4
 80100a6:	6313      	str	r3, [r2, #48]	; 0x30
 80100a8:	4b5d      	ldr	r3, [pc, #372]	; (8010220 <HAL_SD_MspInit+0x200>)
 80100aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ac:	f003 0304 	and.w	r3, r3, #4
 80100b0:	60fb      	str	r3, [r7, #12]
 80100b2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80100b4:	2340      	movs	r3, #64	; 0x40
 80100b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100b8:	2302      	movs	r3, #2
 80100ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100bc:	2300      	movs	r3, #0
 80100be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100c0:	2303      	movs	r3, #3
 80100c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80100c4:	230c      	movs	r3, #12
 80100c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100c8:	f107 031c 	add.w	r3, r7, #28
 80100cc:	4619      	mov	r1, r3
 80100ce:	4855      	ldr	r0, [pc, #340]	; (8010224 <HAL_SD_MspInit+0x204>)
 80100d0:	f7f2 f9ca 	bl	8002468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80100d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100da:	2302      	movs	r3, #2
 80100dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100e2:	2303      	movs	r3, #3
 80100e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80100e6:	230c      	movs	r3, #12
 80100e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80100ea:	f107 031c 	add.w	r3, r7, #28
 80100ee:	4619      	mov	r1, r3
 80100f0:	484d      	ldr	r0, [pc, #308]	; (8010228 <HAL_SD_MspInit+0x208>)
 80100f2:	f7f2 f9b9 	bl	8002468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80100f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80100fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100fc:	2302      	movs	r3, #2
 80100fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010100:	2300      	movs	r3, #0
 8010102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010104:	2303      	movs	r3, #3
 8010106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8010108:	230c      	movs	r3, #12
 801010a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801010c:	f107 031c 	add.w	r3, r7, #28
 8010110:	4619      	mov	r1, r3
 8010112:	4846      	ldr	r0, [pc, #280]	; (801022c <HAL_SD_MspInit+0x20c>)
 8010114:	f7f2 f9a8 	bl	8002468 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8010118:	4b45      	ldr	r3, [pc, #276]	; (8010230 <HAL_SD_MspInit+0x210>)
 801011a:	4a46      	ldr	r2, [pc, #280]	; (8010234 <HAL_SD_MspInit+0x214>)
 801011c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 801011e:	4b44      	ldr	r3, [pc, #272]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010120:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010124:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010126:	4b42      	ldr	r3, [pc, #264]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010128:	2200      	movs	r2, #0
 801012a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801012c:	4b40      	ldr	r3, [pc, #256]	; (8010230 <HAL_SD_MspInit+0x210>)
 801012e:	2200      	movs	r2, #0
 8010130:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010132:	4b3f      	ldr	r3, [pc, #252]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010138:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801013a:	4b3d      	ldr	r3, [pc, #244]	; (8010230 <HAL_SD_MspInit+0x210>)
 801013c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010140:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8010142:	4b3b      	ldr	r3, [pc, #236]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010144:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010148:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 801014a:	4b39      	ldr	r3, [pc, #228]	; (8010230 <HAL_SD_MspInit+0x210>)
 801014c:	2220      	movs	r2, #32
 801014e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010150:	4b37      	ldr	r3, [pc, #220]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010152:	2200      	movs	r2, #0
 8010154:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010156:	4b36      	ldr	r3, [pc, #216]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010158:	2204      	movs	r2, #4
 801015a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801015c:	4b34      	ldr	r3, [pc, #208]	; (8010230 <HAL_SD_MspInit+0x210>)
 801015e:	2203      	movs	r2, #3
 8010160:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8010162:	4b33      	ldr	r3, [pc, #204]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010164:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8010168:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 801016a:	4b31      	ldr	r3, [pc, #196]	; (8010230 <HAL_SD_MspInit+0x210>)
 801016c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010170:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8010172:	482f      	ldr	r0, [pc, #188]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010174:	f7f1 fdcc 	bl	8001d10 <HAL_DMA_Init>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d001      	beq.n	8010182 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 801017e:	f7ff fc4b 	bl	800fa18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4a2a      	ldr	r2, [pc, #168]	; (8010230 <HAL_SD_MspInit+0x210>)
 8010186:	641a      	str	r2, [r3, #64]	; 0x40
 8010188:	4a29      	ldr	r2, [pc, #164]	; (8010230 <HAL_SD_MspInit+0x210>)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 801018e:	4b2a      	ldr	r3, [pc, #168]	; (8010238 <HAL_SD_MspInit+0x218>)
 8010190:	4a2a      	ldr	r2, [pc, #168]	; (801023c <HAL_SD_MspInit+0x21c>)
 8010192:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8010194:	4b28      	ldr	r3, [pc, #160]	; (8010238 <HAL_SD_MspInit+0x218>)
 8010196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801019a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801019c:	4b26      	ldr	r3, [pc, #152]	; (8010238 <HAL_SD_MspInit+0x218>)
 801019e:	2240      	movs	r2, #64	; 0x40
 80101a0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80101a2:	4b25      	ldr	r3, [pc, #148]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101a4:	2200      	movs	r2, #0
 80101a6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80101a8:	4b23      	ldr	r3, [pc, #140]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80101ae:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80101b0:	4b21      	ldr	r3, [pc, #132]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101b6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80101b8:	4b1f      	ldr	r3, [pc, #124]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80101be:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80101c0:	4b1d      	ldr	r3, [pc, #116]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101c2:	2220      	movs	r2, #32
 80101c4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80101c6:	4b1c      	ldr	r3, [pc, #112]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80101cc:	4b1a      	ldr	r3, [pc, #104]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101ce:	2204      	movs	r2, #4
 80101d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80101d2:	4b19      	ldr	r3, [pc, #100]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101d4:	2203      	movs	r2, #3
 80101d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80101d8:	4b17      	ldr	r3, [pc, #92]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80101de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80101e0:	4b15      	ldr	r3, [pc, #84]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80101e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80101e8:	4813      	ldr	r0, [pc, #76]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101ea:	f7f1 fd91 	bl	8001d10 <HAL_DMA_Init>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 80101f4:	f7ff fc10 	bl	800fa18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4a0f      	ldr	r2, [pc, #60]	; (8010238 <HAL_SD_MspInit+0x218>)
 80101fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80101fe:	4a0e      	ldr	r2, [pc, #56]	; (8010238 <HAL_SD_MspInit+0x218>)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8010204:	2200      	movs	r2, #0
 8010206:	2100      	movs	r1, #0
 8010208:	2031      	movs	r0, #49	; 0x31
 801020a:	f7f1 fd4a 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 801020e:	2031      	movs	r0, #49	; 0x31
 8010210:	f7f1 fd63 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8010214:	bf00      	nop
 8010216:	3730      	adds	r7, #48	; 0x30
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	40012c00 	.word	0x40012c00
 8010220:	40023800 	.word	0x40023800
 8010224:	40020000 	.word	0x40020000
 8010228:	40020400 	.word	0x40020400
 801022c:	40020800 	.word	0x40020800
 8010230:	20001dd4 	.word	0x20001dd4
 8010234:	40026458 	.word	0x40026458
 8010238:	20001fe8 	.word	0x20001fe8
 801023c:	400264a0 	.word	0x400264a0

08010240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010250:	d115      	bne.n	801027e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010252:	2300      	movs	r3, #0
 8010254:	60fb      	str	r3, [r7, #12]
 8010256:	4b0c      	ldr	r3, [pc, #48]	; (8010288 <HAL_TIM_Base_MspInit+0x48>)
 8010258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801025a:	4a0b      	ldr	r2, [pc, #44]	; (8010288 <HAL_TIM_Base_MspInit+0x48>)
 801025c:	f043 0301 	orr.w	r3, r3, #1
 8010260:	6413      	str	r3, [r2, #64]	; 0x40
 8010262:	4b09      	ldr	r3, [pc, #36]	; (8010288 <HAL_TIM_Base_MspInit+0x48>)
 8010264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010266:	f003 0301 	and.w	r3, r3, #1
 801026a:	60fb      	str	r3, [r7, #12]
 801026c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801026e:	2200      	movs	r2, #0
 8010270:	2100      	movs	r1, #0
 8010272:	201c      	movs	r0, #28
 8010274:	f7f1 fd15 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8010278:	201c      	movs	r0, #28
 801027a:	f7f1 fd2e 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 801027e:	bf00      	nop
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	40023800 	.word	0x40023800

0801028c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b08a      	sub	sp, #40	; 0x28
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010294:	f107 0314 	add.w	r3, r7, #20
 8010298:	2200      	movs	r2, #0
 801029a:	601a      	str	r2, [r3, #0]
 801029c:	605a      	str	r2, [r3, #4]
 801029e:	609a      	str	r2, [r3, #8]
 80102a0:	60da      	str	r2, [r3, #12]
 80102a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	4a19      	ldr	r2, [pc, #100]	; (8010310 <HAL_UART_MspInit+0x84>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d12c      	bne.n	8010308 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80102ae:	2300      	movs	r3, #0
 80102b0:	613b      	str	r3, [r7, #16]
 80102b2:	4b18      	ldr	r3, [pc, #96]	; (8010314 <HAL_UART_MspInit+0x88>)
 80102b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b6:	4a17      	ldr	r2, [pc, #92]	; (8010314 <HAL_UART_MspInit+0x88>)
 80102b8:	f043 0310 	orr.w	r3, r3, #16
 80102bc:	6453      	str	r3, [r2, #68]	; 0x44
 80102be:	4b15      	ldr	r3, [pc, #84]	; (8010314 <HAL_UART_MspInit+0x88>)
 80102c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102c2:	f003 0310 	and.w	r3, r3, #16
 80102c6:	613b      	str	r3, [r7, #16]
 80102c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102ca:	2300      	movs	r3, #0
 80102cc:	60fb      	str	r3, [r7, #12]
 80102ce:	4b11      	ldr	r3, [pc, #68]	; (8010314 <HAL_UART_MspInit+0x88>)
 80102d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102d2:	4a10      	ldr	r2, [pc, #64]	; (8010314 <HAL_UART_MspInit+0x88>)
 80102d4:	f043 0301 	orr.w	r3, r3, #1
 80102d8:	6313      	str	r3, [r2, #48]	; 0x30
 80102da:	4b0e      	ldr	r3, [pc, #56]	; (8010314 <HAL_UART_MspInit+0x88>)
 80102dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102de:	f003 0301 	and.w	r3, r3, #1
 80102e2:	60fb      	str	r3, [r7, #12]
 80102e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80102e6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80102ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102ec:	2302      	movs	r3, #2
 80102ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102f4:	2303      	movs	r3, #3
 80102f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80102f8:	2307      	movs	r3, #7
 80102fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102fc:	f107 0314 	add.w	r3, r7, #20
 8010300:	4619      	mov	r1, r3
 8010302:	4805      	ldr	r0, [pc, #20]	; (8010318 <HAL_UART_MspInit+0x8c>)
 8010304:	f7f2 f8b0 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8010308:	bf00      	nop
 801030a:	3728      	adds	r7, #40	; 0x28
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	40011000 	.word	0x40011000
 8010314:	40023800 	.word	0x40023800
 8010318:	40020000 	.word	0x40020000

0801031c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8010320:	f7f6 fa4c 	bl	80067bc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010324:	e7fe      	b.n	8010324 <NMI_Handler+0x8>

08010326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010326:	b480      	push	{r7}
 8010328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801032a:	e7fe      	b.n	801032a <HardFault_Handler+0x4>

0801032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801032c:	b480      	push	{r7}
 801032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010330:	e7fe      	b.n	8010330 <MemManage_Handler+0x4>

08010332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010332:	b480      	push	{r7}
 8010334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010336:	e7fe      	b.n	8010336 <BusFault_Handler+0x4>

08010338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010338:	b480      	push	{r7}
 801033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801033c:	e7fe      	b.n	801033c <UsageFault_Handler+0x4>

0801033e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801033e:	b480      	push	{r7}
 8010340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010342:	bf00      	nop
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801034c:	b480      	push	{r7}
 801034e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010350:	bf00      	nop
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801035a:	b480      	push	{r7}
 801035c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801035e:	bf00      	nop
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 801036c:	f7fd fe98 	bl	800e0a0 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010370:	f7f0 fed2 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010374:	bf00      	nop
 8010376:	bd80      	pop	{r7, pc}

08010378 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 801037c:	4802      	ldr	r0, [pc, #8]	; (8010388 <DMA1_Stream1_IRQHandler+0x10>)
 801037e:	f7f1 fdef 	bl	8001f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8010382:	bf00      	nop
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	20001e34 	.word	0x20001e34

0801038c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	uint32_t u32Result;

	u32Result = HAL_ADC_GetValue(&hadc1);
 8010392:	4807      	ldr	r0, [pc, #28]	; (80103b0 <ADC_IRQHandler+0x24>)
 8010394:	f7f1 f947 	bl	8001626 <HAL_ADC_GetValue>
 8010398:	6078      	str	r0, [r7, #4]

	USB_SignalizeVBUSMeasurementReady(u32Result);
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7fe fece 	bl	800f13c <USB_SignalizeVBUSMeasurementReady>

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80103a0:	4803      	ldr	r0, [pc, #12]	; (80103b0 <ADC_IRQHandler+0x24>)
 80103a2:	f7f0 ffff 	bl	80013a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80103a6:	bf00      	nop
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	20001f3c 	.word	0x20001f3c

080103b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 80103b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80103bc:	4804      	ldr	r0, [pc, #16]	; (80103d0 <EXTI9_5_IRQHandler+0x1c>)
 80103be:	f7f2 f9d7 	bl	8002770 <HAL_GPIO_ReadPin>
	else
	{
//		CommManager_SetUSBConnectionState(USB_Disconnected);
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_VSENSE_Pin);
 80103c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80103c6:	f7f2 fa1f 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80103ca:	bf00      	nop
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	40020000 	.word	0x40020000

080103d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80103d8:	4804      	ldr	r0, [pc, #16]	; (80103ec <TIM2_IRQHandler+0x18>)
 80103da:	f7f8 f99c 	bl	8008716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 80103de:	f7fe fca7 	bl	800ed30 <TempCollect_ScheduleMeasurement>
  DataSaver_TickAveragingPeriod();
 80103e2:	f7fe f985 	bl	800e6f0 <DataSaver_TickAveragingPeriod>

  /* USER CODE END TIM2_IRQn 1 */
}
 80103e6:	bf00      	nop
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	200020cc 	.word	0x200020cc

080103f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80103f4:	4802      	ldr	r0, [pc, #8]	; (8010400 <I2C1_EV_IRQHandler+0x10>)
 80103f6:	f7f2 fd27 	bl	8002e48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80103fa:	bf00      	nop
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	20001e94 	.word	0x20001e94

08010404 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
	TempCollect_CommFaultOccured(eModule_I2CA);
 8010408:	2000      	movs	r0, #0
 801040a:	f7fe fcbd 	bl	800ed88 <TempCollect_CommFaultOccured>
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 801040e:	4802      	ldr	r0, [pc, #8]	; (8010418 <I2C1_ER_IRQHandler+0x14>)
 8010410:	f7f2 fe8b 	bl	800312a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8010414:	bf00      	nop
 8010416:	bd80      	pop	{r7, pc}
 8010418:	20001e94 	.word	0x20001e94

0801041c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8010420:	4802      	ldr	r0, [pc, #8]	; (801042c <I2C2_EV_IRQHandler+0x10>)
 8010422:	f7f2 fd11 	bl	8002e48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8010426:	bf00      	nop
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	20001ee8 	.word	0x20001ee8

08010430 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	TempCollect_CommFaultOccured(eModule_I2CB);
 8010434:	2001      	movs	r0, #1
 8010436:	f7fe fca7 	bl	800ed88 <TempCollect_CommFaultOccured>
  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 801043a:	4802      	ldr	r0, [pc, #8]	; (8010444 <I2C2_ER_IRQHandler+0x14>)
 801043c:	f7f2 fe75 	bl	800312a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8010440:	bf00      	nop
 8010442:	bd80      	pop	{r7, pc}
 8010444:	20001ee8 	.word	0x20001ee8

08010448 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 801044c:	4802      	ldr	r0, [pc, #8]	; (8010458 <SDIO_IRQHandler+0x10>)
 801044e:	f7f6 ff9f 	bl	8007390 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8010452:	bf00      	nop
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	20002048 	.word	0x20002048

0801045c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8010460:	4802      	ldr	r0, [pc, #8]	; (801046c <DMA2_Stream3_IRQHandler+0x10>)
 8010462:	f7f1 fd7d 	bl	8001f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8010466:	bf00      	nop
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	20001dd4 	.word	0x20001dd4

08010470 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8010474:	4802      	ldr	r0, [pc, #8]	; (8010480 <OTG_FS_IRQHandler+0x10>)
 8010476:	f7f4 fd1b 	bl	8004eb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801047a:	bf00      	nop
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	200033e4 	.word	0x200033e4

08010484 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8010488:	4802      	ldr	r0, [pc, #8]	; (8010494 <DMA2_Stream6_IRQHandler+0x10>)
 801048a:	f7f1 fd69 	bl	8001f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 801048e:	bf00      	nop
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	20001fe8 	.word	0x20001fe8

08010498 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4a0a      	ldr	r2, [pc, #40]	; (80104cc <HAL_I2C_MemRxCpltCallback+0x34>)
 80104a4:	4293      	cmp	r3, r2
 80104a6:	d102      	bne.n	80104ae <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
 80104a8:	f7fe fc56 	bl	800ed58 <TempCollect_I2CA_Done>
	}
	else
	{
		AssertError(AppError_UndefinedError);
	}
}
 80104ac:	e009      	b.n	80104c2 <HAL_I2C_MemRxCpltCallback+0x2a>
	else if ( hi2c == &hi2c2)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4a07      	ldr	r2, [pc, #28]	; (80104d0 <HAL_I2C_MemRxCpltCallback+0x38>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d102      	bne.n	80104bc <HAL_I2C_MemRxCpltCallback+0x24>
		TempCollect_I2CB_Done();
 80104b6:	f7fe fc5b 	bl	800ed70 <TempCollect_I2CB_Done>
}
 80104ba:	e002      	b.n	80104c2 <HAL_I2C_MemRxCpltCallback+0x2a>
		AssertError(AppError_UndefinedError);
 80104bc:	2008      	movs	r0, #8
 80104be:	f7fd fefd 	bl	800e2bc <AssertError>
}
 80104c2:	bf00      	nop
 80104c4:	3708      	adds	r7, #8
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	20001e94 	.word	0x20001e94
 80104d0:	20001ee8 	.word	0x20001ee8

080104d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80104d4:	b480      	push	{r7}
 80104d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80104d8:	4b06      	ldr	r3, [pc, #24]	; (80104f4 <SystemInit+0x20>)
 80104da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104de:	4a05      	ldr	r2, [pc, #20]	; (80104f4 <SystemInit+0x20>)
 80104e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80104e8:	bf00      	nop
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	e000ed00 	.word	0xe000ed00

080104f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80104fc:	2200      	movs	r2, #0
 80104fe:	4912      	ldr	r1, [pc, #72]	; (8010548 <MX_USB_DEVICE_Init+0x50>)
 8010500:	4812      	ldr	r0, [pc, #72]	; (801054c <MX_USB_DEVICE_Init+0x54>)
 8010502:	f7fb ff35 	bl	800c370 <USBD_Init>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d001      	beq.n	8010510 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801050c:	f7ff fa84 	bl	800fa18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010510:	490f      	ldr	r1, [pc, #60]	; (8010550 <MX_USB_DEVICE_Init+0x58>)
 8010512:	480e      	ldr	r0, [pc, #56]	; (801054c <MX_USB_DEVICE_Init+0x54>)
 8010514:	f7fb ff5c 	bl	800c3d0 <USBD_RegisterClass>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801051e:	f7ff fa7b 	bl	800fa18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010522:	490c      	ldr	r1, [pc, #48]	; (8010554 <MX_USB_DEVICE_Init+0x5c>)
 8010524:	4809      	ldr	r0, [pc, #36]	; (801054c <MX_USB_DEVICE_Init+0x54>)
 8010526:	f7fb fe7d 	bl	800c224 <USBD_CDC_RegisterInterface>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d001      	beq.n	8010534 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010530:	f7ff fa72 	bl	800fa18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010534:	4805      	ldr	r0, [pc, #20]	; (801054c <MX_USB_DEVICE_Init+0x54>)
 8010536:	f7fb ff72 	bl	800c41e <USBD_Start>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d001      	beq.n	8010544 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010540:	f7ff fa6a 	bl	800fa18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010544:	bf00      	nop
 8010546:	bd80      	pop	{r7, pc}
 8010548:	20000130 	.word	0x20000130
 801054c:	20002114 	.word	0x20002114
 8010550:	20000014 	.word	0x20000014
 8010554:	2000011c 	.word	0x2000011c

08010558 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801055c:	2200      	movs	r2, #0
 801055e:	4905      	ldr	r1, [pc, #20]	; (8010574 <CDC_Init_FS+0x1c>)
 8010560:	4805      	ldr	r0, [pc, #20]	; (8010578 <CDC_Init_FS+0x20>)
 8010562:	f7fb fe74 	bl	800c24e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010566:	4905      	ldr	r1, [pc, #20]	; (801057c <CDC_Init_FS+0x24>)
 8010568:	4803      	ldr	r0, [pc, #12]	; (8010578 <CDC_Init_FS+0x20>)
 801056a:	f7fb fe8e 	bl	800c28a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801056e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010570:	4618      	mov	r0, r3
 8010572:	bd80      	pop	{r7, pc}
 8010574:	20002be4 	.word	0x20002be4
 8010578:	20002114 	.word	0x20002114
 801057c:	200023e4 	.word	0x200023e4

08010580 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010580:	b480      	push	{r7}
 8010582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010584:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010586:	4618      	mov	r0, r3
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr

08010590 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	6039      	str	r1, [r7, #0]
 801059a:	71fb      	strb	r3, [r7, #7]
 801059c:	4613      	mov	r3, r2
 801059e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80105a0:	79fb      	ldrb	r3, [r7, #7]
 80105a2:	2b23      	cmp	r3, #35	; 0x23
 80105a4:	d84a      	bhi.n	801063c <CDC_Control_FS+0xac>
 80105a6:	a201      	add	r2, pc, #4	; (adr r2, 80105ac <CDC_Control_FS+0x1c>)
 80105a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ac:	0801063d 	.word	0x0801063d
 80105b0:	0801063d 	.word	0x0801063d
 80105b4:	0801063d 	.word	0x0801063d
 80105b8:	0801063d 	.word	0x0801063d
 80105bc:	0801063d 	.word	0x0801063d
 80105c0:	0801063d 	.word	0x0801063d
 80105c4:	0801063d 	.word	0x0801063d
 80105c8:	0801063d 	.word	0x0801063d
 80105cc:	0801063d 	.word	0x0801063d
 80105d0:	0801063d 	.word	0x0801063d
 80105d4:	0801063d 	.word	0x0801063d
 80105d8:	0801063d 	.word	0x0801063d
 80105dc:	0801063d 	.word	0x0801063d
 80105e0:	0801063d 	.word	0x0801063d
 80105e4:	0801063d 	.word	0x0801063d
 80105e8:	0801063d 	.word	0x0801063d
 80105ec:	0801063d 	.word	0x0801063d
 80105f0:	0801063d 	.word	0x0801063d
 80105f4:	0801063d 	.word	0x0801063d
 80105f8:	0801063d 	.word	0x0801063d
 80105fc:	0801063d 	.word	0x0801063d
 8010600:	0801063d 	.word	0x0801063d
 8010604:	0801063d 	.word	0x0801063d
 8010608:	0801063d 	.word	0x0801063d
 801060c:	0801063d 	.word	0x0801063d
 8010610:	0801063d 	.word	0x0801063d
 8010614:	0801063d 	.word	0x0801063d
 8010618:	0801063d 	.word	0x0801063d
 801061c:	0801063d 	.word	0x0801063d
 8010620:	0801063d 	.word	0x0801063d
 8010624:	0801063d 	.word	0x0801063d
 8010628:	0801063d 	.word	0x0801063d
 801062c:	0801063d 	.word	0x0801063d
 8010630:	0801063d 	.word	0x0801063d
 8010634:	0801063d 	.word	0x0801063d
 8010638:	0801063d 	.word	0x0801063d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801063c:	bf00      	nop
  }

  return (USBD_OK);
 801063e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010640:	4618      	mov	r0, r3
 8010642:	370c      	adds	r7, #12
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr

0801064c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	4805      	ldr	r0, [pc, #20]	; (8010670 <CDC_Receive_FS+0x24>)
 801065a:	f7fb fe16 	bl	800c28a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801065e:	4804      	ldr	r0, [pc, #16]	; (8010670 <CDC_Receive_FS+0x24>)
 8010660:	f7fb fe5c 	bl	800c31c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010664:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20002114 	.word	0x20002114

08010674 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	460b      	mov	r3, r1
 801067e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010684:	4b0d      	ldr	r3, [pc, #52]	; (80106bc <CDC_Transmit_FS+0x48>)
 8010686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801068a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010696:	2301      	movs	r3, #1
 8010698:	e00b      	b.n	80106b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801069a:	887b      	ldrh	r3, [r7, #2]
 801069c:	461a      	mov	r2, r3
 801069e:	6879      	ldr	r1, [r7, #4]
 80106a0:	4806      	ldr	r0, [pc, #24]	; (80106bc <CDC_Transmit_FS+0x48>)
 80106a2:	f7fb fdd4 	bl	800c24e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80106a6:	4805      	ldr	r0, [pc, #20]	; (80106bc <CDC_Transmit_FS+0x48>)
 80106a8:	f7fb fe08 	bl	800c2bc <USBD_CDC_TransmitPacket>
 80106ac:	4603      	mov	r3, r0
 80106ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	20002114 	.word	0x20002114

080106c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b087      	sub	sp, #28
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	4613      	mov	r3, r2
 80106cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80106d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	371c      	adds	r7, #28
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
	...

080106e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08a      	sub	sp, #40	; 0x28
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106ec:	f107 0314 	add.w	r3, r7, #20
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]
 80106f4:	605a      	str	r2, [r3, #4]
 80106f6:	609a      	str	r2, [r3, #8]
 80106f8:	60da      	str	r2, [r3, #12]
 80106fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010704:	d13a      	bne.n	801077c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010706:	2300      	movs	r3, #0
 8010708:	613b      	str	r3, [r7, #16]
 801070a:	4b1e      	ldr	r3, [pc, #120]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 801070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070e:	4a1d      	ldr	r2, [pc, #116]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 8010710:	f043 0301 	orr.w	r3, r3, #1
 8010714:	6313      	str	r3, [r2, #48]	; 0x30
 8010716:	4b1b      	ldr	r3, [pc, #108]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 8010718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801071a:	f003 0301 	and.w	r3, r3, #1
 801071e:	613b      	str	r3, [r7, #16]
 8010720:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010722:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010728:	2302      	movs	r3, #2
 801072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801072c:	2300      	movs	r3, #0
 801072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010730:	2303      	movs	r3, #3
 8010732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010734:	230a      	movs	r3, #10
 8010736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010738:	f107 0314 	add.w	r3, r7, #20
 801073c:	4619      	mov	r1, r3
 801073e:	4812      	ldr	r0, [pc, #72]	; (8010788 <HAL_PCD_MspInit+0xa4>)
 8010740:	f7f1 fe92 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010744:	4b0f      	ldr	r3, [pc, #60]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 8010746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010748:	4a0e      	ldr	r2, [pc, #56]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 801074a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801074e:	6353      	str	r3, [r2, #52]	; 0x34
 8010750:	2300      	movs	r3, #0
 8010752:	60fb      	str	r3, [r7, #12]
 8010754:	4b0b      	ldr	r3, [pc, #44]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 8010756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010758:	4a0a      	ldr	r2, [pc, #40]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 801075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801075e:	6453      	str	r3, [r2, #68]	; 0x44
 8010760:	4b08      	ldr	r3, [pc, #32]	; (8010784 <HAL_PCD_MspInit+0xa0>)
 8010762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801076c:	2200      	movs	r2, #0
 801076e:	2100      	movs	r1, #0
 8010770:	2043      	movs	r0, #67	; 0x43
 8010772:	f7f1 fa96 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010776:	2043      	movs	r0, #67	; 0x43
 8010778:	f7f1 faaf 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801077c:	bf00      	nop
 801077e:	3728      	adds	r7, #40	; 0x28
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	40023800 	.word	0x40023800
 8010788:	40020000 	.word	0x40020000

0801078c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80107a0:	4619      	mov	r1, r3
 80107a2:	4610      	mov	r0, r2
 80107a4:	f7fb fe86 	bl	800c4b4 <USBD_LL_SetupStage>
}
 80107a8:	bf00      	nop
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	460b      	mov	r3, r1
 80107ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80107c2:	78fa      	ldrb	r2, [r7, #3]
 80107c4:	6879      	ldr	r1, [r7, #4]
 80107c6:	4613      	mov	r3, r2
 80107c8:	00db      	lsls	r3, r3, #3
 80107ca:	1a9b      	subs	r3, r3, r2
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	440b      	add	r3, r1
 80107d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	78fb      	ldrb	r3, [r7, #3]
 80107d8:	4619      	mov	r1, r3
 80107da:	f7fb fec0 	bl	800c55e <USBD_LL_DataOutStage>
}
 80107de:	bf00      	nop
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b082      	sub	sp, #8
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
 80107ee:	460b      	mov	r3, r1
 80107f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80107f8:	78fa      	ldrb	r2, [r7, #3]
 80107fa:	6879      	ldr	r1, [r7, #4]
 80107fc:	4613      	mov	r3, r2
 80107fe:	00db      	lsls	r3, r3, #3
 8010800:	1a9b      	subs	r3, r3, r2
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	440b      	add	r3, r1
 8010806:	3348      	adds	r3, #72	; 0x48
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	78fb      	ldrb	r3, [r7, #3]
 801080c:	4619      	mov	r1, r3
 801080e:	f7fb ff09 	bl	800c624 <USBD_LL_DataInStage>
}
 8010812:	bf00      	nop
 8010814:	3708      	adds	r7, #8
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801081a:	b580      	push	{r7, lr}
 801081c:	b082      	sub	sp, #8
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010828:	4618      	mov	r0, r3
 801082a:	f7fc f81d 	bl	800c868 <USBD_LL_SOF>
}
 801082e:	bf00      	nop
 8010830:	3708      	adds	r7, #8
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010836:	b580      	push	{r7, lr}
 8010838:	b084      	sub	sp, #16
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801083e:	2301      	movs	r3, #1
 8010840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	2b02      	cmp	r3, #2
 8010848:	d001      	beq.n	801084e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801084a:	f7ff f8e5 	bl	800fa18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010854:	7bfa      	ldrb	r2, [r7, #15]
 8010856:	4611      	mov	r1, r2
 8010858:	4618      	mov	r0, r3
 801085a:	f7fb ffc7 	bl	800c7ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010864:	4618      	mov	r0, r3
 8010866:	f7fb ff73 	bl	800c750 <USBD_LL_Reset>
}
 801086a:	bf00      	nop
 801086c:	3710      	adds	r7, #16
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
	...

08010874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010882:	4618      	mov	r0, r3
 8010884:	f7fb ffc2 	bl	800c80c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801089a:	f043 0301 	orr.w	r3, r3, #1
 801089e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6a1b      	ldr	r3, [r3, #32]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d005      	beq.n	80108b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80108a8:	4b04      	ldr	r3, [pc, #16]	; (80108bc <HAL_PCD_SuspendCallback+0x48>)
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	4a03      	ldr	r2, [pc, #12]	; (80108bc <HAL_PCD_SuspendCallback+0x48>)
 80108ae:	f043 0306 	orr.w	r3, r3, #6
 80108b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	e000ed00 	.word	0xe000ed00

080108c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fb ffb2 	bl	800c838 <USBD_LL_Resume>
}
 80108d4:	bf00      	nop
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	460b      	mov	r3, r1
 80108e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108ee:	78fa      	ldrb	r2, [r7, #3]
 80108f0:	4611      	mov	r1, r2
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fc f800 	bl	800c8f8 <USBD_LL_IsoOUTIncomplete>
}
 80108f8:	bf00      	nop
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	460b      	mov	r3, r1
 801090a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010912:	78fa      	ldrb	r2, [r7, #3]
 8010914:	4611      	mov	r1, r2
 8010916:	4618      	mov	r0, r3
 8010918:	f7fb ffc8 	bl	800c8ac <USBD_LL_IsoINIncomplete>
}
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010932:	4618      	mov	r0, r3
 8010934:	f7fc f806 	bl	800c944 <USBD_LL_DevConnected>
}
 8010938:	bf00      	nop
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801094e:	4618      	mov	r0, r3
 8010950:	f7fc f803 	bl	800c95a <USBD_LL_DevDisconnected>
}
 8010954:	bf00      	nop
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d13c      	bne.n	80109e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801096c:	4a20      	ldr	r2, [pc, #128]	; (80109f0 <USBD_LL_Init+0x94>)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	4a1e      	ldr	r2, [pc, #120]	; (80109f0 <USBD_LL_Init+0x94>)
 8010978:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801097c:	4b1c      	ldr	r3, [pc, #112]	; (80109f0 <USBD_LL_Init+0x94>)
 801097e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010984:	4b1a      	ldr	r3, [pc, #104]	; (80109f0 <USBD_LL_Init+0x94>)
 8010986:	2204      	movs	r2, #4
 8010988:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801098a:	4b19      	ldr	r3, [pc, #100]	; (80109f0 <USBD_LL_Init+0x94>)
 801098c:	2202      	movs	r2, #2
 801098e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010990:	4b17      	ldr	r3, [pc, #92]	; (80109f0 <USBD_LL_Init+0x94>)
 8010992:	2200      	movs	r2, #0
 8010994:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010996:	4b16      	ldr	r3, [pc, #88]	; (80109f0 <USBD_LL_Init+0x94>)
 8010998:	2202      	movs	r2, #2
 801099a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801099c:	4b14      	ldr	r3, [pc, #80]	; (80109f0 <USBD_LL_Init+0x94>)
 801099e:	2200      	movs	r2, #0
 80109a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80109a2:	4b13      	ldr	r3, [pc, #76]	; (80109f0 <USBD_LL_Init+0x94>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80109a8:	4b11      	ldr	r3, [pc, #68]	; (80109f0 <USBD_LL_Init+0x94>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80109ae:	4b10      	ldr	r3, [pc, #64]	; (80109f0 <USBD_LL_Init+0x94>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80109b4:	4b0e      	ldr	r3, [pc, #56]	; (80109f0 <USBD_LL_Init+0x94>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80109ba:	480d      	ldr	r0, [pc, #52]	; (80109f0 <USBD_LL_Init+0x94>)
 80109bc:	f7f4 f928 	bl	8004c10 <HAL_PCD_Init>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80109c6:	f7ff f827 	bl	800fa18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80109ca:	2180      	movs	r1, #128	; 0x80
 80109cc:	4808      	ldr	r0, [pc, #32]	; (80109f0 <USBD_LL_Init+0x94>)
 80109ce:	f7f5 fa86 	bl	8005ede <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80109d2:	2240      	movs	r2, #64	; 0x40
 80109d4:	2100      	movs	r1, #0
 80109d6:	4806      	ldr	r0, [pc, #24]	; (80109f0 <USBD_LL_Init+0x94>)
 80109d8:	f7f5 fa3a 	bl	8005e50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80109dc:	2280      	movs	r2, #128	; 0x80
 80109de:	2101      	movs	r1, #1
 80109e0:	4803      	ldr	r0, [pc, #12]	; (80109f0 <USBD_LL_Init+0x94>)
 80109e2:	f7f5 fa35 	bl	8005e50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	200033e4 	.word	0x200033e4

080109f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109fc:	2300      	movs	r3, #0
 80109fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a00:	2300      	movs	r3, #0
 8010a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7f4 fa1d 	bl	8004e4a <HAL_PCD_Start>
 8010a10:	4603      	mov	r3, r0
 8010a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	4618      	mov	r0, r3
 8010a18:	f000 f942 	bl	8010ca0 <USBD_Get_USB_Status>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3710      	adds	r7, #16
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b084      	sub	sp, #16
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	4608      	mov	r0, r1
 8010a34:	4611      	mov	r1, r2
 8010a36:	461a      	mov	r2, r3
 8010a38:	4603      	mov	r3, r0
 8010a3a:	70fb      	strb	r3, [r7, #3]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70bb      	strb	r3, [r7, #2]
 8010a40:	4613      	mov	r3, r2
 8010a42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a52:	78bb      	ldrb	r3, [r7, #2]
 8010a54:	883a      	ldrh	r2, [r7, #0]
 8010a56:	78f9      	ldrb	r1, [r7, #3]
 8010a58:	f7f4 fe01 	bl	800565e <HAL_PCD_EP_Open>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 f91c 	bl	8010ca0 <USBD_Get_USB_Status>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b084      	sub	sp, #16
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	460b      	mov	r3, r1
 8010a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a90:	78fa      	ldrb	r2, [r7, #3]
 8010a92:	4611      	mov	r1, r2
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7f4 fe4a 	bl	800572e <HAL_PCD_EP_Close>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a9e:	7bfb      	ldrb	r3, [r7, #15]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f000 f8fd 	bl	8010ca0 <USBD_Get_USB_Status>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3710      	adds	r7, #16
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	460b      	mov	r3, r1
 8010abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ace:	78fa      	ldrb	r2, [r7, #3]
 8010ad0:	4611      	mov	r1, r2
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7f4 ff22 	bl	800591c <HAL_PCD_EP_SetStall>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 f8de 	bl	8010ca0 <USBD_Get_USB_Status>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b084      	sub	sp, #16
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	460b      	mov	r3, r1
 8010afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b02:	2300      	movs	r3, #0
 8010b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b0c:	78fa      	ldrb	r2, [r7, #3]
 8010b0e:	4611      	mov	r1, r2
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7f4 ff67 	bl	80059e4 <HAL_PCD_EP_ClrStall>
 8010b16:	4603      	mov	r3, r0
 8010b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 f8bf 	bl	8010ca0 <USBD_Get_USB_Status>
 8010b22:	4603      	mov	r3, r0
 8010b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3710      	adds	r7, #16
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	da0b      	bge.n	8010b64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b4c:	78fb      	ldrb	r3, [r7, #3]
 8010b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b52:	68f9      	ldr	r1, [r7, #12]
 8010b54:	4613      	mov	r3, r2
 8010b56:	00db      	lsls	r3, r3, #3
 8010b58:	1a9b      	subs	r3, r3, r2
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	440b      	add	r3, r1
 8010b5e:	333e      	adds	r3, #62	; 0x3e
 8010b60:	781b      	ldrb	r3, [r3, #0]
 8010b62:	e00b      	b.n	8010b7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b64:	78fb      	ldrb	r3, [r7, #3]
 8010b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b6a:	68f9      	ldr	r1, [r7, #12]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	00db      	lsls	r3, r3, #3
 8010b70:	1a9b      	subs	r3, r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	440b      	add	r3, r1
 8010b76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b94:	2300      	movs	r3, #0
 8010b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ba2:	78fa      	ldrb	r2, [r7, #3]
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7f4 fd34 	bl	8005614 <HAL_PCD_SetAddress>
 8010bac:	4603      	mov	r3, r0
 8010bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f000 f874 	bl	8010ca0 <USBD_Get_USB_Status>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3710      	adds	r7, #16
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b086      	sub	sp, #24
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	607a      	str	r2, [r7, #4]
 8010bd0:	603b      	str	r3, [r7, #0]
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010be4:	7af9      	ldrb	r1, [r7, #11]
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	f7f4 fe4d 	bl	8005888 <HAL_PCD_EP_Transmit>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bf2:	7dfb      	ldrb	r3, [r7, #23]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 f853 	bl	8010ca0 <USBD_Get_USB_Status>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010bfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	607a      	str	r2, [r7, #4]
 8010c12:	603b      	str	r3, [r7, #0]
 8010c14:	460b      	mov	r3, r1
 8010c16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c26:	7af9      	ldrb	r1, [r7, #11]
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	f7f4 fdc9 	bl	80057c2 <HAL_PCD_EP_Receive>
 8010c30:	4603      	mov	r3, r0
 8010c32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c34:	7dfb      	ldrb	r3, [r7, #23]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 f832 	bl	8010ca0 <USBD_Get_USB_Status>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c40:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3718      	adds	r7, #24
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b082      	sub	sp, #8
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
 8010c52:	460b      	mov	r3, r1
 8010c54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c5c:	78fa      	ldrb	r2, [r7, #3]
 8010c5e:	4611      	mov	r1, r2
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7f4 fdf9 	bl	8005858 <HAL_PCD_EP_GetRxCount>
 8010c66:	4603      	mov	r3, r0
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c78:	4b03      	ldr	r3, [pc, #12]	; (8010c88 <USBD_static_malloc+0x18>)
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	370c      	adds	r7, #12
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	200015bc 	.word	0x200015bc

08010c8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]

}
 8010c94:	bf00      	nop
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b085      	sub	sp, #20
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010caa:	2300      	movs	r3, #0
 8010cac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010cae:	79fb      	ldrb	r3, [r7, #7]
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d817      	bhi.n	8010ce4 <USBD_Get_USB_Status+0x44>
 8010cb4:	a201      	add	r2, pc, #4	; (adr r2, 8010cbc <USBD_Get_USB_Status+0x1c>)
 8010cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cba:	bf00      	nop
 8010cbc:	08010ccd 	.word	0x08010ccd
 8010cc0:	08010cd3 	.word	0x08010cd3
 8010cc4:	08010cd9 	.word	0x08010cd9
 8010cc8:	08010cdf 	.word	0x08010cdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	73fb      	strb	r3, [r7, #15]
    break;
 8010cd0:	e00b      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010cd2:	2303      	movs	r3, #3
 8010cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8010cd6:	e008      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	73fb      	strb	r3, [r7, #15]
    break;
 8010cdc:	e005      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ce2:	e002      	b.n	8010cea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010ce4:	2303      	movs	r3, #3
 8010ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ce8:	bf00      	nop
  }
  return usb_status;
 8010cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	6039      	str	r1, [r7, #0]
 8010d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	2212      	movs	r2, #18
 8010d08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010d0a:	4b03      	ldr	r3, [pc, #12]	; (8010d18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	370c      	adds	r7, #12
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr
 8010d18:	2000014c 	.word	0x2000014c

08010d1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	4603      	mov	r3, r0
 8010d24:	6039      	str	r1, [r7, #0]
 8010d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	2204      	movs	r2, #4
 8010d2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010d2e:	4b03      	ldr	r3, [pc, #12]	; (8010d3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr
 8010d3c:	20000160 	.word	0x20000160

08010d40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	4603      	mov	r3, r0
 8010d48:	6039      	str	r1, [r7, #0]
 8010d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d4c:	79fb      	ldrb	r3, [r7, #7]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d105      	bne.n	8010d5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	4907      	ldr	r1, [pc, #28]	; (8010d74 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d56:	4808      	ldr	r0, [pc, #32]	; (8010d78 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d58:	f7fc fb93 	bl	800d482 <USBD_GetString>
 8010d5c:	e004      	b.n	8010d68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d5e:	683a      	ldr	r2, [r7, #0]
 8010d60:	4904      	ldr	r1, [pc, #16]	; (8010d74 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d62:	4805      	ldr	r0, [pc, #20]	; (8010d78 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d64:	f7fc fb8d 	bl	800d482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d68:	4b02      	ldr	r3, [pc, #8]	; (8010d74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	200037ec 	.word	0x200037ec
 8010d78:	08013db4 	.word	0x08013db4

08010d7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	6039      	str	r1, [r7, #0]
 8010d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010d88:	683a      	ldr	r2, [r7, #0]
 8010d8a:	4904      	ldr	r1, [pc, #16]	; (8010d9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010d8c:	4804      	ldr	r0, [pc, #16]	; (8010da0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010d8e:	f7fc fb78 	bl	800d482 <USBD_GetString>
  return USBD_StrDesc;
 8010d92:	4b02      	ldr	r3, [pc, #8]	; (8010d9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	200037ec 	.word	0x200037ec
 8010da0:	08013dcc 	.word	0x08013dcc

08010da4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	6039      	str	r1, [r7, #0]
 8010dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	221a      	movs	r2, #26
 8010db4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010db6:	f000 f843 	bl	8010e40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010dba:	4b02      	ldr	r3, [pc, #8]	; (8010dc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	20000164 	.word	0x20000164

08010dc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	4603      	mov	r3, r0
 8010dd0:	6039      	str	r1, [r7, #0]
 8010dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d105      	bne.n	8010de6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dda:	683a      	ldr	r2, [r7, #0]
 8010ddc:	4907      	ldr	r1, [pc, #28]	; (8010dfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dde:	4808      	ldr	r0, [pc, #32]	; (8010e00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010de0:	f7fc fb4f 	bl	800d482 <USBD_GetString>
 8010de4:	e004      	b.n	8010df0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010de6:	683a      	ldr	r2, [r7, #0]
 8010de8:	4904      	ldr	r1, [pc, #16]	; (8010dfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dea:	4805      	ldr	r0, [pc, #20]	; (8010e00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010dec:	f7fc fb49 	bl	800d482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010df0:	4b02      	ldr	r3, [pc, #8]	; (8010dfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3708      	adds	r7, #8
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	200037ec 	.word	0x200037ec
 8010e00:	08013de0 	.word	0x08013de0

08010e04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	6039      	str	r1, [r7, #0]
 8010e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e10:	79fb      	ldrb	r3, [r7, #7]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d105      	bne.n	8010e22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	4907      	ldr	r1, [pc, #28]	; (8010e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e1a:	4808      	ldr	r0, [pc, #32]	; (8010e3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e1c:	f7fc fb31 	bl	800d482 <USBD_GetString>
 8010e20:	e004      	b.n	8010e2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e22:	683a      	ldr	r2, [r7, #0]
 8010e24:	4904      	ldr	r1, [pc, #16]	; (8010e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e26:	4805      	ldr	r0, [pc, #20]	; (8010e3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e28:	f7fc fb2b 	bl	800d482 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e2c:	4b02      	ldr	r3, [pc, #8]	; (8010e38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	200037ec 	.word	0x200037ec
 8010e3c:	08013dec 	.word	0x08013dec

08010e40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010e46:	4b0f      	ldr	r3, [pc, #60]	; (8010e84 <Get_SerialNum+0x44>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010e4c:	4b0e      	ldr	r3, [pc, #56]	; (8010e88 <Get_SerialNum+0x48>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010e52:	4b0e      	ldr	r3, [pc, #56]	; (8010e8c <Get_SerialNum+0x4c>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010e58:	68fa      	ldr	r2, [r7, #12]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d009      	beq.n	8010e7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010e66:	2208      	movs	r2, #8
 8010e68:	4909      	ldr	r1, [pc, #36]	; (8010e90 <Get_SerialNum+0x50>)
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f000 f814 	bl	8010e98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010e70:	2204      	movs	r2, #4
 8010e72:	4908      	ldr	r1, [pc, #32]	; (8010e94 <Get_SerialNum+0x54>)
 8010e74:	68b8      	ldr	r0, [r7, #8]
 8010e76:	f000 f80f 	bl	8010e98 <IntToUnicode>
  }
}
 8010e7a:	bf00      	nop
 8010e7c:	3710      	adds	r7, #16
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	1fff7a10 	.word	0x1fff7a10
 8010e88:	1fff7a14 	.word	0x1fff7a14
 8010e8c:	1fff7a18 	.word	0x1fff7a18
 8010e90:	20000166 	.word	0x20000166
 8010e94:	20000176 	.word	0x20000176

08010e98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b087      	sub	sp, #28
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010eaa:	2300      	movs	r3, #0
 8010eac:	75fb      	strb	r3, [r7, #23]
 8010eae:	e027      	b.n	8010f00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	0f1b      	lsrs	r3, r3, #28
 8010eb4:	2b09      	cmp	r3, #9
 8010eb6:	d80b      	bhi.n	8010ed0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	0f1b      	lsrs	r3, r3, #28
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	7dfb      	ldrb	r3, [r7, #23]
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	440b      	add	r3, r1
 8010ec8:	3230      	adds	r2, #48	; 0x30
 8010eca:	b2d2      	uxtb	r2, r2
 8010ecc:	701a      	strb	r2, [r3, #0]
 8010ece:	e00a      	b.n	8010ee6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	0f1b      	lsrs	r3, r3, #28
 8010ed4:	b2da      	uxtb	r2, r3
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	4619      	mov	r1, r3
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	440b      	add	r3, r1
 8010ee0:	3237      	adds	r2, #55	; 0x37
 8010ee2:	b2d2      	uxtb	r2, r2
 8010ee4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	011b      	lsls	r3, r3, #4
 8010eea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010eec:	7dfb      	ldrb	r3, [r7, #23]
 8010eee:	005b      	lsls	r3, r3, #1
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010efa:	7dfb      	ldrb	r3, [r7, #23]
 8010efc:	3301      	adds	r3, #1
 8010efe:	75fb      	strb	r3, [r7, #23]
 8010f00:	7dfa      	ldrb	r2, [r7, #23]
 8010f02:	79fb      	ldrb	r3, [r7, #7]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d3d3      	bcc.n	8010eb0 <IntToUnicode+0x18>
  }
}
 8010f08:	bf00      	nop
 8010f0a:	bf00      	nop
 8010f0c:	371c      	adds	r7, #28
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
	...

08010f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010f1c:	480d      	ldr	r0, [pc, #52]	; (8010f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010f1e:	490e      	ldr	r1, [pc, #56]	; (8010f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010f20:	4a0e      	ldr	r2, [pc, #56]	; (8010f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010f24:	e002      	b.n	8010f2c <LoopCopyDataInit>

08010f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010f2a:	3304      	adds	r3, #4

08010f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010f30:	d3f9      	bcc.n	8010f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010f32:	4a0b      	ldr	r2, [pc, #44]	; (8010f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010f34:	4c0b      	ldr	r4, [pc, #44]	; (8010f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010f38:	e001      	b.n	8010f3e <LoopFillZerobss>

08010f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010f3c:	3204      	adds	r2, #4

08010f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010f40:	d3fb      	bcc.n	8010f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010f42:	f7ff fac7 	bl	80104d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010f46:	f000 f811 	bl	8010f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010f4a:	f7fe f9fb 	bl	800f344 <main>
  bx  lr    
 8010f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010f58:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8010f5c:	08014244 	.word	0x08014244
  ldr r2, =_sbss
 8010f60:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8010f64:	200039fc 	.word	0x200039fc

08010f68 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010f68:	e7fe      	b.n	8010f68 <DMA1_Stream0_IRQHandler>
	...

08010f6c <__libc_init_array>:
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	4d0d      	ldr	r5, [pc, #52]	; (8010fa4 <__libc_init_array+0x38>)
 8010f70:	4c0d      	ldr	r4, [pc, #52]	; (8010fa8 <__libc_init_array+0x3c>)
 8010f72:	1b64      	subs	r4, r4, r5
 8010f74:	10a4      	asrs	r4, r4, #2
 8010f76:	2600      	movs	r6, #0
 8010f78:	42a6      	cmp	r6, r4
 8010f7a:	d109      	bne.n	8010f90 <__libc_init_array+0x24>
 8010f7c:	4d0b      	ldr	r5, [pc, #44]	; (8010fac <__libc_init_array+0x40>)
 8010f7e:	4c0c      	ldr	r4, [pc, #48]	; (8010fb0 <__libc_init_array+0x44>)
 8010f80:	f002 ff04 	bl	8013d8c <_init>
 8010f84:	1b64      	subs	r4, r4, r5
 8010f86:	10a4      	asrs	r4, r4, #2
 8010f88:	2600      	movs	r6, #0
 8010f8a:	42a6      	cmp	r6, r4
 8010f8c:	d105      	bne.n	8010f9a <__libc_init_array+0x2e>
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}
 8010f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f94:	4798      	blx	r3
 8010f96:	3601      	adds	r6, #1
 8010f98:	e7ee      	b.n	8010f78 <__libc_init_array+0xc>
 8010f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f9e:	4798      	blx	r3
 8010fa0:	3601      	adds	r6, #1
 8010fa2:	e7f2      	b.n	8010f8a <__libc_init_array+0x1e>
 8010fa4:	0801423c 	.word	0x0801423c
 8010fa8:	0801423c 	.word	0x0801423c
 8010fac:	0801423c 	.word	0x0801423c
 8010fb0:	08014240 	.word	0x08014240

08010fb4 <memset>:
 8010fb4:	4402      	add	r2, r0
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d100      	bne.n	8010fbe <memset+0xa>
 8010fbc:	4770      	bx	lr
 8010fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8010fc2:	e7f9      	b.n	8010fb8 <memset+0x4>

08010fc4 <__cvt>:
 8010fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc8:	ec55 4b10 	vmov	r4, r5, d0
 8010fcc:	2d00      	cmp	r5, #0
 8010fce:	460e      	mov	r6, r1
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	462b      	mov	r3, r5
 8010fd4:	bfbb      	ittet	lt
 8010fd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010fda:	461d      	movlt	r5, r3
 8010fdc:	2300      	movge	r3, #0
 8010fde:	232d      	movlt	r3, #45	; 0x2d
 8010fe0:	700b      	strb	r3, [r1, #0]
 8010fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fe4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010fe8:	4691      	mov	r9, r2
 8010fea:	f023 0820 	bic.w	r8, r3, #32
 8010fee:	bfbc      	itt	lt
 8010ff0:	4622      	movlt	r2, r4
 8010ff2:	4614      	movlt	r4, r2
 8010ff4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ff8:	d005      	beq.n	8011006 <__cvt+0x42>
 8010ffa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ffe:	d100      	bne.n	8011002 <__cvt+0x3e>
 8011000:	3601      	adds	r6, #1
 8011002:	2102      	movs	r1, #2
 8011004:	e000      	b.n	8011008 <__cvt+0x44>
 8011006:	2103      	movs	r1, #3
 8011008:	ab03      	add	r3, sp, #12
 801100a:	9301      	str	r3, [sp, #4]
 801100c:	ab02      	add	r3, sp, #8
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	ec45 4b10 	vmov	d0, r4, r5
 8011014:	4653      	mov	r3, sl
 8011016:	4632      	mov	r2, r6
 8011018:	f000 fcea 	bl	80119f0 <_dtoa_r>
 801101c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011020:	4607      	mov	r7, r0
 8011022:	d102      	bne.n	801102a <__cvt+0x66>
 8011024:	f019 0f01 	tst.w	r9, #1
 8011028:	d022      	beq.n	8011070 <__cvt+0xac>
 801102a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801102e:	eb07 0906 	add.w	r9, r7, r6
 8011032:	d110      	bne.n	8011056 <__cvt+0x92>
 8011034:	783b      	ldrb	r3, [r7, #0]
 8011036:	2b30      	cmp	r3, #48	; 0x30
 8011038:	d10a      	bne.n	8011050 <__cvt+0x8c>
 801103a:	2200      	movs	r2, #0
 801103c:	2300      	movs	r3, #0
 801103e:	4620      	mov	r0, r4
 8011040:	4629      	mov	r1, r5
 8011042:	f7ef fd49 	bl	8000ad8 <__aeabi_dcmpeq>
 8011046:	b918      	cbnz	r0, 8011050 <__cvt+0x8c>
 8011048:	f1c6 0601 	rsb	r6, r6, #1
 801104c:	f8ca 6000 	str.w	r6, [sl]
 8011050:	f8da 3000 	ldr.w	r3, [sl]
 8011054:	4499      	add	r9, r3
 8011056:	2200      	movs	r2, #0
 8011058:	2300      	movs	r3, #0
 801105a:	4620      	mov	r0, r4
 801105c:	4629      	mov	r1, r5
 801105e:	f7ef fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8011062:	b108      	cbz	r0, 8011068 <__cvt+0xa4>
 8011064:	f8cd 900c 	str.w	r9, [sp, #12]
 8011068:	2230      	movs	r2, #48	; 0x30
 801106a:	9b03      	ldr	r3, [sp, #12]
 801106c:	454b      	cmp	r3, r9
 801106e:	d307      	bcc.n	8011080 <__cvt+0xbc>
 8011070:	9b03      	ldr	r3, [sp, #12]
 8011072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011074:	1bdb      	subs	r3, r3, r7
 8011076:	4638      	mov	r0, r7
 8011078:	6013      	str	r3, [r2, #0]
 801107a:	b004      	add	sp, #16
 801107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011080:	1c59      	adds	r1, r3, #1
 8011082:	9103      	str	r1, [sp, #12]
 8011084:	701a      	strb	r2, [r3, #0]
 8011086:	e7f0      	b.n	801106a <__cvt+0xa6>

08011088 <__exponent>:
 8011088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801108a:	4603      	mov	r3, r0
 801108c:	2900      	cmp	r1, #0
 801108e:	bfb8      	it	lt
 8011090:	4249      	neglt	r1, r1
 8011092:	f803 2b02 	strb.w	r2, [r3], #2
 8011096:	bfb4      	ite	lt
 8011098:	222d      	movlt	r2, #45	; 0x2d
 801109a:	222b      	movge	r2, #43	; 0x2b
 801109c:	2909      	cmp	r1, #9
 801109e:	7042      	strb	r2, [r0, #1]
 80110a0:	dd2a      	ble.n	80110f8 <__exponent+0x70>
 80110a2:	f10d 0407 	add.w	r4, sp, #7
 80110a6:	46a4      	mov	ip, r4
 80110a8:	270a      	movs	r7, #10
 80110aa:	46a6      	mov	lr, r4
 80110ac:	460a      	mov	r2, r1
 80110ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80110b2:	fb07 1516 	mls	r5, r7, r6, r1
 80110b6:	3530      	adds	r5, #48	; 0x30
 80110b8:	2a63      	cmp	r2, #99	; 0x63
 80110ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80110be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80110c2:	4631      	mov	r1, r6
 80110c4:	dcf1      	bgt.n	80110aa <__exponent+0x22>
 80110c6:	3130      	adds	r1, #48	; 0x30
 80110c8:	f1ae 0502 	sub.w	r5, lr, #2
 80110cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80110d0:	1c44      	adds	r4, r0, #1
 80110d2:	4629      	mov	r1, r5
 80110d4:	4561      	cmp	r1, ip
 80110d6:	d30a      	bcc.n	80110ee <__exponent+0x66>
 80110d8:	f10d 0209 	add.w	r2, sp, #9
 80110dc:	eba2 020e 	sub.w	r2, r2, lr
 80110e0:	4565      	cmp	r5, ip
 80110e2:	bf88      	it	hi
 80110e4:	2200      	movhi	r2, #0
 80110e6:	4413      	add	r3, r2
 80110e8:	1a18      	subs	r0, r3, r0
 80110ea:	b003      	add	sp, #12
 80110ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80110f6:	e7ed      	b.n	80110d4 <__exponent+0x4c>
 80110f8:	2330      	movs	r3, #48	; 0x30
 80110fa:	3130      	adds	r1, #48	; 0x30
 80110fc:	7083      	strb	r3, [r0, #2]
 80110fe:	70c1      	strb	r1, [r0, #3]
 8011100:	1d03      	adds	r3, r0, #4
 8011102:	e7f1      	b.n	80110e8 <__exponent+0x60>

08011104 <_printf_float>:
 8011104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011108:	ed2d 8b02 	vpush	{d8}
 801110c:	b08d      	sub	sp, #52	; 0x34
 801110e:	460c      	mov	r4, r1
 8011110:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011114:	4616      	mov	r6, r2
 8011116:	461f      	mov	r7, r3
 8011118:	4605      	mov	r5, r0
 801111a:	f001 fa55 	bl	80125c8 <_localeconv_r>
 801111e:	f8d0 a000 	ldr.w	sl, [r0]
 8011122:	4650      	mov	r0, sl
 8011124:	f7ef f85c 	bl	80001e0 <strlen>
 8011128:	2300      	movs	r3, #0
 801112a:	930a      	str	r3, [sp, #40]	; 0x28
 801112c:	6823      	ldr	r3, [r4, #0]
 801112e:	9305      	str	r3, [sp, #20]
 8011130:	f8d8 3000 	ldr.w	r3, [r8]
 8011134:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011138:	3307      	adds	r3, #7
 801113a:	f023 0307 	bic.w	r3, r3, #7
 801113e:	f103 0208 	add.w	r2, r3, #8
 8011142:	f8c8 2000 	str.w	r2, [r8]
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801114e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011156:	9307      	str	r3, [sp, #28]
 8011158:	f8cd 8018 	str.w	r8, [sp, #24]
 801115c:	ee08 0a10 	vmov	s16, r0
 8011160:	4b9f      	ldr	r3, [pc, #636]	; (80113e0 <_printf_float+0x2dc>)
 8011162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011166:	f04f 32ff 	mov.w	r2, #4294967295
 801116a:	f7ef fce7 	bl	8000b3c <__aeabi_dcmpun>
 801116e:	bb88      	cbnz	r0, 80111d4 <_printf_float+0xd0>
 8011170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011174:	4b9a      	ldr	r3, [pc, #616]	; (80113e0 <_printf_float+0x2dc>)
 8011176:	f04f 32ff 	mov.w	r2, #4294967295
 801117a:	f7ef fcc1 	bl	8000b00 <__aeabi_dcmple>
 801117e:	bb48      	cbnz	r0, 80111d4 <_printf_float+0xd0>
 8011180:	2200      	movs	r2, #0
 8011182:	2300      	movs	r3, #0
 8011184:	4640      	mov	r0, r8
 8011186:	4649      	mov	r1, r9
 8011188:	f7ef fcb0 	bl	8000aec <__aeabi_dcmplt>
 801118c:	b110      	cbz	r0, 8011194 <_printf_float+0x90>
 801118e:	232d      	movs	r3, #45	; 0x2d
 8011190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011194:	4b93      	ldr	r3, [pc, #588]	; (80113e4 <_printf_float+0x2e0>)
 8011196:	4894      	ldr	r0, [pc, #592]	; (80113e8 <_printf_float+0x2e4>)
 8011198:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801119c:	bf94      	ite	ls
 801119e:	4698      	movls	r8, r3
 80111a0:	4680      	movhi	r8, r0
 80111a2:	2303      	movs	r3, #3
 80111a4:	6123      	str	r3, [r4, #16]
 80111a6:	9b05      	ldr	r3, [sp, #20]
 80111a8:	f023 0204 	bic.w	r2, r3, #4
 80111ac:	6022      	str	r2, [r4, #0]
 80111ae:	f04f 0900 	mov.w	r9, #0
 80111b2:	9700      	str	r7, [sp, #0]
 80111b4:	4633      	mov	r3, r6
 80111b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80111b8:	4621      	mov	r1, r4
 80111ba:	4628      	mov	r0, r5
 80111bc:	f000 f9d8 	bl	8011570 <_printf_common>
 80111c0:	3001      	adds	r0, #1
 80111c2:	f040 8090 	bne.w	80112e6 <_printf_float+0x1e2>
 80111c6:	f04f 30ff 	mov.w	r0, #4294967295
 80111ca:	b00d      	add	sp, #52	; 0x34
 80111cc:	ecbd 8b02 	vpop	{d8}
 80111d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d4:	4642      	mov	r2, r8
 80111d6:	464b      	mov	r3, r9
 80111d8:	4640      	mov	r0, r8
 80111da:	4649      	mov	r1, r9
 80111dc:	f7ef fcae 	bl	8000b3c <__aeabi_dcmpun>
 80111e0:	b140      	cbz	r0, 80111f4 <_printf_float+0xf0>
 80111e2:	464b      	mov	r3, r9
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	bfbc      	itt	lt
 80111e8:	232d      	movlt	r3, #45	; 0x2d
 80111ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80111ee:	487f      	ldr	r0, [pc, #508]	; (80113ec <_printf_float+0x2e8>)
 80111f0:	4b7f      	ldr	r3, [pc, #508]	; (80113f0 <_printf_float+0x2ec>)
 80111f2:	e7d1      	b.n	8011198 <_printf_float+0x94>
 80111f4:	6863      	ldr	r3, [r4, #4]
 80111f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80111fa:	9206      	str	r2, [sp, #24]
 80111fc:	1c5a      	adds	r2, r3, #1
 80111fe:	d13f      	bne.n	8011280 <_printf_float+0x17c>
 8011200:	2306      	movs	r3, #6
 8011202:	6063      	str	r3, [r4, #4]
 8011204:	9b05      	ldr	r3, [sp, #20]
 8011206:	6861      	ldr	r1, [r4, #4]
 8011208:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801120c:	2300      	movs	r3, #0
 801120e:	9303      	str	r3, [sp, #12]
 8011210:	ab0a      	add	r3, sp, #40	; 0x28
 8011212:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011216:	ab09      	add	r3, sp, #36	; 0x24
 8011218:	ec49 8b10 	vmov	d0, r8, r9
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	6022      	str	r2, [r4, #0]
 8011220:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011224:	4628      	mov	r0, r5
 8011226:	f7ff fecd 	bl	8010fc4 <__cvt>
 801122a:	9b06      	ldr	r3, [sp, #24]
 801122c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801122e:	2b47      	cmp	r3, #71	; 0x47
 8011230:	4680      	mov	r8, r0
 8011232:	d108      	bne.n	8011246 <_printf_float+0x142>
 8011234:	1cc8      	adds	r0, r1, #3
 8011236:	db02      	blt.n	801123e <_printf_float+0x13a>
 8011238:	6863      	ldr	r3, [r4, #4]
 801123a:	4299      	cmp	r1, r3
 801123c:	dd41      	ble.n	80112c2 <_printf_float+0x1be>
 801123e:	f1ab 0b02 	sub.w	fp, fp, #2
 8011242:	fa5f fb8b 	uxtb.w	fp, fp
 8011246:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801124a:	d820      	bhi.n	801128e <_printf_float+0x18a>
 801124c:	3901      	subs	r1, #1
 801124e:	465a      	mov	r2, fp
 8011250:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011254:	9109      	str	r1, [sp, #36]	; 0x24
 8011256:	f7ff ff17 	bl	8011088 <__exponent>
 801125a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801125c:	1813      	adds	r3, r2, r0
 801125e:	2a01      	cmp	r2, #1
 8011260:	4681      	mov	r9, r0
 8011262:	6123      	str	r3, [r4, #16]
 8011264:	dc02      	bgt.n	801126c <_printf_float+0x168>
 8011266:	6822      	ldr	r2, [r4, #0]
 8011268:	07d2      	lsls	r2, r2, #31
 801126a:	d501      	bpl.n	8011270 <_printf_float+0x16c>
 801126c:	3301      	adds	r3, #1
 801126e:	6123      	str	r3, [r4, #16]
 8011270:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011274:	2b00      	cmp	r3, #0
 8011276:	d09c      	beq.n	80111b2 <_printf_float+0xae>
 8011278:	232d      	movs	r3, #45	; 0x2d
 801127a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801127e:	e798      	b.n	80111b2 <_printf_float+0xae>
 8011280:	9a06      	ldr	r2, [sp, #24]
 8011282:	2a47      	cmp	r2, #71	; 0x47
 8011284:	d1be      	bne.n	8011204 <_printf_float+0x100>
 8011286:	2b00      	cmp	r3, #0
 8011288:	d1bc      	bne.n	8011204 <_printf_float+0x100>
 801128a:	2301      	movs	r3, #1
 801128c:	e7b9      	b.n	8011202 <_printf_float+0xfe>
 801128e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011292:	d118      	bne.n	80112c6 <_printf_float+0x1c2>
 8011294:	2900      	cmp	r1, #0
 8011296:	6863      	ldr	r3, [r4, #4]
 8011298:	dd0b      	ble.n	80112b2 <_printf_float+0x1ae>
 801129a:	6121      	str	r1, [r4, #16]
 801129c:	b913      	cbnz	r3, 80112a4 <_printf_float+0x1a0>
 801129e:	6822      	ldr	r2, [r4, #0]
 80112a0:	07d0      	lsls	r0, r2, #31
 80112a2:	d502      	bpl.n	80112aa <_printf_float+0x1a6>
 80112a4:	3301      	adds	r3, #1
 80112a6:	440b      	add	r3, r1
 80112a8:	6123      	str	r3, [r4, #16]
 80112aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80112ac:	f04f 0900 	mov.w	r9, #0
 80112b0:	e7de      	b.n	8011270 <_printf_float+0x16c>
 80112b2:	b913      	cbnz	r3, 80112ba <_printf_float+0x1b6>
 80112b4:	6822      	ldr	r2, [r4, #0]
 80112b6:	07d2      	lsls	r2, r2, #31
 80112b8:	d501      	bpl.n	80112be <_printf_float+0x1ba>
 80112ba:	3302      	adds	r3, #2
 80112bc:	e7f4      	b.n	80112a8 <_printf_float+0x1a4>
 80112be:	2301      	movs	r3, #1
 80112c0:	e7f2      	b.n	80112a8 <_printf_float+0x1a4>
 80112c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80112c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112c8:	4299      	cmp	r1, r3
 80112ca:	db05      	blt.n	80112d8 <_printf_float+0x1d4>
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	6121      	str	r1, [r4, #16]
 80112d0:	07d8      	lsls	r0, r3, #31
 80112d2:	d5ea      	bpl.n	80112aa <_printf_float+0x1a6>
 80112d4:	1c4b      	adds	r3, r1, #1
 80112d6:	e7e7      	b.n	80112a8 <_printf_float+0x1a4>
 80112d8:	2900      	cmp	r1, #0
 80112da:	bfd4      	ite	le
 80112dc:	f1c1 0202 	rsble	r2, r1, #2
 80112e0:	2201      	movgt	r2, #1
 80112e2:	4413      	add	r3, r2
 80112e4:	e7e0      	b.n	80112a8 <_printf_float+0x1a4>
 80112e6:	6823      	ldr	r3, [r4, #0]
 80112e8:	055a      	lsls	r2, r3, #21
 80112ea:	d407      	bmi.n	80112fc <_printf_float+0x1f8>
 80112ec:	6923      	ldr	r3, [r4, #16]
 80112ee:	4642      	mov	r2, r8
 80112f0:	4631      	mov	r1, r6
 80112f2:	4628      	mov	r0, r5
 80112f4:	47b8      	blx	r7
 80112f6:	3001      	adds	r0, #1
 80112f8:	d12c      	bne.n	8011354 <_printf_float+0x250>
 80112fa:	e764      	b.n	80111c6 <_printf_float+0xc2>
 80112fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011300:	f240 80e0 	bls.w	80114c4 <_printf_float+0x3c0>
 8011304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011308:	2200      	movs	r2, #0
 801130a:	2300      	movs	r3, #0
 801130c:	f7ef fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8011310:	2800      	cmp	r0, #0
 8011312:	d034      	beq.n	801137e <_printf_float+0x27a>
 8011314:	4a37      	ldr	r2, [pc, #220]	; (80113f4 <_printf_float+0x2f0>)
 8011316:	2301      	movs	r3, #1
 8011318:	4631      	mov	r1, r6
 801131a:	4628      	mov	r0, r5
 801131c:	47b8      	blx	r7
 801131e:	3001      	adds	r0, #1
 8011320:	f43f af51 	beq.w	80111c6 <_printf_float+0xc2>
 8011324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011328:	429a      	cmp	r2, r3
 801132a:	db02      	blt.n	8011332 <_printf_float+0x22e>
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	07d8      	lsls	r0, r3, #31
 8011330:	d510      	bpl.n	8011354 <_printf_float+0x250>
 8011332:	ee18 3a10 	vmov	r3, s16
 8011336:	4652      	mov	r2, sl
 8011338:	4631      	mov	r1, r6
 801133a:	4628      	mov	r0, r5
 801133c:	47b8      	blx	r7
 801133e:	3001      	adds	r0, #1
 8011340:	f43f af41 	beq.w	80111c6 <_printf_float+0xc2>
 8011344:	f04f 0800 	mov.w	r8, #0
 8011348:	f104 091a 	add.w	r9, r4, #26
 801134c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801134e:	3b01      	subs	r3, #1
 8011350:	4543      	cmp	r3, r8
 8011352:	dc09      	bgt.n	8011368 <_printf_float+0x264>
 8011354:	6823      	ldr	r3, [r4, #0]
 8011356:	079b      	lsls	r3, r3, #30
 8011358:	f100 8105 	bmi.w	8011566 <_printf_float+0x462>
 801135c:	68e0      	ldr	r0, [r4, #12]
 801135e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011360:	4298      	cmp	r0, r3
 8011362:	bfb8      	it	lt
 8011364:	4618      	movlt	r0, r3
 8011366:	e730      	b.n	80111ca <_printf_float+0xc6>
 8011368:	2301      	movs	r3, #1
 801136a:	464a      	mov	r2, r9
 801136c:	4631      	mov	r1, r6
 801136e:	4628      	mov	r0, r5
 8011370:	47b8      	blx	r7
 8011372:	3001      	adds	r0, #1
 8011374:	f43f af27 	beq.w	80111c6 <_printf_float+0xc2>
 8011378:	f108 0801 	add.w	r8, r8, #1
 801137c:	e7e6      	b.n	801134c <_printf_float+0x248>
 801137e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011380:	2b00      	cmp	r3, #0
 8011382:	dc39      	bgt.n	80113f8 <_printf_float+0x2f4>
 8011384:	4a1b      	ldr	r2, [pc, #108]	; (80113f4 <_printf_float+0x2f0>)
 8011386:	2301      	movs	r3, #1
 8011388:	4631      	mov	r1, r6
 801138a:	4628      	mov	r0, r5
 801138c:	47b8      	blx	r7
 801138e:	3001      	adds	r0, #1
 8011390:	f43f af19 	beq.w	80111c6 <_printf_float+0xc2>
 8011394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011398:	4313      	orrs	r3, r2
 801139a:	d102      	bne.n	80113a2 <_printf_float+0x29e>
 801139c:	6823      	ldr	r3, [r4, #0]
 801139e:	07d9      	lsls	r1, r3, #31
 80113a0:	d5d8      	bpl.n	8011354 <_printf_float+0x250>
 80113a2:	ee18 3a10 	vmov	r3, s16
 80113a6:	4652      	mov	r2, sl
 80113a8:	4631      	mov	r1, r6
 80113aa:	4628      	mov	r0, r5
 80113ac:	47b8      	blx	r7
 80113ae:	3001      	adds	r0, #1
 80113b0:	f43f af09 	beq.w	80111c6 <_printf_float+0xc2>
 80113b4:	f04f 0900 	mov.w	r9, #0
 80113b8:	f104 0a1a 	add.w	sl, r4, #26
 80113bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113be:	425b      	negs	r3, r3
 80113c0:	454b      	cmp	r3, r9
 80113c2:	dc01      	bgt.n	80113c8 <_printf_float+0x2c4>
 80113c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113c6:	e792      	b.n	80112ee <_printf_float+0x1ea>
 80113c8:	2301      	movs	r3, #1
 80113ca:	4652      	mov	r2, sl
 80113cc:	4631      	mov	r1, r6
 80113ce:	4628      	mov	r0, r5
 80113d0:	47b8      	blx	r7
 80113d2:	3001      	adds	r0, #1
 80113d4:	f43f aef7 	beq.w	80111c6 <_printf_float+0xc2>
 80113d8:	f109 0901 	add.w	r9, r9, #1
 80113dc:	e7ee      	b.n	80113bc <_printf_float+0x2b8>
 80113de:	bf00      	nop
 80113e0:	7fefffff 	.word	0x7fefffff
 80113e4:	08013e54 	.word	0x08013e54
 80113e8:	08013e58 	.word	0x08013e58
 80113ec:	08013e60 	.word	0x08013e60
 80113f0:	08013e5c 	.word	0x08013e5c
 80113f4:	08013e64 	.word	0x08013e64
 80113f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113fc:	429a      	cmp	r2, r3
 80113fe:	bfa8      	it	ge
 8011400:	461a      	movge	r2, r3
 8011402:	2a00      	cmp	r2, #0
 8011404:	4691      	mov	r9, r2
 8011406:	dc37      	bgt.n	8011478 <_printf_float+0x374>
 8011408:	f04f 0b00 	mov.w	fp, #0
 801140c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011410:	f104 021a 	add.w	r2, r4, #26
 8011414:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011416:	9305      	str	r3, [sp, #20]
 8011418:	eba3 0309 	sub.w	r3, r3, r9
 801141c:	455b      	cmp	r3, fp
 801141e:	dc33      	bgt.n	8011488 <_printf_float+0x384>
 8011420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011424:	429a      	cmp	r2, r3
 8011426:	db3b      	blt.n	80114a0 <_printf_float+0x39c>
 8011428:	6823      	ldr	r3, [r4, #0]
 801142a:	07da      	lsls	r2, r3, #31
 801142c:	d438      	bmi.n	80114a0 <_printf_float+0x39c>
 801142e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011430:	9b05      	ldr	r3, [sp, #20]
 8011432:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	eba2 0901 	sub.w	r9, r2, r1
 801143a:	4599      	cmp	r9, r3
 801143c:	bfa8      	it	ge
 801143e:	4699      	movge	r9, r3
 8011440:	f1b9 0f00 	cmp.w	r9, #0
 8011444:	dc35      	bgt.n	80114b2 <_printf_float+0x3ae>
 8011446:	f04f 0800 	mov.w	r8, #0
 801144a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801144e:	f104 0a1a 	add.w	sl, r4, #26
 8011452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011456:	1a9b      	subs	r3, r3, r2
 8011458:	eba3 0309 	sub.w	r3, r3, r9
 801145c:	4543      	cmp	r3, r8
 801145e:	f77f af79 	ble.w	8011354 <_printf_float+0x250>
 8011462:	2301      	movs	r3, #1
 8011464:	4652      	mov	r2, sl
 8011466:	4631      	mov	r1, r6
 8011468:	4628      	mov	r0, r5
 801146a:	47b8      	blx	r7
 801146c:	3001      	adds	r0, #1
 801146e:	f43f aeaa 	beq.w	80111c6 <_printf_float+0xc2>
 8011472:	f108 0801 	add.w	r8, r8, #1
 8011476:	e7ec      	b.n	8011452 <_printf_float+0x34e>
 8011478:	4613      	mov	r3, r2
 801147a:	4631      	mov	r1, r6
 801147c:	4642      	mov	r2, r8
 801147e:	4628      	mov	r0, r5
 8011480:	47b8      	blx	r7
 8011482:	3001      	adds	r0, #1
 8011484:	d1c0      	bne.n	8011408 <_printf_float+0x304>
 8011486:	e69e      	b.n	80111c6 <_printf_float+0xc2>
 8011488:	2301      	movs	r3, #1
 801148a:	4631      	mov	r1, r6
 801148c:	4628      	mov	r0, r5
 801148e:	9205      	str	r2, [sp, #20]
 8011490:	47b8      	blx	r7
 8011492:	3001      	adds	r0, #1
 8011494:	f43f ae97 	beq.w	80111c6 <_printf_float+0xc2>
 8011498:	9a05      	ldr	r2, [sp, #20]
 801149a:	f10b 0b01 	add.w	fp, fp, #1
 801149e:	e7b9      	b.n	8011414 <_printf_float+0x310>
 80114a0:	ee18 3a10 	vmov	r3, s16
 80114a4:	4652      	mov	r2, sl
 80114a6:	4631      	mov	r1, r6
 80114a8:	4628      	mov	r0, r5
 80114aa:	47b8      	blx	r7
 80114ac:	3001      	adds	r0, #1
 80114ae:	d1be      	bne.n	801142e <_printf_float+0x32a>
 80114b0:	e689      	b.n	80111c6 <_printf_float+0xc2>
 80114b2:	9a05      	ldr	r2, [sp, #20]
 80114b4:	464b      	mov	r3, r9
 80114b6:	4442      	add	r2, r8
 80114b8:	4631      	mov	r1, r6
 80114ba:	4628      	mov	r0, r5
 80114bc:	47b8      	blx	r7
 80114be:	3001      	adds	r0, #1
 80114c0:	d1c1      	bne.n	8011446 <_printf_float+0x342>
 80114c2:	e680      	b.n	80111c6 <_printf_float+0xc2>
 80114c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114c6:	2a01      	cmp	r2, #1
 80114c8:	dc01      	bgt.n	80114ce <_printf_float+0x3ca>
 80114ca:	07db      	lsls	r3, r3, #31
 80114cc:	d538      	bpl.n	8011540 <_printf_float+0x43c>
 80114ce:	2301      	movs	r3, #1
 80114d0:	4642      	mov	r2, r8
 80114d2:	4631      	mov	r1, r6
 80114d4:	4628      	mov	r0, r5
 80114d6:	47b8      	blx	r7
 80114d8:	3001      	adds	r0, #1
 80114da:	f43f ae74 	beq.w	80111c6 <_printf_float+0xc2>
 80114de:	ee18 3a10 	vmov	r3, s16
 80114e2:	4652      	mov	r2, sl
 80114e4:	4631      	mov	r1, r6
 80114e6:	4628      	mov	r0, r5
 80114e8:	47b8      	blx	r7
 80114ea:	3001      	adds	r0, #1
 80114ec:	f43f ae6b 	beq.w	80111c6 <_printf_float+0xc2>
 80114f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80114f4:	2200      	movs	r2, #0
 80114f6:	2300      	movs	r3, #0
 80114f8:	f7ef faee 	bl	8000ad8 <__aeabi_dcmpeq>
 80114fc:	b9d8      	cbnz	r0, 8011536 <_printf_float+0x432>
 80114fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011500:	f108 0201 	add.w	r2, r8, #1
 8011504:	3b01      	subs	r3, #1
 8011506:	4631      	mov	r1, r6
 8011508:	4628      	mov	r0, r5
 801150a:	47b8      	blx	r7
 801150c:	3001      	adds	r0, #1
 801150e:	d10e      	bne.n	801152e <_printf_float+0x42a>
 8011510:	e659      	b.n	80111c6 <_printf_float+0xc2>
 8011512:	2301      	movs	r3, #1
 8011514:	4652      	mov	r2, sl
 8011516:	4631      	mov	r1, r6
 8011518:	4628      	mov	r0, r5
 801151a:	47b8      	blx	r7
 801151c:	3001      	adds	r0, #1
 801151e:	f43f ae52 	beq.w	80111c6 <_printf_float+0xc2>
 8011522:	f108 0801 	add.w	r8, r8, #1
 8011526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011528:	3b01      	subs	r3, #1
 801152a:	4543      	cmp	r3, r8
 801152c:	dcf1      	bgt.n	8011512 <_printf_float+0x40e>
 801152e:	464b      	mov	r3, r9
 8011530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011534:	e6dc      	b.n	80112f0 <_printf_float+0x1ec>
 8011536:	f04f 0800 	mov.w	r8, #0
 801153a:	f104 0a1a 	add.w	sl, r4, #26
 801153e:	e7f2      	b.n	8011526 <_printf_float+0x422>
 8011540:	2301      	movs	r3, #1
 8011542:	4642      	mov	r2, r8
 8011544:	e7df      	b.n	8011506 <_printf_float+0x402>
 8011546:	2301      	movs	r3, #1
 8011548:	464a      	mov	r2, r9
 801154a:	4631      	mov	r1, r6
 801154c:	4628      	mov	r0, r5
 801154e:	47b8      	blx	r7
 8011550:	3001      	adds	r0, #1
 8011552:	f43f ae38 	beq.w	80111c6 <_printf_float+0xc2>
 8011556:	f108 0801 	add.w	r8, r8, #1
 801155a:	68e3      	ldr	r3, [r4, #12]
 801155c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801155e:	1a5b      	subs	r3, r3, r1
 8011560:	4543      	cmp	r3, r8
 8011562:	dcf0      	bgt.n	8011546 <_printf_float+0x442>
 8011564:	e6fa      	b.n	801135c <_printf_float+0x258>
 8011566:	f04f 0800 	mov.w	r8, #0
 801156a:	f104 0919 	add.w	r9, r4, #25
 801156e:	e7f4      	b.n	801155a <_printf_float+0x456>

08011570 <_printf_common>:
 8011570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011574:	4616      	mov	r6, r2
 8011576:	4699      	mov	r9, r3
 8011578:	688a      	ldr	r2, [r1, #8]
 801157a:	690b      	ldr	r3, [r1, #16]
 801157c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011580:	4293      	cmp	r3, r2
 8011582:	bfb8      	it	lt
 8011584:	4613      	movlt	r3, r2
 8011586:	6033      	str	r3, [r6, #0]
 8011588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801158c:	4607      	mov	r7, r0
 801158e:	460c      	mov	r4, r1
 8011590:	b10a      	cbz	r2, 8011596 <_printf_common+0x26>
 8011592:	3301      	adds	r3, #1
 8011594:	6033      	str	r3, [r6, #0]
 8011596:	6823      	ldr	r3, [r4, #0]
 8011598:	0699      	lsls	r1, r3, #26
 801159a:	bf42      	ittt	mi
 801159c:	6833      	ldrmi	r3, [r6, #0]
 801159e:	3302      	addmi	r3, #2
 80115a0:	6033      	strmi	r3, [r6, #0]
 80115a2:	6825      	ldr	r5, [r4, #0]
 80115a4:	f015 0506 	ands.w	r5, r5, #6
 80115a8:	d106      	bne.n	80115b8 <_printf_common+0x48>
 80115aa:	f104 0a19 	add.w	sl, r4, #25
 80115ae:	68e3      	ldr	r3, [r4, #12]
 80115b0:	6832      	ldr	r2, [r6, #0]
 80115b2:	1a9b      	subs	r3, r3, r2
 80115b4:	42ab      	cmp	r3, r5
 80115b6:	dc26      	bgt.n	8011606 <_printf_common+0x96>
 80115b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80115bc:	1e13      	subs	r3, r2, #0
 80115be:	6822      	ldr	r2, [r4, #0]
 80115c0:	bf18      	it	ne
 80115c2:	2301      	movne	r3, #1
 80115c4:	0692      	lsls	r2, r2, #26
 80115c6:	d42b      	bmi.n	8011620 <_printf_common+0xb0>
 80115c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80115cc:	4649      	mov	r1, r9
 80115ce:	4638      	mov	r0, r7
 80115d0:	47c0      	blx	r8
 80115d2:	3001      	adds	r0, #1
 80115d4:	d01e      	beq.n	8011614 <_printf_common+0xa4>
 80115d6:	6823      	ldr	r3, [r4, #0]
 80115d8:	68e5      	ldr	r5, [r4, #12]
 80115da:	6832      	ldr	r2, [r6, #0]
 80115dc:	f003 0306 	and.w	r3, r3, #6
 80115e0:	2b04      	cmp	r3, #4
 80115e2:	bf08      	it	eq
 80115e4:	1aad      	subeq	r5, r5, r2
 80115e6:	68a3      	ldr	r3, [r4, #8]
 80115e8:	6922      	ldr	r2, [r4, #16]
 80115ea:	bf0c      	ite	eq
 80115ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115f0:	2500      	movne	r5, #0
 80115f2:	4293      	cmp	r3, r2
 80115f4:	bfc4      	itt	gt
 80115f6:	1a9b      	subgt	r3, r3, r2
 80115f8:	18ed      	addgt	r5, r5, r3
 80115fa:	2600      	movs	r6, #0
 80115fc:	341a      	adds	r4, #26
 80115fe:	42b5      	cmp	r5, r6
 8011600:	d11a      	bne.n	8011638 <_printf_common+0xc8>
 8011602:	2000      	movs	r0, #0
 8011604:	e008      	b.n	8011618 <_printf_common+0xa8>
 8011606:	2301      	movs	r3, #1
 8011608:	4652      	mov	r2, sl
 801160a:	4649      	mov	r1, r9
 801160c:	4638      	mov	r0, r7
 801160e:	47c0      	blx	r8
 8011610:	3001      	adds	r0, #1
 8011612:	d103      	bne.n	801161c <_printf_common+0xac>
 8011614:	f04f 30ff 	mov.w	r0, #4294967295
 8011618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801161c:	3501      	adds	r5, #1
 801161e:	e7c6      	b.n	80115ae <_printf_common+0x3e>
 8011620:	18e1      	adds	r1, r4, r3
 8011622:	1c5a      	adds	r2, r3, #1
 8011624:	2030      	movs	r0, #48	; 0x30
 8011626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801162a:	4422      	add	r2, r4
 801162c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011634:	3302      	adds	r3, #2
 8011636:	e7c7      	b.n	80115c8 <_printf_common+0x58>
 8011638:	2301      	movs	r3, #1
 801163a:	4622      	mov	r2, r4
 801163c:	4649      	mov	r1, r9
 801163e:	4638      	mov	r0, r7
 8011640:	47c0      	blx	r8
 8011642:	3001      	adds	r0, #1
 8011644:	d0e6      	beq.n	8011614 <_printf_common+0xa4>
 8011646:	3601      	adds	r6, #1
 8011648:	e7d9      	b.n	80115fe <_printf_common+0x8e>
	...

0801164c <_printf_i>:
 801164c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011650:	460c      	mov	r4, r1
 8011652:	4691      	mov	r9, r2
 8011654:	7e27      	ldrb	r7, [r4, #24]
 8011656:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011658:	2f78      	cmp	r7, #120	; 0x78
 801165a:	4680      	mov	r8, r0
 801165c:	469a      	mov	sl, r3
 801165e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011662:	d807      	bhi.n	8011674 <_printf_i+0x28>
 8011664:	2f62      	cmp	r7, #98	; 0x62
 8011666:	d80a      	bhi.n	801167e <_printf_i+0x32>
 8011668:	2f00      	cmp	r7, #0
 801166a:	f000 80d8 	beq.w	801181e <_printf_i+0x1d2>
 801166e:	2f58      	cmp	r7, #88	; 0x58
 8011670:	f000 80a3 	beq.w	80117ba <_printf_i+0x16e>
 8011674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801167c:	e03a      	b.n	80116f4 <_printf_i+0xa8>
 801167e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011682:	2b15      	cmp	r3, #21
 8011684:	d8f6      	bhi.n	8011674 <_printf_i+0x28>
 8011686:	a001      	add	r0, pc, #4	; (adr r0, 801168c <_printf_i+0x40>)
 8011688:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801168c:	080116e5 	.word	0x080116e5
 8011690:	080116f9 	.word	0x080116f9
 8011694:	08011675 	.word	0x08011675
 8011698:	08011675 	.word	0x08011675
 801169c:	08011675 	.word	0x08011675
 80116a0:	08011675 	.word	0x08011675
 80116a4:	080116f9 	.word	0x080116f9
 80116a8:	08011675 	.word	0x08011675
 80116ac:	08011675 	.word	0x08011675
 80116b0:	08011675 	.word	0x08011675
 80116b4:	08011675 	.word	0x08011675
 80116b8:	08011805 	.word	0x08011805
 80116bc:	08011729 	.word	0x08011729
 80116c0:	080117e7 	.word	0x080117e7
 80116c4:	08011675 	.word	0x08011675
 80116c8:	08011675 	.word	0x08011675
 80116cc:	08011827 	.word	0x08011827
 80116d0:	08011675 	.word	0x08011675
 80116d4:	08011729 	.word	0x08011729
 80116d8:	08011675 	.word	0x08011675
 80116dc:	08011675 	.word	0x08011675
 80116e0:	080117ef 	.word	0x080117ef
 80116e4:	680b      	ldr	r3, [r1, #0]
 80116e6:	1d1a      	adds	r2, r3, #4
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	600a      	str	r2, [r1, #0]
 80116ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80116f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80116f4:	2301      	movs	r3, #1
 80116f6:	e0a3      	b.n	8011840 <_printf_i+0x1f4>
 80116f8:	6825      	ldr	r5, [r4, #0]
 80116fa:	6808      	ldr	r0, [r1, #0]
 80116fc:	062e      	lsls	r6, r5, #24
 80116fe:	f100 0304 	add.w	r3, r0, #4
 8011702:	d50a      	bpl.n	801171a <_printf_i+0xce>
 8011704:	6805      	ldr	r5, [r0, #0]
 8011706:	600b      	str	r3, [r1, #0]
 8011708:	2d00      	cmp	r5, #0
 801170a:	da03      	bge.n	8011714 <_printf_i+0xc8>
 801170c:	232d      	movs	r3, #45	; 0x2d
 801170e:	426d      	negs	r5, r5
 8011710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011714:	485e      	ldr	r0, [pc, #376]	; (8011890 <_printf_i+0x244>)
 8011716:	230a      	movs	r3, #10
 8011718:	e019      	b.n	801174e <_printf_i+0x102>
 801171a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801171e:	6805      	ldr	r5, [r0, #0]
 8011720:	600b      	str	r3, [r1, #0]
 8011722:	bf18      	it	ne
 8011724:	b22d      	sxthne	r5, r5
 8011726:	e7ef      	b.n	8011708 <_printf_i+0xbc>
 8011728:	680b      	ldr	r3, [r1, #0]
 801172a:	6825      	ldr	r5, [r4, #0]
 801172c:	1d18      	adds	r0, r3, #4
 801172e:	6008      	str	r0, [r1, #0]
 8011730:	0628      	lsls	r0, r5, #24
 8011732:	d501      	bpl.n	8011738 <_printf_i+0xec>
 8011734:	681d      	ldr	r5, [r3, #0]
 8011736:	e002      	b.n	801173e <_printf_i+0xf2>
 8011738:	0669      	lsls	r1, r5, #25
 801173a:	d5fb      	bpl.n	8011734 <_printf_i+0xe8>
 801173c:	881d      	ldrh	r5, [r3, #0]
 801173e:	4854      	ldr	r0, [pc, #336]	; (8011890 <_printf_i+0x244>)
 8011740:	2f6f      	cmp	r7, #111	; 0x6f
 8011742:	bf0c      	ite	eq
 8011744:	2308      	moveq	r3, #8
 8011746:	230a      	movne	r3, #10
 8011748:	2100      	movs	r1, #0
 801174a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801174e:	6866      	ldr	r6, [r4, #4]
 8011750:	60a6      	str	r6, [r4, #8]
 8011752:	2e00      	cmp	r6, #0
 8011754:	bfa2      	ittt	ge
 8011756:	6821      	ldrge	r1, [r4, #0]
 8011758:	f021 0104 	bicge.w	r1, r1, #4
 801175c:	6021      	strge	r1, [r4, #0]
 801175e:	b90d      	cbnz	r5, 8011764 <_printf_i+0x118>
 8011760:	2e00      	cmp	r6, #0
 8011762:	d04d      	beq.n	8011800 <_printf_i+0x1b4>
 8011764:	4616      	mov	r6, r2
 8011766:	fbb5 f1f3 	udiv	r1, r5, r3
 801176a:	fb03 5711 	mls	r7, r3, r1, r5
 801176e:	5dc7      	ldrb	r7, [r0, r7]
 8011770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011774:	462f      	mov	r7, r5
 8011776:	42bb      	cmp	r3, r7
 8011778:	460d      	mov	r5, r1
 801177a:	d9f4      	bls.n	8011766 <_printf_i+0x11a>
 801177c:	2b08      	cmp	r3, #8
 801177e:	d10b      	bne.n	8011798 <_printf_i+0x14c>
 8011780:	6823      	ldr	r3, [r4, #0]
 8011782:	07df      	lsls	r7, r3, #31
 8011784:	d508      	bpl.n	8011798 <_printf_i+0x14c>
 8011786:	6923      	ldr	r3, [r4, #16]
 8011788:	6861      	ldr	r1, [r4, #4]
 801178a:	4299      	cmp	r1, r3
 801178c:	bfde      	ittt	le
 801178e:	2330      	movle	r3, #48	; 0x30
 8011790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011794:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011798:	1b92      	subs	r2, r2, r6
 801179a:	6122      	str	r2, [r4, #16]
 801179c:	f8cd a000 	str.w	sl, [sp]
 80117a0:	464b      	mov	r3, r9
 80117a2:	aa03      	add	r2, sp, #12
 80117a4:	4621      	mov	r1, r4
 80117a6:	4640      	mov	r0, r8
 80117a8:	f7ff fee2 	bl	8011570 <_printf_common>
 80117ac:	3001      	adds	r0, #1
 80117ae:	d14c      	bne.n	801184a <_printf_i+0x1fe>
 80117b0:	f04f 30ff 	mov.w	r0, #4294967295
 80117b4:	b004      	add	sp, #16
 80117b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ba:	4835      	ldr	r0, [pc, #212]	; (8011890 <_printf_i+0x244>)
 80117bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	680e      	ldr	r6, [r1, #0]
 80117c4:	061f      	lsls	r7, r3, #24
 80117c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80117ca:	600e      	str	r6, [r1, #0]
 80117cc:	d514      	bpl.n	80117f8 <_printf_i+0x1ac>
 80117ce:	07d9      	lsls	r1, r3, #31
 80117d0:	bf44      	itt	mi
 80117d2:	f043 0320 	orrmi.w	r3, r3, #32
 80117d6:	6023      	strmi	r3, [r4, #0]
 80117d8:	b91d      	cbnz	r5, 80117e2 <_printf_i+0x196>
 80117da:	6823      	ldr	r3, [r4, #0]
 80117dc:	f023 0320 	bic.w	r3, r3, #32
 80117e0:	6023      	str	r3, [r4, #0]
 80117e2:	2310      	movs	r3, #16
 80117e4:	e7b0      	b.n	8011748 <_printf_i+0xfc>
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	f043 0320 	orr.w	r3, r3, #32
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	2378      	movs	r3, #120	; 0x78
 80117f0:	4828      	ldr	r0, [pc, #160]	; (8011894 <_printf_i+0x248>)
 80117f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117f6:	e7e3      	b.n	80117c0 <_printf_i+0x174>
 80117f8:	065e      	lsls	r6, r3, #25
 80117fa:	bf48      	it	mi
 80117fc:	b2ad      	uxthmi	r5, r5
 80117fe:	e7e6      	b.n	80117ce <_printf_i+0x182>
 8011800:	4616      	mov	r6, r2
 8011802:	e7bb      	b.n	801177c <_printf_i+0x130>
 8011804:	680b      	ldr	r3, [r1, #0]
 8011806:	6826      	ldr	r6, [r4, #0]
 8011808:	6960      	ldr	r0, [r4, #20]
 801180a:	1d1d      	adds	r5, r3, #4
 801180c:	600d      	str	r5, [r1, #0]
 801180e:	0635      	lsls	r5, r6, #24
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	d501      	bpl.n	8011818 <_printf_i+0x1cc>
 8011814:	6018      	str	r0, [r3, #0]
 8011816:	e002      	b.n	801181e <_printf_i+0x1d2>
 8011818:	0671      	lsls	r1, r6, #25
 801181a:	d5fb      	bpl.n	8011814 <_printf_i+0x1c8>
 801181c:	8018      	strh	r0, [r3, #0]
 801181e:	2300      	movs	r3, #0
 8011820:	6123      	str	r3, [r4, #16]
 8011822:	4616      	mov	r6, r2
 8011824:	e7ba      	b.n	801179c <_printf_i+0x150>
 8011826:	680b      	ldr	r3, [r1, #0]
 8011828:	1d1a      	adds	r2, r3, #4
 801182a:	600a      	str	r2, [r1, #0]
 801182c:	681e      	ldr	r6, [r3, #0]
 801182e:	6862      	ldr	r2, [r4, #4]
 8011830:	2100      	movs	r1, #0
 8011832:	4630      	mov	r0, r6
 8011834:	f7ee fcdc 	bl	80001f0 <memchr>
 8011838:	b108      	cbz	r0, 801183e <_printf_i+0x1f2>
 801183a:	1b80      	subs	r0, r0, r6
 801183c:	6060      	str	r0, [r4, #4]
 801183e:	6863      	ldr	r3, [r4, #4]
 8011840:	6123      	str	r3, [r4, #16]
 8011842:	2300      	movs	r3, #0
 8011844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011848:	e7a8      	b.n	801179c <_printf_i+0x150>
 801184a:	6923      	ldr	r3, [r4, #16]
 801184c:	4632      	mov	r2, r6
 801184e:	4649      	mov	r1, r9
 8011850:	4640      	mov	r0, r8
 8011852:	47d0      	blx	sl
 8011854:	3001      	adds	r0, #1
 8011856:	d0ab      	beq.n	80117b0 <_printf_i+0x164>
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	079b      	lsls	r3, r3, #30
 801185c:	d413      	bmi.n	8011886 <_printf_i+0x23a>
 801185e:	68e0      	ldr	r0, [r4, #12]
 8011860:	9b03      	ldr	r3, [sp, #12]
 8011862:	4298      	cmp	r0, r3
 8011864:	bfb8      	it	lt
 8011866:	4618      	movlt	r0, r3
 8011868:	e7a4      	b.n	80117b4 <_printf_i+0x168>
 801186a:	2301      	movs	r3, #1
 801186c:	4632      	mov	r2, r6
 801186e:	4649      	mov	r1, r9
 8011870:	4640      	mov	r0, r8
 8011872:	47d0      	blx	sl
 8011874:	3001      	adds	r0, #1
 8011876:	d09b      	beq.n	80117b0 <_printf_i+0x164>
 8011878:	3501      	adds	r5, #1
 801187a:	68e3      	ldr	r3, [r4, #12]
 801187c:	9903      	ldr	r1, [sp, #12]
 801187e:	1a5b      	subs	r3, r3, r1
 8011880:	42ab      	cmp	r3, r5
 8011882:	dcf2      	bgt.n	801186a <_printf_i+0x21e>
 8011884:	e7eb      	b.n	801185e <_printf_i+0x212>
 8011886:	2500      	movs	r5, #0
 8011888:	f104 0619 	add.w	r6, r4, #25
 801188c:	e7f5      	b.n	801187a <_printf_i+0x22e>
 801188e:	bf00      	nop
 8011890:	08013e66 	.word	0x08013e66
 8011894:	08013e77 	.word	0x08013e77

08011898 <siprintf>:
 8011898:	b40e      	push	{r1, r2, r3}
 801189a:	b500      	push	{lr}
 801189c:	b09c      	sub	sp, #112	; 0x70
 801189e:	ab1d      	add	r3, sp, #116	; 0x74
 80118a0:	9002      	str	r0, [sp, #8]
 80118a2:	9006      	str	r0, [sp, #24]
 80118a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80118a8:	4809      	ldr	r0, [pc, #36]	; (80118d0 <siprintf+0x38>)
 80118aa:	9107      	str	r1, [sp, #28]
 80118ac:	9104      	str	r1, [sp, #16]
 80118ae:	4909      	ldr	r1, [pc, #36]	; (80118d4 <siprintf+0x3c>)
 80118b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118b4:	9105      	str	r1, [sp, #20]
 80118b6:	6800      	ldr	r0, [r0, #0]
 80118b8:	9301      	str	r3, [sp, #4]
 80118ba:	a902      	add	r1, sp, #8
 80118bc:	f001 fb32 	bl	8012f24 <_svfiprintf_r>
 80118c0:	9b02      	ldr	r3, [sp, #8]
 80118c2:	2200      	movs	r2, #0
 80118c4:	701a      	strb	r2, [r3, #0]
 80118c6:	b01c      	add	sp, #112	; 0x70
 80118c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118cc:	b003      	add	sp, #12
 80118ce:	4770      	bx	lr
 80118d0:	20000180 	.word	0x20000180
 80118d4:	ffff0208 	.word	0xffff0208

080118d8 <quorem>:
 80118d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118dc:	6903      	ldr	r3, [r0, #16]
 80118de:	690c      	ldr	r4, [r1, #16]
 80118e0:	42a3      	cmp	r3, r4
 80118e2:	4607      	mov	r7, r0
 80118e4:	f2c0 8081 	blt.w	80119ea <quorem+0x112>
 80118e8:	3c01      	subs	r4, #1
 80118ea:	f101 0814 	add.w	r8, r1, #20
 80118ee:	f100 0514 	add.w	r5, r0, #20
 80118f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118f6:	9301      	str	r3, [sp, #4]
 80118f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011900:	3301      	adds	r3, #1
 8011902:	429a      	cmp	r2, r3
 8011904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801190c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011910:	d331      	bcc.n	8011976 <quorem+0x9e>
 8011912:	f04f 0e00 	mov.w	lr, #0
 8011916:	4640      	mov	r0, r8
 8011918:	46ac      	mov	ip, r5
 801191a:	46f2      	mov	sl, lr
 801191c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011920:	b293      	uxth	r3, r2
 8011922:	fb06 e303 	mla	r3, r6, r3, lr
 8011926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801192a:	b29b      	uxth	r3, r3
 801192c:	ebaa 0303 	sub.w	r3, sl, r3
 8011930:	0c12      	lsrs	r2, r2, #16
 8011932:	f8dc a000 	ldr.w	sl, [ip]
 8011936:	fb06 e202 	mla	r2, r6, r2, lr
 801193a:	fa13 f38a 	uxtah	r3, r3, sl
 801193e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011942:	fa1f fa82 	uxth.w	sl, r2
 8011946:	f8dc 2000 	ldr.w	r2, [ip]
 801194a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801194e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011952:	b29b      	uxth	r3, r3
 8011954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011958:	4581      	cmp	r9, r0
 801195a:	f84c 3b04 	str.w	r3, [ip], #4
 801195e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011962:	d2db      	bcs.n	801191c <quorem+0x44>
 8011964:	f855 300b 	ldr.w	r3, [r5, fp]
 8011968:	b92b      	cbnz	r3, 8011976 <quorem+0x9e>
 801196a:	9b01      	ldr	r3, [sp, #4]
 801196c:	3b04      	subs	r3, #4
 801196e:	429d      	cmp	r5, r3
 8011970:	461a      	mov	r2, r3
 8011972:	d32e      	bcc.n	80119d2 <quorem+0xfa>
 8011974:	613c      	str	r4, [r7, #16]
 8011976:	4638      	mov	r0, r7
 8011978:	f001 f8be 	bl	8012af8 <__mcmp>
 801197c:	2800      	cmp	r0, #0
 801197e:	db24      	blt.n	80119ca <quorem+0xf2>
 8011980:	3601      	adds	r6, #1
 8011982:	4628      	mov	r0, r5
 8011984:	f04f 0c00 	mov.w	ip, #0
 8011988:	f858 2b04 	ldr.w	r2, [r8], #4
 801198c:	f8d0 e000 	ldr.w	lr, [r0]
 8011990:	b293      	uxth	r3, r2
 8011992:	ebac 0303 	sub.w	r3, ip, r3
 8011996:	0c12      	lsrs	r2, r2, #16
 8011998:	fa13 f38e 	uxtah	r3, r3, lr
 801199c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80119a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119aa:	45c1      	cmp	r9, r8
 80119ac:	f840 3b04 	str.w	r3, [r0], #4
 80119b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80119b4:	d2e8      	bcs.n	8011988 <quorem+0xb0>
 80119b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119be:	b922      	cbnz	r2, 80119ca <quorem+0xf2>
 80119c0:	3b04      	subs	r3, #4
 80119c2:	429d      	cmp	r5, r3
 80119c4:	461a      	mov	r2, r3
 80119c6:	d30a      	bcc.n	80119de <quorem+0x106>
 80119c8:	613c      	str	r4, [r7, #16]
 80119ca:	4630      	mov	r0, r6
 80119cc:	b003      	add	sp, #12
 80119ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d2:	6812      	ldr	r2, [r2, #0]
 80119d4:	3b04      	subs	r3, #4
 80119d6:	2a00      	cmp	r2, #0
 80119d8:	d1cc      	bne.n	8011974 <quorem+0x9c>
 80119da:	3c01      	subs	r4, #1
 80119dc:	e7c7      	b.n	801196e <quorem+0x96>
 80119de:	6812      	ldr	r2, [r2, #0]
 80119e0:	3b04      	subs	r3, #4
 80119e2:	2a00      	cmp	r2, #0
 80119e4:	d1f0      	bne.n	80119c8 <quorem+0xf0>
 80119e6:	3c01      	subs	r4, #1
 80119e8:	e7eb      	b.n	80119c2 <quorem+0xea>
 80119ea:	2000      	movs	r0, #0
 80119ec:	e7ee      	b.n	80119cc <quorem+0xf4>
	...

080119f0 <_dtoa_r>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	ed2d 8b02 	vpush	{d8}
 80119f8:	ec57 6b10 	vmov	r6, r7, d0
 80119fc:	b095      	sub	sp, #84	; 0x54
 80119fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011a00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011a04:	9105      	str	r1, [sp, #20]
 8011a06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a10:	b975      	cbnz	r5, 8011a30 <_dtoa_r+0x40>
 8011a12:	2010      	movs	r0, #16
 8011a14:	f000 fddc 	bl	80125d0 <malloc>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8011a1c:	b920      	cbnz	r0, 8011a28 <_dtoa_r+0x38>
 8011a1e:	4bb2      	ldr	r3, [pc, #712]	; (8011ce8 <_dtoa_r+0x2f8>)
 8011a20:	21ea      	movs	r1, #234	; 0xea
 8011a22:	48b2      	ldr	r0, [pc, #712]	; (8011cec <_dtoa_r+0x2fc>)
 8011a24:	f001 fb8e 	bl	8013144 <__assert_func>
 8011a28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011a2c:	6005      	str	r5, [r0, #0]
 8011a2e:	60c5      	str	r5, [r0, #12]
 8011a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a32:	6819      	ldr	r1, [r3, #0]
 8011a34:	b151      	cbz	r1, 8011a4c <_dtoa_r+0x5c>
 8011a36:	685a      	ldr	r2, [r3, #4]
 8011a38:	604a      	str	r2, [r1, #4]
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	4093      	lsls	r3, r2
 8011a3e:	608b      	str	r3, [r1, #8]
 8011a40:	4620      	mov	r0, r4
 8011a42:	f000 fe1b 	bl	801267c <_Bfree>
 8011a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a48:	2200      	movs	r2, #0
 8011a4a:	601a      	str	r2, [r3, #0]
 8011a4c:	1e3b      	subs	r3, r7, #0
 8011a4e:	bfb9      	ittee	lt
 8011a50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a54:	9303      	strlt	r3, [sp, #12]
 8011a56:	2300      	movge	r3, #0
 8011a58:	f8c8 3000 	strge.w	r3, [r8]
 8011a5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011a60:	4ba3      	ldr	r3, [pc, #652]	; (8011cf0 <_dtoa_r+0x300>)
 8011a62:	bfbc      	itt	lt
 8011a64:	2201      	movlt	r2, #1
 8011a66:	f8c8 2000 	strlt.w	r2, [r8]
 8011a6a:	ea33 0309 	bics.w	r3, r3, r9
 8011a6e:	d11b      	bne.n	8011aa8 <_dtoa_r+0xb8>
 8011a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a72:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a76:	6013      	str	r3, [r2, #0]
 8011a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a7c:	4333      	orrs	r3, r6
 8011a7e:	f000 857a 	beq.w	8012576 <_dtoa_r+0xb86>
 8011a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a84:	b963      	cbnz	r3, 8011aa0 <_dtoa_r+0xb0>
 8011a86:	4b9b      	ldr	r3, [pc, #620]	; (8011cf4 <_dtoa_r+0x304>)
 8011a88:	e024      	b.n	8011ad4 <_dtoa_r+0xe4>
 8011a8a:	4b9b      	ldr	r3, [pc, #620]	; (8011cf8 <_dtoa_r+0x308>)
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	3308      	adds	r3, #8
 8011a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011a92:	6013      	str	r3, [r2, #0]
 8011a94:	9800      	ldr	r0, [sp, #0]
 8011a96:	b015      	add	sp, #84	; 0x54
 8011a98:	ecbd 8b02 	vpop	{d8}
 8011a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa0:	4b94      	ldr	r3, [pc, #592]	; (8011cf4 <_dtoa_r+0x304>)
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	3303      	adds	r3, #3
 8011aa6:	e7f3      	b.n	8011a90 <_dtoa_r+0xa0>
 8011aa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011aac:	2200      	movs	r2, #0
 8011aae:	ec51 0b17 	vmov	r0, r1, d7
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011ab8:	f7ef f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8011abc:	4680      	mov	r8, r0
 8011abe:	b158      	cbz	r0, 8011ad8 <_dtoa_r+0xe8>
 8011ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	6013      	str	r3, [r2, #0]
 8011ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 8551 	beq.w	8012570 <_dtoa_r+0xb80>
 8011ace:	488b      	ldr	r0, [pc, #556]	; (8011cfc <_dtoa_r+0x30c>)
 8011ad0:	6018      	str	r0, [r3, #0]
 8011ad2:	1e43      	subs	r3, r0, #1
 8011ad4:	9300      	str	r3, [sp, #0]
 8011ad6:	e7dd      	b.n	8011a94 <_dtoa_r+0xa4>
 8011ad8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011adc:	aa12      	add	r2, sp, #72	; 0x48
 8011ade:	a913      	add	r1, sp, #76	; 0x4c
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f001 f8ad 	bl	8012c40 <__d2b>
 8011ae6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011aea:	4683      	mov	fp, r0
 8011aec:	2d00      	cmp	r5, #0
 8011aee:	d07c      	beq.n	8011bea <_dtoa_r+0x1fa>
 8011af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011af2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011afa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011afe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011b02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011b0a:	4b7d      	ldr	r3, [pc, #500]	; (8011d00 <_dtoa_r+0x310>)
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	4630      	mov	r0, r6
 8011b10:	4639      	mov	r1, r7
 8011b12:	f7ee fbc1 	bl	8000298 <__aeabi_dsub>
 8011b16:	a36e      	add	r3, pc, #440	; (adr r3, 8011cd0 <_dtoa_r+0x2e0>)
 8011b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1c:	f7ee fd74 	bl	8000608 <__aeabi_dmul>
 8011b20:	a36d      	add	r3, pc, #436	; (adr r3, 8011cd8 <_dtoa_r+0x2e8>)
 8011b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b26:	f7ee fbb9 	bl	800029c <__adddf3>
 8011b2a:	4606      	mov	r6, r0
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	460f      	mov	r7, r1
 8011b30:	f7ee fd00 	bl	8000534 <__aeabi_i2d>
 8011b34:	a36a      	add	r3, pc, #424	; (adr r3, 8011ce0 <_dtoa_r+0x2f0>)
 8011b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3a:	f7ee fd65 	bl	8000608 <__aeabi_dmul>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	460b      	mov	r3, r1
 8011b42:	4630      	mov	r0, r6
 8011b44:	4639      	mov	r1, r7
 8011b46:	f7ee fba9 	bl	800029c <__adddf3>
 8011b4a:	4606      	mov	r6, r0
 8011b4c:	460f      	mov	r7, r1
 8011b4e:	f7ef f80b 	bl	8000b68 <__aeabi_d2iz>
 8011b52:	2200      	movs	r2, #0
 8011b54:	4682      	mov	sl, r0
 8011b56:	2300      	movs	r3, #0
 8011b58:	4630      	mov	r0, r6
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	f7ee ffc6 	bl	8000aec <__aeabi_dcmplt>
 8011b60:	b148      	cbz	r0, 8011b76 <_dtoa_r+0x186>
 8011b62:	4650      	mov	r0, sl
 8011b64:	f7ee fce6 	bl	8000534 <__aeabi_i2d>
 8011b68:	4632      	mov	r2, r6
 8011b6a:	463b      	mov	r3, r7
 8011b6c:	f7ee ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8011b70:	b908      	cbnz	r0, 8011b76 <_dtoa_r+0x186>
 8011b72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b76:	f1ba 0f16 	cmp.w	sl, #22
 8011b7a:	d854      	bhi.n	8011c26 <_dtoa_r+0x236>
 8011b7c:	4b61      	ldr	r3, [pc, #388]	; (8011d04 <_dtoa_r+0x314>)
 8011b7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b8a:	f7ee ffaf 	bl	8000aec <__aeabi_dcmplt>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d04b      	beq.n	8011c2a <_dtoa_r+0x23a>
 8011b92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b96:	2300      	movs	r3, #0
 8011b98:	930e      	str	r3, [sp, #56]	; 0x38
 8011b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b9c:	1b5d      	subs	r5, r3, r5
 8011b9e:	1e6b      	subs	r3, r5, #1
 8011ba0:	9304      	str	r3, [sp, #16]
 8011ba2:	bf43      	ittte	mi
 8011ba4:	2300      	movmi	r3, #0
 8011ba6:	f1c5 0801 	rsbmi	r8, r5, #1
 8011baa:	9304      	strmi	r3, [sp, #16]
 8011bac:	f04f 0800 	movpl.w	r8, #0
 8011bb0:	f1ba 0f00 	cmp.w	sl, #0
 8011bb4:	db3b      	blt.n	8011c2e <_dtoa_r+0x23e>
 8011bb6:	9b04      	ldr	r3, [sp, #16]
 8011bb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011bbc:	4453      	add	r3, sl
 8011bbe:	9304      	str	r3, [sp, #16]
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	9306      	str	r3, [sp, #24]
 8011bc4:	9b05      	ldr	r3, [sp, #20]
 8011bc6:	2b09      	cmp	r3, #9
 8011bc8:	d869      	bhi.n	8011c9e <_dtoa_r+0x2ae>
 8011bca:	2b05      	cmp	r3, #5
 8011bcc:	bfc4      	itt	gt
 8011bce:	3b04      	subgt	r3, #4
 8011bd0:	9305      	strgt	r3, [sp, #20]
 8011bd2:	9b05      	ldr	r3, [sp, #20]
 8011bd4:	f1a3 0302 	sub.w	r3, r3, #2
 8011bd8:	bfcc      	ite	gt
 8011bda:	2500      	movgt	r5, #0
 8011bdc:	2501      	movle	r5, #1
 8011bde:	2b03      	cmp	r3, #3
 8011be0:	d869      	bhi.n	8011cb6 <_dtoa_r+0x2c6>
 8011be2:	e8df f003 	tbb	[pc, r3]
 8011be6:	4e2c      	.short	0x4e2c
 8011be8:	5a4c      	.short	0x5a4c
 8011bea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011bee:	441d      	add	r5, r3
 8011bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011bf4:	2b20      	cmp	r3, #32
 8011bf6:	bfc1      	itttt	gt
 8011bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011bfc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011c00:	fa09 f303 	lslgt.w	r3, r9, r3
 8011c04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011c08:	bfda      	itte	le
 8011c0a:	f1c3 0320 	rsble	r3, r3, #32
 8011c0e:	fa06 f003 	lslle.w	r0, r6, r3
 8011c12:	4318      	orrgt	r0, r3
 8011c14:	f7ee fc7e 	bl	8000514 <__aeabi_ui2d>
 8011c18:	2301      	movs	r3, #1
 8011c1a:	4606      	mov	r6, r0
 8011c1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011c20:	3d01      	subs	r5, #1
 8011c22:	9310      	str	r3, [sp, #64]	; 0x40
 8011c24:	e771      	b.n	8011b0a <_dtoa_r+0x11a>
 8011c26:	2301      	movs	r3, #1
 8011c28:	e7b6      	b.n	8011b98 <_dtoa_r+0x1a8>
 8011c2a:	900e      	str	r0, [sp, #56]	; 0x38
 8011c2c:	e7b5      	b.n	8011b9a <_dtoa_r+0x1aa>
 8011c2e:	f1ca 0300 	rsb	r3, sl, #0
 8011c32:	9306      	str	r3, [sp, #24]
 8011c34:	2300      	movs	r3, #0
 8011c36:	eba8 080a 	sub.w	r8, r8, sl
 8011c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8011c3c:	e7c2      	b.n	8011bc4 <_dtoa_r+0x1d4>
 8011c3e:	2300      	movs	r3, #0
 8011c40:	9308      	str	r3, [sp, #32]
 8011c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	dc39      	bgt.n	8011cbc <_dtoa_r+0x2cc>
 8011c48:	f04f 0901 	mov.w	r9, #1
 8011c4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011c50:	464b      	mov	r3, r9
 8011c52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011c56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011c58:	2200      	movs	r2, #0
 8011c5a:	6042      	str	r2, [r0, #4]
 8011c5c:	2204      	movs	r2, #4
 8011c5e:	f102 0614 	add.w	r6, r2, #20
 8011c62:	429e      	cmp	r6, r3
 8011c64:	6841      	ldr	r1, [r0, #4]
 8011c66:	d92f      	bls.n	8011cc8 <_dtoa_r+0x2d8>
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f000 fcc7 	bl	80125fc <_Balloc>
 8011c6e:	9000      	str	r0, [sp, #0]
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d14b      	bne.n	8011d0c <_dtoa_r+0x31c>
 8011c74:	4b24      	ldr	r3, [pc, #144]	; (8011d08 <_dtoa_r+0x318>)
 8011c76:	4602      	mov	r2, r0
 8011c78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011c7c:	e6d1      	b.n	8011a22 <_dtoa_r+0x32>
 8011c7e:	2301      	movs	r3, #1
 8011c80:	e7de      	b.n	8011c40 <_dtoa_r+0x250>
 8011c82:	2300      	movs	r3, #0
 8011c84:	9308      	str	r3, [sp, #32]
 8011c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c88:	eb0a 0903 	add.w	r9, sl, r3
 8011c8c:	f109 0301 	add.w	r3, r9, #1
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	9301      	str	r3, [sp, #4]
 8011c94:	bfb8      	it	lt
 8011c96:	2301      	movlt	r3, #1
 8011c98:	e7dd      	b.n	8011c56 <_dtoa_r+0x266>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e7f2      	b.n	8011c84 <_dtoa_r+0x294>
 8011c9e:	2501      	movs	r5, #1
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	9305      	str	r3, [sp, #20]
 8011ca4:	9508      	str	r5, [sp, #32]
 8011ca6:	f04f 39ff 	mov.w	r9, #4294967295
 8011caa:	2200      	movs	r2, #0
 8011cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8011cb0:	2312      	movs	r3, #18
 8011cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8011cb4:	e7cf      	b.n	8011c56 <_dtoa_r+0x266>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	9308      	str	r3, [sp, #32]
 8011cba:	e7f4      	b.n	8011ca6 <_dtoa_r+0x2b6>
 8011cbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011cc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8011cc4:	464b      	mov	r3, r9
 8011cc6:	e7c6      	b.n	8011c56 <_dtoa_r+0x266>
 8011cc8:	3101      	adds	r1, #1
 8011cca:	6041      	str	r1, [r0, #4]
 8011ccc:	0052      	lsls	r2, r2, #1
 8011cce:	e7c6      	b.n	8011c5e <_dtoa_r+0x26e>
 8011cd0:	636f4361 	.word	0x636f4361
 8011cd4:	3fd287a7 	.word	0x3fd287a7
 8011cd8:	8b60c8b3 	.word	0x8b60c8b3
 8011cdc:	3fc68a28 	.word	0x3fc68a28
 8011ce0:	509f79fb 	.word	0x509f79fb
 8011ce4:	3fd34413 	.word	0x3fd34413
 8011ce8:	08013e95 	.word	0x08013e95
 8011cec:	08013eac 	.word	0x08013eac
 8011cf0:	7ff00000 	.word	0x7ff00000
 8011cf4:	08013e91 	.word	0x08013e91
 8011cf8:	08013e88 	.word	0x08013e88
 8011cfc:	08013e65 	.word	0x08013e65
 8011d00:	3ff80000 	.word	0x3ff80000
 8011d04:	08013fa8 	.word	0x08013fa8
 8011d08:	08013f0b 	.word	0x08013f0b
 8011d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d0e:	9a00      	ldr	r2, [sp, #0]
 8011d10:	601a      	str	r2, [r3, #0]
 8011d12:	9b01      	ldr	r3, [sp, #4]
 8011d14:	2b0e      	cmp	r3, #14
 8011d16:	f200 80ad 	bhi.w	8011e74 <_dtoa_r+0x484>
 8011d1a:	2d00      	cmp	r5, #0
 8011d1c:	f000 80aa 	beq.w	8011e74 <_dtoa_r+0x484>
 8011d20:	f1ba 0f00 	cmp.w	sl, #0
 8011d24:	dd36      	ble.n	8011d94 <_dtoa_r+0x3a4>
 8011d26:	4ac3      	ldr	r2, [pc, #780]	; (8012034 <_dtoa_r+0x644>)
 8011d28:	f00a 030f 	and.w	r3, sl, #15
 8011d2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011d30:	ed93 7b00 	vldr	d7, [r3]
 8011d34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011d38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8011d40:	eef0 8a67 	vmov.f32	s17, s15
 8011d44:	d016      	beq.n	8011d74 <_dtoa_r+0x384>
 8011d46:	4bbc      	ldr	r3, [pc, #752]	; (8012038 <_dtoa_r+0x648>)
 8011d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011d50:	f7ee fd84 	bl	800085c <__aeabi_ddiv>
 8011d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d58:	f007 070f 	and.w	r7, r7, #15
 8011d5c:	2503      	movs	r5, #3
 8011d5e:	4eb6      	ldr	r6, [pc, #728]	; (8012038 <_dtoa_r+0x648>)
 8011d60:	b957      	cbnz	r7, 8011d78 <_dtoa_r+0x388>
 8011d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d66:	ec53 2b18 	vmov	r2, r3, d8
 8011d6a:	f7ee fd77 	bl	800085c <__aeabi_ddiv>
 8011d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d72:	e029      	b.n	8011dc8 <_dtoa_r+0x3d8>
 8011d74:	2502      	movs	r5, #2
 8011d76:	e7f2      	b.n	8011d5e <_dtoa_r+0x36e>
 8011d78:	07f9      	lsls	r1, r7, #31
 8011d7a:	d508      	bpl.n	8011d8e <_dtoa_r+0x39e>
 8011d7c:	ec51 0b18 	vmov	r0, r1, d8
 8011d80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d84:	f7ee fc40 	bl	8000608 <__aeabi_dmul>
 8011d88:	ec41 0b18 	vmov	d8, r0, r1
 8011d8c:	3501      	adds	r5, #1
 8011d8e:	107f      	asrs	r7, r7, #1
 8011d90:	3608      	adds	r6, #8
 8011d92:	e7e5      	b.n	8011d60 <_dtoa_r+0x370>
 8011d94:	f000 80a6 	beq.w	8011ee4 <_dtoa_r+0x4f4>
 8011d98:	f1ca 0600 	rsb	r6, sl, #0
 8011d9c:	4ba5      	ldr	r3, [pc, #660]	; (8012034 <_dtoa_r+0x644>)
 8011d9e:	4fa6      	ldr	r7, [pc, #664]	; (8012038 <_dtoa_r+0x648>)
 8011da0:	f006 020f 	and.w	r2, r6, #15
 8011da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011db0:	f7ee fc2a 	bl	8000608 <__aeabi_dmul>
 8011db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011db8:	1136      	asrs	r6, r6, #4
 8011dba:	2300      	movs	r3, #0
 8011dbc:	2502      	movs	r5, #2
 8011dbe:	2e00      	cmp	r6, #0
 8011dc0:	f040 8085 	bne.w	8011ece <_dtoa_r+0x4de>
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d1d2      	bne.n	8011d6e <_dtoa_r+0x37e>
 8011dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	f000 808c 	beq.w	8011ee8 <_dtoa_r+0x4f8>
 8011dd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011dd4:	4b99      	ldr	r3, [pc, #612]	; (801203c <_dtoa_r+0x64c>)
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	4630      	mov	r0, r6
 8011dda:	4639      	mov	r1, r7
 8011ddc:	f7ee fe86 	bl	8000aec <__aeabi_dcmplt>
 8011de0:	2800      	cmp	r0, #0
 8011de2:	f000 8081 	beq.w	8011ee8 <_dtoa_r+0x4f8>
 8011de6:	9b01      	ldr	r3, [sp, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d07d      	beq.n	8011ee8 <_dtoa_r+0x4f8>
 8011dec:	f1b9 0f00 	cmp.w	r9, #0
 8011df0:	dd3c      	ble.n	8011e6c <_dtoa_r+0x47c>
 8011df2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011df6:	9307      	str	r3, [sp, #28]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	4b91      	ldr	r3, [pc, #580]	; (8012040 <_dtoa_r+0x650>)
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	4639      	mov	r1, r7
 8011e00:	f7ee fc02 	bl	8000608 <__aeabi_dmul>
 8011e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e08:	3501      	adds	r5, #1
 8011e0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011e0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011e12:	4628      	mov	r0, r5
 8011e14:	f7ee fb8e 	bl	8000534 <__aeabi_i2d>
 8011e18:	4632      	mov	r2, r6
 8011e1a:	463b      	mov	r3, r7
 8011e1c:	f7ee fbf4 	bl	8000608 <__aeabi_dmul>
 8011e20:	4b88      	ldr	r3, [pc, #544]	; (8012044 <_dtoa_r+0x654>)
 8011e22:	2200      	movs	r2, #0
 8011e24:	f7ee fa3a 	bl	800029c <__adddf3>
 8011e28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e30:	9303      	str	r3, [sp, #12]
 8011e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d15c      	bne.n	8011ef2 <_dtoa_r+0x502>
 8011e38:	4b83      	ldr	r3, [pc, #524]	; (8012048 <_dtoa_r+0x658>)
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	4639      	mov	r1, r7
 8011e40:	f7ee fa2a 	bl	8000298 <__aeabi_dsub>
 8011e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e48:	4606      	mov	r6, r0
 8011e4a:	460f      	mov	r7, r1
 8011e4c:	f7ee fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 8011e50:	2800      	cmp	r0, #0
 8011e52:	f040 8296 	bne.w	8012382 <_dtoa_r+0x992>
 8011e56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e60:	4639      	mov	r1, r7
 8011e62:	f7ee fe43 	bl	8000aec <__aeabi_dcmplt>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	f040 8288 	bne.w	801237c <_dtoa_r+0x98c>
 8011e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	f2c0 8158 	blt.w	801212c <_dtoa_r+0x73c>
 8011e7c:	f1ba 0f0e 	cmp.w	sl, #14
 8011e80:	f300 8154 	bgt.w	801212c <_dtoa_r+0x73c>
 8011e84:	4b6b      	ldr	r3, [pc, #428]	; (8012034 <_dtoa_r+0x644>)
 8011e86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011e8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	f280 80e3 	bge.w	801205c <_dtoa_r+0x66c>
 8011e96:	9b01      	ldr	r3, [sp, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f300 80df 	bgt.w	801205c <_dtoa_r+0x66c>
 8011e9e:	f040 826d 	bne.w	801237c <_dtoa_r+0x98c>
 8011ea2:	4b69      	ldr	r3, [pc, #420]	; (8012048 <_dtoa_r+0x658>)
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	4640      	mov	r0, r8
 8011ea8:	4649      	mov	r1, r9
 8011eaa:	f7ee fbad 	bl	8000608 <__aeabi_dmul>
 8011eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011eb2:	f7ee fe2f 	bl	8000b14 <__aeabi_dcmpge>
 8011eb6:	9e01      	ldr	r6, [sp, #4]
 8011eb8:	4637      	mov	r7, r6
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	f040 8243 	bne.w	8012346 <_dtoa_r+0x956>
 8011ec0:	9d00      	ldr	r5, [sp, #0]
 8011ec2:	2331      	movs	r3, #49	; 0x31
 8011ec4:	f805 3b01 	strb.w	r3, [r5], #1
 8011ec8:	f10a 0a01 	add.w	sl, sl, #1
 8011ecc:	e23f      	b.n	801234e <_dtoa_r+0x95e>
 8011ece:	07f2      	lsls	r2, r6, #31
 8011ed0:	d505      	bpl.n	8011ede <_dtoa_r+0x4ee>
 8011ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ed6:	f7ee fb97 	bl	8000608 <__aeabi_dmul>
 8011eda:	3501      	adds	r5, #1
 8011edc:	2301      	movs	r3, #1
 8011ede:	1076      	asrs	r6, r6, #1
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	e76c      	b.n	8011dbe <_dtoa_r+0x3ce>
 8011ee4:	2502      	movs	r5, #2
 8011ee6:	e76f      	b.n	8011dc8 <_dtoa_r+0x3d8>
 8011ee8:	9b01      	ldr	r3, [sp, #4]
 8011eea:	f8cd a01c 	str.w	sl, [sp, #28]
 8011eee:	930c      	str	r3, [sp, #48]	; 0x30
 8011ef0:	e78d      	b.n	8011e0e <_dtoa_r+0x41e>
 8011ef2:	9900      	ldr	r1, [sp, #0]
 8011ef4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ef8:	4b4e      	ldr	r3, [pc, #312]	; (8012034 <_dtoa_r+0x644>)
 8011efa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011efe:	4401      	add	r1, r0
 8011f00:	9102      	str	r1, [sp, #8]
 8011f02:	9908      	ldr	r1, [sp, #32]
 8011f04:	eeb0 8a47 	vmov.f32	s16, s14
 8011f08:	eef0 8a67 	vmov.f32	s17, s15
 8011f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011f14:	2900      	cmp	r1, #0
 8011f16:	d045      	beq.n	8011fa4 <_dtoa_r+0x5b4>
 8011f18:	494c      	ldr	r1, [pc, #304]	; (801204c <_dtoa_r+0x65c>)
 8011f1a:	2000      	movs	r0, #0
 8011f1c:	f7ee fc9e 	bl	800085c <__aeabi_ddiv>
 8011f20:	ec53 2b18 	vmov	r2, r3, d8
 8011f24:	f7ee f9b8 	bl	8000298 <__aeabi_dsub>
 8011f28:	9d00      	ldr	r5, [sp, #0]
 8011f2a:	ec41 0b18 	vmov	d8, r0, r1
 8011f2e:	4639      	mov	r1, r7
 8011f30:	4630      	mov	r0, r6
 8011f32:	f7ee fe19 	bl	8000b68 <__aeabi_d2iz>
 8011f36:	900c      	str	r0, [sp, #48]	; 0x30
 8011f38:	f7ee fafc 	bl	8000534 <__aeabi_i2d>
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	460b      	mov	r3, r1
 8011f40:	4630      	mov	r0, r6
 8011f42:	4639      	mov	r1, r7
 8011f44:	f7ee f9a8 	bl	8000298 <__aeabi_dsub>
 8011f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f4a:	3330      	adds	r3, #48	; 0x30
 8011f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8011f50:	ec53 2b18 	vmov	r2, r3, d8
 8011f54:	4606      	mov	r6, r0
 8011f56:	460f      	mov	r7, r1
 8011f58:	f7ee fdc8 	bl	8000aec <__aeabi_dcmplt>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	d165      	bne.n	801202c <_dtoa_r+0x63c>
 8011f60:	4632      	mov	r2, r6
 8011f62:	463b      	mov	r3, r7
 8011f64:	4935      	ldr	r1, [pc, #212]	; (801203c <_dtoa_r+0x64c>)
 8011f66:	2000      	movs	r0, #0
 8011f68:	f7ee f996 	bl	8000298 <__aeabi_dsub>
 8011f6c:	ec53 2b18 	vmov	r2, r3, d8
 8011f70:	f7ee fdbc 	bl	8000aec <__aeabi_dcmplt>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f040 80b9 	bne.w	80120ec <_dtoa_r+0x6fc>
 8011f7a:	9b02      	ldr	r3, [sp, #8]
 8011f7c:	429d      	cmp	r5, r3
 8011f7e:	f43f af75 	beq.w	8011e6c <_dtoa_r+0x47c>
 8011f82:	4b2f      	ldr	r3, [pc, #188]	; (8012040 <_dtoa_r+0x650>)
 8011f84:	ec51 0b18 	vmov	r0, r1, d8
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f7ee fb3d 	bl	8000608 <__aeabi_dmul>
 8011f8e:	4b2c      	ldr	r3, [pc, #176]	; (8012040 <_dtoa_r+0x650>)
 8011f90:	ec41 0b18 	vmov	d8, r0, r1
 8011f94:	2200      	movs	r2, #0
 8011f96:	4630      	mov	r0, r6
 8011f98:	4639      	mov	r1, r7
 8011f9a:	f7ee fb35 	bl	8000608 <__aeabi_dmul>
 8011f9e:	4606      	mov	r6, r0
 8011fa0:	460f      	mov	r7, r1
 8011fa2:	e7c4      	b.n	8011f2e <_dtoa_r+0x53e>
 8011fa4:	ec51 0b17 	vmov	r0, r1, d7
 8011fa8:	f7ee fb2e 	bl	8000608 <__aeabi_dmul>
 8011fac:	9b02      	ldr	r3, [sp, #8]
 8011fae:	9d00      	ldr	r5, [sp, #0]
 8011fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8011fb2:	ec41 0b18 	vmov	d8, r0, r1
 8011fb6:	4639      	mov	r1, r7
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f7ee fdd5 	bl	8000b68 <__aeabi_d2iz>
 8011fbe:	9011      	str	r0, [sp, #68]	; 0x44
 8011fc0:	f7ee fab8 	bl	8000534 <__aeabi_i2d>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4639      	mov	r1, r7
 8011fcc:	f7ee f964 	bl	8000298 <__aeabi_dsub>
 8011fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011fd2:	3330      	adds	r3, #48	; 0x30
 8011fd4:	f805 3b01 	strb.w	r3, [r5], #1
 8011fd8:	9b02      	ldr	r3, [sp, #8]
 8011fda:	429d      	cmp	r5, r3
 8011fdc:	4606      	mov	r6, r0
 8011fde:	460f      	mov	r7, r1
 8011fe0:	f04f 0200 	mov.w	r2, #0
 8011fe4:	d134      	bne.n	8012050 <_dtoa_r+0x660>
 8011fe6:	4b19      	ldr	r3, [pc, #100]	; (801204c <_dtoa_r+0x65c>)
 8011fe8:	ec51 0b18 	vmov	r0, r1, d8
 8011fec:	f7ee f956 	bl	800029c <__adddf3>
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	4639      	mov	r1, r7
 8011ff8:	f7ee fd96 	bl	8000b28 <__aeabi_dcmpgt>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	d175      	bne.n	80120ec <_dtoa_r+0x6fc>
 8012000:	ec53 2b18 	vmov	r2, r3, d8
 8012004:	4911      	ldr	r1, [pc, #68]	; (801204c <_dtoa_r+0x65c>)
 8012006:	2000      	movs	r0, #0
 8012008:	f7ee f946 	bl	8000298 <__aeabi_dsub>
 801200c:	4602      	mov	r2, r0
 801200e:	460b      	mov	r3, r1
 8012010:	4630      	mov	r0, r6
 8012012:	4639      	mov	r1, r7
 8012014:	f7ee fd6a 	bl	8000aec <__aeabi_dcmplt>
 8012018:	2800      	cmp	r0, #0
 801201a:	f43f af27 	beq.w	8011e6c <_dtoa_r+0x47c>
 801201e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012020:	1e6b      	subs	r3, r5, #1
 8012022:	930c      	str	r3, [sp, #48]	; 0x30
 8012024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012028:	2b30      	cmp	r3, #48	; 0x30
 801202a:	d0f8      	beq.n	801201e <_dtoa_r+0x62e>
 801202c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012030:	e04a      	b.n	80120c8 <_dtoa_r+0x6d8>
 8012032:	bf00      	nop
 8012034:	08013fa8 	.word	0x08013fa8
 8012038:	08013f80 	.word	0x08013f80
 801203c:	3ff00000 	.word	0x3ff00000
 8012040:	40240000 	.word	0x40240000
 8012044:	401c0000 	.word	0x401c0000
 8012048:	40140000 	.word	0x40140000
 801204c:	3fe00000 	.word	0x3fe00000
 8012050:	4baf      	ldr	r3, [pc, #700]	; (8012310 <_dtoa_r+0x920>)
 8012052:	f7ee fad9 	bl	8000608 <__aeabi_dmul>
 8012056:	4606      	mov	r6, r0
 8012058:	460f      	mov	r7, r1
 801205a:	e7ac      	b.n	8011fb6 <_dtoa_r+0x5c6>
 801205c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012060:	9d00      	ldr	r5, [sp, #0]
 8012062:	4642      	mov	r2, r8
 8012064:	464b      	mov	r3, r9
 8012066:	4630      	mov	r0, r6
 8012068:	4639      	mov	r1, r7
 801206a:	f7ee fbf7 	bl	800085c <__aeabi_ddiv>
 801206e:	f7ee fd7b 	bl	8000b68 <__aeabi_d2iz>
 8012072:	9002      	str	r0, [sp, #8]
 8012074:	f7ee fa5e 	bl	8000534 <__aeabi_i2d>
 8012078:	4642      	mov	r2, r8
 801207a:	464b      	mov	r3, r9
 801207c:	f7ee fac4 	bl	8000608 <__aeabi_dmul>
 8012080:	4602      	mov	r2, r0
 8012082:	460b      	mov	r3, r1
 8012084:	4630      	mov	r0, r6
 8012086:	4639      	mov	r1, r7
 8012088:	f7ee f906 	bl	8000298 <__aeabi_dsub>
 801208c:	9e02      	ldr	r6, [sp, #8]
 801208e:	9f01      	ldr	r7, [sp, #4]
 8012090:	3630      	adds	r6, #48	; 0x30
 8012092:	f805 6b01 	strb.w	r6, [r5], #1
 8012096:	9e00      	ldr	r6, [sp, #0]
 8012098:	1bae      	subs	r6, r5, r6
 801209a:	42b7      	cmp	r7, r6
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	d137      	bne.n	8012112 <_dtoa_r+0x722>
 80120a2:	f7ee f8fb 	bl	800029c <__adddf3>
 80120a6:	4642      	mov	r2, r8
 80120a8:	464b      	mov	r3, r9
 80120aa:	4606      	mov	r6, r0
 80120ac:	460f      	mov	r7, r1
 80120ae:	f7ee fd3b 	bl	8000b28 <__aeabi_dcmpgt>
 80120b2:	b9c8      	cbnz	r0, 80120e8 <_dtoa_r+0x6f8>
 80120b4:	4642      	mov	r2, r8
 80120b6:	464b      	mov	r3, r9
 80120b8:	4630      	mov	r0, r6
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7ee fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80120c0:	b110      	cbz	r0, 80120c8 <_dtoa_r+0x6d8>
 80120c2:	9b02      	ldr	r3, [sp, #8]
 80120c4:	07d9      	lsls	r1, r3, #31
 80120c6:	d40f      	bmi.n	80120e8 <_dtoa_r+0x6f8>
 80120c8:	4620      	mov	r0, r4
 80120ca:	4659      	mov	r1, fp
 80120cc:	f000 fad6 	bl	801267c <_Bfree>
 80120d0:	2300      	movs	r3, #0
 80120d2:	702b      	strb	r3, [r5, #0]
 80120d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120d6:	f10a 0001 	add.w	r0, sl, #1
 80120da:	6018      	str	r0, [r3, #0]
 80120dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f43f acd8 	beq.w	8011a94 <_dtoa_r+0xa4>
 80120e4:	601d      	str	r5, [r3, #0]
 80120e6:	e4d5      	b.n	8011a94 <_dtoa_r+0xa4>
 80120e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80120ec:	462b      	mov	r3, r5
 80120ee:	461d      	mov	r5, r3
 80120f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120f4:	2a39      	cmp	r2, #57	; 0x39
 80120f6:	d108      	bne.n	801210a <_dtoa_r+0x71a>
 80120f8:	9a00      	ldr	r2, [sp, #0]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d1f7      	bne.n	80120ee <_dtoa_r+0x6fe>
 80120fe:	9a07      	ldr	r2, [sp, #28]
 8012100:	9900      	ldr	r1, [sp, #0]
 8012102:	3201      	adds	r2, #1
 8012104:	9207      	str	r2, [sp, #28]
 8012106:	2230      	movs	r2, #48	; 0x30
 8012108:	700a      	strb	r2, [r1, #0]
 801210a:	781a      	ldrb	r2, [r3, #0]
 801210c:	3201      	adds	r2, #1
 801210e:	701a      	strb	r2, [r3, #0]
 8012110:	e78c      	b.n	801202c <_dtoa_r+0x63c>
 8012112:	4b7f      	ldr	r3, [pc, #508]	; (8012310 <_dtoa_r+0x920>)
 8012114:	2200      	movs	r2, #0
 8012116:	f7ee fa77 	bl	8000608 <__aeabi_dmul>
 801211a:	2200      	movs	r2, #0
 801211c:	2300      	movs	r3, #0
 801211e:	4606      	mov	r6, r0
 8012120:	460f      	mov	r7, r1
 8012122:	f7ee fcd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8012126:	2800      	cmp	r0, #0
 8012128:	d09b      	beq.n	8012062 <_dtoa_r+0x672>
 801212a:	e7cd      	b.n	80120c8 <_dtoa_r+0x6d8>
 801212c:	9a08      	ldr	r2, [sp, #32]
 801212e:	2a00      	cmp	r2, #0
 8012130:	f000 80c4 	beq.w	80122bc <_dtoa_r+0x8cc>
 8012134:	9a05      	ldr	r2, [sp, #20]
 8012136:	2a01      	cmp	r2, #1
 8012138:	f300 80a8 	bgt.w	801228c <_dtoa_r+0x89c>
 801213c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801213e:	2a00      	cmp	r2, #0
 8012140:	f000 80a0 	beq.w	8012284 <_dtoa_r+0x894>
 8012144:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012148:	9e06      	ldr	r6, [sp, #24]
 801214a:	4645      	mov	r5, r8
 801214c:	9a04      	ldr	r2, [sp, #16]
 801214e:	2101      	movs	r1, #1
 8012150:	441a      	add	r2, r3
 8012152:	4620      	mov	r0, r4
 8012154:	4498      	add	r8, r3
 8012156:	9204      	str	r2, [sp, #16]
 8012158:	f000 fb4c 	bl	80127f4 <__i2b>
 801215c:	4607      	mov	r7, r0
 801215e:	2d00      	cmp	r5, #0
 8012160:	dd0b      	ble.n	801217a <_dtoa_r+0x78a>
 8012162:	9b04      	ldr	r3, [sp, #16]
 8012164:	2b00      	cmp	r3, #0
 8012166:	dd08      	ble.n	801217a <_dtoa_r+0x78a>
 8012168:	42ab      	cmp	r3, r5
 801216a:	9a04      	ldr	r2, [sp, #16]
 801216c:	bfa8      	it	ge
 801216e:	462b      	movge	r3, r5
 8012170:	eba8 0803 	sub.w	r8, r8, r3
 8012174:	1aed      	subs	r5, r5, r3
 8012176:	1ad3      	subs	r3, r2, r3
 8012178:	9304      	str	r3, [sp, #16]
 801217a:	9b06      	ldr	r3, [sp, #24]
 801217c:	b1fb      	cbz	r3, 80121be <_dtoa_r+0x7ce>
 801217e:	9b08      	ldr	r3, [sp, #32]
 8012180:	2b00      	cmp	r3, #0
 8012182:	f000 809f 	beq.w	80122c4 <_dtoa_r+0x8d4>
 8012186:	2e00      	cmp	r6, #0
 8012188:	dd11      	ble.n	80121ae <_dtoa_r+0x7be>
 801218a:	4639      	mov	r1, r7
 801218c:	4632      	mov	r2, r6
 801218e:	4620      	mov	r0, r4
 8012190:	f000 fbec 	bl	801296c <__pow5mult>
 8012194:	465a      	mov	r2, fp
 8012196:	4601      	mov	r1, r0
 8012198:	4607      	mov	r7, r0
 801219a:	4620      	mov	r0, r4
 801219c:	f000 fb40 	bl	8012820 <__multiply>
 80121a0:	4659      	mov	r1, fp
 80121a2:	9007      	str	r0, [sp, #28]
 80121a4:	4620      	mov	r0, r4
 80121a6:	f000 fa69 	bl	801267c <_Bfree>
 80121aa:	9b07      	ldr	r3, [sp, #28]
 80121ac:	469b      	mov	fp, r3
 80121ae:	9b06      	ldr	r3, [sp, #24]
 80121b0:	1b9a      	subs	r2, r3, r6
 80121b2:	d004      	beq.n	80121be <_dtoa_r+0x7ce>
 80121b4:	4659      	mov	r1, fp
 80121b6:	4620      	mov	r0, r4
 80121b8:	f000 fbd8 	bl	801296c <__pow5mult>
 80121bc:	4683      	mov	fp, r0
 80121be:	2101      	movs	r1, #1
 80121c0:	4620      	mov	r0, r4
 80121c2:	f000 fb17 	bl	80127f4 <__i2b>
 80121c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	4606      	mov	r6, r0
 80121cc:	dd7c      	ble.n	80122c8 <_dtoa_r+0x8d8>
 80121ce:	461a      	mov	r2, r3
 80121d0:	4601      	mov	r1, r0
 80121d2:	4620      	mov	r0, r4
 80121d4:	f000 fbca 	bl	801296c <__pow5mult>
 80121d8:	9b05      	ldr	r3, [sp, #20]
 80121da:	2b01      	cmp	r3, #1
 80121dc:	4606      	mov	r6, r0
 80121de:	dd76      	ble.n	80122ce <_dtoa_r+0x8de>
 80121e0:	2300      	movs	r3, #0
 80121e2:	9306      	str	r3, [sp, #24]
 80121e4:	6933      	ldr	r3, [r6, #16]
 80121e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80121ea:	6918      	ldr	r0, [r3, #16]
 80121ec:	f000 fab2 	bl	8012754 <__hi0bits>
 80121f0:	f1c0 0020 	rsb	r0, r0, #32
 80121f4:	9b04      	ldr	r3, [sp, #16]
 80121f6:	4418      	add	r0, r3
 80121f8:	f010 001f 	ands.w	r0, r0, #31
 80121fc:	f000 8086 	beq.w	801230c <_dtoa_r+0x91c>
 8012200:	f1c0 0320 	rsb	r3, r0, #32
 8012204:	2b04      	cmp	r3, #4
 8012206:	dd7f      	ble.n	8012308 <_dtoa_r+0x918>
 8012208:	f1c0 001c 	rsb	r0, r0, #28
 801220c:	9b04      	ldr	r3, [sp, #16]
 801220e:	4403      	add	r3, r0
 8012210:	4480      	add	r8, r0
 8012212:	4405      	add	r5, r0
 8012214:	9304      	str	r3, [sp, #16]
 8012216:	f1b8 0f00 	cmp.w	r8, #0
 801221a:	dd05      	ble.n	8012228 <_dtoa_r+0x838>
 801221c:	4659      	mov	r1, fp
 801221e:	4642      	mov	r2, r8
 8012220:	4620      	mov	r0, r4
 8012222:	f000 fbfd 	bl	8012a20 <__lshift>
 8012226:	4683      	mov	fp, r0
 8012228:	9b04      	ldr	r3, [sp, #16]
 801222a:	2b00      	cmp	r3, #0
 801222c:	dd05      	ble.n	801223a <_dtoa_r+0x84a>
 801222e:	4631      	mov	r1, r6
 8012230:	461a      	mov	r2, r3
 8012232:	4620      	mov	r0, r4
 8012234:	f000 fbf4 	bl	8012a20 <__lshift>
 8012238:	4606      	mov	r6, r0
 801223a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801223c:	2b00      	cmp	r3, #0
 801223e:	d069      	beq.n	8012314 <_dtoa_r+0x924>
 8012240:	4631      	mov	r1, r6
 8012242:	4658      	mov	r0, fp
 8012244:	f000 fc58 	bl	8012af8 <__mcmp>
 8012248:	2800      	cmp	r0, #0
 801224a:	da63      	bge.n	8012314 <_dtoa_r+0x924>
 801224c:	2300      	movs	r3, #0
 801224e:	4659      	mov	r1, fp
 8012250:	220a      	movs	r2, #10
 8012252:	4620      	mov	r0, r4
 8012254:	f000 fa34 	bl	80126c0 <__multadd>
 8012258:	9b08      	ldr	r3, [sp, #32]
 801225a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801225e:	4683      	mov	fp, r0
 8012260:	2b00      	cmp	r3, #0
 8012262:	f000 818f 	beq.w	8012584 <_dtoa_r+0xb94>
 8012266:	4639      	mov	r1, r7
 8012268:	2300      	movs	r3, #0
 801226a:	220a      	movs	r2, #10
 801226c:	4620      	mov	r0, r4
 801226e:	f000 fa27 	bl	80126c0 <__multadd>
 8012272:	f1b9 0f00 	cmp.w	r9, #0
 8012276:	4607      	mov	r7, r0
 8012278:	f300 808e 	bgt.w	8012398 <_dtoa_r+0x9a8>
 801227c:	9b05      	ldr	r3, [sp, #20]
 801227e:	2b02      	cmp	r3, #2
 8012280:	dc50      	bgt.n	8012324 <_dtoa_r+0x934>
 8012282:	e089      	b.n	8012398 <_dtoa_r+0x9a8>
 8012284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801228a:	e75d      	b.n	8012148 <_dtoa_r+0x758>
 801228c:	9b01      	ldr	r3, [sp, #4]
 801228e:	1e5e      	subs	r6, r3, #1
 8012290:	9b06      	ldr	r3, [sp, #24]
 8012292:	42b3      	cmp	r3, r6
 8012294:	bfbf      	itttt	lt
 8012296:	9b06      	ldrlt	r3, [sp, #24]
 8012298:	9606      	strlt	r6, [sp, #24]
 801229a:	1af2      	sublt	r2, r6, r3
 801229c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801229e:	bfb6      	itet	lt
 80122a0:	189b      	addlt	r3, r3, r2
 80122a2:	1b9e      	subge	r6, r3, r6
 80122a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80122a6:	9b01      	ldr	r3, [sp, #4]
 80122a8:	bfb8      	it	lt
 80122aa:	2600      	movlt	r6, #0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	bfb5      	itete	lt
 80122b0:	eba8 0503 	sublt.w	r5, r8, r3
 80122b4:	9b01      	ldrge	r3, [sp, #4]
 80122b6:	2300      	movlt	r3, #0
 80122b8:	4645      	movge	r5, r8
 80122ba:	e747      	b.n	801214c <_dtoa_r+0x75c>
 80122bc:	9e06      	ldr	r6, [sp, #24]
 80122be:	9f08      	ldr	r7, [sp, #32]
 80122c0:	4645      	mov	r5, r8
 80122c2:	e74c      	b.n	801215e <_dtoa_r+0x76e>
 80122c4:	9a06      	ldr	r2, [sp, #24]
 80122c6:	e775      	b.n	80121b4 <_dtoa_r+0x7c4>
 80122c8:	9b05      	ldr	r3, [sp, #20]
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	dc18      	bgt.n	8012300 <_dtoa_r+0x910>
 80122ce:	9b02      	ldr	r3, [sp, #8]
 80122d0:	b9b3      	cbnz	r3, 8012300 <_dtoa_r+0x910>
 80122d2:	9b03      	ldr	r3, [sp, #12]
 80122d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122d8:	b9a3      	cbnz	r3, 8012304 <_dtoa_r+0x914>
 80122da:	9b03      	ldr	r3, [sp, #12]
 80122dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80122e0:	0d1b      	lsrs	r3, r3, #20
 80122e2:	051b      	lsls	r3, r3, #20
 80122e4:	b12b      	cbz	r3, 80122f2 <_dtoa_r+0x902>
 80122e6:	9b04      	ldr	r3, [sp, #16]
 80122e8:	3301      	adds	r3, #1
 80122ea:	9304      	str	r3, [sp, #16]
 80122ec:	f108 0801 	add.w	r8, r8, #1
 80122f0:	2301      	movs	r3, #1
 80122f2:	9306      	str	r3, [sp, #24]
 80122f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f47f af74 	bne.w	80121e4 <_dtoa_r+0x7f4>
 80122fc:	2001      	movs	r0, #1
 80122fe:	e779      	b.n	80121f4 <_dtoa_r+0x804>
 8012300:	2300      	movs	r3, #0
 8012302:	e7f6      	b.n	80122f2 <_dtoa_r+0x902>
 8012304:	9b02      	ldr	r3, [sp, #8]
 8012306:	e7f4      	b.n	80122f2 <_dtoa_r+0x902>
 8012308:	d085      	beq.n	8012216 <_dtoa_r+0x826>
 801230a:	4618      	mov	r0, r3
 801230c:	301c      	adds	r0, #28
 801230e:	e77d      	b.n	801220c <_dtoa_r+0x81c>
 8012310:	40240000 	.word	0x40240000
 8012314:	9b01      	ldr	r3, [sp, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	dc38      	bgt.n	801238c <_dtoa_r+0x99c>
 801231a:	9b05      	ldr	r3, [sp, #20]
 801231c:	2b02      	cmp	r3, #2
 801231e:	dd35      	ble.n	801238c <_dtoa_r+0x99c>
 8012320:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012324:	f1b9 0f00 	cmp.w	r9, #0
 8012328:	d10d      	bne.n	8012346 <_dtoa_r+0x956>
 801232a:	4631      	mov	r1, r6
 801232c:	464b      	mov	r3, r9
 801232e:	2205      	movs	r2, #5
 8012330:	4620      	mov	r0, r4
 8012332:	f000 f9c5 	bl	80126c0 <__multadd>
 8012336:	4601      	mov	r1, r0
 8012338:	4606      	mov	r6, r0
 801233a:	4658      	mov	r0, fp
 801233c:	f000 fbdc 	bl	8012af8 <__mcmp>
 8012340:	2800      	cmp	r0, #0
 8012342:	f73f adbd 	bgt.w	8011ec0 <_dtoa_r+0x4d0>
 8012346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012348:	9d00      	ldr	r5, [sp, #0]
 801234a:	ea6f 0a03 	mvn.w	sl, r3
 801234e:	f04f 0800 	mov.w	r8, #0
 8012352:	4631      	mov	r1, r6
 8012354:	4620      	mov	r0, r4
 8012356:	f000 f991 	bl	801267c <_Bfree>
 801235a:	2f00      	cmp	r7, #0
 801235c:	f43f aeb4 	beq.w	80120c8 <_dtoa_r+0x6d8>
 8012360:	f1b8 0f00 	cmp.w	r8, #0
 8012364:	d005      	beq.n	8012372 <_dtoa_r+0x982>
 8012366:	45b8      	cmp	r8, r7
 8012368:	d003      	beq.n	8012372 <_dtoa_r+0x982>
 801236a:	4641      	mov	r1, r8
 801236c:	4620      	mov	r0, r4
 801236e:	f000 f985 	bl	801267c <_Bfree>
 8012372:	4639      	mov	r1, r7
 8012374:	4620      	mov	r0, r4
 8012376:	f000 f981 	bl	801267c <_Bfree>
 801237a:	e6a5      	b.n	80120c8 <_dtoa_r+0x6d8>
 801237c:	2600      	movs	r6, #0
 801237e:	4637      	mov	r7, r6
 8012380:	e7e1      	b.n	8012346 <_dtoa_r+0x956>
 8012382:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012384:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012388:	4637      	mov	r7, r6
 801238a:	e599      	b.n	8011ec0 <_dtoa_r+0x4d0>
 801238c:	9b08      	ldr	r3, [sp, #32]
 801238e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	f000 80fd 	beq.w	8012592 <_dtoa_r+0xba2>
 8012398:	2d00      	cmp	r5, #0
 801239a:	dd05      	ble.n	80123a8 <_dtoa_r+0x9b8>
 801239c:	4639      	mov	r1, r7
 801239e:	462a      	mov	r2, r5
 80123a0:	4620      	mov	r0, r4
 80123a2:	f000 fb3d 	bl	8012a20 <__lshift>
 80123a6:	4607      	mov	r7, r0
 80123a8:	9b06      	ldr	r3, [sp, #24]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d05c      	beq.n	8012468 <_dtoa_r+0xa78>
 80123ae:	6879      	ldr	r1, [r7, #4]
 80123b0:	4620      	mov	r0, r4
 80123b2:	f000 f923 	bl	80125fc <_Balloc>
 80123b6:	4605      	mov	r5, r0
 80123b8:	b928      	cbnz	r0, 80123c6 <_dtoa_r+0x9d6>
 80123ba:	4b80      	ldr	r3, [pc, #512]	; (80125bc <_dtoa_r+0xbcc>)
 80123bc:	4602      	mov	r2, r0
 80123be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80123c2:	f7ff bb2e 	b.w	8011a22 <_dtoa_r+0x32>
 80123c6:	693a      	ldr	r2, [r7, #16]
 80123c8:	3202      	adds	r2, #2
 80123ca:	0092      	lsls	r2, r2, #2
 80123cc:	f107 010c 	add.w	r1, r7, #12
 80123d0:	300c      	adds	r0, #12
 80123d2:	f000 f905 	bl	80125e0 <memcpy>
 80123d6:	2201      	movs	r2, #1
 80123d8:	4629      	mov	r1, r5
 80123da:	4620      	mov	r0, r4
 80123dc:	f000 fb20 	bl	8012a20 <__lshift>
 80123e0:	9b00      	ldr	r3, [sp, #0]
 80123e2:	3301      	adds	r3, #1
 80123e4:	9301      	str	r3, [sp, #4]
 80123e6:	9b00      	ldr	r3, [sp, #0]
 80123e8:	444b      	add	r3, r9
 80123ea:	9307      	str	r3, [sp, #28]
 80123ec:	9b02      	ldr	r3, [sp, #8]
 80123ee:	f003 0301 	and.w	r3, r3, #1
 80123f2:	46b8      	mov	r8, r7
 80123f4:	9306      	str	r3, [sp, #24]
 80123f6:	4607      	mov	r7, r0
 80123f8:	9b01      	ldr	r3, [sp, #4]
 80123fa:	4631      	mov	r1, r6
 80123fc:	3b01      	subs	r3, #1
 80123fe:	4658      	mov	r0, fp
 8012400:	9302      	str	r3, [sp, #8]
 8012402:	f7ff fa69 	bl	80118d8 <quorem>
 8012406:	4603      	mov	r3, r0
 8012408:	3330      	adds	r3, #48	; 0x30
 801240a:	9004      	str	r0, [sp, #16]
 801240c:	4641      	mov	r1, r8
 801240e:	4658      	mov	r0, fp
 8012410:	9308      	str	r3, [sp, #32]
 8012412:	f000 fb71 	bl	8012af8 <__mcmp>
 8012416:	463a      	mov	r2, r7
 8012418:	4681      	mov	r9, r0
 801241a:	4631      	mov	r1, r6
 801241c:	4620      	mov	r0, r4
 801241e:	f000 fb87 	bl	8012b30 <__mdiff>
 8012422:	68c2      	ldr	r2, [r0, #12]
 8012424:	9b08      	ldr	r3, [sp, #32]
 8012426:	4605      	mov	r5, r0
 8012428:	bb02      	cbnz	r2, 801246c <_dtoa_r+0xa7c>
 801242a:	4601      	mov	r1, r0
 801242c:	4658      	mov	r0, fp
 801242e:	f000 fb63 	bl	8012af8 <__mcmp>
 8012432:	9b08      	ldr	r3, [sp, #32]
 8012434:	4602      	mov	r2, r0
 8012436:	4629      	mov	r1, r5
 8012438:	4620      	mov	r0, r4
 801243a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801243e:	f000 f91d 	bl	801267c <_Bfree>
 8012442:	9b05      	ldr	r3, [sp, #20]
 8012444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012446:	9d01      	ldr	r5, [sp, #4]
 8012448:	ea43 0102 	orr.w	r1, r3, r2
 801244c:	9b06      	ldr	r3, [sp, #24]
 801244e:	430b      	orrs	r3, r1
 8012450:	9b08      	ldr	r3, [sp, #32]
 8012452:	d10d      	bne.n	8012470 <_dtoa_r+0xa80>
 8012454:	2b39      	cmp	r3, #57	; 0x39
 8012456:	d029      	beq.n	80124ac <_dtoa_r+0xabc>
 8012458:	f1b9 0f00 	cmp.w	r9, #0
 801245c:	dd01      	ble.n	8012462 <_dtoa_r+0xa72>
 801245e:	9b04      	ldr	r3, [sp, #16]
 8012460:	3331      	adds	r3, #49	; 0x31
 8012462:	9a02      	ldr	r2, [sp, #8]
 8012464:	7013      	strb	r3, [r2, #0]
 8012466:	e774      	b.n	8012352 <_dtoa_r+0x962>
 8012468:	4638      	mov	r0, r7
 801246a:	e7b9      	b.n	80123e0 <_dtoa_r+0x9f0>
 801246c:	2201      	movs	r2, #1
 801246e:	e7e2      	b.n	8012436 <_dtoa_r+0xa46>
 8012470:	f1b9 0f00 	cmp.w	r9, #0
 8012474:	db06      	blt.n	8012484 <_dtoa_r+0xa94>
 8012476:	9905      	ldr	r1, [sp, #20]
 8012478:	ea41 0909 	orr.w	r9, r1, r9
 801247c:	9906      	ldr	r1, [sp, #24]
 801247e:	ea59 0101 	orrs.w	r1, r9, r1
 8012482:	d120      	bne.n	80124c6 <_dtoa_r+0xad6>
 8012484:	2a00      	cmp	r2, #0
 8012486:	ddec      	ble.n	8012462 <_dtoa_r+0xa72>
 8012488:	4659      	mov	r1, fp
 801248a:	2201      	movs	r2, #1
 801248c:	4620      	mov	r0, r4
 801248e:	9301      	str	r3, [sp, #4]
 8012490:	f000 fac6 	bl	8012a20 <__lshift>
 8012494:	4631      	mov	r1, r6
 8012496:	4683      	mov	fp, r0
 8012498:	f000 fb2e 	bl	8012af8 <__mcmp>
 801249c:	2800      	cmp	r0, #0
 801249e:	9b01      	ldr	r3, [sp, #4]
 80124a0:	dc02      	bgt.n	80124a8 <_dtoa_r+0xab8>
 80124a2:	d1de      	bne.n	8012462 <_dtoa_r+0xa72>
 80124a4:	07da      	lsls	r2, r3, #31
 80124a6:	d5dc      	bpl.n	8012462 <_dtoa_r+0xa72>
 80124a8:	2b39      	cmp	r3, #57	; 0x39
 80124aa:	d1d8      	bne.n	801245e <_dtoa_r+0xa6e>
 80124ac:	9a02      	ldr	r2, [sp, #8]
 80124ae:	2339      	movs	r3, #57	; 0x39
 80124b0:	7013      	strb	r3, [r2, #0]
 80124b2:	462b      	mov	r3, r5
 80124b4:	461d      	mov	r5, r3
 80124b6:	3b01      	subs	r3, #1
 80124b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80124bc:	2a39      	cmp	r2, #57	; 0x39
 80124be:	d050      	beq.n	8012562 <_dtoa_r+0xb72>
 80124c0:	3201      	adds	r2, #1
 80124c2:	701a      	strb	r2, [r3, #0]
 80124c4:	e745      	b.n	8012352 <_dtoa_r+0x962>
 80124c6:	2a00      	cmp	r2, #0
 80124c8:	dd03      	ble.n	80124d2 <_dtoa_r+0xae2>
 80124ca:	2b39      	cmp	r3, #57	; 0x39
 80124cc:	d0ee      	beq.n	80124ac <_dtoa_r+0xabc>
 80124ce:	3301      	adds	r3, #1
 80124d0:	e7c7      	b.n	8012462 <_dtoa_r+0xa72>
 80124d2:	9a01      	ldr	r2, [sp, #4]
 80124d4:	9907      	ldr	r1, [sp, #28]
 80124d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80124da:	428a      	cmp	r2, r1
 80124dc:	d02a      	beq.n	8012534 <_dtoa_r+0xb44>
 80124de:	4659      	mov	r1, fp
 80124e0:	2300      	movs	r3, #0
 80124e2:	220a      	movs	r2, #10
 80124e4:	4620      	mov	r0, r4
 80124e6:	f000 f8eb 	bl	80126c0 <__multadd>
 80124ea:	45b8      	cmp	r8, r7
 80124ec:	4683      	mov	fp, r0
 80124ee:	f04f 0300 	mov.w	r3, #0
 80124f2:	f04f 020a 	mov.w	r2, #10
 80124f6:	4641      	mov	r1, r8
 80124f8:	4620      	mov	r0, r4
 80124fa:	d107      	bne.n	801250c <_dtoa_r+0xb1c>
 80124fc:	f000 f8e0 	bl	80126c0 <__multadd>
 8012500:	4680      	mov	r8, r0
 8012502:	4607      	mov	r7, r0
 8012504:	9b01      	ldr	r3, [sp, #4]
 8012506:	3301      	adds	r3, #1
 8012508:	9301      	str	r3, [sp, #4]
 801250a:	e775      	b.n	80123f8 <_dtoa_r+0xa08>
 801250c:	f000 f8d8 	bl	80126c0 <__multadd>
 8012510:	4639      	mov	r1, r7
 8012512:	4680      	mov	r8, r0
 8012514:	2300      	movs	r3, #0
 8012516:	220a      	movs	r2, #10
 8012518:	4620      	mov	r0, r4
 801251a:	f000 f8d1 	bl	80126c0 <__multadd>
 801251e:	4607      	mov	r7, r0
 8012520:	e7f0      	b.n	8012504 <_dtoa_r+0xb14>
 8012522:	f1b9 0f00 	cmp.w	r9, #0
 8012526:	9a00      	ldr	r2, [sp, #0]
 8012528:	bfcc      	ite	gt
 801252a:	464d      	movgt	r5, r9
 801252c:	2501      	movle	r5, #1
 801252e:	4415      	add	r5, r2
 8012530:	f04f 0800 	mov.w	r8, #0
 8012534:	4659      	mov	r1, fp
 8012536:	2201      	movs	r2, #1
 8012538:	4620      	mov	r0, r4
 801253a:	9301      	str	r3, [sp, #4]
 801253c:	f000 fa70 	bl	8012a20 <__lshift>
 8012540:	4631      	mov	r1, r6
 8012542:	4683      	mov	fp, r0
 8012544:	f000 fad8 	bl	8012af8 <__mcmp>
 8012548:	2800      	cmp	r0, #0
 801254a:	dcb2      	bgt.n	80124b2 <_dtoa_r+0xac2>
 801254c:	d102      	bne.n	8012554 <_dtoa_r+0xb64>
 801254e:	9b01      	ldr	r3, [sp, #4]
 8012550:	07db      	lsls	r3, r3, #31
 8012552:	d4ae      	bmi.n	80124b2 <_dtoa_r+0xac2>
 8012554:	462b      	mov	r3, r5
 8012556:	461d      	mov	r5, r3
 8012558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801255c:	2a30      	cmp	r2, #48	; 0x30
 801255e:	d0fa      	beq.n	8012556 <_dtoa_r+0xb66>
 8012560:	e6f7      	b.n	8012352 <_dtoa_r+0x962>
 8012562:	9a00      	ldr	r2, [sp, #0]
 8012564:	429a      	cmp	r2, r3
 8012566:	d1a5      	bne.n	80124b4 <_dtoa_r+0xac4>
 8012568:	f10a 0a01 	add.w	sl, sl, #1
 801256c:	2331      	movs	r3, #49	; 0x31
 801256e:	e779      	b.n	8012464 <_dtoa_r+0xa74>
 8012570:	4b13      	ldr	r3, [pc, #76]	; (80125c0 <_dtoa_r+0xbd0>)
 8012572:	f7ff baaf 	b.w	8011ad4 <_dtoa_r+0xe4>
 8012576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012578:	2b00      	cmp	r3, #0
 801257a:	f47f aa86 	bne.w	8011a8a <_dtoa_r+0x9a>
 801257e:	4b11      	ldr	r3, [pc, #68]	; (80125c4 <_dtoa_r+0xbd4>)
 8012580:	f7ff baa8 	b.w	8011ad4 <_dtoa_r+0xe4>
 8012584:	f1b9 0f00 	cmp.w	r9, #0
 8012588:	dc03      	bgt.n	8012592 <_dtoa_r+0xba2>
 801258a:	9b05      	ldr	r3, [sp, #20]
 801258c:	2b02      	cmp	r3, #2
 801258e:	f73f aec9 	bgt.w	8012324 <_dtoa_r+0x934>
 8012592:	9d00      	ldr	r5, [sp, #0]
 8012594:	4631      	mov	r1, r6
 8012596:	4658      	mov	r0, fp
 8012598:	f7ff f99e 	bl	80118d8 <quorem>
 801259c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80125a0:	f805 3b01 	strb.w	r3, [r5], #1
 80125a4:	9a00      	ldr	r2, [sp, #0]
 80125a6:	1aaa      	subs	r2, r5, r2
 80125a8:	4591      	cmp	r9, r2
 80125aa:	ddba      	ble.n	8012522 <_dtoa_r+0xb32>
 80125ac:	4659      	mov	r1, fp
 80125ae:	2300      	movs	r3, #0
 80125b0:	220a      	movs	r2, #10
 80125b2:	4620      	mov	r0, r4
 80125b4:	f000 f884 	bl	80126c0 <__multadd>
 80125b8:	4683      	mov	fp, r0
 80125ba:	e7eb      	b.n	8012594 <_dtoa_r+0xba4>
 80125bc:	08013f0b 	.word	0x08013f0b
 80125c0:	08013e64 	.word	0x08013e64
 80125c4:	08013e88 	.word	0x08013e88

080125c8 <_localeconv_r>:
 80125c8:	4800      	ldr	r0, [pc, #0]	; (80125cc <_localeconv_r+0x4>)
 80125ca:	4770      	bx	lr
 80125cc:	200002d4 	.word	0x200002d4

080125d0 <malloc>:
 80125d0:	4b02      	ldr	r3, [pc, #8]	; (80125dc <malloc+0xc>)
 80125d2:	4601      	mov	r1, r0
 80125d4:	6818      	ldr	r0, [r3, #0]
 80125d6:	f000 bbef 	b.w	8012db8 <_malloc_r>
 80125da:	bf00      	nop
 80125dc:	20000180 	.word	0x20000180

080125e0 <memcpy>:
 80125e0:	440a      	add	r2, r1
 80125e2:	4291      	cmp	r1, r2
 80125e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80125e8:	d100      	bne.n	80125ec <memcpy+0xc>
 80125ea:	4770      	bx	lr
 80125ec:	b510      	push	{r4, lr}
 80125ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125f6:	4291      	cmp	r1, r2
 80125f8:	d1f9      	bne.n	80125ee <memcpy+0xe>
 80125fa:	bd10      	pop	{r4, pc}

080125fc <_Balloc>:
 80125fc:	b570      	push	{r4, r5, r6, lr}
 80125fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012600:	4604      	mov	r4, r0
 8012602:	460d      	mov	r5, r1
 8012604:	b976      	cbnz	r6, 8012624 <_Balloc+0x28>
 8012606:	2010      	movs	r0, #16
 8012608:	f7ff ffe2 	bl	80125d0 <malloc>
 801260c:	4602      	mov	r2, r0
 801260e:	6260      	str	r0, [r4, #36]	; 0x24
 8012610:	b920      	cbnz	r0, 801261c <_Balloc+0x20>
 8012612:	4b18      	ldr	r3, [pc, #96]	; (8012674 <_Balloc+0x78>)
 8012614:	4818      	ldr	r0, [pc, #96]	; (8012678 <_Balloc+0x7c>)
 8012616:	2166      	movs	r1, #102	; 0x66
 8012618:	f000 fd94 	bl	8013144 <__assert_func>
 801261c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012620:	6006      	str	r6, [r0, #0]
 8012622:	60c6      	str	r6, [r0, #12]
 8012624:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012626:	68f3      	ldr	r3, [r6, #12]
 8012628:	b183      	cbz	r3, 801264c <_Balloc+0x50>
 801262a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801262c:	68db      	ldr	r3, [r3, #12]
 801262e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012632:	b9b8      	cbnz	r0, 8012664 <_Balloc+0x68>
 8012634:	2101      	movs	r1, #1
 8012636:	fa01 f605 	lsl.w	r6, r1, r5
 801263a:	1d72      	adds	r2, r6, #5
 801263c:	0092      	lsls	r2, r2, #2
 801263e:	4620      	mov	r0, r4
 8012640:	f000 fb5a 	bl	8012cf8 <_calloc_r>
 8012644:	b160      	cbz	r0, 8012660 <_Balloc+0x64>
 8012646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801264a:	e00e      	b.n	801266a <_Balloc+0x6e>
 801264c:	2221      	movs	r2, #33	; 0x21
 801264e:	2104      	movs	r1, #4
 8012650:	4620      	mov	r0, r4
 8012652:	f000 fb51 	bl	8012cf8 <_calloc_r>
 8012656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012658:	60f0      	str	r0, [r6, #12]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d1e4      	bne.n	801262a <_Balloc+0x2e>
 8012660:	2000      	movs	r0, #0
 8012662:	bd70      	pop	{r4, r5, r6, pc}
 8012664:	6802      	ldr	r2, [r0, #0]
 8012666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801266a:	2300      	movs	r3, #0
 801266c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012670:	e7f7      	b.n	8012662 <_Balloc+0x66>
 8012672:	bf00      	nop
 8012674:	08013e95 	.word	0x08013e95
 8012678:	08013f1c 	.word	0x08013f1c

0801267c <_Bfree>:
 801267c:	b570      	push	{r4, r5, r6, lr}
 801267e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012680:	4605      	mov	r5, r0
 8012682:	460c      	mov	r4, r1
 8012684:	b976      	cbnz	r6, 80126a4 <_Bfree+0x28>
 8012686:	2010      	movs	r0, #16
 8012688:	f7ff ffa2 	bl	80125d0 <malloc>
 801268c:	4602      	mov	r2, r0
 801268e:	6268      	str	r0, [r5, #36]	; 0x24
 8012690:	b920      	cbnz	r0, 801269c <_Bfree+0x20>
 8012692:	4b09      	ldr	r3, [pc, #36]	; (80126b8 <_Bfree+0x3c>)
 8012694:	4809      	ldr	r0, [pc, #36]	; (80126bc <_Bfree+0x40>)
 8012696:	218a      	movs	r1, #138	; 0x8a
 8012698:	f000 fd54 	bl	8013144 <__assert_func>
 801269c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126a0:	6006      	str	r6, [r0, #0]
 80126a2:	60c6      	str	r6, [r0, #12]
 80126a4:	b13c      	cbz	r4, 80126b6 <_Bfree+0x3a>
 80126a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126a8:	6862      	ldr	r2, [r4, #4]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126b0:	6021      	str	r1, [r4, #0]
 80126b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80126b6:	bd70      	pop	{r4, r5, r6, pc}
 80126b8:	08013e95 	.word	0x08013e95
 80126bc:	08013f1c 	.word	0x08013f1c

080126c0 <__multadd>:
 80126c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c4:	690e      	ldr	r6, [r1, #16]
 80126c6:	4607      	mov	r7, r0
 80126c8:	4698      	mov	r8, r3
 80126ca:	460c      	mov	r4, r1
 80126cc:	f101 0014 	add.w	r0, r1, #20
 80126d0:	2300      	movs	r3, #0
 80126d2:	6805      	ldr	r5, [r0, #0]
 80126d4:	b2a9      	uxth	r1, r5
 80126d6:	fb02 8101 	mla	r1, r2, r1, r8
 80126da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80126de:	0c2d      	lsrs	r5, r5, #16
 80126e0:	fb02 c505 	mla	r5, r2, r5, ip
 80126e4:	b289      	uxth	r1, r1
 80126e6:	3301      	adds	r3, #1
 80126e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80126ec:	429e      	cmp	r6, r3
 80126ee:	f840 1b04 	str.w	r1, [r0], #4
 80126f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80126f6:	dcec      	bgt.n	80126d2 <__multadd+0x12>
 80126f8:	f1b8 0f00 	cmp.w	r8, #0
 80126fc:	d022      	beq.n	8012744 <__multadd+0x84>
 80126fe:	68a3      	ldr	r3, [r4, #8]
 8012700:	42b3      	cmp	r3, r6
 8012702:	dc19      	bgt.n	8012738 <__multadd+0x78>
 8012704:	6861      	ldr	r1, [r4, #4]
 8012706:	4638      	mov	r0, r7
 8012708:	3101      	adds	r1, #1
 801270a:	f7ff ff77 	bl	80125fc <_Balloc>
 801270e:	4605      	mov	r5, r0
 8012710:	b928      	cbnz	r0, 801271e <__multadd+0x5e>
 8012712:	4602      	mov	r2, r0
 8012714:	4b0d      	ldr	r3, [pc, #52]	; (801274c <__multadd+0x8c>)
 8012716:	480e      	ldr	r0, [pc, #56]	; (8012750 <__multadd+0x90>)
 8012718:	21b5      	movs	r1, #181	; 0xb5
 801271a:	f000 fd13 	bl	8013144 <__assert_func>
 801271e:	6922      	ldr	r2, [r4, #16]
 8012720:	3202      	adds	r2, #2
 8012722:	f104 010c 	add.w	r1, r4, #12
 8012726:	0092      	lsls	r2, r2, #2
 8012728:	300c      	adds	r0, #12
 801272a:	f7ff ff59 	bl	80125e0 <memcpy>
 801272e:	4621      	mov	r1, r4
 8012730:	4638      	mov	r0, r7
 8012732:	f7ff ffa3 	bl	801267c <_Bfree>
 8012736:	462c      	mov	r4, r5
 8012738:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801273c:	3601      	adds	r6, #1
 801273e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012742:	6126      	str	r6, [r4, #16]
 8012744:	4620      	mov	r0, r4
 8012746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801274a:	bf00      	nop
 801274c:	08013f0b 	.word	0x08013f0b
 8012750:	08013f1c 	.word	0x08013f1c

08012754 <__hi0bits>:
 8012754:	0c03      	lsrs	r3, r0, #16
 8012756:	041b      	lsls	r3, r3, #16
 8012758:	b9d3      	cbnz	r3, 8012790 <__hi0bits+0x3c>
 801275a:	0400      	lsls	r0, r0, #16
 801275c:	2310      	movs	r3, #16
 801275e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012762:	bf04      	itt	eq
 8012764:	0200      	lsleq	r0, r0, #8
 8012766:	3308      	addeq	r3, #8
 8012768:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801276c:	bf04      	itt	eq
 801276e:	0100      	lsleq	r0, r0, #4
 8012770:	3304      	addeq	r3, #4
 8012772:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012776:	bf04      	itt	eq
 8012778:	0080      	lsleq	r0, r0, #2
 801277a:	3302      	addeq	r3, #2
 801277c:	2800      	cmp	r0, #0
 801277e:	db05      	blt.n	801278c <__hi0bits+0x38>
 8012780:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012784:	f103 0301 	add.w	r3, r3, #1
 8012788:	bf08      	it	eq
 801278a:	2320      	moveq	r3, #32
 801278c:	4618      	mov	r0, r3
 801278e:	4770      	bx	lr
 8012790:	2300      	movs	r3, #0
 8012792:	e7e4      	b.n	801275e <__hi0bits+0xa>

08012794 <__lo0bits>:
 8012794:	6803      	ldr	r3, [r0, #0]
 8012796:	f013 0207 	ands.w	r2, r3, #7
 801279a:	4601      	mov	r1, r0
 801279c:	d00b      	beq.n	80127b6 <__lo0bits+0x22>
 801279e:	07da      	lsls	r2, r3, #31
 80127a0:	d424      	bmi.n	80127ec <__lo0bits+0x58>
 80127a2:	0798      	lsls	r0, r3, #30
 80127a4:	bf49      	itett	mi
 80127a6:	085b      	lsrmi	r3, r3, #1
 80127a8:	089b      	lsrpl	r3, r3, #2
 80127aa:	2001      	movmi	r0, #1
 80127ac:	600b      	strmi	r3, [r1, #0]
 80127ae:	bf5c      	itt	pl
 80127b0:	600b      	strpl	r3, [r1, #0]
 80127b2:	2002      	movpl	r0, #2
 80127b4:	4770      	bx	lr
 80127b6:	b298      	uxth	r0, r3
 80127b8:	b9b0      	cbnz	r0, 80127e8 <__lo0bits+0x54>
 80127ba:	0c1b      	lsrs	r3, r3, #16
 80127bc:	2010      	movs	r0, #16
 80127be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80127c2:	bf04      	itt	eq
 80127c4:	0a1b      	lsreq	r3, r3, #8
 80127c6:	3008      	addeq	r0, #8
 80127c8:	071a      	lsls	r2, r3, #28
 80127ca:	bf04      	itt	eq
 80127cc:	091b      	lsreq	r3, r3, #4
 80127ce:	3004      	addeq	r0, #4
 80127d0:	079a      	lsls	r2, r3, #30
 80127d2:	bf04      	itt	eq
 80127d4:	089b      	lsreq	r3, r3, #2
 80127d6:	3002      	addeq	r0, #2
 80127d8:	07da      	lsls	r2, r3, #31
 80127da:	d403      	bmi.n	80127e4 <__lo0bits+0x50>
 80127dc:	085b      	lsrs	r3, r3, #1
 80127de:	f100 0001 	add.w	r0, r0, #1
 80127e2:	d005      	beq.n	80127f0 <__lo0bits+0x5c>
 80127e4:	600b      	str	r3, [r1, #0]
 80127e6:	4770      	bx	lr
 80127e8:	4610      	mov	r0, r2
 80127ea:	e7e8      	b.n	80127be <__lo0bits+0x2a>
 80127ec:	2000      	movs	r0, #0
 80127ee:	4770      	bx	lr
 80127f0:	2020      	movs	r0, #32
 80127f2:	4770      	bx	lr

080127f4 <__i2b>:
 80127f4:	b510      	push	{r4, lr}
 80127f6:	460c      	mov	r4, r1
 80127f8:	2101      	movs	r1, #1
 80127fa:	f7ff feff 	bl	80125fc <_Balloc>
 80127fe:	4602      	mov	r2, r0
 8012800:	b928      	cbnz	r0, 801280e <__i2b+0x1a>
 8012802:	4b05      	ldr	r3, [pc, #20]	; (8012818 <__i2b+0x24>)
 8012804:	4805      	ldr	r0, [pc, #20]	; (801281c <__i2b+0x28>)
 8012806:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801280a:	f000 fc9b 	bl	8013144 <__assert_func>
 801280e:	2301      	movs	r3, #1
 8012810:	6144      	str	r4, [r0, #20]
 8012812:	6103      	str	r3, [r0, #16]
 8012814:	bd10      	pop	{r4, pc}
 8012816:	bf00      	nop
 8012818:	08013f0b 	.word	0x08013f0b
 801281c:	08013f1c 	.word	0x08013f1c

08012820 <__multiply>:
 8012820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012824:	4614      	mov	r4, r2
 8012826:	690a      	ldr	r2, [r1, #16]
 8012828:	6923      	ldr	r3, [r4, #16]
 801282a:	429a      	cmp	r2, r3
 801282c:	bfb8      	it	lt
 801282e:	460b      	movlt	r3, r1
 8012830:	460d      	mov	r5, r1
 8012832:	bfbc      	itt	lt
 8012834:	4625      	movlt	r5, r4
 8012836:	461c      	movlt	r4, r3
 8012838:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801283c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012840:	68ab      	ldr	r3, [r5, #8]
 8012842:	6869      	ldr	r1, [r5, #4]
 8012844:	eb0a 0709 	add.w	r7, sl, r9
 8012848:	42bb      	cmp	r3, r7
 801284a:	b085      	sub	sp, #20
 801284c:	bfb8      	it	lt
 801284e:	3101      	addlt	r1, #1
 8012850:	f7ff fed4 	bl	80125fc <_Balloc>
 8012854:	b930      	cbnz	r0, 8012864 <__multiply+0x44>
 8012856:	4602      	mov	r2, r0
 8012858:	4b42      	ldr	r3, [pc, #264]	; (8012964 <__multiply+0x144>)
 801285a:	4843      	ldr	r0, [pc, #268]	; (8012968 <__multiply+0x148>)
 801285c:	f240 115d 	movw	r1, #349	; 0x15d
 8012860:	f000 fc70 	bl	8013144 <__assert_func>
 8012864:	f100 0614 	add.w	r6, r0, #20
 8012868:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801286c:	4633      	mov	r3, r6
 801286e:	2200      	movs	r2, #0
 8012870:	4543      	cmp	r3, r8
 8012872:	d31e      	bcc.n	80128b2 <__multiply+0x92>
 8012874:	f105 0c14 	add.w	ip, r5, #20
 8012878:	f104 0314 	add.w	r3, r4, #20
 801287c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012880:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012884:	9202      	str	r2, [sp, #8]
 8012886:	ebac 0205 	sub.w	r2, ip, r5
 801288a:	3a15      	subs	r2, #21
 801288c:	f022 0203 	bic.w	r2, r2, #3
 8012890:	3204      	adds	r2, #4
 8012892:	f105 0115 	add.w	r1, r5, #21
 8012896:	458c      	cmp	ip, r1
 8012898:	bf38      	it	cc
 801289a:	2204      	movcc	r2, #4
 801289c:	9201      	str	r2, [sp, #4]
 801289e:	9a02      	ldr	r2, [sp, #8]
 80128a0:	9303      	str	r3, [sp, #12]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d808      	bhi.n	80128b8 <__multiply+0x98>
 80128a6:	2f00      	cmp	r7, #0
 80128a8:	dc55      	bgt.n	8012956 <__multiply+0x136>
 80128aa:	6107      	str	r7, [r0, #16]
 80128ac:	b005      	add	sp, #20
 80128ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b2:	f843 2b04 	str.w	r2, [r3], #4
 80128b6:	e7db      	b.n	8012870 <__multiply+0x50>
 80128b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80128bc:	f1ba 0f00 	cmp.w	sl, #0
 80128c0:	d020      	beq.n	8012904 <__multiply+0xe4>
 80128c2:	f105 0e14 	add.w	lr, r5, #20
 80128c6:	46b1      	mov	r9, r6
 80128c8:	2200      	movs	r2, #0
 80128ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80128ce:	f8d9 b000 	ldr.w	fp, [r9]
 80128d2:	b2a1      	uxth	r1, r4
 80128d4:	fa1f fb8b 	uxth.w	fp, fp
 80128d8:	fb0a b101 	mla	r1, sl, r1, fp
 80128dc:	4411      	add	r1, r2
 80128de:	f8d9 2000 	ldr.w	r2, [r9]
 80128e2:	0c24      	lsrs	r4, r4, #16
 80128e4:	0c12      	lsrs	r2, r2, #16
 80128e6:	fb0a 2404 	mla	r4, sl, r4, r2
 80128ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80128ee:	b289      	uxth	r1, r1
 80128f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80128f4:	45f4      	cmp	ip, lr
 80128f6:	f849 1b04 	str.w	r1, [r9], #4
 80128fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80128fe:	d8e4      	bhi.n	80128ca <__multiply+0xaa>
 8012900:	9901      	ldr	r1, [sp, #4]
 8012902:	5072      	str	r2, [r6, r1]
 8012904:	9a03      	ldr	r2, [sp, #12]
 8012906:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801290a:	3304      	adds	r3, #4
 801290c:	f1b9 0f00 	cmp.w	r9, #0
 8012910:	d01f      	beq.n	8012952 <__multiply+0x132>
 8012912:	6834      	ldr	r4, [r6, #0]
 8012914:	f105 0114 	add.w	r1, r5, #20
 8012918:	46b6      	mov	lr, r6
 801291a:	f04f 0a00 	mov.w	sl, #0
 801291e:	880a      	ldrh	r2, [r1, #0]
 8012920:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012924:	fb09 b202 	mla	r2, r9, r2, fp
 8012928:	4492      	add	sl, r2
 801292a:	b2a4      	uxth	r4, r4
 801292c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012930:	f84e 4b04 	str.w	r4, [lr], #4
 8012934:	f851 4b04 	ldr.w	r4, [r1], #4
 8012938:	f8be 2000 	ldrh.w	r2, [lr]
 801293c:	0c24      	lsrs	r4, r4, #16
 801293e:	fb09 2404 	mla	r4, r9, r4, r2
 8012942:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012946:	458c      	cmp	ip, r1
 8012948:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801294c:	d8e7      	bhi.n	801291e <__multiply+0xfe>
 801294e:	9a01      	ldr	r2, [sp, #4]
 8012950:	50b4      	str	r4, [r6, r2]
 8012952:	3604      	adds	r6, #4
 8012954:	e7a3      	b.n	801289e <__multiply+0x7e>
 8012956:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1a5      	bne.n	80128aa <__multiply+0x8a>
 801295e:	3f01      	subs	r7, #1
 8012960:	e7a1      	b.n	80128a6 <__multiply+0x86>
 8012962:	bf00      	nop
 8012964:	08013f0b 	.word	0x08013f0b
 8012968:	08013f1c 	.word	0x08013f1c

0801296c <__pow5mult>:
 801296c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012970:	4615      	mov	r5, r2
 8012972:	f012 0203 	ands.w	r2, r2, #3
 8012976:	4606      	mov	r6, r0
 8012978:	460f      	mov	r7, r1
 801297a:	d007      	beq.n	801298c <__pow5mult+0x20>
 801297c:	4c25      	ldr	r4, [pc, #148]	; (8012a14 <__pow5mult+0xa8>)
 801297e:	3a01      	subs	r2, #1
 8012980:	2300      	movs	r3, #0
 8012982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012986:	f7ff fe9b 	bl	80126c0 <__multadd>
 801298a:	4607      	mov	r7, r0
 801298c:	10ad      	asrs	r5, r5, #2
 801298e:	d03d      	beq.n	8012a0c <__pow5mult+0xa0>
 8012990:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012992:	b97c      	cbnz	r4, 80129b4 <__pow5mult+0x48>
 8012994:	2010      	movs	r0, #16
 8012996:	f7ff fe1b 	bl	80125d0 <malloc>
 801299a:	4602      	mov	r2, r0
 801299c:	6270      	str	r0, [r6, #36]	; 0x24
 801299e:	b928      	cbnz	r0, 80129ac <__pow5mult+0x40>
 80129a0:	4b1d      	ldr	r3, [pc, #116]	; (8012a18 <__pow5mult+0xac>)
 80129a2:	481e      	ldr	r0, [pc, #120]	; (8012a1c <__pow5mult+0xb0>)
 80129a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80129a8:	f000 fbcc 	bl	8013144 <__assert_func>
 80129ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129b0:	6004      	str	r4, [r0, #0]
 80129b2:	60c4      	str	r4, [r0, #12]
 80129b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80129b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129bc:	b94c      	cbnz	r4, 80129d2 <__pow5mult+0x66>
 80129be:	f240 2171 	movw	r1, #625	; 0x271
 80129c2:	4630      	mov	r0, r6
 80129c4:	f7ff ff16 	bl	80127f4 <__i2b>
 80129c8:	2300      	movs	r3, #0
 80129ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80129ce:	4604      	mov	r4, r0
 80129d0:	6003      	str	r3, [r0, #0]
 80129d2:	f04f 0900 	mov.w	r9, #0
 80129d6:	07eb      	lsls	r3, r5, #31
 80129d8:	d50a      	bpl.n	80129f0 <__pow5mult+0x84>
 80129da:	4639      	mov	r1, r7
 80129dc:	4622      	mov	r2, r4
 80129de:	4630      	mov	r0, r6
 80129e0:	f7ff ff1e 	bl	8012820 <__multiply>
 80129e4:	4639      	mov	r1, r7
 80129e6:	4680      	mov	r8, r0
 80129e8:	4630      	mov	r0, r6
 80129ea:	f7ff fe47 	bl	801267c <_Bfree>
 80129ee:	4647      	mov	r7, r8
 80129f0:	106d      	asrs	r5, r5, #1
 80129f2:	d00b      	beq.n	8012a0c <__pow5mult+0xa0>
 80129f4:	6820      	ldr	r0, [r4, #0]
 80129f6:	b938      	cbnz	r0, 8012a08 <__pow5mult+0x9c>
 80129f8:	4622      	mov	r2, r4
 80129fa:	4621      	mov	r1, r4
 80129fc:	4630      	mov	r0, r6
 80129fe:	f7ff ff0f 	bl	8012820 <__multiply>
 8012a02:	6020      	str	r0, [r4, #0]
 8012a04:	f8c0 9000 	str.w	r9, [r0]
 8012a08:	4604      	mov	r4, r0
 8012a0a:	e7e4      	b.n	80129d6 <__pow5mult+0x6a>
 8012a0c:	4638      	mov	r0, r7
 8012a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a12:	bf00      	nop
 8012a14:	08014070 	.word	0x08014070
 8012a18:	08013e95 	.word	0x08013e95
 8012a1c:	08013f1c 	.word	0x08013f1c

08012a20 <__lshift>:
 8012a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a24:	460c      	mov	r4, r1
 8012a26:	6849      	ldr	r1, [r1, #4]
 8012a28:	6923      	ldr	r3, [r4, #16]
 8012a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a2e:	68a3      	ldr	r3, [r4, #8]
 8012a30:	4607      	mov	r7, r0
 8012a32:	4691      	mov	r9, r2
 8012a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a38:	f108 0601 	add.w	r6, r8, #1
 8012a3c:	42b3      	cmp	r3, r6
 8012a3e:	db0b      	blt.n	8012a58 <__lshift+0x38>
 8012a40:	4638      	mov	r0, r7
 8012a42:	f7ff fddb 	bl	80125fc <_Balloc>
 8012a46:	4605      	mov	r5, r0
 8012a48:	b948      	cbnz	r0, 8012a5e <__lshift+0x3e>
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	4b28      	ldr	r3, [pc, #160]	; (8012af0 <__lshift+0xd0>)
 8012a4e:	4829      	ldr	r0, [pc, #164]	; (8012af4 <__lshift+0xd4>)
 8012a50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012a54:	f000 fb76 	bl	8013144 <__assert_func>
 8012a58:	3101      	adds	r1, #1
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	e7ee      	b.n	8012a3c <__lshift+0x1c>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	f100 0114 	add.w	r1, r0, #20
 8012a64:	f100 0210 	add.w	r2, r0, #16
 8012a68:	4618      	mov	r0, r3
 8012a6a:	4553      	cmp	r3, sl
 8012a6c:	db33      	blt.n	8012ad6 <__lshift+0xb6>
 8012a6e:	6920      	ldr	r0, [r4, #16]
 8012a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a74:	f104 0314 	add.w	r3, r4, #20
 8012a78:	f019 091f 	ands.w	r9, r9, #31
 8012a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012a84:	d02b      	beq.n	8012ade <__lshift+0xbe>
 8012a86:	f1c9 0e20 	rsb	lr, r9, #32
 8012a8a:	468a      	mov	sl, r1
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	6818      	ldr	r0, [r3, #0]
 8012a90:	fa00 f009 	lsl.w	r0, r0, r9
 8012a94:	4302      	orrs	r2, r0
 8012a96:	f84a 2b04 	str.w	r2, [sl], #4
 8012a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a9e:	459c      	cmp	ip, r3
 8012aa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012aa4:	d8f3      	bhi.n	8012a8e <__lshift+0x6e>
 8012aa6:	ebac 0304 	sub.w	r3, ip, r4
 8012aaa:	3b15      	subs	r3, #21
 8012aac:	f023 0303 	bic.w	r3, r3, #3
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	f104 0015 	add.w	r0, r4, #21
 8012ab6:	4584      	cmp	ip, r0
 8012ab8:	bf38      	it	cc
 8012aba:	2304      	movcc	r3, #4
 8012abc:	50ca      	str	r2, [r1, r3]
 8012abe:	b10a      	cbz	r2, 8012ac4 <__lshift+0xa4>
 8012ac0:	f108 0602 	add.w	r6, r8, #2
 8012ac4:	3e01      	subs	r6, #1
 8012ac6:	4638      	mov	r0, r7
 8012ac8:	612e      	str	r6, [r5, #16]
 8012aca:	4621      	mov	r1, r4
 8012acc:	f7ff fdd6 	bl	801267c <_Bfree>
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ad6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ada:	3301      	adds	r3, #1
 8012adc:	e7c5      	b.n	8012a6a <__lshift+0x4a>
 8012ade:	3904      	subs	r1, #4
 8012ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ae4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ae8:	459c      	cmp	ip, r3
 8012aea:	d8f9      	bhi.n	8012ae0 <__lshift+0xc0>
 8012aec:	e7ea      	b.n	8012ac4 <__lshift+0xa4>
 8012aee:	bf00      	nop
 8012af0:	08013f0b 	.word	0x08013f0b
 8012af4:	08013f1c 	.word	0x08013f1c

08012af8 <__mcmp>:
 8012af8:	b530      	push	{r4, r5, lr}
 8012afa:	6902      	ldr	r2, [r0, #16]
 8012afc:	690c      	ldr	r4, [r1, #16]
 8012afe:	1b12      	subs	r2, r2, r4
 8012b00:	d10e      	bne.n	8012b20 <__mcmp+0x28>
 8012b02:	f100 0314 	add.w	r3, r0, #20
 8012b06:	3114      	adds	r1, #20
 8012b08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012b0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012b10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012b14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012b18:	42a5      	cmp	r5, r4
 8012b1a:	d003      	beq.n	8012b24 <__mcmp+0x2c>
 8012b1c:	d305      	bcc.n	8012b2a <__mcmp+0x32>
 8012b1e:	2201      	movs	r2, #1
 8012b20:	4610      	mov	r0, r2
 8012b22:	bd30      	pop	{r4, r5, pc}
 8012b24:	4283      	cmp	r3, r0
 8012b26:	d3f3      	bcc.n	8012b10 <__mcmp+0x18>
 8012b28:	e7fa      	b.n	8012b20 <__mcmp+0x28>
 8012b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b2e:	e7f7      	b.n	8012b20 <__mcmp+0x28>

08012b30 <__mdiff>:
 8012b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b34:	460c      	mov	r4, r1
 8012b36:	4606      	mov	r6, r0
 8012b38:	4611      	mov	r1, r2
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	4617      	mov	r7, r2
 8012b3e:	f7ff ffdb 	bl	8012af8 <__mcmp>
 8012b42:	1e05      	subs	r5, r0, #0
 8012b44:	d110      	bne.n	8012b68 <__mdiff+0x38>
 8012b46:	4629      	mov	r1, r5
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f7ff fd57 	bl	80125fc <_Balloc>
 8012b4e:	b930      	cbnz	r0, 8012b5e <__mdiff+0x2e>
 8012b50:	4b39      	ldr	r3, [pc, #228]	; (8012c38 <__mdiff+0x108>)
 8012b52:	4602      	mov	r2, r0
 8012b54:	f240 2132 	movw	r1, #562	; 0x232
 8012b58:	4838      	ldr	r0, [pc, #224]	; (8012c3c <__mdiff+0x10c>)
 8012b5a:	f000 faf3 	bl	8013144 <__assert_func>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b68:	bfa4      	itt	ge
 8012b6a:	463b      	movge	r3, r7
 8012b6c:	4627      	movge	r7, r4
 8012b6e:	4630      	mov	r0, r6
 8012b70:	6879      	ldr	r1, [r7, #4]
 8012b72:	bfa6      	itte	ge
 8012b74:	461c      	movge	r4, r3
 8012b76:	2500      	movge	r5, #0
 8012b78:	2501      	movlt	r5, #1
 8012b7a:	f7ff fd3f 	bl	80125fc <_Balloc>
 8012b7e:	b920      	cbnz	r0, 8012b8a <__mdiff+0x5a>
 8012b80:	4b2d      	ldr	r3, [pc, #180]	; (8012c38 <__mdiff+0x108>)
 8012b82:	4602      	mov	r2, r0
 8012b84:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b88:	e7e6      	b.n	8012b58 <__mdiff+0x28>
 8012b8a:	693e      	ldr	r6, [r7, #16]
 8012b8c:	60c5      	str	r5, [r0, #12]
 8012b8e:	6925      	ldr	r5, [r4, #16]
 8012b90:	f107 0114 	add.w	r1, r7, #20
 8012b94:	f104 0914 	add.w	r9, r4, #20
 8012b98:	f100 0e14 	add.w	lr, r0, #20
 8012b9c:	f107 0210 	add.w	r2, r7, #16
 8012ba0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012ba4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012ba8:	46f2      	mov	sl, lr
 8012baa:	2700      	movs	r7, #0
 8012bac:	f859 3b04 	ldr.w	r3, [r9], #4
 8012bb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012bb4:	fa1f f883 	uxth.w	r8, r3
 8012bb8:	fa17 f78b 	uxtah	r7, r7, fp
 8012bbc:	0c1b      	lsrs	r3, r3, #16
 8012bbe:	eba7 0808 	sub.w	r8, r7, r8
 8012bc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012bc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012bca:	fa1f f888 	uxth.w	r8, r8
 8012bce:	141f      	asrs	r7, r3, #16
 8012bd0:	454d      	cmp	r5, r9
 8012bd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012bd6:	f84a 3b04 	str.w	r3, [sl], #4
 8012bda:	d8e7      	bhi.n	8012bac <__mdiff+0x7c>
 8012bdc:	1b2b      	subs	r3, r5, r4
 8012bde:	3b15      	subs	r3, #21
 8012be0:	f023 0303 	bic.w	r3, r3, #3
 8012be4:	3304      	adds	r3, #4
 8012be6:	3415      	adds	r4, #21
 8012be8:	42a5      	cmp	r5, r4
 8012bea:	bf38      	it	cc
 8012bec:	2304      	movcc	r3, #4
 8012bee:	4419      	add	r1, r3
 8012bf0:	4473      	add	r3, lr
 8012bf2:	469e      	mov	lr, r3
 8012bf4:	460d      	mov	r5, r1
 8012bf6:	4565      	cmp	r5, ip
 8012bf8:	d30e      	bcc.n	8012c18 <__mdiff+0xe8>
 8012bfa:	f10c 0203 	add.w	r2, ip, #3
 8012bfe:	1a52      	subs	r2, r2, r1
 8012c00:	f022 0203 	bic.w	r2, r2, #3
 8012c04:	3903      	subs	r1, #3
 8012c06:	458c      	cmp	ip, r1
 8012c08:	bf38      	it	cc
 8012c0a:	2200      	movcc	r2, #0
 8012c0c:	441a      	add	r2, r3
 8012c0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012c12:	b17b      	cbz	r3, 8012c34 <__mdiff+0x104>
 8012c14:	6106      	str	r6, [r0, #16]
 8012c16:	e7a5      	b.n	8012b64 <__mdiff+0x34>
 8012c18:	f855 8b04 	ldr.w	r8, [r5], #4
 8012c1c:	fa17 f488 	uxtah	r4, r7, r8
 8012c20:	1422      	asrs	r2, r4, #16
 8012c22:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012c26:	b2a4      	uxth	r4, r4
 8012c28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012c2c:	f84e 4b04 	str.w	r4, [lr], #4
 8012c30:	1417      	asrs	r7, r2, #16
 8012c32:	e7e0      	b.n	8012bf6 <__mdiff+0xc6>
 8012c34:	3e01      	subs	r6, #1
 8012c36:	e7ea      	b.n	8012c0e <__mdiff+0xde>
 8012c38:	08013f0b 	.word	0x08013f0b
 8012c3c:	08013f1c 	.word	0x08013f1c

08012c40 <__d2b>:
 8012c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c44:	4689      	mov	r9, r1
 8012c46:	2101      	movs	r1, #1
 8012c48:	ec57 6b10 	vmov	r6, r7, d0
 8012c4c:	4690      	mov	r8, r2
 8012c4e:	f7ff fcd5 	bl	80125fc <_Balloc>
 8012c52:	4604      	mov	r4, r0
 8012c54:	b930      	cbnz	r0, 8012c64 <__d2b+0x24>
 8012c56:	4602      	mov	r2, r0
 8012c58:	4b25      	ldr	r3, [pc, #148]	; (8012cf0 <__d2b+0xb0>)
 8012c5a:	4826      	ldr	r0, [pc, #152]	; (8012cf4 <__d2b+0xb4>)
 8012c5c:	f240 310a 	movw	r1, #778	; 0x30a
 8012c60:	f000 fa70 	bl	8013144 <__assert_func>
 8012c64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012c68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012c6c:	bb35      	cbnz	r5, 8012cbc <__d2b+0x7c>
 8012c6e:	2e00      	cmp	r6, #0
 8012c70:	9301      	str	r3, [sp, #4]
 8012c72:	d028      	beq.n	8012cc6 <__d2b+0x86>
 8012c74:	4668      	mov	r0, sp
 8012c76:	9600      	str	r6, [sp, #0]
 8012c78:	f7ff fd8c 	bl	8012794 <__lo0bits>
 8012c7c:	9900      	ldr	r1, [sp, #0]
 8012c7e:	b300      	cbz	r0, 8012cc2 <__d2b+0x82>
 8012c80:	9a01      	ldr	r2, [sp, #4]
 8012c82:	f1c0 0320 	rsb	r3, r0, #32
 8012c86:	fa02 f303 	lsl.w	r3, r2, r3
 8012c8a:	430b      	orrs	r3, r1
 8012c8c:	40c2      	lsrs	r2, r0
 8012c8e:	6163      	str	r3, [r4, #20]
 8012c90:	9201      	str	r2, [sp, #4]
 8012c92:	9b01      	ldr	r3, [sp, #4]
 8012c94:	61a3      	str	r3, [r4, #24]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	bf14      	ite	ne
 8012c9a:	2202      	movne	r2, #2
 8012c9c:	2201      	moveq	r2, #1
 8012c9e:	6122      	str	r2, [r4, #16]
 8012ca0:	b1d5      	cbz	r5, 8012cd8 <__d2b+0x98>
 8012ca2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012ca6:	4405      	add	r5, r0
 8012ca8:	f8c9 5000 	str.w	r5, [r9]
 8012cac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012cb0:	f8c8 0000 	str.w	r0, [r8]
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	b003      	add	sp, #12
 8012cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012cc0:	e7d5      	b.n	8012c6e <__d2b+0x2e>
 8012cc2:	6161      	str	r1, [r4, #20]
 8012cc4:	e7e5      	b.n	8012c92 <__d2b+0x52>
 8012cc6:	a801      	add	r0, sp, #4
 8012cc8:	f7ff fd64 	bl	8012794 <__lo0bits>
 8012ccc:	9b01      	ldr	r3, [sp, #4]
 8012cce:	6163      	str	r3, [r4, #20]
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	6122      	str	r2, [r4, #16]
 8012cd4:	3020      	adds	r0, #32
 8012cd6:	e7e3      	b.n	8012ca0 <__d2b+0x60>
 8012cd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012cdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ce0:	f8c9 0000 	str.w	r0, [r9]
 8012ce4:	6918      	ldr	r0, [r3, #16]
 8012ce6:	f7ff fd35 	bl	8012754 <__hi0bits>
 8012cea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012cee:	e7df      	b.n	8012cb0 <__d2b+0x70>
 8012cf0:	08013f0b 	.word	0x08013f0b
 8012cf4:	08013f1c 	.word	0x08013f1c

08012cf8 <_calloc_r>:
 8012cf8:	b513      	push	{r0, r1, r4, lr}
 8012cfa:	434a      	muls	r2, r1
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	9201      	str	r2, [sp, #4]
 8012d00:	f000 f85a 	bl	8012db8 <_malloc_r>
 8012d04:	4604      	mov	r4, r0
 8012d06:	b118      	cbz	r0, 8012d10 <_calloc_r+0x18>
 8012d08:	9a01      	ldr	r2, [sp, #4]
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	f7fe f952 	bl	8010fb4 <memset>
 8012d10:	4620      	mov	r0, r4
 8012d12:	b002      	add	sp, #8
 8012d14:	bd10      	pop	{r4, pc}
	...

08012d18 <_free_r>:
 8012d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d1a:	2900      	cmp	r1, #0
 8012d1c:	d048      	beq.n	8012db0 <_free_r+0x98>
 8012d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d22:	9001      	str	r0, [sp, #4]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	f1a1 0404 	sub.w	r4, r1, #4
 8012d2a:	bfb8      	it	lt
 8012d2c:	18e4      	addlt	r4, r4, r3
 8012d2e:	f000 fa65 	bl	80131fc <__malloc_lock>
 8012d32:	4a20      	ldr	r2, [pc, #128]	; (8012db4 <_free_r+0x9c>)
 8012d34:	9801      	ldr	r0, [sp, #4]
 8012d36:	6813      	ldr	r3, [r2, #0]
 8012d38:	4615      	mov	r5, r2
 8012d3a:	b933      	cbnz	r3, 8012d4a <_free_r+0x32>
 8012d3c:	6063      	str	r3, [r4, #4]
 8012d3e:	6014      	str	r4, [r2, #0]
 8012d40:	b003      	add	sp, #12
 8012d42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d46:	f000 ba5f 	b.w	8013208 <__malloc_unlock>
 8012d4a:	42a3      	cmp	r3, r4
 8012d4c:	d90b      	bls.n	8012d66 <_free_r+0x4e>
 8012d4e:	6821      	ldr	r1, [r4, #0]
 8012d50:	1862      	adds	r2, r4, r1
 8012d52:	4293      	cmp	r3, r2
 8012d54:	bf04      	itt	eq
 8012d56:	681a      	ldreq	r2, [r3, #0]
 8012d58:	685b      	ldreq	r3, [r3, #4]
 8012d5a:	6063      	str	r3, [r4, #4]
 8012d5c:	bf04      	itt	eq
 8012d5e:	1852      	addeq	r2, r2, r1
 8012d60:	6022      	streq	r2, [r4, #0]
 8012d62:	602c      	str	r4, [r5, #0]
 8012d64:	e7ec      	b.n	8012d40 <_free_r+0x28>
 8012d66:	461a      	mov	r2, r3
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	b10b      	cbz	r3, 8012d70 <_free_r+0x58>
 8012d6c:	42a3      	cmp	r3, r4
 8012d6e:	d9fa      	bls.n	8012d66 <_free_r+0x4e>
 8012d70:	6811      	ldr	r1, [r2, #0]
 8012d72:	1855      	adds	r5, r2, r1
 8012d74:	42a5      	cmp	r5, r4
 8012d76:	d10b      	bne.n	8012d90 <_free_r+0x78>
 8012d78:	6824      	ldr	r4, [r4, #0]
 8012d7a:	4421      	add	r1, r4
 8012d7c:	1854      	adds	r4, r2, r1
 8012d7e:	42a3      	cmp	r3, r4
 8012d80:	6011      	str	r1, [r2, #0]
 8012d82:	d1dd      	bne.n	8012d40 <_free_r+0x28>
 8012d84:	681c      	ldr	r4, [r3, #0]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	6053      	str	r3, [r2, #4]
 8012d8a:	4421      	add	r1, r4
 8012d8c:	6011      	str	r1, [r2, #0]
 8012d8e:	e7d7      	b.n	8012d40 <_free_r+0x28>
 8012d90:	d902      	bls.n	8012d98 <_free_r+0x80>
 8012d92:	230c      	movs	r3, #12
 8012d94:	6003      	str	r3, [r0, #0]
 8012d96:	e7d3      	b.n	8012d40 <_free_r+0x28>
 8012d98:	6825      	ldr	r5, [r4, #0]
 8012d9a:	1961      	adds	r1, r4, r5
 8012d9c:	428b      	cmp	r3, r1
 8012d9e:	bf04      	itt	eq
 8012da0:	6819      	ldreq	r1, [r3, #0]
 8012da2:	685b      	ldreq	r3, [r3, #4]
 8012da4:	6063      	str	r3, [r4, #4]
 8012da6:	bf04      	itt	eq
 8012da8:	1949      	addeq	r1, r1, r5
 8012daa:	6021      	streq	r1, [r4, #0]
 8012dac:	6054      	str	r4, [r2, #4]
 8012dae:	e7c7      	b.n	8012d40 <_free_r+0x28>
 8012db0:	b003      	add	sp, #12
 8012db2:	bd30      	pop	{r4, r5, pc}
 8012db4:	200017dc 	.word	0x200017dc

08012db8 <_malloc_r>:
 8012db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dba:	1ccd      	adds	r5, r1, #3
 8012dbc:	f025 0503 	bic.w	r5, r5, #3
 8012dc0:	3508      	adds	r5, #8
 8012dc2:	2d0c      	cmp	r5, #12
 8012dc4:	bf38      	it	cc
 8012dc6:	250c      	movcc	r5, #12
 8012dc8:	2d00      	cmp	r5, #0
 8012dca:	4606      	mov	r6, r0
 8012dcc:	db01      	blt.n	8012dd2 <_malloc_r+0x1a>
 8012dce:	42a9      	cmp	r1, r5
 8012dd0:	d903      	bls.n	8012dda <_malloc_r+0x22>
 8012dd2:	230c      	movs	r3, #12
 8012dd4:	6033      	str	r3, [r6, #0]
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dda:	f000 fa0f 	bl	80131fc <__malloc_lock>
 8012dde:	4921      	ldr	r1, [pc, #132]	; (8012e64 <_malloc_r+0xac>)
 8012de0:	680a      	ldr	r2, [r1, #0]
 8012de2:	4614      	mov	r4, r2
 8012de4:	b99c      	cbnz	r4, 8012e0e <_malloc_r+0x56>
 8012de6:	4f20      	ldr	r7, [pc, #128]	; (8012e68 <_malloc_r+0xb0>)
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	b923      	cbnz	r3, 8012df6 <_malloc_r+0x3e>
 8012dec:	4621      	mov	r1, r4
 8012dee:	4630      	mov	r0, r6
 8012df0:	f000 f998 	bl	8013124 <_sbrk_r>
 8012df4:	6038      	str	r0, [r7, #0]
 8012df6:	4629      	mov	r1, r5
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f000 f993 	bl	8013124 <_sbrk_r>
 8012dfe:	1c43      	adds	r3, r0, #1
 8012e00:	d123      	bne.n	8012e4a <_malloc_r+0x92>
 8012e02:	230c      	movs	r3, #12
 8012e04:	6033      	str	r3, [r6, #0]
 8012e06:	4630      	mov	r0, r6
 8012e08:	f000 f9fe 	bl	8013208 <__malloc_unlock>
 8012e0c:	e7e3      	b.n	8012dd6 <_malloc_r+0x1e>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	1b5b      	subs	r3, r3, r5
 8012e12:	d417      	bmi.n	8012e44 <_malloc_r+0x8c>
 8012e14:	2b0b      	cmp	r3, #11
 8012e16:	d903      	bls.n	8012e20 <_malloc_r+0x68>
 8012e18:	6023      	str	r3, [r4, #0]
 8012e1a:	441c      	add	r4, r3
 8012e1c:	6025      	str	r5, [r4, #0]
 8012e1e:	e004      	b.n	8012e2a <_malloc_r+0x72>
 8012e20:	6863      	ldr	r3, [r4, #4]
 8012e22:	42a2      	cmp	r2, r4
 8012e24:	bf0c      	ite	eq
 8012e26:	600b      	streq	r3, [r1, #0]
 8012e28:	6053      	strne	r3, [r2, #4]
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	f000 f9ec 	bl	8013208 <__malloc_unlock>
 8012e30:	f104 000b 	add.w	r0, r4, #11
 8012e34:	1d23      	adds	r3, r4, #4
 8012e36:	f020 0007 	bic.w	r0, r0, #7
 8012e3a:	1ac2      	subs	r2, r0, r3
 8012e3c:	d0cc      	beq.n	8012dd8 <_malloc_r+0x20>
 8012e3e:	1a1b      	subs	r3, r3, r0
 8012e40:	50a3      	str	r3, [r4, r2]
 8012e42:	e7c9      	b.n	8012dd8 <_malloc_r+0x20>
 8012e44:	4622      	mov	r2, r4
 8012e46:	6864      	ldr	r4, [r4, #4]
 8012e48:	e7cc      	b.n	8012de4 <_malloc_r+0x2c>
 8012e4a:	1cc4      	adds	r4, r0, #3
 8012e4c:	f024 0403 	bic.w	r4, r4, #3
 8012e50:	42a0      	cmp	r0, r4
 8012e52:	d0e3      	beq.n	8012e1c <_malloc_r+0x64>
 8012e54:	1a21      	subs	r1, r4, r0
 8012e56:	4630      	mov	r0, r6
 8012e58:	f000 f964 	bl	8013124 <_sbrk_r>
 8012e5c:	3001      	adds	r0, #1
 8012e5e:	d1dd      	bne.n	8012e1c <_malloc_r+0x64>
 8012e60:	e7cf      	b.n	8012e02 <_malloc_r+0x4a>
 8012e62:	bf00      	nop
 8012e64:	200017dc 	.word	0x200017dc
 8012e68:	200017e0 	.word	0x200017e0

08012e6c <__ssputs_r>:
 8012e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e70:	688e      	ldr	r6, [r1, #8]
 8012e72:	429e      	cmp	r6, r3
 8012e74:	4682      	mov	sl, r0
 8012e76:	460c      	mov	r4, r1
 8012e78:	4690      	mov	r8, r2
 8012e7a:	461f      	mov	r7, r3
 8012e7c:	d838      	bhi.n	8012ef0 <__ssputs_r+0x84>
 8012e7e:	898a      	ldrh	r2, [r1, #12]
 8012e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e84:	d032      	beq.n	8012eec <__ssputs_r+0x80>
 8012e86:	6825      	ldr	r5, [r4, #0]
 8012e88:	6909      	ldr	r1, [r1, #16]
 8012e8a:	eba5 0901 	sub.w	r9, r5, r1
 8012e8e:	6965      	ldr	r5, [r4, #20]
 8012e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e98:	3301      	adds	r3, #1
 8012e9a:	444b      	add	r3, r9
 8012e9c:	106d      	asrs	r5, r5, #1
 8012e9e:	429d      	cmp	r5, r3
 8012ea0:	bf38      	it	cc
 8012ea2:	461d      	movcc	r5, r3
 8012ea4:	0553      	lsls	r3, r2, #21
 8012ea6:	d531      	bpl.n	8012f0c <__ssputs_r+0xa0>
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	f7ff ff85 	bl	8012db8 <_malloc_r>
 8012eae:	4606      	mov	r6, r0
 8012eb0:	b950      	cbnz	r0, 8012ec8 <__ssputs_r+0x5c>
 8012eb2:	230c      	movs	r3, #12
 8012eb4:	f8ca 3000 	str.w	r3, [sl]
 8012eb8:	89a3      	ldrh	r3, [r4, #12]
 8012eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ebe:	81a3      	strh	r3, [r4, #12]
 8012ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec8:	6921      	ldr	r1, [r4, #16]
 8012eca:	464a      	mov	r2, r9
 8012ecc:	f7ff fb88 	bl	80125e0 <memcpy>
 8012ed0:	89a3      	ldrh	r3, [r4, #12]
 8012ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eda:	81a3      	strh	r3, [r4, #12]
 8012edc:	6126      	str	r6, [r4, #16]
 8012ede:	6165      	str	r5, [r4, #20]
 8012ee0:	444e      	add	r6, r9
 8012ee2:	eba5 0509 	sub.w	r5, r5, r9
 8012ee6:	6026      	str	r6, [r4, #0]
 8012ee8:	60a5      	str	r5, [r4, #8]
 8012eea:	463e      	mov	r6, r7
 8012eec:	42be      	cmp	r6, r7
 8012eee:	d900      	bls.n	8012ef2 <__ssputs_r+0x86>
 8012ef0:	463e      	mov	r6, r7
 8012ef2:	4632      	mov	r2, r6
 8012ef4:	6820      	ldr	r0, [r4, #0]
 8012ef6:	4641      	mov	r1, r8
 8012ef8:	f000 f966 	bl	80131c8 <memmove>
 8012efc:	68a3      	ldr	r3, [r4, #8]
 8012efe:	6822      	ldr	r2, [r4, #0]
 8012f00:	1b9b      	subs	r3, r3, r6
 8012f02:	4432      	add	r2, r6
 8012f04:	60a3      	str	r3, [r4, #8]
 8012f06:	6022      	str	r2, [r4, #0]
 8012f08:	2000      	movs	r0, #0
 8012f0a:	e7db      	b.n	8012ec4 <__ssputs_r+0x58>
 8012f0c:	462a      	mov	r2, r5
 8012f0e:	f000 f981 	bl	8013214 <_realloc_r>
 8012f12:	4606      	mov	r6, r0
 8012f14:	2800      	cmp	r0, #0
 8012f16:	d1e1      	bne.n	8012edc <__ssputs_r+0x70>
 8012f18:	6921      	ldr	r1, [r4, #16]
 8012f1a:	4650      	mov	r0, sl
 8012f1c:	f7ff fefc 	bl	8012d18 <_free_r>
 8012f20:	e7c7      	b.n	8012eb2 <__ssputs_r+0x46>
	...

08012f24 <_svfiprintf_r>:
 8012f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f28:	4698      	mov	r8, r3
 8012f2a:	898b      	ldrh	r3, [r1, #12]
 8012f2c:	061b      	lsls	r3, r3, #24
 8012f2e:	b09d      	sub	sp, #116	; 0x74
 8012f30:	4607      	mov	r7, r0
 8012f32:	460d      	mov	r5, r1
 8012f34:	4614      	mov	r4, r2
 8012f36:	d50e      	bpl.n	8012f56 <_svfiprintf_r+0x32>
 8012f38:	690b      	ldr	r3, [r1, #16]
 8012f3a:	b963      	cbnz	r3, 8012f56 <_svfiprintf_r+0x32>
 8012f3c:	2140      	movs	r1, #64	; 0x40
 8012f3e:	f7ff ff3b 	bl	8012db8 <_malloc_r>
 8012f42:	6028      	str	r0, [r5, #0]
 8012f44:	6128      	str	r0, [r5, #16]
 8012f46:	b920      	cbnz	r0, 8012f52 <_svfiprintf_r+0x2e>
 8012f48:	230c      	movs	r3, #12
 8012f4a:	603b      	str	r3, [r7, #0]
 8012f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f50:	e0d1      	b.n	80130f6 <_svfiprintf_r+0x1d2>
 8012f52:	2340      	movs	r3, #64	; 0x40
 8012f54:	616b      	str	r3, [r5, #20]
 8012f56:	2300      	movs	r3, #0
 8012f58:	9309      	str	r3, [sp, #36]	; 0x24
 8012f5a:	2320      	movs	r3, #32
 8012f5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f64:	2330      	movs	r3, #48	; 0x30
 8012f66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013110 <_svfiprintf_r+0x1ec>
 8012f6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f6e:	f04f 0901 	mov.w	r9, #1
 8012f72:	4623      	mov	r3, r4
 8012f74:	469a      	mov	sl, r3
 8012f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f7a:	b10a      	cbz	r2, 8012f80 <_svfiprintf_r+0x5c>
 8012f7c:	2a25      	cmp	r2, #37	; 0x25
 8012f7e:	d1f9      	bne.n	8012f74 <_svfiprintf_r+0x50>
 8012f80:	ebba 0b04 	subs.w	fp, sl, r4
 8012f84:	d00b      	beq.n	8012f9e <_svfiprintf_r+0x7a>
 8012f86:	465b      	mov	r3, fp
 8012f88:	4622      	mov	r2, r4
 8012f8a:	4629      	mov	r1, r5
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	f7ff ff6d 	bl	8012e6c <__ssputs_r>
 8012f92:	3001      	adds	r0, #1
 8012f94:	f000 80aa 	beq.w	80130ec <_svfiprintf_r+0x1c8>
 8012f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f9a:	445a      	add	r2, fp
 8012f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8012f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	f000 80a2 	beq.w	80130ec <_svfiprintf_r+0x1c8>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	f04f 32ff 	mov.w	r2, #4294967295
 8012fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012fb2:	f10a 0a01 	add.w	sl, sl, #1
 8012fb6:	9304      	str	r3, [sp, #16]
 8012fb8:	9307      	str	r3, [sp, #28]
 8012fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8012fc0:	4654      	mov	r4, sl
 8012fc2:	2205      	movs	r2, #5
 8012fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fc8:	4851      	ldr	r0, [pc, #324]	; (8013110 <_svfiprintf_r+0x1ec>)
 8012fca:	f7ed f911 	bl	80001f0 <memchr>
 8012fce:	9a04      	ldr	r2, [sp, #16]
 8012fd0:	b9d8      	cbnz	r0, 801300a <_svfiprintf_r+0xe6>
 8012fd2:	06d0      	lsls	r0, r2, #27
 8012fd4:	bf44      	itt	mi
 8012fd6:	2320      	movmi	r3, #32
 8012fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fdc:	0711      	lsls	r1, r2, #28
 8012fde:	bf44      	itt	mi
 8012fe0:	232b      	movmi	r3, #43	; 0x2b
 8012fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8012fea:	2b2a      	cmp	r3, #42	; 0x2a
 8012fec:	d015      	beq.n	801301a <_svfiprintf_r+0xf6>
 8012fee:	9a07      	ldr	r2, [sp, #28]
 8012ff0:	4654      	mov	r4, sl
 8012ff2:	2000      	movs	r0, #0
 8012ff4:	f04f 0c0a 	mov.w	ip, #10
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ffe:	3b30      	subs	r3, #48	; 0x30
 8013000:	2b09      	cmp	r3, #9
 8013002:	d94e      	bls.n	80130a2 <_svfiprintf_r+0x17e>
 8013004:	b1b0      	cbz	r0, 8013034 <_svfiprintf_r+0x110>
 8013006:	9207      	str	r2, [sp, #28]
 8013008:	e014      	b.n	8013034 <_svfiprintf_r+0x110>
 801300a:	eba0 0308 	sub.w	r3, r0, r8
 801300e:	fa09 f303 	lsl.w	r3, r9, r3
 8013012:	4313      	orrs	r3, r2
 8013014:	9304      	str	r3, [sp, #16]
 8013016:	46a2      	mov	sl, r4
 8013018:	e7d2      	b.n	8012fc0 <_svfiprintf_r+0x9c>
 801301a:	9b03      	ldr	r3, [sp, #12]
 801301c:	1d19      	adds	r1, r3, #4
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	9103      	str	r1, [sp, #12]
 8013022:	2b00      	cmp	r3, #0
 8013024:	bfbb      	ittet	lt
 8013026:	425b      	neglt	r3, r3
 8013028:	f042 0202 	orrlt.w	r2, r2, #2
 801302c:	9307      	strge	r3, [sp, #28]
 801302e:	9307      	strlt	r3, [sp, #28]
 8013030:	bfb8      	it	lt
 8013032:	9204      	strlt	r2, [sp, #16]
 8013034:	7823      	ldrb	r3, [r4, #0]
 8013036:	2b2e      	cmp	r3, #46	; 0x2e
 8013038:	d10c      	bne.n	8013054 <_svfiprintf_r+0x130>
 801303a:	7863      	ldrb	r3, [r4, #1]
 801303c:	2b2a      	cmp	r3, #42	; 0x2a
 801303e:	d135      	bne.n	80130ac <_svfiprintf_r+0x188>
 8013040:	9b03      	ldr	r3, [sp, #12]
 8013042:	1d1a      	adds	r2, r3, #4
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	9203      	str	r2, [sp, #12]
 8013048:	2b00      	cmp	r3, #0
 801304a:	bfb8      	it	lt
 801304c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013050:	3402      	adds	r4, #2
 8013052:	9305      	str	r3, [sp, #20]
 8013054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013120 <_svfiprintf_r+0x1fc>
 8013058:	7821      	ldrb	r1, [r4, #0]
 801305a:	2203      	movs	r2, #3
 801305c:	4650      	mov	r0, sl
 801305e:	f7ed f8c7 	bl	80001f0 <memchr>
 8013062:	b140      	cbz	r0, 8013076 <_svfiprintf_r+0x152>
 8013064:	2340      	movs	r3, #64	; 0x40
 8013066:	eba0 000a 	sub.w	r0, r0, sl
 801306a:	fa03 f000 	lsl.w	r0, r3, r0
 801306e:	9b04      	ldr	r3, [sp, #16]
 8013070:	4303      	orrs	r3, r0
 8013072:	3401      	adds	r4, #1
 8013074:	9304      	str	r3, [sp, #16]
 8013076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801307a:	4826      	ldr	r0, [pc, #152]	; (8013114 <_svfiprintf_r+0x1f0>)
 801307c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013080:	2206      	movs	r2, #6
 8013082:	f7ed f8b5 	bl	80001f0 <memchr>
 8013086:	2800      	cmp	r0, #0
 8013088:	d038      	beq.n	80130fc <_svfiprintf_r+0x1d8>
 801308a:	4b23      	ldr	r3, [pc, #140]	; (8013118 <_svfiprintf_r+0x1f4>)
 801308c:	bb1b      	cbnz	r3, 80130d6 <_svfiprintf_r+0x1b2>
 801308e:	9b03      	ldr	r3, [sp, #12]
 8013090:	3307      	adds	r3, #7
 8013092:	f023 0307 	bic.w	r3, r3, #7
 8013096:	3308      	adds	r3, #8
 8013098:	9303      	str	r3, [sp, #12]
 801309a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801309c:	4433      	add	r3, r6
 801309e:	9309      	str	r3, [sp, #36]	; 0x24
 80130a0:	e767      	b.n	8012f72 <_svfiprintf_r+0x4e>
 80130a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80130a6:	460c      	mov	r4, r1
 80130a8:	2001      	movs	r0, #1
 80130aa:	e7a5      	b.n	8012ff8 <_svfiprintf_r+0xd4>
 80130ac:	2300      	movs	r3, #0
 80130ae:	3401      	adds	r4, #1
 80130b0:	9305      	str	r3, [sp, #20]
 80130b2:	4619      	mov	r1, r3
 80130b4:	f04f 0c0a 	mov.w	ip, #10
 80130b8:	4620      	mov	r0, r4
 80130ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130be:	3a30      	subs	r2, #48	; 0x30
 80130c0:	2a09      	cmp	r2, #9
 80130c2:	d903      	bls.n	80130cc <_svfiprintf_r+0x1a8>
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d0c5      	beq.n	8013054 <_svfiprintf_r+0x130>
 80130c8:	9105      	str	r1, [sp, #20]
 80130ca:	e7c3      	b.n	8013054 <_svfiprintf_r+0x130>
 80130cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80130d0:	4604      	mov	r4, r0
 80130d2:	2301      	movs	r3, #1
 80130d4:	e7f0      	b.n	80130b8 <_svfiprintf_r+0x194>
 80130d6:	ab03      	add	r3, sp, #12
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	462a      	mov	r2, r5
 80130dc:	4b0f      	ldr	r3, [pc, #60]	; (801311c <_svfiprintf_r+0x1f8>)
 80130de:	a904      	add	r1, sp, #16
 80130e0:	4638      	mov	r0, r7
 80130e2:	f7fe f80f 	bl	8011104 <_printf_float>
 80130e6:	1c42      	adds	r2, r0, #1
 80130e8:	4606      	mov	r6, r0
 80130ea:	d1d6      	bne.n	801309a <_svfiprintf_r+0x176>
 80130ec:	89ab      	ldrh	r3, [r5, #12]
 80130ee:	065b      	lsls	r3, r3, #25
 80130f0:	f53f af2c 	bmi.w	8012f4c <_svfiprintf_r+0x28>
 80130f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130f6:	b01d      	add	sp, #116	; 0x74
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	ab03      	add	r3, sp, #12
 80130fe:	9300      	str	r3, [sp, #0]
 8013100:	462a      	mov	r2, r5
 8013102:	4b06      	ldr	r3, [pc, #24]	; (801311c <_svfiprintf_r+0x1f8>)
 8013104:	a904      	add	r1, sp, #16
 8013106:	4638      	mov	r0, r7
 8013108:	f7fe faa0 	bl	801164c <_printf_i>
 801310c:	e7eb      	b.n	80130e6 <_svfiprintf_r+0x1c2>
 801310e:	bf00      	nop
 8013110:	0801407c 	.word	0x0801407c
 8013114:	08014086 	.word	0x08014086
 8013118:	08011105 	.word	0x08011105
 801311c:	08012e6d 	.word	0x08012e6d
 8013120:	08014082 	.word	0x08014082

08013124 <_sbrk_r>:
 8013124:	b538      	push	{r3, r4, r5, lr}
 8013126:	4d06      	ldr	r5, [pc, #24]	; (8013140 <_sbrk_r+0x1c>)
 8013128:	2300      	movs	r3, #0
 801312a:	4604      	mov	r4, r0
 801312c:	4608      	mov	r0, r1
 801312e:	602b      	str	r3, [r5, #0]
 8013130:	f000 fe14 	bl	8013d5c <_sbrk>
 8013134:	1c43      	adds	r3, r0, #1
 8013136:	d102      	bne.n	801313e <_sbrk_r+0x1a>
 8013138:	682b      	ldr	r3, [r5, #0]
 801313a:	b103      	cbz	r3, 801313e <_sbrk_r+0x1a>
 801313c:	6023      	str	r3, [r4, #0]
 801313e:	bd38      	pop	{r3, r4, r5, pc}
 8013140:	200039ec 	.word	0x200039ec

08013144 <__assert_func>:
 8013144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013146:	4614      	mov	r4, r2
 8013148:	461a      	mov	r2, r3
 801314a:	4b09      	ldr	r3, [pc, #36]	; (8013170 <__assert_func+0x2c>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	4605      	mov	r5, r0
 8013150:	68d8      	ldr	r0, [r3, #12]
 8013152:	b14c      	cbz	r4, 8013168 <__assert_func+0x24>
 8013154:	4b07      	ldr	r3, [pc, #28]	; (8013174 <__assert_func+0x30>)
 8013156:	9100      	str	r1, [sp, #0]
 8013158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801315c:	4906      	ldr	r1, [pc, #24]	; (8013178 <__assert_func+0x34>)
 801315e:	462b      	mov	r3, r5
 8013160:	f000 f80e 	bl	8013180 <fiprintf>
 8013164:	f000 faa4 	bl	80136b0 <abort>
 8013168:	4b04      	ldr	r3, [pc, #16]	; (801317c <__assert_func+0x38>)
 801316a:	461c      	mov	r4, r3
 801316c:	e7f3      	b.n	8013156 <__assert_func+0x12>
 801316e:	bf00      	nop
 8013170:	20000180 	.word	0x20000180
 8013174:	0801408d 	.word	0x0801408d
 8013178:	0801409a 	.word	0x0801409a
 801317c:	080140c8 	.word	0x080140c8

08013180 <fiprintf>:
 8013180:	b40e      	push	{r1, r2, r3}
 8013182:	b503      	push	{r0, r1, lr}
 8013184:	4601      	mov	r1, r0
 8013186:	ab03      	add	r3, sp, #12
 8013188:	4805      	ldr	r0, [pc, #20]	; (80131a0 <fiprintf+0x20>)
 801318a:	f853 2b04 	ldr.w	r2, [r3], #4
 801318e:	6800      	ldr	r0, [r0, #0]
 8013190:	9301      	str	r3, [sp, #4]
 8013192:	f000 f88f 	bl	80132b4 <_vfiprintf_r>
 8013196:	b002      	add	sp, #8
 8013198:	f85d eb04 	ldr.w	lr, [sp], #4
 801319c:	b003      	add	sp, #12
 801319e:	4770      	bx	lr
 80131a0:	20000180 	.word	0x20000180

080131a4 <__ascii_mbtowc>:
 80131a4:	b082      	sub	sp, #8
 80131a6:	b901      	cbnz	r1, 80131aa <__ascii_mbtowc+0x6>
 80131a8:	a901      	add	r1, sp, #4
 80131aa:	b142      	cbz	r2, 80131be <__ascii_mbtowc+0x1a>
 80131ac:	b14b      	cbz	r3, 80131c2 <__ascii_mbtowc+0x1e>
 80131ae:	7813      	ldrb	r3, [r2, #0]
 80131b0:	600b      	str	r3, [r1, #0]
 80131b2:	7812      	ldrb	r2, [r2, #0]
 80131b4:	1e10      	subs	r0, r2, #0
 80131b6:	bf18      	it	ne
 80131b8:	2001      	movne	r0, #1
 80131ba:	b002      	add	sp, #8
 80131bc:	4770      	bx	lr
 80131be:	4610      	mov	r0, r2
 80131c0:	e7fb      	b.n	80131ba <__ascii_mbtowc+0x16>
 80131c2:	f06f 0001 	mvn.w	r0, #1
 80131c6:	e7f8      	b.n	80131ba <__ascii_mbtowc+0x16>

080131c8 <memmove>:
 80131c8:	4288      	cmp	r0, r1
 80131ca:	b510      	push	{r4, lr}
 80131cc:	eb01 0402 	add.w	r4, r1, r2
 80131d0:	d902      	bls.n	80131d8 <memmove+0x10>
 80131d2:	4284      	cmp	r4, r0
 80131d4:	4623      	mov	r3, r4
 80131d6:	d807      	bhi.n	80131e8 <memmove+0x20>
 80131d8:	1e43      	subs	r3, r0, #1
 80131da:	42a1      	cmp	r1, r4
 80131dc:	d008      	beq.n	80131f0 <memmove+0x28>
 80131de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80131e6:	e7f8      	b.n	80131da <memmove+0x12>
 80131e8:	4402      	add	r2, r0
 80131ea:	4601      	mov	r1, r0
 80131ec:	428a      	cmp	r2, r1
 80131ee:	d100      	bne.n	80131f2 <memmove+0x2a>
 80131f0:	bd10      	pop	{r4, pc}
 80131f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80131f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80131fa:	e7f7      	b.n	80131ec <memmove+0x24>

080131fc <__malloc_lock>:
 80131fc:	4801      	ldr	r0, [pc, #4]	; (8013204 <__malloc_lock+0x8>)
 80131fe:	f000 bc17 	b.w	8013a30 <__retarget_lock_acquire_recursive>
 8013202:	bf00      	nop
 8013204:	200039f4 	.word	0x200039f4

08013208 <__malloc_unlock>:
 8013208:	4801      	ldr	r0, [pc, #4]	; (8013210 <__malloc_unlock+0x8>)
 801320a:	f000 bc12 	b.w	8013a32 <__retarget_lock_release_recursive>
 801320e:	bf00      	nop
 8013210:	200039f4 	.word	0x200039f4

08013214 <_realloc_r>:
 8013214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013216:	4607      	mov	r7, r0
 8013218:	4614      	mov	r4, r2
 801321a:	460e      	mov	r6, r1
 801321c:	b921      	cbnz	r1, 8013228 <_realloc_r+0x14>
 801321e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013222:	4611      	mov	r1, r2
 8013224:	f7ff bdc8 	b.w	8012db8 <_malloc_r>
 8013228:	b922      	cbnz	r2, 8013234 <_realloc_r+0x20>
 801322a:	f7ff fd75 	bl	8012d18 <_free_r>
 801322e:	4625      	mov	r5, r4
 8013230:	4628      	mov	r0, r5
 8013232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013234:	f000 fc62 	bl	8013afc <_malloc_usable_size_r>
 8013238:	42a0      	cmp	r0, r4
 801323a:	d20f      	bcs.n	801325c <_realloc_r+0x48>
 801323c:	4621      	mov	r1, r4
 801323e:	4638      	mov	r0, r7
 8013240:	f7ff fdba 	bl	8012db8 <_malloc_r>
 8013244:	4605      	mov	r5, r0
 8013246:	2800      	cmp	r0, #0
 8013248:	d0f2      	beq.n	8013230 <_realloc_r+0x1c>
 801324a:	4631      	mov	r1, r6
 801324c:	4622      	mov	r2, r4
 801324e:	f7ff f9c7 	bl	80125e0 <memcpy>
 8013252:	4631      	mov	r1, r6
 8013254:	4638      	mov	r0, r7
 8013256:	f7ff fd5f 	bl	8012d18 <_free_r>
 801325a:	e7e9      	b.n	8013230 <_realloc_r+0x1c>
 801325c:	4635      	mov	r5, r6
 801325e:	e7e7      	b.n	8013230 <_realloc_r+0x1c>

08013260 <__sfputc_r>:
 8013260:	6893      	ldr	r3, [r2, #8]
 8013262:	3b01      	subs	r3, #1
 8013264:	2b00      	cmp	r3, #0
 8013266:	b410      	push	{r4}
 8013268:	6093      	str	r3, [r2, #8]
 801326a:	da08      	bge.n	801327e <__sfputc_r+0x1e>
 801326c:	6994      	ldr	r4, [r2, #24]
 801326e:	42a3      	cmp	r3, r4
 8013270:	db01      	blt.n	8013276 <__sfputc_r+0x16>
 8013272:	290a      	cmp	r1, #10
 8013274:	d103      	bne.n	801327e <__sfputc_r+0x1e>
 8013276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801327a:	f000 b94b 	b.w	8013514 <__swbuf_r>
 801327e:	6813      	ldr	r3, [r2, #0]
 8013280:	1c58      	adds	r0, r3, #1
 8013282:	6010      	str	r0, [r2, #0]
 8013284:	7019      	strb	r1, [r3, #0]
 8013286:	4608      	mov	r0, r1
 8013288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801328c:	4770      	bx	lr

0801328e <__sfputs_r>:
 801328e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013290:	4606      	mov	r6, r0
 8013292:	460f      	mov	r7, r1
 8013294:	4614      	mov	r4, r2
 8013296:	18d5      	adds	r5, r2, r3
 8013298:	42ac      	cmp	r4, r5
 801329a:	d101      	bne.n	80132a0 <__sfputs_r+0x12>
 801329c:	2000      	movs	r0, #0
 801329e:	e007      	b.n	80132b0 <__sfputs_r+0x22>
 80132a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a4:	463a      	mov	r2, r7
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7ff ffda 	bl	8013260 <__sfputc_r>
 80132ac:	1c43      	adds	r3, r0, #1
 80132ae:	d1f3      	bne.n	8013298 <__sfputs_r+0xa>
 80132b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080132b4 <_vfiprintf_r>:
 80132b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b8:	460d      	mov	r5, r1
 80132ba:	b09d      	sub	sp, #116	; 0x74
 80132bc:	4614      	mov	r4, r2
 80132be:	4698      	mov	r8, r3
 80132c0:	4606      	mov	r6, r0
 80132c2:	b118      	cbz	r0, 80132cc <_vfiprintf_r+0x18>
 80132c4:	6983      	ldr	r3, [r0, #24]
 80132c6:	b90b      	cbnz	r3, 80132cc <_vfiprintf_r+0x18>
 80132c8:	f000 fb14 	bl	80138f4 <__sinit>
 80132cc:	4b89      	ldr	r3, [pc, #548]	; (80134f4 <_vfiprintf_r+0x240>)
 80132ce:	429d      	cmp	r5, r3
 80132d0:	d11b      	bne.n	801330a <_vfiprintf_r+0x56>
 80132d2:	6875      	ldr	r5, [r6, #4]
 80132d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132d6:	07d9      	lsls	r1, r3, #31
 80132d8:	d405      	bmi.n	80132e6 <_vfiprintf_r+0x32>
 80132da:	89ab      	ldrh	r3, [r5, #12]
 80132dc:	059a      	lsls	r2, r3, #22
 80132de:	d402      	bmi.n	80132e6 <_vfiprintf_r+0x32>
 80132e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132e2:	f000 fba5 	bl	8013a30 <__retarget_lock_acquire_recursive>
 80132e6:	89ab      	ldrh	r3, [r5, #12]
 80132e8:	071b      	lsls	r3, r3, #28
 80132ea:	d501      	bpl.n	80132f0 <_vfiprintf_r+0x3c>
 80132ec:	692b      	ldr	r3, [r5, #16]
 80132ee:	b9eb      	cbnz	r3, 801332c <_vfiprintf_r+0x78>
 80132f0:	4629      	mov	r1, r5
 80132f2:	4630      	mov	r0, r6
 80132f4:	f000 f96e 	bl	80135d4 <__swsetup_r>
 80132f8:	b1c0      	cbz	r0, 801332c <_vfiprintf_r+0x78>
 80132fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132fc:	07dc      	lsls	r4, r3, #31
 80132fe:	d50e      	bpl.n	801331e <_vfiprintf_r+0x6a>
 8013300:	f04f 30ff 	mov.w	r0, #4294967295
 8013304:	b01d      	add	sp, #116	; 0x74
 8013306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801330a:	4b7b      	ldr	r3, [pc, #492]	; (80134f8 <_vfiprintf_r+0x244>)
 801330c:	429d      	cmp	r5, r3
 801330e:	d101      	bne.n	8013314 <_vfiprintf_r+0x60>
 8013310:	68b5      	ldr	r5, [r6, #8]
 8013312:	e7df      	b.n	80132d4 <_vfiprintf_r+0x20>
 8013314:	4b79      	ldr	r3, [pc, #484]	; (80134fc <_vfiprintf_r+0x248>)
 8013316:	429d      	cmp	r5, r3
 8013318:	bf08      	it	eq
 801331a:	68f5      	ldreq	r5, [r6, #12]
 801331c:	e7da      	b.n	80132d4 <_vfiprintf_r+0x20>
 801331e:	89ab      	ldrh	r3, [r5, #12]
 8013320:	0598      	lsls	r0, r3, #22
 8013322:	d4ed      	bmi.n	8013300 <_vfiprintf_r+0x4c>
 8013324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013326:	f000 fb84 	bl	8013a32 <__retarget_lock_release_recursive>
 801332a:	e7e9      	b.n	8013300 <_vfiprintf_r+0x4c>
 801332c:	2300      	movs	r3, #0
 801332e:	9309      	str	r3, [sp, #36]	; 0x24
 8013330:	2320      	movs	r3, #32
 8013332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013336:	f8cd 800c 	str.w	r8, [sp, #12]
 801333a:	2330      	movs	r3, #48	; 0x30
 801333c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013500 <_vfiprintf_r+0x24c>
 8013340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013344:	f04f 0901 	mov.w	r9, #1
 8013348:	4623      	mov	r3, r4
 801334a:	469a      	mov	sl, r3
 801334c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013350:	b10a      	cbz	r2, 8013356 <_vfiprintf_r+0xa2>
 8013352:	2a25      	cmp	r2, #37	; 0x25
 8013354:	d1f9      	bne.n	801334a <_vfiprintf_r+0x96>
 8013356:	ebba 0b04 	subs.w	fp, sl, r4
 801335a:	d00b      	beq.n	8013374 <_vfiprintf_r+0xc0>
 801335c:	465b      	mov	r3, fp
 801335e:	4622      	mov	r2, r4
 8013360:	4629      	mov	r1, r5
 8013362:	4630      	mov	r0, r6
 8013364:	f7ff ff93 	bl	801328e <__sfputs_r>
 8013368:	3001      	adds	r0, #1
 801336a:	f000 80aa 	beq.w	80134c2 <_vfiprintf_r+0x20e>
 801336e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013370:	445a      	add	r2, fp
 8013372:	9209      	str	r2, [sp, #36]	; 0x24
 8013374:	f89a 3000 	ldrb.w	r3, [sl]
 8013378:	2b00      	cmp	r3, #0
 801337a:	f000 80a2 	beq.w	80134c2 <_vfiprintf_r+0x20e>
 801337e:	2300      	movs	r3, #0
 8013380:	f04f 32ff 	mov.w	r2, #4294967295
 8013384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013388:	f10a 0a01 	add.w	sl, sl, #1
 801338c:	9304      	str	r3, [sp, #16]
 801338e:	9307      	str	r3, [sp, #28]
 8013390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013394:	931a      	str	r3, [sp, #104]	; 0x68
 8013396:	4654      	mov	r4, sl
 8013398:	2205      	movs	r2, #5
 801339a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801339e:	4858      	ldr	r0, [pc, #352]	; (8013500 <_vfiprintf_r+0x24c>)
 80133a0:	f7ec ff26 	bl	80001f0 <memchr>
 80133a4:	9a04      	ldr	r2, [sp, #16]
 80133a6:	b9d8      	cbnz	r0, 80133e0 <_vfiprintf_r+0x12c>
 80133a8:	06d1      	lsls	r1, r2, #27
 80133aa:	bf44      	itt	mi
 80133ac:	2320      	movmi	r3, #32
 80133ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133b2:	0713      	lsls	r3, r2, #28
 80133b4:	bf44      	itt	mi
 80133b6:	232b      	movmi	r3, #43	; 0x2b
 80133b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133bc:	f89a 3000 	ldrb.w	r3, [sl]
 80133c0:	2b2a      	cmp	r3, #42	; 0x2a
 80133c2:	d015      	beq.n	80133f0 <_vfiprintf_r+0x13c>
 80133c4:	9a07      	ldr	r2, [sp, #28]
 80133c6:	4654      	mov	r4, sl
 80133c8:	2000      	movs	r0, #0
 80133ca:	f04f 0c0a 	mov.w	ip, #10
 80133ce:	4621      	mov	r1, r4
 80133d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133d4:	3b30      	subs	r3, #48	; 0x30
 80133d6:	2b09      	cmp	r3, #9
 80133d8:	d94e      	bls.n	8013478 <_vfiprintf_r+0x1c4>
 80133da:	b1b0      	cbz	r0, 801340a <_vfiprintf_r+0x156>
 80133dc:	9207      	str	r2, [sp, #28]
 80133de:	e014      	b.n	801340a <_vfiprintf_r+0x156>
 80133e0:	eba0 0308 	sub.w	r3, r0, r8
 80133e4:	fa09 f303 	lsl.w	r3, r9, r3
 80133e8:	4313      	orrs	r3, r2
 80133ea:	9304      	str	r3, [sp, #16]
 80133ec:	46a2      	mov	sl, r4
 80133ee:	e7d2      	b.n	8013396 <_vfiprintf_r+0xe2>
 80133f0:	9b03      	ldr	r3, [sp, #12]
 80133f2:	1d19      	adds	r1, r3, #4
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	9103      	str	r1, [sp, #12]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	bfbb      	ittet	lt
 80133fc:	425b      	neglt	r3, r3
 80133fe:	f042 0202 	orrlt.w	r2, r2, #2
 8013402:	9307      	strge	r3, [sp, #28]
 8013404:	9307      	strlt	r3, [sp, #28]
 8013406:	bfb8      	it	lt
 8013408:	9204      	strlt	r2, [sp, #16]
 801340a:	7823      	ldrb	r3, [r4, #0]
 801340c:	2b2e      	cmp	r3, #46	; 0x2e
 801340e:	d10c      	bne.n	801342a <_vfiprintf_r+0x176>
 8013410:	7863      	ldrb	r3, [r4, #1]
 8013412:	2b2a      	cmp	r3, #42	; 0x2a
 8013414:	d135      	bne.n	8013482 <_vfiprintf_r+0x1ce>
 8013416:	9b03      	ldr	r3, [sp, #12]
 8013418:	1d1a      	adds	r2, r3, #4
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	9203      	str	r2, [sp, #12]
 801341e:	2b00      	cmp	r3, #0
 8013420:	bfb8      	it	lt
 8013422:	f04f 33ff 	movlt.w	r3, #4294967295
 8013426:	3402      	adds	r4, #2
 8013428:	9305      	str	r3, [sp, #20]
 801342a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013510 <_vfiprintf_r+0x25c>
 801342e:	7821      	ldrb	r1, [r4, #0]
 8013430:	2203      	movs	r2, #3
 8013432:	4650      	mov	r0, sl
 8013434:	f7ec fedc 	bl	80001f0 <memchr>
 8013438:	b140      	cbz	r0, 801344c <_vfiprintf_r+0x198>
 801343a:	2340      	movs	r3, #64	; 0x40
 801343c:	eba0 000a 	sub.w	r0, r0, sl
 8013440:	fa03 f000 	lsl.w	r0, r3, r0
 8013444:	9b04      	ldr	r3, [sp, #16]
 8013446:	4303      	orrs	r3, r0
 8013448:	3401      	adds	r4, #1
 801344a:	9304      	str	r3, [sp, #16]
 801344c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013450:	482c      	ldr	r0, [pc, #176]	; (8013504 <_vfiprintf_r+0x250>)
 8013452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013456:	2206      	movs	r2, #6
 8013458:	f7ec feca 	bl	80001f0 <memchr>
 801345c:	2800      	cmp	r0, #0
 801345e:	d03f      	beq.n	80134e0 <_vfiprintf_r+0x22c>
 8013460:	4b29      	ldr	r3, [pc, #164]	; (8013508 <_vfiprintf_r+0x254>)
 8013462:	bb1b      	cbnz	r3, 80134ac <_vfiprintf_r+0x1f8>
 8013464:	9b03      	ldr	r3, [sp, #12]
 8013466:	3307      	adds	r3, #7
 8013468:	f023 0307 	bic.w	r3, r3, #7
 801346c:	3308      	adds	r3, #8
 801346e:	9303      	str	r3, [sp, #12]
 8013470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013472:	443b      	add	r3, r7
 8013474:	9309      	str	r3, [sp, #36]	; 0x24
 8013476:	e767      	b.n	8013348 <_vfiprintf_r+0x94>
 8013478:	fb0c 3202 	mla	r2, ip, r2, r3
 801347c:	460c      	mov	r4, r1
 801347e:	2001      	movs	r0, #1
 8013480:	e7a5      	b.n	80133ce <_vfiprintf_r+0x11a>
 8013482:	2300      	movs	r3, #0
 8013484:	3401      	adds	r4, #1
 8013486:	9305      	str	r3, [sp, #20]
 8013488:	4619      	mov	r1, r3
 801348a:	f04f 0c0a 	mov.w	ip, #10
 801348e:	4620      	mov	r0, r4
 8013490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013494:	3a30      	subs	r2, #48	; 0x30
 8013496:	2a09      	cmp	r2, #9
 8013498:	d903      	bls.n	80134a2 <_vfiprintf_r+0x1ee>
 801349a:	2b00      	cmp	r3, #0
 801349c:	d0c5      	beq.n	801342a <_vfiprintf_r+0x176>
 801349e:	9105      	str	r1, [sp, #20]
 80134a0:	e7c3      	b.n	801342a <_vfiprintf_r+0x176>
 80134a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80134a6:	4604      	mov	r4, r0
 80134a8:	2301      	movs	r3, #1
 80134aa:	e7f0      	b.n	801348e <_vfiprintf_r+0x1da>
 80134ac:	ab03      	add	r3, sp, #12
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	462a      	mov	r2, r5
 80134b2:	4b16      	ldr	r3, [pc, #88]	; (801350c <_vfiprintf_r+0x258>)
 80134b4:	a904      	add	r1, sp, #16
 80134b6:	4630      	mov	r0, r6
 80134b8:	f7fd fe24 	bl	8011104 <_printf_float>
 80134bc:	4607      	mov	r7, r0
 80134be:	1c78      	adds	r0, r7, #1
 80134c0:	d1d6      	bne.n	8013470 <_vfiprintf_r+0x1bc>
 80134c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134c4:	07d9      	lsls	r1, r3, #31
 80134c6:	d405      	bmi.n	80134d4 <_vfiprintf_r+0x220>
 80134c8:	89ab      	ldrh	r3, [r5, #12]
 80134ca:	059a      	lsls	r2, r3, #22
 80134cc:	d402      	bmi.n	80134d4 <_vfiprintf_r+0x220>
 80134ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134d0:	f000 faaf 	bl	8013a32 <__retarget_lock_release_recursive>
 80134d4:	89ab      	ldrh	r3, [r5, #12]
 80134d6:	065b      	lsls	r3, r3, #25
 80134d8:	f53f af12 	bmi.w	8013300 <_vfiprintf_r+0x4c>
 80134dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134de:	e711      	b.n	8013304 <_vfiprintf_r+0x50>
 80134e0:	ab03      	add	r3, sp, #12
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	462a      	mov	r2, r5
 80134e6:	4b09      	ldr	r3, [pc, #36]	; (801350c <_vfiprintf_r+0x258>)
 80134e8:	a904      	add	r1, sp, #16
 80134ea:	4630      	mov	r0, r6
 80134ec:	f7fe f8ae 	bl	801164c <_printf_i>
 80134f0:	e7e4      	b.n	80134bc <_vfiprintf_r+0x208>
 80134f2:	bf00      	nop
 80134f4:	080141f4 	.word	0x080141f4
 80134f8:	08014214 	.word	0x08014214
 80134fc:	080141d4 	.word	0x080141d4
 8013500:	0801407c 	.word	0x0801407c
 8013504:	08014086 	.word	0x08014086
 8013508:	08011105 	.word	0x08011105
 801350c:	0801328f 	.word	0x0801328f
 8013510:	08014082 	.word	0x08014082

08013514 <__swbuf_r>:
 8013514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013516:	460e      	mov	r6, r1
 8013518:	4614      	mov	r4, r2
 801351a:	4605      	mov	r5, r0
 801351c:	b118      	cbz	r0, 8013526 <__swbuf_r+0x12>
 801351e:	6983      	ldr	r3, [r0, #24]
 8013520:	b90b      	cbnz	r3, 8013526 <__swbuf_r+0x12>
 8013522:	f000 f9e7 	bl	80138f4 <__sinit>
 8013526:	4b21      	ldr	r3, [pc, #132]	; (80135ac <__swbuf_r+0x98>)
 8013528:	429c      	cmp	r4, r3
 801352a:	d12b      	bne.n	8013584 <__swbuf_r+0x70>
 801352c:	686c      	ldr	r4, [r5, #4]
 801352e:	69a3      	ldr	r3, [r4, #24]
 8013530:	60a3      	str	r3, [r4, #8]
 8013532:	89a3      	ldrh	r3, [r4, #12]
 8013534:	071a      	lsls	r2, r3, #28
 8013536:	d52f      	bpl.n	8013598 <__swbuf_r+0x84>
 8013538:	6923      	ldr	r3, [r4, #16]
 801353a:	b36b      	cbz	r3, 8013598 <__swbuf_r+0x84>
 801353c:	6923      	ldr	r3, [r4, #16]
 801353e:	6820      	ldr	r0, [r4, #0]
 8013540:	1ac0      	subs	r0, r0, r3
 8013542:	6963      	ldr	r3, [r4, #20]
 8013544:	b2f6      	uxtb	r6, r6
 8013546:	4283      	cmp	r3, r0
 8013548:	4637      	mov	r7, r6
 801354a:	dc04      	bgt.n	8013556 <__swbuf_r+0x42>
 801354c:	4621      	mov	r1, r4
 801354e:	4628      	mov	r0, r5
 8013550:	f000 f93c 	bl	80137cc <_fflush_r>
 8013554:	bb30      	cbnz	r0, 80135a4 <__swbuf_r+0x90>
 8013556:	68a3      	ldr	r3, [r4, #8]
 8013558:	3b01      	subs	r3, #1
 801355a:	60a3      	str	r3, [r4, #8]
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	1c5a      	adds	r2, r3, #1
 8013560:	6022      	str	r2, [r4, #0]
 8013562:	701e      	strb	r6, [r3, #0]
 8013564:	6963      	ldr	r3, [r4, #20]
 8013566:	3001      	adds	r0, #1
 8013568:	4283      	cmp	r3, r0
 801356a:	d004      	beq.n	8013576 <__swbuf_r+0x62>
 801356c:	89a3      	ldrh	r3, [r4, #12]
 801356e:	07db      	lsls	r3, r3, #31
 8013570:	d506      	bpl.n	8013580 <__swbuf_r+0x6c>
 8013572:	2e0a      	cmp	r6, #10
 8013574:	d104      	bne.n	8013580 <__swbuf_r+0x6c>
 8013576:	4621      	mov	r1, r4
 8013578:	4628      	mov	r0, r5
 801357a:	f000 f927 	bl	80137cc <_fflush_r>
 801357e:	b988      	cbnz	r0, 80135a4 <__swbuf_r+0x90>
 8013580:	4638      	mov	r0, r7
 8013582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013584:	4b0a      	ldr	r3, [pc, #40]	; (80135b0 <__swbuf_r+0x9c>)
 8013586:	429c      	cmp	r4, r3
 8013588:	d101      	bne.n	801358e <__swbuf_r+0x7a>
 801358a:	68ac      	ldr	r4, [r5, #8]
 801358c:	e7cf      	b.n	801352e <__swbuf_r+0x1a>
 801358e:	4b09      	ldr	r3, [pc, #36]	; (80135b4 <__swbuf_r+0xa0>)
 8013590:	429c      	cmp	r4, r3
 8013592:	bf08      	it	eq
 8013594:	68ec      	ldreq	r4, [r5, #12]
 8013596:	e7ca      	b.n	801352e <__swbuf_r+0x1a>
 8013598:	4621      	mov	r1, r4
 801359a:	4628      	mov	r0, r5
 801359c:	f000 f81a 	bl	80135d4 <__swsetup_r>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	d0cb      	beq.n	801353c <__swbuf_r+0x28>
 80135a4:	f04f 37ff 	mov.w	r7, #4294967295
 80135a8:	e7ea      	b.n	8013580 <__swbuf_r+0x6c>
 80135aa:	bf00      	nop
 80135ac:	080141f4 	.word	0x080141f4
 80135b0:	08014214 	.word	0x08014214
 80135b4:	080141d4 	.word	0x080141d4

080135b8 <__ascii_wctomb>:
 80135b8:	b149      	cbz	r1, 80135ce <__ascii_wctomb+0x16>
 80135ba:	2aff      	cmp	r2, #255	; 0xff
 80135bc:	bf85      	ittet	hi
 80135be:	238a      	movhi	r3, #138	; 0x8a
 80135c0:	6003      	strhi	r3, [r0, #0]
 80135c2:	700a      	strbls	r2, [r1, #0]
 80135c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80135c8:	bf98      	it	ls
 80135ca:	2001      	movls	r0, #1
 80135cc:	4770      	bx	lr
 80135ce:	4608      	mov	r0, r1
 80135d0:	4770      	bx	lr
	...

080135d4 <__swsetup_r>:
 80135d4:	4b32      	ldr	r3, [pc, #200]	; (80136a0 <__swsetup_r+0xcc>)
 80135d6:	b570      	push	{r4, r5, r6, lr}
 80135d8:	681d      	ldr	r5, [r3, #0]
 80135da:	4606      	mov	r6, r0
 80135dc:	460c      	mov	r4, r1
 80135de:	b125      	cbz	r5, 80135ea <__swsetup_r+0x16>
 80135e0:	69ab      	ldr	r3, [r5, #24]
 80135e2:	b913      	cbnz	r3, 80135ea <__swsetup_r+0x16>
 80135e4:	4628      	mov	r0, r5
 80135e6:	f000 f985 	bl	80138f4 <__sinit>
 80135ea:	4b2e      	ldr	r3, [pc, #184]	; (80136a4 <__swsetup_r+0xd0>)
 80135ec:	429c      	cmp	r4, r3
 80135ee:	d10f      	bne.n	8013610 <__swsetup_r+0x3c>
 80135f0:	686c      	ldr	r4, [r5, #4]
 80135f2:	89a3      	ldrh	r3, [r4, #12]
 80135f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135f8:	0719      	lsls	r1, r3, #28
 80135fa:	d42c      	bmi.n	8013656 <__swsetup_r+0x82>
 80135fc:	06dd      	lsls	r5, r3, #27
 80135fe:	d411      	bmi.n	8013624 <__swsetup_r+0x50>
 8013600:	2309      	movs	r3, #9
 8013602:	6033      	str	r3, [r6, #0]
 8013604:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013608:	81a3      	strh	r3, [r4, #12]
 801360a:	f04f 30ff 	mov.w	r0, #4294967295
 801360e:	e03e      	b.n	801368e <__swsetup_r+0xba>
 8013610:	4b25      	ldr	r3, [pc, #148]	; (80136a8 <__swsetup_r+0xd4>)
 8013612:	429c      	cmp	r4, r3
 8013614:	d101      	bne.n	801361a <__swsetup_r+0x46>
 8013616:	68ac      	ldr	r4, [r5, #8]
 8013618:	e7eb      	b.n	80135f2 <__swsetup_r+0x1e>
 801361a:	4b24      	ldr	r3, [pc, #144]	; (80136ac <__swsetup_r+0xd8>)
 801361c:	429c      	cmp	r4, r3
 801361e:	bf08      	it	eq
 8013620:	68ec      	ldreq	r4, [r5, #12]
 8013622:	e7e6      	b.n	80135f2 <__swsetup_r+0x1e>
 8013624:	0758      	lsls	r0, r3, #29
 8013626:	d512      	bpl.n	801364e <__swsetup_r+0x7a>
 8013628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801362a:	b141      	cbz	r1, 801363e <__swsetup_r+0x6a>
 801362c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013630:	4299      	cmp	r1, r3
 8013632:	d002      	beq.n	801363a <__swsetup_r+0x66>
 8013634:	4630      	mov	r0, r6
 8013636:	f7ff fb6f 	bl	8012d18 <_free_r>
 801363a:	2300      	movs	r3, #0
 801363c:	6363      	str	r3, [r4, #52]	; 0x34
 801363e:	89a3      	ldrh	r3, [r4, #12]
 8013640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013644:	81a3      	strh	r3, [r4, #12]
 8013646:	2300      	movs	r3, #0
 8013648:	6063      	str	r3, [r4, #4]
 801364a:	6923      	ldr	r3, [r4, #16]
 801364c:	6023      	str	r3, [r4, #0]
 801364e:	89a3      	ldrh	r3, [r4, #12]
 8013650:	f043 0308 	orr.w	r3, r3, #8
 8013654:	81a3      	strh	r3, [r4, #12]
 8013656:	6923      	ldr	r3, [r4, #16]
 8013658:	b94b      	cbnz	r3, 801366e <__swsetup_r+0x9a>
 801365a:	89a3      	ldrh	r3, [r4, #12]
 801365c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013664:	d003      	beq.n	801366e <__swsetup_r+0x9a>
 8013666:	4621      	mov	r1, r4
 8013668:	4630      	mov	r0, r6
 801366a:	f000 fa07 	bl	8013a7c <__smakebuf_r>
 801366e:	89a0      	ldrh	r0, [r4, #12]
 8013670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013674:	f010 0301 	ands.w	r3, r0, #1
 8013678:	d00a      	beq.n	8013690 <__swsetup_r+0xbc>
 801367a:	2300      	movs	r3, #0
 801367c:	60a3      	str	r3, [r4, #8]
 801367e:	6963      	ldr	r3, [r4, #20]
 8013680:	425b      	negs	r3, r3
 8013682:	61a3      	str	r3, [r4, #24]
 8013684:	6923      	ldr	r3, [r4, #16]
 8013686:	b943      	cbnz	r3, 801369a <__swsetup_r+0xc6>
 8013688:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801368c:	d1ba      	bne.n	8013604 <__swsetup_r+0x30>
 801368e:	bd70      	pop	{r4, r5, r6, pc}
 8013690:	0781      	lsls	r1, r0, #30
 8013692:	bf58      	it	pl
 8013694:	6963      	ldrpl	r3, [r4, #20]
 8013696:	60a3      	str	r3, [r4, #8]
 8013698:	e7f4      	b.n	8013684 <__swsetup_r+0xb0>
 801369a:	2000      	movs	r0, #0
 801369c:	e7f7      	b.n	801368e <__swsetup_r+0xba>
 801369e:	bf00      	nop
 80136a0:	20000180 	.word	0x20000180
 80136a4:	080141f4 	.word	0x080141f4
 80136a8:	08014214 	.word	0x08014214
 80136ac:	080141d4 	.word	0x080141d4

080136b0 <abort>:
 80136b0:	b508      	push	{r3, lr}
 80136b2:	2006      	movs	r0, #6
 80136b4:	f000 fa52 	bl	8013b5c <raise>
 80136b8:	2001      	movs	r0, #1
 80136ba:	f000 fb65 	bl	8013d88 <_exit>
	...

080136c0 <__sflush_r>:
 80136c0:	898a      	ldrh	r2, [r1, #12]
 80136c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c6:	4605      	mov	r5, r0
 80136c8:	0710      	lsls	r0, r2, #28
 80136ca:	460c      	mov	r4, r1
 80136cc:	d458      	bmi.n	8013780 <__sflush_r+0xc0>
 80136ce:	684b      	ldr	r3, [r1, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	dc05      	bgt.n	80136e0 <__sflush_r+0x20>
 80136d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	dc02      	bgt.n	80136e0 <__sflush_r+0x20>
 80136da:	2000      	movs	r0, #0
 80136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80136e2:	2e00      	cmp	r6, #0
 80136e4:	d0f9      	beq.n	80136da <__sflush_r+0x1a>
 80136e6:	2300      	movs	r3, #0
 80136e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80136ec:	682f      	ldr	r7, [r5, #0]
 80136ee:	602b      	str	r3, [r5, #0]
 80136f0:	d032      	beq.n	8013758 <__sflush_r+0x98>
 80136f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80136f4:	89a3      	ldrh	r3, [r4, #12]
 80136f6:	075a      	lsls	r2, r3, #29
 80136f8:	d505      	bpl.n	8013706 <__sflush_r+0x46>
 80136fa:	6863      	ldr	r3, [r4, #4]
 80136fc:	1ac0      	subs	r0, r0, r3
 80136fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013700:	b10b      	cbz	r3, 8013706 <__sflush_r+0x46>
 8013702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013704:	1ac0      	subs	r0, r0, r3
 8013706:	2300      	movs	r3, #0
 8013708:	4602      	mov	r2, r0
 801370a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801370c:	6a21      	ldr	r1, [r4, #32]
 801370e:	4628      	mov	r0, r5
 8013710:	47b0      	blx	r6
 8013712:	1c43      	adds	r3, r0, #1
 8013714:	89a3      	ldrh	r3, [r4, #12]
 8013716:	d106      	bne.n	8013726 <__sflush_r+0x66>
 8013718:	6829      	ldr	r1, [r5, #0]
 801371a:	291d      	cmp	r1, #29
 801371c:	d82c      	bhi.n	8013778 <__sflush_r+0xb8>
 801371e:	4a2a      	ldr	r2, [pc, #168]	; (80137c8 <__sflush_r+0x108>)
 8013720:	40ca      	lsrs	r2, r1
 8013722:	07d6      	lsls	r6, r2, #31
 8013724:	d528      	bpl.n	8013778 <__sflush_r+0xb8>
 8013726:	2200      	movs	r2, #0
 8013728:	6062      	str	r2, [r4, #4]
 801372a:	04d9      	lsls	r1, r3, #19
 801372c:	6922      	ldr	r2, [r4, #16]
 801372e:	6022      	str	r2, [r4, #0]
 8013730:	d504      	bpl.n	801373c <__sflush_r+0x7c>
 8013732:	1c42      	adds	r2, r0, #1
 8013734:	d101      	bne.n	801373a <__sflush_r+0x7a>
 8013736:	682b      	ldr	r3, [r5, #0]
 8013738:	b903      	cbnz	r3, 801373c <__sflush_r+0x7c>
 801373a:	6560      	str	r0, [r4, #84]	; 0x54
 801373c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801373e:	602f      	str	r7, [r5, #0]
 8013740:	2900      	cmp	r1, #0
 8013742:	d0ca      	beq.n	80136da <__sflush_r+0x1a>
 8013744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013748:	4299      	cmp	r1, r3
 801374a:	d002      	beq.n	8013752 <__sflush_r+0x92>
 801374c:	4628      	mov	r0, r5
 801374e:	f7ff fae3 	bl	8012d18 <_free_r>
 8013752:	2000      	movs	r0, #0
 8013754:	6360      	str	r0, [r4, #52]	; 0x34
 8013756:	e7c1      	b.n	80136dc <__sflush_r+0x1c>
 8013758:	6a21      	ldr	r1, [r4, #32]
 801375a:	2301      	movs	r3, #1
 801375c:	4628      	mov	r0, r5
 801375e:	47b0      	blx	r6
 8013760:	1c41      	adds	r1, r0, #1
 8013762:	d1c7      	bne.n	80136f4 <__sflush_r+0x34>
 8013764:	682b      	ldr	r3, [r5, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d0c4      	beq.n	80136f4 <__sflush_r+0x34>
 801376a:	2b1d      	cmp	r3, #29
 801376c:	d001      	beq.n	8013772 <__sflush_r+0xb2>
 801376e:	2b16      	cmp	r3, #22
 8013770:	d101      	bne.n	8013776 <__sflush_r+0xb6>
 8013772:	602f      	str	r7, [r5, #0]
 8013774:	e7b1      	b.n	80136da <__sflush_r+0x1a>
 8013776:	89a3      	ldrh	r3, [r4, #12]
 8013778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801377c:	81a3      	strh	r3, [r4, #12]
 801377e:	e7ad      	b.n	80136dc <__sflush_r+0x1c>
 8013780:	690f      	ldr	r7, [r1, #16]
 8013782:	2f00      	cmp	r7, #0
 8013784:	d0a9      	beq.n	80136da <__sflush_r+0x1a>
 8013786:	0793      	lsls	r3, r2, #30
 8013788:	680e      	ldr	r6, [r1, #0]
 801378a:	bf08      	it	eq
 801378c:	694b      	ldreq	r3, [r1, #20]
 801378e:	600f      	str	r7, [r1, #0]
 8013790:	bf18      	it	ne
 8013792:	2300      	movne	r3, #0
 8013794:	eba6 0807 	sub.w	r8, r6, r7
 8013798:	608b      	str	r3, [r1, #8]
 801379a:	f1b8 0f00 	cmp.w	r8, #0
 801379e:	dd9c      	ble.n	80136da <__sflush_r+0x1a>
 80137a0:	6a21      	ldr	r1, [r4, #32]
 80137a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80137a4:	4643      	mov	r3, r8
 80137a6:	463a      	mov	r2, r7
 80137a8:	4628      	mov	r0, r5
 80137aa:	47b0      	blx	r6
 80137ac:	2800      	cmp	r0, #0
 80137ae:	dc06      	bgt.n	80137be <__sflush_r+0xfe>
 80137b0:	89a3      	ldrh	r3, [r4, #12]
 80137b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137b6:	81a3      	strh	r3, [r4, #12]
 80137b8:	f04f 30ff 	mov.w	r0, #4294967295
 80137bc:	e78e      	b.n	80136dc <__sflush_r+0x1c>
 80137be:	4407      	add	r7, r0
 80137c0:	eba8 0800 	sub.w	r8, r8, r0
 80137c4:	e7e9      	b.n	801379a <__sflush_r+0xda>
 80137c6:	bf00      	nop
 80137c8:	20400001 	.word	0x20400001

080137cc <_fflush_r>:
 80137cc:	b538      	push	{r3, r4, r5, lr}
 80137ce:	690b      	ldr	r3, [r1, #16]
 80137d0:	4605      	mov	r5, r0
 80137d2:	460c      	mov	r4, r1
 80137d4:	b913      	cbnz	r3, 80137dc <_fflush_r+0x10>
 80137d6:	2500      	movs	r5, #0
 80137d8:	4628      	mov	r0, r5
 80137da:	bd38      	pop	{r3, r4, r5, pc}
 80137dc:	b118      	cbz	r0, 80137e6 <_fflush_r+0x1a>
 80137de:	6983      	ldr	r3, [r0, #24]
 80137e0:	b90b      	cbnz	r3, 80137e6 <_fflush_r+0x1a>
 80137e2:	f000 f887 	bl	80138f4 <__sinit>
 80137e6:	4b14      	ldr	r3, [pc, #80]	; (8013838 <_fflush_r+0x6c>)
 80137e8:	429c      	cmp	r4, r3
 80137ea:	d11b      	bne.n	8013824 <_fflush_r+0x58>
 80137ec:	686c      	ldr	r4, [r5, #4]
 80137ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d0ef      	beq.n	80137d6 <_fflush_r+0xa>
 80137f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80137f8:	07d0      	lsls	r0, r2, #31
 80137fa:	d404      	bmi.n	8013806 <_fflush_r+0x3a>
 80137fc:	0599      	lsls	r1, r3, #22
 80137fe:	d402      	bmi.n	8013806 <_fflush_r+0x3a>
 8013800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013802:	f000 f915 	bl	8013a30 <__retarget_lock_acquire_recursive>
 8013806:	4628      	mov	r0, r5
 8013808:	4621      	mov	r1, r4
 801380a:	f7ff ff59 	bl	80136c0 <__sflush_r>
 801380e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013810:	07da      	lsls	r2, r3, #31
 8013812:	4605      	mov	r5, r0
 8013814:	d4e0      	bmi.n	80137d8 <_fflush_r+0xc>
 8013816:	89a3      	ldrh	r3, [r4, #12]
 8013818:	059b      	lsls	r3, r3, #22
 801381a:	d4dd      	bmi.n	80137d8 <_fflush_r+0xc>
 801381c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801381e:	f000 f908 	bl	8013a32 <__retarget_lock_release_recursive>
 8013822:	e7d9      	b.n	80137d8 <_fflush_r+0xc>
 8013824:	4b05      	ldr	r3, [pc, #20]	; (801383c <_fflush_r+0x70>)
 8013826:	429c      	cmp	r4, r3
 8013828:	d101      	bne.n	801382e <_fflush_r+0x62>
 801382a:	68ac      	ldr	r4, [r5, #8]
 801382c:	e7df      	b.n	80137ee <_fflush_r+0x22>
 801382e:	4b04      	ldr	r3, [pc, #16]	; (8013840 <_fflush_r+0x74>)
 8013830:	429c      	cmp	r4, r3
 8013832:	bf08      	it	eq
 8013834:	68ec      	ldreq	r4, [r5, #12]
 8013836:	e7da      	b.n	80137ee <_fflush_r+0x22>
 8013838:	080141f4 	.word	0x080141f4
 801383c:	08014214 	.word	0x08014214
 8013840:	080141d4 	.word	0x080141d4

08013844 <std>:
 8013844:	2300      	movs	r3, #0
 8013846:	b510      	push	{r4, lr}
 8013848:	4604      	mov	r4, r0
 801384a:	e9c0 3300 	strd	r3, r3, [r0]
 801384e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013852:	6083      	str	r3, [r0, #8]
 8013854:	8181      	strh	r1, [r0, #12]
 8013856:	6643      	str	r3, [r0, #100]	; 0x64
 8013858:	81c2      	strh	r2, [r0, #14]
 801385a:	6183      	str	r3, [r0, #24]
 801385c:	4619      	mov	r1, r3
 801385e:	2208      	movs	r2, #8
 8013860:	305c      	adds	r0, #92	; 0x5c
 8013862:	f7fd fba7 	bl	8010fb4 <memset>
 8013866:	4b05      	ldr	r3, [pc, #20]	; (801387c <std+0x38>)
 8013868:	6263      	str	r3, [r4, #36]	; 0x24
 801386a:	4b05      	ldr	r3, [pc, #20]	; (8013880 <std+0x3c>)
 801386c:	62a3      	str	r3, [r4, #40]	; 0x28
 801386e:	4b05      	ldr	r3, [pc, #20]	; (8013884 <std+0x40>)
 8013870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013872:	4b05      	ldr	r3, [pc, #20]	; (8013888 <std+0x44>)
 8013874:	6224      	str	r4, [r4, #32]
 8013876:	6323      	str	r3, [r4, #48]	; 0x30
 8013878:	bd10      	pop	{r4, pc}
 801387a:	bf00      	nop
 801387c:	08013b95 	.word	0x08013b95
 8013880:	08013bb7 	.word	0x08013bb7
 8013884:	08013bef 	.word	0x08013bef
 8013888:	08013c13 	.word	0x08013c13

0801388c <_cleanup_r>:
 801388c:	4901      	ldr	r1, [pc, #4]	; (8013894 <_cleanup_r+0x8>)
 801388e:	f000 b8af 	b.w	80139f0 <_fwalk_reent>
 8013892:	bf00      	nop
 8013894:	080137cd 	.word	0x080137cd

08013898 <__sfmoreglue>:
 8013898:	b570      	push	{r4, r5, r6, lr}
 801389a:	1e4a      	subs	r2, r1, #1
 801389c:	2568      	movs	r5, #104	; 0x68
 801389e:	4355      	muls	r5, r2
 80138a0:	460e      	mov	r6, r1
 80138a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80138a6:	f7ff fa87 	bl	8012db8 <_malloc_r>
 80138aa:	4604      	mov	r4, r0
 80138ac:	b140      	cbz	r0, 80138c0 <__sfmoreglue+0x28>
 80138ae:	2100      	movs	r1, #0
 80138b0:	e9c0 1600 	strd	r1, r6, [r0]
 80138b4:	300c      	adds	r0, #12
 80138b6:	60a0      	str	r0, [r4, #8]
 80138b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80138bc:	f7fd fb7a 	bl	8010fb4 <memset>
 80138c0:	4620      	mov	r0, r4
 80138c2:	bd70      	pop	{r4, r5, r6, pc}

080138c4 <__sfp_lock_acquire>:
 80138c4:	4801      	ldr	r0, [pc, #4]	; (80138cc <__sfp_lock_acquire+0x8>)
 80138c6:	f000 b8b3 	b.w	8013a30 <__retarget_lock_acquire_recursive>
 80138ca:	bf00      	nop
 80138cc:	200039f8 	.word	0x200039f8

080138d0 <__sfp_lock_release>:
 80138d0:	4801      	ldr	r0, [pc, #4]	; (80138d8 <__sfp_lock_release+0x8>)
 80138d2:	f000 b8ae 	b.w	8013a32 <__retarget_lock_release_recursive>
 80138d6:	bf00      	nop
 80138d8:	200039f8 	.word	0x200039f8

080138dc <__sinit_lock_acquire>:
 80138dc:	4801      	ldr	r0, [pc, #4]	; (80138e4 <__sinit_lock_acquire+0x8>)
 80138de:	f000 b8a7 	b.w	8013a30 <__retarget_lock_acquire_recursive>
 80138e2:	bf00      	nop
 80138e4:	200039f3 	.word	0x200039f3

080138e8 <__sinit_lock_release>:
 80138e8:	4801      	ldr	r0, [pc, #4]	; (80138f0 <__sinit_lock_release+0x8>)
 80138ea:	f000 b8a2 	b.w	8013a32 <__retarget_lock_release_recursive>
 80138ee:	bf00      	nop
 80138f0:	200039f3 	.word	0x200039f3

080138f4 <__sinit>:
 80138f4:	b510      	push	{r4, lr}
 80138f6:	4604      	mov	r4, r0
 80138f8:	f7ff fff0 	bl	80138dc <__sinit_lock_acquire>
 80138fc:	69a3      	ldr	r3, [r4, #24]
 80138fe:	b11b      	cbz	r3, 8013908 <__sinit+0x14>
 8013900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013904:	f7ff bff0 	b.w	80138e8 <__sinit_lock_release>
 8013908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801390c:	6523      	str	r3, [r4, #80]	; 0x50
 801390e:	4b13      	ldr	r3, [pc, #76]	; (801395c <__sinit+0x68>)
 8013910:	4a13      	ldr	r2, [pc, #76]	; (8013960 <__sinit+0x6c>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	62a2      	str	r2, [r4, #40]	; 0x28
 8013916:	42a3      	cmp	r3, r4
 8013918:	bf04      	itt	eq
 801391a:	2301      	moveq	r3, #1
 801391c:	61a3      	streq	r3, [r4, #24]
 801391e:	4620      	mov	r0, r4
 8013920:	f000 f820 	bl	8013964 <__sfp>
 8013924:	6060      	str	r0, [r4, #4]
 8013926:	4620      	mov	r0, r4
 8013928:	f000 f81c 	bl	8013964 <__sfp>
 801392c:	60a0      	str	r0, [r4, #8]
 801392e:	4620      	mov	r0, r4
 8013930:	f000 f818 	bl	8013964 <__sfp>
 8013934:	2200      	movs	r2, #0
 8013936:	60e0      	str	r0, [r4, #12]
 8013938:	2104      	movs	r1, #4
 801393a:	6860      	ldr	r0, [r4, #4]
 801393c:	f7ff ff82 	bl	8013844 <std>
 8013940:	68a0      	ldr	r0, [r4, #8]
 8013942:	2201      	movs	r2, #1
 8013944:	2109      	movs	r1, #9
 8013946:	f7ff ff7d 	bl	8013844 <std>
 801394a:	68e0      	ldr	r0, [r4, #12]
 801394c:	2202      	movs	r2, #2
 801394e:	2112      	movs	r1, #18
 8013950:	f7ff ff78 	bl	8013844 <std>
 8013954:	2301      	movs	r3, #1
 8013956:	61a3      	str	r3, [r4, #24]
 8013958:	e7d2      	b.n	8013900 <__sinit+0xc>
 801395a:	bf00      	nop
 801395c:	08013e50 	.word	0x08013e50
 8013960:	0801388d 	.word	0x0801388d

08013964 <__sfp>:
 8013964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013966:	4607      	mov	r7, r0
 8013968:	f7ff ffac 	bl	80138c4 <__sfp_lock_acquire>
 801396c:	4b1e      	ldr	r3, [pc, #120]	; (80139e8 <__sfp+0x84>)
 801396e:	681e      	ldr	r6, [r3, #0]
 8013970:	69b3      	ldr	r3, [r6, #24]
 8013972:	b913      	cbnz	r3, 801397a <__sfp+0x16>
 8013974:	4630      	mov	r0, r6
 8013976:	f7ff ffbd 	bl	80138f4 <__sinit>
 801397a:	3648      	adds	r6, #72	; 0x48
 801397c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013980:	3b01      	subs	r3, #1
 8013982:	d503      	bpl.n	801398c <__sfp+0x28>
 8013984:	6833      	ldr	r3, [r6, #0]
 8013986:	b30b      	cbz	r3, 80139cc <__sfp+0x68>
 8013988:	6836      	ldr	r6, [r6, #0]
 801398a:	e7f7      	b.n	801397c <__sfp+0x18>
 801398c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013990:	b9d5      	cbnz	r5, 80139c8 <__sfp+0x64>
 8013992:	4b16      	ldr	r3, [pc, #88]	; (80139ec <__sfp+0x88>)
 8013994:	60e3      	str	r3, [r4, #12]
 8013996:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801399a:	6665      	str	r5, [r4, #100]	; 0x64
 801399c:	f000 f847 	bl	8013a2e <__retarget_lock_init_recursive>
 80139a0:	f7ff ff96 	bl	80138d0 <__sfp_lock_release>
 80139a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80139a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80139ac:	6025      	str	r5, [r4, #0]
 80139ae:	61a5      	str	r5, [r4, #24]
 80139b0:	2208      	movs	r2, #8
 80139b2:	4629      	mov	r1, r5
 80139b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80139b8:	f7fd fafc 	bl	8010fb4 <memset>
 80139bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80139c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80139c4:	4620      	mov	r0, r4
 80139c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c8:	3468      	adds	r4, #104	; 0x68
 80139ca:	e7d9      	b.n	8013980 <__sfp+0x1c>
 80139cc:	2104      	movs	r1, #4
 80139ce:	4638      	mov	r0, r7
 80139d0:	f7ff ff62 	bl	8013898 <__sfmoreglue>
 80139d4:	4604      	mov	r4, r0
 80139d6:	6030      	str	r0, [r6, #0]
 80139d8:	2800      	cmp	r0, #0
 80139da:	d1d5      	bne.n	8013988 <__sfp+0x24>
 80139dc:	f7ff ff78 	bl	80138d0 <__sfp_lock_release>
 80139e0:	230c      	movs	r3, #12
 80139e2:	603b      	str	r3, [r7, #0]
 80139e4:	e7ee      	b.n	80139c4 <__sfp+0x60>
 80139e6:	bf00      	nop
 80139e8:	08013e50 	.word	0x08013e50
 80139ec:	ffff0001 	.word	0xffff0001

080139f0 <_fwalk_reent>:
 80139f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139f4:	4606      	mov	r6, r0
 80139f6:	4688      	mov	r8, r1
 80139f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80139fc:	2700      	movs	r7, #0
 80139fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a02:	f1b9 0901 	subs.w	r9, r9, #1
 8013a06:	d505      	bpl.n	8013a14 <_fwalk_reent+0x24>
 8013a08:	6824      	ldr	r4, [r4, #0]
 8013a0a:	2c00      	cmp	r4, #0
 8013a0c:	d1f7      	bne.n	80139fe <_fwalk_reent+0xe>
 8013a0e:	4638      	mov	r0, r7
 8013a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a14:	89ab      	ldrh	r3, [r5, #12]
 8013a16:	2b01      	cmp	r3, #1
 8013a18:	d907      	bls.n	8013a2a <_fwalk_reent+0x3a>
 8013a1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	d003      	beq.n	8013a2a <_fwalk_reent+0x3a>
 8013a22:	4629      	mov	r1, r5
 8013a24:	4630      	mov	r0, r6
 8013a26:	47c0      	blx	r8
 8013a28:	4307      	orrs	r7, r0
 8013a2a:	3568      	adds	r5, #104	; 0x68
 8013a2c:	e7e9      	b.n	8013a02 <_fwalk_reent+0x12>

08013a2e <__retarget_lock_init_recursive>:
 8013a2e:	4770      	bx	lr

08013a30 <__retarget_lock_acquire_recursive>:
 8013a30:	4770      	bx	lr

08013a32 <__retarget_lock_release_recursive>:
 8013a32:	4770      	bx	lr

08013a34 <__swhatbuf_r>:
 8013a34:	b570      	push	{r4, r5, r6, lr}
 8013a36:	460e      	mov	r6, r1
 8013a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a3c:	2900      	cmp	r1, #0
 8013a3e:	b096      	sub	sp, #88	; 0x58
 8013a40:	4614      	mov	r4, r2
 8013a42:	461d      	mov	r5, r3
 8013a44:	da07      	bge.n	8013a56 <__swhatbuf_r+0x22>
 8013a46:	2300      	movs	r3, #0
 8013a48:	602b      	str	r3, [r5, #0]
 8013a4a:	89b3      	ldrh	r3, [r6, #12]
 8013a4c:	061a      	lsls	r2, r3, #24
 8013a4e:	d410      	bmi.n	8013a72 <__swhatbuf_r+0x3e>
 8013a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a54:	e00e      	b.n	8013a74 <__swhatbuf_r+0x40>
 8013a56:	466a      	mov	r2, sp
 8013a58:	f000 f902 	bl	8013c60 <_fstat_r>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	dbf2      	blt.n	8013a46 <__swhatbuf_r+0x12>
 8013a60:	9a01      	ldr	r2, [sp, #4]
 8013a62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013a66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013a6a:	425a      	negs	r2, r3
 8013a6c:	415a      	adcs	r2, r3
 8013a6e:	602a      	str	r2, [r5, #0]
 8013a70:	e7ee      	b.n	8013a50 <__swhatbuf_r+0x1c>
 8013a72:	2340      	movs	r3, #64	; 0x40
 8013a74:	2000      	movs	r0, #0
 8013a76:	6023      	str	r3, [r4, #0]
 8013a78:	b016      	add	sp, #88	; 0x58
 8013a7a:	bd70      	pop	{r4, r5, r6, pc}

08013a7c <__smakebuf_r>:
 8013a7c:	898b      	ldrh	r3, [r1, #12]
 8013a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a80:	079d      	lsls	r5, r3, #30
 8013a82:	4606      	mov	r6, r0
 8013a84:	460c      	mov	r4, r1
 8013a86:	d507      	bpl.n	8013a98 <__smakebuf_r+0x1c>
 8013a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013a8c:	6023      	str	r3, [r4, #0]
 8013a8e:	6123      	str	r3, [r4, #16]
 8013a90:	2301      	movs	r3, #1
 8013a92:	6163      	str	r3, [r4, #20]
 8013a94:	b002      	add	sp, #8
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
 8013a98:	ab01      	add	r3, sp, #4
 8013a9a:	466a      	mov	r2, sp
 8013a9c:	f7ff ffca 	bl	8013a34 <__swhatbuf_r>
 8013aa0:	9900      	ldr	r1, [sp, #0]
 8013aa2:	4605      	mov	r5, r0
 8013aa4:	4630      	mov	r0, r6
 8013aa6:	f7ff f987 	bl	8012db8 <_malloc_r>
 8013aaa:	b948      	cbnz	r0, 8013ac0 <__smakebuf_r+0x44>
 8013aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ab0:	059a      	lsls	r2, r3, #22
 8013ab2:	d4ef      	bmi.n	8013a94 <__smakebuf_r+0x18>
 8013ab4:	f023 0303 	bic.w	r3, r3, #3
 8013ab8:	f043 0302 	orr.w	r3, r3, #2
 8013abc:	81a3      	strh	r3, [r4, #12]
 8013abe:	e7e3      	b.n	8013a88 <__smakebuf_r+0xc>
 8013ac0:	4b0d      	ldr	r3, [pc, #52]	; (8013af8 <__smakebuf_r+0x7c>)
 8013ac2:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ac4:	89a3      	ldrh	r3, [r4, #12]
 8013ac6:	6020      	str	r0, [r4, #0]
 8013ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013acc:	81a3      	strh	r3, [r4, #12]
 8013ace:	9b00      	ldr	r3, [sp, #0]
 8013ad0:	6163      	str	r3, [r4, #20]
 8013ad2:	9b01      	ldr	r3, [sp, #4]
 8013ad4:	6120      	str	r0, [r4, #16]
 8013ad6:	b15b      	cbz	r3, 8013af0 <__smakebuf_r+0x74>
 8013ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013adc:	4630      	mov	r0, r6
 8013ade:	f000 f8d1 	bl	8013c84 <_isatty_r>
 8013ae2:	b128      	cbz	r0, 8013af0 <__smakebuf_r+0x74>
 8013ae4:	89a3      	ldrh	r3, [r4, #12]
 8013ae6:	f023 0303 	bic.w	r3, r3, #3
 8013aea:	f043 0301 	orr.w	r3, r3, #1
 8013aee:	81a3      	strh	r3, [r4, #12]
 8013af0:	89a0      	ldrh	r0, [r4, #12]
 8013af2:	4305      	orrs	r5, r0
 8013af4:	81a5      	strh	r5, [r4, #12]
 8013af6:	e7cd      	b.n	8013a94 <__smakebuf_r+0x18>
 8013af8:	0801388d 	.word	0x0801388d

08013afc <_malloc_usable_size_r>:
 8013afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b00:	1f18      	subs	r0, r3, #4
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	bfbc      	itt	lt
 8013b06:	580b      	ldrlt	r3, [r1, r0]
 8013b08:	18c0      	addlt	r0, r0, r3
 8013b0a:	4770      	bx	lr

08013b0c <_raise_r>:
 8013b0c:	291f      	cmp	r1, #31
 8013b0e:	b538      	push	{r3, r4, r5, lr}
 8013b10:	4604      	mov	r4, r0
 8013b12:	460d      	mov	r5, r1
 8013b14:	d904      	bls.n	8013b20 <_raise_r+0x14>
 8013b16:	2316      	movs	r3, #22
 8013b18:	6003      	str	r3, [r0, #0]
 8013b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b1e:	bd38      	pop	{r3, r4, r5, pc}
 8013b20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b22:	b112      	cbz	r2, 8013b2a <_raise_r+0x1e>
 8013b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b28:	b94b      	cbnz	r3, 8013b3e <_raise_r+0x32>
 8013b2a:	4620      	mov	r0, r4
 8013b2c:	f000 f830 	bl	8013b90 <_getpid_r>
 8013b30:	462a      	mov	r2, r5
 8013b32:	4601      	mov	r1, r0
 8013b34:	4620      	mov	r0, r4
 8013b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b3a:	f000 b817 	b.w	8013b6c <_kill_r>
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d00a      	beq.n	8013b58 <_raise_r+0x4c>
 8013b42:	1c59      	adds	r1, r3, #1
 8013b44:	d103      	bne.n	8013b4e <_raise_r+0x42>
 8013b46:	2316      	movs	r3, #22
 8013b48:	6003      	str	r3, [r0, #0]
 8013b4a:	2001      	movs	r0, #1
 8013b4c:	e7e7      	b.n	8013b1e <_raise_r+0x12>
 8013b4e:	2400      	movs	r4, #0
 8013b50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b54:	4628      	mov	r0, r5
 8013b56:	4798      	blx	r3
 8013b58:	2000      	movs	r0, #0
 8013b5a:	e7e0      	b.n	8013b1e <_raise_r+0x12>

08013b5c <raise>:
 8013b5c:	4b02      	ldr	r3, [pc, #8]	; (8013b68 <raise+0xc>)
 8013b5e:	4601      	mov	r1, r0
 8013b60:	6818      	ldr	r0, [r3, #0]
 8013b62:	f7ff bfd3 	b.w	8013b0c <_raise_r>
 8013b66:	bf00      	nop
 8013b68:	20000180 	.word	0x20000180

08013b6c <_kill_r>:
 8013b6c:	b538      	push	{r3, r4, r5, lr}
 8013b6e:	4d07      	ldr	r5, [pc, #28]	; (8013b8c <_kill_r+0x20>)
 8013b70:	2300      	movs	r3, #0
 8013b72:	4604      	mov	r4, r0
 8013b74:	4608      	mov	r0, r1
 8013b76:	4611      	mov	r1, r2
 8013b78:	602b      	str	r3, [r5, #0]
 8013b7a:	f000 f8d7 	bl	8013d2c <_kill>
 8013b7e:	1c43      	adds	r3, r0, #1
 8013b80:	d102      	bne.n	8013b88 <_kill_r+0x1c>
 8013b82:	682b      	ldr	r3, [r5, #0]
 8013b84:	b103      	cbz	r3, 8013b88 <_kill_r+0x1c>
 8013b86:	6023      	str	r3, [r4, #0]
 8013b88:	bd38      	pop	{r3, r4, r5, pc}
 8013b8a:	bf00      	nop
 8013b8c:	200039ec 	.word	0x200039ec

08013b90 <_getpid_r>:
 8013b90:	f000 b8bc 	b.w	8013d0c <_getpid>

08013b94 <__sread>:
 8013b94:	b510      	push	{r4, lr}
 8013b96:	460c      	mov	r4, r1
 8013b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b9c:	f000 f894 	bl	8013cc8 <_read_r>
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	bfab      	itete	ge
 8013ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8013ba8:	181b      	addge	r3, r3, r0
 8013baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013bae:	bfac      	ite	ge
 8013bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013bb2:	81a3      	strhlt	r3, [r4, #12]
 8013bb4:	bd10      	pop	{r4, pc}

08013bb6 <__swrite>:
 8013bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bba:	461f      	mov	r7, r3
 8013bbc:	898b      	ldrh	r3, [r1, #12]
 8013bbe:	05db      	lsls	r3, r3, #23
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	4616      	mov	r6, r2
 8013bc6:	d505      	bpl.n	8013bd4 <__swrite+0x1e>
 8013bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bcc:	2302      	movs	r3, #2
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f000 f868 	bl	8013ca4 <_lseek_r>
 8013bd4:	89a3      	ldrh	r3, [r4, #12]
 8013bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bde:	81a3      	strh	r3, [r4, #12]
 8013be0:	4632      	mov	r2, r6
 8013be2:	463b      	mov	r3, r7
 8013be4:	4628      	mov	r0, r5
 8013be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bea:	f000 b817 	b.w	8013c1c <_write_r>

08013bee <__sseek>:
 8013bee:	b510      	push	{r4, lr}
 8013bf0:	460c      	mov	r4, r1
 8013bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf6:	f000 f855 	bl	8013ca4 <_lseek_r>
 8013bfa:	1c43      	adds	r3, r0, #1
 8013bfc:	89a3      	ldrh	r3, [r4, #12]
 8013bfe:	bf15      	itete	ne
 8013c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c0a:	81a3      	strheq	r3, [r4, #12]
 8013c0c:	bf18      	it	ne
 8013c0e:	81a3      	strhne	r3, [r4, #12]
 8013c10:	bd10      	pop	{r4, pc}

08013c12 <__sclose>:
 8013c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c16:	f000 b813 	b.w	8013c40 <_close_r>
	...

08013c1c <_write_r>:
 8013c1c:	b538      	push	{r3, r4, r5, lr}
 8013c1e:	4d07      	ldr	r5, [pc, #28]	; (8013c3c <_write_r+0x20>)
 8013c20:	4604      	mov	r4, r0
 8013c22:	4608      	mov	r0, r1
 8013c24:	4611      	mov	r1, r2
 8013c26:	2200      	movs	r2, #0
 8013c28:	602a      	str	r2, [r5, #0]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	f000 f8a4 	bl	8013d78 <_write>
 8013c30:	1c43      	adds	r3, r0, #1
 8013c32:	d102      	bne.n	8013c3a <_write_r+0x1e>
 8013c34:	682b      	ldr	r3, [r5, #0]
 8013c36:	b103      	cbz	r3, 8013c3a <_write_r+0x1e>
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	bd38      	pop	{r3, r4, r5, pc}
 8013c3c:	200039ec 	.word	0x200039ec

08013c40 <_close_r>:
 8013c40:	b538      	push	{r3, r4, r5, lr}
 8013c42:	4d06      	ldr	r5, [pc, #24]	; (8013c5c <_close_r+0x1c>)
 8013c44:	2300      	movs	r3, #0
 8013c46:	4604      	mov	r4, r0
 8013c48:	4608      	mov	r0, r1
 8013c4a:	602b      	str	r3, [r5, #0]
 8013c4c:	f000 f84e 	bl	8013cec <_close>
 8013c50:	1c43      	adds	r3, r0, #1
 8013c52:	d102      	bne.n	8013c5a <_close_r+0x1a>
 8013c54:	682b      	ldr	r3, [r5, #0]
 8013c56:	b103      	cbz	r3, 8013c5a <_close_r+0x1a>
 8013c58:	6023      	str	r3, [r4, #0]
 8013c5a:	bd38      	pop	{r3, r4, r5, pc}
 8013c5c:	200039ec 	.word	0x200039ec

08013c60 <_fstat_r>:
 8013c60:	b538      	push	{r3, r4, r5, lr}
 8013c62:	4d07      	ldr	r5, [pc, #28]	; (8013c80 <_fstat_r+0x20>)
 8013c64:	2300      	movs	r3, #0
 8013c66:	4604      	mov	r4, r0
 8013c68:	4608      	mov	r0, r1
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	602b      	str	r3, [r5, #0]
 8013c6e:	f000 f845 	bl	8013cfc <_fstat>
 8013c72:	1c43      	adds	r3, r0, #1
 8013c74:	d102      	bne.n	8013c7c <_fstat_r+0x1c>
 8013c76:	682b      	ldr	r3, [r5, #0]
 8013c78:	b103      	cbz	r3, 8013c7c <_fstat_r+0x1c>
 8013c7a:	6023      	str	r3, [r4, #0]
 8013c7c:	bd38      	pop	{r3, r4, r5, pc}
 8013c7e:	bf00      	nop
 8013c80:	200039ec 	.word	0x200039ec

08013c84 <_isatty_r>:
 8013c84:	b538      	push	{r3, r4, r5, lr}
 8013c86:	4d06      	ldr	r5, [pc, #24]	; (8013ca0 <_isatty_r+0x1c>)
 8013c88:	2300      	movs	r3, #0
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	4608      	mov	r0, r1
 8013c8e:	602b      	str	r3, [r5, #0]
 8013c90:	f000 f844 	bl	8013d1c <_isatty>
 8013c94:	1c43      	adds	r3, r0, #1
 8013c96:	d102      	bne.n	8013c9e <_isatty_r+0x1a>
 8013c98:	682b      	ldr	r3, [r5, #0]
 8013c9a:	b103      	cbz	r3, 8013c9e <_isatty_r+0x1a>
 8013c9c:	6023      	str	r3, [r4, #0]
 8013c9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ca0:	200039ec 	.word	0x200039ec

08013ca4 <_lseek_r>:
 8013ca4:	b538      	push	{r3, r4, r5, lr}
 8013ca6:	4d07      	ldr	r5, [pc, #28]	; (8013cc4 <_lseek_r+0x20>)
 8013ca8:	4604      	mov	r4, r0
 8013caa:	4608      	mov	r0, r1
 8013cac:	4611      	mov	r1, r2
 8013cae:	2200      	movs	r2, #0
 8013cb0:	602a      	str	r2, [r5, #0]
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	f000 f842 	bl	8013d3c <_lseek>
 8013cb8:	1c43      	adds	r3, r0, #1
 8013cba:	d102      	bne.n	8013cc2 <_lseek_r+0x1e>
 8013cbc:	682b      	ldr	r3, [r5, #0]
 8013cbe:	b103      	cbz	r3, 8013cc2 <_lseek_r+0x1e>
 8013cc0:	6023      	str	r3, [r4, #0]
 8013cc2:	bd38      	pop	{r3, r4, r5, pc}
 8013cc4:	200039ec 	.word	0x200039ec

08013cc8 <_read_r>:
 8013cc8:	b538      	push	{r3, r4, r5, lr}
 8013cca:	4d07      	ldr	r5, [pc, #28]	; (8013ce8 <_read_r+0x20>)
 8013ccc:	4604      	mov	r4, r0
 8013cce:	4608      	mov	r0, r1
 8013cd0:	4611      	mov	r1, r2
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	602a      	str	r2, [r5, #0]
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	f000 f838 	bl	8013d4c <_read>
 8013cdc:	1c43      	adds	r3, r0, #1
 8013cde:	d102      	bne.n	8013ce6 <_read_r+0x1e>
 8013ce0:	682b      	ldr	r3, [r5, #0]
 8013ce2:	b103      	cbz	r3, 8013ce6 <_read_r+0x1e>
 8013ce4:	6023      	str	r3, [r4, #0]
 8013ce6:	bd38      	pop	{r3, r4, r5, pc}
 8013ce8:	200039ec 	.word	0x200039ec

08013cec <_close>:
 8013cec:	4b02      	ldr	r3, [pc, #8]	; (8013cf8 <_close+0xc>)
 8013cee:	2258      	movs	r2, #88	; 0x58
 8013cf0:	601a      	str	r2, [r3, #0]
 8013cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf6:	4770      	bx	lr
 8013cf8:	200039ec 	.word	0x200039ec

08013cfc <_fstat>:
 8013cfc:	4b02      	ldr	r3, [pc, #8]	; (8013d08 <_fstat+0xc>)
 8013cfe:	2258      	movs	r2, #88	; 0x58
 8013d00:	601a      	str	r2, [r3, #0]
 8013d02:	f04f 30ff 	mov.w	r0, #4294967295
 8013d06:	4770      	bx	lr
 8013d08:	200039ec 	.word	0x200039ec

08013d0c <_getpid>:
 8013d0c:	4b02      	ldr	r3, [pc, #8]	; (8013d18 <_getpid+0xc>)
 8013d0e:	2258      	movs	r2, #88	; 0x58
 8013d10:	601a      	str	r2, [r3, #0]
 8013d12:	f04f 30ff 	mov.w	r0, #4294967295
 8013d16:	4770      	bx	lr
 8013d18:	200039ec 	.word	0x200039ec

08013d1c <_isatty>:
 8013d1c:	4b02      	ldr	r3, [pc, #8]	; (8013d28 <_isatty+0xc>)
 8013d1e:	2258      	movs	r2, #88	; 0x58
 8013d20:	601a      	str	r2, [r3, #0]
 8013d22:	2000      	movs	r0, #0
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	200039ec 	.word	0x200039ec

08013d2c <_kill>:
 8013d2c:	4b02      	ldr	r3, [pc, #8]	; (8013d38 <_kill+0xc>)
 8013d2e:	2258      	movs	r2, #88	; 0x58
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	f04f 30ff 	mov.w	r0, #4294967295
 8013d36:	4770      	bx	lr
 8013d38:	200039ec 	.word	0x200039ec

08013d3c <_lseek>:
 8013d3c:	4b02      	ldr	r3, [pc, #8]	; (8013d48 <_lseek+0xc>)
 8013d3e:	2258      	movs	r2, #88	; 0x58
 8013d40:	601a      	str	r2, [r3, #0]
 8013d42:	f04f 30ff 	mov.w	r0, #4294967295
 8013d46:	4770      	bx	lr
 8013d48:	200039ec 	.word	0x200039ec

08013d4c <_read>:
 8013d4c:	4b02      	ldr	r3, [pc, #8]	; (8013d58 <_read+0xc>)
 8013d4e:	2258      	movs	r2, #88	; 0x58
 8013d50:	601a      	str	r2, [r3, #0]
 8013d52:	f04f 30ff 	mov.w	r0, #4294967295
 8013d56:	4770      	bx	lr
 8013d58:	200039ec 	.word	0x200039ec

08013d5c <_sbrk>:
 8013d5c:	4b04      	ldr	r3, [pc, #16]	; (8013d70 <_sbrk+0x14>)
 8013d5e:	6819      	ldr	r1, [r3, #0]
 8013d60:	4602      	mov	r2, r0
 8013d62:	b909      	cbnz	r1, 8013d68 <_sbrk+0xc>
 8013d64:	4903      	ldr	r1, [pc, #12]	; (8013d74 <_sbrk+0x18>)
 8013d66:	6019      	str	r1, [r3, #0]
 8013d68:	6818      	ldr	r0, [r3, #0]
 8013d6a:	4402      	add	r2, r0
 8013d6c:	601a      	str	r2, [r3, #0]
 8013d6e:	4770      	bx	lr
 8013d70:	200017e4 	.word	0x200017e4
 8013d74:	20003a00 	.word	0x20003a00

08013d78 <_write>:
 8013d78:	4b02      	ldr	r3, [pc, #8]	; (8013d84 <_write+0xc>)
 8013d7a:	2258      	movs	r2, #88	; 0x58
 8013d7c:	601a      	str	r2, [r3, #0]
 8013d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d82:	4770      	bx	lr
 8013d84:	200039ec 	.word	0x200039ec

08013d88 <_exit>:
 8013d88:	e7fe      	b.n	8013d88 <_exit>
	...

08013d8c <_init>:
 8013d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d8e:	bf00      	nop
 8013d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d92:	bc08      	pop	{r3}
 8013d94:	469e      	mov	lr, r3
 8013d96:	4770      	bx	lr

08013d98 <_fini>:
 8013d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9a:	bf00      	nop
 8013d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d9e:	bc08      	pop	{r3}
 8013da0:	469e      	mov	lr, r3
 8013da2:	4770      	bx	lr
