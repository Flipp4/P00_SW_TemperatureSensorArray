
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c170  0800c170  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1e8  0800c1e8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1e8  0800c1e8  0001c1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1f0  0800c1f0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f0  0800c1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1f4  0800c1f4  0001c1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002220  20000180  0800c378  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a0  0800c378  000223a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002694f  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce6  00000000  00000000  00046aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  0004b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  0004d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc9e  00000000  00000000  0004ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d97  00000000  00000000  0006ca36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0671  00000000  00000000  000907cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130e3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007464  00000000  00000000  00130e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c158 	.word	0x0800c158

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800c158 	.word	0x0800c158

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d105      	bne.n	80004ec <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <OperateLED_A+0x34>)
 80004e6:	f000 ff51 	bl	800138c <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 80004ea:	e007      	b.n	80004fc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <OperateLED_A+0x34>)
 80004f8:	f000 ff48 	bl	800138c <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800050c:	2102      	movs	r1, #2
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <ToggleLED_B+0x10>)
 8000510:	f000 ff55 	bl	80013be <HAL_GPIO_TogglePin>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020800 	.word	0x40020800

0800051c <ToggleLED_D>:

void ToggleLED_D()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000520:	2108      	movs	r1, #8
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <ToggleLED_D+0x10>)
 8000524:	f000 ff4b 	bl	80013be <HAL_GPIO_TogglePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020800 	.word	0x40020800

08000530 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d106      	bne.n	800054e <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4808      	ldr	r0, [pc, #32]	; (8000568 <OperateSensorPower_A+0x38>)
 8000548:	f000 ff20 	bl	800138c <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 800054c:	e008      	b.n	8000560 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d105      	bne.n	8000560 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <OperateSensorPower_A+0x38>)
 800055c:	f000 ff16 	bl	800138c <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020800 	.word	0x40020800

0800056c <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d106      	bne.n	800058a <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000584:	f000 ff02 	bl	800138c <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000588:	e008      	b.n	800059c <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d105      	bne.n	800059c <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000598:	f000 fef8 	bl	800138c <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020800 	.word	0x40020800

080005a8 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ffbf 	bl	8000530 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffda 	bl	800056c <OperateSensorPower_B>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SensorArray_Init>:
	0x0C,
	0x0E
};

void SensorArray_Init(I2C_HandleTypeDef *hI2CA, I2C_HandleTypeDef *hI2CB)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e01b      	b.n	8000604 <SensorArray_Init+0x48>
	{
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	4928      	ldr	r1, [pc, #160]	; (8000670 <SensorArray_Init+0xb4>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	3304      	adds	r3, #4
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListA[u8Idx]);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4a24      	ldr	r2, [pc, #144]	; (8000674 <SensorArray_Init+0xb8>)
 80005e4:	5cd3      	ldrb	r3, [r2, r3]
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	3330      	adds	r3, #48	; 0x30
 80005ea:	b2d8      	uxtb	r0, r3
 80005ec:	4920      	ldr	r1, [pc, #128]	; (8000670 <SensorArray_Init+0xb4>)
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	3301      	adds	r3, #1
 80005fa:	4602      	mov	r2, r0
 80005fc:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	3301      	adds	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b04      	cmp	r3, #4
 8000608:	d9e0      	bls.n	80005cc <SensorArray_Init+0x10>
	}
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 800060a:	2300      	movs	r3, #0
 800060c:	73bb      	strb	r3, [r7, #14]
 800060e:	e024      	b.n	800065a <SensorArray_Init+0x9e>
	{
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 8000610:	7bba      	ldrb	r2, [r7, #14]
 8000612:	4919      	ldr	r1, [pc, #100]	; (8000678 <SensorArray_Init+0xbc>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	440b      	add	r3, r1
 800061e:	3304      	adds	r3, #4
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListB[u8Idx]);
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <SensorArray_Init+0xc0>)
 8000628:	5cd3      	ldrb	r3, [r2, r3]
 800062a:	7bba      	ldrb	r2, [r7, #14]
 800062c:	3330      	adds	r3, #48	; 0x30
 800062e:	b2d8      	uxtb	r0, r3
 8000630:	4911      	ldr	r1, [pc, #68]	; (8000678 <SensorArray_Init+0xbc>)
 8000632:	4613      	mov	r3, r2
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	3301      	adds	r3, #1
 800063e:	4602      	mov	r2, r0
 8000640:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 8000642:	7bba      	ldrb	r2, [r7, #14]
 8000644:	490c      	ldr	r1, [pc, #48]	; (8000678 <SensorArray_Init+0xbc>)
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	440b      	add	r3, r1
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	3301      	adds	r3, #1
 8000658:	73bb      	strb	r3, [r7, #14]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d9d7      	bls.n	8000610 <SensorArray_Init+0x54>
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000814 	.word	0x20000814
 8000674:	0800c1b8 	.word	0x0800c1b8
 8000678:	20000850 	.word	0x20000850
 800067c:	0800c1c0 	.word	0x0800c1c0

08000680 <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af02      	add	r7, sp, #8
 8000686:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6858      	ldr	r0, [r3, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	b299      	uxth	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3308      	adds	r3, #8
 8000696:	2202      	movs	r2, #2
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	2205      	movs	r2, #5
 80006a0:	f000 ffec 	bl	800167c <HAL_I2C_Mem_Read_IT>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MCP9808_DecodeTemperature>:

float MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	81fb      	strh	r3, [r7, #14]
	uint16_t u16FixedPointReadingHigh = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	81bb      	strh	r3, [r7, #12]
	uint16_t u16FixedPointReading = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	817b      	strh	r3, [r7, #10]

	u16FixedPointReadingLow = (kSensor->u16RawMeasurement[0]) << 8;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7a1b      	ldrb	r3, [r3, #8]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	81fb      	strh	r3, [r7, #14]
	u16FixedPointReadingHigh = (kSensor->u16RawMeasurement[1]) >> 8;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7a5b      	ldrb	r3, [r3, #9]
 80006ce:	121b      	asrs	r3, r3, #8
 80006d0:	81bb      	strh	r3, [r7, #12]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 80006d2:	89fa      	ldrh	r2, [r7, #14]
 80006d4:	89bb      	ldrh	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	817b      	strh	r3, [r7, #10]

	return (float)(u16FixedPointReading) / 16;
 80006da:	897b      	ldrh	r3, [r7, #10]
 80006dc:	ee07 3a90 	vmov	s15, r3
 80006e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006e4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80006e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80006f0:	eeb0 0a67 	vmov.f32	s0, s15
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_Init+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <HAL_Init+0x40>)
 800070a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <HAL_Init+0x40>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <HAL_Init+0x40>)
 8000716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800071a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x40>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x40>)
 8000722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f94f 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f00a fd30 	bl	800b198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023c00 	.word	0x40023c00

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f967 	bl	8000a36 <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f92f 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000118 	.word	0x20000118
 800079c:	20000004 	.word	0x20000004
 80007a0:	20000000 	.word	0x20000000

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000004 	.word	0x20000004
 80007c8:	2000088c 	.word	0x2000088c

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000088c 	.word	0x2000088c

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff ffee 	bl	80007cc <HAL_GetTick>
 80007f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800080a:	bf00      	nop
 800080c:	f7ff ffde 	bl	80007cc <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000004 	.word	0x20000004

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db0b      	blt.n	80008ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 021f 	and.w	r2, r3, #31
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <__NVIC_EnableIRQ+0x38>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100

080008cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db0a      	blt.n	80008f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	490c      	ldr	r1, [pc, #48]	; (8000918 <__NVIC_SetPriority+0x4c>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	440b      	add	r3, r1
 80008f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f4:	e00a      	b.n	800090c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4908      	ldr	r1, [pc, #32]	; (800091c <__NVIC_SetPriority+0x50>)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	3b04      	subs	r3, #4
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	440b      	add	r3, r1
 800090a:	761a      	strb	r2, [r3, #24]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f1c3 0307 	rsb	r3, r3, #7
 800093a:	2b04      	cmp	r3, #4
 800093c:	bf28      	it	cs
 800093e:	2304      	movcs	r3, #4
 8000940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3304      	adds	r3, #4
 8000946:	2b06      	cmp	r3, #6
 8000948:	d902      	bls.n	8000950 <NVIC_EncodePriority+0x30>
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3b03      	subs	r3, #3
 800094e:	e000      	b.n	8000952 <NVIC_EncodePriority+0x32>
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 32ff 	mov.w	r2, #4294967295
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43da      	mvns	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	401a      	ands	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43d9      	mvns	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	4313      	orrs	r3, r2
         );
}
 800097a:	4618      	mov	r0, r3
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f7ff ff8e 	bl	80008cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff29 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff3e 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff8e 	bl	8000920 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5d 	bl	80008cc <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff31 	bl	8000890 <__NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffa2 	bl	8000988 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff feb6 	bl	80007cc <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e099      	b.n	8000ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2202      	movs	r2, #2
 8000a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0201 	bic.w	r2, r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000a8c:	e00f      	b.n	8000aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a8e:	f7ff fe9d 	bl	80007cc <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d908      	bls.n	8000aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e078      	b.n	8000ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e8      	bne.n	8000a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <HAL_DMA_Init+0x158>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d107      	bne.n	8000b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4313      	orrs	r3, r2
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f023 0307 	bic.w	r3, r3, #7
 8000b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d117      	bne.n	8000b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00e      	beq.n	8000b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 fa19 	bl	8000f8c <DMA_CheckFifoParam>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d008      	beq.n	8000b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2240      	movs	r2, #64	; 0x40
 8000b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e016      	b.n	8000ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f9d0 	bl	8000f20 <DMA_CalcBaseAndBitshift>
 8000b80:	4603      	mov	r3, r0
 8000b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b88:	223f      	movs	r2, #63	; 0x3f
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	f010803f 	.word	0xf010803f

08000bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d004      	beq.n	8000bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00c      	b.n	8000be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2205      	movs	r2, #5
 8000bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0201 	bic.w	r2, r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000bfc:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <HAL_DMA_IRQHandler+0x258>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a92      	ldr	r2, [pc, #584]	; (8000e4c <HAL_DMA_IRQHandler+0x25c>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	0a9b      	lsrs	r3, r3, #10
 8000c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d01a      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0204 	bic.w	r2, r2, #4
 8000c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c48:	2208      	movs	r2, #8
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c54:	f043 0201 	orr.w	r2, r3, #1
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c60:	2201      	movs	r2, #1
 8000c62:	409a      	lsls	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d012      	beq.n	8000c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00b      	beq.n	8000c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c7e:	2201      	movs	r2, #1
 8000c80:	409a      	lsls	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8a:	f043 0202 	orr.w	r2, r3, #2
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c96:	2204      	movs	r2, #4
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d012      	beq.n	8000cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc0:	f043 0204 	orr.w	r2, r3, #4
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ccc:	2210      	movs	r2, #16
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d043      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d03c      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cea:	2210      	movs	r2, #16
 8000cec:	409a      	lsls	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d018      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d108      	bne.n	8000d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d024      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	4798      	blx	r3
 8000d1e:	e01f      	b.n	8000d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d01b      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	4798      	blx	r3
 8000d30:	e016      	b.n	8000d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d107      	bne.n	8000d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0208 	bic.w	r2, r2, #8
 8000d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d64:	2220      	movs	r2, #32
 8000d66:	409a      	lsls	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 808e 	beq.w	8000e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 8086 	beq.w	8000e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d86:	2220      	movs	r2, #32
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d136      	bne.n	8000e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0216 	bic.w	r2, r2, #22
 8000da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	695a      	ldr	r2, [r3, #20]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <HAL_DMA_IRQHandler+0x1da>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0208 	bic.w	r2, r2, #8
 8000dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dde:	223f      	movs	r2, #63	; 0x3f
 8000de0:	409a      	lsls	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d07d      	beq.n	8000efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	4798      	blx	r3
        }
        return;
 8000e06:	e078      	b.n	8000efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d01c      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d108      	bne.n	8000e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d030      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	4798      	blx	r3
 8000e34:	e02b      	b.n	8000e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d027      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	4798      	blx	r3
 8000e46:	e022      	b.n	8000e8e <HAL_DMA_IRQHandler+0x29e>
 8000e48:	20000118 	.word	0x20000118
 8000e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10f      	bne.n	8000e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0210 	bic.w	r2, r2, #16
 8000e6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d032      	beq.n	8000efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d022      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d307      	bcc.n	8000ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f2      	bne.n	8000eba <HAL_DMA_IRQHandler+0x2ca>
 8000ed4:	e000      	b.n	8000ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000ed6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	4798      	blx	r3
 8000ef8:	e000      	b.n	8000efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8000efa:	bf00      	nop
    }
  }
}
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop

08000f04 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f12:	b2db      	uxtb	r3, r3
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	3b10      	subs	r3, #16
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <DMA_CalcBaseAndBitshift+0x64>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <DMA_CalcBaseAndBitshift+0x68>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d909      	bls.n	8000f62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	1d1a      	adds	r2, r3, #4
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58
 8000f60:	e007      	b.n	8000f72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f6a:	f023 0303 	bic.w	r3, r3, #3
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	aaaaaaab 	.word	0xaaaaaaab
 8000f88:	0800c1c8 	.word	0x0800c1c8

08000f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d11f      	bne.n	8000fe6 <DMA_CheckFifoParam+0x5a>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d856      	bhi.n	800105a <DMA_CheckFifoParam+0xce>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <DMA_CheckFifoParam+0x28>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fd7 	.word	0x08000fd7
 8000fbc:	08000fc5 	.word	0x08000fc5
 8000fc0:	0800105b 	.word	0x0800105b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d046      	beq.n	800105e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fd4:	e043      	b.n	800105e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fde:	d140      	bne.n	8001062 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fe4:	e03d      	b.n	8001062 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fee:	d121      	bne.n	8001034 <DMA_CheckFifoParam+0xa8>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d837      	bhi.n	8001066 <DMA_CheckFifoParam+0xda>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <DMA_CheckFifoParam+0x70>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	0800100d 	.word	0x0800100d
 8001000:	08001013 	.word	0x08001013
 8001004:	0800100d 	.word	0x0800100d
 8001008:	08001025 	.word	0x08001025
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
      break;
 8001010:	e030      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d025      	beq.n	800106a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001022:	e022      	b.n	800106a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800102c:	d11f      	bne.n	800106e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001032:	e01c      	b.n	800106e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d903      	bls.n	8001042 <DMA_CheckFifoParam+0xb6>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d003      	beq.n	8001048 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001040:	e018      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
      break;
 8001046:	e015      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00e      	beq.n	8001072 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
      break;
 8001058:	e00b      	b.n	8001072 <DMA_CheckFifoParam+0xe6>
      break;
 800105a:	bf00      	nop
 800105c:	e00a      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      break;
 800105e:	bf00      	nop
 8001060:	e008      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      break;
 8001062:	bf00      	nop
 8001064:	e006      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      break;
 8001066:	bf00      	nop
 8001068:	e004      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      break;
 800106a:	bf00      	nop
 800106c:	e002      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      break;   
 800106e:	bf00      	nop
 8001070:	e000      	b.n	8001074 <DMA_CheckFifoParam+0xe8>
      break;
 8001072:	bf00      	nop
    }
  } 
  
  return status; 
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e159      	b.n	8001354 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8148 	bne.w	800134e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a2 	beq.w	800134e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b57      	ldr	r3, [pc, #348]	; (800136c <HAL_GPIO_Init+0x2e8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a56      	ldr	r2, [pc, #344]	; (800136c <HAL_GPIO_Init+0x2e8>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b54      	ldr	r3, [pc, #336]	; (800136c <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_GPIO_Init+0x2ec>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x2f0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x202>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2f4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x1fe>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_GPIO_Init+0x2f8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x1fa>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x1f6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <HAL_GPIO_Init+0x300>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x1f2>
 8001272:	2304      	movs	r3, #4
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001276:	2307      	movs	r3, #7
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x204>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x204>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x2ec>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_GPIO_Init+0x304>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f aea2 	bls.w	80010a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	041a      	lsls	r2, r3, #16
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43d9      	mvns	r1, r3
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	400b      	ands	r3, r1
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e12b      	b.n	800165e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f009 fee4 	bl	800b1e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2224      	movs	r2, #36	; 0x24
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001458:	f003 fb36 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a81      	ldr	r2, [pc, #516]	; (8001668 <HAL_I2C_Init+0x274>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d807      	bhi.n	8001478 <HAL_I2C_Init+0x84>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a80      	ldr	r2, [pc, #512]	; (800166c <HAL_I2C_Init+0x278>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e006      	b.n	8001486 <HAL_I2C_Init+0x92>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a7d      	ldr	r2, [pc, #500]	; (8001670 <HAL_I2C_Init+0x27c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	bf94      	ite	ls
 8001480:	2301      	movls	r3, #1
 8001482:	2300      	movhi	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0e7      	b.n	800165e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a78      	ldr	r2, [pc, #480]	; (8001674 <HAL_I2C_Init+0x280>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9b      	lsrs	r3, r3, #18
 8001498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <HAL_I2C_Init+0x274>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d802      	bhi.n	80014c8 <HAL_I2C_Init+0xd4>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	e009      	b.n	80014dc <HAL_I2C_Init+0xe8>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4a69      	ldr	r2, [pc, #420]	; (8001678 <HAL_I2C_Init+0x284>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	3301      	adds	r3, #1
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	495c      	ldr	r1, [pc, #368]	; (8001668 <HAL_I2C_Init+0x274>)
 80014f8:	428b      	cmp	r3, r1
 80014fa:	d819      	bhi.n	8001530 <HAL_I2C_Init+0x13c>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e59      	subs	r1, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fbb1 f3f3 	udiv	r3, r1, r3
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001510:	400b      	ands	r3, r1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <HAL_I2C_Init+0x138>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1e59      	subs	r1, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fbb1 f3f3 	udiv	r3, r1, r3
 8001524:	3301      	adds	r3, #1
 8001526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152a:	e051      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 800152c:	2304      	movs	r3, #4
 800152e:	e04f      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_I2C_Init+0x168>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e012      	b.n	8001582 <HAL_I2C_Init+0x18e>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	0099      	lsls	r1, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x196>
 8001586:	2301      	movs	r3, #1
 8001588:	e022      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10e      	bne.n	80015b0 <HAL_I2C_Init+0x1bc>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1e58      	subs	r0, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	440b      	add	r3, r1
 80015a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a4:	3301      	adds	r3, #1
 80015a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ae:	e00f      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e58      	subs	r0, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	0099      	lsls	r1, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	6809      	ldr	r1, [r1, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6911      	ldr	r1, [r2, #16]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68d2      	ldr	r2, [r2, #12]
 800160a:	4311      	orrs	r1, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	430b      	orrs	r3, r1
 8001612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2220      	movs	r2, #32
 800164a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	000186a0 	.word	0x000186a0
 800166c:	001e847f 	.word	0x001e847f
 8001670:	003d08ff 	.word	0x003d08ff
 8001674:	431bde83 	.word	0x431bde83
 8001678:	10624dd3 	.word	0x10624dd3

0800167c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	4608      	mov	r0, r1
 8001686:	4611      	mov	r1, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4603      	mov	r3, r0
 800168c:	817b      	strh	r3, [r7, #10]
 800168e:	460b      	mov	r3, r1
 8001690:	813b      	strh	r3, [r7, #8]
 8001692:	4613      	mov	r3, r2
 8001694:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	f040 809a 	bne.w	80017dc <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_I2C_Mem_Read_IT+0x170>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_I2C_Mem_Read_IT+0x174>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	0a1a      	lsrs	r2, r3, #8
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009a      	lsls	r2, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f043 0220 	orr.w	r2, r3, #32
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e070      	b.n	80017de <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d0db      	beq.n	80016c2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_I2C_Mem_Read_IT+0x9c>
 8001714:	2302      	movs	r3, #2
 8001716:	e062      	b.n	80017de <HAL_I2C_Mem_Read_IT+0x162>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d007      	beq.n	800173e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2222      	movs	r2, #34	; 0x22
 8001752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a3a      	ldr	r2, [r7, #32]
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800176e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_I2C_Mem_Read_IT+0x178>)
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001780:	897a      	ldrh	r2, [r7, #10]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001786:	893a      	ldrh	r2, [r7, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800178c:	88fa      	ldrh	r2, [r7, #6]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017a6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d007      	beq.n	80017d8 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017d6:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000118 	.word	0x20000118
 80017f0:	14f8b589 	.word	0x14f8b589
 80017f4:	ffff0000 	.word	0xffff0000

080017f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001818:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001820:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	2b10      	cmp	r3, #16
 8001826:	d003      	beq.n	8001830 <HAL_I2C_EV_IRQHandler+0x38>
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2b40      	cmp	r3, #64	; 0x40
 800182c:	f040 80c1 	bne.w	80019b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_I2C_EV_IRQHandler+0x6e>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001850:	d003      	beq.n	800185a <HAL_I2C_EV_IRQHandler+0x62>
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001858:	d101      	bne.n	800185e <HAL_I2C_EV_IRQHandler+0x66>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_I2C_EV_IRQHandler+0x68>
 800185e:	2300      	movs	r3, #0
 8001860:	2b01      	cmp	r3, #1
 8001862:	f000 8132 	beq.w	8001aca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <HAL_I2C_EV_IRQHandler+0x92>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	0a5b      	lsrs	r3, r3, #9
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f001 fb5b 	bl	8002f38 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fcd2 	bl	800222c <I2C_Master_SB>
 8001888:	e092      	b.n	80019b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_I2C_EV_IRQHandler+0xb2>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	0a5b      	lsrs	r3, r3, #9
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fd48 	bl	8002338 <I2C_Master_ADD10>
 80018a8:	e082      	b.n	80019b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_I2C_EV_IRQHandler+0xd2>
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	0a5b      	lsrs	r3, r3, #9
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fd62 	bl	800238c <I2C_Master_ADDR>
 80018c8:	e072      	b.n	80019b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03b      	beq.n	800194e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e4:	f000 80f3 	beq.w	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	09db      	lsrs	r3, r3, #7
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <HAL_I2C_EV_IRQHandler+0x11c>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <HAL_I2C_EV_IRQHandler+0x11c>
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d103      	bne.n	8001914 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f94c 	bl	8001baa <I2C_MasterTransmit_TXE>
 8001912:	e04d      	b.n	80019b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80d6 	beq.w	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	0a5b      	lsrs	r3, r3, #9
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80cf 	beq.w	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	2b21      	cmp	r3, #33	; 0x21
 8001934:	d103      	bne.n	800193e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f9d3 	bl	8001ce2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193c:	e0c7      	b.n	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b40      	cmp	r3, #64	; 0x40
 8001942:	f040 80c4 	bne.w	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fa41 	bl	8001dce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800194c:	e0bf      	b.n	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800195c:	f000 80b7 	beq.w	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00f      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x194>
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	0a9b      	lsrs	r3, r3, #10
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x194>
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fab6 	bl	8001ef6 <I2C_MasterReceive_RXNE>
 800198a:	e011      	b.n	80019b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 809a 	beq.w	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	0a5b      	lsrs	r3, r3, #9
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8093 	beq.w	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fb55 	bl	8002058 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ae:	e08e      	b.n	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
 80019b0:	e08d      	b.n	8001ace <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e007      	b.n	80019d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_I2C_EV_IRQHandler+0x20e>
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	0a5b      	lsrs	r3, r3, #9
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00c      	beq.n	8001a06 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80019fc:	69b9      	ldr	r1, [r7, #24]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 ff13 	bl	800282a <I2C_Slave_ADDR>
 8001a04:	e066      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_I2C_EV_IRQHandler+0x22e>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	0a5b      	lsrs	r3, r3, #9
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 ff4e 	bl	80028c0 <I2C_Slave_STOPF>
 8001a24:	e056      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	2b21      	cmp	r3, #33	; 0x21
 8001a2a:	d002      	beq.n	8001a32 <HAL_I2C_EV_IRQHandler+0x23a>
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	2b29      	cmp	r3, #41	; 0x29
 8001a30:	d125      	bne.n	8001a7e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	09db      	lsrs	r3, r3, #7
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00f      	beq.n	8001a5e <HAL_I2C_EV_IRQHandler+0x266>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	0a9b      	lsrs	r3, r3, #10
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_I2C_EV_IRQHandler+0x266>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d103      	bne.n	8001a5e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fe29 	bl	80026ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a5c:	e039      	b.n	8001ad2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d033      	beq.n	8001ad2 <HAL_I2C_EV_IRQHandler+0x2da>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	0a5b      	lsrs	r3, r3, #9
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d02d      	beq.n	8001ad2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fe56 	bl	8002728 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a7c:	e029      	b.n	8001ad2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00f      	beq.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	0a9b      	lsrs	r3, r3, #10
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fe61 	bl	800276a <I2C_SlaveReceive_RXNE>
 8001aa8:	e014      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	0a5b      	lsrs	r3, r3, #9
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fe8f 	bl	80027e6 <I2C_SlaveReceive_BTF>
 8001ac8:	e004      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001aca:	bf00      	nop
 8001acc:	e002      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ad2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	70fb      	strb	r3, [r7, #3]
 8001b36:	4613      	mov	r3, r2
 8001b38:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bc0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d150      	bne.n	8001c72 <I2C_MasterTransmit_TXE+0xc8>
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b21      	cmp	r3, #33	; 0x21
 8001bd4:	d14d      	bne.n	8001c72 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d01d      	beq.n	8001c18 <I2C_MasterTransmit_TXE+0x6e>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d01a      	beq.n	8001c18 <I2C_MasterTransmit_TXE+0x6e>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001be8:	d016      	beq.n	8001c18 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bf8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2211      	movs	r2, #17
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff62 	bl	8001ada <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c16:	e060      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c26:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d107      	bne.n	8001c62 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff7d 	bl	8001b5a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c60:	e03b      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff35 	bl	8001ada <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c70:	e033      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b21      	cmp	r3, #33	; 0x21
 8001c76:	d005      	beq.n	8001c84 <I2C_MasterTransmit_TXE+0xda>
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	2b40      	cmp	r3, #64	; 0x40
 8001c7c:	d12d      	bne.n	8001cda <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b22      	cmp	r3, #34	; 0x22
 8001c82:	d12a      	bne.n	8001cda <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d108      	bne.n	8001ca0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c9e:	e01c      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	d103      	bne.n	8001cb4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f88e 	bl	8001dce <I2C_MemoryTransmit_TXE_BTF>
}
 8001cb2:	e012      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cd8:	e7ff      	b.n	8001cda <I2C_MasterTransmit_TXE+0x130>
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b21      	cmp	r3, #33	; 0x21
 8001cfa:	d164      	bne.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d012      	beq.n	8001d2c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d2a:	e04c      	b.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d01d      	beq.n	8001d6e <I2C_MasterTransmit_BTF+0x8c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d01a      	beq.n	8001d6e <I2C_MasterTransmit_BTF+0x8c>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d3e:	d016      	beq.n	8001d6e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d4e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2211      	movs	r2, #17
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff feb7 	bl	8001ada <HAL_I2C_MasterTxCpltCallback>
}
 8001d6c:	e02b      	b.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d7c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d107      	bne.n	8001db8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fed2 	bl	8001b5a <HAL_I2C_MemTxCpltCallback>
}
 8001db6:	e006      	b.n	8001dc6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fe8a 	bl	8001ada <HAL_I2C_MasterTxCpltCallback>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d11d      	bne.n	8001e22 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10b      	bne.n	8001e06 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfe:	1c9a      	adds	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001e04:	e073      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	121b      	asrs	r3, r3, #8
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e20:	e065      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10b      	bne.n	8001e42 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e40:	e055      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d151      	bne.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b22      	cmp	r3, #34	; 0x22
 8001e4e:	d10d      	bne.n	8001e6c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e6a:	e040      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b21      	cmp	r3, #33	; 0x21
 8001e7a:	d112      	bne.n	8001ea2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ea0:	e025      	b.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d120      	bne.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b21      	cmp	r3, #33	; 0x21
 8001eb0:	d11d      	bne.n	8001eee <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ec0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fe36 	bl	8001b5a <HAL_I2C_MemTxCpltCallback>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b22      	cmp	r3, #34	; 0x22
 8001f08:	f040 80a2 	bne.w	8002050 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d921      	bls.n	8001f5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	f040 8082 	bne.w	8002050 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001f5c:	e078      	b.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d074      	beq.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d002      	beq.n	8001f72 <I2C_MasterReceive_RXNE+0x7c>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d16e      	bne.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 ffae 	bl	8002ed4 <I2C_WaitOnSTOPRequestThroughIT>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d142      	bne.n	8002004 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b40      	cmp	r3, #64	; 0x40
 8001fd6:	d10a      	bne.n	8001fee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fdc1 	bl	8001b6e <HAL_I2C_MemRxCpltCallback>
}
 8001fec:	e030      	b.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2212      	movs	r2, #18
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fd76 	bl	8001aee <HAL_I2C_MasterRxCpltCallback>
}
 8002002:	e025      	b.n	8002050 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002012:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fd99 	bl	8001b82 <HAL_I2C_ErrorCallback>
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11b      	bne.n	80020a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80020a6:	e0bd      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d129      	bne.n	8002106 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d00a      	beq.n	80020de <I2C_MasterReceive_BTF+0x86>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d007      	beq.n	80020de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002104:	e08e      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d176      	bne.n	80021fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <I2C_MasterReceive_BTF+0xc4>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b10      	cmp	r3, #16
 800211a:	d108      	bne.n	800212e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e019      	b.n	8002162 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d002      	beq.n	800213a <I2C_MasterReceive_BTF+0xe2>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d108      	bne.n	800214c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e00a      	b.n	8002162 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d007      	beq.n	8002162 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d10a      	bne.n	80021e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fcc4 	bl	8001b6e <HAL_I2C_MemRxCpltCallback>
}
 80021e6:	e01d      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2212      	movs	r2, #18
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fc79 	bl	8001aee <HAL_I2C_MasterRxCpltCallback>
}
 80021fc:	e012      	b.n	8002224 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d117      	bne.n	8002270 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002258:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800225a:	e067      	b.n	800232c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	611a      	str	r2, [r3, #16]
}
 800226e:	e05d      	b.n	800232c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002278:	d133      	bne.n	80022e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b21      	cmp	r3, #33	; 0x21
 8002284:	d109      	bne.n	800229a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002296:	611a      	str	r2, [r3, #16]
 8002298:	e008      	b.n	80022ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <I2C_Master_SB+0x92>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d032      	beq.n	800232c <I2C_Master_SB+0x100>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02d      	beq.n	800232c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022de:	605a      	str	r2, [r3, #4]
}
 80022e0:	e024      	b.n	800232c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10e      	bne.n	8002308 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	11db      	asrs	r3, r3, #7
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f003 0306 	and.w	r3, r3, #6
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f063 030f 	orn	r3, r3, #15
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]
}
 8002306:	e011      	b.n	800232c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10d      	bne.n	800232c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	b29b      	uxth	r3, r3
 8002316:	11db      	asrs	r3, r3, #7
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 0306 	and.w	r3, r3, #6
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f063 030e 	orn	r3, r3, #14
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	b2da      	uxtb	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <I2C_Master_ADD10+0x26>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00c      	beq.n	8002380 <I2C_Master_ADD10+0x48>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800237e:	605a      	str	r2, [r3, #4]
  }
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800238c:	b480      	push	{r7}
 800238e:	b091      	sub	sp, #68	; 0x44
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800239a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b22      	cmp	r3, #34	; 0x22
 80023b4:	f040 8169 	bne.w	800268a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10f      	bne.n	80023e0 <I2C_Master_ADDR+0x54>
 80023c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d10b      	bne.n	80023e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	e160      	b.n	80026a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11d      	bne.n	8002424 <I2C_Master_ADDR+0x98>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023f0:	d118      	bne.n	8002424 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	651a      	str	r2, [r3, #80]	; 0x50
 8002422:	e13e      	b.n	80026a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d113      	bne.n	8002456 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e115      	b.n	8002682 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	f040 808a 	bne.w	8002576 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002468:	d137      	bne.n	80024da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002478:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002488:	d113      	bne.n	80024b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002498:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	e0e7      	b.n	8002682 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	623b      	str	r3, [r7, #32]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e0d3      	b.n	8002682 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d02e      	beq.n	800253e <I2C_Master_ADDR+0x1b2>
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d02b      	beq.n	800253e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	2b12      	cmp	r3, #18
 80024ea:	d102      	bne.n	80024f2 <I2C_Master_ADDR+0x166>
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d125      	bne.n	800253e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d00e      	beq.n	8002516 <I2C_Master_ADDR+0x18a>
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d00b      	beq.n	8002516 <I2C_Master_ADDR+0x18a>
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	2b10      	cmp	r3, #16
 8002502:	d008      	beq.n	8002516 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e007      	b.n	8002526 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002524:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	e0a1      	b.n	8002682 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e085      	b.n	8002682 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d14d      	bne.n	800261c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	2b04      	cmp	r3, #4
 8002584:	d016      	beq.n	80025b4 <I2C_Master_ADDR+0x228>
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	2b02      	cmp	r3, #2
 800258a:	d013      	beq.n	80025b4 <I2C_Master_ADDR+0x228>
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	2b10      	cmp	r3, #16
 8002590:	d010      	beq.n	80025b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d2:	d117      	bne.n	8002604 <I2C_Master_ADDR+0x278>
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025da:	d00b      	beq.n	80025f4 <I2C_Master_ADDR+0x268>
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d008      	beq.n	80025f4 <I2C_Master_ADDR+0x268>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d005      	beq.n	80025f4 <I2C_Master_ADDR+0x268>
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d002      	beq.n	80025f4 <I2C_Master_ADDR+0x268>
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d107      	bne.n	8002604 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002602:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	e032      	b.n	8002682 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800262a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263a:	d117      	bne.n	800266c <I2C_Master_ADDR+0x2e0>
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002642:	d00b      	beq.n	800265c <I2C_Master_ADDR+0x2d0>
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	2b01      	cmp	r3, #1
 8002648:	d008      	beq.n	800265c <I2C_Master_ADDR+0x2d0>
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	2b08      	cmp	r3, #8
 800264e:	d005      	beq.n	800265c <I2C_Master_ADDR+0x2d0>
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	2b10      	cmp	r3, #16
 8002654:	d002      	beq.n	800265c <I2C_Master_ADDR+0x2d0>
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2b20      	cmp	r3, #32
 800265a:	d107      	bne.n	800266c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800266a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002688:	e00b      	b.n	80026a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	e7ff      	b.n	80026a2 <I2C_Master_ADDR+0x316>
 80026a2:	bf00      	nop
 80026a4:	3744      	adds	r7, #68	; 0x44
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d02b      	beq.n	8002720 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d114      	bne.n	8002720 <I2C_SlaveTransmit_TXE+0x72>
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b29      	cmp	r3, #41	; 0x29
 80026fa:	d111      	bne.n	8002720 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2221      	movs	r2, #33	; 0x21
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2228      	movs	r2, #40	; 0x28
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff f9f1 	bl	8001b02 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d011      	beq.n	800275e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02c      	beq.n	80027de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d114      	bne.n	80027de <I2C_SlaveReceive_RXNE+0x74>
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b2a      	cmp	r3, #42	; 0x2a
 80027b8:	d111      	bne.n	80027de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2222      	movs	r2, #34	; 0x22
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2228      	movs	r2, #40	; 0x28
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff f99c 	bl	8001b16 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002844:	2b28      	cmp	r3, #40	; 0x28
 8002846:	d127      	bne.n	8002898 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002856:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	09db      	lsrs	r3, r3, #7
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	81bb      	strh	r3, [r7, #12]
 800287a:	e002      	b.n	8002882 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800288a:	89ba      	ldrh	r2, [r7, #12]
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff f94a 	bl	8001b2a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002896:	e00e      	b.n	80028b6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800291c:	d172      	bne.n	8002a04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b22      	cmp	r3, #34	; 0x22
 8002922:	d002      	beq.n	800292a <I2C_Slave_STOPF+0x6a>
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b2a      	cmp	r3, #42	; 0x2a
 8002928:	d135      	bne.n	8002996 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	b29a      	uxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe face 	bl	8000f04 <HAL_DMA_GetState>
 8002968:	4603      	mov	r3, r0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d049      	beq.n	8002a02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	4a69      	ldr	r2, [pc, #420]	; (8002b18 <I2C_Slave_STOPF+0x258>)
 8002974:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f916 	bl	8000bac <HAL_DMA_Abort_IT>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03d      	beq.n	8002a02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002990:	4610      	mov	r0, r2
 8002992:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002994:	e035      	b.n	8002a02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f043 0204 	orr.w	r2, r3, #4
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fa98 	bl	8000f04 <HAL_DMA_GetState>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d014      	beq.n	8002a04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <I2C_Slave_STOPF+0x258>)
 80029e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe f8e0 	bl	8000bac <HAL_DMA_Abort_IT>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029fc:	4610      	mov	r0, r2
 80029fe:	4798      	blx	r3
 8002a00:	e000      	b.n	8002a04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03e      	beq.n	8002a8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d112      	bne.n	8002a42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d112      	bne.n	8002a76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0204 	orr.w	r2, r3, #4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f843 	bl	8002b20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a9a:	e039      	b.n	8002b10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002aa0:	d109      	bne.n	8002ab6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2228      	movs	r2, #40	; 0x28
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff f830 	bl	8001b16 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b28      	cmp	r3, #40	; 0x28
 8002ac0:	d111      	bne.n	8002ae6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <I2C_Slave_STOPF+0x25c>)
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff f831 	bl	8001b46 <HAL_I2C_ListenCpltCallback>
}
 8002ae4:	e014      	b.n	8002b10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	2b22      	cmp	r3, #34	; 0x22
 8002aec:	d002      	beq.n	8002af4 <I2C_Slave_STOPF+0x234>
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b22      	cmp	r3, #34	; 0x22
 8002af2:	d10d      	bne.n	8002b10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff f803 	bl	8001b16 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	08002d85 	.word	0x08002d85
 8002b1c:	ffff0000 	.word	0xffff0000

08002b20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b38:	7bbb      	ldrb	r3, [r7, #14]
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d002      	beq.n	8002b44 <I2C_ITError+0x24>
 8002b3e:	7bbb      	ldrb	r3, [r7, #14]
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d10a      	bne.n	8002b5a <I2C_ITError+0x3a>
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b22      	cmp	r3, #34	; 0x22
 8002b48:	d107      	bne.n	8002b5a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b58:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b60:	2b28      	cmp	r3, #40	; 0x28
 8002b62:	d107      	bne.n	8002b74 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2228      	movs	r2, #40	; 0x28
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b72:	e015      	b.n	8002ba0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b82:	d00a      	beq.n	8002b9a <I2C_ITError+0x7a>
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b60      	cmp	r3, #96	; 0x60
 8002b88:	d007      	beq.n	8002b9a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bae:	d162      	bne.n	8002c76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d020      	beq.n	8002c10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	4a6a      	ldr	r2, [pc, #424]	; (8002d7c <I2C_ITError+0x25c>)
 8002bd4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd ffe6 	bl	8000bac <HAL_DMA_Abort_IT>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8089 	beq.w	8002cfa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4798      	blx	r3
 8002c0e:	e074      	b.n	8002cfa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	4a59      	ldr	r2, [pc, #356]	; (8002d7c <I2C_ITError+0x25c>)
 8002c16:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd ffc5 	bl	8000bac <HAL_DMA_Abort_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d068      	beq.n	8002cfa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d10b      	bne.n	8002c4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c70:	4610      	mov	r0, r2
 8002c72:	4798      	blx	r3
 8002c74:	e041      	b.n	8002cfa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b60      	cmp	r3, #96	; 0x60
 8002c80:	d125      	bne.n	8002cce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d10b      	bne.n	8002cb6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe ff65 	bl	8001b96 <HAL_I2C_AbortCpltCallback>
 8002ccc:	e015      	b.n	8002cfa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d10b      	bne.n	8002cf4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fe ff44 	bl	8001b82 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10e      	bne.n	8002d28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d104      	bne.n	8002d28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d113      	bne.n	8002d74 <I2C_ITError+0x254>
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b28      	cmp	r3, #40	; 0x28
 8002d50:	d110      	bne.n	8002d74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <I2C_ITError+0x260>)
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fee9 	bl	8001b46 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	08002d85 	.word	0x08002d85
 8002d80:	ffff0000 	.word	0xffff0000

08002d84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d9e:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <I2C_DMAAbort+0x148>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	08db      	lsrs	r3, r3, #3
 8002da4:	4a4a      	ldr	r2, [pc, #296]	; (8002ed0 <I2C_DMAAbort+0x14c>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a1a      	lsrs	r2, r3, #8
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00da      	lsls	r2, r3, #3
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0220 	orr.w	r2, r3, #32
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002dca:	e00a      	b.n	8002de2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de0:	d0ea      	beq.n	8002db8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	2200      	movs	r2, #0
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	2200      	movs	r2, #0
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	2200      	movs	r2, #0
 8002e26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	2200      	movs	r2, #0
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b60      	cmp	r3, #96	; 0x60
 8002e52:	d10e      	bne.n	8002e72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7fe fe93 	bl	8001b96 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e70:	e027      	b.n	8002ec2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e78:	2b28      	cmp	r3, #40	; 0x28
 8002e7a:	d117      	bne.n	8002eac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2228      	movs	r2, #40	; 0x28
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eaa:	e007      	b.n	8002ebc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ebc:	6978      	ldr	r0, [r7, #20]
 8002ebe:	f7fe fe60 	bl	8001b82 <HAL_I2C_ErrorCallback>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000118 	.word	0x20000118
 8002ed0:	14f8b589 	.word	0x14f8b589

08002ed4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	08db      	lsrs	r3, r3, #3
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	0a1a      	lsrs	r2, r3, #8
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e008      	b.n	8002f24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f20:	d0e9      	beq.n	8002ef6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20000118 	.word	0x20000118
 8002f34:	14f8b589 	.word	0x14f8b589

08002f38 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f48:	d103      	bne.n	8002f52 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f50:	e007      	b.n	8002f62 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f5a:	d102      	bne.n	8002f62 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f70:	b08f      	sub	sp, #60	; 0x3c
 8002f72:	af0a      	add	r7, sp, #40	; 0x28
 8002f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e10f      	b.n	80031a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f008 fc5e 	bl	800b85c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fb9f 	bl	8007702 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	687e      	ldr	r6, [r7, #4]
 8002fcc:	466d      	mov	r5, sp
 8002fce:	f106 0410 	add.w	r4, r6, #16
 8002fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fe2:	1d33      	adds	r3, r6, #4
 8002fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe6:	6838      	ldr	r0, [r7, #0]
 8002fe8:	f004 fa76 	bl	80074d8 <USB_CoreInit>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0d0      	b.n	80031a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f004 fb8d 	bl	8007724 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e04a      	b.n	80030a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	333d      	adds	r3, #61	; 0x3d
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	333c      	adds	r3, #60	; 0x3c
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	b298      	uxth	r0, r3
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3342      	adds	r3, #66	; 0x42
 800304c:	4602      	mov	r2, r0
 800304e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	333f      	adds	r3, #63	; 0x3f
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3344      	adds	r3, #68	; 0x44
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3348      	adds	r3, #72	; 0x48
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3350      	adds	r3, #80	; 0x50
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	3301      	adds	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3af      	bcc.n	8003010 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e044      	b.n	8003140 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3301      	adds	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d3b5      	bcc.n	80030b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	687e      	ldr	r6, [r7, #4]
 8003152:	466d      	mov	r5, sp
 8003154:	f106 0410 	add.w	r4, r6, #16
 8003158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003164:	e885 0003 	stmia.w	r5, {r0, r1}
 8003168:	1d33      	adds	r3, r6, #4
 800316a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316c:	6838      	ldr	r0, [r7, #0]
 800316e:	f004 fb25 	bl	80077bc <USB_DevInit>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e00d      	b.n	80031a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f005 fba1 	bl	80088e0 <USB_DevDisconnect>

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_Start+0x1c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e020      	b.n	8003206 <HAL_PCD_Start+0x5e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d109      	bne.n	80031e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d005      	beq.n	80031e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f004 fa77 	bl	80076e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 fb51 	bl	800889e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800320e:	b590      	push	{r4, r7, lr}
 8003210:	b08d      	sub	sp, #52	; 0x34
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f005 fc0f 	bl	8008a48 <USB_GetMode>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 839d 	bne.w	800396c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f005 fb73 	bl	8008922 <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8393 	beq.w	800396a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f005 fb6a 	bl	8008922 <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d107      	bne.n	8003268 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f002 0202 	and.w	r2, r2, #2
 8003266:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f005 fb58 	bl	8008922 <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	d161      	bne.n	8003340 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0210 	bic.w	r2, r2, #16
 800328a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	0c5b      	lsrs	r3, r3, #17
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d124      	bne.n	8003302 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d035      	beq.n	8003330 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	6a38      	ldr	r0, [r7, #32]
 80032d8:	f005 f98f 	bl	80085fa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e8:	441a      	add	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fa:	441a      	add	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	619a      	str	r2, [r3, #24]
 8003300:	e016      	b.n	8003330 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	0c5b      	lsrs	r3, r3, #17
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	2b06      	cmp	r3, #6
 800330c:	d110      	bne.n	8003330 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003314:	2208      	movs	r2, #8
 8003316:	4619      	mov	r1, r3
 8003318:	6a38      	ldr	r0, [r7, #32]
 800331a:	f005 f96e 	bl	80085fa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332a:	441a      	add	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0210 	orr.w	r2, r2, #16
 800333e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f005 faec 	bl	8008922 <USB_ReadInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003350:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003354:	d16e      	bne.n	8003434 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f005 faf2 	bl	8008948 <USB_ReadDevAllOutEpInterrupt>
 8003364:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003366:	e062      	b.n	800342e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d057      	beq.n	8003422 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f005 fb17 	bl	80089b0 <USB_ReadDevOutEPInterrupt>
 8003382:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339a:	461a      	mov	r2, r3
 800339c:	2301      	movs	r3, #1
 800339e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fdb0 	bl	8003f08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	2308      	movs	r3, #8
 80033c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 feaa 	bl	8004120 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	461a      	mov	r2, r3
 80033e4:	2310      	movs	r3, #16
 80033e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2320      	movs	r3, #32
 8003402:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003420:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	3301      	adds	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d199      	bne.n	8003368 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f005 fa72 	bl	8008922 <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003448:	f040 80c0 	bne.w	80035cc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f005 fa93 	bl	800897c <USB_ReadDevAllInEpInterrupt>
 8003456:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800345c:	e0b2      	b.n	80035c4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a7 	beq.w	80035b8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f005 fab9 	bl	80089ec <USB_ReadDevInEPInterrupt>
 800347a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d057      	beq.n	8003536 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	2201      	movs	r2, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69f9      	ldr	r1, [r7, #28]
 80034a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a6:	4013      	ands	r3, r2
 80034a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d132      	bne.n	800352a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3348      	adds	r3, #72	; 0x48
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	3344      	adds	r3, #68	; 0x44
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4419      	add	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4403      	add	r3, r0
 80034f8:	3348      	adds	r3, #72	; 0x48
 80034fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <HAL_PCD_IRQHandler+0x31c>
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3350      	adds	r3, #80	; 0x50
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d108      	bne.n	800352a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003522:	461a      	mov	r2, r3
 8003524:	2101      	movs	r1, #1
 8003526:	f005 fac1 	bl	8008aac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f008 fa22 	bl	800b97a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	461a      	mov	r2, r3
 800354e:	2308      	movs	r3, #8
 8003550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	461a      	mov	r2, r3
 800356a:	2310      	movs	r3, #16
 800356c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003584:	461a      	mov	r2, r3
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a0:	461a      	mov	r2, r3
 80035a2:	2302      	movs	r3, #2
 80035a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fc1b 	bl	8003dee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	3301      	adds	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f47f af49 	bne.w	800345e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f005 f9a6 	bl	8008922 <USB_ReadInterrupts>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e0:	d122      	bne.n	8003628 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d108      	bne.n	8003612 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003608:	2100      	movs	r1, #0
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fe26 	bl	800425c <HAL_PCDEx_LPM_Callback>
 8003610:	e002      	b.n	8003618 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f008 fa1e 	bl	800ba54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f005 f978 	bl	8008922 <USB_ReadInterrupts>
 8003632:	4603      	mov	r3, r0
 8003634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363c:	d112      	bne.n	8003664 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f008 f9da 	bl	800ba08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003662:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f005 f95a 	bl	8008922 <USB_ReadInterrupts>
 800366e:	4603      	mov	r3, r0
 8003670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003678:	f040 80c7 	bne.w	800380a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2110      	movs	r1, #16
 8003696:	4618      	mov	r0, r3
 8003698:	f004 f9f4 	bl	8007a84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a0:	e056      	b.n	8003750 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ae:	461a      	mov	r2, r3
 80036b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036d4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e6:	0151      	lsls	r1, r2, #5
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	440a      	add	r2, r1
 80036ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	461a      	mov	r2, r3
 8003704:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003708:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371a:	0151      	lsls	r1, r2, #5
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	440a      	add	r2, r1
 8003720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003724:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003728:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	440a      	add	r2, r1
 8003740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003744:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003748:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	3301      	adds	r3, #1
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003756:	429a      	cmp	r2, r3
 8003758:	d3a3      	bcc.n	80036a2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800376c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003786:	f043 030b 	orr.w	r3, r3, #11
 800378a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379c:	f043 030b 	orr.w	r3, r3, #11
 80037a0:	6453      	str	r3, [r2, #68]	; 0x44
 80037a2:	e015      	b.n	80037d0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f043 030b 	orr.w	r3, r3, #11
 80037ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f4:	461a      	mov	r2, r3
 80037f6:	f005 f959 	bl	8008aac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f005 f887 	bl	8008922 <USB_ReadInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	d124      	bne.n	800386a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f005 f91d 	bl	8008a64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f004 f985 	bl	8007b3e <USB_GetDevSpeed>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681c      	ldr	r4, [r3, #0]
 8003840:	f001 f936 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8003844:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4620      	mov	r0, r4
 8003850:	f003 fea4 	bl	800759c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f008 f8b8 	bl	800b9ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003868:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f005 f857 	bl	8008922 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d10a      	bne.n	8003894 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f008 f895 	bl	800b9ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f002 0208 	and.w	r2, r2, #8
 8003892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f005 f842 	bl	8008922 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a8:	d10f      	bne.n	80038ca <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f008 f8ed 	bl	800ba94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f005 f827 	bl	8008922 <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038de:	d10f      	bne.n	8003900 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f008 f8c0 	bl	800ba70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f005 f80c 	bl	8008922 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d10a      	bne.n	800392c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f008 f8ce 	bl	800bab8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800392a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f004 fff6 	bl	8008922 <USB_ReadInterrupts>
 8003936:	4603      	mov	r3, r0
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d115      	bne.n	800396c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f008 f8be 	bl	800bad4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	e000      	b.n	800396c <HAL_PCD_IRQHandler+0x75e>
      return;
 800396a:	bf00      	nop
    }
  }
}
 800396c:	3734      	adds	r7, #52	; 0x34
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_PCD_SetAddress+0x1a>
 8003988:	2302      	movs	r3, #2
 800398a:	e013      	b.n	80039b4 <HAL_PCD_SetAddress+0x42>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f004 ff54 	bl	8008852 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	70fb      	strb	r3, [r7, #3]
 80039ce:	460b      	mov	r3, r1
 80039d0:	803b      	strh	r3, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da0f      	bge.n	8003a02 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 020f 	and.w	r2, r3, #15
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	3338      	adds	r3, #56	; 0x38
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	3304      	adds	r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	705a      	strb	r2, [r3, #1]
 8003a00:	e00f      	b.n	8003a22 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	3304      	adds	r3, #4
 8003a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a2e:	883a      	ldrh	r2, [r7, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	78ba      	ldrb	r2, [r7, #2]
 8003a38:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d004      	beq.n	8003a4c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a4c:	78bb      	ldrb	r3, [r7, #2]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d102      	bne.n	8003a58 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_PCD_EP_Open+0xaa>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e00e      	b.n	8003a84 <HAL_PCD_EP_Open+0xc8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f004 f887 	bl	8007b88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a82:	7afb      	ldrb	r3, [r7, #11]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	da0f      	bge.n	8003ac0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 020f 	and.w	r2, r3, #15
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	3338      	adds	r3, #56	; 0x38
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	705a      	strb	r2, [r3, #1]
 8003abe:	e00f      	b.n	8003ae0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_PCD_EP_Close+0x6e>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e00e      	b.n	8003b18 <HAL_PCD_EP_Close+0x8c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68f9      	ldr	r1, [r7, #12]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 f8c5 	bl	8007c98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b30:	7afb      	ldrb	r3, [r7, #11]
 8003b32:	f003 020f 	and.w	r2, r3, #15
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	f004 fba0 	bl	80082d8 <USB_EP0StartXfer>
 8003b98:	e008      	b.n	8003bac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6979      	ldr	r1, [r7, #20]
 8003ba8:	f004 f952 	bl	8007e50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bd8:	681b      	ldr	r3, [r3, #0]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	f003 020f 	and.w	r2, r3, #15
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3338      	adds	r3, #56	; 0x38
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2201      	movs	r2, #1
 8003c24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c40:	7afb      	ldrb	r3, [r7, #11]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	6979      	ldr	r1, [r7, #20]
 8003c58:	f004 fb3e 	bl	80082d8 <USB_EP0StartXfer>
 8003c5c:	e008      	b.n	8003c70 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	f004 f8f0 	bl	8007e50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d901      	bls.n	8003c98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e050      	b.n	8003d3a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da0f      	bge.n	8003cc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 020f 	and.w	r2, r3, #15
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	3338      	adds	r3, #56	; 0x38
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	705a      	strb	r2, [r3, #1]
 8003cbe:	e00d      	b.n	8003cdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_PCD_EP_SetStall+0x82>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e01e      	b.n	8003d3a <HAL_PCD_EP_SetStall+0xc0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 fccd 	bl	80086aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	b2d9      	uxtb	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f004 febe 	bl	8008aac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d901      	bls.n	8003d60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e042      	b.n	8003de6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da0f      	bge.n	8003d88 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	3338      	adds	r3, #56	; 0x38
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	705a      	strb	r2, [r3, #1]
 8003d86:	e00f      	b.n	8003da8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 020f 	and.w	r2, r3, #15
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3304      	adds	r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_PCD_EP_ClrStall+0x86>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e00e      	b.n	8003de6 <HAL_PCD_EP_ClrStall+0xa4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68f9      	ldr	r1, [r7, #12]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 fcd5 	bl	8008786 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b08a      	sub	sp, #40	; 0x28
 8003df2:	af02      	add	r7, sp, #8
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	3338      	adds	r3, #56	; 0x38
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	3304      	adds	r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d901      	bls.n	8003e26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06c      	b.n	8003f00 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d902      	bls.n	8003e42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3303      	adds	r3, #3
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e4a:	e02b      	b.n	8003ea4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d902      	bls.n	8003e68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3303      	adds	r3, #3
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68d9      	ldr	r1, [r3, #12]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4603      	mov	r3, r0
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f004 fb79 	bl	800857e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d809      	bhi.n	8003ece <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d203      	bcs.n	8003ece <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1be      	bne.n	8003e4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d811      	bhi.n	8003efe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	6939      	ldr	r1, [r7, #16]
 8003ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003efa:	4013      	ands	r3, r2
 8003efc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	333c      	adds	r3, #60	; 0x3c
 8003f20:	3304      	adds	r3, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	f040 80a0 	bne.w	8004080 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a72      	ldr	r2, [pc, #456]	; (8004118 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f240 80dd 	bls.w	800410e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80d7 	beq.w	800410e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f72:	6093      	str	r3, [r2, #8]
 8003f74:	e0cb      	b.n	800410e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2320      	movs	r3, #32
 8003f90:	6093      	str	r3, [r2, #8]
 8003f92:	e0bc      	b.n	800410e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 80b7 	bne.w	800410e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a5d      	ldr	r2, [pc, #372]	; (8004118 <PCD_EP_OutXfrComplete_int+0x210>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d90f      	bls.n	8003fc8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc4:	6093      	str	r3, [r2, #8]
 8003fc6:	e0a2      	b.n	800410e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fda:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003fee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4403      	add	r3, r0
 8003ffe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004002:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004016:	6819      	ldr	r1, [r3, #0]
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4403      	add	r3, r0
 8004026:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4419      	add	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4403      	add	r3, r0
 800403c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004040:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d114      	bne.n	8004072 <PCD_EP_OutXfrComplete_int+0x16a>
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d108      	bne.n	8004072 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800406a:	461a      	mov	r2, r3
 800406c:	2101      	movs	r1, #1
 800406e:	f004 fd1d 	bl	8008aac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f007 fc63 	bl	800b944 <HAL_PCD_DataOutStageCallback>
 800407e:	e046      	b.n	800410e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a26      	ldr	r2, [pc, #152]	; (800411c <PCD_EP_OutXfrComplete_int+0x214>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d124      	bne.n	80040d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	461a      	mov	r2, r3
 80040a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a4:	6093      	str	r3, [r2, #8]
 80040a6:	e032      	b.n	800410e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	461a      	mov	r2, r3
 80040c0:	2320      	movs	r3, #32
 80040c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f007 fc3a 	bl	800b944 <HAL_PCD_DataOutStageCallback>
 80040d0:	e01d      	b.n	800410e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d114      	bne.n	8004102 <PCD_EP_OutXfrComplete_int+0x1fa>
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d108      	bne.n	8004102 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040fa:	461a      	mov	r2, r3
 80040fc:	2100      	movs	r1, #0
 80040fe:	f004 fcd5 	bl	8008aac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f007 fc1b 	bl	800b944 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	4f54300a 	.word	0x4f54300a
 800411c:	4f54310a 	.word	0x4f54310a

08004120 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	333c      	adds	r3, #60	; 0x3c
 8004138:	3304      	adds	r3, #4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d90e      	bls.n	8004174 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004172:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f007 fbd3 	bl	800b920 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d90c      	bls.n	800419c <PCD_EP_OutSetupPacket_int+0x7c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d108      	bne.n	800419c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004194:	461a      	mov	r2, r3
 8004196:	2101      	movs	r1, #1
 8004198:	f004 fc88 	bl	8008aac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	4f54300a 	.word	0x4f54300a

080041ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
 80041b8:	4613      	mov	r3, r2
 80041ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041ca:	883b      	ldrh	r3, [r7, #0]
 80041cc:	0419      	lsls	r1, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
 80041d8:	e028      	b.n	800422c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	e00d      	b.n	800420a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	3340      	adds	r3, #64	; 0x40
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4413      	add	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	3301      	adds	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	3b01      	subs	r3, #1
 8004210:	429a      	cmp	r2, r3
 8004212:	d3ec      	bcc.n	80041ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004214:	883b      	ldrh	r3, [r7, #0]
 8004216:	0418      	lsls	r0, r3, #16
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	3b01      	subs	r3, #1
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	4302      	orrs	r2, r0
 8004224:	3340      	adds	r3, #64	; 0x40
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e262      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d075      	beq.n	800437e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004292:	4ba3      	ldr	r3, [pc, #652]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d00c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429e:	4ba0      	ldr	r3, [pc, #640]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d112      	bne.n	80042d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4b9d      	ldr	r3, [pc, #628]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	4b99      	ldr	r3, [pc, #612]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d05b      	beq.n	800437c <HAL_RCC_OscConfig+0x108>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d157      	bne.n	800437c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e23d      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d106      	bne.n	80042e8 <HAL_RCC_OscConfig+0x74>
 80042da:	4b91      	ldr	r3, [pc, #580]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a90      	ldr	r2, [pc, #576]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e01d      	b.n	8004324 <HAL_RCC_OscConfig+0xb0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x98>
 80042f2:	4b8b      	ldr	r3, [pc, #556]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a8a      	ldr	r2, [pc, #552]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a87      	ldr	r2, [pc, #540]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0xb0>
 800430c:	4b84      	ldr	r3, [pc, #528]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a83      	ldr	r2, [pc, #524]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b81      	ldr	r3, [pc, #516]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a80      	ldr	r2, [pc, #512]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fc fa4e 	bl	80007cc <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004334:	f7fc fa4a 	bl	80007cc <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e202      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0xc0>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fc fa3a 	bl	80007cc <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800435c:	f7fc fa36 	bl	80007cc <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e1ee      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0xe8>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d063      	beq.n	8004452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800438a:	4b65      	ldr	r3, [pc, #404]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b62      	ldr	r3, [pc, #392]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b5f      	ldr	r3, [pc, #380]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	4b5c      	ldr	r3, [pc, #368]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x152>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1c2      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b56      	ldr	r3, [pc, #344]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4952      	ldr	r1, [pc, #328]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	e03a      	b.n	8004452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e4:	4b4f      	ldr	r3, [pc, #316]	; (8004524 <HAL_RCC_OscConfig+0x2b0>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fc f9ef 	bl	80007cc <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fc f9eb 	bl	80007cc <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1a3      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4940      	ldr	r1, [pc, #256]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	e015      	b.n	8004452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004426:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <HAL_RCC_OscConfig+0x2b0>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fc f9ce 	bl	80007cc <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004434:	f7fc f9ca 	bl	80007cc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e182      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	4b36      	ldr	r3, [pc, #216]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d030      	beq.n	80044c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004466:	4b30      	ldr	r3, [pc, #192]	; (8004528 <HAL_RCC_OscConfig+0x2b4>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fc f9ae 	bl	80007cc <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004474:	f7fc f9aa 	bl	80007cc <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e162      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	4b26      	ldr	r3, [pc, #152]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x200>
 8004492:	e015      	b.n	80044c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0x2b4>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449a:	f7fc f997 	bl	80007cc <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fc f993 	bl	80007cc <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e14b      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 809e 	beq.w	800460a <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ec:	6413      	str	r3, [r2, #64]	; 0x40
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_OscConfig+0x2b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d121      	bne.n	800454e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_RCC_OscConfig+0x2b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a07      	ldr	r2, [pc, #28]	; (800452c <HAL_RCC_OscConfig+0x2b8>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004516:	f7fc f959 	bl	80007cc <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	e011      	b.n	8004542 <HAL_RCC_OscConfig+0x2ce>
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	42470000 	.word	0x42470000
 8004528:	42470e80 	.word	0x42470e80
 800452c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004530:	f7fc f94c 	bl	80007cc <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e104      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b84      	ldr	r3, [pc, #528]	; (8004754 <HAL_RCC_OscConfig+0x4e0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d106      	bne.n	8004564 <HAL_RCC_OscConfig+0x2f0>
 8004556:	4b80      	ldr	r3, [pc, #512]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a7f      	ldr	r2, [pc, #508]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
 8004562:	e01c      	b.n	800459e <HAL_RCC_OscConfig+0x32a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b05      	cmp	r3, #5
 800456a:	d10c      	bne.n	8004586 <HAL_RCC_OscConfig+0x312>
 800456c:	4b7a      	ldr	r3, [pc, #488]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a79      	ldr	r2, [pc, #484]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
 8004578:	4b77      	ldr	r3, [pc, #476]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a76      	ldr	r2, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	e00b      	b.n	800459e <HAL_RCC_OscConfig+0x32a>
 8004586:	4b74      	ldr	r3, [pc, #464]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	4a73      	ldr	r2, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	6713      	str	r3, [r2, #112]	; 0x70
 8004592:	4b71      	ldr	r3, [pc, #452]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a70      	ldr	r2, [pc, #448]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d014      	beq.n	80045d0 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a6:	f7fc f911 	bl	80007cc <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	e009      	b.n	80045c2 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fc f90d 	bl	80007cc <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0c4      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	4b65      	ldr	r3, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ef      	beq.n	80045ae <HAL_RCC_OscConfig+0x33a>
 80045ce:	e013      	b.n	80045f8 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d0:	f7fc f8fc 	bl	80007cc <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d6:	e009      	b.n	80045ec <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fc f8f8 	bl	80007cc <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0af      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b5a      	ldr	r3, [pc, #360]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ef      	bne.n	80045d8 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	4a55      	ldr	r2, [pc, #340]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 809b 	beq.w	800474a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004614:	4b50      	ldr	r3, [pc, #320]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d05c      	beq.n	80046da <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d141      	bne.n	80046ac <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b4c      	ldr	r3, [pc, #304]	; (800475c <HAL_RCC_OscConfig+0x4e8>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fc f8cd 	bl	80007cc <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fc f8c9 	bl	80007cc <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e081      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	019b      	lsls	r3, r3, #6
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	061b      	lsls	r3, r3, #24
 8004678:	4937      	ldr	r1, [pc, #220]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 800467a:	4313      	orrs	r3, r2
 800467c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467e:	4b37      	ldr	r3, [pc, #220]	; (800475c <HAL_RCC_OscConfig+0x4e8>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fc f8a2 	bl	80007cc <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468c:	f7fc f89e 	bl	80007cc <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e056      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	4b2e      	ldr	r3, [pc, #184]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x418>
 80046aa:	e04e      	b.n	800474a <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fc f88b 	bl	80007cc <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fc f887 	bl	80007cc <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e03f      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x446>
 80046d8:	e037      	b.n	800474a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e032      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e6:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <HAL_RCC_OscConfig+0x4e4>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d028      	beq.n	8004746 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d121      	bne.n	8004746 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d11a      	bne.n	8004746 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004716:	4013      	ands	r3, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800471c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471e:	4293      	cmp	r3, r2
 8004720:	d111      	bne.n	8004746 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	3b01      	subs	r3, #1
 8004730:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d107      	bne.n	8004746 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40007000 	.word	0x40007000
 8004758:	40023800 	.word	0x40023800
 800475c:	42470060 	.word	0x42470060

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0cc      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90c      	bls.n	800479c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b8      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a58      	ldr	r2, [pc, #352]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a52      	ldr	r2, [pc, #328]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	494d      	ldr	r1, [pc, #308]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d044      	beq.n	8004880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d119      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d003      	beq.n	800481e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	2b03      	cmp	r3, #3
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482e:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e067      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4934      	ldr	r1, [pc, #208]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004850:	f7fb ffbc 	bl	80007cc <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7fb ffb8 	bl	80007cc <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e04f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 020c 	and.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	429a      	cmp	r2, r3
 800487e:	d1eb      	bne.n	8004858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d20c      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e032      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4916      	ldr	r1, [pc, #88]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	490e      	ldr	r1, [pc, #56]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048e6:	f000 f82d 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	490a      	ldr	r1, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb ff1c 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023c00 	.word	0x40023c00
 800491c:	40023800 	.word	0x40023800
 8004920:	0800c1d0 	.word	0x0800c1d0
 8004924:	20000118 	.word	0x20000118
 8004928:	20000000 	.word	0x20000000

0800492c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <HAL_RCC_EnableCSS+0x14>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	4247004c 	.word	0x4247004c

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	b5b0      	push	{r4, r5, r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800494a:	2100      	movs	r1, #0
 800494c:	6079      	str	r1, [r7, #4]
 800494e:	2100      	movs	r1, #0
 8004950:	60f9      	str	r1, [r7, #12]
 8004952:	2100      	movs	r1, #0
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004956:	2100      	movs	r1, #0
 8004958:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495a:	4952      	ldr	r1, [pc, #328]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800495c:	6889      	ldr	r1, [r1, #8]
 800495e:	f001 010c 	and.w	r1, r1, #12
 8004962:	2908      	cmp	r1, #8
 8004964:	d00d      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x3e>
 8004966:	2908      	cmp	r1, #8
 8004968:	f200 8094 	bhi.w	8004a94 <HAL_RCC_GetSysClockFreq+0x150>
 800496c:	2900      	cmp	r1, #0
 800496e:	d002      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x32>
 8004970:	2904      	cmp	r1, #4
 8004972:	d003      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x38>
 8004974:	e08e      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004976:	4b4c      	ldr	r3, [pc, #304]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004978:	60bb      	str	r3, [r7, #8]
       break;
 800497a:	e08e      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497c:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <HAL_RCC_GetSysClockFreq+0x168>)
 800497e:	60bb      	str	r3, [r7, #8]
      break;
 8004980:	e08b      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004982:	4948      	ldr	r1, [pc, #288]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004984:	6849      	ldr	r1, [r1, #4]
 8004986:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800498a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498c:	4945      	ldr	r1, [pc, #276]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800498e:	6849      	ldr	r1, [r1, #4]
 8004990:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004994:	2900      	cmp	r1, #0
 8004996:	d024      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004998:	4942      	ldr	r1, [pc, #264]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800499a:	6849      	ldr	r1, [r1, #4]
 800499c:	0989      	lsrs	r1, r1, #6
 800499e:	4608      	mov	r0, r1
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80049a8:	f04f 0500 	mov.w	r5, #0
 80049ac:	ea00 0204 	and.w	r2, r0, r4
 80049b0:	ea01 0305 	and.w	r3, r1, r5
 80049b4:	493d      	ldr	r1, [pc, #244]	; (8004aac <HAL_RCC_GetSysClockFreq+0x168>)
 80049b6:	fb01 f003 	mul.w	r0, r1, r3
 80049ba:	2100      	movs	r1, #0
 80049bc:	fb01 f102 	mul.w	r1, r1, r2
 80049c0:	1844      	adds	r4, r0, r1
 80049c2:	493a      	ldr	r1, [pc, #232]	; (8004aac <HAL_RCC_GetSysClockFreq+0x168>)
 80049c4:	fba2 0101 	umull	r0, r1, r2, r1
 80049c8:	1863      	adds	r3, r4, r1
 80049ca:	4619      	mov	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f7fb fc00 	bl	80001d8 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e04a      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	461a      	mov	r2, r3
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	ea02 0400 	and.w	r4, r2, r0
 80049fa:	ea03 0501 	and.w	r5, r3, r1
 80049fe:	4620      	mov	r0, r4
 8004a00:	4629      	mov	r1, r5
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	014b      	lsls	r3, r1, #5
 8004a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a10:	0142      	lsls	r2, r0, #5
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	1b00      	subs	r0, r0, r4
 8004a18:	eb61 0105 	sbc.w	r1, r1, r5
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	018b      	lsls	r3, r1, #6
 8004a26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a2a:	0182      	lsls	r2, r0, #6
 8004a2c:	1a12      	subs	r2, r2, r0
 8004a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	00d9      	lsls	r1, r3, #3
 8004a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a40:	00d0      	lsls	r0, r2, #3
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	1912      	adds	r2, r2, r4
 8004a48:	eb45 0303 	adc.w	r3, r5, r3
 8004a4c:	f04f 0000 	mov.w	r0, #0
 8004a50:	f04f 0100 	mov.w	r1, #0
 8004a54:	0299      	lsls	r1, r3, #10
 8004a56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a5a:	0290      	lsls	r0, r2, #10
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	f7fb fbb4 	bl	80001d8 <__aeabi_uldivmod>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4613      	mov	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	3301      	adds	r3, #1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	60bb      	str	r3, [r7, #8]
      break;
 8004a92:	e002      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a96:	60bb      	str	r3, [r7, #8]
      break;
 8004a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	016e3600 	.word	0x016e3600

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000118 	.word	0x20000118

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004acc:	f7ff fff0 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	0800c1e0 	.word	0x0800c1e0

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af4:	f7ff ffdc 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0b5b      	lsrs	r3, r3, #13
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	0800c1e0 	.word	0x0800c1e0

08004b18 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d104      	bne.n	8004b32 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004b28:	f000 f80a 	bl	8004b40 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004b2c:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <HAL_RCC_NMI_IRQHandler+0x24>)
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	701a      	strb	r2, [r3, #0]
  }
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	4002380e 	.word	0x4002380e

08004b40 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d038      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b78:	4b68      	ldr	r3, [pc, #416]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b7e:	f7fb fe25 	bl	80007cc <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b84:	e008      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b86:	f7fb fe21 	bl	80007cc <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0bc      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	019b      	lsls	r3, r3, #6
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	071b      	lsls	r3, r3, #28
 8004bb6:	495a      	ldr	r1, [pc, #360]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bbe:	4b57      	ldr	r3, [pc, #348]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc4:	f7fb fe02 	bl	80007cc <HAL_GetTick>
 8004bc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bcc:	f7fb fdfe 	bl	80007cc <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e099      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bde:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8082 	beq.w	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	4b48      	ldr	r3, [pc, #288]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6413      	str	r3, [r2, #64]	; 0x40
 8004c08:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c14:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a42      	ldr	r2, [pc, #264]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fb fdd4 	bl	80007cc <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c28:	f7fb fdd0 	bl	80007cc <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e06b      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c3a:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d02e      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d027      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c64:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c6e:	4b2e      	ldr	r3, [pc, #184]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c74:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c7a:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d113      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fb fd9e 	bl	80007cc <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	e009      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fb fd9a 	bl	80007cc <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e034      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ef      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004cc2:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	4912      	ldr	r1, [pc, #72]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	608b      	str	r3, [r1, #8]
 8004cdc:	e005      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ce8:	6093      	str	r3, [r2, #8]
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf6:	490a      	ldr	r1, [pc, #40]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7d1a      	ldrb	r2, [r3, #20]
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d0e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	42470068 	.word	0x42470068
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40007000 	.word	0x40007000
 8004d28:	42470e40 	.word	0x42470e40
 8004d2c:	424711e0 	.word	0x424711e0

08004d30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e083      	b.n	8004e4a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7f5b      	ldrb	r3, [r3, #29]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f006 fb16 	bl	800b384 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	22ca      	movs	r2, #202	; 0xca
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2253      	movs	r2, #83	; 0x53
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f897 	bl	8004ea2 <RTC_EnterInitMode>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	22ff      	movs	r2, #255	; 0xff
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2204      	movs	r2, #4
 8004d86:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e05e      	b.n	8004e4a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6899      	ldr	r1, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68d2      	ldr	r2, [r2, #12]
 8004dc6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6919      	ldr	r1, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	041a      	lsls	r2, r3, #16
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10e      	bne.n	8004e18 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f829 	bl	8004e52 <HAL_RTC_WaitForSynchro>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	22ff      	movs	r2, #255	; 0xff
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2204      	movs	r2, #4
 8004e12:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e018      	b.n	8004e4a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	22ff      	movs	r2, #255	; 0xff
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e6e:	f7fb fcad 	bl	80007cc <HAL_GetTick>
 8004e72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004e74:	e009      	b.n	8004e8a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e76:	f7fb fca9 	bl	80007cc <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e84:	d901      	bls.n	8004e8a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e007      	b.n	8004e9a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ee      	beq.n	8004e76 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d119      	bne.n	8004ef0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec6:	f7fb fc81 	bl	80007cc <HAL_GetTick>
 8004eca:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ecc:	e009      	b.n	8004ee2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ece:	f7fb fc7d 	bl	80007cc <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004edc:	d901      	bls.n	8004ee2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e007      	b.n	8004ef2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ee      	beq.n	8004ece <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e022      	b.n	8004f52 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f006 fa5c 	bl	800b3dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2203      	movs	r2, #3
 8004f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f815 	bl	8004f5c <HAL_SD_InitCard>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e00a      	b.n	8004f52 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f5c:	b5b0      	push	{r4, r5, r7, lr}
 8004f5e:	b08e      	sub	sp, #56	; 0x38
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004f78:	2376      	movs	r3, #118	; 0x76
 8004f7a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681d      	ldr	r5, [r3, #0]
 8004f80:	466c      	mov	r4, sp
 8004f82:	f107 0314 	add.w	r3, r7, #20
 8004f86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f94:	4628      	mov	r0, r5
 8004f96:	f001 fe07 	bl	8006ba8 <SDIO_Init>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e04c      	b.n	8005046 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004fac:	4b28      	ldr	r3, [pc, #160]	; (8005050 <HAL_SD_InitCard+0xf4>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fe2e 	bl	8006c18 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004fbc:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_SD_InitCard+0xf4>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fb52 	bl	800566c <SD_PowerON>
 8004fc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e02e      	b.n	8005046 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fa73 	bl	80054d4 <SD_InitCard>
 8004fee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e01b      	b.n	8005046 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005016:	4618      	mov	r0, r3
 8005018:	f001 fe91 	bl	8006d3e <SDMMC_CmdBlockLength>
 800501c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <HAL_SD_InitCard+0xf8>)
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3728      	adds	r7, #40	; 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bdb0      	pop	{r4, r5, r7, pc}
 800504e:	bf00      	nop
 8005050:	422580a0 	.word	0x422580a0
 8005054:	004005ff 	.word	0x004005ff

08005058 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005066:	0f9b      	lsrs	r3, r3, #30
 8005068:	b2da      	uxtb	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005072:	0e9b      	lsrs	r3, r3, #26
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	b2da      	uxtb	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005084:	0e1b      	lsrs	r3, r3, #24
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	b2da      	uxtb	r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	b2da      	uxtb	r2, r3
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b8:	0d1b      	lsrs	r3, r3, #20
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d6:	0bdb      	lsrs	r3, r3, #15
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e8:	0b9b      	lsrs	r3, r3, #14
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fa:	0b5b      	lsrs	r3, r3, #13
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800510c:	0b1b      	lsrs	r3, r3, #12
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	b2da      	uxtb	r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005124:	2b00      	cmp	r3, #0
 8005126:	d163      	bne.n	80051f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800512c:	009a      	lsls	r2, r3, #2
 800512e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005132:	4013      	ands	r3, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005138:	0f92      	lsrs	r2, r2, #30
 800513a:	431a      	orrs	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005144:	0edb      	lsrs	r3, r3, #27
 8005146:	b2db      	uxtb	r3, r3
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	b2da      	uxtb	r2, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	0e1b      	lsrs	r3, r3, #24
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	b2da      	uxtb	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005168:	0d5b      	lsrs	r3, r3, #21
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	b2da      	uxtb	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	0c9b      	lsrs	r3, r3, #18
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	b2da      	uxtb	r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518c:	0bdb      	lsrs	r3, r3, #15
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	b2da      	uxtb	r2, r3
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	7e1b      	ldrb	r3, [r3, #24]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	3302      	adds	r3, #2
 80051b0:	2201      	movs	r2, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80051ba:	fb02 f203 	mul.w	r2, r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	7a1b      	ldrb	r3, [r3, #8]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	2201      	movs	r2, #1
 80051ce:	409a      	lsls	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80051dc:	0a52      	lsrs	r2, r2, #9
 80051de:	fb02 f203 	mul.w	r2, r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
 80051ee:	e031      	b.n	8005254 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d11d      	bne.n	8005234 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	431a      	orrs	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	3301      	adds	r3, #1
 8005214:	029a      	lsls	r2, r3, #10
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005228:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	661a      	str	r2, [r3, #96]	; 0x60
 8005232:	e00f      	b.n	8005254 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a58      	ldr	r2, [pc, #352]	; (800539c <HAL_SD_GetCardCSD+0x344>)
 800523a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e09d      	b.n	8005390 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005258:	0b9b      	lsrs	r3, r3, #14
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526a:	09db      	lsrs	r3, r3, #7
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005272:	b2da      	uxtb	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005282:	b2da      	uxtb	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	0fdb      	lsrs	r3, r3, #31
 800528e:	b2da      	uxtb	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	0f5b      	lsrs	r3, r3, #29
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	0e9b      	lsrs	r3, r3, #26
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	0d9b      	lsrs	r3, r3, #22
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	0d5b      	lsrs	r3, r3, #21
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fe:	0bdb      	lsrs	r3, r3, #15
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	0b9b      	lsrs	r3, r3, #14
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	0b5b      	lsrs	r3, r3, #13
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	0b1b      	lsrs	r3, r3, #12
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	0a9b      	lsrs	r3, r3, #10
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	b2da      	uxtb	r2, r3
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537e:	b2da      	uxtb	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	004005ff 	.word	0x004005ff

080053a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80053a0:	b5b0      	push	{r4, r5, r7, lr}
 80053a2:	b08e      	sub	sp, #56	; 0x38
 80053a4:	af04      	add	r7, sp, #16
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2203      	movs	r2, #3
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d02e      	beq.n	800541e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d106      	bne.n	80053d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
 80053d4:	e029      	b.n	800542a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053dc:	d10a      	bne.n	80053f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f9d2 	bl	8005788 <SD_WideBus_Enable>
 80053e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
 80053f2:	e01a      	b.n	800542a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fa0f 	bl	800581e <SD_WideBus_Disable>
 8005400:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
 800540e:	e00c      	b.n	800542a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
 800541c:	e005      	b.n	800542a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005448:	e01f      	b.n	800548a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681d      	ldr	r5, [r3, #0]
 8005470:	466c      	mov	r4, sp
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800547a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005484:	4628      	mov	r0, r5
 8005486:	f001 fb8f 	bl	8006ba8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fc53 	bl	8006d3e <SDMMC_CmdBlockLength>
 8005498:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00c      	beq.n	80054ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80054c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3728      	adds	r7, #40	; 0x28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bdb0      	pop	{r4, r5, r7, pc}
 80054ce:	bf00      	nop
 80054d0:	004005ff 	.word	0x004005ff

080054d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054d4:	b5b0      	push	{r4, r5, r7, lr}
 80054d6:	b094      	sub	sp, #80	; 0x50
 80054d8:	af04      	add	r7, sp, #16
 80054da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80054dc:	2301      	movs	r3, #1
 80054de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fba6 	bl	8006c36 <SDIO_GetPowerState>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054f4:	e0b6      	b.n	8005664 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d02f      	beq.n	800555e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fd25 	bl	8006f52 <SDMMC_CmdSendCID>
 8005508:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <SD_InitCard+0x40>
    {
      return errorstate;
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	e0a7      	b.n	8005664 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fbd0 	bl	8006cc0 <SDIO_GetResponse>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2104      	movs	r1, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fbc7 	bl	8006cc0 <SDIO_GetResponse>
 8005532:	4602      	mov	r2, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2108      	movs	r1, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f001 fbbe 	bl	8006cc0 <SDIO_GetResponse>
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	210c      	movs	r1, #12
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fbb5 	bl	8006cc0 <SDIO_GetResponse>
 8005556:	4602      	mov	r2, r0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	2b03      	cmp	r3, #3
 8005564:	d00d      	beq.n	8005582 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f107 020e 	add.w	r2, r7, #14
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fd2b 	bl	8006fcc <SDMMC_CmdSetRelAdd>
 8005576:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <SD_InitCard+0xae>
    {
      return errorstate;
 800557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005580:	e070      	b.n	8005664 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	2b03      	cmp	r3, #3
 8005588:	d036      	beq.n	80055f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800558a:	89fb      	ldrh	r3, [r7, #14]
 800558c:	461a      	mov	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f001 fcf5 	bl	8006f8e <SDMMC_CmdSendCSD>
 80055a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	e059      	b.n	8005664 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fb82 	bl	8006cc0 <SDIO_GetResponse>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2104      	movs	r1, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 fb79 	bl	8006cc0 <SDIO_GetResponse>
 80055ce:	4602      	mov	r2, r0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2108      	movs	r1, #8
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fb70 	bl	8006cc0 <SDIO_GetResponse>
 80055e0:	4602      	mov	r2, r0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	210c      	movs	r1, #12
 80055ec:	4618      	mov	r0, r3
 80055ee:	f001 fb67 	bl	8006cc0 <SDIO_GetResponse>
 80055f2:	4602      	mov	r2, r0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2104      	movs	r1, #4
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fb5e 	bl	8006cc0 <SDIO_GetResponse>
 8005604:	4603      	mov	r3, r0
 8005606:	0d1a      	lsrs	r2, r3, #20
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800560c:	f107 0310 	add.w	r3, r7, #16
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fd20 	bl	8005058 <HAL_SD_GetCardCSD>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800561e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005622:	e01f      	b.n	8005664 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6819      	ldr	r1, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	461a      	mov	r2, r3
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	4608      	mov	r0, r1
 8005636:	f001 fba4 	bl	8006d82 <SDMMC_CmdSelDesel>
 800563a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800563c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <SD_InitCard+0x172>
  {
    return errorstate;
 8005642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005644:	e00e      	b.n	8005664 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681d      	ldr	r5, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	466c      	mov	r4, sp
 800564e:	f103 0210 	add.w	r2, r3, #16
 8005652:	ca07      	ldmia	r2, {r0, r1, r2}
 8005654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005658:	3304      	adds	r3, #4
 800565a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800565c:	4628      	mov	r0, r5
 800565e:	f001 faa3 	bl	8006ba8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3740      	adds	r7, #64	; 0x40
 8005668:	46bd      	mov	sp, r7
 800566a:	bdb0      	pop	{r4, r5, r7, pc}

0800566c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	2300      	movs	r3, #0
 800567e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f001 fb9f 	bl	8006dc8 <SDMMC_CmdGoIdleState>
 800568a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	e072      	b.n	800577c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f001 fbb2 	bl	8006e04 <SDMMC_CmdOperCond>
 80056a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fb88 	bl	8006dc8 <SDMMC_CmdGoIdleState>
 80056b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	e05b      	b.n	800577c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d137      	bne.n	8005742 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fbb2 	bl	8006e42 <SDMMC_CmdAppCommand>
 80056de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d02d      	beq.n	8005742 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056ea:	e047      	b.n	800577c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 fba5 	bl	8006e42 <SDMMC_CmdAppCommand>
 80056f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <SD_PowerON+0x98>
    {
      return errorstate;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	e03b      	b.n	800577c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	491e      	ldr	r1, [pc, #120]	; (8005784 <SD_PowerON+0x118>)
 800570a:	4618      	mov	r0, r3
 800570c:	f001 fbbb 	bl	8006e86 <SDMMC_CmdAppOperCommand>
 8005710:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005718:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800571c:	e02e      	b.n	800577c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f001 facb 	bl	8006cc0 <SDIO_GetResponse>
 800572a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	0fdb      	lsrs	r3, r3, #31
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <SD_PowerON+0xcc>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <SD_PowerON+0xce>
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]

    count++;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3301      	adds	r3, #1
 8005740:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005748:	4293      	cmp	r3, r2
 800574a:	d802      	bhi.n	8005752 <SD_PowerON+0xe6>
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0cc      	beq.n	80056ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005758:	4293      	cmp	r3, r2
 800575a:	d902      	bls.n	8005762 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800575c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005760:	e00c      	b.n	800577c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	645a      	str	r2, [r3, #68]	; 0x44
 8005772:	e002      	b.n	800577a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	c1100000 	.word	0xc1100000

08005788 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fa8e 	bl	8006cc0 <SDIO_GetResponse>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ae:	d102      	bne.n	80057b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057b4:	e02f      	b.n	8005816 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80057b6:	f107 030c 	add.w	r3, r7, #12
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f879 	bl	80058b4 <SD_FindSCR>
 80057c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	e023      	b.n	8005816 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01c      	beq.n	8005812 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e0:	041b      	lsls	r3, r3, #16
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f001 fb2c 	bl	8006e42 <SDMMC_CmdAppCommand>
 80057ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	e00f      	b.n	8005816 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fb65 	bl	8006ecc <SDMMC_CmdBusWidth>
 8005802:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	e003      	b.n	8005816 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	e001      	b.n	8005816 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005812:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b086      	sub	sp, #24
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2100      	movs	r1, #0
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fa43 	bl	8006cc0 <SDIO_GetResponse>
 800583a:	4603      	mov	r3, r0
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005844:	d102      	bne.n	800584c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800584a:	e02f      	b.n	80058ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800584c:	f107 030c 	add.w	r3, r7, #12
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f82e 	bl	80058b4 <SD_FindSCR>
 8005858:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	e023      	b.n	80058ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01c      	beq.n	80058a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f001 fae1 	bl	8006e42 <SDMMC_CmdAppCommand>
 8005880:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	e00f      	b.n	80058ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fb1a 	bl	8006ecc <SDMMC_CmdBusWidth>
 8005898:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	e003      	b.n	80058ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e001      	b.n	80058ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b08f      	sub	sp, #60	; 0x3c
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80058be:	f7fa ff85 	bl	80007cc <HAL_GetTick>
 80058c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2108      	movs	r1, #8
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa2f 	bl	8006d3e <SDMMC_CmdBlockLength>
 80058e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	e0b2      	b.n	8005a52 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f001 faa2 	bl	8006e42 <SDMMC_CmdAppCommand>
 80058fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	e0a3      	b.n	8005a52 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005910:	2308      	movs	r3, #8
 8005912:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005914:	2330      	movs	r3, #48	; 0x30
 8005916:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005918:	2302      	movs	r3, #2
 800591a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800591c:	2300      	movs	r3, #0
 800591e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005920:	2301      	movs	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f107 0210 	add.w	r2, r7, #16
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f001 f9d9 	bl	8006ce6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fae9 	bl	8006f10 <SDMMC_CmdSendSCR>
 800593e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d02a      	beq.n	800599c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	e083      	b.n	8005a52 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00f      	beq.n	8005978 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	f107 0208 	add.w	r2, r7, #8
 8005964:	18d4      	adds	r4, r2, r3
 8005966:	4608      	mov	r0, r1
 8005968:	f001 f949 	bl	8006bfe <SDIO_ReadFIFO>
 800596c:	4603      	mov	r3, r0
 800596e:	6023      	str	r3, [r4, #0]
      index++;
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	3301      	adds	r3, #1
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
 8005976:	e006      	b.n	8005986 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d012      	beq.n	80059ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005986:	f7fa ff21 	bl	80007cc <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d102      	bne.n	800599c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005996:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800599a:	e05a      	b.n	8005a52 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0cf      	beq.n	800594a <SD_FindSCR+0x96>
 80059aa:	e000      	b.n	80059ae <SD_FindSCR+0xfa>
      break;
 80059ac:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80059c4:	2308      	movs	r3, #8
 80059c6:	e044      	b.n	8005a52 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2202      	movs	r2, #2
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80059de:	2302      	movs	r3, #2
 80059e0:	e037      	b.n	8005a52 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2220      	movs	r2, #32
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80059f8:	2320      	movs	r3, #32
 80059fa:	e02a      	b.n	8005a52 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	061a      	lsls	r2, r3, #24
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a12:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	0e1b      	lsrs	r3, r3, #24
 8005a22:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	601a      	str	r2, [r3, #0]
    scr++;
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	061a      	lsls	r2, r3, #24
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	373c      	adds	r7, #60	; 0x3c
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd90      	pop	{r4, r7, pc}

08005a5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e041      	b.n	8005af0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f005 fd35 	bl	800b4f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 fb47 	bl	800612c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d001      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e044      	b.n	8005b9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d018      	beq.n	8005b64 <HAL_TIM_Base_Start_IT+0x6c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3a:	d013      	beq.n	8005b64 <HAL_TIM_Base_Start_IT+0x6c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_TIM_Base_Start_IT+0xb4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00e      	beq.n	8005b64 <HAL_TIM_Base_Start_IT+0x6c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_TIM_Base_Start_IT+0x6c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_TIM_Base_Start_IT+0x6c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d111      	bne.n	8005b88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b06      	cmp	r3, #6
 8005b74:	d010      	beq.n	8005b98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0201 	orr.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b86:	e007      	b.n	8005b98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40010000 	.word	0x40010000
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00
 8005bb8:	40014000 	.word	0x40014000

08005bbc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e041      	b.n	8005c52 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f839 	bl	8005c5a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 fa96 	bl	800612c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d122      	bne.n	8005cca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d11b      	bne.n	8005cca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f06f 0202 	mvn.w	r2, #2
 8005c9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fa1c 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005cb6:	e005      	b.n	8005cc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fa0e 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa1f 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d122      	bne.n	8005d1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d11b      	bne.n	8005d1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f06f 0204 	mvn.w	r2, #4
 8005cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9f2 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005d0a:	e005      	b.n	8005d18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f9e4 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9f5 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d122      	bne.n	8005d72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d11b      	bne.n	8005d72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f06f 0208 	mvn.w	r2, #8
 8005d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2204      	movs	r2, #4
 8005d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f9c8 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005d5e:	e005      	b.n	8005d6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f9ba 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f9cb 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d122      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d11b      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f06f 0210 	mvn.w	r2, #16
 8005d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f99e 	bl	80060ee <HAL_TIM_IC_CaptureCallback>
 8005db2:	e005      	b.n	8005dc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f990 	bl	80060da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9a1 	bl	8006102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d10e      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d107      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f06f 0201 	mvn.w	r2, #1
 8005dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f96a 	bl	80060c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b80      	cmp	r3, #128	; 0x80
 8005dfe:	d10e      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b80      	cmp	r3, #128	; 0x80
 8005e0c:	d107      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fca5 	bl	8006768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d10e      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d107      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f966 	bl	8006116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d10e      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d107      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f06f 0220 	mvn.w	r2, #32
 8005e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fc6f 	bl	8006754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e048      	b.n	8005f30 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b0c      	cmp	r3, #12
 8005eaa:	d839      	bhi.n	8005f20 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ee9 	.word	0x08005ee9
 8005eb8:	08005f21 	.word	0x08005f21
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005f21 	.word	0x08005f21
 8005ec4:	08005ef7 	.word	0x08005ef7
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005f21 	.word	0x08005f21
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005f21 	.word	0x08005f21
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005f21 	.word	0x08005f21
 8005ee4:	08005f13 	.word	0x08005f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f99c 	bl	800622c <TIM_OC1_SetConfig>
      break;
 8005ef4:	e017      	b.n	8005f26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f9fb 	bl	80062f8 <TIM_OC2_SetConfig>
      break;
 8005f02:	e010      	b.n	8005f26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fa60 	bl	80063d0 <TIM_OC3_SetConfig>
      break;
 8005f10:	e009      	b.n	8005f26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fac3 	bl	80064a4 <TIM_OC4_SetConfig>
      break;
 8005f1e:	e002      	b.n	8005f26 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	75fb      	strb	r3, [r7, #23]
      break;
 8005f24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIM_ConfigClockSource+0x1c>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e0b4      	b.n	80060be <HAL_TIM_ConfigClockSource+0x186>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8c:	d03e      	beq.n	800600c <HAL_TIM_ConfigClockSource+0xd4>
 8005f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f92:	f200 8087 	bhi.w	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9a:	f000 8086 	beq.w	80060aa <HAL_TIM_ConfigClockSource+0x172>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d87f      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b70      	cmp	r3, #112	; 0x70
 8005fa6:	d01a      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0xa6>
 8005fa8:	2b70      	cmp	r3, #112	; 0x70
 8005faa:	d87b      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b60      	cmp	r3, #96	; 0x60
 8005fae:	d050      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x11a>
 8005fb0:	2b60      	cmp	r3, #96	; 0x60
 8005fb2:	d877      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb4:	2b50      	cmp	r3, #80	; 0x50
 8005fb6:	d03c      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0xfa>
 8005fb8:	2b50      	cmp	r3, #80	; 0x50
 8005fba:	d873      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fbc:	2b40      	cmp	r3, #64	; 0x40
 8005fbe:	d058      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x13a>
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d86f      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc4:	2b30      	cmp	r3, #48	; 0x30
 8005fc6:	d064      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc8:	2b30      	cmp	r3, #48	; 0x30
 8005fca:	d86b      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d060      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15a>
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d867      	bhi.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05c      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15a>
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d05a      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x15a>
 8005fdc:	e062      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f000 fb23 	bl	8006638 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	609a      	str	r2, [r3, #8]
      break;
 800600a:	e04f      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6899      	ldr	r1, [r3, #8]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f000 fb0c 	bl	8006638 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800602e:	609a      	str	r2, [r3, #8]
      break;
 8006030:	e03c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	461a      	mov	r2, r3
 8006040:	f000 fa80 	bl	8006544 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2150      	movs	r1, #80	; 0x50
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fad9 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 8006050:	e02c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fa9f 	bl	80065a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2160      	movs	r1, #96	; 0x60
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fac9 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 8006070:	e01c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	461a      	mov	r2, r3
 8006080:	f000 fa60 	bl	8006544 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fab9 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 8006090:	e00c      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f000 fab0 	bl	8006602 <TIM_ITRx_SetConfig>
      break;
 80060a2:	e003      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]
      break;
 80060a8:	e000      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a34      	ldr	r2, [pc, #208]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00f      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614a:	d00b      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a31      	ldr	r2, [pc, #196]	; (8006214 <TIM_Base_SetConfig+0xe8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d007      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a30      	ldr	r2, [pc, #192]	; (8006218 <TIM_Base_SetConfig+0xec>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_Base_SetConfig+0x38>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a2f      	ldr	r2, [pc, #188]	; (800621c <TIM_Base_SetConfig+0xf0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d108      	bne.n	8006176 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a25      	ldr	r2, [pc, #148]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01b      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006184:	d017      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a22      	ldr	r2, [pc, #136]	; (8006214 <TIM_Base_SetConfig+0xe8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a21      	ldr	r2, [pc, #132]	; (8006218 <TIM_Base_SetConfig+0xec>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00f      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a20      	ldr	r2, [pc, #128]	; (800621c <TIM_Base_SetConfig+0xf0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00b      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1f      	ldr	r2, [pc, #124]	; (8006220 <TIM_Base_SetConfig+0xf4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <TIM_Base_SetConfig+0xf8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <TIM_Base_SetConfig+0x8a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_Base_SetConfig+0xfc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d108      	bne.n	80061c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a08      	ldr	r2, [pc, #32]	; (8006210 <TIM_Base_SetConfig+0xe4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d103      	bne.n	80061fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	615a      	str	r2, [r3, #20]
}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40010000 	.word	0x40010000
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800
 800621c:	40000c00 	.word	0x40000c00
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f023 0201 	bic.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0302 	bic.w	r3, r3, #2
 8006274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <TIM_OC1_SetConfig+0xc8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10c      	bne.n	80062a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0308 	bic.w	r3, r3, #8
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 0304 	bic.w	r3, r3, #4
 80062a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <TIM_OC1_SetConfig+0xc8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d111      	bne.n	80062ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000

080062f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0210 	bic.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0320 	bic.w	r3, r3, #32
 8006342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <TIM_OC2_SetConfig+0xd4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10d      	bne.n	8006374 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a15      	ldr	r2, [pc, #84]	; (80063cc <TIM_OC2_SetConfig+0xd4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d113      	bne.n	80063a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40010000 	.word	0x40010000

080063d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <TIM_OC3_SetConfig+0xd0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10d      	bne.n	800644a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <TIM_OC3_SetConfig+0xd0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d113      	bne.n	800647a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	621a      	str	r2, [r3, #32]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	40010000 	.word	0x40010000

080064a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	031b      	lsls	r3, r3, #12
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a10      	ldr	r2, [pc, #64]	; (8006540 <TIM_OC4_SetConfig+0x9c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d109      	bne.n	8006518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	019b      	lsls	r3, r3, #6
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000

08006544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f023 0201 	bic.w	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800656e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 030a 	bic.w	r3, r3, #10
 8006580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0210 	bic.w	r2, r3, #16
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	031b      	lsls	r3, r3, #12
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	f043 0307 	orr.w	r3, r3, #7
 8006624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	609a      	str	r2, [r3, #8]
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	021a      	lsls	r2, r3, #8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	431a      	orrs	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4313      	orrs	r3, r2
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	609a      	str	r2, [r3, #8]
}
 800666c:	bf00      	nop
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800668c:	2302      	movs	r3, #2
 800668e:	e050      	b.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066dc:	d013      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a18      	ldr	r2, [pc, #96]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a16      	ldr	r2, [pc, #88]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a15      	ldr	r2, [pc, #84]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a13      	ldr	r2, [pc, #76]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10c      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800670c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4313      	orrs	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40010000 	.word	0x40010000
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40014000 	.word	0x40014000

08006754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e03f      	b.n	800680e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f004 feca 	bl	800b53c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2224      	movs	r2, #36	; 0x24
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f829 	bl	8006818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	b09f      	sub	sp, #124	; 0x7c
 800681e:	af00      	add	r7, sp, #0
 8006820:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800682c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682e:	68d9      	ldr	r1, [r3, #12]
 8006830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	ea40 0301 	orr.w	r3, r0, r1
 8006838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800683a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	431a      	orrs	r2, r3
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	431a      	orrs	r2, r3
 800684a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	4313      	orrs	r3, r2
 8006850:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800685c:	f021 010c 	bic.w	r1, r1, #12
 8006860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006866:	430b      	orrs	r3, r1
 8006868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800686a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006876:	6999      	ldr	r1, [r3, #24]
 8006878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	ea40 0301 	orr.w	r3, r0, r1
 8006880:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4bc5      	ldr	r3, [pc, #788]	; (8006b9c <UART_SetConfig+0x384>)
 8006888:	429a      	cmp	r2, r3
 800688a:	d004      	beq.n	8006896 <UART_SetConfig+0x7e>
 800688c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4bc3      	ldr	r3, [pc, #780]	; (8006ba0 <UART_SetConfig+0x388>)
 8006892:	429a      	cmp	r2, r3
 8006894:	d103      	bne.n	800689e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006896:	f7fe f92b 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 800689a:	6778      	str	r0, [r7, #116]	; 0x74
 800689c:	e002      	b.n	80068a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800689e:	f7fe f913 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 80068a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ac:	f040 80b6 	bne.w	8006a1c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b2:	461c      	mov	r4, r3
 80068b4:	f04f 0500 	mov.w	r5, #0
 80068b8:	4622      	mov	r2, r4
 80068ba:	462b      	mov	r3, r5
 80068bc:	1891      	adds	r1, r2, r2
 80068be:	6439      	str	r1, [r7, #64]	; 0x40
 80068c0:	415b      	adcs	r3, r3
 80068c2:	647b      	str	r3, [r7, #68]	; 0x44
 80068c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068c8:	1912      	adds	r2, r2, r4
 80068ca:	eb45 0303 	adc.w	r3, r5, r3
 80068ce:	f04f 0000 	mov.w	r0, #0
 80068d2:	f04f 0100 	mov.w	r1, #0
 80068d6:	00d9      	lsls	r1, r3, #3
 80068d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068dc:	00d0      	lsls	r0, r2, #3
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	1911      	adds	r1, r2, r4
 80068e4:	6639      	str	r1, [r7, #96]	; 0x60
 80068e6:	416b      	adcs	r3, r5
 80068e8:	667b      	str	r3, [r7, #100]	; 0x64
 80068ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	1891      	adds	r1, r2, r2
 80068f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80068f8:	415b      	adcs	r3, r3
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006900:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006904:	f7f9 fc68 	bl	80001d8 <__aeabi_uldivmod>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4ba5      	ldr	r3, [pc, #660]	; (8006ba4 <UART_SetConfig+0x38c>)
 800690e:	fba3 2302 	umull	r2, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	011e      	lsls	r6, r3, #4
 8006916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006918:	461c      	mov	r4, r3
 800691a:	f04f 0500 	mov.w	r5, #0
 800691e:	4622      	mov	r2, r4
 8006920:	462b      	mov	r3, r5
 8006922:	1891      	adds	r1, r2, r2
 8006924:	6339      	str	r1, [r7, #48]	; 0x30
 8006926:	415b      	adcs	r3, r3
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800692e:	1912      	adds	r2, r2, r4
 8006930:	eb45 0303 	adc.w	r3, r5, r3
 8006934:	f04f 0000 	mov.w	r0, #0
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	00d9      	lsls	r1, r3, #3
 800693e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006942:	00d0      	lsls	r0, r2, #3
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	1911      	adds	r1, r2, r4
 800694a:	65b9      	str	r1, [r7, #88]	; 0x58
 800694c:	416b      	adcs	r3, r5
 800694e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	461a      	mov	r2, r3
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	1891      	adds	r1, r2, r2
 800695c:	62b9      	str	r1, [r7, #40]	; 0x28
 800695e:	415b      	adcs	r3, r3
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006966:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800696a:	f7f9 fc35 	bl	80001d8 <__aeabi_uldivmod>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4b8c      	ldr	r3, [pc, #560]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006974:	fba3 1302 	umull	r1, r3, r3, r2
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	2164      	movs	r1, #100	; 0x64
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	3332      	adds	r3, #50	; 0x32
 8006986:	4a87      	ldr	r2, [pc, #540]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006988:	fba2 2303 	umull	r2, r3, r2, r3
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006994:	441e      	add	r6, r3
 8006996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006998:	4618      	mov	r0, r3
 800699a:	f04f 0100 	mov.w	r1, #0
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	1894      	adds	r4, r2, r2
 80069a4:	623c      	str	r4, [r7, #32]
 80069a6:	415b      	adcs	r3, r3
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
 80069aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ae:	1812      	adds	r2, r2, r0
 80069b0:	eb41 0303 	adc.w	r3, r1, r3
 80069b4:	f04f 0400 	mov.w	r4, #0
 80069b8:	f04f 0500 	mov.w	r5, #0
 80069bc:	00dd      	lsls	r5, r3, #3
 80069be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069c2:	00d4      	lsls	r4, r2, #3
 80069c4:	4622      	mov	r2, r4
 80069c6:	462b      	mov	r3, r5
 80069c8:	1814      	adds	r4, r2, r0
 80069ca:	653c      	str	r4, [r7, #80]	; 0x50
 80069cc:	414b      	adcs	r3, r1
 80069ce:	657b      	str	r3, [r7, #84]	; 0x54
 80069d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	1891      	adds	r1, r2, r2
 80069dc:	61b9      	str	r1, [r7, #24]
 80069de:	415b      	adcs	r3, r3
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80069ea:	f7f9 fbf5 	bl	80001d8 <__aeabi_uldivmod>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4b6c      	ldr	r3, [pc, #432]	; (8006ba4 <UART_SetConfig+0x38c>)
 80069f4:	fba3 1302 	umull	r1, r3, r3, r2
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	2164      	movs	r1, #100	; 0x64
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	3332      	adds	r3, #50	; 0x32
 8006a06:	4a67      	ldr	r2, [pc, #412]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	f003 0207 	and.w	r2, r3, #7
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4432      	add	r2, r6
 8006a18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a1a:	e0b9      	b.n	8006b90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1e:	461c      	mov	r4, r3
 8006a20:	f04f 0500 	mov.w	r5, #0
 8006a24:	4622      	mov	r2, r4
 8006a26:	462b      	mov	r3, r5
 8006a28:	1891      	adds	r1, r2, r2
 8006a2a:	6139      	str	r1, [r7, #16]
 8006a2c:	415b      	adcs	r3, r3
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a34:	1912      	adds	r2, r2, r4
 8006a36:	eb45 0303 	adc.w	r3, r5, r3
 8006a3a:	f04f 0000 	mov.w	r0, #0
 8006a3e:	f04f 0100 	mov.w	r1, #0
 8006a42:	00d9      	lsls	r1, r3, #3
 8006a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a48:	00d0      	lsls	r0, r2, #3
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	eb12 0804 	adds.w	r8, r2, r4
 8006a52:	eb43 0905 	adc.w	r9, r3, r5
 8006a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f04f 0100 	mov.w	r1, #0
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	008b      	lsls	r3, r1, #2
 8006a6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a6e:	0082      	lsls	r2, r0, #2
 8006a70:	4640      	mov	r0, r8
 8006a72:	4649      	mov	r1, r9
 8006a74:	f7f9 fbb0 	bl	80001d8 <__aeabi_uldivmod>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4b49      	ldr	r3, [pc, #292]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	011e      	lsls	r6, r3, #4
 8006a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f04f 0100 	mov.w	r1, #0
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	1894      	adds	r4, r2, r2
 8006a94:	60bc      	str	r4, [r7, #8]
 8006a96:	415b      	adcs	r3, r3
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a9e:	1812      	adds	r2, r2, r0
 8006aa0:	eb41 0303 	adc.w	r3, r1, r3
 8006aa4:	f04f 0400 	mov.w	r4, #0
 8006aa8:	f04f 0500 	mov.w	r5, #0
 8006aac:	00dd      	lsls	r5, r3, #3
 8006aae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ab2:	00d4      	lsls	r4, r2, #3
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	1814      	adds	r4, r2, r0
 8006aba:	64bc      	str	r4, [r7, #72]	; 0x48
 8006abc:	414b      	adcs	r3, r1
 8006abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f04f 0100 	mov.w	r1, #0
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	008b      	lsls	r3, r1, #2
 8006ad4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ad8:	0082      	lsls	r2, r0, #2
 8006ada:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ade:	f7f9 fb7b 	bl	80001d8 <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4b2f      	ldr	r3, [pc, #188]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	2164      	movs	r1, #100	; 0x64
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	3332      	adds	r3, #50	; 0x32
 8006afa:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b06:	441e      	add	r6, r3
 8006b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f04f 0100 	mov.w	r1, #0
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	1894      	adds	r4, r2, r2
 8006b16:	603c      	str	r4, [r7, #0]
 8006b18:	415b      	adcs	r3, r3
 8006b1a:	607b      	str	r3, [r7, #4]
 8006b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b20:	1812      	adds	r2, r2, r0
 8006b22:	eb41 0303 	adc.w	r3, r1, r3
 8006b26:	f04f 0400 	mov.w	r4, #0
 8006b2a:	f04f 0500 	mov.w	r5, #0
 8006b2e:	00dd      	lsls	r5, r3, #3
 8006b30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b34:	00d4      	lsls	r4, r2, #3
 8006b36:	4622      	mov	r2, r4
 8006b38:	462b      	mov	r3, r5
 8006b3a:	eb12 0a00 	adds.w	sl, r2, r0
 8006b3e:	eb43 0b01 	adc.w	fp, r3, r1
 8006b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f04f 0100 	mov.w	r1, #0
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	008b      	lsls	r3, r1, #2
 8006b56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b5a:	0082      	lsls	r2, r0, #2
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	4659      	mov	r1, fp
 8006b60:	f7f9 fb3a 	bl	80001d8 <__aeabi_uldivmod>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	2164      	movs	r1, #100	; 0x64
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	3332      	adds	r3, #50	; 0x32
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <UART_SetConfig+0x38c>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	f003 020f 	and.w	r2, r3, #15
 8006b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4432      	add	r2, r6
 8006b8e:	609a      	str	r2, [r3, #8]
}
 8006b90:	bf00      	nop
 8006b92:	377c      	adds	r7, #124	; 0x7c
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40011000 	.word	0x40011000
 8006ba0:	40011400 	.word	0x40011400
 8006ba4:	51eb851f 	.word	0x51eb851f

08006ba8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006ba8:	b084      	sub	sp, #16
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	f107 001c 	add.w	r0, r7, #28
 8006bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006bbe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006bc2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006bc6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006bca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006bce:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006bd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006be2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	b004      	add	sp, #16
 8006bfc:	4770      	bx	lr

08006bfe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2203      	movs	r2, #3
 8006c24:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006c26:	2002      	movs	r0, #2
 8006c28:	f7f9 fddc 	bl	80007e4 <HAL_Delay>
  
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0303 	and.w	r3, r3, #3
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c70:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006c76:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006c7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006c8c:	f023 030f 	bic.w	r3, r3, #15
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	b2db      	uxtb	r3, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	461a      	mov	r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
}  
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d0c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d12:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d18:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0

}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b088      	sub	sp, #32
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d5e:	f107 0308 	add.w	r3, r7, #8
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff74 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d6e:	2110      	movs	r1, #16
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f979 	bl	8007068 <SDMMC_GetCmdResp1>
 8006d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d78:	69fb      	ldr	r3, [r7, #28]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b08a      	sub	sp, #40	; 0x28
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006d92:	2307      	movs	r3, #7
 8006d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da2:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006da4:	f107 0310 	add.w	r3, r7, #16
 8006da8:	4619      	mov	r1, r3
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7ff ff51 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db4:	2107      	movs	r1, #7
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f956 	bl	8007068 <SDMMC_GetCmdResp1>
 8006dbc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3728      	adds	r7, #40	; 0x28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de6:	f107 0308 	add.w	r3, r7, #8
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ff30 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f90c 	bl	8007010 <SDMMC_GetCmdError>
 8006df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3720      	adds	r7, #32
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e0c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e12:	2308      	movs	r3, #8
 8006e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff ff11 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb03 	bl	800743c <SDMMC_GetCmdResp7>
 8006e36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e38:	69fb      	ldr	r3, [r7, #28]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b088      	sub	sp, #32
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006e50:	2337      	movs	r3, #55	; 0x37
 8006e52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e54:	2340      	movs	r3, #64	; 0x40
 8006e56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e62:	f107 0308 	add.w	r3, r7, #8
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff fef2 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e72:	2137      	movs	r1, #55	; 0x37
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8f7 	bl	8007068 <SDMMC_GetCmdResp1>
 8006e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b088      	sub	sp, #32
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006e9c:	2329      	movs	r3, #41	; 0x29
 8006e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ea0:	2340      	movs	r3, #64	; 0x40
 8006ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eae:	f107 0308 	add.w	r3, r7, #8
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fecc 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa0a 	bl	80072d4 <SDMMC_GetCmdResp3>
 8006ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006eda:	2306      	movs	r3, #6
 8006edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff fead 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efc:	2106      	movs	r1, #6
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8b2 	bl	8007068 <SDMMC_GetCmdResp1>
 8006f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f06:	69fb      	ldr	r3, [r7, #28]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006f1c:	2333      	movs	r3, #51	; 0x33
 8006f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fe8c 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3e:	2133      	movs	r1, #51	; 0x33
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f891 	bl	8007068 <SDMMC_GetCmdResp1>
 8006f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f48:	69fb      	ldr	r3, [r7, #28]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3720      	adds	r7, #32
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b088      	sub	sp, #32
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f62:	23c0      	movs	r3, #192	; 0xc0
 8006f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fe6b 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f961 	bl	8007244 <SDMMC_GetCmdResp2>
 8006f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f84:	69fb      	ldr	r3, [r7, #28]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b088      	sub	sp, #32
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006f9c:	2309      	movs	r3, #9
 8006f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006fa0:	23c0      	movs	r3, #192	; 0xc0
 8006fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fae:	f107 0308 	add.w	r3, r7, #8
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff fe4c 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f942 	bl	8007244 <SDMMC_GetCmdResp2>
 8006fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fec:	f107 0308 	add.w	r3, r7, #8
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff fe2d 	bl	8006c52 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	2103      	movs	r1, #3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9a7 	bl	8007350 <SDMMC_GetCmdResp6>
 8007002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007004:	69fb      	ldr	r3, [r7, #28]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007018:	4b11      	ldr	r3, [pc, #68]	; (8007060 <SDMMC_GetCmdError+0x50>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a11      	ldr	r2, [pc, #68]	; (8007064 <SDMMC_GetCmdError+0x54>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	0a5b      	lsrs	r3, r3, #9
 8007024:	f241 3288 	movw	r2, #5000	; 0x1388
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1e5a      	subs	r2, r3, #1
 8007032:	60fa      	str	r2, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800703c:	e009      	b.n	8007052 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f1      	beq.n	800702e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	22c5      	movs	r2, #197	; 0xc5
 800704e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000118 	.word	0x20000118
 8007064:	10624dd3 	.word	0x10624dd3

08007068 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	460b      	mov	r3, r1
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007076:	4b70      	ldr	r3, [pc, #448]	; (8007238 <SDMMC_GetCmdResp1+0x1d0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a70      	ldr	r2, [pc, #448]	; (800723c <SDMMC_GetCmdResp1+0x1d4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	0a5a      	lsrs	r2, r3, #9
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	fb02 f303 	mul.w	r3, r2, r3
 8007088:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	1e5a      	subs	r2, r3, #1
 800708e:	61fa      	str	r2, [r7, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007098:	e0c9      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0ef      	beq.n	800708a <SDMMC_GetCmdResp1+0x22>
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1ea      	bne.n	800708a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2204      	movs	r2, #4
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070c6:	2304      	movs	r3, #4
 80070c8:	e0b1      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0a6      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	22c5      	movs	r2, #197	; 0xc5
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff fddd 	bl	8006ca6 <SDIO_GetCommandResponse>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d001      	beq.n	80070fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e099      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80070fa:	2100      	movs	r1, #0
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff fddf 	bl	8006cc0 <SDIO_GetResponse>
 8007102:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <SDMMC_GetCmdResp1+0x1d8>)
 8007108:	4013      	ands	r3, r2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800710e:	2300      	movs	r3, #0
 8007110:	e08d      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da02      	bge.n	800711e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800711c:	e087      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007128:	2340      	movs	r3, #64	; 0x40
 800712a:	e080      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007136:	2380      	movs	r3, #128	; 0x80
 8007138:	e079      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007148:	e071      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007158:	e069      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007168:	e061      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007178:	e059      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007188:	e051      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007198:	e049      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80071a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071a8:	e041      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80071b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b8:	e039      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80071c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071c8:	e031      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80071d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071d8:	e029      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80071e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071e8:	e021      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80071f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80071f8:	e019      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007208:	e011      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007218:	e009      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007224:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007228:	e001      	b.n	800722e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800722a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000118 	.word	0x20000118
 800723c:	10624dd3 	.word	0x10624dd3
 8007240:	fdffe008 	.word	0xfdffe008

08007244 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800724c:	4b1f      	ldr	r3, [pc, #124]	; (80072cc <SDMMC_GetCmdResp2+0x88>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <SDMMC_GetCmdResp2+0x8c>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	0a5b      	lsrs	r3, r3, #9
 8007258:	f241 3288 	movw	r2, #5000	; 0x1388
 800725c:	fb02 f303 	mul.w	r3, r2, r3
 8007260:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	1e5a      	subs	r2, r3, #1
 8007266:	60fa      	str	r2, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800726c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007270:	e026      	b.n	80072c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007276:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0ef      	beq.n	8007262 <SDMMC_GetCmdResp2+0x1e>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1ea      	bne.n	8007262 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2204      	movs	r2, #4
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800729e:	2304      	movs	r3, #4
 80072a0:	e00e      	b.n	80072c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e003      	b.n	80072c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	22c5      	movs	r2, #197	; 0xc5
 80072bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	20000118 	.word	0x20000118
 80072d0:	10624dd3 	.word	0x10624dd3

080072d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072dc:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <SDMMC_GetCmdResp3+0x74>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1a      	ldr	r2, [pc, #104]	; (800734c <SDMMC_GetCmdResp3+0x78>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	0a5b      	lsrs	r3, r3, #9
 80072e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
 80072f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1e5a      	subs	r2, r3, #1
 80072f6:	60fa      	str	r2, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007300:	e01b      	b.n	800733a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0ef      	beq.n	80072f2 <SDMMC_GetCmdResp3+0x1e>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1ea      	bne.n	80072f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2204      	movs	r2, #4
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800732e:	2304      	movs	r3, #4
 8007330:	e003      	b.n	800733a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	22c5      	movs	r2, #197	; 0xc5
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000118 	.word	0x20000118
 800734c:	10624dd3 	.word	0x10624dd3

08007350 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	460b      	mov	r3, r1
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800735e:	4b35      	ldr	r3, [pc, #212]	; (8007434 <SDMMC_GetCmdResp6+0xe4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a35      	ldr	r2, [pc, #212]	; (8007438 <SDMMC_GetCmdResp6+0xe8>)
 8007364:	fba2 2303 	umull	r2, r3, r2, r3
 8007368:	0a5b      	lsrs	r3, r3, #9
 800736a:	f241 3288 	movw	r2, #5000	; 0x1388
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	1e5a      	subs	r2, r3, #1
 8007378:	61fa      	str	r2, [r7, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d102      	bne.n	8007384 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800737e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007382:	e052      	b.n	800742a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007388:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ef      	beq.n	8007374 <SDMMC_GetCmdResp6+0x24>
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1ea      	bne.n	8007374 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2204      	movs	r2, #4
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073b0:	2304      	movs	r3, #4
 80073b2:	e03a      	b.n	800742a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e02f      	b.n	800742a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff fc6b 	bl	8006ca6 <SDIO_GetCommandResponse>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d001      	beq.n	80073de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073da:	2301      	movs	r3, #1
 80073dc:	e025      	b.n	800742a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	22c5      	movs	r2, #197	; 0xc5
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80073e4:	2100      	movs	r1, #0
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fc6a 	bl	8006cc0 <SDIO_GetResponse>
 80073ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007402:	2300      	movs	r3, #0
 8007404:	e011      	b.n	800742a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007414:	e009      	b.n	800742a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007424:	e001      	b.n	800742a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000118 	.word	0x20000118
 8007438:	10624dd3 	.word	0x10624dd3

0800743c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007444:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <SDMMC_GetCmdResp7+0x94>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a22      	ldr	r2, [pc, #136]	; (80074d4 <SDMMC_GetCmdResp7+0x98>)
 800744a:	fba2 2303 	umull	r2, r3, r2, r3
 800744e:	0a5b      	lsrs	r3, r3, #9
 8007450:	f241 3288 	movw	r2, #5000	; 0x1388
 8007454:	fb02 f303 	mul.w	r3, r2, r3
 8007458:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	60fa      	str	r2, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007464:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007468:	e02c      	b.n	80074c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0ef      	beq.n	800745a <SDMMC_GetCmdResp7+0x1e>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ea      	bne.n	800745a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2204      	movs	r2, #4
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007496:	2304      	movs	r3, #4
 8007498:	e014      	b.n	80074c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d004      	beq.n	80074b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e009      	b.n	80074c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2240      	movs	r2, #64	; 0x40
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074c2:	2300      	movs	r3, #0
  
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20000118 	.word	0x20000118
 80074d4:	10624dd3 	.word	0x10624dd3

080074d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074d8:	b084      	sub	sp, #16
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	f107 001c 	add.w	r0, r7, #28
 80074e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d122      	bne.n	8007536 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d105      	bne.n	800752a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 fb1c 	bl	8008b68 <USB_CoreReset>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
 8007534:	e01a      	b.n	800756c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fb10 	bl	8008b68 <USB_CoreReset>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800754c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
 800755e:	e005      	b.n	800756c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10b      	bne.n	800758a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f043 0206 	orr.w	r2, r3, #6
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007596:	b004      	add	sp, #16
 8007598:	4770      	bx	lr
	...

0800759c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d165      	bne.n	800767c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a41      	ldr	r2, [pc, #260]	; (80076b8 <USB_SetTurnaroundTime+0x11c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d906      	bls.n	80075c6 <USB_SetTurnaroundTime+0x2a>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4a40      	ldr	r2, [pc, #256]	; (80076bc <USB_SetTurnaroundTime+0x120>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d202      	bcs.n	80075c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075c0:	230f      	movs	r3, #15
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e062      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4a3c      	ldr	r2, [pc, #240]	; (80076bc <USB_SetTurnaroundTime+0x120>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d306      	bcc.n	80075dc <USB_SetTurnaroundTime+0x40>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4a3b      	ldr	r2, [pc, #236]	; (80076c0 <USB_SetTurnaroundTime+0x124>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d202      	bcs.n	80075dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075d6:	230e      	movs	r3, #14
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	e057      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4a38      	ldr	r2, [pc, #224]	; (80076c0 <USB_SetTurnaroundTime+0x124>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d306      	bcc.n	80075f2 <USB_SetTurnaroundTime+0x56>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4a37      	ldr	r2, [pc, #220]	; (80076c4 <USB_SetTurnaroundTime+0x128>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d202      	bcs.n	80075f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075ec:	230d      	movs	r3, #13
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e04c      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	4a33      	ldr	r2, [pc, #204]	; (80076c4 <USB_SetTurnaroundTime+0x128>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d306      	bcc.n	8007608 <USB_SetTurnaroundTime+0x6c>
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	4a32      	ldr	r2, [pc, #200]	; (80076c8 <USB_SetTurnaroundTime+0x12c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d802      	bhi.n	8007608 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007602:	230c      	movs	r3, #12
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	e041      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4a2f      	ldr	r2, [pc, #188]	; (80076c8 <USB_SetTurnaroundTime+0x12c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d906      	bls.n	800761e <USB_SetTurnaroundTime+0x82>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4a2e      	ldr	r2, [pc, #184]	; (80076cc <USB_SetTurnaroundTime+0x130>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d802      	bhi.n	800761e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007618:	230b      	movs	r3, #11
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e036      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <USB_SetTurnaroundTime+0x130>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d906      	bls.n	8007634 <USB_SetTurnaroundTime+0x98>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	4a29      	ldr	r2, [pc, #164]	; (80076d0 <USB_SetTurnaroundTime+0x134>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d802      	bhi.n	8007634 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800762e:	230a      	movs	r3, #10
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e02b      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4a26      	ldr	r2, [pc, #152]	; (80076d0 <USB_SetTurnaroundTime+0x134>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d906      	bls.n	800764a <USB_SetTurnaroundTime+0xae>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4a25      	ldr	r2, [pc, #148]	; (80076d4 <USB_SetTurnaroundTime+0x138>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d202      	bcs.n	800764a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007644:	2309      	movs	r3, #9
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e020      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	4a21      	ldr	r2, [pc, #132]	; (80076d4 <USB_SetTurnaroundTime+0x138>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d306      	bcc.n	8007660 <USB_SetTurnaroundTime+0xc4>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4a20      	ldr	r2, [pc, #128]	; (80076d8 <USB_SetTurnaroundTime+0x13c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d802      	bhi.n	8007660 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800765a:	2308      	movs	r3, #8
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	e015      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <USB_SetTurnaroundTime+0x13c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d906      	bls.n	8007676 <USB_SetTurnaroundTime+0xda>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <USB_SetTurnaroundTime+0x140>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d202      	bcs.n	8007676 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007670:	2307      	movs	r3, #7
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	e00a      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007676:	2306      	movs	r3, #6
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	e007      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007682:	2309      	movs	r3, #9
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e001      	b.n	800768c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007688:	2309      	movs	r3, #9
 800768a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	029b      	lsls	r3, r3, #10
 80076a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	00d8acbf 	.word	0x00d8acbf
 80076bc:	00e4e1c0 	.word	0x00e4e1c0
 80076c0:	00f42400 	.word	0x00f42400
 80076c4:	01067380 	.word	0x01067380
 80076c8:	011a499f 	.word	0x011a499f
 80076cc:	01312cff 	.word	0x01312cff
 80076d0:	014ca43f 	.word	0x014ca43f
 80076d4:	016e3600 	.word	0x016e3600
 80076d8:	01a6ab1f 	.word	0x01a6ab1f
 80076dc:	01e84800 	.word	0x01e84800

080076e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f043 0201 	orr.w	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f023 0201 	bic.w	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d115      	bne.n	8007772 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007752:	2001      	movs	r0, #1
 8007754:	f7f9 f846 	bl	80007e4 <HAL_Delay>
      ms++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f972 	bl	8008a48 <USB_GetMode>
 8007764:	4603      	mov	r3, r0
 8007766:	2b01      	cmp	r3, #1
 8007768:	d01e      	beq.n	80077a8 <USB_SetCurrentMode+0x84>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b31      	cmp	r3, #49	; 0x31
 800776e:	d9f0      	bls.n	8007752 <USB_SetCurrentMode+0x2e>
 8007770:	e01a      	b.n	80077a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d115      	bne.n	80077a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007784:	2001      	movs	r0, #1
 8007786:	f7f9 f82d 	bl	80007e4 <HAL_Delay>
      ms++;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f959 	bl	8008a48 <USB_GetMode>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USB_SetCurrentMode+0x84>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b31      	cmp	r3, #49	; 0x31
 80077a0:	d9f0      	bls.n	8007784 <USB_SetCurrentMode+0x60>
 80077a2:	e001      	b.n	80077a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e005      	b.n	80077b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b32      	cmp	r3, #50	; 0x32
 80077ac:	d101      	bne.n	80077b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077bc:	b084      	sub	sp, #16
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e009      	b.n	80077f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	3340      	adds	r3, #64	; 0x40
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3301      	adds	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b0e      	cmp	r3, #14
 80077f4:	d9f2      	bls.n	80077dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d11c      	bne.n	8007836 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800780a:	f043 0302 	orr.w	r3, r3, #2
 800780e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
 8007834:	e00b      	b.n	800784e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007854:	461a      	mov	r2, r3
 8007856:	2300      	movs	r3, #0
 8007858:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007860:	4619      	mov	r1, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007868:	461a      	mov	r2, r3
 800786a:	680b      	ldr	r3, [r1, #0]
 800786c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	2b01      	cmp	r3, #1
 8007872:	d10c      	bne.n	800788e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800787a:	2100      	movs	r1, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f945 	bl	8007b0c <USB_SetDevSpeed>
 8007882:	e008      	b.n	8007896 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007884:	2101      	movs	r1, #1
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f940 	bl	8007b0c <USB_SetDevSpeed>
 800788c:	e003      	b.n	8007896 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800788e:	2103      	movs	r1, #3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f93b 	bl	8007b0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007896:	2110      	movs	r1, #16
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8f3 	bl	8007a84 <USB_FlushTxFifo>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f90f 	bl	8007acc <USB_FlushRxFifo>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078be:	461a      	mov	r2, r3
 80078c0:	2300      	movs	r3, #0
 80078c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ca:	461a      	mov	r2, r3
 80078cc:	2300      	movs	r3, #0
 80078ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d6:	461a      	mov	r2, r3
 80078d8:	2300      	movs	r3, #0
 80078da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	e043      	b.n	800796a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f8:	d118      	bne.n	800792c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	461a      	mov	r2, r3
 800790e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	e013      	b.n	800793e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	461a      	mov	r2, r3
 8007924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	e008      	b.n	800793e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	461a      	mov	r2, r3
 800793a:	2300      	movs	r3, #0
 800793c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794a:	461a      	mov	r2, r3
 800794c:	2300      	movs	r3, #0
 800794e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795c:	461a      	mov	r2, r3
 800795e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	3301      	adds	r3, #1
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	429a      	cmp	r2, r3
 8007970:	d3b7      	bcc.n	80078e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007972:	2300      	movs	r3, #0
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	e043      	b.n	8007a00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800798a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800798e:	d118      	bne.n	80079c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10a      	bne.n	80079ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a2:	461a      	mov	r2, r3
 80079a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e013      	b.n	80079d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	461a      	mov	r2, r3
 80079ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	e008      	b.n	80079d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	461a      	mov	r2, r3
 80079d0:	2300      	movs	r3, #0
 80079d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	461a      	mov	r2, r3
 80079e2:	2300      	movs	r3, #0
 80079e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f2:	461a      	mov	r2, r3
 80079f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	3301      	adds	r3, #1
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d3b7      	bcc.n	8007978 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f043 0210 	orr.w	r2, r3, #16
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699a      	ldr	r2, [r3, #24]
 8007a40:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <USB_DevInit+0x2c4>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f043 0208 	orr.w	r2, r3, #8
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d107      	bne.n	8007a70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a7c:	b004      	add	sp, #16
 8007a7e:	4770      	bx	lr
 8007a80:	803c3800 	.word	0x803c3800

08007a84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	019b      	lsls	r3, r3, #6
 8007a96:	f043 0220 	orr.w	r2, r3, #32
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	4a08      	ldr	r2, [pc, #32]	; (8007ac8 <USB_FlushTxFifo+0x44>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e006      	b.n	8007abc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d0f1      	beq.n	8007a9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	00030d40 	.word	0x00030d40

08007acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2210      	movs	r2, #16
 8007adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <USB_FlushRxFifo+0x3c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d901      	bls.n	8007aee <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e006      	b.n	8007afc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b10      	cmp	r3, #16
 8007af8:	d0f1      	beq.n	8007ade <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	00030d40 	.word	0x00030d40

08007b0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b087      	sub	sp, #28
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0306 	and.w	r3, r3, #6
 8007b56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
 8007b62:	e00a      	b.n	8007b7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d002      	beq.n	8007b70 <USB_GetDevSpeed+0x32>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b06      	cmp	r3, #6
 8007b6e:	d102      	bne.n	8007b76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b70:	2302      	movs	r3, #2
 8007b72:	75fb      	strb	r3, [r7, #23]
 8007b74:	e001      	b.n	8007b7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b76:	230f      	movs	r3, #15
 8007b78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d13a      	bne.n	8007c1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007baa:	69da      	ldr	r2, [r3, #28]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	68f9      	ldr	r1, [r7, #12]
 8007bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d155      	bne.n	8007c88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	78db      	ldrb	r3, [r3, #3]
 8007bf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	059b      	lsls	r3, r3, #22
 8007bfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c00:	4313      	orrs	r3, r2
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	e036      	b.n	8007c88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c20:	69da      	ldr	r2, [r3, #28]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	68f9      	ldr	r1, [r7, #12]
 8007c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d11a      	bne.n	8007c88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	78db      	ldrb	r3, [r3, #3]
 8007c6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	4313      	orrs	r3, r2
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d161      	bne.n	8007d78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cca:	d11f      	bne.n	8007d0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	43db      	mvns	r3, r3
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	2101      	movs	r1, #1
 8007d42:	fa01 f303 	lsl.w	r3, r1, r3
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d50:	4013      	ands	r3, r2
 8007d52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	0159      	lsls	r1, r3, #5
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	440b      	add	r3, r1
 8007d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4b35      	ldr	r3, [pc, #212]	; (8007e48 <USB_DeactivateEndpoint+0x1b0>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	600b      	str	r3, [r1, #0]
 8007d76:	e060      	b.n	8007e3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d8e:	d11f      	bne.n	8007dd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007daa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	2101      	movs	r1, #1
 8007de2:	fa01 f303 	lsl.w	r3, r1, r3
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	43db      	mvns	r3, r3
 8007dea:	68f9      	ldr	r1, [r7, #12]
 8007dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df0:	4013      	ands	r3, r2
 8007df2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	2101      	movs	r1, #1
 8007e06:	fa01 f303 	lsl.w	r3, r1, r3
 8007e0a:	041b      	lsls	r3, r3, #16
 8007e0c:	43db      	mvns	r3, r3
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e14:	4013      	ands	r3, r2
 8007e16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	0159      	lsls	r1, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	440b      	add	r3, r1
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	4619      	mov	r1, r3
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <USB_DeactivateEndpoint+0x1b4>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	ec337800 	.word	0xec337800
 8007e4c:	eff37800 	.word	0xeff37800

08007e50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	f040 815c 	bne.w	800812a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d132      	bne.n	8007ee0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	0151      	lsls	r1, r2, #5
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	440a      	add	r2, r1
 8007e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ebc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed8:	0cdb      	lsrs	r3, r3, #19
 8007eda:	04db      	lsls	r3, r3, #19
 8007edc:	6113      	str	r3, [r2, #16]
 8007ede:	e074      	b.n	8007fca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efa:	0cdb      	lsrs	r3, r3, #19
 8007efc:	04db      	lsls	r3, r3, #19
 8007efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6959      	ldr	r1, [r3, #20]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	440b      	add	r3, r1
 8007f3c:	1e59      	subs	r1, r3, #1
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f46:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f48:	4b9d      	ldr	r3, [pc, #628]	; (80081c0 <USB_EPStartXfer+0x370>)
 8007f4a:	400b      	ands	r3, r1
 8007f4c:	69b9      	ldr	r1, [r7, #24]
 8007f4e:	0148      	lsls	r0, r1, #5
 8007f50:	69f9      	ldr	r1, [r7, #28]
 8007f52:	4401      	add	r1, r0
 8007f54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f72:	69b9      	ldr	r1, [r7, #24]
 8007f74:	0148      	lsls	r0, r1, #5
 8007f76:	69f9      	ldr	r1, [r7, #28]
 8007f78:	4401      	add	r1, r0
 8007f7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	78db      	ldrb	r3, [r3, #3]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d11f      	bne.n	8007fca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007fa8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	0151      	lsls	r1, r2, #5
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	440a      	add	r2, r1
 8007fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fc8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d14b      	bne.n	8008068 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d009      	beq.n	8007fec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	78db      	ldrb	r3, [r3, #3]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d128      	bne.n	8008046 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d110      	bne.n	8008026 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	440a      	add	r2, r1
 800801a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800801e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	e00f      	b.n	8008046 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	440a      	add	r2, r1
 800803c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008044:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	440a      	add	r2, r1
 800805c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008060:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	e12f      	b.n	80082c8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	0151      	lsls	r1, r2, #5
 800807a:	69fa      	ldr	r2, [r7, #28]
 800807c:	440a      	add	r2, r1
 800807e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008086:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	78db      	ldrb	r3, [r3, #3]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d015      	beq.n	80080bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8117 	beq.w	80082c8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	f003 030f 	and.w	r3, r3, #15
 80080aa:	2101      	movs	r1, #1
 80080ac:	fa01 f303 	lsl.w	r3, r1, r3
 80080b0:	69f9      	ldr	r1, [r7, #28]
 80080b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080b6:	4313      	orrs	r3, r2
 80080b8:	634b      	str	r3, [r1, #52]	; 0x34
 80080ba:	e105      	b.n	80082c8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d110      	bne.n	80080ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	e00f      	b.n	800810e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	440a      	add	r2, r1
 8008104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800810c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	68d9      	ldr	r1, [r3, #12]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	b298      	uxth	r0, r3
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4603      	mov	r3, r0
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fa2b 	bl	800857e <USB_WritePacket>
 8008128:	e0ce      	b.n	80082c8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008144:	0cdb      	lsrs	r3, r3, #19
 8008146:	04db      	lsls	r3, r3, #19
 8008148:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008164:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008168:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800816c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d126      	bne.n	80081c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800818c:	69b9      	ldr	r1, [r7, #24]
 800818e:	0148      	lsls	r0, r1, #5
 8008190:	69f9      	ldr	r1, [r7, #28]
 8008192:	4401      	add	r1, r0
 8008194:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008198:	4313      	orrs	r3, r2
 800819a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	0151      	lsls	r1, r2, #5
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	440a      	add	r2, r1
 80081b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081ba:	6113      	str	r3, [r2, #16]
 80081bc:	e036      	b.n	800822c <USB_EPStartXfer+0x3dc>
 80081be:	bf00      	nop
 80081c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	695a      	ldr	r2, [r3, #20]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	1e5a      	subs	r2, r3, #1
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	8afb      	ldrh	r3, [r7, #22]
 80081ea:	04d9      	lsls	r1, r3, #19
 80081ec:	4b39      	ldr	r3, [pc, #228]	; (80082d4 <USB_EPStartXfer+0x484>)
 80081ee:	400b      	ands	r3, r1
 80081f0:	69b9      	ldr	r1, [r7, #24]
 80081f2:	0148      	lsls	r0, r1, #5
 80081f4:	69f9      	ldr	r1, [r7, #28]
 80081f6:	4401      	add	r1, r0
 80081f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081fc:	4313      	orrs	r3, r2
 80081fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820c:	691a      	ldr	r2, [r3, #16]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	8af9      	ldrh	r1, [r7, #22]
 8008214:	fb01 f303 	mul.w	r3, r1, r3
 8008218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800821c:	69b9      	ldr	r1, [r7, #24]
 800821e:	0148      	lsls	r0, r1, #5
 8008220:	69f9      	ldr	r1, [r7, #28]
 8008222:	4401      	add	r1, r0
 8008224:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008228:	4313      	orrs	r3, r2
 800822a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d10d      	bne.n	800824e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	68d9      	ldr	r1, [r3, #12]
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824a:	460a      	mov	r2, r1
 800824c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	78db      	ldrb	r3, [r3, #3]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d128      	bne.n	80082a8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d110      	bne.n	8008288 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	440a      	add	r2, r1
 800827c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	e00f      	b.n	80082a8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	0151      	lsls	r1, r2, #5
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	440a      	add	r2, r1
 80082be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	1ff80000 	.word	0x1ff80000

080082d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	785b      	ldrb	r3, [r3, #1]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	f040 80cd 	bne.w	8008494 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d132      	bne.n	8008368 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	440a      	add	r2, r1
 8008318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008320:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	440a      	add	r2, r1
 800835c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008360:	0cdb      	lsrs	r3, r3, #19
 8008362:	04db      	lsls	r3, r3, #19
 8008364:	6113      	str	r3, [r2, #16]
 8008366:	e04e      	b.n	8008406 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	0cdb      	lsrs	r3, r3, #19
 8008384:	04db      	lsls	r3, r3, #19
 8008386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	695a      	ldr	r2, [r3, #20]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d903      	bls.n	80083c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f6:	6939      	ldr	r1, [r7, #16]
 80083f8:	0148      	lsls	r0, r1, #5
 80083fa:	6979      	ldr	r1, [r7, #20]
 80083fc:	4401      	add	r1, r0
 80083fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008402:	4313      	orrs	r3, r2
 8008404:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d11e      	bne.n	800844a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d009      	beq.n	8008428 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	461a      	mov	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	e092      	b.n	8008570 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	440a      	add	r2, r1
 8008460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008464:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008468:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d07e      	beq.n	8008570 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	2101      	movs	r1, #1
 8008484:	fa01 f303 	lsl.w	r3, r1, r3
 8008488:	6979      	ldr	r1, [r7, #20]
 800848a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800848e:	4313      	orrs	r3, r2
 8008490:	634b      	str	r3, [r1, #52]	; 0x34
 8008492:	e06d      	b.n	8008570 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ae:	0cdb      	lsrs	r3, r3, #19
 80084b0:	04db      	lsls	r3, r3, #19
 80084b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084d6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	0151      	lsls	r1, r2, #5
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	440a      	add	r2, r1
 80084fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008506:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008514:	691a      	ldr	r2, [r3, #16]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800851e:	6939      	ldr	r1, [r7, #16]
 8008520:	0148      	lsls	r0, r1, #5
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	4401      	add	r1, r0
 8008526:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800852a:	4313      	orrs	r3, r2
 800852c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d10d      	bne.n	8008550 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	68d9      	ldr	r1, [r3, #12]
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	460a      	mov	r2, r1
 800854e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	440a      	add	r2, r1
 8008566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800856a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800856e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800857e:	b480      	push	{r7}
 8008580:	b089      	sub	sp, #36	; 0x24
 8008582:	af00      	add	r7, sp, #0
 8008584:	60f8      	str	r0, [r7, #12]
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	4611      	mov	r1, r2
 800858a:	461a      	mov	r2, r3
 800858c:	460b      	mov	r3, r1
 800858e:	71fb      	strb	r3, [r7, #7]
 8008590:	4613      	mov	r3, r2
 8008592:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800859c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d123      	bne.n	80085ec <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085a4:	88bb      	ldrh	r3, [r7, #4]
 80085a6:	3303      	adds	r3, #3
 80085a8:	089b      	lsrs	r3, r3, #2
 80085aa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085ac:	2300      	movs	r3, #0
 80085ae:	61bb      	str	r3, [r7, #24]
 80085b0:	e018      	b.n	80085e4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	031a      	lsls	r2, r3, #12
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085be:	461a      	mov	r2, r3
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	3301      	adds	r3, #1
 80085ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	3301      	adds	r3, #1
 80085d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	3301      	adds	r3, #1
 80085d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	3301      	adds	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	3301      	adds	r3, #1
 80085e2:	61bb      	str	r3, [r7, #24]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3e2      	bcc.n	80085b2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3724      	adds	r7, #36	; 0x24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b08b      	sub	sp, #44	; 0x2c
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	4613      	mov	r3, r2
 8008606:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	089b      	lsrs	r3, r3, #2
 8008614:	b29b      	uxth	r3, r3
 8008616:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008620:	2300      	movs	r3, #0
 8008622:	623b      	str	r3, [r7, #32]
 8008624:	e014      	b.n	8008650 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	601a      	str	r2, [r3, #0]
    pDest++;
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	3301      	adds	r3, #1
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	3301      	adds	r3, #1
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	3301      	adds	r3, #1
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	3301      	adds	r3, #1
 8008648:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	3301      	adds	r3, #1
 800864e:	623b      	str	r3, [r7, #32]
 8008650:	6a3a      	ldr	r2, [r7, #32]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	429a      	cmp	r2, r3
 8008656:	d3e6      	bcc.n	8008626 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008658:	8bfb      	ldrh	r3, [r7, #30]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01e      	beq.n	800869c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008668:	461a      	mov	r2, r3
 800866a:	f107 0310 	add.w	r3, r7, #16
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	b2da      	uxtb	r2, r3
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	701a      	strb	r2, [r3, #0]
      i++;
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	3301      	adds	r3, #1
 8008688:	623b      	str	r3, [r7, #32]
      pDest++;
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	3301      	adds	r3, #1
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008690:	8bfb      	ldrh	r3, [r7, #30]
 8008692:	3b01      	subs	r3, #1
 8008694:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008696:	8bfb      	ldrh	r3, [r7, #30]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ea      	bne.n	8008672 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800869e:	4618      	mov	r0, r3
 80086a0:	372c      	adds	r7, #44	; 0x2c
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d12c      	bne.n	8008720 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	db12      	blt.n	80086fe <USB_EPSetStall+0x54>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00f      	beq.n	80086fe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086fc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	0151      	lsls	r1, r2, #5
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	440a      	add	r2, r1
 8008714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	e02b      	b.n	8008778 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	db12      	blt.n	8008758 <USB_EPSetStall+0xae>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00f      	beq.n	8008758 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	440a      	add	r2, r1
 800874e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008756:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	0151      	lsls	r1, r2, #5
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	440a      	add	r2, r1
 800876e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008776:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d128      	bne.n	80087f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	78db      	ldrb	r3, [r3, #3]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d003      	beq.n	80087d2 <USB_EPClearStall+0x4c>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	78db      	ldrb	r3, [r3, #3]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d138      	bne.n	8008844 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e027      	b.n	8008844 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	440a      	add	r2, r1
 800880a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800880e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008812:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	78db      	ldrb	r3, [r3, #3]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d003      	beq.n	8008824 <USB_EPClearStall+0x9e>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	78db      	ldrb	r3, [r3, #3]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d10f      	bne.n	8008844 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800883e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008842:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008870:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008874:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800888c:	4313      	orrs	r3, r2
 800888e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088b8:	f023 0303 	bic.w	r3, r3, #3
 80088bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088cc:	f023 0302 	bic.w	r3, r3, #2
 80088d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800890e:	f043 0302 	orr.w	r3, r3, #2
 8008912:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4013      	ands	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	4013      	ands	r3, r2
 800896a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	0c1b      	lsrs	r3, r3, #16
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	4013      	ands	r3, r2
 800899e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	b29b      	uxth	r3, r3
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	4013      	ands	r3, r2
 80089dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089de:	68bb      	ldr	r3, [r7, #8]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1c:	01db      	lsls	r3, r3, #7
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	4013      	ands	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	371c      	adds	r7, #28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f003 0301 	and.w	r3, r3, #1
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a82:	f023 0307 	bic.w	r3, r3, #7
 8008a86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	333c      	adds	r3, #60	; 0x3c
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4a26      	ldr	r2, [pc, #152]	; (8008b64 <USB_EP0_OutStart+0xb8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d90a      	bls.n	8008ae6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae0:	d101      	bne.n	8008ae6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e037      	b.n	8008b56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	461a      	mov	r2, r3
 8008aee:	2300      	movs	r3, #0
 8008af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b14:	f043 0318 	orr.w	r3, r3, #24
 8008b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b2e:	7afb      	ldrb	r3, [r7, #11]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d10f      	bne.n	8008b54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	4f54300a 	.word	0x4f54300a

08008b68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	4a13      	ldr	r2, [pc, #76]	; (8008bc8 <USB_CoreReset+0x60>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d901      	bls.n	8008b84 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e01a      	b.n	8008bba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	daf3      	bge.n	8008b74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f043 0201 	orr.w	r2, r3, #1
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	4a09      	ldr	r2, [pc, #36]	; (8008bc8 <USB_CoreReset+0x60>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d901      	bls.n	8008bac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e006      	b.n	8008bba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d0f1      	beq.n	8008b9c <USB_CoreReset+0x34>

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	00030d40 	.word	0x00030d40

08008bcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008bdc:	f003 f912 	bl	800be04 <USBD_static_malloc>
 8008be0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d105      	bne.n	8008bf4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e066      	b.n	8008cc2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	7c1b      	ldrb	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d119      	bne.n	8008c38 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c08:	2202      	movs	r2, #2
 8008c0a:	2181      	movs	r1, #129	; 0x81
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f002 ffd6 	bl	800bbbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	2101      	movs	r1, #1
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f002 ffcc 	bl	800bbbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2210      	movs	r2, #16
 8008c32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008c36:	e016      	b.n	8008c66 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	2181      	movs	r1, #129	; 0x81
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f002 ffbd 	bl	800bbbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c4a:	2340      	movs	r3, #64	; 0x40
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f002 ffb4 	bl	800bbbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2210      	movs	r2, #16
 8008c62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c66:	2308      	movs	r3, #8
 8008c68:	2203      	movs	r2, #3
 8008c6a:	2182      	movs	r1, #130	; 0x82
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f002 ffa6 	bl	800bbbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f003 f877 	bl	800bd9c <USBD_LL_PrepareReceive>
 8008cae:	e007      	b.n	8008cc0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cb6:	2340      	movs	r3, #64	; 0x40
 8008cb8:	2101      	movs	r1, #1
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f003 f86e 	bl	800bd9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008cd6:	2181      	movs	r1, #129	; 0x81
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f002 ff96 	bl	800bc0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f002 ff8f 	bl	800bc0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008cf4:	2182      	movs	r1, #130	; 0x82
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f002 ff87 	bl	800bc0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00e      	beq.n	8008d34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d26:	4618      	mov	r0, r3
 8008d28:	f003 f87a 	bl	800be20 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e0af      	b.n	8008ec8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d03f      	beq.n	8008df4 <USBD_CDC_Setup+0xb4>
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	f040 809f 	bne.w	8008eb8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	88db      	ldrh	r3, [r3, #6]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d02e      	beq.n	8008de0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b25b      	sxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da16      	bge.n	8008dba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008d98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	88d2      	ldrh	r2, [r2, #6]
 8008d9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	88db      	ldrh	r3, [r3, #6]
 8008da4:	2b07      	cmp	r3, #7
 8008da6:	bf28      	it	cs
 8008da8:	2307      	movcs	r3, #7
 8008daa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	89fa      	ldrh	r2, [r7, #14]
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fae9 	bl	800a38a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008db8:	e085      	b.n	8008ec6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	785a      	ldrb	r2, [r3, #1]
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	88db      	ldrh	r3, [r3, #6]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008dd0:	6939      	ldr	r1, [r7, #16]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88db      	ldrh	r3, [r3, #6]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 fb02 	bl	800a3e2 <USBD_CtlPrepareRx>
      break;
 8008dde:	e072      	b.n	8008ec6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	7850      	ldrb	r0, [r2, #1]
 8008dec:	2200      	movs	r2, #0
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	4798      	blx	r3
      break;
 8008df2:	e068      	b.n	8008ec6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b0b      	cmp	r3, #11
 8008dfa:	d852      	bhi.n	8008ea2 <USBD_CDC_Setup+0x162>
 8008dfc:	a201      	add	r2, pc, #4	; (adr r2, 8008e04 <USBD_CDC_Setup+0xc4>)
 8008dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e02:	bf00      	nop
 8008e04:	08008e35 	.word	0x08008e35
 8008e08:	08008eb1 	.word	0x08008eb1
 8008e0c:	08008ea3 	.word	0x08008ea3
 8008e10:	08008ea3 	.word	0x08008ea3
 8008e14:	08008ea3 	.word	0x08008ea3
 8008e18:	08008ea3 	.word	0x08008ea3
 8008e1c:	08008ea3 	.word	0x08008ea3
 8008e20:	08008ea3 	.word	0x08008ea3
 8008e24:	08008ea3 	.word	0x08008ea3
 8008e28:	08008ea3 	.word	0x08008ea3
 8008e2c:	08008e5f 	.word	0x08008e5f
 8008e30:	08008e89 	.word	0x08008e89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d107      	bne.n	8008e50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e40:	f107 030a 	add.w	r3, r7, #10
 8008e44:	2202      	movs	r2, #2
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 fa9e 	bl	800a38a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e4e:	e032      	b.n	8008eb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 fa28 	bl	800a2a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e5c:	e02b      	b.n	8008eb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d107      	bne.n	8008e7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e6a:	f107 030d 	add.w	r3, r7, #13
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 fa89 	bl	800a38a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e78:	e01d      	b.n	8008eb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 fa13 	bl	800a2a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e82:	2303      	movs	r3, #3
 8008e84:	75fb      	strb	r3, [r7, #23]
          break;
 8008e86:	e016      	b.n	8008eb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d00f      	beq.n	8008eb4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fa06 	bl	800a2a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ea0:	e008      	b.n	8008eb4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f9ff 	bl	800a2a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	75fb      	strb	r3, [r7, #23]
          break;
 8008eae:	e002      	b.n	8008eb6 <USBD_CDC_Setup+0x176>
          break;
 8008eb0:	bf00      	nop
 8008eb2:	e008      	b.n	8008ec6 <USBD_CDC_Setup+0x186>
          break;
 8008eb4:	bf00      	nop
      }
      break;
 8008eb6:	e006      	b.n	8008ec6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 f9f4 	bl	800a2a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e04f      	b.n	8008f92 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ef8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	3318      	adds	r3, #24
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d029      	beq.n	8008f64 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f10:	78fa      	ldrb	r2, [r7, #3]
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3318      	adds	r3, #24
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	78f9      	ldrb	r1, [r7, #3]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	460b      	mov	r3, r1
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	1a5b      	subs	r3, r3, r1
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4403      	add	r3, r0
 8008f30:	3344      	adds	r3, #68	; 0x44
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f38:	fb03 f301 	mul.w	r3, r3, r1
 8008f3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d110      	bne.n	8008f64 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	440b      	add	r3, r1
 8008f50:	3318      	adds	r3, #24
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f56:	78f9      	ldrb	r1, [r7, #3]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f002 fefc 	bl	800bd5a <USBD_LL_Transmit>
 8008f62:	e015      	b.n	8008f90 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e015      	b.n	8008fe8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f002 ff0c 	bl	800bdde <USBD_LL_GetRxDataSize>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ffe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009006:	2303      	movs	r3, #3
 8009008:	e01b      	b.n	8009042 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d015      	beq.n	8009040 <USBD_CDC_EP0_RxReady+0x50>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800901a:	2bff      	cmp	r3, #255	; 0xff
 800901c:	d010      	beq.n	8009040 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800902c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009034:	b292      	uxth	r2, r2
 8009036:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	22ff      	movs	r2, #255	; 0xff
 800903c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2243      	movs	r2, #67	; 0x43
 8009058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20000090 	.word	0x20000090

0800906c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2243      	movs	r2, #67	; 0x43
 8009078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	; (8009088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	2000004c 	.word	0x2000004c

0800908c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2243      	movs	r2, #67	; 0x43
 8009098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	200000d4 	.word	0x200000d4

080090ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	220a      	movs	r2, #10
 80090b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090ba:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	20000008 	.word	0x20000008

080090cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090dc:	2303      	movs	r3, #3
 80090de:	e004      	b.n	80090ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b087      	sub	sp, #28
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009108:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	e008      	b.n	8009126 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009132:	b480      	push	{r7}
 8009134:	b085      	sub	sp, #20
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009142:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800914a:	2303      	movs	r3, #3
 800914c:	e004      	b.n	8009158 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009172:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800917e:	2303      	movs	r3, #3
 8009180:	e016      	b.n	80091b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7c1b      	ldrb	r3, [r3, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d109      	bne.n	800919e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009194:	2101      	movs	r1, #1
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f002 fe00 	bl	800bd9c <USBD_LL_PrepareReceive>
 800919c:	e007      	b.n	80091ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	2101      	movs	r1, #1
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f002 fdf7 	bl	800bd9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e01f      	b.n	8009210 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	79fa      	ldrb	r2, [r7, #7]
 8009202:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f002 fc73 	bl	800baf0 <USBD_LL_Init>
 800920a:	4603      	mov	r3, r0
 800920c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800922c:	2303      	movs	r3, #3
 800922e:	e016      	b.n	800925e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00b      	beq.n	800925c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	f107 020e 	add.w	r2, r7, #14
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	4602      	mov	r2, r0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f002 fc8a 	bl	800bb88 <USBD_LL_Start>
 8009274:	4603      	mov	r3, r0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092a0:	2303      	movs	r3, #3
 80092a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d009      	beq.n	80092c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	4611      	mov	r1, r2
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
  }

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 ff90 	bl	800a234 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009322:	461a      	mov	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009330:	f003 031f 	and.w	r3, r3, #31
 8009334:	2b02      	cmp	r3, #2
 8009336:	d01a      	beq.n	800936e <USBD_LL_SetupStage+0x72>
 8009338:	2b02      	cmp	r3, #2
 800933a:	d822      	bhi.n	8009382 <USBD_LL_SetupStage+0x86>
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <USBD_LL_SetupStage+0x4a>
 8009340:	2b01      	cmp	r3, #1
 8009342:	d00a      	beq.n	800935a <USBD_LL_SetupStage+0x5e>
 8009344:	e01d      	b.n	8009382 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa62 	bl	8009818 <USBD_StdDevReq>
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]
      break;
 8009358:	e020      	b.n	800939c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fac6 	bl	80098f4 <USBD_StdItfReq>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
      break;
 800936c:	e016      	b.n	800939c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fb05 	bl	8009986 <USBD_StdEPReq>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
      break;
 8009380:	e00c      	b.n	800939c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800938c:	b2db      	uxtb	r3, r3
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f002 fc59 	bl	800bc48 <USBD_LL_StallEP>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]
      break;
 800939a:	bf00      	nop
  }

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b086      	sub	sp, #24
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	460b      	mov	r3, r1
 80093b0:	607a      	str	r2, [r7, #4]
 80093b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80093b4:	7afb      	ldrb	r3, [r7, #11]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d138      	bne.n	800942c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d14a      	bne.n	8009462 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d913      	bls.n	8009400 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	1ad2      	subs	r2, r2, r3
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	4293      	cmp	r3, r2
 80093f0:	bf28      	it	cs
 80093f2:	4613      	movcs	r3, r2
 80093f4:	461a      	mov	r2, r3
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f001 f80f 	bl	800a41c <USBD_CtlContinueRx>
 80093fe:	e030      	b.n	8009462 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b03      	cmp	r3, #3
 800940a:	d10b      	bne.n	8009424 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d005      	beq.n	8009424 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f001 f80a 	bl	800a43e <USBD_CtlSendStatus>
 800942a:	e01a      	b.n	8009462 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b03      	cmp	r3, #3
 8009436:	d114      	bne.n	8009462 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00e      	beq.n	8009462 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	7afa      	ldrb	r2, [r7, #11]
 800944e:	4611      	mov	r1, r2
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	4798      	blx	r3
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	e000      	b.n	8009464 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	460b      	mov	r3, r1
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d16b      	bne.n	8009558 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3314      	adds	r3, #20
 8009484:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800948c:	2b02      	cmp	r3, #2
 800948e:	d156      	bne.n	800953e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	429a      	cmp	r2, r3
 800949a:	d914      	bls.n	80094c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	1ad2      	subs	r2, r2, r3
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	461a      	mov	r2, r3
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 ff84 	bl	800a3c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094b8:	2300      	movs	r3, #0
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f002 fc6c 	bl	800bd9c <USBD_LL_PrepareReceive>
 80094c4:	e03b      	b.n	800953e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d11c      	bne.n	800950c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094da:	429a      	cmp	r2, r3
 80094dc:	d316      	bcc.n	800950c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d20f      	bcs.n	800950c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 ff65 	bl	800a3c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094fe:	2300      	movs	r3, #0
 8009500:	2200      	movs	r2, #0
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f002 fc49 	bl	800bd9c <USBD_LL_PrepareReceive>
 800950a:	e018      	b.n	800953e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b03      	cmp	r3, #3
 8009516:	d10b      	bne.n	8009530 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009530:	2180      	movs	r1, #128	; 0x80
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f002 fb88 	bl	800bc48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 ff93 	bl	800a464 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009544:	2b01      	cmp	r3, #1
 8009546:	d122      	bne.n	800958e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff fe98 	bl	800927e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009556:	e01a      	b.n	800958e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b03      	cmp	r3, #3
 8009562:	d114      	bne.n	800958e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00e      	beq.n	800958e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	7afa      	ldrb	r2, [r7, #11]
 800957a:	4611      	mov	r1, r2
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	4798      	blx	r3
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800958a:	7dfb      	ldrb	r3, [r7, #23]
 800958c:	e000      	b.n	8009590 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e02f      	b.n	800962c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00f      	beq.n	80095f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d009      	beq.n	80095f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	6852      	ldr	r2, [r2, #4]
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	4611      	mov	r1, r2
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f6:	2340      	movs	r3, #64	; 0x40
 80095f8:	2200      	movs	r2, #0
 80095fa:	2100      	movs	r1, #0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f002 fade 	bl	800bbbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2240      	movs	r2, #64	; 0x40
 800960e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	2200      	movs	r2, #0
 8009616:	2180      	movs	r1, #128	; 0x80
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f002 fad0 	bl	800bbbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009662:	b2da      	uxtb	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2204      	movs	r2, #4
 800966e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b04      	cmp	r3, #4
 8009692:	d106      	bne.n	80096a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800969a:	b2da      	uxtb	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e012      	b.n	80096ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d10b      	bne.n	80096ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d005      	beq.n	80096ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800970a:	2303      	movs	r3, #3
 800970c:	e014      	b.n	8009738 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b03      	cmp	r3, #3
 8009718:	d10d      	bne.n	8009736 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d007      	beq.n	8009736 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	78fa      	ldrb	r2, [r7, #3]
 8009730:	4611      	mov	r1, r2
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009756:	2303      	movs	r3, #3
 8009758:	e014      	b.n	8009784 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b03      	cmp	r3, #3
 8009764:	d10d      	bne.n	8009782 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	4611      	mov	r1, r2
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d009      	beq.n	80097d0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6852      	ldr	r2, [r2, #4]
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	4611      	mov	r1, r2
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
  }

  return USBD_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097da:	b480      	push	{r7}
 80097dc:	b087      	sub	sp, #28
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	3301      	adds	r3, #1
 80097f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097f8:	8a3b      	ldrh	r3, [r7, #16]
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	b21a      	sxth	r2, r3
 80097fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009802:	4313      	orrs	r3, r2
 8009804:	b21b      	sxth	r3, r3
 8009806:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009808:	89fb      	ldrh	r3, [r7, #14]
}
 800980a:	4618      	mov	r0, r3
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
	...

08009818 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800982e:	2b40      	cmp	r3, #64	; 0x40
 8009830:	d005      	beq.n	800983e <USBD_StdDevReq+0x26>
 8009832:	2b40      	cmp	r3, #64	; 0x40
 8009834:	d853      	bhi.n	80098de <USBD_StdDevReq+0xc6>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <USBD_StdDevReq+0x3a>
 800983a:	2b20      	cmp	r3, #32
 800983c:	d14f      	bne.n	80098de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	4798      	blx	r3
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]
      break;
 8009850:	e04a      	b.n	80098e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	785b      	ldrb	r3, [r3, #1]
 8009856:	2b09      	cmp	r3, #9
 8009858:	d83b      	bhi.n	80098d2 <USBD_StdDevReq+0xba>
 800985a:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <USBD_StdDevReq+0x48>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	080098b5 	.word	0x080098b5
 8009864:	080098c9 	.word	0x080098c9
 8009868:	080098d3 	.word	0x080098d3
 800986c:	080098bf 	.word	0x080098bf
 8009870:	080098d3 	.word	0x080098d3
 8009874:	08009893 	.word	0x08009893
 8009878:	08009889 	.word	0x08009889
 800987c:	080098d3 	.word	0x080098d3
 8009880:	080098ab 	.word	0x080098ab
 8009884:	0800989d 	.word	0x0800989d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f9de 	bl	8009c4c <USBD_GetDescriptor>
          break;
 8009890:	e024      	b.n	80098dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fb43 	bl	8009f20 <USBD_SetAddress>
          break;
 800989a:	e01f      	b.n	80098dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fb82 	bl	8009fa8 <USBD_SetConfig>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
          break;
 80098a8:	e018      	b.n	80098dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fc21 	bl	800a0f4 <USBD_GetConfig>
          break;
 80098b2:	e013      	b.n	80098dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fc52 	bl	800a160 <USBD_GetStatus>
          break;
 80098bc:	e00e      	b.n	80098dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fc81 	bl	800a1c8 <USBD_SetFeature>
          break;
 80098c6:	e009      	b.n	80098dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fc90 	bl	800a1f0 <USBD_ClrFeature>
          break;
 80098d0:	e004      	b.n	80098dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fce7 	bl	800a2a8 <USBD_CtlError>
          break;
 80098da:	bf00      	nop
      }
      break;
 80098dc:	e004      	b.n	80098e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fce1 	bl	800a2a8 <USBD_CtlError>
      break;
 80098e6:	bf00      	nop
  }

  return ret;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop

080098f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800990a:	2b40      	cmp	r3, #64	; 0x40
 800990c:	d005      	beq.n	800991a <USBD_StdItfReq+0x26>
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	d82f      	bhi.n	8009972 <USBD_StdItfReq+0x7e>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <USBD_StdItfReq+0x26>
 8009916:	2b20      	cmp	r3, #32
 8009918:	d12b      	bne.n	8009972 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	2b02      	cmp	r3, #2
 8009926:	d81d      	bhi.n	8009964 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	889b      	ldrh	r3, [r3, #4]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b01      	cmp	r3, #1
 8009930:	d813      	bhi.n	800995a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	88db      	ldrh	r3, [r3, #6]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d110      	bne.n	800996e <USBD_StdItfReq+0x7a>
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10d      	bne.n	800996e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fd73 	bl	800a43e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009958:	e009      	b.n	800996e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fca3 	bl	800a2a8 <USBD_CtlError>
          break;
 8009962:	e004      	b.n	800996e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fc9e 	bl	800a2a8 <USBD_CtlError>
          break;
 800996c:	e000      	b.n	8009970 <USBD_StdItfReq+0x7c>
          break;
 800996e:	bf00      	nop
      }
      break;
 8009970:	e004      	b.n	800997c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fc97 	bl	800a2a8 <USBD_CtlError>
      break;
 800997a:	bf00      	nop
  }

  return ret;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	889b      	ldrh	r3, [r3, #4]
 8009998:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099a2:	2b40      	cmp	r3, #64	; 0x40
 80099a4:	d007      	beq.n	80099b6 <USBD_StdEPReq+0x30>
 80099a6:	2b40      	cmp	r3, #64	; 0x40
 80099a8:	f200 8145 	bhi.w	8009c36 <USBD_StdEPReq+0x2b0>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00c      	beq.n	80099ca <USBD_StdEPReq+0x44>
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	f040 8140 	bne.w	8009c36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	4798      	blx	r3
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]
      break;
 80099c8:	e13a      	b.n	8009c40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d007      	beq.n	80099e2 <USBD_StdEPReq+0x5c>
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	f300 8129 	bgt.w	8009c2a <USBD_StdEPReq+0x2a4>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d07f      	beq.n	8009adc <USBD_StdEPReq+0x156>
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d03c      	beq.n	8009a5a <USBD_StdEPReq+0xd4>
 80099e0:	e123      	b.n	8009c2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d002      	beq.n	80099f4 <USBD_StdEPReq+0x6e>
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d016      	beq.n	8009a20 <USBD_StdEPReq+0x9a>
 80099f2:	e02c      	b.n	8009a4e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00d      	beq.n	8009a16 <USBD_StdEPReq+0x90>
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	2b80      	cmp	r3, #128	; 0x80
 80099fe:	d00a      	beq.n	8009a16 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f002 f91f 	bl	800bc48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a0a:	2180      	movs	r1, #128	; 0x80
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f002 f91b 	bl	800bc48 <USBD_LL_StallEP>
 8009a12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a14:	e020      	b.n	8009a58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fc45 	bl	800a2a8 <USBD_CtlError>
              break;
 8009a1e:	e01b      	b.n	8009a58 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	885b      	ldrh	r3, [r3, #2]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10e      	bne.n	8009a46 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <USBD_StdEPReq+0xc0>
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	2b80      	cmp	r3, #128	; 0x80
 8009a32:	d008      	beq.n	8009a46 <USBD_StdEPReq+0xc0>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	88db      	ldrh	r3, [r3, #6]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f002 f901 	bl	800bc48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fcf9 	bl	800a43e <USBD_CtlSendStatus>

              break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fc29 	bl	800a2a8 <USBD_CtlError>
              break;
 8009a56:	bf00      	nop
          }
          break;
 8009a58:	e0ec      	b.n	8009c34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d002      	beq.n	8009a6c <USBD_StdEPReq+0xe6>
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d016      	beq.n	8009a98 <USBD_StdEPReq+0x112>
 8009a6a:	e030      	b.n	8009ace <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00d      	beq.n	8009a8e <USBD_StdEPReq+0x108>
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b80      	cmp	r3, #128	; 0x80
 8009a76:	d00a      	beq.n	8009a8e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f002 f8e3 	bl	800bc48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a82:	2180      	movs	r1, #128	; 0x80
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f002 f8df 	bl	800bc48 <USBD_LL_StallEP>
 8009a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a8c:	e025      	b.n	8009ada <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fc09 	bl	800a2a8 <USBD_CtlError>
              break;
 8009a96:	e020      	b.n	8009ada <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	885b      	ldrh	r3, [r3, #2]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11b      	bne.n	8009ad8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f002 f8e9 	bl	800bc86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fcc2 	bl	800a43e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	4798      	blx	r3
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009acc:	e004      	b.n	8009ad8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fbe9 	bl	800a2a8 <USBD_CtlError>
              break;
 8009ad6:	e000      	b.n	8009ada <USBD_StdEPReq+0x154>
              break;
 8009ad8:	bf00      	nop
          }
          break;
 8009ada:	e0ab      	b.n	8009c34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d002      	beq.n	8009aee <USBD_StdEPReq+0x168>
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d032      	beq.n	8009b52 <USBD_StdEPReq+0x1cc>
 8009aec:	e097      	b.n	8009c1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <USBD_StdEPReq+0x17e>
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b80      	cmp	r3, #128	; 0x80
 8009af8:	d004      	beq.n	8009b04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fbd3 	bl	800a2a8 <USBD_CtlError>
                break;
 8009b02:	e091      	b.n	8009c28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	da0b      	bge.n	8009b24 <USBD_StdEPReq+0x19e>
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	3310      	adds	r3, #16
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	4413      	add	r3, r2
 8009b20:	3304      	adds	r3, #4
 8009b22:	e00b      	b.n	8009b3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4413      	add	r3, r2
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2200      	movs	r2, #0
 8009b42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2202      	movs	r2, #2
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fc1d 	bl	800a38a <USBD_CtlSendData>
              break;
 8009b50:	e06a      	b.n	8009c28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da11      	bge.n	8009b7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	f003 020f 	and.w	r2, r3, #15
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3324      	adds	r3, #36	; 0x24
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d117      	bne.n	8009ba4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb96 	bl	800a2a8 <USBD_CtlError>
                  break;
 8009b7c:	e054      	b.n	8009c28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	f003 020f 	and.w	r2, r3, #15
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d104      	bne.n	8009ba4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fb83 	bl	800a2a8 <USBD_CtlError>
                  break;
 8009ba2:	e041      	b.n	8009c28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	da0b      	bge.n	8009bc4 <USBD_StdEPReq+0x23e>
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	3310      	adds	r3, #16
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	e00b      	b.n	8009bdc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	4413      	add	r3, r2
 8009bda:	3304      	adds	r3, #4
 8009bdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <USBD_StdEPReq+0x264>
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b80      	cmp	r3, #128	; 0x80
 8009be8:	d103      	bne.n	8009bf2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	e00e      	b.n	8009c10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f002 f864 	bl	800bcc4 <USBD_LL_IsStallEP>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2201      	movs	r2, #1
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	e002      	b.n	8009c10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2202      	movs	r2, #2
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fbb7 	bl	800a38a <USBD_CtlSendData>
              break;
 8009c1c:	e004      	b.n	8009c28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fb41 	bl	800a2a8 <USBD_CtlError>
              break;
 8009c26:	bf00      	nop
          }
          break;
 8009c28:	e004      	b.n	8009c34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fb3b 	bl	800a2a8 <USBD_CtlError>
          break;
 8009c32:	bf00      	nop
      }
      break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fb35 	bl	800a2a8 <USBD_CtlError>
      break;
 8009c3e:	bf00      	nop
  }

  return ret;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	885b      	ldrh	r3, [r3, #2]
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	2b06      	cmp	r3, #6
 8009c6e:	f200 8128 	bhi.w	8009ec2 <USBD_GetDescriptor+0x276>
 8009c72:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <USBD_GetDescriptor+0x2c>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009cad 	.word	0x08009cad
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009ec3 	.word	0x08009ec3
 8009c88:	08009ec3 	.word	0x08009ec3
 8009c8c:	08009e63 	.word	0x08009e63
 8009c90:	08009e8f 	.word	0x08009e8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	7c12      	ldrb	r2, [r2, #16]
 8009ca0:	f107 0108 	add.w	r1, r7, #8
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
 8009ca8:	60f8      	str	r0, [r7, #12]
      break;
 8009caa:	e112      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7c1b      	ldrb	r3, [r3, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10d      	bne.n	8009cd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbc:	f107 0208 	add.w	r2, r7, #8
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	4798      	blx	r3
 8009cc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	2202      	movs	r2, #2
 8009ccc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009cce:	e100      	b.n	8009ed2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	f107 0208 	add.w	r2, r7, #8
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4798      	blx	r3
 8009ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	701a      	strb	r2, [r3, #0]
      break;
 8009cea:	e0f2      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	885b      	ldrh	r3, [r3, #2]
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b05      	cmp	r3, #5
 8009cf4:	f200 80ac 	bhi.w	8009e50 <USBD_GetDescriptor+0x204>
 8009cf8:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <USBD_GetDescriptor+0xb4>)
 8009cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfe:	bf00      	nop
 8009d00:	08009d19 	.word	0x08009d19
 8009d04:	08009d4d 	.word	0x08009d4d
 8009d08:	08009d81 	.word	0x08009d81
 8009d0c:	08009db5 	.word	0x08009db5
 8009d10:	08009de9 	.word	0x08009de9
 8009d14:	08009e1d 	.word	0x08009e1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00b      	beq.n	8009d3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	7c12      	ldrb	r2, [r2, #16]
 8009d30:	f107 0108 	add.w	r1, r7, #8
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d3a:	e091      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fab2 	bl	800a2a8 <USBD_CtlError>
            err++;
 8009d44:	7afb      	ldrb	r3, [r7, #11]
 8009d46:	3301      	adds	r3, #1
 8009d48:	72fb      	strb	r3, [r7, #11]
          break;
 8009d4a:	e089      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7c12      	ldrb	r2, [r2, #16]
 8009d64:	f107 0108 	add.w	r1, r7, #8
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d6e:	e077      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa98 	bl	800a2a8 <USBD_CtlError>
            err++;
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d7e:	e06f      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da2:	e05d      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa7e 	bl	800a2a8 <USBD_CtlError>
            err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
          break;
 8009db2:	e055      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	7c12      	ldrb	r2, [r2, #16]
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dd6:	e043      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa64 	bl	800a2a8 <USBD_CtlError>
            err++;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	3301      	adds	r3, #1
 8009de4:	72fb      	strb	r3, [r7, #11]
          break;
 8009de6:	e03b      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0a:	e029      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa4a 	bl	800a2a8 <USBD_CtlError>
            err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1a:	e021      	b.n	8009e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3e:	e00f      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa30 	bl	800a2a8 <USBD_CtlError>
            err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4e:	e007      	b.n	8009e60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fa28 	bl	800a2a8 <USBD_CtlError>
          err++;
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009e5e:	bf00      	nop
      }
      break;
 8009e60:	e037      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7c1b      	ldrb	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d109      	bne.n	8009e7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e72:	f107 0208 	add.w	r2, r7, #8
 8009e76:	4610      	mov	r0, r2
 8009e78:	4798      	blx	r3
 8009e7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e7c:	e029      	b.n	8009ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa11 	bl	800a2a8 <USBD_CtlError>
        err++;
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e8c:	e021      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7c1b      	ldrb	r3, [r3, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10d      	bne.n	8009eb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9e:	f107 0208 	add.w	r2, r7, #8
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	4798      	blx	r3
 8009ea6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	2207      	movs	r2, #7
 8009eae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009eb0:	e00f      	b.n	8009ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f9f7 	bl	800a2a8 <USBD_CtlError>
        err++;
 8009eba:	7afb      	ldrb	r3, [r7, #11]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8009ec0:	e007      	b.n	8009ed2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f9ef 	bl	800a2a8 <USBD_CtlError>
      err++;
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	72fb      	strb	r3, [r7, #11]
      break;
 8009ed0:	bf00      	nop
  }

  if (err != 0U)
 8009ed2:	7afb      	ldrb	r3, [r7, #11]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d11e      	bne.n	8009f16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	88db      	ldrh	r3, [r3, #6]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d016      	beq.n	8009f0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009ee0:	893b      	ldrh	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00e      	beq.n	8009f04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88da      	ldrh	r2, [r3, #6]
 8009eea:	893b      	ldrh	r3, [r7, #8]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bf28      	it	cs
 8009ef0:	4613      	movcs	r3, r2
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ef6:	893b      	ldrh	r3, [r7, #8]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	68f9      	ldr	r1, [r7, #12]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fa44 	bl	800a38a <USBD_CtlSendData>
 8009f02:	e009      	b.n	8009f18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f9ce 	bl	800a2a8 <USBD_CtlError>
 8009f0c:	e004      	b.n	8009f18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fa95 	bl	800a43e <USBD_CtlSendStatus>
 8009f14:	e000      	b.n	8009f18 <USBD_GetDescriptor+0x2cc>
    return;
 8009f16:	bf00      	nop
  }
}
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop

08009f20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	889b      	ldrh	r3, [r3, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d131      	bne.n	8009f96 <USBD_SetAddress+0x76>
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	88db      	ldrh	r3, [r3, #6]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d12d      	bne.n	8009f96 <USBD_SetAddress+0x76>
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	885b      	ldrh	r3, [r3, #2]
 8009f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8009f40:	d829      	bhi.n	8009f96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	885b      	ldrh	r3, [r3, #2]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d104      	bne.n	8009f64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f9a3 	bl	800a2a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f62:	e01d      	b.n	8009fa0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	7bfa      	ldrb	r2, [r7, #15]
 8009f68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fed3 	bl	800bd1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa61 	bl	800a43e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d004      	beq.n	8009f8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f8a:	e009      	b.n	8009fa0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f94:	e004      	b.n	8009fa0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f985 	bl	800a2a8 <USBD_CtlError>
  }
}
 8009f9e:	bf00      	nop
 8009fa0:	bf00      	nop
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	885b      	ldrh	r3, [r3, #2]
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	4b4c      	ldr	r3, [pc, #304]	; (800a0f0 <USBD_SetConfig+0x148>)
 8009fbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009fc0:	4b4b      	ldr	r3, [pc, #300]	; (800a0f0 <USBD_SetConfig+0x148>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d905      	bls.n	8009fd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f96c 	bl	800a2a8 <USBD_CtlError>
    return USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e088      	b.n	800a0e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d002      	beq.n	8009fe6 <USBD_SetConfig+0x3e>
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d025      	beq.n	800a030 <USBD_SetConfig+0x88>
 8009fe4:	e071      	b.n	800a0ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009fe6:	4b42      	ldr	r3, [pc, #264]	; (800a0f0 <USBD_SetConfig+0x148>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d01c      	beq.n	800a028 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009fee:	4b40      	ldr	r3, [pc, #256]	; (800a0f0 <USBD_SetConfig+0x148>)
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ff8:	4b3d      	ldr	r3, [pc, #244]	; (800a0f0 <USBD_SetConfig+0x148>)
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff f948 	bl	8009294 <USBD_SetClassConfig>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d004      	beq.n	800a018 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f949 	bl	800a2a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a016:	e065      	b.n	800a0e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fa10 	bl	800a43e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2203      	movs	r2, #3
 800a022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a026:	e05d      	b.n	800a0e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fa08 	bl	800a43e <USBD_CtlSendStatus>
      break;
 800a02e:	e059      	b.n	800a0e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a030:	4b2f      	ldr	r3, [pc, #188]	; (800a0f0 <USBD_SetConfig+0x148>)
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d112      	bne.n	800a05e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a040:	4b2b      	ldr	r3, [pc, #172]	; (800a0f0 <USBD_SetConfig+0x148>)
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a04a:	4b29      	ldr	r3, [pc, #164]	; (800a0f0 <USBD_SetConfig+0x148>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff f93b 	bl	80092cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f9f1 	bl	800a43e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a05c:	e042      	b.n	800a0e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a05e:	4b24      	ldr	r3, [pc, #144]	; (800a0f0 <USBD_SetConfig+0x148>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d02a      	beq.n	800a0c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7ff f929 	bl	80092cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a07a:	4b1d      	ldr	r3, [pc, #116]	; (800a0f0 <USBD_SetConfig+0x148>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a084:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <USBD_SetConfig+0x148>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7ff f902 	bl	8009294 <USBD_SetClassConfig>
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00f      	beq.n	800a0ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f903 	bl	800a2a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff f90e 	bl	80092cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0b8:	e014      	b.n	800a0e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f9bf 	bl	800a43e <USBD_CtlSendStatus>
      break;
 800a0c0:	e010      	b.n	800a0e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f9bb 	bl	800a43e <USBD_CtlSendStatus>
      break;
 800a0c8:	e00c      	b.n	800a0e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f8eb 	bl	800a2a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <USBD_SetConfig+0x148>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff f8f7 	bl	80092cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e2:	bf00      	nop
  }

  return ret;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2000019c 	.word	0x2000019c

0800a0f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	88db      	ldrh	r3, [r3, #6]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d004      	beq.n	800a110 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f8cd 	bl	800a2a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a10e:	e023      	b.n	800a158 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	dc02      	bgt.n	800a122 <USBD_GetConfig+0x2e>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dc03      	bgt.n	800a128 <USBD_GetConfig+0x34>
 800a120:	e015      	b.n	800a14e <USBD_GetConfig+0x5a>
 800a122:	2b03      	cmp	r3, #3
 800a124:	d00b      	beq.n	800a13e <USBD_GetConfig+0x4a>
 800a126:	e012      	b.n	800a14e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3308      	adds	r3, #8
 800a132:	2201      	movs	r2, #1
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f927 	bl	800a38a <USBD_CtlSendData>
        break;
 800a13c:	e00c      	b.n	800a158 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3304      	adds	r3, #4
 800a142:	2201      	movs	r2, #1
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f91f 	bl	800a38a <USBD_CtlSendData>
        break;
 800a14c:	e004      	b.n	800a158 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f8a9 	bl	800a2a8 <USBD_CtlError>
        break;
 800a156:	bf00      	nop
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a170:	b2db      	uxtb	r3, r3
 800a172:	3b01      	subs	r3, #1
 800a174:	2b02      	cmp	r3, #2
 800a176:	d81e      	bhi.n	800a1b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	88db      	ldrh	r3, [r3, #6]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d004      	beq.n	800a18a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f890 	bl	800a2a8 <USBD_CtlError>
        break;
 800a188:	e01a      	b.n	800a1c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f043 0202 	orr.w	r2, r3, #2
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	330c      	adds	r3, #12
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f8eb 	bl	800a38a <USBD_CtlSendData>
      break;
 800a1b4:	e004      	b.n	800a1c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f875 	bl	800a2a8 <USBD_CtlError>
      break;
 800a1be:	bf00      	nop
  }
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d106      	bne.n	800a1e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f92b 	bl	800a43e <USBD_CtlSendStatus>
  }
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a200:	b2db      	uxtb	r3, r3
 800a202:	3b01      	subs	r3, #1
 800a204:	2b02      	cmp	r3, #2
 800a206:	d80b      	bhi.n	800a220 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	885b      	ldrh	r3, [r3, #2]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d10c      	bne.n	800a22a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f910 	bl	800a43e <USBD_CtlSendStatus>
      }
      break;
 800a21e:	e004      	b.n	800a22a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f840 	bl	800a2a8 <USBD_CtlError>
      break;
 800a228:	e000      	b.n	800a22c <USBD_ClrFeature+0x3c>
      break;
 800a22a:	bf00      	nop
  }
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3301      	adds	r3, #1
 800a24e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3301      	adds	r3, #1
 800a25c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff fabb 	bl	80097da <SWAPBYTE>
 800a264:	4603      	mov	r3, r0
 800a266:	461a      	mov	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3301      	adds	r3, #1
 800a270:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3301      	adds	r3, #1
 800a276:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7ff faae 	bl	80097da <SWAPBYTE>
 800a27e:	4603      	mov	r3, r0
 800a280:	461a      	mov	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3301      	adds	r3, #1
 800a290:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff faa1 	bl	80097da <SWAPBYTE>
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	80da      	strh	r2, [r3, #6]
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2b2:	2180      	movs	r1, #128	; 0x80
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fcc7 	bl	800bc48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 fcc3 	bl	800bc48 <USBD_LL_StallEP>
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b086      	sub	sp, #24
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d036      	beq.n	800a34e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a2e4:	6938      	ldr	r0, [r7, #16]
 800a2e6:	f000 f836 	bl	800a356 <USBD_GetLen>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	7812      	ldrb	r2, [r2, #0]
 800a302:	701a      	strb	r2, [r3, #0]
  idx++;
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	3301      	adds	r3, #1
 800a308:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	4413      	add	r3, r2
 800a310:	2203      	movs	r2, #3
 800a312:	701a      	strb	r2, [r3, #0]
  idx++;
 800a314:	7dfb      	ldrb	r3, [r7, #23]
 800a316:	3301      	adds	r3, #1
 800a318:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a31a:	e013      	b.n	800a344 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	4413      	add	r3, r2
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	7812      	ldrb	r2, [r2, #0]
 800a326:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	3301      	adds	r3, #1
 800a32c:	613b      	str	r3, [r7, #16]
    idx++;
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	3301      	adds	r3, #1
 800a332:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	4413      	add	r3, r2
 800a33a:	2200      	movs	r2, #0
 800a33c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	3301      	adds	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e7      	bne.n	800a31c <USBD_GetString+0x52>
 800a34c:	e000      	b.n	800a350 <USBD_GetString+0x86>
    return;
 800a34e:	bf00      	nop
  }
}
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a366:	e005      	b.n	800a374 <USBD_GetLen+0x1e>
  {
    len++;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	3301      	adds	r3, #1
 800a36c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	3301      	adds	r3, #1
 800a372:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1f5      	bne.n	800a368 <USBD_GetLen+0x12>
  }

  return len;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2202      	movs	r2, #2
 800a39a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f001 fcd2 	bl	800bd5a <USBD_LL_Transmit>

  return USBD_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f001 fcc1 	bl	800bd5a <USBD_LL_Transmit>

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2203      	movs	r2, #3
 800a3f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	2100      	movs	r1, #0
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f001 fcc5 	bl	800bd9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f001 fcb4 	bl	800bd9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b082      	sub	sp, #8
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2204      	movs	r2, #4
 800a44a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a44e:	2300      	movs	r3, #0
 800a450:	2200      	movs	r2, #0
 800a452:	2100      	movs	r1, #0
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fc80 	bl	800bd5a <USBD_LL_Transmit>

  return USBD_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2205      	movs	r2, #5
 800a470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a474:	2300      	movs	r3, #0
 800a476:	2200      	movs	r2, #0
 800a478:	2100      	movs	r1, #0
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 fc8e 	bl	800bd9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0

	switch(sApplicationBase.eApplicationState)
 800a490:	4b17      	ldr	r3, [pc, #92]	; (800a4f0 <ApplicationPerform+0x64>)
 800a492:	7e5b      	ldrb	r3, [r3, #25]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b03      	cmp	r3, #3
 800a498:	d822      	bhi.n	800a4e0 <ApplicationPerform+0x54>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <ApplicationPerform+0x14>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4b1 	.word	0x0800a4b1
 800a4a4:	0800a4bf 	.word	0x0800a4bf
 800a4a8:	0800a4db 	.word	0x0800a4db
 800a4ac:	0800a4e9 	.word	0x0800a4e9
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	f7f6 f80d 	bl	80004d0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	f000 f8a6 	bl	800a608 <AppStateChangeRequest>
		break;
 800a4bc:	e015      	b.n	800a4ea <ApplicationPerform+0x5e>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800a4be:	f000 f8ef 	bl	800a6a0 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800a4c2:	f000 fb8f 	bl	800abe4 <TempCollect_Initialize>
		DataHandler_Initialize();
 800a4c6:	f000 f92f 	bl	800a728 <DataHandler_Initialize>
		TurnAllSensorOn();
 800a4ca:	f7f6 f86d 	bl	80005a8 <TurnAllSensorOn>
		TurnOnSynchronousEvent();
 800a4ce:	f000 f923 	bl	800a718 <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800a4d2:	2002      	movs	r0, #2
 800a4d4:	f000 f898 	bl	800a608 <AppStateChangeRequest>
		break;
 800a4d8:	e007      	b.n	800a4ea <ApplicationPerform+0x5e>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800a4da:	f000 f867 	bl	800a5ac <AsynchronousTaskScheduler>
		break;
 800a4de:	e004      	b.n	800a4ea <ApplicationPerform+0x5e>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800a4e0:	2010      	movs	r0, #16
 800a4e2:	f000 f905 	bl	800a6f0 <AssertError>
		break;
 800a4e6:	e000      	b.n	800a4ea <ApplicationPerform+0x5e>
		break;
 800a4e8:	bf00      	nop
	}

}
 800a4ea:	bf00      	nop
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	200001a0 	.word	0x200001a0

0800a4f4 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800a4f8:	4b20      	ldr	r3, [pc, #128]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d006      	beq.n	800a510 <AsynchronousTaskTimerUpdate+0x1c>
	{
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800a502:	4b1e      	ldr	r3, [pc, #120]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a504:	885b      	ldrh	r3, [r3, #2]
 800a506:	b29b      	uxth	r3, r3
 800a508:	3301      	adds	r3, #1
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a50e:	805a      	strh	r2, [r3, #2]
	}
	if(sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800a510:	4b1a      	ldr	r3, [pc, #104]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a512:	791b      	ldrb	r3, [r3, #4]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d006      	beq.n	800a528 <AsynchronousTaskTimerUpdate+0x34>
	{
		sApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800a51a:	4b18      	ldr	r3, [pc, #96]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a51c:	88db      	ldrh	r3, [r3, #6]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	3301      	adds	r3, #1
 800a522:	b29a      	uxth	r2, r3
 800a524:	4b15      	ldr	r3, [pc, #84]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a526:	80da      	strh	r2, [r3, #6]
	}
	if(sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800a528:	4b14      	ldr	r3, [pc, #80]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a52a:	7a1b      	ldrb	r3, [r3, #8]
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d006      	beq.n	800a540 <AsynchronousTaskTimerUpdate+0x4c>
	{
		sApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800a532:	4b12      	ldr	r3, [pc, #72]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a534:	895b      	ldrh	r3, [r3, #10]
 800a536:	b29b      	uxth	r3, r3
 800a538:	3301      	adds	r3, #1
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a53e:	815a      	strh	r2, [r3, #10]
	}
	if(sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800a540:	4b0e      	ldr	r3, [pc, #56]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a542:	7b1b      	ldrb	r3, [r3, #12]
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d006      	beq.n	800a558 <AsynchronousTaskTimerUpdate+0x64>
	{
		sApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800a54a:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a54c:	89db      	ldrh	r3, [r3, #14]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	3301      	adds	r3, #1
 800a552:	b29a      	uxth	r2, r3
 800a554:	4b09      	ldr	r3, [pc, #36]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a556:	81da      	strh	r2, [r3, #14]
	}
	if(sApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800a558:	4b08      	ldr	r3, [pc, #32]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a55a:	7c1b      	ldrb	r3, [r3, #16]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d006      	beq.n	800a570 <AsynchronousTaskTimerUpdate+0x7c>
	{
		sApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800a562:	4b06      	ldr	r3, [pc, #24]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a564:	8a5b      	ldrh	r3, [r3, #18]
 800a566:	b29b      	uxth	r3, r3
 800a568:	3301      	adds	r3, #1
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	4b03      	ldr	r3, [pc, #12]	; (800a57c <AsynchronousTaskTimerUpdate+0x88>)
 800a56e:	825a      	strh	r2, [r3, #18]
	}

}
 800a570:	bf00      	nop
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	200001a0 	.word	0x200001a0

0800a580 <AsynchronousTask_10ms>:

/* Internal functions */
void AsynchronousTask_10ms()
{
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800a584:	f000 fa3e 	bl	800aa04 <TempCollect_Operate>
}
 800a588:	bf00      	nop
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0

}
 800a590:	bf00      	nop
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800a59e:	f7f5 ffb3 	bl	8000508 <ToggleLED_B>
	DataHandler_Operate();
 800a5a2:	f000 fa0d 	bl	800a9c0 <DataHandler_Operate>
}
 800a5a6:	bf00      	nop
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800a5b0:	4b14      	ldr	r3, [pc, #80]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5b2:	885b      	ldrh	r3, [r3, #2]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5ba:	d304      	bcc.n	800a5c6 <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800a5bc:	f7ff ffed 	bl	800a59a <AsynchronousTask_1000ms>
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a5c0:	4b10      	ldr	r3, [pc, #64]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	805a      	strh	r2, [r3, #2]
	}

	if(sApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5c8:	88db      	ldrh	r3, [r3, #6]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	2b63      	cmp	r3, #99	; 0x63
 800a5ce:	d904      	bls.n	800a5da <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800a5d0:	f7ff ffdc 	bl	800a58c <AsynchronousTask_100ms>
		sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	80da      	strh	r2, [r3, #6]
	}

	if(sApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800a5da:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5dc:	895b      	ldrh	r3, [r3, #10]
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	2b09      	cmp	r3, #9
 800a5e2:	d904      	bls.n	800a5ee <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800a5e4:	f7ff ffcc 	bl	800a580 <AsynchronousTask_10ms>
		sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a5e8:	4b06      	ldr	r3, [pc, #24]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	815a      	strh	r2, [r3, #10]
	}

	if(sApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5f0:	89db      	ldrh	r3, [r3, #14]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <AsynchronousTaskScheduler+0x52>
	{
//		AsynchronousTask_1ms();
		sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a5f8:	4b02      	ldr	r3, [pc, #8]	; (800a604 <AsynchronousTaskScheduler+0x58>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	81da      	strh	r2, [r3, #14]
	}

}
 800a5fe:	bf00      	nop
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200001a0 	.word	0x200001a0

0800a608 <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
	switch(sApplicationBase.eApplicationState)
 800a612:	4b22      	ldr	r3, [pc, #136]	; (800a69c <AppStateChangeRequest+0x94>)
 800a614:	7e5b      	ldrb	r3, [r3, #25]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d837      	bhi.n	800a68c <AppStateChangeRequest+0x84>
 800a61c:	a201      	add	r2, pc, #4	; (adr r2, 800a624 <AppStateChangeRequest+0x1c>)
 800a61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a622:	bf00      	nop
 800a624:	0800a635 	.word	0x0800a635
 800a628:	0800a64b 	.word	0x0800a64b
 800a62c:	0800a661 	.word	0x0800a661
 800a630:	0800a685 	.word	0x0800a685
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d103      	bne.n	800a642 <AppStateChangeRequest+0x3a>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <AppStateChangeRequest+0x94>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a640:	e028      	b.n	800a694 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a642:	2020      	movs	r0, #32
 800a644:	f000 f854 	bl	800a6f0 <AssertError>
		break;
 800a648:	e024      	b.n	800a694 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d103      	bne.n	800a658 <AppStateChangeRequest+0x50>
		{
			sApplicationBase.eApplicationState = eApp_Perform;
 800a650:	4b12      	ldr	r3, [pc, #72]	; (800a69c <AppStateChangeRequest+0x94>)
 800a652:	2202      	movs	r2, #2
 800a654:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a656:	e01d      	b.n	800a694 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a658:	2020      	movs	r0, #32
 800a65a:	f000 f849 	bl	800a6f0 <AssertError>
		break;
 800a65e:	e019      	b.n	800a694 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d103      	bne.n	800a66e <AppStateChangeRequest+0x66>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a666:	4b0d      	ldr	r3, [pc, #52]	; (800a69c <AppStateChangeRequest+0x94>)
 800a668:	2201      	movs	r2, #1
 800a66a:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a66c:	e012      	b.n	800a694 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	2b03      	cmp	r3, #3
 800a672:	d103      	bne.n	800a67c <AppStateChangeRequest+0x74>
			sApplicationBase.eApplicationState = eApp_Shutdown;
 800a674:	4b09      	ldr	r3, [pc, #36]	; (800a69c <AppStateChangeRequest+0x94>)
 800a676:	2203      	movs	r2, #3
 800a678:	765a      	strb	r2, [r3, #25]
		break;
 800a67a:	e00b      	b.n	800a694 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a67c:	2020      	movs	r0, #32
 800a67e:	f000 f837 	bl	800a6f0 <AssertError>
		break;
 800a682:	e007      	b.n	800a694 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800a684:	2020      	movs	r0, #32
 800a686:	f000 f833 	bl	800a6f0 <AssertError>
		break;
 800a68a:	e003      	b.n	800a694 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800a68c:	2020      	movs	r0, #32
 800a68e:	f000 f82f 	bl	800a6f0 <AssertError>
		break;
 800a692:	bf00      	nop
	}

}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	200001a0 	.word	0x200001a0

0800a6a0 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
	sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800a6a4:	4b11      	ldr	r3, [pc, #68]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	701a      	strb	r2, [r3, #0]
	sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800a6aa:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	711a      	strb	r2, [r3, #4]
	sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800a6b0:	4b0e      	ldr	r3, [pc, #56]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	721a      	strb	r2, [r3, #8]
	sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	731a      	strb	r2, [r3, #12]
	sApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800a6bc:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	741a      	strb	r2, [r3, #16]

	sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a6c2:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	805a      	strh	r2, [r3, #2]
	sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a6c8:	4b08      	ldr	r3, [pc, #32]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	80da      	strh	r2, [r3, #6]
	sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a6ce:	4b07      	ldr	r3, [pc, #28]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	815a      	strh	r2, [r3, #10]
	sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a6d4:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	81da      	strh	r2, [r3, #14]
	sApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800a6da:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <AppEnableResetTaskTimers+0x4c>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	825a      	strh	r2, [r3, #18]
}
 800a6e0:	bf00      	nop
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	200001a0 	.word	0x200001a0

0800a6f0 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	80fb      	strh	r3, [r7, #6]
	sApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <AssertError+0x24>)
 800a6fc:	695a      	ldr	r2, [r3, #20]
 800a6fe:	88fb      	ldrh	r3, [r7, #6]
 800a700:	4313      	orrs	r3, r2
 800a702:	4a04      	ldr	r2, [pc, #16]	; (800a714 <AssertError+0x24>)
 800a704:	6153      	str	r3, [r2, #20]
}
 800a706:	bf00      	nop
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	200001a0 	.word	0x200001a0

0800a718 <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0

}
 800a71c:	bf00      	nop
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
	...

0800a728 <DataHandler_Initialize>:
}DataHandler_t;

static DataHandler_t kDataHandler;

void DataHandler_Initialize()
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800a72c:	f000 f808 	bl	800a740 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <DataHandler_Initialize+0x14>)
 800a732:	2201      	movs	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]

}
 800a736:	bf00      	nop
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	200001bc 	.word	0x200001bc

0800a740 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800a740:	b490      	push	{r4, r7}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800a746:	4b33      	ldr	r3, [pc, #204]	; (800a814 <DataHandler_Reset+0xd4>)
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800a74e:	4b31      	ldr	r3, [pc, #196]	; (800a814 <DataHandler_Reset+0xd4>)
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800a756:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <DataHandler_Reset+0xd4>)
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800a75e:	4b2d      	ldr	r3, [pc, #180]	; (800a814 <DataHandler_Reset+0xd4>)
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800a766:	4b2b      	ldr	r3, [pc, #172]	; (800a814 <DataHandler_Reset+0xd4>)
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a76e:	2300      	movs	r3, #0
 800a770:	71fb      	strb	r3, [r7, #7]
 800a772:	e046      	b.n	800a802 <DataHandler_Reset+0xc2>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a774:	2300      	movs	r3, #0
 800a776:	71bb      	strb	r3, [r7, #6]
 800a778:	e03d      	b.n	800a7f6 <DataHandler_Reset+0xb6>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800a77a:	79fa      	ldrb	r2, [r7, #7]
 800a77c:	4925      	ldr	r1, [pc, #148]	; (800a814 <DataHandler_Reset+0xd4>)
 800a77e:	4613      	mov	r3, r2
 800a780:	019b      	lsls	r3, r3, #6
 800a782:	4413      	add	r3, r2
 800a784:	00db      	lsls	r3, r3, #3
 800a786:	440b      	add	r3, r1
 800a788:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a78c:	2200      	movs	r2, #0
 800a78e:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800a790:	79fa      	ldrb	r2, [r7, #7]
 800a792:	4920      	ldr	r1, [pc, #128]	; (800a814 <DataHandler_Reset+0xd4>)
 800a794:	4613      	mov	r3, r2
 800a796:	019b      	lsls	r3, r3, #6
 800a798:	4413      	add	r3, r2
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	440b      	add	r3, r1
 800a79e:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800a7a6:	79fa      	ldrb	r2, [r7, #7]
 800a7a8:	491a      	ldr	r1, [pc, #104]	; (800a814 <DataHandler_Reset+0xd4>)
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	019b      	lsls	r3, r3, #6
 800a7ae:	4413      	add	r3, r2
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	440b      	add	r3, r1
 800a7b4:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	717b      	strb	r3, [r7, #5]
 800a7c0:	e013      	b.n	800a7ea <DataHandler_Reset+0xaa>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800a7c2:	79fa      	ldrb	r2, [r7, #7]
 800a7c4:	79bb      	ldrb	r3, [r7, #6]
 800a7c6:	7979      	ldrb	r1, [r7, #5]
 800a7c8:	4c12      	ldr	r4, [pc, #72]	; (800a814 <DataHandler_Reset+0xd4>)
 800a7ca:	0118      	lsls	r0, r3, #4
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	019b      	lsls	r3, r3, #6
 800a7d0:	4413      	add	r3, r2
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	4403      	add	r3, r0
 800a7d6:	440b      	add	r3, r1
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4423      	add	r3, r4
 800a7dc:	3308      	adds	r3, #8
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a7e4:	797b      	ldrb	r3, [r7, #5]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	717b      	strb	r3, [r7, #5]
 800a7ea:	797b      	ldrb	r3, [r7, #5]
 800a7ec:	2b0f      	cmp	r3, #15
 800a7ee:	d9e8      	bls.n	800a7c2 <DataHandler_Reset+0x82>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a7f0:	79bb      	ldrb	r3, [r7, #6]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	71bb      	strb	r3, [r7, #6]
 800a7f6:	79bb      	ldrb	r3, [r7, #6]
 800a7f8:	2b07      	cmp	r3, #7
 800a7fa:	d9be      	bls.n	800a77a <DataHandler_Reset+0x3a>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	3301      	adds	r3, #1
 800a800:	71fb      	strb	r3, [r7, #7]
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d9b5      	bls.n	800a774 <DataHandler_Reset+0x34>
			}
		}
	}

}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc90      	pop	{r4, r7}
 800a812:	4770      	bx	lr
 800a814:	200001bc 	.word	0x200001bc

0800a818 <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800a820:	4b42      	ldr	r3, [pc, #264]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d078      	beq.n	800a91a <DataHandler_OpenNewMeasurement+0x102>
	{
		kDataHandler.u8LengthPointer++;
 800a828:	4b40      	ldr	r3, [pc, #256]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a82a:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a82e:	3301      	adds	r3, #1
 800a830:	b2da      	uxtb	r2, r3
 800a832:	4b3e      	ldr	r3, [pc, #248]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a834:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800a838:	4b3c      	ldr	r3, [pc, #240]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800a840:	4b3a      	ldr	r3, [pc, #232]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a842:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a846:	2b07      	cmp	r3, #7
 800a848:	d96b      	bls.n	800a922 <DataHandler_OpenNewMeasurement+0x10a>
		{
			kDataHandler.u8LengthPointer = 0;
 800a84a:	4b38      	ldr	r3, [pc, #224]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800a852:	4b36      	ldr	r3, [pc, #216]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a854:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a858:	4619      	mov	r1, r3
 800a85a:	4a34      	ldr	r2, [pc, #208]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a85c:	460b      	mov	r3, r1
 800a85e:	019b      	lsls	r3, r3, #6
 800a860:	440b      	add	r3, r1
 800a862:	00db      	lsls	r3, r3, #3
 800a864:	4413      	add	r3, r2
 800a866:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800a86e:	4b2f      	ldr	r3, [pc, #188]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a870:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a874:	4619      	mov	r1, r3
 800a876:	4a2d      	ldr	r2, [pc, #180]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a878:	460b      	mov	r3, r1
 800a87a:	019b      	lsls	r3, r3, #6
 800a87c:	440b      	add	r3, r1
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	4413      	add	r3, r2
 800a882:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a886:	2201      	movs	r2, #1
 800a888:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800a88a:	4b28      	ldr	r3, [pc, #160]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a88c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a890:	4619      	mov	r1, r3
 800a892:	4a26      	ldr	r2, [pc, #152]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a894:	460b      	mov	r3, r1
 800a896:	019b      	lsls	r3, r3, #6
 800a898:	440b      	add	r3, r1
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800a8a6:	4b21      	ldr	r3, [pc, #132]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a8a8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	019b      	lsls	r3, r3, #6
 800a8b4:	440b      	add	r3, r1
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800a8c0:	4b1a      	ldr	r3, [pc, #104]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a8c2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4a18      	ldr	r2, [pc, #96]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	019b      	lsls	r3, r3, #6
 800a8ce:	440b      	add	r3, r1
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	f083 0301 	eor.w	r3, r3, #1
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <DataHandler_OpenNewMeasurement+0xd2>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800a8e4:	2040      	movs	r0, #64	; 0x40
 800a8e6:	f7ff ff03 	bl	800a6f0 <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800a8ea:	4b10      	ldr	r3, [pc, #64]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a8ec:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a8f2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800a8f6:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a8f8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	4b0a      	ldr	r3, [pc, #40]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a902:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a908:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d908      	bls.n	800a922 <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <DataHandler_OpenNewMeasurement+0x114>)
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800a918:	e003      	b.n	800a922 <DataHandler_OpenNewMeasurement+0x10a>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a91a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a91e:	f7ff fee7 	bl	800a6f0 <AssertError>
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	200001bc 	.word	0x200001bc

0800a930 <DataHandler_StoreMeasurement>:
void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800a93a:	4b20      	ldr	r3, [pc, #128]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a93c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a940:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800a942:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a944:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a948:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800a94a:	4b1c      	ldr	r3, [pc, #112]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a94c:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a950:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800a952:	4b1a      	ldr	r3, [pc, #104]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d028      	beq.n	800a9ac <DataHandler_StoreMeasurement+0x7c>
	{

		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800a95a:	7bfa      	ldrb	r2, [r7, #15]
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	7b79      	ldrb	r1, [r7, #13]
 800a960:	4c16      	ldr	r4, [pc, #88]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a962:	0118      	lsls	r0, r3, #4
 800a964:	4613      	mov	r3, r2
 800a966:	019b      	lsls	r3, r3, #6
 800a968:	4413      	add	r3, r2
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	4403      	add	r3, r0
 800a96e:	440b      	add	r3, r1
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4423      	add	r3, r4
 800a974:	3308      	adds	r3, #8
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	601a      	str	r2, [r3, #0]

		kDataHandler.u8WidthPointer++;
 800a97a:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a97c:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a980:	3301      	adds	r3, #1
 800a982:	b2da      	uxtb	r2, r3
 800a984:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a986:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800a98a:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a98c:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a990:	2b0f      	cmp	r3, #15
 800a992:	d90f      	bls.n	800a9b4 <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800a994:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a996:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <DataHandler_StoreMeasurement+0x8c>)
 800a9a0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800a9a4:	2080      	movs	r0, #128	; 0x80
 800a9a6:	f7ff fea3 	bl	800a6f0 <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800a9aa:	e003      	b.n	800a9b4 <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a9ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a9b0:	f7ff fe9e 	bl	800a6f0 <AssertError>
}
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd90      	pop	{r4, r7, pc}
 800a9bc:	200001bc 	.word	0x200001bc

0800a9c0 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	; (800aa00 <DataHandler_Operate+0x40>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d013      	beq.n	800a9f4 <DataHandler_Operate+0x34>
	{

		if( kDataHandler.bPageFilled )
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <DataHandler_Operate+0x40>)
 800a9ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d012      	beq.n	800a9fc <DataHandler_Operate+0x3c>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800a9d6:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <DataHandler_Operate+0x40>)
 800a9d8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4a08      	ldr	r2, [pc, #32]	; (800aa00 <DataHandler_Operate+0x40>)
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	019b      	lsls	r3, r3, #6
 800a9e4:	440b      	add	r3, r1
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800a9f2:	e003      	b.n	800a9fc <DataHandler_Operate+0x3c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a9f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a9f8:	f7ff fe7a 	bl	800a6f0 <AssertError>
}
 800a9fc:	bf00      	nop
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	200001bc 	.word	0x200001bc

0800aa04 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800aa08:	4b73      	ldr	r3, [pc, #460]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa0a:	79db      	ldrb	r3, [r3, #7]
 800aa0c:	2b05      	cmp	r3, #5
 800aa0e:	f200 80d8 	bhi.w	800abc2 <TempCollect_Operate+0x1be>
 800aa12:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <TempCollect_Operate+0x14>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aa31 	.word	0x0800aa31
 800aa1c:	0800aa3b 	.word	0x0800aa3b
 800aa20:	0800aa75 	.word	0x0800aa75
 800aa24:	0800aae7 	.word	0x0800aae7
 800aa28:	0800ab6b 	.word	0x0800ab6b
 800aa2c:	0800aacf 	.word	0x0800aacf
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800aa30:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aa34:	f7ff fe5c 	bl	800a6f0 <AssertError>
		break;
 800aa38:	e0cb      	b.n	800abd2 <TempCollect_Operate+0x1ce>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800aa3a:	4b67      	ldr	r3, [pc, #412]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa3c:	799b      	ldrb	r3, [r3, #6]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 80c4 	beq.w	800abcc <TempCollect_Operate+0x1c8>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800aa44:	4b64      	ldr	r3, [pc, #400]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa46:	2202      	movs	r2, #2
 800aa48:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800aa4a:	4b63      	ldr	r3, [pc, #396]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800aa50:	4b61      	ldr	r3, [pc, #388]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800aa56:	4b60      	ldr	r3, [pc, #384]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800aa5c:	4b5e      	ldr	r3, [pc, #376]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	725a      	strb	r2, [r3, #9]
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800aa62:	4b5d      	ldr	r3, [pc, #372]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	495b      	ldr	r1, [pc, #364]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa6a:	618a      	str	r2, [r1, #24]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fed3 	bl	800a818 <DataHandler_OpenNewMeasurement>
		}
		break;
 800aa72:	e0ab      	b.n	800abcc <TempCollect_Operate+0x1c8>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800aa74:	4b58      	ldr	r3, [pc, #352]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800aa7a:	4b57      	ldr	r3, [pc, #348]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa7c:	8a9b      	ldrh	r3, [r3, #20]
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d80e      	bhi.n	800aaa0 <TempCollect_Operate+0x9c>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800aa82:	4b55      	ldr	r3, [pc, #340]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800aa88:	4b53      	ldr	r3, [pc, #332]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aa8a:	8a9b      	ldrh	r3, [r3, #20]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4613      	mov	r3, r2
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4a51      	ldr	r2, [pc, #324]	; (800abdc <TempCollect_Operate+0x1d8>)
 800aa98:	4413      	add	r3, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7f5 fdf0 	bl	8000680 <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800aaa0:	4b4d      	ldr	r3, [pc, #308]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aaa2:	8adb      	ldrh	r3, [r3, #22]
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d80e      	bhi.n	800aac6 <TempCollect_Operate+0xc2>
		{
			kTemperatureData.bStateReady[1] = false;
 800aaa8:	4b4b      	ldr	r3, [pc, #300]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800aaae:	4b4a      	ldr	r3, [pc, #296]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aab0:	8adb      	ldrh	r3, [r3, #22]
 800aab2:	461a      	mov	r2, r3
 800aab4:	4613      	mov	r3, r2
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4a48      	ldr	r2, [pc, #288]	; (800abe0 <TempCollect_Operate+0x1dc>)
 800aabe:	4413      	add	r3, r2
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7f5 fddd 	bl	8000680 <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800aac6:	4b44      	ldr	r3, [pc, #272]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aac8:	2205      	movs	r2, #5
 800aaca:	71da      	strb	r2, [r3, #7]
		break;
 800aacc:	e081      	b.n	800abd2 <TempCollect_Operate+0x1ce>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800aace:	4b42      	ldr	r3, [pc, #264]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aad0:	7a9b      	ldrb	r3, [r3, #10]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d07c      	beq.n	800abd0 <TempCollect_Operate+0x1cc>
 800aad6:	4b40      	ldr	r3, [pc, #256]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aad8:	7adb      	ldrb	r3, [r3, #11]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d078      	beq.n	800abd0 <TempCollect_Operate+0x1cc>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800aade:	4b3e      	ldr	r3, [pc, #248]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aae0:	2203      	movs	r2, #3
 800aae2:	71da      	strb	r2, [r3, #7]
		}
		break;
 800aae4:	e074      	b.n	800abd0 <TempCollect_Operate+0x1cc>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800aae6:	4b3c      	ldr	r3, [pc, #240]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aae8:	7a1b      	ldrb	r3, [r3, #8]
 800aaea:	f083 0301 	eor.w	r3, r3, #1
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d017      	beq.n	800ab24 <TempCollect_Operate+0x120>
		{
			kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800aaf4:	4b38      	ldr	r3, [pc, #224]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aaf6:	8a9b      	ldrh	r3, [r3, #20]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4613      	mov	r3, r2
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4a36      	ldr	r2, [pc, #216]	; (800abdc <TempCollect_Operate+0x1d8>)
 800ab04:	4413      	add	r3, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f5 fdd0 	bl	80006ac <MCP9808_DecodeTemperature>
 800ab0c:	eef0 7a40 	vmov.f32	s15, s0
 800ab10:	4b31      	ldr	r3, [pc, #196]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab12:	edc3 7a03 	vstr	s15, [r3, #12]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800ab16:	4b30      	ldr	r3, [pc, #192]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab18:	edd3 7a03 	vldr	s15, [r3, #12]
 800ab1c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab20:	f7ff ff06 	bl	800a930 <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800ab24:	4b2c      	ldr	r3, [pc, #176]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab26:	7a5b      	ldrb	r3, [r3, #9]
 800ab28:	f083 0301 	eor.w	r3, r3, #1
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d017      	beq.n	800ab62 <TempCollect_Operate+0x15e>
		{
			kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800ab32:	4b29      	ldr	r3, [pc, #164]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab34:	8adb      	ldrh	r3, [r3, #22]
 800ab36:	461a      	mov	r2, r3
 800ab38:	4613      	mov	r3, r2
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4a27      	ldr	r2, [pc, #156]	; (800abe0 <TempCollect_Operate+0x1dc>)
 800ab42:	4413      	add	r3, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7f5 fdb1 	bl	80006ac <MCP9808_DecodeTemperature>
 800ab4a:	eef0 7a40 	vmov.f32	s15, s0
 800ab4e:	4b22      	ldr	r3, [pc, #136]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab50:	edc3 7a04 	vstr	s15, [r3, #16]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800ab54:	4b20      	ldr	r3, [pc, #128]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab56:	edd3 7a04 	vldr	s15, [r3, #16]
 800ab5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab5e:	f7ff fee7 	bl	800a930 <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800ab62:	4b1d      	ldr	r3, [pc, #116]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab64:	2204      	movs	r2, #4
 800ab66:	71da      	strb	r2, [r3, #7]
		break;
 800ab68:	e033      	b.n	800abd2 <TempCollect_Operate+0x1ce>

	case(TempCollect_ArmNewReading):
		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab6c:	8a9b      	ldrh	r3, [r3, #20]
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d903      	bls.n	800ab7a <TempCollect_Operate+0x176>
		{
			kTemperatureData.bReadFinished[0] = true;
 800ab72:	4b19      	ldr	r3, [pc, #100]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab74:	2201      	movs	r2, #1
 800ab76:	721a      	strb	r2, [r3, #8]
 800ab78:	e005      	b.n	800ab86 <TempCollect_Operate+0x182>
		}
		else
		{
			kTemperatureData.u16ArrayASensorIndex++;
 800ab7a:	4b17      	ldr	r3, [pc, #92]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab7c:	8a9b      	ldrh	r3, [r3, #20]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	4b15      	ldr	r3, [pc, #84]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab84:	829a      	strh	r2, [r3, #20]
		}

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800ab86:	4b14      	ldr	r3, [pc, #80]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab88:	8adb      	ldrh	r3, [r3, #22]
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d903      	bls.n	800ab96 <TempCollect_Operate+0x192>
		{
			kTemperatureData.bReadFinished[1] = true;
 800ab8e:	4b12      	ldr	r3, [pc, #72]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab90:	2201      	movs	r2, #1
 800ab92:	725a      	strb	r2, [r3, #9]
 800ab94:	e005      	b.n	800aba2 <TempCollect_Operate+0x19e>
		}
		else
		{
			kTemperatureData.u16ArrayBSensorIndex++;
 800ab96:	4b10      	ldr	r3, [pc, #64]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800ab98:	8adb      	ldrh	r3, [r3, #22]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	4b0e      	ldr	r3, [pc, #56]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aba0:	82da      	strh	r2, [r3, #22]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800aba2:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800aba4:	7a1b      	ldrb	r3, [r3, #8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d007      	beq.n	800abba <TempCollect_Operate+0x1b6>
 800abaa:	4b0b      	ldr	r3, [pc, #44]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800abac:	7a5b      	ldrb	r3, [r3, #9]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <TempCollect_Operate+0x1b6>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800abb2:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800abb4:	2201      	movs	r2, #1
 800abb6:	71da      	strb	r2, [r3, #7]
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800abb8:	e00b      	b.n	800abd2 <TempCollect_Operate+0x1ce>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800abba:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <TempCollect_Operate+0x1d4>)
 800abbc:	2202      	movs	r2, #2
 800abbe:	71da      	strb	r2, [r3, #7]
		break;
 800abc0:	e007      	b.n	800abd2 <TempCollect_Operate+0x1ce>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800abc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800abc6:	f7ff fd93 	bl	800a6f0 <AssertError>
	break;
 800abca:	e002      	b.n	800abd2 <TempCollect_Operate+0x1ce>
		break;
 800abcc:	bf00      	nop
 800abce:	e000      	b.n	800abd2 <TempCollect_Operate+0x1ce>
		break;
 800abd0:	bf00      	nop
	}
}
 800abd2:	bf00      	nop
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	200005d8 	.word	0x200005d8
 800abdc:	20000814 	.word	0x20000814
 800abe0:	20000850 	.word	0x20000850

0800abe4 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800abe8:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <TempCollect_Initialize+0x1c>)
 800abea:	2201      	movs	r2, #1
 800abec:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800abee:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <TempCollect_Initialize+0x1c>)
 800abf0:	2201      	movs	r2, #1
 800abf2:	715a      	strb	r2, [r3, #5]
}
 800abf4:	bf00      	nop
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	200005d8 	.word	0x200005d8

0800ac04 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800ac08:	f7f5 fc88 	bl	800051c <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800ac0c:	4b06      	ldr	r3, [pc, #24]	; (800ac28 <TempCollect_ScheduleMeasurement+0x24>)
 800ac0e:	799b      	ldrb	r3, [r3, #6]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800ac14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ac18:	f7ff fd6a 	bl	800a6f0 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800ac1c:	e002      	b.n	800ac24 <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800ac1e:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <TempCollect_ScheduleMeasurement+0x24>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	719a      	strb	r2, [r3, #6]
}
 800ac24:	bf00      	nop
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	200005d8 	.word	0x200005d8

0800ac2c <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800ac30:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <TempCollect_I2CA_Done+0x14>)
 800ac32:	2201      	movs	r2, #1
 800ac34:	729a      	strb	r2, [r3, #10]
}
 800ac36:	bf00      	nop
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	200005d8 	.word	0x200005d8

0800ac44 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800ac48:	4b03      	ldr	r3, [pc, #12]	; (800ac58 <TempCollect_I2CB_Done+0x14>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	72da      	strb	r2, [r3, #11]
}
 800ac4e:	bf00      	nop
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr
 800ac58:	200005d8 	.word	0x200005d8

0800ac5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ac60:	f7f5 fd4e 	bl	8000700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ac64:	f000 f836 	bl	800acd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ac68:	f000 fa0e 	bl	800b088 <MX_GPIO_Init>
  MX_DMA_Init();
 800ac6c:	f000 f9ec 	bl	800b048 <MX_DMA_Init>
  MX_RTC_Init();
 800ac70:	f000 f8f8 	bl	800ae64 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800ac74:	f000 f91c 	bl	800aeb0 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800ac78:	f000 f898 	bl	800adac <MX_I2C1_Init>
  MX_I2C2_Init();
 800ac7c:	f000 f8c4 	bl	800ae08 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800ac80:	f000 f9b8 	bl	800aff4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800ac84:	f000 fd1a 	bl	800b6bc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800ac88:	f000 f942 	bl	800af10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SensorArray_Init(&hi2c1, &hi2c2);
 800ac8c:	490d      	ldr	r1, [pc, #52]	; (800acc4 <main+0x68>)
 800ac8e:	480e      	ldr	r0, [pc, #56]	; (800acc8 <main+0x6c>)
 800ac90:	f7f5 fc94 	bl	80005bc <SensorArray_Init>
//  HAL_TIM_Base_MspInit(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 800ac94:	480d      	ldr	r0, [pc, #52]	; (800accc <main+0x70>)
 800ac96:	f7fa ff2f 	bl	8005af8 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	480c      	ldr	r0, [pc, #48]	; (800acd0 <main+0x74>)
 800aca0:	f7f6 fb74 	bl	800138c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800aca4:	2201      	movs	r2, #1
 800aca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800acaa:	4809      	ldr	r0, [pc, #36]	; (800acd0 <main+0x74>)
 800acac:	f7f6 fb6e 	bl	800138c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800acb0:	2201      	movs	r2, #1
 800acb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800acb6:	4806      	ldr	r0, [pc, #24]	; (800acd0 <main+0x74>)
 800acb8:	f7f6 fb68 	bl	800138c <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800acbc:	f7ff fbe6 	bl	800a48c <ApplicationPerform>
 800acc0:	e7fc      	b.n	800acbc <main+0x60>
 800acc2:	bf00      	nop
 800acc4:	20000944 	.word	0x20000944
 800acc8:	200008f0 	.word	0x200008f0
 800accc:	20000a80 	.word	0x20000a80
 800acd0:	40020800 	.word	0x40020800

0800acd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b094      	sub	sp, #80	; 0x50
 800acd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800acda:	f107 0320 	add.w	r3, r7, #32
 800acde:	2230      	movs	r2, #48	; 0x30
 800ace0:	2100      	movs	r1, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f001 fa30 	bl	800c148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ace8:	f107 030c 	add.w	r3, r7, #12
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	605a      	str	r2, [r3, #4]
 800acf2:	609a      	str	r2, [r3, #8]
 800acf4:	60da      	str	r2, [r3, #12]
 800acf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800acf8:	2300      	movs	r3, #0
 800acfa:	60bb      	str	r3, [r7, #8]
 800acfc:	4b29      	ldr	r3, [pc, #164]	; (800ada4 <SystemClock_Config+0xd0>)
 800acfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad00:	4a28      	ldr	r2, [pc, #160]	; (800ada4 <SystemClock_Config+0xd0>)
 800ad02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad06:	6413      	str	r3, [r2, #64]	; 0x40
 800ad08:	4b26      	ldr	r3, [pc, #152]	; (800ada4 <SystemClock_Config+0xd0>)
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad10:	60bb      	str	r3, [r7, #8]
 800ad12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad14:	2300      	movs	r3, #0
 800ad16:	607b      	str	r3, [r7, #4]
 800ad18:	4b23      	ldr	r3, [pc, #140]	; (800ada8 <SystemClock_Config+0xd4>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a22      	ldr	r2, [pc, #136]	; (800ada8 <SystemClock_Config+0xd4>)
 800ad1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	4b20      	ldr	r3, [pc, #128]	; (800ada8 <SystemClock_Config+0xd4>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ad2c:	607b      	str	r3, [r7, #4]
 800ad2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800ad30:	2305      	movs	r3, #5
 800ad32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ad34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ad42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800ad48:	230c      	movs	r3, #12
 800ad4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800ad4c:	2348      	movs	r3, #72	; 0x48
 800ad4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ad50:	2302      	movs	r3, #2
 800ad52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800ad54:	2303      	movs	r3, #3
 800ad56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad58:	f107 0320 	add.w	r3, r7, #32
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7f9 fa89 	bl	8004274 <HAL_RCC_OscConfig>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 800ad68:	f000 fa10 	bl	800b18c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad6c:	230f      	movs	r3, #15
 800ad6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad70:	2302      	movs	r3, #2
 800ad72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ad74:	2300      	movs	r3, #0
 800ad76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ad78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	2102      	movs	r1, #2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7f9 fce9 	bl	8004760 <HAL_RCC_ClockConfig>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800ad94:	f000 f9fa 	bl	800b18c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800ad98:	f7f9 fdc8 	bl	800492c <HAL_RCC_EnableCSS>
}
 800ad9c:	bf00      	nop
 800ad9e:	3750      	adds	r7, #80	; 0x50
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	40023800 	.word	0x40023800
 800ada8:	40007000 	.word	0x40007000

0800adac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800adb0:	4b12      	ldr	r3, [pc, #72]	; (800adfc <MX_I2C1_Init+0x50>)
 800adb2:	4a13      	ldr	r2, [pc, #76]	; (800ae00 <MX_I2C1_Init+0x54>)
 800adb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800adb6:	4b11      	ldr	r3, [pc, #68]	; (800adfc <MX_I2C1_Init+0x50>)
 800adb8:	4a12      	ldr	r2, [pc, #72]	; (800ae04 <MX_I2C1_Init+0x58>)
 800adba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800adbc:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <MX_I2C1_Init+0x50>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800adc2:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <MX_I2C1_Init+0x50>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800adc8:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <MX_I2C1_Init+0x50>)
 800adca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800adce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <MX_I2C1_Init+0x50>)
 800add2:	2200      	movs	r2, #0
 800add4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800add6:	4b09      	ldr	r3, [pc, #36]	; (800adfc <MX_I2C1_Init+0x50>)
 800add8:	2200      	movs	r2, #0
 800adda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800addc:	4b07      	ldr	r3, [pc, #28]	; (800adfc <MX_I2C1_Init+0x50>)
 800adde:	2200      	movs	r2, #0
 800ade0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ade2:	4b06      	ldr	r3, [pc, #24]	; (800adfc <MX_I2C1_Init+0x50>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ade8:	4804      	ldr	r0, [pc, #16]	; (800adfc <MX_I2C1_Init+0x50>)
 800adea:	f7f6 fb03 	bl	80013f4 <HAL_I2C_Init>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800adf4:	f000 f9ca 	bl	800b18c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800adf8:	bf00      	nop
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	200008f0 	.word	0x200008f0
 800ae00:	40005400 	.word	0x40005400
 800ae04:	000186a0 	.word	0x000186a0

0800ae08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800ae0c:	4b12      	ldr	r3, [pc, #72]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae0e:	4a13      	ldr	r2, [pc, #76]	; (800ae5c <MX_I2C2_Init+0x54>)
 800ae10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800ae12:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae14:	4a12      	ldr	r2, [pc, #72]	; (800ae60 <MX_I2C2_Init+0x58>)
 800ae16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ae18:	4b0f      	ldr	r3, [pc, #60]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800ae1e:	4b0e      	ldr	r3, [pc, #56]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae24:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800ae32:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ae38:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ae3e:	4b06      	ldr	r3, [pc, #24]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ae44:	4804      	ldr	r0, [pc, #16]	; (800ae58 <MX_I2C2_Init+0x50>)
 800ae46:	f7f6 fad5 	bl	80013f4 <HAL_I2C_Init>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800ae50:	f000 f99c 	bl	800b18c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800ae54:	bf00      	nop
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20000944 	.word	0x20000944
 800ae5c:	40005800 	.word	0x40005800
 800ae60:	000186a0 	.word	0x000186a0

0800ae64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800ae68:	4b0f      	ldr	r3, [pc, #60]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae6a:	4a10      	ldr	r2, [pc, #64]	; (800aeac <MX_RTC_Init+0x48>)
 800ae6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ae6e:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ae74:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae76:	227f      	movs	r2, #127	; 0x7f
 800ae78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ae7a:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae7c:	22ff      	movs	r2, #255	; 0xff
 800ae7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ae80:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ae86:	4b08      	ldr	r3, [pc, #32]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ae8c:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ae92:	4805      	ldr	r0, [pc, #20]	; (800aea8 <MX_RTC_Init+0x44>)
 800ae94:	f7f9 ff4c 	bl	8004d30 <HAL_RTC_Init>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800ae9e:	f000 f975 	bl	800b18c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	200009dc 	.word	0x200009dc
 800aeac:	40002800 	.word	0x40002800

0800aeb0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800aeb4:	4b14      	ldr	r3, [pc, #80]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aeb6:	4a15      	ldr	r2, [pc, #84]	; (800af0c <MX_SDIO_SD_Init+0x5c>)
 800aeb8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800aeba:	4b13      	ldr	r3, [pc, #76]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800aec0:	4b11      	ldr	r3, [pc, #68]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800aec6:	4b10      	ldr	r3, [pc, #64]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800aecc:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aece:	2200      	movs	r2, #0
 800aed0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800aed2:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800aed8:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800aede:	480a      	ldr	r0, [pc, #40]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aee0:	f7fa f80b 	bl	8004efa <HAL_SD_Init>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800aeea:	f000 f94f 	bl	800b18c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800aeee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aef2:	4805      	ldr	r0, [pc, #20]	; (800af08 <MX_SDIO_SD_Init+0x58>)
 800aef4:	f7fa fa54 	bl	80053a0 <HAL_SD_ConfigWideBusOperation>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800aefe:	f000 f945 	bl	800b18c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800af02:	bf00      	nop
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	200009fc 	.word	0x200009fc
 800af0c:	40012c00 	.word	0x40012c00

0800af10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08e      	sub	sp, #56	; 0x38
 800af14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	605a      	str	r2, [r3, #4]
 800af20:	609a      	str	r2, [r3, #8]
 800af22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af24:	f107 0320 	add.w	r3, r7, #32
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af2e:	1d3b      	adds	r3, r7, #4
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	605a      	str	r2, [r3, #4]
 800af36:	609a      	str	r2, [r3, #8]
 800af38:	60da      	str	r2, [r3, #12]
 800af3a:	611a      	str	r2, [r3, #16]
 800af3c:	615a      	str	r2, [r3, #20]
 800af3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800af40:	4b2b      	ldr	r3, [pc, #172]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800af46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800af48:	4b29      	ldr	r3, [pc, #164]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af4a:	2248      	movs	r2, #72	; 0x48
 800af4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af4e:	4b28      	ldr	r3, [pc, #160]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af50:	2200      	movs	r2, #0
 800af52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 800af54:	4b26      	ldr	r3, [pc, #152]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af56:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800af5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af5c:	4b24      	ldr	r3, [pc, #144]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af5e:	2200      	movs	r2, #0
 800af60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800af62:	4b23      	ldr	r3, [pc, #140]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af64:	2280      	movs	r2, #128	; 0x80
 800af66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800af68:	4821      	ldr	r0, [pc, #132]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af6a:	f7fa fd76 	bl	8005a5a <HAL_TIM_Base_Init>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800af74:	f000 f90a 	bl	800b18c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800af78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800af7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af82:	4619      	mov	r1, r3
 800af84:	481a      	ldr	r0, [pc, #104]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af86:	f7fa ffd7 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800af90:	f000 f8fc 	bl	800b18c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800af94:	4816      	ldr	r0, [pc, #88]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800af96:	f7fa fe11 	bl	8005bbc <HAL_TIM_OC_Init>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800afa0:	f000 f8f4 	bl	800b18c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afa4:	2300      	movs	r3, #0
 800afa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afa8:	2300      	movs	r3, #0
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800afac:	f107 0320 	add.w	r3, r7, #32
 800afb0:	4619      	mov	r1, r3
 800afb2:	480f      	ldr	r0, [pc, #60]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800afb4:	f7fb fb60 	bl	8006678 <HAL_TIMEx_MasterConfigSynchronization>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800afbe:	f000 f8e5 	bl	800b18c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800afc2:	2300      	movs	r3, #0
 800afc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800afca:	2300      	movs	r3, #0
 800afcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800afd2:	1d3b      	adds	r3, r7, #4
 800afd4:	2200      	movs	r2, #0
 800afd6:	4619      	mov	r1, r3
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <MX_TIM2_Init+0xe0>)
 800afda:	f7fa ff51 	bl	8005e80 <HAL_TIM_OC_ConfigChannel>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800afe4:	f000 f8d2 	bl	800b18c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800afe8:	bf00      	nop
 800afea:	3738      	adds	r7, #56	; 0x38
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20000a80 	.word	0x20000a80

0800aff4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800aff8:	4b11      	ldr	r3, [pc, #68]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800affa:	4a12      	ldr	r2, [pc, #72]	; (800b044 <MX_USART1_UART_Init+0x50>)
 800affc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800affe:	4b10      	ldr	r3, [pc, #64]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b006:	4b0e      	ldr	r3, [pc, #56]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b008:	2200      	movs	r2, #0
 800b00a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b00c:	4b0c      	ldr	r3, [pc, #48]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b00e:	2200      	movs	r2, #0
 800b010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b012:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b014:	2200      	movs	r2, #0
 800b016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b018:	4b09      	ldr	r3, [pc, #36]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b01a:	220c      	movs	r2, #12
 800b01c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b01e:	4b08      	ldr	r3, [pc, #32]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b020:	2200      	movs	r2, #0
 800b022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b024:	4b06      	ldr	r3, [pc, #24]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b026:	2200      	movs	r2, #0
 800b028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b02a:	4805      	ldr	r0, [pc, #20]	; (800b040 <MX_USART1_UART_Init+0x4c>)
 800b02c:	f7fb fba6 	bl	800677c <HAL_UART_Init>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b036:	f000 f8a9 	bl	800b18c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b03a:	bf00      	nop
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20000998 	.word	0x20000998
 800b044:	40011000 	.word	0x40011000

0800b048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b04e:	2300      	movs	r3, #0
 800b050:	607b      	str	r3, [r7, #4]
 800b052:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <MX_DMA_Init+0x3c>)
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	4a0b      	ldr	r2, [pc, #44]	; (800b084 <MX_DMA_Init+0x3c>)
 800b058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b05c:	6313      	str	r3, [r2, #48]	; 0x30
 800b05e:	4b09      	ldr	r3, [pc, #36]	; (800b084 <MX_DMA_Init+0x3c>)
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b066:	607b      	str	r3, [r7, #4]
 800b068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800b06a:	2200      	movs	r2, #0
 800b06c:	2100      	movs	r1, #0
 800b06e:	200c      	movs	r0, #12
 800b070:	f7f5 fcb7 	bl	80009e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b074:	200c      	movs	r0, #12
 800b076:	f7f5 fcd0 	bl	8000a1a <HAL_NVIC_EnableIRQ>

}
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	40023800 	.word	0x40023800

0800b088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08a      	sub	sp, #40	; 0x28
 800b08c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b08e:	f107 0314 	add.w	r3, r7, #20
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	605a      	str	r2, [r3, #4]
 800b098:	609a      	str	r2, [r3, #8]
 800b09a:	60da      	str	r2, [r3, #12]
 800b09c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b09e:	2300      	movs	r3, #0
 800b0a0:	613b      	str	r3, [r7, #16]
 800b0a2:	4b37      	ldr	r3, [pc, #220]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	4a36      	ldr	r2, [pc, #216]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0a8:	f043 0304 	orr.w	r3, r3, #4
 800b0ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ae:	4b34      	ldr	r3, [pc, #208]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b2:	f003 0304 	and.w	r3, r3, #4
 800b0b6:	613b      	str	r3, [r7, #16]
 800b0b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
 800b0be:	4b30      	ldr	r3, [pc, #192]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c2:	4a2f      	ldr	r2, [pc, #188]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ca:	4b2d      	ldr	r3, [pc, #180]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60bb      	str	r3, [r7, #8]
 800b0da:	4b29      	ldr	r3, [pc, #164]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0de:	4a28      	ldr	r2, [pc, #160]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0e0:	f043 0301 	orr.w	r3, r3, #1
 800b0e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0e6:	4b26      	ldr	r3, [pc, #152]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	60bb      	str	r3, [r7, #8]
 800b0f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	607b      	str	r3, [r7, #4]
 800b0f6:	4b22      	ldr	r3, [pc, #136]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fa:	4a21      	ldr	r2, [pc, #132]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b0fc:	f043 0302 	orr.w	r3, r3, #2
 800b100:	6313      	str	r3, [r2, #48]	; 0x30
 800b102:	4b1f      	ldr	r3, [pc, #124]	; (800b180 <MX_GPIO_Init+0xf8>)
 800b104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b106:	f003 0302 	and.w	r3, r3, #2
 800b10a:	607b      	str	r3, [r7, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800b10e:	2200      	movs	r2, #0
 800b110:	f243 010f 	movw	r1, #12303	; 0x300f
 800b114:	481b      	ldr	r0, [pc, #108]	; (800b184 <MX_GPIO_Init+0xfc>)
 800b116:	f7f6 f939 	bl	800138c <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800b11a:	2200      	movs	r2, #0
 800b11c:	2107      	movs	r1, #7
 800b11e:	481a      	ldr	r0, [pc, #104]	; (800b188 <MX_GPIO_Init+0x100>)
 800b120:	f7f6 f934 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800b124:	f243 030f 	movw	r3, #12303	; 0x300f
 800b128:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b12a:	2301      	movs	r3, #1
 800b12c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b132:	2300      	movs	r3, #0
 800b134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b136:	f107 0314 	add.w	r3, r7, #20
 800b13a:	4619      	mov	r1, r3
 800b13c:	4811      	ldr	r0, [pc, #68]	; (800b184 <MX_GPIO_Init+0xfc>)
 800b13e:	f7f5 ffa1 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800b142:	2307      	movs	r3, #7
 800b144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b146:	2301      	movs	r3, #1
 800b148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b14e:	2300      	movs	r3, #0
 800b150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b152:	f107 0314 	add.w	r3, r7, #20
 800b156:	4619      	mov	r1, r3
 800b158:	480b      	ldr	r0, [pc, #44]	; (800b188 <MX_GPIO_Init+0x100>)
 800b15a:	f7f5 ff93 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800b15e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b164:	2300      	movs	r3, #0
 800b166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b168:	2300      	movs	r3, #0
 800b16a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800b16c:	f107 0314 	add.w	r3, r7, #20
 800b170:	4619      	mov	r1, r3
 800b172:	4805      	ldr	r0, [pc, #20]	; (800b188 <MX_GPIO_Init+0x100>)
 800b174:	f7f5 ff86 	bl	8001084 <HAL_GPIO_Init>

}
 800b178:	bf00      	nop
 800b17a:	3728      	adds	r7, #40	; 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	40023800 	.word	0x40023800
 800b184:	40020800 	.word	0x40020800
 800b188:	40020000 	.word	0x40020000

0800b18c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b190:	b672      	cpsid	i
}
 800b192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b194:	e7fe      	b.n	800b194 <Error_Handler+0x8>
	...

0800b198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b19e:	2300      	movs	r3, #0
 800b1a0:	607b      	str	r3, [r7, #4]
 800b1a2:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <HAL_MspInit+0x4c>)
 800b1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a6:	4a0f      	ldr	r2, [pc, #60]	; (800b1e4 <HAL_MspInit+0x4c>)
 800b1a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1ac:	6453      	str	r3, [r2, #68]	; 0x44
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <HAL_MspInit+0x4c>)
 800b1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1b6:	607b      	str	r3, [r7, #4]
 800b1b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	603b      	str	r3, [r7, #0]
 800b1be:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <HAL_MspInit+0x4c>)
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	4a08      	ldr	r2, [pc, #32]	; (800b1e4 <HAL_MspInit+0x4c>)
 800b1c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1c8:	6413      	str	r3, [r2, #64]	; 0x40
 800b1ca:	4b06      	ldr	r3, [pc, #24]	; (800b1e4 <HAL_MspInit+0x4c>)
 800b1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	40023800 	.word	0x40023800

0800b1e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08c      	sub	sp, #48	; 0x30
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1f0:	f107 031c 	add.w	r3, r7, #28
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	605a      	str	r2, [r3, #4]
 800b1fa:	609a      	str	r2, [r3, #8]
 800b1fc:	60da      	str	r2, [r3, #12]
 800b1fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a59      	ldr	r2, [pc, #356]	; (800b36c <HAL_I2C_MspInit+0x184>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d162      	bne.n	800b2d0 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b20a:	2300      	movs	r3, #0
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	4b58      	ldr	r3, [pc, #352]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b212:	4a57      	ldr	r2, [pc, #348]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b214:	f043 0302 	orr.w	r3, r3, #2
 800b218:	6313      	str	r3, [r2, #48]	; 0x30
 800b21a:	4b55      	ldr	r3, [pc, #340]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	61bb      	str	r3, [r7, #24]
 800b224:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b226:	23c0      	movs	r3, #192	; 0xc0
 800b228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b22a:	2312      	movs	r3, #18
 800b22c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b22e:	2301      	movs	r3, #1
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b232:	2303      	movs	r3, #3
 800b234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b236:	2304      	movs	r3, #4
 800b238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b23a:	f107 031c 	add.w	r3, r7, #28
 800b23e:	4619      	mov	r1, r3
 800b240:	484c      	ldr	r0, [pc, #304]	; (800b374 <HAL_I2C_MspInit+0x18c>)
 800b242:	f7f5 ff1f 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
 800b24a:	4b49      	ldr	r3, [pc, #292]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24e:	4a48      	ldr	r2, [pc, #288]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b254:	6413      	str	r3, [r2, #64]	; 0x40
 800b256:	4b46      	ldr	r3, [pc, #280]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800b262:	4b45      	ldr	r3, [pc, #276]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b264:	4a45      	ldr	r2, [pc, #276]	; (800b37c <HAL_I2C_MspInit+0x194>)
 800b266:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800b268:	4b43      	ldr	r3, [pc, #268]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b26e:	4b42      	ldr	r3, [pc, #264]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b270:	2240      	movs	r2, #64	; 0x40
 800b272:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b274:	4b40      	ldr	r3, [pc, #256]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b276:	2200      	movs	r2, #0
 800b278:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b27a:	4b3f      	ldr	r3, [pc, #252]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b27c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b280:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b282:	4b3d      	ldr	r3, [pc, #244]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b284:	2200      	movs	r2, #0
 800b286:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b288:	4b3b      	ldr	r3, [pc, #236]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b28e:	4b3a      	ldr	r3, [pc, #232]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b290:	2200      	movs	r2, #0
 800b292:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b294:	4b38      	ldr	r3, [pc, #224]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b296:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b29a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b29c:	4b36      	ldr	r3, [pc, #216]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b2a2:	4835      	ldr	r0, [pc, #212]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b2a4:	f7f5 fbd4 	bl	8000a50 <HAL_DMA_Init>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800b2ae:	f7ff ff6d 	bl	800b18c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a30      	ldr	r2, [pc, #192]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b2b6:	635a      	str	r2, [r3, #52]	; 0x34
 800b2b8:	4a2f      	ldr	r2, [pc, #188]	; (800b378 <HAL_I2C_MspInit+0x190>)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	201f      	movs	r0, #31
 800b2c4:	f7f5 fb8d 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b2c8:	201f      	movs	r0, #31
 800b2ca:	f7f5 fba6 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b2ce:	e049      	b.n	800b364 <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a2a      	ldr	r2, [pc, #168]	; (800b380 <HAL_I2C_MspInit+0x198>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d144      	bne.n	800b364 <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2da:	2300      	movs	r3, #0
 800b2dc:	613b      	str	r3, [r7, #16]
 800b2de:	4b24      	ldr	r3, [pc, #144]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e2:	4a23      	ldr	r2, [pc, #140]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b2e4:	f043 0302 	orr.w	r3, r3, #2
 800b2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ea:	4b21      	ldr	r3, [pc, #132]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	613b      	str	r3, [r7, #16]
 800b2f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b2fc:	2312      	movs	r3, #18
 800b2fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b300:	2301      	movs	r3, #1
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b304:	2303      	movs	r3, #3
 800b306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b308:	2304      	movs	r3, #4
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b30c:	f107 031c 	add.w	r3, r7, #28
 800b310:	4619      	mov	r1, r3
 800b312:	4818      	ldr	r0, [pc, #96]	; (800b374 <HAL_I2C_MspInit+0x18c>)
 800b314:	f7f5 feb6 	bl	8001084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b318:	2308      	movs	r3, #8
 800b31a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b31c:	2312      	movs	r3, #18
 800b31e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b320:	2301      	movs	r3, #1
 800b322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b324:	2303      	movs	r3, #3
 800b326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800b328:	2309      	movs	r3, #9
 800b32a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b32c:	f107 031c 	add.w	r3, r7, #28
 800b330:	4619      	mov	r1, r3
 800b332:	4810      	ldr	r0, [pc, #64]	; (800b374 <HAL_I2C_MspInit+0x18c>)
 800b334:	f7f5 fea6 	bl	8001084 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b338:	2300      	movs	r3, #0
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	4b0c      	ldr	r3, [pc, #48]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	4a0b      	ldr	r2, [pc, #44]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b346:	6413      	str	r3, [r2, #64]	; 0x40
 800b348:	4b09      	ldr	r3, [pc, #36]	; (800b370 <HAL_I2C_MspInit+0x188>)
 800b34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800b354:	2200      	movs	r2, #0
 800b356:	2100      	movs	r1, #0
 800b358:	2021      	movs	r0, #33	; 0x21
 800b35a:	f7f5 fb42 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800b35e:	2021      	movs	r0, #33	; 0x21
 800b360:	f7f5 fb5b 	bl	8000a1a <HAL_NVIC_EnableIRQ>
}
 800b364:	bf00      	nop
 800b366:	3730      	adds	r7, #48	; 0x30
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	40005400 	.word	0x40005400
 800b370:	40023800 	.word	0x40023800
 800b374:	40020400 	.word	0x40020400
 800b378:	20000890 	.word	0x20000890
 800b37c:	40026028 	.word	0x40026028
 800b380:	40005800 	.word	0x40005800

0800b384 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b38c:	f107 0308 	add.w	r3, r7, #8
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	605a      	str	r2, [r3, #4]
 800b396:	609a      	str	r2, [r3, #8]
 800b398:	60da      	str	r2, [r3, #12]
 800b39a:	611a      	str	r2, [r3, #16]
 800b39c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a0c      	ldr	r2, [pc, #48]	; (800b3d4 <HAL_RTC_MspInit+0x50>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d111      	bne.n	800b3cc <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7f9 fbca 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800b3c2:	f7ff fee3 	bl	800b18c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b3c6:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <HAL_RTC_MspInit+0x54>)
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b3cc:	bf00      	nop
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	40002800 	.word	0x40002800
 800b3d8:	42470e3c 	.word	0x42470e3c

0800b3dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08c      	sub	sp, #48	; 0x30
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3e4:	f107 031c 	add.w	r3, r7, #28
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	605a      	str	r2, [r3, #4]
 800b3ee:	609a      	str	r2, [r3, #8]
 800b3f0:	60da      	str	r2, [r3, #12]
 800b3f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a38      	ldr	r2, [pc, #224]	; (800b4dc <HAL_SD_MspInit+0x100>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d169      	bne.n	800b4d2 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b3fe:	2300      	movs	r3, #0
 800b400:	61bb      	str	r3, [r7, #24]
 800b402:	4b37      	ldr	r3, [pc, #220]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b406:	4a36      	ldr	r2, [pc, #216]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b40c:	6453      	str	r3, [r2, #68]	; 0x44
 800b40e:	4b34      	ldr	r3, [pc, #208]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b416:	61bb      	str	r3, [r7, #24]
 800b418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b41a:	2300      	movs	r3, #0
 800b41c:	617b      	str	r3, [r7, #20]
 800b41e:	4b30      	ldr	r3, [pc, #192]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b422:	4a2f      	ldr	r2, [pc, #188]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b424:	f043 0301 	orr.w	r3, r3, #1
 800b428:	6313      	str	r3, [r2, #48]	; 0x30
 800b42a:	4b2d      	ldr	r3, [pc, #180]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b436:	2300      	movs	r3, #0
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	4b29      	ldr	r3, [pc, #164]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43e:	4a28      	ldr	r2, [pc, #160]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b440:	f043 0302 	orr.w	r3, r3, #2
 800b444:	6313      	str	r3, [r2, #48]	; 0x30
 800b446:	4b26      	ldr	r3, [pc, #152]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44a:	f003 0302 	and.w	r3, r3, #2
 800b44e:	613b      	str	r3, [r7, #16]
 800b450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b452:	2300      	movs	r3, #0
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	4b22      	ldr	r3, [pc, #136]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45a:	4a21      	ldr	r2, [pc, #132]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b45c:	f043 0304 	orr.w	r3, r3, #4
 800b460:	6313      	str	r3, [r2, #48]	; 0x30
 800b462:	4b1f      	ldr	r3, [pc, #124]	; (800b4e0 <HAL_SD_MspInit+0x104>)
 800b464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b466:	f003 0304 	and.w	r3, r3, #4
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b46e:	2340      	movs	r3, #64	; 0x40
 800b470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b472:	2302      	movs	r3, #2
 800b474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b476:	2300      	movs	r3, #0
 800b478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b47a:	2303      	movs	r3, #3
 800b47c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b47e:	230c      	movs	r3, #12
 800b480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b482:	f107 031c 	add.w	r3, r7, #28
 800b486:	4619      	mov	r1, r3
 800b488:	4816      	ldr	r0, [pc, #88]	; (800b4e4 <HAL_SD_MspInit+0x108>)
 800b48a:	f7f5 fdfb 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b494:	2302      	movs	r3, #2
 800b496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b49c:	2303      	movs	r3, #3
 800b49e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b4a0:	230c      	movs	r3, #12
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4a4:	f107 031c 	add.w	r3, r7, #28
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	480f      	ldr	r0, [pc, #60]	; (800b4e8 <HAL_SD_MspInit+0x10c>)
 800b4ac:	f7f5 fdea 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800b4b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b4b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4c6:	f107 031c 	add.w	r3, r7, #28
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4807      	ldr	r0, [pc, #28]	; (800b4ec <HAL_SD_MspInit+0x110>)
 800b4ce:	f7f5 fdd9 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b4d2:	bf00      	nop
 800b4d4:	3730      	adds	r7, #48	; 0x30
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	40012c00 	.word	0x40012c00
 800b4e0:	40023800 	.word	0x40023800
 800b4e4:	40020000 	.word	0x40020000
 800b4e8:	40020400 	.word	0x40020400
 800b4ec:	40020800 	.word	0x40020800

0800b4f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b500:	d115      	bne.n	800b52e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <HAL_TIM_Base_MspInit+0x48>)
 800b508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50a:	4a0b      	ldr	r2, [pc, #44]	; (800b538 <HAL_TIM_Base_MspInit+0x48>)
 800b50c:	f043 0301 	orr.w	r3, r3, #1
 800b510:	6413      	str	r3, [r2, #64]	; 0x40
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <HAL_TIM_Base_MspInit+0x48>)
 800b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b51e:	2200      	movs	r2, #0
 800b520:	2100      	movs	r1, #0
 800b522:	201c      	movs	r0, #28
 800b524:	f7f5 fa5d 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b528:	201c      	movs	r0, #28
 800b52a:	f7f5 fa76 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b52e:	bf00      	nop
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	40023800 	.word	0x40023800

0800b53c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08a      	sub	sp, #40	; 0x28
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b544:	f107 0314 	add.w	r3, r7, #20
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]
 800b54c:	605a      	str	r2, [r3, #4]
 800b54e:	609a      	str	r2, [r3, #8]
 800b550:	60da      	str	r2, [r3, #12]
 800b552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a19      	ldr	r2, [pc, #100]	; (800b5c0 <HAL_UART_MspInit+0x84>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d12c      	bne.n	800b5b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b55e:	2300      	movs	r3, #0
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	4b18      	ldr	r3, [pc, #96]	; (800b5c4 <HAL_UART_MspInit+0x88>)
 800b564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b566:	4a17      	ldr	r2, [pc, #92]	; (800b5c4 <HAL_UART_MspInit+0x88>)
 800b568:	f043 0310 	orr.w	r3, r3, #16
 800b56c:	6453      	str	r3, [r2, #68]	; 0x44
 800b56e:	4b15      	ldr	r3, [pc, #84]	; (800b5c4 <HAL_UART_MspInit+0x88>)
 800b570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b572:	f003 0310 	and.w	r3, r3, #16
 800b576:	613b      	str	r3, [r7, #16]
 800b578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	4b11      	ldr	r3, [pc, #68]	; (800b5c4 <HAL_UART_MspInit+0x88>)
 800b580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b582:	4a10      	ldr	r2, [pc, #64]	; (800b5c4 <HAL_UART_MspInit+0x88>)
 800b584:	f043 0301 	orr.w	r3, r3, #1
 800b588:	6313      	str	r3, [r2, #48]	; 0x30
 800b58a:	4b0e      	ldr	r3, [pc, #56]	; (800b5c4 <HAL_UART_MspInit+0x88>)
 800b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800b596:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800b59a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b59c:	2302      	movs	r3, #2
 800b59e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b5a8:	2307      	movs	r3, #7
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <HAL_UART_MspInit+0x8c>)
 800b5b4:	f7f5 fd66 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b5b8:	bf00      	nop
 800b5ba:	3728      	adds	r7, #40	; 0x28
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	40011000 	.word	0x40011000
 800b5c4:	40023800 	.word	0x40023800
 800b5c8:	40020000 	.word	0x40020000

0800b5cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800b5d0:	f7f9 faa2 	bl	8004b18 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b5d4:	e7fe      	b.n	800b5d4 <NMI_Handler+0x8>

0800b5d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b5da:	e7fe      	b.n	800b5da <HardFault_Handler+0x4>

0800b5dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b5e0:	e7fe      	b.n	800b5e0 <MemManage_Handler+0x4>

0800b5e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b5e6:	e7fe      	b.n	800b5e6 <BusFault_Handler+0x4>

0800b5e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b5ec:	e7fe      	b.n	800b5ec <UsageFault_Handler+0x4>

0800b5ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b5f2:	bf00      	nop
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b600:	bf00      	nop
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b60a:	b480      	push	{r7}
 800b60c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b60e:	bf00      	nop
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800b61c:	f7fe ff6a 	bl	800a4f4 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b620:	f7f5 f8c0 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b624:	bf00      	nop
 800b626:	bd80      	pop	{r7, pc}

0800b628 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b62c:	4802      	ldr	r0, [pc, #8]	; (800b638 <DMA1_Stream1_IRQHandler+0x10>)
 800b62e:	f7f5 fadf 	bl	8000bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b632:	bf00      	nop
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20000890 	.word	0x20000890

0800b63c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b640:	4803      	ldr	r0, [pc, #12]	; (800b650 <TIM2_IRQHandler+0x14>)
 800b642:	f7fa fb14 	bl	8005c6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800b646:	f7ff fadd 	bl	800ac04 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800b64a:	bf00      	nop
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20000a80 	.word	0x20000a80

0800b654 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	TempCollect_I2CA_Done();
 800b658:	f7ff fae8 	bl	800ac2c <TempCollect_I2CA_Done>

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b65c:	4802      	ldr	r0, [pc, #8]	; (800b668 <I2C1_EV_IRQHandler+0x14>)
 800b65e:	f7f6 f8cb 	bl	80017f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b662:	bf00      	nop
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	200008f0 	.word	0x200008f0

0800b66c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	TempCollect_I2CB_Done();
 800b670:	f7ff fae8 	bl	800ac44 <TempCollect_I2CB_Done>

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b674:	4802      	ldr	r0, [pc, #8]	; (800b680 <I2C2_EV_IRQHandler+0x14>)
 800b676:	f7f6 f8bf 	bl	80017f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b67a:	bf00      	nop
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20000944 	.word	0x20000944

0800b684 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b688:	4802      	ldr	r0, [pc, #8]	; (800b694 <OTG_FS_IRQHandler+0x10>)
 800b68a:	f7f7 fdc0 	bl	800320e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b68e:	bf00      	nop
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20001d98 	.word	0x20001d98

0800b698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b698:	b480      	push	{r7}
 800b69a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b69c:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <SystemInit+0x20>)
 800b69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a2:	4a05      	ldr	r2, [pc, #20]	; (800b6b8 <SystemInit+0x20>)
 800b6a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b6ac:	bf00      	nop
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	e000ed00 	.word	0xe000ed00

0800b6bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4912      	ldr	r1, [pc, #72]	; (800b70c <MX_USB_DEVICE_Init+0x50>)
 800b6c4:	4812      	ldr	r0, [pc, #72]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6c6:	f7fd fd77 	bl	80091b8 <USBD_Init>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6d0:	f7ff fd5c 	bl	800b18c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6d4:	490f      	ldr	r1, [pc, #60]	; (800b714 <MX_USB_DEVICE_Init+0x58>)
 800b6d6:	480e      	ldr	r0, [pc, #56]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6d8:	f7fd fd9e 	bl	8009218 <USBD_RegisterClass>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6e2:	f7ff fd53 	bl	800b18c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6e6:	490c      	ldr	r1, [pc, #48]	; (800b718 <MX_USB_DEVICE_Init+0x5c>)
 800b6e8:	4809      	ldr	r0, [pc, #36]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6ea:	f7fd fcef 	bl	80090cc <USBD_CDC_RegisterInterface>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6f4:	f7ff fd4a 	bl	800b18c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6f8:	4805      	ldr	r0, [pc, #20]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6fa:	f7fd fdb4 	bl	8009266 <USBD_Start>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b704:	f7ff fd42 	bl	800b18c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b708:	bf00      	nop
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	20000130 	.word	0x20000130
 800b710:	20000ac8 	.word	0x20000ac8
 800b714:	20000014 	.word	0x20000014
 800b718:	2000011c 	.word	0x2000011c

0800b71c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b720:	2200      	movs	r2, #0
 800b722:	4905      	ldr	r1, [pc, #20]	; (800b738 <CDC_Init_FS+0x1c>)
 800b724:	4805      	ldr	r0, [pc, #20]	; (800b73c <CDC_Init_FS+0x20>)
 800b726:	f7fd fce6 	bl	80090f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b72a:	4905      	ldr	r1, [pc, #20]	; (800b740 <CDC_Init_FS+0x24>)
 800b72c:	4803      	ldr	r0, [pc, #12]	; (800b73c <CDC_Init_FS+0x20>)
 800b72e:	f7fd fd00 	bl	8009132 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b734:	4618      	mov	r0, r3
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20001598 	.word	0x20001598
 800b73c:	20000ac8 	.word	0x20000ac8
 800b740:	20000d98 	.word	0x20000d98

0800b744 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	6039      	str	r1, [r7, #0]
 800b75e:	71fb      	strb	r3, [r7, #7]
 800b760:	4613      	mov	r3, r2
 800b762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b764:	79fb      	ldrb	r3, [r7, #7]
 800b766:	2b23      	cmp	r3, #35	; 0x23
 800b768:	d84a      	bhi.n	800b800 <CDC_Control_FS+0xac>
 800b76a:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <CDC_Control_FS+0x1c>)
 800b76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b770:	0800b801 	.word	0x0800b801
 800b774:	0800b801 	.word	0x0800b801
 800b778:	0800b801 	.word	0x0800b801
 800b77c:	0800b801 	.word	0x0800b801
 800b780:	0800b801 	.word	0x0800b801
 800b784:	0800b801 	.word	0x0800b801
 800b788:	0800b801 	.word	0x0800b801
 800b78c:	0800b801 	.word	0x0800b801
 800b790:	0800b801 	.word	0x0800b801
 800b794:	0800b801 	.word	0x0800b801
 800b798:	0800b801 	.word	0x0800b801
 800b79c:	0800b801 	.word	0x0800b801
 800b7a0:	0800b801 	.word	0x0800b801
 800b7a4:	0800b801 	.word	0x0800b801
 800b7a8:	0800b801 	.word	0x0800b801
 800b7ac:	0800b801 	.word	0x0800b801
 800b7b0:	0800b801 	.word	0x0800b801
 800b7b4:	0800b801 	.word	0x0800b801
 800b7b8:	0800b801 	.word	0x0800b801
 800b7bc:	0800b801 	.word	0x0800b801
 800b7c0:	0800b801 	.word	0x0800b801
 800b7c4:	0800b801 	.word	0x0800b801
 800b7c8:	0800b801 	.word	0x0800b801
 800b7cc:	0800b801 	.word	0x0800b801
 800b7d0:	0800b801 	.word	0x0800b801
 800b7d4:	0800b801 	.word	0x0800b801
 800b7d8:	0800b801 	.word	0x0800b801
 800b7dc:	0800b801 	.word	0x0800b801
 800b7e0:	0800b801 	.word	0x0800b801
 800b7e4:	0800b801 	.word	0x0800b801
 800b7e8:	0800b801 	.word	0x0800b801
 800b7ec:	0800b801 	.word	0x0800b801
 800b7f0:	0800b801 	.word	0x0800b801
 800b7f4:	0800b801 	.word	0x0800b801
 800b7f8:	0800b801 	.word	0x0800b801
 800b7fc:	0800b801 	.word	0x0800b801
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b800:	bf00      	nop
  }

  return (USBD_OK);
 800b802:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	4805      	ldr	r0, [pc, #20]	; (800b834 <CDC_Receive_FS+0x24>)
 800b81e:	f7fd fc88 	bl	8009132 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b822:	4804      	ldr	r0, [pc, #16]	; (800b834 <CDC_Receive_FS+0x24>)
 800b824:	f7fd fc9e 	bl	8009164 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b828:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20000ac8 	.word	0x20000ac8

0800b838 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	4613      	mov	r3, r2
 800b844:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b846:	2300      	movs	r3, #0
 800b848:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
	...

0800b85c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b864:	f107 0314 	add.w	r3, r7, #20
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	605a      	str	r2, [r3, #4]
 800b86e:	609a      	str	r2, [r3, #8]
 800b870:	60da      	str	r2, [r3, #12]
 800b872:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b87c:	d147      	bne.n	800b90e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b87e:	2300      	movs	r3, #0
 800b880:	613b      	str	r3, [r7, #16]
 800b882:	4b25      	ldr	r3, [pc, #148]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b886:	4a24      	ldr	r2, [pc, #144]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b888:	f043 0301 	orr.w	r3, r3, #1
 800b88c:	6313      	str	r3, [r2, #48]	; 0x30
 800b88e:	4b22      	ldr	r3, [pc, #136]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	613b      	str	r3, [r7, #16]
 800b898:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b89a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b89e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8a8:	f107 0314 	add.w	r3, r7, #20
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	481b      	ldr	r0, [pc, #108]	; (800b91c <HAL_PCD_MspInit+0xc0>)
 800b8b0:	f7f5 fbe8 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b8b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b8b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8c6:	230a      	movs	r3, #10
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ca:	f107 0314 	add.w	r3, r7, #20
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4812      	ldr	r0, [pc, #72]	; (800b91c <HAL_PCD_MspInit+0xc0>)
 800b8d2:	f7f5 fbd7 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8d6:	4b10      	ldr	r3, [pc, #64]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8da:	4a0f      	ldr	r2, [pc, #60]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e0:	6353      	str	r3, [r2, #52]	; 0x34
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]
 800b8e6:	4b0c      	ldr	r3, [pc, #48]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ea:	4a0b      	ldr	r2, [pc, #44]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b8ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8f0:	6453      	str	r3, [r2, #68]	; 0x44
 800b8f2:	4b09      	ldr	r3, [pc, #36]	; (800b918 <HAL_PCD_MspInit+0xbc>)
 800b8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8fe:	2200      	movs	r2, #0
 800b900:	2100      	movs	r1, #0
 800b902:	2043      	movs	r0, #67	; 0x43
 800b904:	f7f5 f86d 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b908:	2043      	movs	r0, #67	; 0x43
 800b90a:	f7f5 f886 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b90e:	bf00      	nop
 800b910:	3728      	adds	r7, #40	; 0x28
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	40023800 	.word	0x40023800
 800b91c:	40020000 	.word	0x40020000

0800b920 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fd fce0 	bl	80092fc <USBD_LL_SetupStage>
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	460b      	mov	r3, r1
 800b94e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b956:	78fa      	ldrb	r2, [r7, #3]
 800b958:	6879      	ldr	r1, [r7, #4]
 800b95a:	4613      	mov	r3, r2
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	1a9b      	subs	r3, r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	440b      	add	r3, r1
 800b964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	78fb      	ldrb	r3, [r7, #3]
 800b96c:	4619      	mov	r1, r3
 800b96e:	f7fd fd1a 	bl	80093a6 <USBD_LL_DataOutStage>
}
 800b972:	bf00      	nop
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b98c:	78fa      	ldrb	r2, [r7, #3]
 800b98e:	6879      	ldr	r1, [r7, #4]
 800b990:	4613      	mov	r3, r2
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	1a9b      	subs	r3, r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	440b      	add	r3, r1
 800b99a:	3348      	adds	r3, #72	; 0x48
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f7fd fd63 	bl	800946c <USBD_LL_DataInStage>
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fd fe77 	bl	80096b0 <USBD_LL_SOF>
}
 800b9c2:	bf00      	nop
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b084      	sub	sp, #16
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d001      	beq.n	800b9e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9de:	f7ff fbd5 	bl	800b18c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9e8:	7bfa      	ldrb	r2, [r7, #15]
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fd fe21 	bl	8009634 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fd fdcd 	bl	8009598 <USBD_LL_Reset>
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fd fe1c 	bl	8009654 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	6812      	ldr	r2, [r2, #0]
 800ba2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba2e:	f043 0301 	orr.w	r3, r3, #1
 800ba32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a1b      	ldr	r3, [r3, #32]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d005      	beq.n	800ba48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba3c:	4b04      	ldr	r3, [pc, #16]	; (800ba50 <HAL_PCD_SuspendCallback+0x48>)
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	4a03      	ldr	r2, [pc, #12]	; (800ba50 <HAL_PCD_SuspendCallback+0x48>)
 800ba42:	f043 0306 	orr.w	r3, r3, #6
 800ba46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	e000ed00 	.word	0xe000ed00

0800ba54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd fe0c 	bl	8009680 <USBD_LL_Resume>
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba82:	78fa      	ldrb	r2, [r7, #3]
 800ba84:	4611      	mov	r1, r2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fd fe5a 	bl	8009740 <USBD_LL_IsoOUTIncomplete>
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baa6:	78fa      	ldrb	r2, [r7, #3]
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fd fe22 	bl	80096f4 <USBD_LL_IsoINIncomplete>
}
 800bab0:	bf00      	nop
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fd fe60 	bl	800978c <USBD_LL_DevConnected>
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fd fe5d 	bl	80097a2 <USBD_LL_DevDisconnected>
}
 800bae8:	bf00      	nop
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d13c      	bne.n	800bb7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb00:	4a20      	ldr	r2, [pc, #128]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a1e      	ldr	r2, [pc, #120]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb10:	4b1c      	ldr	r3, [pc, #112]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb18:	4b1a      	ldr	r3, [pc, #104]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb1a:	2204      	movs	r2, #4
 800bb1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb1e:	4b19      	ldr	r3, [pc, #100]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb20:	2202      	movs	r2, #2
 800bb22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb24:	4b17      	ldr	r3, [pc, #92]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb2a:	4b16      	ldr	r3, [pc, #88]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb30:	4b14      	ldr	r3, [pc, #80]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb36:	4b13      	ldr	r3, [pc, #76]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb3c:	4b11      	ldr	r3, [pc, #68]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bb42:	4b10      	ldr	r3, [pc, #64]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb44:	2201      	movs	r2, #1
 800bb46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb48:	4b0e      	ldr	r3, [pc, #56]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb4e:	480d      	ldr	r0, [pc, #52]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb50:	f7f7 fa0d 	bl	8002f6e <HAL_PCD_Init>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb5a:	f7ff fb17 	bl	800b18c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb5e:	2180      	movs	r1, #128	; 0x80
 800bb60:	4808      	ldr	r0, [pc, #32]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb62:	f7f8 fb6a 	bl	800423a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb66:	2240      	movs	r2, #64	; 0x40
 800bb68:	2100      	movs	r1, #0
 800bb6a:	4806      	ldr	r0, [pc, #24]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb6c:	f7f8 fb1e 	bl	80041ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb70:	2280      	movs	r2, #128	; 0x80
 800bb72:	2101      	movs	r1, #1
 800bb74:	4803      	ldr	r0, [pc, #12]	; (800bb84 <USBD_LL_Init+0x94>)
 800bb76:	f7f8 fb19 	bl	80041ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20001d98 	.word	0x20001d98

0800bb88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f7 fb02 	bl	80031a8 <HAL_PCD_Start>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 f942 	bl	800be34 <USBD_Get_USB_Status>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	4608      	mov	r0, r1
 800bbc8:	4611      	mov	r1, r2
 800bbca:	461a      	mov	r2, r3
 800bbcc:	4603      	mov	r3, r0
 800bbce:	70fb      	strb	r3, [r7, #3]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70bb      	strb	r3, [r7, #2]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbe6:	78bb      	ldrb	r3, [r7, #2]
 800bbe8:	883a      	ldrh	r2, [r7, #0]
 800bbea:	78f9      	ldrb	r1, [r7, #3]
 800bbec:	f7f7 fee6 	bl	80039bc <HAL_PCD_EP_Open>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 f91c 	bl	800be34 <USBD_Get_USB_Status>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc24:	78fa      	ldrb	r2, [r7, #3]
 800bc26:	4611      	mov	r1, r2
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7f7 ff2f 	bl	8003a8c <HAL_PCD_EP_Close>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 f8fd 	bl	800be34 <USBD_Get_USB_Status>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc62:	78fa      	ldrb	r2, [r7, #3]
 800bc64:	4611      	mov	r1, r2
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7f8 f807 	bl	8003c7a <HAL_PCD_EP_SetStall>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 f8de 	bl	800be34 <USBD_Get_USB_Status>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bca0:	78fa      	ldrb	r2, [r7, #3]
 800bca2:	4611      	mov	r1, r2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7f8 f84c 	bl	8003d42 <HAL_PCD_EP_ClrStall>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 f8bf 	bl	800be34 <USBD_Get_USB_Status>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	da0b      	bge.n	800bcf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bce6:	68f9      	ldr	r1, [r7, #12]
 800bce8:	4613      	mov	r3, r2
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	1a9b      	subs	r3, r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	333e      	adds	r3, #62	; 0x3e
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	e00b      	b.n	800bd10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcfe:	68f9      	ldr	r1, [r7, #12]
 800bd00:	4613      	mov	r3, r2
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	1a9b      	subs	r3, r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	440b      	add	r3, r1
 800bd0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd36:	78fa      	ldrb	r2, [r7, #3]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7f7 fe19 	bl	8003972 <HAL_PCD_SetAddress>
 800bd40:	4603      	mov	r3, r0
 800bd42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 f874 	bl	800be34 <USBD_Get_USB_Status>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b086      	sub	sp, #24
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
 800bd66:	460b      	mov	r3, r1
 800bd68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd78:	7af9      	ldrb	r1, [r7, #11]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	f7f7 ff32 	bl	8003be6 <HAL_PCD_EP_Transmit>
 800bd82:	4603      	mov	r3, r0
 800bd84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 f853 	bl	800be34 <USBD_Get_USB_Status>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd92:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3718      	adds	r7, #24
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	603b      	str	r3, [r7, #0]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bdba:	7af9      	ldrb	r1, [r7, #11]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	f7f7 feae 	bl	8003b20 <HAL_PCD_EP_Receive>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc8:	7dfb      	ldrb	r3, [r7, #23]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 f832 	bl	800be34 <USBD_Get_USB_Status>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	460b      	mov	r3, r1
 800bde8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdf0:	78fa      	ldrb	r2, [r7, #3]
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7f7 fede 	bl	8003bb6 <HAL_PCD_EP_GetRxCount>
 800bdfa:	4603      	mov	r3, r0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be0c:	4b03      	ldr	r3, [pc, #12]	; (800be1c <USBD_static_malloc+0x18>)
}
 800be0e:	4618      	mov	r0, r3
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	200005f4 	.word	0x200005f4

0800be20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]

}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be42:	79fb      	ldrb	r3, [r7, #7]
 800be44:	2b03      	cmp	r3, #3
 800be46:	d817      	bhi.n	800be78 <USBD_Get_USB_Status+0x44>
 800be48:	a201      	add	r2, pc, #4	; (adr r2, 800be50 <USBD_Get_USB_Status+0x1c>)
 800be4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4e:	bf00      	nop
 800be50:	0800be61 	.word	0x0800be61
 800be54:	0800be67 	.word	0x0800be67
 800be58:	0800be6d 	.word	0x0800be6d
 800be5c:	0800be73 	.word	0x0800be73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	73fb      	strb	r3, [r7, #15]
    break;
 800be64:	e00b      	b.n	800be7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be66:	2303      	movs	r3, #3
 800be68:	73fb      	strb	r3, [r7, #15]
    break;
 800be6a:	e008      	b.n	800be7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be6c:	2301      	movs	r3, #1
 800be6e:	73fb      	strb	r3, [r7, #15]
    break;
 800be70:	e005      	b.n	800be7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be72:	2303      	movs	r3, #3
 800be74:	73fb      	strb	r3, [r7, #15]
    break;
 800be76:	e002      	b.n	800be7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	73fb      	strb	r3, [r7, #15]
    break;
 800be7c:	bf00      	nop
  }
  return usb_status;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	6039      	str	r1, [r7, #0]
 800be96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2212      	movs	r2, #18
 800be9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be9e:	4b03      	ldr	r3, [pc, #12]	; (800beac <USBD_FS_DeviceDescriptor+0x20>)
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	2000014c 	.word	0x2000014c

0800beb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	6039      	str	r1, [r7, #0]
 800beba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2204      	movs	r2, #4
 800bec0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bec2:	4b03      	ldr	r3, [pc, #12]	; (800bed0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	20000160 	.word	0x20000160

0800bed4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	6039      	str	r1, [r7, #0]
 800bede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d105      	bne.n	800bef2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	4907      	ldr	r1, [pc, #28]	; (800bf08 <USBD_FS_ProductStrDescriptor+0x34>)
 800beea:	4808      	ldr	r0, [pc, #32]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x38>)
 800beec:	f7fe f9ed 	bl	800a2ca <USBD_GetString>
 800bef0:	e004      	b.n	800befc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	4904      	ldr	r1, [pc, #16]	; (800bf08 <USBD_FS_ProductStrDescriptor+0x34>)
 800bef6:	4805      	ldr	r0, [pc, #20]	; (800bf0c <USBD_FS_ProductStrDescriptor+0x38>)
 800bef8:	f7fe f9e7 	bl	800a2ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800befc:	4b02      	ldr	r3, [pc, #8]	; (800bf08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200021a0 	.word	0x200021a0
 800bf0c:	0800c170 	.word	0x0800c170

0800bf10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	4603      	mov	r3, r0
 800bf18:	6039      	str	r1, [r7, #0]
 800bf1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	4904      	ldr	r1, [pc, #16]	; (800bf30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf20:	4804      	ldr	r0, [pc, #16]	; (800bf34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf22:	f7fe f9d2 	bl	800a2ca <USBD_GetString>
  return USBD_StrDesc;
 800bf26:	4b02      	ldr	r3, [pc, #8]	; (800bf30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	200021a0 	.word	0x200021a0
 800bf34:	0800c188 	.word	0x0800c188

0800bf38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	6039      	str	r1, [r7, #0]
 800bf42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	221a      	movs	r2, #26
 800bf48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf4a:	f000 f843 	bl	800bfd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf4e:	4b02      	ldr	r3, [pc, #8]	; (800bf58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	20000164 	.word	0x20000164

0800bf5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	6039      	str	r1, [r7, #0]
 800bf66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d105      	bne.n	800bf7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4907      	ldr	r1, [pc, #28]	; (800bf90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf72:	4808      	ldr	r0, [pc, #32]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf74:	f7fe f9a9 	bl	800a2ca <USBD_GetString>
 800bf78:	e004      	b.n	800bf84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	4904      	ldr	r1, [pc, #16]	; (800bf90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf7e:	4805      	ldr	r0, [pc, #20]	; (800bf94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf80:	f7fe f9a3 	bl	800a2ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf84:	4b02      	ldr	r3, [pc, #8]	; (800bf90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	200021a0 	.word	0x200021a0
 800bf94:	0800c19c 	.word	0x0800c19c

0800bf98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	6039      	str	r1, [r7, #0]
 800bfa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d105      	bne.n	800bfb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	4907      	ldr	r1, [pc, #28]	; (800bfcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfae:	4808      	ldr	r0, [pc, #32]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfb0:	f7fe f98b 	bl	800a2ca <USBD_GetString>
 800bfb4:	e004      	b.n	800bfc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	4904      	ldr	r1, [pc, #16]	; (800bfcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfba:	4805      	ldr	r0, [pc, #20]	; (800bfd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfbc:	f7fe f985 	bl	800a2ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfc0:	4b02      	ldr	r3, [pc, #8]	; (800bfcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	200021a0 	.word	0x200021a0
 800bfd0:	0800c1a8 	.word	0x0800c1a8

0800bfd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfda:	4b0f      	ldr	r3, [pc, #60]	; (800c018 <Get_SerialNum+0x44>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfe0:	4b0e      	ldr	r3, [pc, #56]	; (800c01c <Get_SerialNum+0x48>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfe6:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <Get_SerialNum+0x4c>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4413      	add	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bffa:	2208      	movs	r2, #8
 800bffc:	4909      	ldr	r1, [pc, #36]	; (800c024 <Get_SerialNum+0x50>)
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f000 f814 	bl	800c02c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c004:	2204      	movs	r2, #4
 800c006:	4908      	ldr	r1, [pc, #32]	; (800c028 <Get_SerialNum+0x54>)
 800c008:	68b8      	ldr	r0, [r7, #8]
 800c00a:	f000 f80f 	bl	800c02c <IntToUnicode>
  }
}
 800c00e:	bf00      	nop
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	1fff7a10 	.word	0x1fff7a10
 800c01c:	1fff7a14 	.word	0x1fff7a14
 800c020:	1fff7a18 	.word	0x1fff7a18
 800c024:	20000166 	.word	0x20000166
 800c028:	20000176 	.word	0x20000176

0800c02c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b087      	sub	sp, #28
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	4613      	mov	r3, r2
 800c038:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c03e:	2300      	movs	r3, #0
 800c040:	75fb      	strb	r3, [r7, #23]
 800c042:	e027      	b.n	800c094 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	0f1b      	lsrs	r3, r3, #28
 800c048:	2b09      	cmp	r3, #9
 800c04a:	d80b      	bhi.n	800c064 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	0f1b      	lsrs	r3, r3, #28
 800c050:	b2da      	uxtb	r2, r3
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	4619      	mov	r1, r3
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	440b      	add	r3, r1
 800c05c:	3230      	adds	r2, #48	; 0x30
 800c05e:	b2d2      	uxtb	r2, r2
 800c060:	701a      	strb	r2, [r3, #0]
 800c062:	e00a      	b.n	800c07a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	0f1b      	lsrs	r3, r3, #28
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
 800c06c:	005b      	lsls	r3, r3, #1
 800c06e:	4619      	mov	r1, r3
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	440b      	add	r3, r1
 800c074:	3237      	adds	r2, #55	; 0x37
 800c076:	b2d2      	uxtb	r2, r2
 800c078:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	011b      	lsls	r3, r3, #4
 800c07e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	3301      	adds	r3, #1
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	4413      	add	r3, r2
 800c08a:	2200      	movs	r2, #0
 800c08c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	3301      	adds	r3, #1
 800c092:	75fb      	strb	r3, [r7, #23]
 800c094:	7dfa      	ldrb	r2, [r7, #23]
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d3d3      	bcc.n	800c044 <IntToUnicode+0x18>
  }
}
 800c09c:	bf00      	nop
 800c09e:	bf00      	nop
 800c0a0:	371c      	adds	r7, #28
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
	...

0800c0ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800c0ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c0e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c0b0:	480d      	ldr	r0, [pc, #52]	; (800c0e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800c0b2:	490e      	ldr	r1, [pc, #56]	; (800c0ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800c0b4:	4a0e      	ldr	r2, [pc, #56]	; (800c0f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800c0b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c0b8:	e002      	b.n	800c0c0 <LoopCopyDataInit>

0800c0ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c0ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c0bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c0be:	3304      	adds	r3, #4

0800c0c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c0c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c0c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c0c4:	d3f9      	bcc.n	800c0ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c0c6:	4a0b      	ldr	r2, [pc, #44]	; (800c0f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800c0c8:	4c0b      	ldr	r4, [pc, #44]	; (800c0f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800c0ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c0cc:	e001      	b.n	800c0d2 <LoopFillZerobss>

0800c0ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c0ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c0d0:	3204      	adds	r2, #4

0800c0d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c0d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c0d4:	d3fb      	bcc.n	800c0ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c0d6:	f7ff fadf 	bl	800b698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c0da:	f000 f811 	bl	800c100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c0de:	f7fe fdbd 	bl	800ac5c <main>
  bx  lr    
 800c0e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800c0e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c0e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c0ec:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800c0f0:	0800c1f8 	.word	0x0800c1f8
  ldr r2, =_sbss
 800c0f4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800c0f8:	200023a0 	.word	0x200023a0

0800c0fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c0fc:	e7fe      	b.n	800c0fc <ADC_IRQHandler>
	...

0800c100 <__libc_init_array>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	4d0d      	ldr	r5, [pc, #52]	; (800c138 <__libc_init_array+0x38>)
 800c104:	4c0d      	ldr	r4, [pc, #52]	; (800c13c <__libc_init_array+0x3c>)
 800c106:	1b64      	subs	r4, r4, r5
 800c108:	10a4      	asrs	r4, r4, #2
 800c10a:	2600      	movs	r6, #0
 800c10c:	42a6      	cmp	r6, r4
 800c10e:	d109      	bne.n	800c124 <__libc_init_array+0x24>
 800c110:	4d0b      	ldr	r5, [pc, #44]	; (800c140 <__libc_init_array+0x40>)
 800c112:	4c0c      	ldr	r4, [pc, #48]	; (800c144 <__libc_init_array+0x44>)
 800c114:	f000 f820 	bl	800c158 <_init>
 800c118:	1b64      	subs	r4, r4, r5
 800c11a:	10a4      	asrs	r4, r4, #2
 800c11c:	2600      	movs	r6, #0
 800c11e:	42a6      	cmp	r6, r4
 800c120:	d105      	bne.n	800c12e <__libc_init_array+0x2e>
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	f855 3b04 	ldr.w	r3, [r5], #4
 800c128:	4798      	blx	r3
 800c12a:	3601      	adds	r6, #1
 800c12c:	e7ee      	b.n	800c10c <__libc_init_array+0xc>
 800c12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c132:	4798      	blx	r3
 800c134:	3601      	adds	r6, #1
 800c136:	e7f2      	b.n	800c11e <__libc_init_array+0x1e>
 800c138:	0800c1f0 	.word	0x0800c1f0
 800c13c:	0800c1f0 	.word	0x0800c1f0
 800c140:	0800c1f0 	.word	0x0800c1f0
 800c144:	0800c1f4 	.word	0x0800c1f4

0800c148 <memset>:
 800c148:	4402      	add	r2, r0
 800c14a:	4603      	mov	r3, r0
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d100      	bne.n	800c152 <memset+0xa>
 800c150:	4770      	bx	lr
 800c152:	f803 1b01 	strb.w	r1, [r3], #1
 800c156:	e7f9      	b.n	800c14c <memset+0x4>

0800c158 <_init>:
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15a:	bf00      	nop
 800c15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15e:	bc08      	pop	{r3}
 800c160:	469e      	mov	lr, r3
 800c162:	4770      	bx	lr

0800c164 <_fini>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	bf00      	nop
 800c168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16a:	bc08      	pop	{r3}
 800c16c:	469e      	mov	lr, r3
 800c16e:	4770      	bx	lr
