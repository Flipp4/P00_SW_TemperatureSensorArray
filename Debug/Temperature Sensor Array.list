
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c050  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c1e8  0800c1e8  0001c1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c260  0800c260  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c268  0800c268  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c268  0800c268  0001c268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c26c  0800c26c  0001c26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002220  20000180  0800c3f0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a0  0800c3f0  000223a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269f4  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d31  00000000  00000000  00046ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  0004b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f8  00000000  00000000  0004d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc9e  00000000  00000000  0004ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023dea  00000000  00000000  0006cb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0687  00000000  00000000  00090920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007488  00000000  00000000  00130ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c1d0 	.word	0x0800c1d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800c1d0 	.word	0x0800c1d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d105      	bne.n	80004ec <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <OperateLED_A+0x34>)
 80004e6:	f000 ff7d 	bl	80013e4 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 80004ea:	e007      	b.n	80004fc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <OperateLED_A+0x34>)
 80004f8:	f000 ff74 	bl	80013e4 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800050c:	2102      	movs	r1, #2
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <ToggleLED_B+0x10>)
 8000510:	f000 ff81 	bl	8001416 <HAL_GPIO_TogglePin>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020800 	.word	0x40020800

0800051c <ToggleLED_D>:

void ToggleLED_D()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000520:	2108      	movs	r1, #8
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <ToggleLED_D+0x10>)
 8000524:	f000 ff77 	bl	8001416 <HAL_GPIO_TogglePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020800 	.word	0x40020800

08000530 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d106      	bne.n	800054e <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4808      	ldr	r0, [pc, #32]	; (8000568 <OperateSensorPower_A+0x38>)
 8000548:	f000 ff4c 	bl	80013e4 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 800054c:	e008      	b.n	8000560 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d105      	bne.n	8000560 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <OperateSensorPower_A+0x38>)
 800055c:	f000 ff42 	bl	80013e4 <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020800 	.word	0x40020800

0800056c <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d106      	bne.n	800058a <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000584:	f000 ff2e 	bl	80013e4 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000588:	e008      	b.n	800059c <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d105      	bne.n	800059c <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000598:	f000 ff24 	bl	80013e4 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020800 	.word	0x40020800

080005a8 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ffbf 	bl	8000530 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffda 	bl	800056c <OperateSensorPower_B>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SensorArray_Init>:
	0x0C,
	0x0E
};

void SensorArray_Init(I2C_HandleTypeDef *hI2CA, I2C_HandleTypeDef *hI2CB)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e024      	b.n	8000616 <SensorArray_Init+0x5a>
	{
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	492c      	ldr	r1, [pc, #176]	; (8000680 <SensorArray_Init+0xc4>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	3304      	adds	r3, #4
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListA[u8Idx]);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4a28      	ldr	r2, [pc, #160]	; (8000684 <SensorArray_Init+0xc8>)
 80005e4:	5cd3      	ldrb	r3, [r2, r3]
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	3330      	adds	r3, #48	; 0x30
 80005ea:	b2d8      	uxtb	r0, r3
 80005ec:	4924      	ldr	r1, [pc, #144]	; (8000680 <SensorArray_Init+0xc4>)
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	3301      	adds	r3, #1
 80005fa:	4602      	mov	r2, r0
 80005fc:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	491f      	ldr	r1, [pc, #124]	; (8000680 <SensorArray_Init+0xc4>)
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	440b      	add	r3, r1
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	3301      	adds	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d9d7      	bls.n	80005cc <SensorArray_Init+0x10>
	}
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 800061c:	2300      	movs	r3, #0
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	e024      	b.n	800066c <SensorArray_Init+0xb0>
	{
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 8000622:	7bba      	ldrb	r2, [r7, #14]
 8000624:	4918      	ldr	r1, [pc, #96]	; (8000688 <SensorArray_Init+0xcc>)
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	3304      	adds	r3, #4
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListB[u8Idx]);
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <SensorArray_Init+0xd0>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	7bba      	ldrb	r2, [r7, #14]
 800063e:	3330      	adds	r3, #48	; 0x30
 8000640:	b2d8      	uxtb	r0, r3
 8000642:	4911      	ldr	r1, [pc, #68]	; (8000688 <SensorArray_Init+0xcc>)
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	3301      	adds	r3, #1
 8000650:	4602      	mov	r2, r0
 8000652:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 8000654:	7bba      	ldrb	r2, [r7, #14]
 8000656:	490c      	ldr	r1, [pc, #48]	; (8000688 <SensorArray_Init+0xcc>)
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	440b      	add	r3, r1
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	3301      	adds	r3, #1
 800066a:	73bb      	strb	r3, [r7, #14]
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d9d7      	bls.n	8000622 <SensorArray_Init+0x66>
	}
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000814 	.word	0x20000814
 8000684:	0800c230 	.word	0x0800c230
 8000688:	20000850 	.word	0x20000850
 800068c:	0800c238 	.word	0x0800c238

08000690 <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6858      	ldr	r0, [r3, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	b299      	uxth	r1, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3308      	adds	r3, #8
 80006a6:	2202      	movs	r2, #2
 80006a8:	9201      	str	r2, [sp, #4]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2301      	movs	r3, #1
 80006ae:	2205      	movs	r2, #5
 80006b0:	f001 f810 	bl	80016d4 <HAL_I2C_Mem_Read_IT>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MCP9808_DecodeTemperature>:

float MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 80006bc:	b480      	push	{r7}
 80006be:	b087      	sub	sp, #28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	823b      	strh	r3, [r7, #16]
	uint16_t u16FixedPointReading = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	81fb      	strh	r3, [r7, #14]
	bool bNegativeSign = false;
 80006d0:	2300      	movs	r3, #0
 80006d2:	737b      	strb	r3, [r7, #13]
	float fResult = 0.0;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7a1b      	ldrb	r3, [r3, #8]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
 80006e4:	8a7b      	ldrh	r3, [r7, #18]
 80006e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	737b      	strb	r3, [r7, #13]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 80006f4:	8a7b      	ldrh	r3, [r7, #18]
 80006f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006fa:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7a5b      	ldrb	r3, [r3, #9]
 8000700:	823b      	strh	r3, [r7, #16]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 8000702:	8a7a      	ldrh	r2, [r7, #18]
 8000704:	8a3b      	ldrh	r3, [r7, #16]
 8000706:	4413      	add	r3, r2
 8000708:	81fb      	strh	r3, [r7, #14]

	if (bNegativeSign)
 800070a:	7b7b      	ldrb	r3, [r7, #13]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00d      	beq.n	800072c <MCP9808_DecodeTemperature+0x70>
	{
		fResult = ((float)(u16FixedPointReading) / 16) * -1;
 8000710:	89fb      	ldrh	r3, [r7, #14]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800071a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800071e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000722:	eef1 7a67 	vneg.f32	s15, s15
 8000726:	edc7 7a05 	vstr	s15, [r7, #20]
 800072a:	e00a      	b.n	8000742 <MCP9808_DecodeTemperature+0x86>
	}
	else
	{
		fResult = ((float)(u16FixedPointReading) / 16);
 800072c:	89fb      	ldrh	r3, [r7, #14]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000736:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800073a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return fResult;
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	ee07 3a90 	vmov	s15, r3
}
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_Init+0x40>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <HAL_Init+0x40>)
 8000762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_Init+0x40>)
 800076e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_Init+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x40>)
 800077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f94f 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f00a fd26 	bl	800b1dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023c00 	.word	0x40023c00

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f967 	bl	8000a8e <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f92f 	bl	8000a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000118 	.word	0x20000118
 80007f4:	20000004 	.word	0x20000004
 80007f8:	20000000 	.word	0x20000000

080007fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x20>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x24>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_IncTick+0x24>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000004 	.word	0x20000004
 8000820:	2000088c 	.word	0x2000088c

08000824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_GetTick+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000088c 	.word	0x2000088c

0800083c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff ffee 	bl	8000824 <HAL_GetTick>
 8000848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d005      	beq.n	8000862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Delay+0x44>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000862:	bf00      	nop
 8000864:	f7ff ffde 	bl	8000824 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f7      	bhi.n	8000864 <HAL_Delay+0x28>
  {
  }
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000004 	.word	0x20000004

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db0b      	blt.n	8000912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 021f 	and.w	r2, r3, #31
 8000900:	4907      	ldr	r1, [pc, #28]	; (8000920 <__NVIC_EnableIRQ+0x38>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	2001      	movs	r0, #1
 800090a:	fa00 f202 	lsl.w	r2, r0, r2
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000e100 	.word	0xe000e100

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff29 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff3e 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ff8e 	bl	8000978 <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff31 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffa2 	bl	80009e0 <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff feb6 	bl	8000824 <HAL_GetTick>
 8000ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e099      	b.n	8000bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0201 	bic.w	r2, r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ae4:	e00f      	b.n	8000b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ae6:	f7ff fe9d 	bl	8000824 <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d908      	bls.n	8000b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2220      	movs	r2, #32
 8000af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2203      	movs	r2, #3
 8000afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e078      	b.n	8000bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1e8      	bne.n	8000ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <HAL_DMA_Init+0x158>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d107      	bne.n	8000b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f023 0307 	bic.w	r3, r3, #7
 8000b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d117      	bne.n	8000bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00e      	beq.n	8000bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fa19 	bl	8000fe4 <DMA_CheckFifoParam>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2240      	movs	r2, #64	; 0x40
 8000bbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e016      	b.n	8000bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f9d0 	bl	8000f78 <DMA_CalcBaseAndBitshift>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be0:	223f      	movs	r2, #63	; 0x3f
 8000be2:	409a      	lsls	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	f010803f 	.word	0xf010803f

08000c04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d004      	beq.n	8000c22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00c      	b.n	8000c3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2205      	movs	r2, #5
 8000c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c54:	4b92      	ldr	r3, [pc, #584]	; (8000ea0 <HAL_DMA_IRQHandler+0x258>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_DMA_IRQHandler+0x25c>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	0a9b      	lsrs	r3, r3, #10
 8000c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c72:	2208      	movs	r2, #8
 8000c74:	409a      	lsls	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d01a      	beq.n	8000cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d013      	beq.n	8000cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0204 	bic.w	r2, r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cac:	f043 0201 	orr.w	r2, r3, #1
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb8:	2201      	movs	r2, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d012      	beq.n	8000cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00b      	beq.n	8000cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce2:	f043 0202 	orr.w	r2, r3, #2
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cee:	2204      	movs	r2, #4
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d012      	beq.n	8000d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00b      	beq.n	8000d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d18:	f043 0204 	orr.w	r2, r3, #4
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d24:	2210      	movs	r2, #16
 8000d26:	409a      	lsls	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d043      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d03c      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d42:	2210      	movs	r2, #16
 8000d44:	409a      	lsls	r2, r3
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d018      	beq.n	8000d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d108      	bne.n	8000d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d024      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	4798      	blx	r3
 8000d76:	e01f      	b.n	8000db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01b      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	4798      	blx	r3
 8000d88:	e016      	b.n	8000db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d107      	bne.n	8000da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0208 	bic.w	r2, r2, #8
 8000da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 808e 	beq.w	8000ee6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 8086 	beq.w	8000ee6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dde:	2220      	movs	r2, #32
 8000de0:	409a      	lsls	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	d136      	bne.n	8000e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0216 	bic.w	r2, r2, #22
 8000e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <HAL_DMA_IRQHandler+0x1da>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0208 	bic.w	r2, r2, #8
 8000e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e36:	223f      	movs	r2, #63	; 0x3f
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d07d      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
        }
        return;
 8000e5e:	e078      	b.n	8000f52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01c      	beq.n	8000ea8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d108      	bne.n	8000e8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d030      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	4798      	blx	r3
 8000e8c:	e02b      	b.n	8000ee6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d027      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	4798      	blx	r3
 8000e9e:	e022      	b.n	8000ee6 <HAL_DMA_IRQHandler+0x29e>
 8000ea0:	20000118 	.word	0x20000118
 8000ea4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10f      	bne.n	8000ed6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0210 	bic.w	r2, r2, #16
 8000ec4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d032      	beq.n	8000f54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d022      	beq.n	8000f40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2205      	movs	r2, #5
 8000efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0201 	bic.w	r2, r2, #1
 8000f10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d307      	bcc.n	8000f2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f2      	bne.n	8000f12 <HAL_DMA_IRQHandler+0x2ca>
 8000f2c:	e000      	b.n	8000f30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000f2e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	4798      	blx	r3
 8000f50:	e000      	b.n	8000f54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000f52:	bf00      	nop
    }
  }
}
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop

08000f5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	3b10      	subs	r3, #16
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <DMA_CalcBaseAndBitshift+0x64>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <DMA_CalcBaseAndBitshift+0x68>)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d909      	bls.n	8000fba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	1d1a      	adds	r2, r3, #4
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	659a      	str	r2, [r3, #88]	; 0x58
 8000fb8:	e007      	b.n	8000fca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	aaaaaaab 	.word	0xaaaaaaab
 8000fe0:	0800c240 	.word	0x0800c240

08000fe4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d11f      	bne.n	800103e <DMA_CheckFifoParam+0x5a>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d856      	bhi.n	80010b2 <DMA_CheckFifoParam+0xce>
 8001004:	a201      	add	r2, pc, #4	; (adr r2, 800100c <DMA_CheckFifoParam+0x28>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	0800101d 	.word	0x0800101d
 8001010:	0800102f 	.word	0x0800102f
 8001014:	0800101d 	.word	0x0800101d
 8001018:	080010b3 	.word	0x080010b3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d046      	beq.n	80010b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800102c:	e043      	b.n	80010b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001036:	d140      	bne.n	80010ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800103c:	e03d      	b.n	80010ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001046:	d121      	bne.n	800108c <DMA_CheckFifoParam+0xa8>
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d837      	bhi.n	80010be <DMA_CheckFifoParam+0xda>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <DMA_CheckFifoParam+0x70>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001065 	.word	0x08001065
 8001058:	0800106b 	.word	0x0800106b
 800105c:	08001065 	.word	0x08001065
 8001060:	0800107d 	.word	0x0800107d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
      break;
 8001068:	e030      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d025      	beq.n	80010c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800107a:	e022      	b.n	80010c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001084:	d11f      	bne.n	80010c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800108a:	e01c      	b.n	80010c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d903      	bls.n	800109a <DMA_CheckFifoParam+0xb6>
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d003      	beq.n	80010a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001098:	e018      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
      break;
 800109e:	e015      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00e      	beq.n	80010ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
      break;
 80010b0:	e00b      	b.n	80010ca <DMA_CheckFifoParam+0xe6>
      break;
 80010b2:	bf00      	nop
 80010b4:	e00a      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      break;
 80010b6:	bf00      	nop
 80010b8:	e008      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      break;
 80010ba:	bf00      	nop
 80010bc:	e006      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      break;
 80010be:	bf00      	nop
 80010c0:	e004      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      break;
 80010c2:	bf00      	nop
 80010c4:	e002      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      break;   
 80010c6:	bf00      	nop
 80010c8:	e000      	b.n	80010cc <DMA_CheckFifoParam+0xe8>
      break;
 80010ca:	bf00      	nop
    }
  } 
  
  return status; 
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e159      	b.n	80013ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8148 	bne.w	80013a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a2 	beq.w	80013a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a56      	ldr	r2, [pc, #344]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d019      	beq.n	80012de <HAL_GPIO_Init+0x202>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <HAL_GPIO_Init+0x2f4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x1fe>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a47      	ldr	r2, [pc, #284]	; (80013d4 <HAL_GPIO_Init+0x2f8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x1fa>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <HAL_GPIO_Init+0x2fc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x1f6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a45      	ldr	r2, [pc, #276]	; (80013dc <HAL_GPIO_Init+0x300>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x1f2>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001322:	4a2f      	ldr	r2, [pc, #188]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_GPIO_Init+0x304>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f aea2 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001428:	887a      	ldrh	r2, [r7, #2]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	041a      	lsls	r2, r3, #16
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43d9      	mvns	r1, r3
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	400b      	ands	r3, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e12b      	b.n	80016b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f009 feda 	bl	800b22c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2224      	movs	r2, #36	; 0x24
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800149e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b0:	f003 fb2c 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a81      	ldr	r2, [pc, #516]	; (80016c0 <HAL_I2C_Init+0x274>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d807      	bhi.n	80014d0 <HAL_I2C_Init+0x84>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a80      	ldr	r2, [pc, #512]	; (80016c4 <HAL_I2C_Init+0x278>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf94      	ite	ls
 80014c8:	2301      	movls	r3, #1
 80014ca:	2300      	movhi	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	e006      	b.n	80014de <HAL_I2C_Init+0x92>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a7d      	ldr	r2, [pc, #500]	; (80016c8 <HAL_I2C_Init+0x27c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	bf94      	ite	ls
 80014d8:	2301      	movls	r3, #1
 80014da:	2300      	movhi	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0e7      	b.n	80016b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4a78      	ldr	r2, [pc, #480]	; (80016cc <HAL_I2C_Init+0x280>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	0c9b      	lsrs	r3, r3, #18
 80014f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <HAL_I2C_Init+0x274>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d802      	bhi.n	8001520 <HAL_I2C_Init+0xd4>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3301      	adds	r3, #1
 800151e:	e009      	b.n	8001534 <HAL_I2C_Init+0xe8>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a69      	ldr	r2, [pc, #420]	; (80016d0 <HAL_I2C_Init+0x284>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	3301      	adds	r3, #1
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	430b      	orrs	r3, r1
 800153a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	495c      	ldr	r1, [pc, #368]	; (80016c0 <HAL_I2C_Init+0x274>)
 8001550:	428b      	cmp	r3, r1
 8001552:	d819      	bhi.n	8001588 <HAL_I2C_Init+0x13c>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1e59      	subs	r1, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001562:	1c59      	adds	r1, r3, #1
 8001564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001568:	400b      	ands	r3, r1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <HAL_I2C_Init+0x138>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e59      	subs	r1, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fbb1 f3f3 	udiv	r3, r1, r3
 800157c:	3301      	adds	r3, #1
 800157e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001582:	e051      	b.n	8001628 <HAL_I2C_Init+0x1dc>
 8001584:	2304      	movs	r3, #4
 8001586:	e04f      	b.n	8001628 <HAL_I2C_Init+0x1dc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <HAL_I2C_Init+0x168>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1e58      	subs	r0, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	440b      	add	r3, r1
 800159e:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	e012      	b.n	80015da <HAL_I2C_Init+0x18e>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1e58      	subs	r0, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	0099      	lsls	r1, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_I2C_Init+0x196>
 80015de:	2301      	movs	r3, #1
 80015e0:	e022      	b.n	8001628 <HAL_I2C_Init+0x1dc>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10e      	bne.n	8001608 <HAL_I2C_Init+0x1bc>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1e58      	subs	r0, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6859      	ldr	r1, [r3, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	440b      	add	r3, r1
 80015f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001606:	e00f      	b.n	8001628 <HAL_I2C_Init+0x1dc>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1e58      	subs	r0, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	0099      	lsls	r1, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	fbb0 f3f3 	udiv	r3, r0, r3
 800161e:	3301      	adds	r3, #1
 8001620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	6809      	ldr	r1, [r1, #0]
 800162c:	4313      	orrs	r3, r2
 800162e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6911      	ldr	r1, [r2, #16]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68d2      	ldr	r2, [r2, #12]
 8001662:	4311      	orrs	r1, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	430b      	orrs	r3, r1
 800166a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	000186a0 	.word	0x000186a0
 80016c4:	001e847f 	.word	0x001e847f
 80016c8:	003d08ff 	.word	0x003d08ff
 80016cc:	431bde83 	.word	0x431bde83
 80016d0:	10624dd3 	.word	0x10624dd3

080016d4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	4608      	mov	r0, r1
 80016de:	4611      	mov	r1, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	817b      	strh	r3, [r7, #10]
 80016e6:	460b      	mov	r3, r1
 80016e8:	813b      	strh	r3, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	f040 809a 	bne.w	8001834 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_I2C_Mem_Read_IT+0x170>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	4a50      	ldr	r2, [pc, #320]	; (8001848 <HAL_I2C_Mem_Read_IT+0x174>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0a1a      	lsrs	r2, r3, #8
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009a      	lsls	r2, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3b01      	subs	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f043 0220 	orr.w	r2, r3, #32
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e070      	b.n	8001836 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d0db      	beq.n	800171a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_I2C_Mem_Read_IT+0x9c>
 800176c:	2302      	movs	r3, #2
 800176e:	e062      	b.n	8001836 <HAL_I2C_Mem_Read_IT+0x162>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d007      	beq.n	8001796 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2222      	movs	r2, #34	; 0x22
 80017aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2240      	movs	r2, #64	; 0x40
 80017b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a3a      	ldr	r2, [r7, #32]
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_I2C_Mem_Read_IT+0x178>)
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80017d8:	897a      	ldrh	r2, [r7, #10]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80017de:	893a      	ldrh	r2, [r7, #8]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80017e4:	88fa      	ldrh	r2, [r7, #6]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017fe:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800180e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800182e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e000      	b.n	8001836 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001834:	2302      	movs	r3, #2
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000118 	.word	0x20000118
 8001848:	14f8b589 	.word	0x14f8b589
 800184c:	ffff0000 	.word	0xffff0000

08001850 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001870:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001878:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d003      	beq.n	8001888 <HAL_I2C_EV_IRQHandler+0x38>
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	f040 80c1 	bne.w	8001a0a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10d      	bne.n	80018be <HAL_I2C_EV_IRQHandler+0x6e>
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80018a8:	d003      	beq.n	80018b2 <HAL_I2C_EV_IRQHandler+0x62>
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_EV_IRQHandler+0x66>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_I2C_EV_IRQHandler+0x68>
 80018b6:	2300      	movs	r3, #0
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	f000 8132 	beq.w	8001b22 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <HAL_I2C_EV_IRQHandler+0x92>
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	0a5b      	lsrs	r3, r3, #9
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f001 fb51 	bl	8002f7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fcc8 	bl	8002270 <I2C_Master_SB>
 80018e0:	e092      	b.n	8001a08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_I2C_EV_IRQHandler+0xb2>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	0a5b      	lsrs	r3, r3, #9
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fd3e 	bl	800237c <I2C_Master_ADD10>
 8001900:	e082      	b.n	8001a08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_I2C_EV_IRQHandler+0xd2>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	0a5b      	lsrs	r3, r3, #9
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fd58 	bl	80023d0 <I2C_Master_ADDR>
 8001920:	e072      	b.n	8001a08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d03b      	beq.n	80019a6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800193c:	f000 80f3 	beq.w	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	09db      	lsrs	r3, r3, #7
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00f      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x11c>
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x11c>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f942 	bl	8001bee <I2C_MasterTransmit_TXE>
 800196a:	e04d      	b.n	8001a08 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80d6 	beq.w	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	0a5b      	lsrs	r3, r3, #9
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80cf 	beq.w	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001988:	7bbb      	ldrb	r3, [r7, #14]
 800198a:	2b21      	cmp	r3, #33	; 0x21
 800198c:	d103      	bne.n	8001996 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f9c9 	bl	8001d26 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001994:	e0c7      	b.n	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	f040 80c4 	bne.w	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fa37 	bl	8001e12 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a4:	e0bf      	b.n	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b4:	f000 80b7 	beq.w	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00f      	beq.n	80019e4 <HAL_I2C_EV_IRQHandler+0x194>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d009      	beq.n	80019e4 <HAL_I2C_EV_IRQHandler+0x194>
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 faac 	bl	8001f3a <I2C_MasterReceive_RXNE>
 80019e2:	e011      	b.n	8001a08 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 809a 	beq.w	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	0a5b      	lsrs	r3, r3, #9
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8093 	beq.w	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fb4b 	bl	800209c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a06:	e08e      	b.n	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a08:	e08d      	b.n	8001b26 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e007      	b.n	8001a2c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d012      	beq.n	8001a5e <HAL_I2C_EV_IRQHandler+0x20e>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	0a5b      	lsrs	r3, r3, #9
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00c      	beq.n	8001a5e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a54:	69b9      	ldr	r1, [r7, #24]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 ff09 	bl	800286e <I2C_Slave_ADDR>
 8001a5c:	e066      	b.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_I2C_EV_IRQHandler+0x22e>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	0a5b      	lsrs	r3, r3, #9
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 ff44 	bl	8002904 <I2C_Slave_STOPF>
 8001a7c:	e056      	b.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	2b21      	cmp	r3, #33	; 0x21
 8001a82:	d002      	beq.n	8001a8a <HAL_I2C_EV_IRQHandler+0x23a>
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	2b29      	cmp	r3, #41	; 0x29
 8001a88:	d125      	bne.n	8001ad6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	09db      	lsrs	r3, r3, #7
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00f      	beq.n	8001ab6 <HAL_I2C_EV_IRQHandler+0x266>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	0a9b      	lsrs	r3, r3, #10
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_I2C_EV_IRQHandler+0x266>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fe1f 	bl	80026f2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ab4:	e039      	b.n	8001b2a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d033      	beq.n	8001b2a <HAL_I2C_EV_IRQHandler+0x2da>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	0a5b      	lsrs	r3, r3, #9
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d02d      	beq.n	8001b2a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fe4c 	bl	800276c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ad4:	e029      	b.n	8001b2a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00f      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	0a9b      	lsrs	r3, r3, #10
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fe57 	bl	80027ae <I2C_SlaveReceive_RXNE>
 8001b00:	e014      	b.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00e      	beq.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	0a5b      	lsrs	r3, r3, #9
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fe85 	bl	800282a <I2C_SlaveReceive_BTF>
 8001b20:	e004      	b.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001b22:	bf00      	nop
 8001b24:	e002      	b.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b26:	bf00      	nop
 8001b28:	e000      	b.n	8001b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b2a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	70fb      	strb	r3, [r7, #3]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c04:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d150      	bne.n	8001cb6 <I2C_MasterTransmit_TXE+0xc8>
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2b21      	cmp	r3, #33	; 0x21
 8001c18:	d14d      	bne.n	8001cb6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d01d      	beq.n	8001c5c <I2C_MasterTransmit_TXE+0x6e>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d01a      	beq.n	8001c5c <I2C_MasterTransmit_TXE+0x6e>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c2c:	d016      	beq.n	8001c5c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c3c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2211      	movs	r2, #17
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff6c 	bl	8001b32 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c5a:	e060      	b.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c6a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	d107      	bne.n	8001ca6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff87 	bl	8001bb2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ca4:	e03b      	b.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff3f 	bl	8001b32 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cb4:	e033      	b.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b21      	cmp	r3, #33	; 0x21
 8001cba:	d005      	beq.n	8001cc8 <I2C_MasterTransmit_TXE+0xda>
 8001cbc:	7bbb      	ldrb	r3, [r7, #14]
 8001cbe:	2b40      	cmp	r3, #64	; 0x40
 8001cc0:	d12d      	bne.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b22      	cmp	r3, #34	; 0x22
 8001cc6:	d12a      	bne.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ce2:	e01c      	b.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d103      	bne.n	8001cf8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f88e 	bl	8001e12 <I2C_MemoryTransmit_TXE_BTF>
}
 8001cf6:	e012      	b.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d1c:	e7ff      	b.n	8001d1e <I2C_MasterTransmit_TXE+0x130>
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b21      	cmp	r3, #33	; 0x21
 8001d3e:	d164      	bne.n	8001e0a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d012      	beq.n	8001d70 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d6e:	e04c      	b.n	8001e0a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d01d      	beq.n	8001db2 <I2C_MasterTransmit_BTF+0x8c>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d01a      	beq.n	8001db2 <I2C_MasterTransmit_BTF+0x8c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d82:	d016      	beq.n	8001db2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d92:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2211      	movs	r2, #17
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fec1 	bl	8001b32 <HAL_I2C_MasterTxCpltCallback>
}
 8001db0:	e02b      	b.n	8001e0a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dc0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d107      	bne.n	8001dfc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fedc 	bl	8001bb2 <HAL_I2C_MemTxCpltCallback>
}
 8001dfa:	e006      	b.n	8001e0a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fe94 	bl	8001b32 <HAL_I2C_MasterTxCpltCallback>
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d11d      	bne.n	8001e66 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10b      	bne.n	8001e4a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	1c9a      	adds	r2, r3, #2
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001e48:	e073      	b.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	121b      	asrs	r3, r3, #8
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e64:	e065      	b.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10b      	bne.n	8001e86 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e84:	e055      	b.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d151      	bne.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b22      	cmp	r3, #34	; 0x22
 8001e92:	d10d      	bne.n	8001eb0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eae:	e040      	b.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d015      	beq.n	8001ee6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2b21      	cmp	r3, #33	; 0x21
 8001ebe:	d112      	bne.n	8001ee6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ee4:	e025      	b.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d120      	bne.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2b21      	cmp	r3, #33	; 0x21
 8001ef4:	d11d      	bne.n	8001f32 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f04:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f14:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fe40 	bl	8001bb2 <HAL_I2C_MemTxCpltCallback>
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b22      	cmp	r3, #34	; 0x22
 8001f4c:	f040 80a2 	bne.w	8002094 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d921      	bls.n	8001fa2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	f040 8082 	bne.w	8002094 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001fa0:	e078      	b.n	8002094 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d074      	beq.n	8002094 <I2C_MasterReceive_RXNE+0x15a>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d002      	beq.n	8001fb6 <I2C_MasterReceive_RXNE+0x7c>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d16e      	bne.n	8002094 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 ffae 	bl	8002f18 <I2C_WaitOnSTOPRequestThroughIT>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d142      	bne.n	8002048 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fe0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d10a      	bne.n	8002032 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f009 fb52 	bl	800b6d4 <HAL_I2C_MemRxCpltCallback>
}
 8002030:	e030      	b.n	8002094 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2212      	movs	r2, #18
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fd80 	bl	8001b46 <HAL_I2C_MasterRxCpltCallback>
}
 8002046:	e025      	b.n	8002094 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002056:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fd99 	bl	8001bc6 <HAL_I2C_ErrorCallback>
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d11b      	bne.n	80020ec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80020ea:	e0bd      	b.n	8002268 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d129      	bne.n	800214a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002104:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d00a      	beq.n	8002122 <I2C_MasterReceive_BTF+0x86>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d007      	beq.n	8002122 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002120:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002148:	e08e      	b.n	8002268 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d176      	bne.n	8002242 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d002      	beq.n	8002160 <I2C_MasterReceive_BTF+0xc4>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d108      	bne.n	8002172 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e019      	b.n	80021a6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d002      	beq.n	800217e <I2C_MasterReceive_BTF+0xe2>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d108      	bne.n	8002190 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e00a      	b.n	80021a6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b10      	cmp	r3, #16
 8002194:	d007      	beq.n	80021a6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002200:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d10a      	bne.n	800222c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f009 fa55 	bl	800b6d4 <HAL_I2C_MemRxCpltCallback>
}
 800222a:	e01d      	b.n	8002268 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2212      	movs	r2, #18
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fc83 	bl	8001b46 <HAL_I2C_MasterRxCpltCallback>
}
 8002240:	e012      	b.n	8002268 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d117      	bne.n	80022b4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800229c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800229e:	e067      	b.n	8002370 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]
}
 80022b2:	e05d      	b.n	8002370 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022bc:	d133      	bne.n	8002326 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b21      	cmp	r3, #33	; 0x21
 80022c8:	d109      	bne.n	80022de <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022da:	611a      	str	r2, [r3, #16]
 80022dc:	e008      	b.n	80022f0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <I2C_Master_SB+0x92>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	2b00      	cmp	r3, #0
 8002308:	d032      	beq.n	8002370 <I2C_Master_SB+0x100>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02d      	beq.n	8002370 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002322:	605a      	str	r2, [r3, #4]
}
 8002324:	e024      	b.n	8002370 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10e      	bne.n	800234c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	b29b      	uxth	r3, r3
 8002334:	11db      	asrs	r3, r3, #7
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 0306 	and.w	r3, r3, #6
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f063 030f 	orn	r3, r3, #15
 8002342:	b2da      	uxtb	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]
}
 800234a:	e011      	b.n	8002370 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10d      	bne.n	8002370 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	b29b      	uxth	r3, r3
 800235a:	11db      	asrs	r3, r3, #7
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f003 0306 	and.w	r3, r3, #6
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f063 030e 	orn	r3, r3, #14
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	b2da      	uxtb	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <I2C_Master_ADD10+0x26>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00c      	beq.n	80023c4 <I2C_Master_ADD10+0x48>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c2:	605a      	str	r2, [r3, #4]
  }
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b091      	sub	sp, #68	; 0x44
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b22      	cmp	r3, #34	; 0x22
 80023f8:	f040 8169 	bne.w	80026ce <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10f      	bne.n	8002424 <I2C_Master_ADDR+0x54>
 8002404:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d10b      	bne.n	8002424 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	e160      	b.n	80026e6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002428:	2b00      	cmp	r3, #0
 800242a:	d11d      	bne.n	8002468 <I2C_Master_ADDR+0x98>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002434:	d118      	bne.n	8002468 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002436:	2300      	movs	r3, #0
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	651a      	str	r2, [r3, #80]	; 0x50
 8002466:	e13e      	b.n	80026e6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d113      	bne.n	800249a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e115      	b.n	80026c6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 808a 	bne.w	80025ba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ac:	d137      	bne.n	800251e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024cc:	d113      	bne.n	80024f6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024dc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	e0e7      	b.n	80026c6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e0d3      	b.n	80026c6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	2b08      	cmp	r3, #8
 8002522:	d02e      	beq.n	8002582 <I2C_Master_ADDR+0x1b2>
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	2b20      	cmp	r3, #32
 8002528:	d02b      	beq.n	8002582 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	2b12      	cmp	r3, #18
 800252e:	d102      	bne.n	8002536 <I2C_Master_ADDR+0x166>
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	2b01      	cmp	r3, #1
 8002534:	d125      	bne.n	8002582 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	2b04      	cmp	r3, #4
 800253a:	d00e      	beq.n	800255a <I2C_Master_ADDR+0x18a>
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	2b02      	cmp	r3, #2
 8002540:	d00b      	beq.n	800255a <I2C_Master_ADDR+0x18a>
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	2b10      	cmp	r3, #16
 8002546:	d008      	beq.n	800255a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002568:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	e0a1      	b.n	80026c6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002590:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e085      	b.n	80026c6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d14d      	bne.n	8002660 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d016      	beq.n	80025f8 <I2C_Master_ADDR+0x228>
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d013      	beq.n	80025f8 <I2C_Master_ADDR+0x228>
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d010      	beq.n	80025f8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e007      	b.n	8002608 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002606:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002616:	d117      	bne.n	8002648 <I2C_Master_ADDR+0x278>
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800261e:	d00b      	beq.n	8002638 <I2C_Master_ADDR+0x268>
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	2b01      	cmp	r3, #1
 8002624:	d008      	beq.n	8002638 <I2C_Master_ADDR+0x268>
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	2b08      	cmp	r3, #8
 800262a:	d005      	beq.n	8002638 <I2C_Master_ADDR+0x268>
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	2b10      	cmp	r3, #16
 8002630:	d002      	beq.n	8002638 <I2C_Master_ADDR+0x268>
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	2b20      	cmp	r3, #32
 8002636:	d107      	bne.n	8002648 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002646:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	e032      	b.n	80026c6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800266e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267e:	d117      	bne.n	80026b0 <I2C_Master_ADDR+0x2e0>
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002686:	d00b      	beq.n	80026a0 <I2C_Master_ADDR+0x2d0>
 8002688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268a:	2b01      	cmp	r3, #1
 800268c:	d008      	beq.n	80026a0 <I2C_Master_ADDR+0x2d0>
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	2b08      	cmp	r3, #8
 8002692:	d005      	beq.n	80026a0 <I2C_Master_ADDR+0x2d0>
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	2b10      	cmp	r3, #16
 8002698:	d002      	beq.n	80026a0 <I2C_Master_ADDR+0x2d0>
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b20      	cmp	r3, #32
 800269e:	d107      	bne.n	80026b0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80026cc:	e00b      	b.n	80026e6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	e7ff      	b.n	80026e6 <I2C_Master_ADDR+0x316>
 80026e6:	bf00      	nop
 80026e8:	3744      	adds	r7, #68	; 0x44
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02b      	beq.n	8002764 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d114      	bne.n	8002764 <I2C_SlaveTransmit_TXE+0x72>
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b29      	cmp	r3, #41	; 0x29
 800273e:	d111      	bne.n	8002764 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2221      	movs	r2, #33	; 0x21
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2228      	movs	r2, #40	; 0x28
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff f9fb 	bl	8001b5a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d011      	beq.n	80027a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02c      	beq.n	8002822 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d114      	bne.n	8002822 <I2C_SlaveReceive_RXNE+0x74>
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b2a      	cmp	r3, #42	; 0x2a
 80027fc:	d111      	bne.n	8002822 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2222      	movs	r2, #34	; 0x22
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2228      	movs	r2, #40	; 0x28
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff f9a6 	bl	8001b6e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002888:	2b28      	cmp	r3, #40	; 0x28
 800288a:	d127      	bne.n	80028dc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	09db      	lsrs	r3, r3, #7
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d103      	bne.n	80028c0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	81bb      	strh	r3, [r7, #12]
 80028be:	e002      	b.n	80028c6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80028ce:	89ba      	ldrh	r2, [r7, #12]
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff f954 	bl	8001b82 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028da:	e00e      	b.n	80028fa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002922:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002950:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002960:	d172      	bne.n	8002a48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b22      	cmp	r3, #34	; 0x22
 8002966:	d002      	beq.n	800296e <I2C_Slave_STOPF+0x6a>
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b2a      	cmp	r3, #42	; 0x2a
 800296c:	d135      	bne.n	80029da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fad8 	bl	8000f5c <HAL_DMA_GetState>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d049      	beq.n	8002a46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	4a69      	ldr	r2, [pc, #420]	; (8002b5c <I2C_Slave_STOPF+0x258>)
 80029b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f920 	bl	8000c04 <HAL_DMA_Abort_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03d      	beq.n	8002a46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029d8:	e035      	b.n	8002a46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0204 	orr.w	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe faa2 	bl	8000f5c <HAL_DMA_GetState>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d014      	beq.n	8002a48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	4a4e      	ldr	r2, [pc, #312]	; (8002b5c <I2C_Slave_STOPF+0x258>)
 8002a24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe f8ea 	bl	8000c04 <HAL_DMA_Abort_IT>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a40:	4610      	mov	r0, r2
 8002a42:	4798      	blx	r3
 8002a44:	e000      	b.n	8002a48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03e      	beq.n	8002ad0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d112      	bne.n	8002a86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d112      	bne.n	8002aba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f843 	bl	8002b64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002ade:	e039      	b.n	8002b54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae4:	d109      	bne.n	8002afa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2228      	movs	r2, #40	; 0x28
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff f83a 	bl	8001b6e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b28      	cmp	r3, #40	; 0x28
 8002b04:	d111      	bne.n	8002b2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <I2C_Slave_STOPF+0x25c>)
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff f83b 	bl	8001b9e <HAL_I2C_ListenCpltCallback>
}
 8002b28:	e014      	b.n	8002b54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	2b22      	cmp	r3, #34	; 0x22
 8002b30:	d002      	beq.n	8002b38 <I2C_Slave_STOPF+0x234>
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b22      	cmp	r3, #34	; 0x22
 8002b36:	d10d      	bne.n	8002b54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff f80d 	bl	8001b6e <HAL_I2C_SlaveRxCpltCallback>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	08002dc9 	.word	0x08002dc9
 8002b60:	ffff0000 	.word	0xffff0000

08002b64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d002      	beq.n	8002b88 <I2C_ITError+0x24>
 8002b82:	7bbb      	ldrb	r3, [r7, #14]
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d10a      	bne.n	8002b9e <I2C_ITError+0x3a>
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b22      	cmp	r3, #34	; 0x22
 8002b8c:	d107      	bne.n	8002b9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ba4:	2b28      	cmp	r3, #40	; 0x28
 8002ba6:	d107      	bne.n	8002bb8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2228      	movs	r2, #40	; 0x28
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bb6:	e015      	b.n	8002be4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc6:	d00a      	beq.n	8002bde <I2C_ITError+0x7a>
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b60      	cmp	r3, #96	; 0x60
 8002bcc:	d007      	beq.n	8002bde <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf2:	d162      	bne.n	8002cba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d020      	beq.n	8002c54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	4a6a      	ldr	r2, [pc, #424]	; (8002dc0 <I2C_ITError+0x25c>)
 8002c18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fff0 	bl	8000c04 <HAL_DMA_Abort_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8089 	beq.w	8002d3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4798      	blx	r3
 8002c52:	e074      	b.n	8002d3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	4a59      	ldr	r2, [pc, #356]	; (8002dc0 <I2C_ITError+0x25c>)
 8002c5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd ffcf 	bl	8000c04 <HAL_DMA_Abort_IT>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d068      	beq.n	8002d3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d10b      	bne.n	8002c92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4798      	blx	r3
 8002cb8:	e041      	b.n	8002d3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b60      	cmp	r3, #96	; 0x60
 8002cc4:	d125      	bne.n	8002d12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d10b      	bne.n	8002cfa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0201 	bic.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe ff65 	bl	8001bda <HAL_I2C_AbortCpltCallback>
 8002d10:	e015      	b.n	8002d3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d10b      	bne.n	8002d38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fe ff44 	bl	8001bc6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10e      	bne.n	8002d6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d113      	bne.n	8002db8 <I2C_ITError+0x254>
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b28      	cmp	r3, #40	; 0x28
 8002d94:	d110      	bne.n	8002db8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <I2C_ITError+0x260>)
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fef3 	bl	8001b9e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	08002dc9 	.word	0x08002dc9
 8002dc4:	ffff0000 	.word	0xffff0000

08002dc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002de2:	4b4b      	ldr	r3, [pc, #300]	; (8002f10 <I2C_DMAAbort+0x148>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <I2C_DMAAbort+0x14c>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0a1a      	lsrs	r2, r3, #8
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00da      	lsls	r2, r3, #3
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e0e:	e00a      	b.n	8002e26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e24:	d0ea      	beq.n	8002dfc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	2200      	movs	r2, #0
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	2200      	movs	r2, #0
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	2200      	movs	r2, #0
 8002e6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	2200      	movs	r2, #0
 8002e7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b60      	cmp	r3, #96	; 0x60
 8002e96:	d10e      	bne.n	8002eb6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7fe fe93 	bl	8001bda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002eb4:	e027      	b.n	8002f06 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ebc:	2b28      	cmp	r3, #40	; 0x28
 8002ebe:	d117      	bne.n	8002ef0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ede:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2228      	movs	r2, #40	; 0x28
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eee:	e007      	b.n	8002f00 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f00:	6978      	ldr	r0, [r7, #20]
 8002f02:	f7fe fe60 	bl	8001bc6 <HAL_I2C_ErrorCallback>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000118 	.word	0x20000118
 8002f14:	14f8b589 	.word	0x14f8b589

08002f18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	0a1a      	lsrs	r2, r3, #8
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e008      	b.n	8002f68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f64:	d0e9      	beq.n	8002f3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	20000118 	.word	0x20000118
 8002f78:	14f8b589 	.word	0x14f8b589

08002f7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f8c:	d103      	bne.n	8002f96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f94:	e007      	b.n	8002fa6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f9e:	d102      	bne.n	8002fa6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb4:	b08f      	sub	sp, #60	; 0x3c
 8002fb6:	af0a      	add	r7, sp, #40	; 0x28
 8002fb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e10f      	b.n	80031e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f008 fc78 	bl	800b8d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fb9f 	bl	8007746 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	687e      	ldr	r6, [r7, #4]
 8003010:	466d      	mov	r5, sp
 8003012:	f106 0410 	add.w	r4, r6, #16
 8003016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003022:	e885 0003 	stmia.w	r5, {r0, r1}
 8003026:	1d33      	adds	r3, r6, #4
 8003028:	cb0e      	ldmia	r3, {r1, r2, r3}
 800302a:	6838      	ldr	r0, [r7, #0]
 800302c:	f004 fa76 	bl	800751c <USB_CoreInit>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0d0      	b.n	80031e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fb8d 	bl	8007768 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	e04a      	b.n	80030ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	333d      	adds	r3, #61	; 0x3d
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	333c      	adds	r3, #60	; 0x3c
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	b298      	uxth	r0, r3
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3342      	adds	r3, #66	; 0x42
 8003090:	4602      	mov	r2, r0
 8003092:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	333f      	adds	r3, #63	; 0x3f
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	3344      	adds	r3, #68	; 0x44
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3348      	adds	r3, #72	; 0x48
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3350      	adds	r3, #80	; 0x50
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	3301      	adds	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d3af      	bcc.n	8003054 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e044      	b.n	8003184 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	3301      	adds	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	d3b5      	bcc.n	80030fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	687e      	ldr	r6, [r7, #4]
 8003196:	466d      	mov	r5, sp
 8003198:	f106 0410 	add.w	r4, r6, #16
 800319c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ac:	1d33      	adds	r3, r6, #4
 80031ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b0:	6838      	ldr	r0, [r7, #0]
 80031b2:	f004 fb25 	bl	8007800 <USB_DevInit>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e00d      	b.n	80031e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f005 fba1 	bl	8008924 <USB_DevDisconnect>

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_PCD_Start+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e020      	b.n	800324a <HAL_PCD_Start+0x5e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	2b01      	cmp	r3, #1
 8003216:	d109      	bne.n	800322c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800321c:	2b01      	cmp	r3, #1
 800321e:	d005      	beq.n	800322c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f004 fa77 	bl	8007724 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f005 fb51 	bl	80088e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003252:	b590      	push	{r4, r7, lr}
 8003254:	b08d      	sub	sp, #52	; 0x34
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f005 fc0f 	bl	8008a8c <USB_GetMode>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 839d 	bne.w	80039b0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 fb73 	bl	8008966 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8393 	beq.w	80039ae <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f005 fb6a 	bl	8008966 <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d107      	bne.n	80032ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f002 0202 	and.w	r2, r2, #2
 80032aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f005 fb58 	bl	8008966 <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d161      	bne.n	8003384 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0210 	bic.w	r2, r2, #16
 80032ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	0c5b      	lsrs	r3, r3, #17
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d124      	bne.n	8003346 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d035      	beq.n	8003374 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6a38      	ldr	r0, [r7, #32]
 800331c:	f005 f98f 	bl	800863e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332c:	441a      	add	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333e:	441a      	add	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	619a      	str	r2, [r3, #24]
 8003344:	e016      	b.n	8003374 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	0c5b      	lsrs	r3, r3, #17
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	2b06      	cmp	r3, #6
 8003350:	d110      	bne.n	8003374 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003358:	2208      	movs	r2, #8
 800335a:	4619      	mov	r1, r3
 800335c:	6a38      	ldr	r0, [r7, #32]
 800335e:	f005 f96e 	bl	800863e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336e:	441a      	add	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0210 	orr.w	r2, r2, #16
 8003382:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f005 faec 	bl	8008966 <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003394:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003398:	d16e      	bne.n	8003478 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f005 faf2 	bl	800898c <USB_ReadDevAllOutEpInterrupt>
 80033a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033aa:	e062      	b.n	8003472 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d057      	beq.n	8003466 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f005 fb17 	bl	80089f4 <USB_ReadDevOutEPInterrupt>
 80033c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	461a      	mov	r2, r3
 80033e0:	2301      	movs	r3, #1
 80033e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fdb0 	bl	8003f4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003402:	461a      	mov	r2, r3
 8003404:	2308      	movs	r3, #8
 8003406:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 feaa 	bl	8004164 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	461a      	mov	r2, r3
 8003428:	2310      	movs	r3, #16
 800342a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	2320      	movs	r3, #32
 8003446:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345e:	461a      	mov	r2, r3
 8003460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003464:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	3301      	adds	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d199      	bne.n	80033ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f005 fa72 	bl	8008966 <USB_ReadInterrupts>
 8003482:	4603      	mov	r3, r0
 8003484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003488:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800348c:	f040 80c0 	bne.w	8003610 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f005 fa93 	bl	80089c0 <USB_ReadDevAllInEpInterrupt>
 800349a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034a0:	e0b2      	b.n	8003608 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80a7 	beq.w	80035fc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f005 fab9 	bl	8008a30 <USB_ReadDevInEPInterrupt>
 80034be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d057      	beq.n	800357a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	2201      	movs	r2, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69f9      	ldr	r1, [r7, #28]
 80034e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ea:	4013      	ands	r3, r2
 80034ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fa:	461a      	mov	r2, r3
 80034fc:	2301      	movs	r3, #1
 80034fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d132      	bne.n	800356e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3348      	adds	r3, #72	; 0x48
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4403      	add	r3, r0
 8003528:	3344      	adds	r3, #68	; 0x44
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4419      	add	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4403      	add	r3, r0
 800353c:	3348      	adds	r3, #72	; 0x48
 800353e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	2b00      	cmp	r3, #0
 8003544:	d113      	bne.n	800356e <HAL_PCD_IRQHandler+0x31c>
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3350      	adds	r3, #80	; 0x50
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003566:	461a      	mov	r2, r3
 8003568:	2101      	movs	r1, #1
 800356a:	f005 fac1 	bl	8008af0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	b2db      	uxtb	r3, r3
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f008 fa3c 	bl	800b9f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	2308      	movs	r3, #8
 8003594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2310      	movs	r3, #16
 80035b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c8:	461a      	mov	r2, r3
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e4:	461a      	mov	r2, r3
 80035e6:	2302      	movs	r3, #2
 80035e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fc1b 	bl	8003e32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	3301      	adds	r3, #1
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	f47f af49 	bne.w	80034a2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f005 f9a6 	bl	8008966 <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003624:	d122      	bne.n	800366c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003640:	2b01      	cmp	r3, #1
 8003642:	d108      	bne.n	8003656 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800364c:	2100      	movs	r1, #0
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fe26 	bl	80042a0 <HAL_PCDEx_LPM_Callback>
 8003654:	e002      	b.n	800365c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f008 fa38 	bl	800bacc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800366a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 f978 	bl	8008966 <USB_ReadInterrupts>
 8003676:	4603      	mov	r3, r0
 8003678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003680:	d112      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f008 f9f4 	bl	800ba80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f005 f95a 	bl	8008966 <USB_ReadInterrupts>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	f040 80c7 	bne.w	800384e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2110      	movs	r1, #16
 80036da:	4618      	mov	r0, r3
 80036dc:	f004 f9f4 	bl	8007ac8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e4:	e056      	b.n	8003794 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f2:	461a      	mov	r2, r3
 80036f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	440a      	add	r2, r1
 8003710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003714:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003718:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372a:	0151      	lsls	r1, r2, #5
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	440a      	add	r2, r1
 8003730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003734:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003738:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003746:	461a      	mov	r2, r3
 8003748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800374c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	440a      	add	r2, r1
 8003764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003768:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800376c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800378c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	3301      	adds	r3, #1
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379a:	429a      	cmp	r2, r3
 800379c:	d3a3      	bcc.n	80036e6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f043 030b 	orr.w	r3, r3, #11
 80037ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e0:	f043 030b 	orr.w	r3, r3, #11
 80037e4:	6453      	str	r3, [r2, #68]	; 0x44
 80037e6:	e015      	b.n	8003814 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f043 030b 	orr.w	r3, r3, #11
 8003812:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003822:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003826:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003838:	461a      	mov	r2, r3
 800383a:	f005 f959 	bl	8008af0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800384c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f005 f887 	bl	8008966 <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	d124      	bne.n	80038ae <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f005 f91d 	bl	8008aa8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f004 f985 	bl	8007b82 <USB_GetDevSpeed>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681c      	ldr	r4, [r3, #0]
 8003884:	f001 f936 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8003888:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	4620      	mov	r0, r4
 8003894:	f003 fea4 	bl	80075e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f008 f8d2 	bl	800ba42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f005 f857 	bl	8008966 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d10a      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f008 f8af 	bl	800ba26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f002 0208 	and.w	r2, r2, #8
 80038d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f005 f842 	bl	8008966 <USB_ReadInterrupts>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ec:	d10f      	bne.n	800390e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f008 f907 	bl	800bb0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800390c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f005 f827 	bl	8008966 <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003922:	d10f      	bne.n	8003944 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	b2db      	uxtb	r3, r3
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f008 f8da 	bl	800bae8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f005 f80c 	bl	8008966 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d10a      	bne.n	8003970 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f008 f8e8 	bl	800bb30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800396e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f004 fff6 	bl	8008966 <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d115      	bne.n	80039b0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f008 f8d8 	bl	800bb4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	e000      	b.n	80039b0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80039ae:	bf00      	nop
    }
  }
}
 80039b0:	3734      	adds	r7, #52	; 0x34
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}

080039b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_PCD_SetAddress+0x1a>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e013      	b.n	80039f8 <HAL_PCD_SetAddress+0x42>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f004 ff54 	bl	8008896 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	70fb      	strb	r3, [r7, #3]
 8003a12:	460b      	mov	r3, r1
 8003a14:	803b      	strh	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da0f      	bge.n	8003a46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 020f 	and.w	r2, r3, #15
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	3338      	adds	r3, #56	; 0x38
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	705a      	strb	r2, [r3, #1]
 8003a44:	e00f      	b.n	8003a66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a72:	883a      	ldrh	r2, [r7, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	78ba      	ldrb	r2, [r7, #2]
 8003a7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a90:	78bb      	ldrb	r3, [r7, #2]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d102      	bne.n	8003a9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_PCD_EP_Open+0xaa>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e00e      	b.n	8003ac8 <HAL_PCD_EP_Open+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68f9      	ldr	r1, [r7, #12]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f004 f887 	bl	8007bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da0f      	bge.n	8003b04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	3338      	adds	r3, #56	; 0x38
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	705a      	strb	r2, [r3, #1]
 8003b02:	e00f      	b.n	8003b24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_PCD_EP_Close+0x6e>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e00e      	b.n	8003b5c <HAL_PCD_EP_Close+0x8c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 f8c5 	bl	8007cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	460b      	mov	r3, r1
 8003b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	f003 020f 	and.w	r2, r3, #15
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	f004 fba0 	bl	800831c <USB_EP0StartXfer>
 8003bdc:	e008      	b.n	8003bf0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	f004 f952 	bl	8007e94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 020f 	and.w	r2, r3, #15
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c1c:	681b      	ldr	r3, [r3, #0]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b086      	sub	sp, #24
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	460b      	mov	r3, r1
 8003c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	f003 020f 	and.w	r2, r3, #15
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	3338      	adds	r3, #56	; 0x38
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3304      	adds	r3, #4
 8003c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2201      	movs	r2, #1
 8003c68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c84:	7afb      	ldrb	r3, [r7, #11]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6979      	ldr	r1, [r7, #20]
 8003c9c:	f004 fb3e 	bl	800831c <USB_EP0StartXfer>
 8003ca0:	e008      	b.n	8003cb4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	f004 f8f0 	bl	8007e94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d901      	bls.n	8003cdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e050      	b.n	8003d7e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	da0f      	bge.n	8003d04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	3338      	adds	r3, #56	; 0x38
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	705a      	strb	r2, [r3, #1]
 8003d02:	e00d      	b.n	8003d20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_PCD_EP_SetStall+0x82>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e01e      	b.n	8003d7e <HAL_PCD_EP_SetStall+0xc0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68f9      	ldr	r1, [r7, #12]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 fccd 	bl	80086ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	b2d9      	uxtb	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f004 febe 	bl	8008af0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d901      	bls.n	8003da4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e042      	b.n	8003e2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	da0f      	bge.n	8003dcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	f003 020f 	and.w	r2, r3, #15
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	3338      	adds	r3, #56	; 0x38
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	705a      	strb	r2, [r3, #1]
 8003dca:	e00f      	b.n	8003dec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	f003 020f 	and.w	r2, r3, #15
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_PCD_EP_ClrStall+0x86>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e00e      	b.n	8003e2a <HAL_PCD_EP_ClrStall+0xa4>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 fcd5 	bl	80087ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b08a      	sub	sp, #40	; 0x28
 8003e36:	af02      	add	r7, sp, #8
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3338      	adds	r3, #56	; 0x38
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d901      	bls.n	8003e6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06c      	b.n	8003f44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d902      	bls.n	8003e86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3303      	adds	r3, #3
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e8e:	e02b      	b.n	8003ee8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d902      	bls.n	8003eac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	3303      	adds	r3, #3
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68d9      	ldr	r1, [r3, #12]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4603      	mov	r3, r0
 8003eca:	6978      	ldr	r0, [r7, #20]
 8003ecc:	f004 fb79 	bl	80085c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	441a      	add	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d809      	bhi.n	8003f12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d203      	bcs.n	8003f12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1be      	bne.n	8003e90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d811      	bhi.n	8003f42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	2201      	movs	r2, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	6939      	ldr	r1, [r7, #16]
 8003f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f3e:	4013      	ands	r3, r2
 8003f40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	333c      	adds	r3, #60	; 0x3c
 8003f64:	3304      	adds	r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	f040 80a0 	bne.w	80040c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a72      	ldr	r2, [pc, #456]	; (800415c <PCD_EP_OutXfrComplete_int+0x210>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	f240 80dd 	bls.w	8004152 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80d7 	beq.w	8004152 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb6:	6093      	str	r3, [r2, #8]
 8003fb8:	e0cb      	b.n	8004152 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	6093      	str	r3, [r2, #8]
 8003fd6:	e0bc      	b.n	8004152 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 80b7 	bne.w	8004152 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a5d      	ldr	r2, [pc, #372]	; (800415c <PCD_EP_OutXfrComplete_int+0x210>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d90f      	bls.n	800400c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	461a      	mov	r2, r3
 8004004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004008:	6093      	str	r3, [r2, #8]
 800400a:	e0a2      	b.n	8004152 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800401e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	0159      	lsls	r1, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	440b      	add	r3, r1
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004032:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4403      	add	r3, r0
 8004042:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004046:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4403      	add	r3, r0
 800406a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4419      	add	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4403      	add	r3, r0
 8004080:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004084:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d114      	bne.n	80040b6 <PCD_EP_OutXfrComplete_int+0x16a>
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d108      	bne.n	80040b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040ae:	461a      	mov	r2, r3
 80040b0:	2101      	movs	r1, #1
 80040b2:	f004 fd1d 	bl	8008af0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f007 fc7d 	bl	800b9bc <HAL_PCD_DataOutStageCallback>
 80040c2:	e046      	b.n	8004152 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4a26      	ldr	r2, [pc, #152]	; (8004160 <PCD_EP_OutXfrComplete_int+0x214>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d124      	bne.n	8004116 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e2:	461a      	mov	r2, r3
 80040e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e8:	6093      	str	r3, [r2, #8]
 80040ea:	e032      	b.n	8004152 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	2320      	movs	r3, #32
 8004106:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f007 fc54 	bl	800b9bc <HAL_PCD_DataOutStageCallback>
 8004114:	e01d      	b.n	8004152 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d114      	bne.n	8004146 <PCD_EP_OutXfrComplete_int+0x1fa>
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d108      	bne.n	8004146 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800413e:	461a      	mov	r2, r3
 8004140:	2100      	movs	r1, #0
 8004142:	f004 fcd5 	bl	8008af0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f007 fc35 	bl	800b9bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	4f54300a 	.word	0x4f54300a
 8004160:	4f54310a 	.word	0x4f54310a

08004164 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	333c      	adds	r3, #60	; 0x3c
 800417c:	3304      	adds	r3, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <PCD_EP_OutSetupPacket_int+0x88>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d90e      	bls.n	80041b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b0:	461a      	mov	r2, r3
 80041b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f007 fbed 	bl	800b998 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <PCD_EP_OutSetupPacket_int+0x88>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d90c      	bls.n	80041e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d108      	bne.n	80041e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041d8:	461a      	mov	r2, r3
 80041da:	2101      	movs	r1, #1
 80041dc:	f004 fc88 	bl	8008af0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	4f54300a 	.word	0x4f54300a

080041f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
 80041fc:	4613      	mov	r3, r2
 80041fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800420e:	883b      	ldrh	r3, [r7, #0]
 8004210:	0419      	lsls	r1, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	430a      	orrs	r2, r1
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
 800421c:	e028      	b.n	8004270 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4413      	add	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e00d      	b.n	800424e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	3340      	adds	r3, #64	; 0x40
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	4413      	add	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	3301      	adds	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	3b01      	subs	r3, #1
 8004254:	429a      	cmp	r2, r3
 8004256:	d3ec      	bcc.n	8004232 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004258:	883b      	ldrh	r3, [r7, #0]
 800425a:	0418      	lsls	r0, r3, #16
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	3b01      	subs	r3, #1
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	4302      	orrs	r2, r0
 8004268:	3340      	adds	r3, #64	; 0x40
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	887a      	ldrh	r2, [r7, #2]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e262      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d075      	beq.n	80043c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d6:	4ba3      	ldr	r3, [pc, #652]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d00c      	beq.n	80042fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e2:	4ba0      	ldr	r3, [pc, #640]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d112      	bne.n	8004314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4b9d      	ldr	r3, [pc, #628]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d10b      	bne.n	8004314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fc:	4b99      	ldr	r3, [pc, #612]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d05b      	beq.n	80043c0 <HAL_RCC_OscConfig+0x108>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d157      	bne.n	80043c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e23d      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d106      	bne.n	800432c <HAL_RCC_OscConfig+0x74>
 800431e:	4b91      	ldr	r3, [pc, #580]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a90      	ldr	r2, [pc, #576]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e01d      	b.n	8004368 <HAL_RCC_OscConfig+0xb0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x98>
 8004336:	4b8b      	ldr	r3, [pc, #556]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a8a      	ldr	r2, [pc, #552]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b88      	ldr	r3, [pc, #544]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a87      	ldr	r2, [pc, #540]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0xb0>
 8004350:	4b84      	ldr	r3, [pc, #528]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a83      	ldr	r2, [pc, #524]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b81      	ldr	r3, [pc, #516]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a80      	ldr	r2, [pc, #512]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fc fa58 	bl	8000824 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004378:	f7fc fa54 	bl	8000824 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e202      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b76      	ldr	r3, [pc, #472]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0xc0>
 8004396:	e014      	b.n	80043c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fc fa44 	bl	8000824 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fc fa40 	bl	8000824 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e1ee      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b2:	4b6c      	ldr	r3, [pc, #432]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0xe8>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d063      	beq.n	8004496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ce:	4b65      	ldr	r3, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043da:	4b62      	ldr	r3, [pc, #392]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d11c      	bne.n	8004420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e6:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_RCC_OscConfig+0x152>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e1c2      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4952      	ldr	r1, [pc, #328]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	e03a      	b.n	8004496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004428:	4b4f      	ldr	r3, [pc, #316]	; (8004568 <HAL_RCC_OscConfig+0x2b0>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fc f9f9 	bl	8000824 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004436:	f7fc f9f5 	bl	8000824 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e1a3      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	4b46      	ldr	r3, [pc, #280]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b43      	ldr	r3, [pc, #268]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4940      	ldr	r1, [pc, #256]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <HAL_RCC_OscConfig+0x2b0>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fc f9d8 	bl	8000824 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004478:	f7fc f9d4 	bl	8000824 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e182      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d030      	beq.n	8004504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044aa:	4b30      	ldr	r3, [pc, #192]	; (800456c <HAL_RCC_OscConfig+0x2b4>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fc f9b8 	bl	8000824 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b8:	f7fc f9b4 	bl	8000824 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e162      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x200>
 80044d6:	e015      	b.n	8004504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCC_OscConfig+0x2b4>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044de:	f7fc f9a1 	bl	8000824 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e6:	f7fc f99d 	bl	8000824 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e14b      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 80044fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 809e 	beq.w	800464e <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004530:	6413      	str	r3, [r2, #64]	; 0x40
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_OscConfig+0x2b8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d121      	bne.n	8004592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_RCC_OscConfig+0x2b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_RCC_OscConfig+0x2b8>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455a:	f7fc f963 	bl	8000824 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	e011      	b.n	8004586 <HAL_RCC_OscConfig+0x2ce>
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
 8004568:	42470000 	.word	0x42470000
 800456c:	42470e80 	.word	0x42470e80
 8004570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004574:	f7fc f956 	bl	8000824 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e104      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004586:	4b84      	ldr	r3, [pc, #528]	; (8004798 <HAL_RCC_OscConfig+0x4e0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d106      	bne.n	80045a8 <HAL_RCC_OscConfig+0x2f0>
 800459a:	4b80      	ldr	r3, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a7f      	ldr	r2, [pc, #508]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
 80045a6:	e01c      	b.n	80045e2 <HAL_RCC_OscConfig+0x32a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d10c      	bne.n	80045ca <HAL_RCC_OscConfig+0x312>
 80045b0:	4b7a      	ldr	r3, [pc, #488]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	4a79      	ldr	r2, [pc, #484]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	6713      	str	r3, [r2, #112]	; 0x70
 80045bc:	4b77      	ldr	r3, [pc, #476]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a76      	ldr	r2, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
 80045c8:	e00b      	b.n	80045e2 <HAL_RCC_OscConfig+0x32a>
 80045ca:	4b74      	ldr	r3, [pc, #464]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	4a73      	ldr	r2, [pc, #460]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	6713      	str	r3, [r2, #112]	; 0x70
 80045d6:	4b71      	ldr	r3, [pc, #452]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a70      	ldr	r2, [pc, #448]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80045dc:	f023 0304 	bic.w	r3, r3, #4
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fc f91b 	bl	8000824 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	e009      	b.n	8004606 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7fc f917 	bl	8000824 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0c4      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ef      	beq.n	80045f2 <HAL_RCC_OscConfig+0x33a>
 8004612:	e013      	b.n	800463c <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fc f906 	bl	8000824 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	e009      	b.n	8004630 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fc f902 	bl	8000824 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0af      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004630:	4b5a      	ldr	r3, [pc, #360]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ef      	bne.n	800461c <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b56      	ldr	r3, [pc, #344]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a55      	ldr	r2, [pc, #340]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 809b 	beq.w	800478e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004658:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d05c      	beq.n	800471e <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d141      	bne.n	80046f0 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b4c      	ldr	r3, [pc, #304]	; (80047a0 <HAL_RCC_OscConfig+0x4e8>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fc f8d7 	bl	8000824 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467a:	f7fc f8d3 	bl	8000824 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e081      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	019b      	lsls	r3, r3, #6
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	041b      	lsls	r3, r3, #16
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	061b      	lsls	r3, r3, #24
 80046bc:	4937      	ldr	r1, [pc, #220]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x4e8>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fc f8ac 	bl	8000824 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fc f8a8 	bl	8000824 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e056      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x418>
 80046ee:	e04e      	b.n	800478e <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x4e8>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fc f895 	bl	8000824 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fc f891 	bl	8000824 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e03f      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004710:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x446>
 800471c:	e037      	b.n	800478e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e032      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <HAL_RCC_OscConfig+0x4e4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d028      	beq.n	800478a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d121      	bne.n	800478a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d11a      	bne.n	800478a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800475a:	4013      	ands	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004760:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004762:	4293      	cmp	r3, r2
 8004764:	d111      	bne.n	800478a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d107      	bne.n	800478a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40007000 	.word	0x40007000
 800479c:	40023800 	.word	0x40023800
 80047a0:	42470060 	.word	0x42470060

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cc      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b68      	ldr	r3, [pc, #416]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d90c      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b65      	ldr	r3, [pc, #404]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800481a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d044      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d119      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d003      	beq.n	8004862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	2b03      	cmp	r3, #3
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e067      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4934      	ldr	r1, [pc, #208]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fb ffc6 	bl	8000824 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fb ffc2 	bl	8000824 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e04f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d20c      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f82d 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fb ff26 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023c00 	.word	0x40023c00
 8004960:	40023800 	.word	0x40023800
 8004964:	0800c248 	.word	0x0800c248
 8004968:	20000118 	.word	0x20000118
 800496c:	20000000 	.word	0x20000000

08004970 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_RCC_EnableCSS+0x14>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	4247004c 	.word	0x4247004c

08004988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	b5b0      	push	{r4, r5, r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800498e:	2100      	movs	r1, #0
 8004990:	6079      	str	r1, [r7, #4]
 8004992:	2100      	movs	r1, #0
 8004994:	60f9      	str	r1, [r7, #12]
 8004996:	2100      	movs	r1, #0
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800499a:	2100      	movs	r1, #0
 800499c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800499e:	4952      	ldr	r1, [pc, #328]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049a0:	6889      	ldr	r1, [r1, #8]
 80049a2:	f001 010c 	and.w	r1, r1, #12
 80049a6:	2908      	cmp	r1, #8
 80049a8:	d00d      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80049aa:	2908      	cmp	r1, #8
 80049ac:	f200 8094 	bhi.w	8004ad8 <HAL_RCC_GetSysClockFreq+0x150>
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d002      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x32>
 80049b4:	2904      	cmp	r1, #4
 80049b6:	d003      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x38>
 80049b8:	e08e      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ba:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <HAL_RCC_GetSysClockFreq+0x164>)
 80049bc:	60bb      	str	r3, [r7, #8]
       break;
 80049be:	e08e      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80049c2:	60bb      	str	r3, [r7, #8]
      break;
 80049c4:	e08b      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c6:	4948      	ldr	r1, [pc, #288]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049c8:	6849      	ldr	r1, [r1, #4]
 80049ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80049ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d0:	4945      	ldr	r1, [pc, #276]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049d2:	6849      	ldr	r1, [r1, #4]
 80049d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80049d8:	2900      	cmp	r1, #0
 80049da:	d024      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049dc:	4942      	ldr	r1, [pc, #264]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049de:	6849      	ldr	r1, [r1, #4]
 80049e0:	0989      	lsrs	r1, r1, #6
 80049e2:	4608      	mov	r0, r1
 80049e4:	f04f 0100 	mov.w	r1, #0
 80049e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80049ec:	f04f 0500 	mov.w	r5, #0
 80049f0:	ea00 0204 	and.w	r2, r0, r4
 80049f4:	ea01 0305 	and.w	r3, r1, r5
 80049f8:	493d      	ldr	r1, [pc, #244]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80049fa:	fb01 f003 	mul.w	r0, r1, r3
 80049fe:	2100      	movs	r1, #0
 8004a00:	fb01 f102 	mul.w	r1, r1, r2
 8004a04:	1844      	adds	r4, r0, r1
 8004a06:	493a      	ldr	r1, [pc, #232]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a08:	fba2 0101 	umull	r0, r1, r2, r1
 8004a0c:	1863      	adds	r3, r4, r1
 8004a0e:	4619      	mov	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	f7fb fbde 	bl	80001d8 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e04a      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	ea02 0400 	and.w	r4, r2, r0
 8004a3e:	ea03 0501 	and.w	r5, r3, r1
 8004a42:	4620      	mov	r0, r4
 8004a44:	4629      	mov	r1, r5
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	014b      	lsls	r3, r1, #5
 8004a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a54:	0142      	lsls	r2, r0, #5
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	1b00      	subs	r0, r0, r4
 8004a5c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	018b      	lsls	r3, r1, #6
 8004a6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a6e:	0182      	lsls	r2, r0, #6
 8004a70:	1a12      	subs	r2, r2, r0
 8004a72:	eb63 0301 	sbc.w	r3, r3, r1
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	00d9      	lsls	r1, r3, #3
 8004a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a84:	00d0      	lsls	r0, r2, #3
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	1912      	adds	r2, r2, r4
 8004a8c:	eb45 0303 	adc.w	r3, r5, r3
 8004a90:	f04f 0000 	mov.w	r0, #0
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	0299      	lsls	r1, r3, #10
 8004a9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a9e:	0290      	lsls	r0, r2, #10
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	f7fb fb92 	bl	80001d8 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
      break;
 8004ad6:	e002      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <HAL_RCC_GetSysClockFreq+0x164>)
 8004ada:	60bb      	str	r3, [r7, #8]
      break;
 8004adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ade:	68bb      	ldr	r3, [r7, #8]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	016e3600 	.word	0x016e3600

08004af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000118 	.word	0x20000118

08004b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b10:	f7ff fff0 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0a9b      	lsrs	r3, r3, #10
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4903      	ldr	r1, [pc, #12]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b22:	5ccb      	ldrb	r3, [r1, r3]
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	0800c258 	.word	0x0800c258

08004b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b38:	f7ff ffdc 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0b5b      	lsrs	r3, r3, #13
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	; (8004b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40023800 	.word	0x40023800
 8004b58:	0800c258 	.word	0x0800c258

08004b5c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d104      	bne.n	8004b76 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004b6c:	f000 f80a 	bl	8004b84 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004b72:	2280      	movs	r2, #128	; 0x80
 8004b74:	701a      	strb	r2, [r3, #0]
  }
}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	4002380e 	.word	0x4002380e

08004b84 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d038      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc2:	f7fb fe2f 	bl	8000824 <HAL_GetTick>
 8004bc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bca:	f7fb fe2b 	bl	8000824 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0bc      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bdc:	4b61      	ldr	r3, [pc, #388]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	019b      	lsls	r3, r3, #6
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	071b      	lsls	r3, r3, #28
 8004bfa:	495a      	ldr	r1, [pc, #360]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c02:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c08:	f7fb fe0c 	bl	8000824 <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c10:	f7fb fe08 	bl	8000824 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e099      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c22:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8082 	beq.w	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	4a47      	ldr	r2, [pc, #284]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4c:	4b45      	ldr	r3, [pc, #276]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c58:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a42      	ldr	r2, [pc, #264]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c62:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c64:	f7fb fdde 	bl	8000824 <HAL_GetTick>
 8004c68:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c6c:	f7fb fdda 	bl	8000824 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e06b      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c7e:	4b3a      	ldr	r3, [pc, #232]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c8a:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d02e      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d027      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ca8:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb8:	4b2c      	ldr	r3, [pc, #176]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cbe:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d113      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fb fda8 	bl	8000824 <HAL_GetTick>
 8004cd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd6:	e009      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd8:	f7fb fda4 	bl	8000824 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004ce6:	d901      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e034      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ef      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1a:	4912      	ldr	r1, [pc, #72]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d2c:	6093      	str	r3, [r2, #8]
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3a:	490a      	ldr	r1, [pc, #40]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7d1a      	ldrb	r2, [r3, #20]
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d52:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	42470068 	.word	0x42470068
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40007000 	.word	0x40007000
 8004d6c:	42470e40 	.word	0x42470e40
 8004d70:	424711e0 	.word	0x424711e0

08004d74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e083      	b.n	8004e8e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7f5b      	ldrb	r3, [r3, #29]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f006 fb16 	bl	800b3c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	22ca      	movs	r2, #202	; 0xca
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2253      	movs	r2, #83	; 0x53
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f897 	bl	8004ee6 <RTC_EnterInitMode>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	22ff      	movs	r2, #255	; 0xff
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e05e      	b.n	8004e8e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6899      	ldr	r1, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68d2      	ldr	r2, [r2, #12]
 8004e0a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6919      	ldr	r1, [r3, #16]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	041a      	lsls	r2, r3, #16
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e2e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10e      	bne.n	8004e5c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f829 	bl	8004e96 <HAL_RTC_WaitForSynchro>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	22ff      	movs	r2, #255	; 0xff
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e018      	b.n	8004e8e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	22ff      	movs	r2, #255	; 0xff
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb2:	f7fb fcb7 	bl	8000824 <HAL_GetTick>
 8004eb6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004eb8:	e009      	b.n	8004ece <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004eba:	f7fb fcb3 	bl	8000824 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec8:	d901      	bls.n	8004ece <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e007      	b.n	8004ede <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d119      	bne.n	8004f34 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295
 8004f08:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f0a:	f7fb fc8b 	bl	8000824 <HAL_GetTick>
 8004f0e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f10:	e009      	b.n	8004f26 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f12:	f7fb fc87 	bl	8000824 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f20:	d901      	bls.n	8004f26 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e007      	b.n	8004f36 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ee      	beq.n	8004f12 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e022      	b.n	8004f96 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f006 fa5c 	bl	800b420 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f815 	bl	8004fa0 <HAL_SD_InitCard>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e00a      	b.n	8004f96 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004fa0:	b5b0      	push	{r4, r5, r7, lr}
 8004fa2:	b08e      	sub	sp, #56	; 0x38
 8004fa4:	af04      	add	r7, sp, #16
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004fbc:	2376      	movs	r3, #118	; 0x76
 8004fbe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681d      	ldr	r5, [r3, #0]
 8004fc4:	466c      	mov	r4, sp
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f001 fe07 	bl	8006bec <SDIO_Init>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e04c      	b.n	800508a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004ff0:	4b28      	ldr	r3, [pc, #160]	; (8005094 <HAL_SD_InitCard+0xf4>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 fe2e 	bl	8006c5c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_SD_InitCard+0xf4>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fb52 	bl	80056b0 <SD_PowerON>
 800500c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e02e      	b.n	800508a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fa73 	bl	8005518 <SD_InitCard>
 8005032:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e01b      	b.n	800508a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f44f 7100 	mov.w	r1, #512	; 0x200
 800505a:	4618      	mov	r0, r3
 800505c:	f001 fe91 	bl	8006d82 <SDMMC_CmdBlockLength>
 8005060:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00f      	beq.n	8005088 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <HAL_SD_InitCard+0xf8>)
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3728      	adds	r7, #40	; 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bdb0      	pop	{r4, r5, r7, pc}
 8005092:	bf00      	nop
 8005094:	422580a0 	.word	0x422580a0
 8005098:	004005ff 	.word	0x004005ff

0800509c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050aa:	0f9b      	lsrs	r3, r3, #30
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b6:	0e9b      	lsrs	r3, r3, #26
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c8:	0e1b      	lsrs	r3, r3, #24
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fc:	0d1b      	lsrs	r3, r3, #20
 80050fe:	b29a      	uxth	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	b2da      	uxtb	r2, r3
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800511a:	0bdb      	lsrs	r3, r3, #15
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800512c:	0b9b      	lsrs	r3, r3, #14
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	b2da      	uxtb	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513e:	0b5b      	lsrs	r3, r3, #13
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005150:	0b1b      	lsrs	r3, r3, #12
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	b2da      	uxtb	r2, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2200      	movs	r2, #0
 8005162:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005168:	2b00      	cmp	r3, #0
 800516a:	d163      	bne.n	8005234 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005170:	009a      	lsls	r2, r3, #2
 8005172:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005176:	4013      	ands	r3, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800517c:	0f92      	lsrs	r2, r2, #30
 800517e:	431a      	orrs	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005188:	0edb      	lsrs	r3, r3, #27
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	b2da      	uxtb	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519a:	0e1b      	lsrs	r3, r3, #24
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ac:	0d5b      	lsrs	r3, r3, #21
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051be:	0c9b      	lsrs	r3, r3, #18
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d0:	0bdb      	lsrs	r3, r3, #15
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	7e1b      	ldrb	r3, [r3, #24]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	3302      	adds	r3, #2
 80051f4:	2201      	movs	r2, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80051fe:	fb02 f203 	mul.w	r2, r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	7a1b      	ldrb	r3, [r3, #8]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	2201      	movs	r2, #1
 8005212:	409a      	lsls	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005220:	0a52      	lsrs	r2, r2, #9
 8005222:	fb02 f203 	mul.w	r2, r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005230:	661a      	str	r2, [r3, #96]	; 0x60
 8005232:	e031      	b.n	8005298 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	2b01      	cmp	r3, #1
 800523a:	d11d      	bne.n	8005278 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800524a:	0c1b      	lsrs	r3, r3, #16
 800524c:	431a      	orrs	r2, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	3301      	adds	r3, #1
 8005258:	029a      	lsls	r2, r3, #10
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	661a      	str	r2, [r3, #96]	; 0x60
 8005276:	e00f      	b.n	8005298 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a58      	ldr	r2, [pc, #352]	; (80053e0 <HAL_SD_GetCardCSD+0x344>)
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e09d      	b.n	80053d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529c:	0b9b      	lsrs	r3, r3, #14
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	0fdb      	lsrs	r3, r3, #31
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	0f5b      	lsrs	r3, r3, #29
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	0e9b      	lsrs	r3, r3, #26
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	0d9b      	lsrs	r3, r3, #22
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	b2da      	uxtb	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	0d5b      	lsrs	r3, r3, #21
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	0c1b      	lsrs	r3, r3, #16
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	0bdb      	lsrs	r3, r3, #15
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	0b9b      	lsrs	r3, r3, #14
 8005358:	b2db      	uxtb	r3, r3
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	0b5b      	lsrs	r3, r3, #13
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	0b1b      	lsrs	r3, r3, #12
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	0a9b      	lsrs	r3, r3, #10
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	b2da      	uxtb	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	004005ff 	.word	0x004005ff

080053e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80053e4:	b5b0      	push	{r4, r5, r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af04      	add	r7, sp, #16
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2203      	movs	r2, #3
 80053f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	2b03      	cmp	r3, #3
 8005402:	d02e      	beq.n	8005462 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d106      	bne.n	800541a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
 8005418:	e029      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005420:	d10a      	bne.n	8005438 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f9d2 	bl	80057cc <SD_WideBus_Enable>
 8005428:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
 8005436:	e01a      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa0f 	bl	8005862 <SD_WideBus_Disable>
 8005444:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
 8005452:	e00c      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
 8005460:	e005      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a26      	ldr	r2, [pc, #152]	; (8005514 <HAL_SD_ConfigWideBusOperation+0x130>)
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800548c:	e01f      	b.n	80054ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681d      	ldr	r5, [r3, #0]
 80054b4:	466c      	mov	r4, sp
 80054b6:	f107 0314 	add.w	r3, r7, #20
 80054ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054c2:	f107 0308 	add.w	r3, r7, #8
 80054c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c8:	4628      	mov	r0, r5
 80054ca:	f001 fb8f 	bl	8006bec <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 fc53 	bl	8006d82 <SDMMC_CmdBlockLength>
 80054dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <HAL_SD_ConfigWideBusOperation+0x130>)
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800550a:	4618      	mov	r0, r3
 800550c:	3728      	adds	r7, #40	; 0x28
 800550e:	46bd      	mov	sp, r7
 8005510:	bdb0      	pop	{r4, r5, r7, pc}
 8005512:	bf00      	nop
 8005514:	004005ff 	.word	0x004005ff

08005518 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005518:	b5b0      	push	{r4, r5, r7, lr}
 800551a:	b094      	sub	sp, #80	; 0x50
 800551c:	af04      	add	r7, sp, #16
 800551e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005520:	2301      	movs	r3, #1
 8005522:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f001 fba6 	bl	8006c7a <SDIO_GetPowerState>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005534:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005538:	e0b6      	b.n	80056a8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	2b03      	cmp	r3, #3
 8005540:	d02f      	beq.n	80055a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fd25 	bl	8006f96 <SDMMC_CmdSendCID>
 800554c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800554e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <SD_InitCard+0x40>
    {
      return errorstate;
 8005554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005556:	e0a7      	b.n	80056a8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f001 fbd0 	bl	8006d04 <SDIO_GetResponse>
 8005564:	4602      	mov	r2, r0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2104      	movs	r1, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fbc7 	bl	8006d04 <SDIO_GetResponse>
 8005576:	4602      	mov	r2, r0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2108      	movs	r1, #8
 8005582:	4618      	mov	r0, r3
 8005584:	f001 fbbe 	bl	8006d04 <SDIO_GetResponse>
 8005588:	4602      	mov	r2, r0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	210c      	movs	r1, #12
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fbb5 	bl	8006d04 <SDIO_GetResponse>
 800559a:	4602      	mov	r2, r0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d00d      	beq.n	80055c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f107 020e 	add.w	r2, r7, #14
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fd2b 	bl	8007010 <SDMMC_CmdSetRelAdd>
 80055ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80055c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c4:	e070      	b.n	80056a8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d036      	beq.n	800563c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80055ce:	89fb      	ldrh	r3, [r7, #14]
 80055d0:	461a      	mov	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f001 fcf5 	bl	8006fd2 <SDMMC_CmdSendCSD>
 80055e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80055f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f2:	e059      	b.n	80056a8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fb82 	bl	8006d04 <SDIO_GetResponse>
 8005600:	4602      	mov	r2, r0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2104      	movs	r1, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fb79 	bl	8006d04 <SDIO_GetResponse>
 8005612:	4602      	mov	r2, r0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2108      	movs	r1, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fb70 	bl	8006d04 <SDIO_GetResponse>
 8005624:	4602      	mov	r2, r0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	210c      	movs	r1, #12
 8005630:	4618      	mov	r0, r3
 8005632:	f001 fb67 	bl	8006d04 <SDIO_GetResponse>
 8005636:	4602      	mov	r2, r0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2104      	movs	r1, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fb5e 	bl	8006d04 <SDIO_GetResponse>
 8005648:	4603      	mov	r3, r0
 800564a:	0d1a      	lsrs	r2, r3, #20
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005650:	f107 0310 	add.w	r3, r7, #16
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff fd20 	bl	800509c <HAL_SD_GetCardCSD>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005662:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005666:	e01f      	b.n	80056a8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6819      	ldr	r1, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	461a      	mov	r2, r3
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	4608      	mov	r0, r1
 800567a:	f001 fba4 	bl	8006dc6 <SDMMC_CmdSelDesel>
 800567e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <SD_InitCard+0x172>
  {
    return errorstate;
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005688:	e00e      	b.n	80056a8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	466c      	mov	r4, sp
 8005692:	f103 0210 	add.w	r2, r3, #16
 8005696:	ca07      	ldmia	r2, {r0, r1, r2}
 8005698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800569c:	3304      	adds	r3, #4
 800569e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056a0:	4628      	mov	r0, r5
 80056a2:	f001 faa3 	bl	8006bec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3740      	adds	r7, #64	; 0x40
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bdb0      	pop	{r4, r5, r7, pc}

080056b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	2300      	movs	r3, #0
 80056c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fb9f 	bl	8006e0c <SDMMC_CmdGoIdleState>
 80056ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <SD_PowerON+0x2a>
  {
    return errorstate;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	e072      	b.n	80057c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 fbb2 	bl	8006e48 <SDMMC_CmdOperCond>
 80056e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00d      	beq.n	8005708 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 fb88 	bl	8006e0c <SDMMC_CmdGoIdleState>
 80056fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	e05b      	b.n	80057c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005712:	2b01      	cmp	r3, #1
 8005714:	d137      	bne.n	8005786 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fbb2 	bl	8006e86 <SDMMC_CmdAppCommand>
 8005722:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02d      	beq.n	8005786 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800572a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800572e:	e047      	b.n	80057c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fba5 	bl	8006e86 <SDMMC_CmdAppCommand>
 800573c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <SD_PowerON+0x98>
    {
      return errorstate;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	e03b      	b.n	80057c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	491e      	ldr	r1, [pc, #120]	; (80057c8 <SD_PowerON+0x118>)
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fbbb 	bl	8006eca <SDMMC_CmdAppOperCommand>
 8005754:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800575c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005760:	e02e      	b.n	80057c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f001 facb 	bl	8006d04 <SDIO_GetResponse>
 800576e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	0fdb      	lsrs	r3, r3, #31
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <SD_PowerON+0xcc>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <SD_PowerON+0xce>
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]

    count++;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3301      	adds	r3, #1
 8005784:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800578c:	4293      	cmp	r3, r2
 800578e:	d802      	bhi.n	8005796 <SD_PowerON+0xe6>
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0cc      	beq.n	8005730 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800579c:	4293      	cmp	r3, r2
 800579e:	d902      	bls.n	80057a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80057a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a4:	e00c      	b.n	80057c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
 80057b6:	e002      	b.n	80057be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	c1100000 	.word	0xc1100000

080057cc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 fa8e 	bl	8006d04 <SDIO_GetResponse>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f2:	d102      	bne.n	80057fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057f8:	e02f      	b.n	800585a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f879 	bl	80058f8 <SD_FindSCR>
 8005806:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	e023      	b.n	800585a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01c      	beq.n	8005856 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005824:	041b      	lsls	r3, r3, #16
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f001 fb2c 	bl	8006e86 <SDMMC_CmdAppCommand>
 800582e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	e00f      	b.n	800585a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f001 fb65 	bl	8006f10 <SDMMC_CmdBusWidth>
 8005846:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	e003      	b.n	800585a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005852:	2300      	movs	r3, #0
 8005854:	e001      	b.n	800585a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005856:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fa43 	bl	8006d04 <SDIO_GetResponse>
 800587e:	4603      	mov	r3, r0
 8005880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005888:	d102      	bne.n	8005890 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800588a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800588e:	e02f      	b.n	80058f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005890:	f107 030c 	add.w	r3, r7, #12
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f82e 	bl	80058f8 <SD_FindSCR>
 800589c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	e023      	b.n	80058f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01c      	beq.n	80058ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f001 fae1 	bl	8006e86 <SDMMC_CmdAppCommand>
 80058c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	e00f      	b.n	80058f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fb1a 	bl	8006f10 <SDMMC_CmdBusWidth>
 80058dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	e003      	b.n	80058f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e001      	b.n	80058f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b08f      	sub	sp, #60	; 0x3c
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005902:	f7fa ff8f 	bl	8000824 <HAL_GetTick>
 8005906:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800590c:	2300      	movs	r3, #0
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2108      	movs	r1, #8
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fa2f 	bl	8006d82 <SDMMC_CmdBlockLength>
 8005924:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <SD_FindSCR+0x38>
  {
    return errorstate;
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	e0b2      	b.n	8005a96 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f001 faa2 	bl	8006e86 <SDMMC_CmdAppCommand>
 8005942:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <SD_FindSCR+0x56>
  {
    return errorstate;
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	e0a3      	b.n	8005a96 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005954:	2308      	movs	r3, #8
 8005956:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005958:	2330      	movs	r3, #48	; 0x30
 800595a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800595c:	2302      	movs	r3, #2
 800595e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005960:	2300      	movs	r3, #0
 8005962:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005964:	2301      	movs	r3, #1
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f107 0210 	add.w	r2, r7, #16
 8005970:	4611      	mov	r1, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f001 f9d9 	bl	8006d2a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f001 fae9 	bl	8006f54 <SDMMC_CmdSendSCR>
 8005982:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d02a      	beq.n	80059e0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	e083      	b.n	8005a96 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00f      	beq.n	80059bc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	f107 0208 	add.w	r2, r7, #8
 80059a8:	18d4      	adds	r4, r2, r3
 80059aa:	4608      	mov	r0, r1
 80059ac:	f001 f949 	bl	8006c42 <SDIO_ReadFIFO>
 80059b0:	4603      	mov	r3, r0
 80059b2:	6023      	str	r3, [r4, #0]
      index++;
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	3301      	adds	r3, #1
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ba:	e006      	b.n	80059ca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d012      	beq.n	80059f0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80059ca:	f7fa ff2b 	bl	8000824 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d102      	bne.n	80059e0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80059da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059de:	e05a      	b.n	8005a96 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0cf      	beq.n	800598e <SD_FindSCR+0x96>
 80059ee:	e000      	b.n	80059f2 <SD_FindSCR+0xfa>
      break;
 80059f0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2208      	movs	r2, #8
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005a08:	2308      	movs	r3, #8
 8005a0a:	e044      	b.n	8005a96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a22:	2302      	movs	r3, #2
 8005a24:	e037      	b.n	8005a96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005a3c:	2320      	movs	r3, #32
 8005a3e:	e02a      	b.n	8005a96 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	061a      	lsls	r2, r3, #24
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	0e1b      	lsrs	r3, r3, #24
 8005a66:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	601a      	str	r2, [r3, #0]
    scr++;
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	3304      	adds	r3, #4
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	061a      	lsls	r2, r3, #24
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	0e1b      	lsrs	r3, r3, #24
 8005a8e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	373c      	adds	r7, #60	; 0x3c
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd90      	pop	{r4, r7, pc}

08005a9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e041      	b.n	8005b34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f005 fd35 	bl	800b534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f000 fb47 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d001      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e044      	b.n	8005bde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1e      	ldr	r2, [pc, #120]	; (8005bec <HAL_TIM_Base_Start_IT+0xb0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d018      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d013      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1a      	ldr	r2, [pc, #104]	; (8005bf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00e      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <HAL_TIM_Base_Start_IT+0xc0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d111      	bne.n	8005bcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b06      	cmp	r3, #6
 8005bb8:	d010      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bca:	e007      	b.n	8005bdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40010000 	.word	0x40010000
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40000c00 	.word	0x40000c00
 8005bfc:	40014000 	.word	0x40014000

08005c00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e041      	b.n	8005c96 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f839 	bl	8005c9e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f000 fa96 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d122      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f06f 0202 	mvn.w	r2, #2
 8005cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fa1c 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005cfa:	e005      	b.n	8005d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fa0e 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa1f 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d122      	bne.n	8005d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d11b      	bne.n	8005d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0204 	mvn.w	r2, #4
 8005d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9f2 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f9e4 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9f5 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d122      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d11b      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0208 	mvn.w	r2, #8
 8005d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f9c8 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005da2:	e005      	b.n	8005db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f9ba 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9cb 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d122      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d11b      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0210 	mvn.w	r2, #16
 8005dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2208      	movs	r2, #8
 8005de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f99e 	bl	8006132 <HAL_TIM_IC_CaptureCallback>
 8005df6:	e005      	b.n	8005e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f990 	bl	800611e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9a1 	bl	8006146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d10e      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f06f 0201 	mvn.w	r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f96a 	bl	800610a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d10e      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d107      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fca5 	bl	80067ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d10e      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f966 	bl	800615a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d10e      	bne.n	8005eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0220 	mvn.w	r2, #32
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fc6f 	bl	8006798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e048      	b.n	8005f74 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d839      	bhi.n	8005f64 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f2d 	.word	0x08005f2d
 8005efc:	08005f65 	.word	0x08005f65
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	08005f65 	.word	0x08005f65
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	08005f65 	.word	0x08005f65
 8005f18:	08005f49 	.word	0x08005f49
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f65 	.word	0x08005f65
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f57 	.word	0x08005f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f99c 	bl	8006270 <TIM_OC1_SetConfig>
      break;
 8005f38:	e017      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 f9fb 	bl	800633c <TIM_OC2_SetConfig>
      break;
 8005f46:	e010      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fa60 	bl	8006414 <TIM_OC3_SetConfig>
      break;
 8005f54:	e009      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fac3 	bl	80064e8 <TIM_OC4_SetConfig>
      break;
 8005f62:	e002      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
      break;
 8005f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_TIM_ConfigClockSource+0x1c>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e0b4      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x186>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd0:	d03e      	beq.n	8006050 <HAL_TIM_ConfigClockSource+0xd4>
 8005fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd6:	f200 8087 	bhi.w	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	f000 8086 	beq.w	80060ee <HAL_TIM_ConfigClockSource+0x172>
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	d87f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe8:	2b70      	cmp	r3, #112	; 0x70
 8005fea:	d01a      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xa6>
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d87b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff0:	2b60      	cmp	r3, #96	; 0x60
 8005ff2:	d050      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x11a>
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d877      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff8:	2b50      	cmp	r3, #80	; 0x50
 8005ffa:	d03c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xfa>
 8005ffc:	2b50      	cmp	r3, #80	; 0x50
 8005ffe:	d873      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d058      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d86f      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b30      	cmp	r3, #48	; 0x30
 800600a:	d064      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 800600c:	2b30      	cmp	r3, #48	; 0x30
 800600e:	d86b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d060      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d867      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d05c      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 800601c:	2b10      	cmp	r3, #16
 800601e:	d05a      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006020:	e062      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6899      	ldr	r1, [r3, #8]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f000 fb23 	bl	800667c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	609a      	str	r2, [r3, #8]
      break;
 800604e:	e04f      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f000 fb0c 	bl	800667c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006072:	609a      	str	r2, [r3, #8]
      break;
 8006074:	e03c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6859      	ldr	r1, [r3, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	461a      	mov	r2, r3
 8006084:	f000 fa80 	bl	8006588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2150      	movs	r1, #80	; 0x50
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fad9 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 8006094:	e02c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f000 fa9f 	bl	80065e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2160      	movs	r1, #96	; 0x60
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fac9 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 80060b4:	e01c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f000 fa60 	bl	8006588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2140      	movs	r1, #64	; 0x40
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fab9 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 80060d4:	e00c      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f000 fab0 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 80060e6:	e003      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e000      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a34      	ldr	r2, [pc, #208]	; (8006254 <TIM_Base_SetConfig+0xe4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00f      	beq.n	80061a8 <TIM_Base_SetConfig+0x38>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618e:	d00b      	beq.n	80061a8 <TIM_Base_SetConfig+0x38>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a31      	ldr	r2, [pc, #196]	; (8006258 <TIM_Base_SetConfig+0xe8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <TIM_Base_SetConfig+0x38>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a30      	ldr	r2, [pc, #192]	; (800625c <TIM_Base_SetConfig+0xec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_Base_SetConfig+0x38>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a2f      	ldr	r2, [pc, #188]	; (8006260 <TIM_Base_SetConfig+0xf0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d108      	bne.n	80061ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a25      	ldr	r2, [pc, #148]	; (8006254 <TIM_Base_SetConfig+0xe4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01b      	beq.n	80061fa <TIM_Base_SetConfig+0x8a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c8:	d017      	beq.n	80061fa <TIM_Base_SetConfig+0x8a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a22      	ldr	r2, [pc, #136]	; (8006258 <TIM_Base_SetConfig+0xe8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <TIM_Base_SetConfig+0x8a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a21      	ldr	r2, [pc, #132]	; (800625c <TIM_Base_SetConfig+0xec>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00f      	beq.n	80061fa <TIM_Base_SetConfig+0x8a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a20      	ldr	r2, [pc, #128]	; (8006260 <TIM_Base_SetConfig+0xf0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0x8a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <TIM_Base_SetConfig+0xf4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0x8a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <TIM_Base_SetConfig+0xf8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0x8a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1d      	ldr	r2, [pc, #116]	; (800626c <TIM_Base_SetConfig+0xfc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a08      	ldr	r2, [pc, #32]	; (8006254 <TIM_Base_SetConfig+0xe4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d103      	bne.n	8006240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	615a      	str	r2, [r3, #20]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40014000 	.word	0x40014000
 8006268:	40014400 	.word	0x40014400
 800626c:	40014800 	.word	0x40014800

08006270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f023 0302 	bic.w	r3, r3, #2
 80062b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	; (8006338 <TIM_OC1_SetConfig+0xc8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d10c      	bne.n	80062e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0308 	bic.w	r3, r3, #8
 80062d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 0304 	bic.w	r3, r3, #4
 80062e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a13      	ldr	r2, [pc, #76]	; (8006338 <TIM_OC1_SetConfig+0xc8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d111      	bne.n	8006312 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	621a      	str	r2, [r3, #32]
}
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40010000 	.word	0x40010000

0800633c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f023 0210 	bic.w	r2, r3, #16
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f023 0320 	bic.w	r3, r3, #32
 8006386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <TIM_OC2_SetConfig+0xd4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d10d      	bne.n	80063b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a15      	ldr	r2, [pc, #84]	; (8006410 <TIM_OC2_SetConfig+0xd4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d113      	bne.n	80063e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40010000 	.word	0x40010000

08006414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0303 	bic.w	r3, r3, #3
 800644a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800645c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <TIM_OC3_SetConfig+0xd0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d10d      	bne.n	800648e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800648c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a14      	ldr	r2, [pc, #80]	; (80064e4 <TIM_OC3_SetConfig+0xd0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d113      	bne.n	80064be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800649c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	621a      	str	r2, [r3, #32]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	40010000 	.word	0x40010000

080064e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	031b      	lsls	r3, r3, #12
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a10      	ldr	r2, [pc, #64]	; (8006584 <TIM_OC4_SetConfig+0x9c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d109      	bne.n	800655c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	019b      	lsls	r3, r3, #6
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000

08006588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f023 0201 	bic.w	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f023 030a 	bic.w	r3, r3, #10
 80065c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f023 0210 	bic.w	r2, r3, #16
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	031b      	lsls	r3, r3, #12
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	f043 0307 	orr.w	r3, r3, #7
 8006668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	609a      	str	r2, [r3, #8]
}
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	021a      	lsls	r2, r3, #8
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	431a      	orrs	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	609a      	str	r2, [r3, #8]
}
 80066b0:	bf00      	nop
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e050      	b.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1c      	ldr	r2, [pc, #112]	; (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d018      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006720:	d013      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d00e      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a15      	ldr	r2, [pc, #84]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d004      	beq.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d10c      	bne.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4313      	orrs	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40010000 	.word	0x40010000
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40014000 	.word	0x40014000

08006798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e03f      	b.n	8006852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f004 feca 	bl	800b580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2224      	movs	r2, #36	; 0x24
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f829 	bl	800685c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695a      	ldr	r2, [r3, #20]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	b09f      	sub	sp, #124	; 0x7c
 8006862:	af00      	add	r7, sp, #0
 8006864:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006872:	68d9      	ldr	r1, [r3, #12]
 8006874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	ea40 0301 	orr.w	r3, r0, r1
 800687c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800687e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	431a      	orrs	r2, r3
 8006888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	431a      	orrs	r2, r3
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	4313      	orrs	r3, r2
 8006894:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068a0:	f021 010c 	bic.w	r1, r1, #12
 80068a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068aa:	430b      	orrs	r3, r1
 80068ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ba:	6999      	ldr	r1, [r3, #24]
 80068bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	ea40 0301 	orr.w	r3, r0, r1
 80068c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4bc5      	ldr	r3, [pc, #788]	; (8006be0 <UART_SetConfig+0x384>)
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d004      	beq.n	80068da <UART_SetConfig+0x7e>
 80068d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4bc3      	ldr	r3, [pc, #780]	; (8006be4 <UART_SetConfig+0x388>)
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d103      	bne.n	80068e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068da:	f7fe f92b 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 80068de:	6778      	str	r0, [r7, #116]	; 0x74
 80068e0:	e002      	b.n	80068e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068e2:	f7fe f913 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 80068e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f0:	f040 80b6 	bne.w	8006a60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f6:	461c      	mov	r4, r3
 80068f8:	f04f 0500 	mov.w	r5, #0
 80068fc:	4622      	mov	r2, r4
 80068fe:	462b      	mov	r3, r5
 8006900:	1891      	adds	r1, r2, r2
 8006902:	6439      	str	r1, [r7, #64]	; 0x40
 8006904:	415b      	adcs	r3, r3
 8006906:	647b      	str	r3, [r7, #68]	; 0x44
 8006908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800690c:	1912      	adds	r2, r2, r4
 800690e:	eb45 0303 	adc.w	r3, r5, r3
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f04f 0100 	mov.w	r1, #0
 800691a:	00d9      	lsls	r1, r3, #3
 800691c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006920:	00d0      	lsls	r0, r2, #3
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	1911      	adds	r1, r2, r4
 8006928:	6639      	str	r1, [r7, #96]	; 0x60
 800692a:	416b      	adcs	r3, r5
 800692c:	667b      	str	r3, [r7, #100]	; 0x64
 800692e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	461a      	mov	r2, r3
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	1891      	adds	r1, r2, r2
 800693a:	63b9      	str	r1, [r7, #56]	; 0x38
 800693c:	415b      	adcs	r3, r3
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006944:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006948:	f7f9 fc46 	bl	80001d8 <__aeabi_uldivmod>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4ba5      	ldr	r3, [pc, #660]	; (8006be8 <UART_SetConfig+0x38c>)
 8006952:	fba3 2302 	umull	r2, r3, r3, r2
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	011e      	lsls	r6, r3, #4
 800695a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800695c:	461c      	mov	r4, r3
 800695e:	f04f 0500 	mov.w	r5, #0
 8006962:	4622      	mov	r2, r4
 8006964:	462b      	mov	r3, r5
 8006966:	1891      	adds	r1, r2, r2
 8006968:	6339      	str	r1, [r7, #48]	; 0x30
 800696a:	415b      	adcs	r3, r3
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
 800696e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006972:	1912      	adds	r2, r2, r4
 8006974:	eb45 0303 	adc.w	r3, r5, r3
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	00d9      	lsls	r1, r3, #3
 8006982:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006986:	00d0      	lsls	r0, r2, #3
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	1911      	adds	r1, r2, r4
 800698e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006990:	416b      	adcs	r3, r5
 8006992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	461a      	mov	r2, r3
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	1891      	adds	r1, r2, r2
 80069a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80069a2:	415b      	adcs	r3, r3
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069ae:	f7f9 fc13 	bl	80001d8 <__aeabi_uldivmod>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4b8c      	ldr	r3, [pc, #560]	; (8006be8 <UART_SetConfig+0x38c>)
 80069b8:	fba3 1302 	umull	r1, r3, r3, r2
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	2164      	movs	r1, #100	; 0x64
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	3332      	adds	r3, #50	; 0x32
 80069ca:	4a87      	ldr	r2, [pc, #540]	; (8006be8 <UART_SetConfig+0x38c>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069d8:	441e      	add	r6, r3
 80069da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069dc:	4618      	mov	r0, r3
 80069de:	f04f 0100 	mov.w	r1, #0
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	1894      	adds	r4, r2, r2
 80069e8:	623c      	str	r4, [r7, #32]
 80069ea:	415b      	adcs	r3, r3
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
 80069ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069f2:	1812      	adds	r2, r2, r0
 80069f4:	eb41 0303 	adc.w	r3, r1, r3
 80069f8:	f04f 0400 	mov.w	r4, #0
 80069fc:	f04f 0500 	mov.w	r5, #0
 8006a00:	00dd      	lsls	r5, r3, #3
 8006a02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a06:	00d4      	lsls	r4, r2, #3
 8006a08:	4622      	mov	r2, r4
 8006a0a:	462b      	mov	r3, r5
 8006a0c:	1814      	adds	r4, r2, r0
 8006a0e:	653c      	str	r4, [r7, #80]	; 0x50
 8006a10:	414b      	adcs	r3, r1
 8006a12:	657b      	str	r3, [r7, #84]	; 0x54
 8006a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	1891      	adds	r1, r2, r2
 8006a20:	61b9      	str	r1, [r7, #24]
 8006a22:	415b      	adcs	r3, r3
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a2e:	f7f9 fbd3 	bl	80001d8 <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4b6c      	ldr	r3, [pc, #432]	; (8006be8 <UART_SetConfig+0x38c>)
 8006a38:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	2164      	movs	r1, #100	; 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	3332      	adds	r3, #50	; 0x32
 8006a4a:	4a67      	ldr	r2, [pc, #412]	; (8006be8 <UART_SetConfig+0x38c>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	f003 0207 	and.w	r2, r3, #7
 8006a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4432      	add	r2, r6
 8006a5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a5e:	e0b9      	b.n	8006bd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a62:	461c      	mov	r4, r3
 8006a64:	f04f 0500 	mov.w	r5, #0
 8006a68:	4622      	mov	r2, r4
 8006a6a:	462b      	mov	r3, r5
 8006a6c:	1891      	adds	r1, r2, r2
 8006a6e:	6139      	str	r1, [r7, #16]
 8006a70:	415b      	adcs	r3, r3
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a78:	1912      	adds	r2, r2, r4
 8006a7a:	eb45 0303 	adc.w	r3, r5, r3
 8006a7e:	f04f 0000 	mov.w	r0, #0
 8006a82:	f04f 0100 	mov.w	r1, #0
 8006a86:	00d9      	lsls	r1, r3, #3
 8006a88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a8c:	00d0      	lsls	r0, r2, #3
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	eb12 0804 	adds.w	r8, r2, r4
 8006a96:	eb43 0905 	adc.w	r9, r3, r5
 8006a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f04f 0100 	mov.w	r1, #0
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	008b      	lsls	r3, r1, #2
 8006aae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ab2:	0082      	lsls	r2, r0, #2
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7f9 fb8e 	bl	80001d8 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4b49      	ldr	r3, [pc, #292]	; (8006be8 <UART_SetConfig+0x38c>)
 8006ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	011e      	lsls	r6, r3, #4
 8006aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006acc:	4618      	mov	r0, r3
 8006ace:	f04f 0100 	mov.w	r1, #0
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	1894      	adds	r4, r2, r2
 8006ad8:	60bc      	str	r4, [r7, #8]
 8006ada:	415b      	adcs	r3, r3
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae2:	1812      	adds	r2, r2, r0
 8006ae4:	eb41 0303 	adc.w	r3, r1, r3
 8006ae8:	f04f 0400 	mov.w	r4, #0
 8006aec:	f04f 0500 	mov.w	r5, #0
 8006af0:	00dd      	lsls	r5, r3, #3
 8006af2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006af6:	00d4      	lsls	r4, r2, #3
 8006af8:	4622      	mov	r2, r4
 8006afa:	462b      	mov	r3, r5
 8006afc:	1814      	adds	r4, r2, r0
 8006afe:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b00:	414b      	adcs	r3, r1
 8006b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f04f 0100 	mov.w	r1, #0
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	008b      	lsls	r3, r1, #2
 8006b18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b1c:	0082      	lsls	r2, r0, #2
 8006b1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b22:	f7f9 fb59 	bl	80001d8 <__aeabi_uldivmod>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <UART_SetConfig+0x38c>)
 8006b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	2164      	movs	r1, #100	; 0x64
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	3332      	adds	r3, #50	; 0x32
 8006b3e:	4a2a      	ldr	r2, [pc, #168]	; (8006be8 <UART_SetConfig+0x38c>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4a:	441e      	add	r6, r3
 8006b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f04f 0100 	mov.w	r1, #0
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	1894      	adds	r4, r2, r2
 8006b5a:	603c      	str	r4, [r7, #0]
 8006b5c:	415b      	adcs	r3, r3
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b64:	1812      	adds	r2, r2, r0
 8006b66:	eb41 0303 	adc.w	r3, r1, r3
 8006b6a:	f04f 0400 	mov.w	r4, #0
 8006b6e:	f04f 0500 	mov.w	r5, #0
 8006b72:	00dd      	lsls	r5, r3, #3
 8006b74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b78:	00d4      	lsls	r4, r2, #3
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	eb12 0a00 	adds.w	sl, r2, r0
 8006b82:	eb43 0b01 	adc.w	fp, r3, r1
 8006b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	008b      	lsls	r3, r1, #2
 8006b9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b9e:	0082      	lsls	r2, r0, #2
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	f7f9 fb18 	bl	80001d8 <__aeabi_uldivmod>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <UART_SetConfig+0x38c>)
 8006bae:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	2164      	movs	r1, #100	; 0x64
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	3332      	adds	r3, #50	; 0x32
 8006bc0:	4a09      	ldr	r2, [pc, #36]	; (8006be8 <UART_SetConfig+0x38c>)
 8006bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4432      	add	r2, r6
 8006bd2:	609a      	str	r2, [r3, #8]
}
 8006bd4:	bf00      	nop
 8006bd6:	377c      	adds	r7, #124	; 0x7c
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	bf00      	nop
 8006be0:	40011000 	.word	0x40011000
 8006be4:	40011400 	.word	0x40011400
 8006be8:	51eb851f 	.word	0x51eb851f

08006bec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 001c 	add.w	r0, r7, #28
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006c02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006c04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006c06:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006c0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006c0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006c12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006c16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006c26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	b004      	add	sp, #16
 8006c40:	4770      	bx	lr

08006c42 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2203      	movs	r2, #3
 8006c68:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006c6a:	2002      	movs	r0, #2
 8006c6c:	f7f9 fde6 	bl	800083c <HAL_Delay>
  
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0303 	and.w	r3, r3, #3
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cb4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006cba:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006cc0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006cd0:	f023 030f 	bic.w	r3, r3, #15
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	b2db      	uxtb	r3, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3314      	adds	r3, #20
 8006d12:	461a      	mov	r2, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	4413      	add	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
}  
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d50:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d56:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0

}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b088      	sub	sp, #32
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d90:	2310      	movs	r3, #16
 8006d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d94:	2340      	movs	r3, #64	; 0x40
 8006d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff ff74 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db2:	2110      	movs	r1, #16
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f979 	bl	80070ac <SDMMC_GetCmdResp1>
 8006dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b08a      	sub	sp, #40	; 0x28
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dde:	2300      	movs	r3, #0
 8006de0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de6:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de8:	f107 0310 	add.w	r3, r7, #16
 8006dec:	4619      	mov	r1, r3
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f7ff ff51 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df8:	2107      	movs	r1, #7
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f956 	bl	80070ac <SDMMC_GetCmdResp1>
 8006e00:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3728      	adds	r7, #40	; 0x28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ff30 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f90c 	bl	8007054 <SDMMC_GetCmdError>
 8006e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3720      	adds	r7, #32
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e50:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e56:	2308      	movs	r3, #8
 8006e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e5a:	2340      	movs	r3, #64	; 0x40
 8006e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e68:	f107 0308 	add.w	r3, r7, #8
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff ff11 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fb03 	bl	8007480 <SDMMC_GetCmdResp7>
 8006e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b088      	sub	sp, #32
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006e94:	2337      	movs	r3, #55	; 0x37
 8006e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e98:	2340      	movs	r3, #64	; 0x40
 8006e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ea6:	f107 0308 	add.w	r3, r7, #8
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff fef2 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb6:	2137      	movs	r1, #55	; 0x37
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8f7 	bl	80070ac <SDMMC_GetCmdResp1>
 8006ebe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b088      	sub	sp, #32
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006ee0:	2329      	movs	r3, #41	; 0x29
 8006ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ee4:	2340      	movs	r3, #64	; 0x40
 8006ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ef0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ef2:	f107 0308 	add.w	r3, r7, #8
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff fecc 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa0a 	bl	8007318 <SDMMC_GetCmdResp3>
 8006f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f06:	69fb      	ldr	r3, [r7, #28]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006f1e:	2306      	movs	r3, #6
 8006f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f22:	2340      	movs	r3, #64	; 0x40
 8006f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f30:	f107 0308 	add.w	r3, r7, #8
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fead 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	2106      	movs	r1, #6
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8b2 	bl	80070ac <SDMMC_GetCmdResp1>
 8006f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3720      	adds	r7, #32
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006f60:	2333      	movs	r3, #51	; 0x33
 8006f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f64:	2340      	movs	r3, #64	; 0x40
 8006f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f72:	f107 0308 	add.w	r3, r7, #8
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff fe8c 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f82:	2133      	movs	r1, #51	; 0x33
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f891 	bl	80070ac <SDMMC_GetCmdResp1>
 8006f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3720      	adds	r7, #32
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b088      	sub	sp, #32
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006fa6:	23c0      	movs	r3, #192	; 0xc0
 8006fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fb4:	f107 0308 	add.w	r3, r7, #8
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fe6b 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f961 	bl	8007288 <SDMMC_GetCmdResp2>
 8006fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3720      	adds	r7, #32
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b088      	sub	sp, #32
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006fe0:	2309      	movs	r3, #9
 8006fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006fe4:	23c0      	movs	r3, #192	; 0xc0
 8006fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ff2:	f107 0308 	add.w	r3, r7, #8
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff fe4c 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f942 	bl	8007288 <SDMMC_GetCmdResp2>
 8007004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007006:	69fb      	ldr	r3, [r7, #28]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3720      	adds	r7, #32
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800701e:	2303      	movs	r3, #3
 8007020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800702a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800702e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007030:	f107 0308 	add.w	r3, r7, #8
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fe2d 	bl	8006c96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	2103      	movs	r1, #3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f9a7 	bl	8007394 <SDMMC_GetCmdResp6>
 8007046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007048:	69fb      	ldr	r3, [r7, #28]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800705c:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <SDMMC_GetCmdError+0x50>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <SDMMC_GetCmdError+0x54>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	0a5b      	lsrs	r3, r3, #9
 8007068:	f241 3288 	movw	r2, #5000	; 0x1388
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1e5a      	subs	r2, r3, #1
 8007076:	60fa      	str	r2, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800707c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007080:	e009      	b.n	8007096 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0f1      	beq.n	8007072 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	22c5      	movs	r2, #197	; 0xc5
 8007092:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000118 	.word	0x20000118
 80070a8:	10624dd3 	.word	0x10624dd3

080070ac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	460b      	mov	r3, r1
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80070ba:	4b70      	ldr	r3, [pc, #448]	; (800727c <SDMMC_GetCmdResp1+0x1d0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a70      	ldr	r2, [pc, #448]	; (8007280 <SDMMC_GetCmdResp1+0x1d4>)
 80070c0:	fba2 2303 	umull	r2, r3, r2, r3
 80070c4:	0a5a      	lsrs	r2, r3, #9
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
 80070cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	1e5a      	subs	r2, r3, #1
 80070d2:	61fa      	str	r2, [r7, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070dc:	e0c9      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0ef      	beq.n	80070ce <SDMMC_GetCmdResp1+0x22>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1ea      	bne.n	80070ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2204      	movs	r2, #4
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800710a:	2304      	movs	r3, #4
 800710c:	e0b1      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007120:	2301      	movs	r3, #1
 8007122:	e0a6      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	22c5      	movs	r2, #197	; 0xc5
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff fddd 	bl	8006cea <SDIO_GetCommandResponse>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	4293      	cmp	r3, r2
 8007138:	d001      	beq.n	800713e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800713a:	2301      	movs	r3, #1
 800713c:	e099      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800713e:	2100      	movs	r1, #0
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7ff fddf 	bl	8006d04 <SDIO_GetResponse>
 8007146:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4b4e      	ldr	r3, [pc, #312]	; (8007284 <SDMMC_GetCmdResp1+0x1d8>)
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007152:	2300      	movs	r3, #0
 8007154:	e08d      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	da02      	bge.n	8007162 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800715c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007160:	e087      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800716c:	2340      	movs	r3, #64	; 0x40
 800716e:	e080      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	e079      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800718c:	e071      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719c:	e069      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80071a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ac:	e061      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80071b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071bc:	e059      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80071c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071cc:	e051      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071dc:	e049      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80071e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071ec:	e041      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80071f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fc:	e039      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800720c:	e031      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007218:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800721c:	e029      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007228:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800722c:	e021      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800723c:	e019      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007248:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800724c:	e011      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800725c:	e009      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007268:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800726c:	e001      	b.n	8007272 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800726e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000118 	.word	0x20000118
 8007280:	10624dd3 	.word	0x10624dd3
 8007284:	fdffe008 	.word	0xfdffe008

08007288 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007290:	4b1f      	ldr	r3, [pc, #124]	; (8007310 <SDMMC_GetCmdResp2+0x88>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <SDMMC_GetCmdResp2+0x8c>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	0a5b      	lsrs	r3, r3, #9
 800729c:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	60fa      	str	r2, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072b4:	e026      	b.n	8007304 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0ef      	beq.n	80072a6 <SDMMC_GetCmdResp2+0x1e>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ea      	bne.n	80072a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2204      	movs	r2, #4
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072e2:	2304      	movs	r3, #4
 80072e4:	e00e      	b.n	8007304 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e003      	b.n	8007304 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	22c5      	movs	r2, #197	; 0xc5
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20000118 	.word	0x20000118
 8007314:	10624dd3 	.word	0x10624dd3

08007318 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007320:	4b1a      	ldr	r3, [pc, #104]	; (800738c <SDMMC_GetCmdResp3+0x74>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1a      	ldr	r2, [pc, #104]	; (8007390 <SDMMC_GetCmdResp3+0x78>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0a5b      	lsrs	r3, r3, #9
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	fb02 f303 	mul.w	r3, r2, r3
 8007334:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	60fa      	str	r2, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d102      	bne.n	8007346 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007344:	e01b      	b.n	800737e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0ef      	beq.n	8007336 <SDMMC_GetCmdResp3+0x1e>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1ea      	bne.n	8007336 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2204      	movs	r2, #4
 8007370:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007372:	2304      	movs	r3, #4
 8007374:	e003      	b.n	800737e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	22c5      	movs	r2, #197	; 0xc5
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000118 	.word	0x20000118
 8007390:	10624dd3 	.word	0x10624dd3

08007394 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	460b      	mov	r3, r1
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073a2:	4b35      	ldr	r3, [pc, #212]	; (8007478 <SDMMC_GetCmdResp6+0xe4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a35      	ldr	r2, [pc, #212]	; (800747c <SDMMC_GetCmdResp6+0xe8>)
 80073a8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ac:	0a5b      	lsrs	r3, r3, #9
 80073ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
 80073b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	1e5a      	subs	r2, r3, #1
 80073bc:	61fa      	str	r2, [r7, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073c6:	e052      	b.n	800746e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0ef      	beq.n	80073b8 <SDMMC_GetCmdResp6+0x24>
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1ea      	bne.n	80073b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2204      	movs	r2, #4
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073f4:	2304      	movs	r3, #4
 80073f6:	e03a      	b.n	800746e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800740a:	2301      	movs	r3, #1
 800740c:	e02f      	b.n	800746e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff fc6b 	bl	8006cea <SDIO_GetCommandResponse>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	4293      	cmp	r3, r2
 800741c:	d001      	beq.n	8007422 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800741e:	2301      	movs	r3, #1
 8007420:	e025      	b.n	800746e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	22c5      	movs	r2, #197	; 0xc5
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fc6a 	bl	8006d04 <SDIO_GetResponse>
 8007430:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007446:	2300      	movs	r3, #0
 8007448:	e011      	b.n	800746e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007458:	e009      	b.n	800746e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007468:	e001      	b.n	800746e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800746a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000118 	.word	0x20000118
 800747c:	10624dd3 	.word	0x10624dd3

08007480 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007488:	4b22      	ldr	r3, [pc, #136]	; (8007514 <SDMMC_GetCmdResp7+0x94>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a22      	ldr	r2, [pc, #136]	; (8007518 <SDMMC_GetCmdResp7+0x98>)
 800748e:	fba2 2303 	umull	r2, r3, r2, r3
 8007492:	0a5b      	lsrs	r3, r3, #9
 8007494:	f241 3288 	movw	r2, #5000	; 0x1388
 8007498:	fb02 f303 	mul.w	r3, r2, r3
 800749c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1e5a      	subs	r2, r3, #1
 80074a2:	60fa      	str	r2, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074ac:	e02c      	b.n	8007508 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0ef      	beq.n	800749e <SDMMC_GetCmdResp7+0x1e>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1ea      	bne.n	800749e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2204      	movs	r2, #4
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074da:	2304      	movs	r3, #4
 80074dc:	e014      	b.n	8007508 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d004      	beq.n	80074f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e009      	b.n	8007508 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2240      	movs	r2, #64	; 0x40
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007506:	2300      	movs	r3, #0
  
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	20000118 	.word	0x20000118
 8007518:	10624dd3 	.word	0x10624dd3

0800751c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800751c:	b084      	sub	sp, #16
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	f107 001c 	add.w	r0, r7, #28
 800752a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2b01      	cmp	r3, #1
 8007532:	d122      	bne.n	800757a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800755c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d105      	bne.n	800756e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fb1c 	bl	8008bac <USB_CoreReset>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	e01a      	b.n	80075b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 fb10 	bl	8008bac <USB_CoreReset>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
 80075a2:	e005      	b.n	80075b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d10b      	bne.n	80075ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f043 0206 	orr.w	r2, r3, #6
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f043 0220 	orr.w	r2, r3, #32
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075da:	b004      	add	sp, #16
 80075dc:	4770      	bx	lr
	...

080075e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d165      	bne.n	80076c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4a41      	ldr	r2, [pc, #260]	; (80076fc <USB_SetTurnaroundTime+0x11c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d906      	bls.n	800760a <USB_SetTurnaroundTime+0x2a>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4a40      	ldr	r2, [pc, #256]	; (8007700 <USB_SetTurnaroundTime+0x120>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d202      	bcs.n	800760a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007604:	230f      	movs	r3, #15
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	e062      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4a3c      	ldr	r2, [pc, #240]	; (8007700 <USB_SetTurnaroundTime+0x120>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d306      	bcc.n	8007620 <USB_SetTurnaroundTime+0x40>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	4a3b      	ldr	r2, [pc, #236]	; (8007704 <USB_SetTurnaroundTime+0x124>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d202      	bcs.n	8007620 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800761a:	230e      	movs	r3, #14
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	e057      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4a38      	ldr	r2, [pc, #224]	; (8007704 <USB_SetTurnaroundTime+0x124>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d306      	bcc.n	8007636 <USB_SetTurnaroundTime+0x56>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4a37      	ldr	r2, [pc, #220]	; (8007708 <USB_SetTurnaroundTime+0x128>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d202      	bcs.n	8007636 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007630:	230d      	movs	r3, #13
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e04c      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	4a33      	ldr	r2, [pc, #204]	; (8007708 <USB_SetTurnaroundTime+0x128>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d306      	bcc.n	800764c <USB_SetTurnaroundTime+0x6c>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4a32      	ldr	r2, [pc, #200]	; (800770c <USB_SetTurnaroundTime+0x12c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d802      	bhi.n	800764c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007646:	230c      	movs	r3, #12
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e041      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4a2f      	ldr	r2, [pc, #188]	; (800770c <USB_SetTurnaroundTime+0x12c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d906      	bls.n	8007662 <USB_SetTurnaroundTime+0x82>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4a2e      	ldr	r2, [pc, #184]	; (8007710 <USB_SetTurnaroundTime+0x130>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d802      	bhi.n	8007662 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800765c:	230b      	movs	r3, #11
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e036      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4a2a      	ldr	r2, [pc, #168]	; (8007710 <USB_SetTurnaroundTime+0x130>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d906      	bls.n	8007678 <USB_SetTurnaroundTime+0x98>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4a29      	ldr	r2, [pc, #164]	; (8007714 <USB_SetTurnaroundTime+0x134>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d802      	bhi.n	8007678 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007672:	230a      	movs	r3, #10
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e02b      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4a26      	ldr	r2, [pc, #152]	; (8007714 <USB_SetTurnaroundTime+0x134>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d906      	bls.n	800768e <USB_SetTurnaroundTime+0xae>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4a25      	ldr	r2, [pc, #148]	; (8007718 <USB_SetTurnaroundTime+0x138>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d202      	bcs.n	800768e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007688:	2309      	movs	r3, #9
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e020      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4a21      	ldr	r2, [pc, #132]	; (8007718 <USB_SetTurnaroundTime+0x138>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d306      	bcc.n	80076a4 <USB_SetTurnaroundTime+0xc4>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4a20      	ldr	r2, [pc, #128]	; (800771c <USB_SetTurnaroundTime+0x13c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d802      	bhi.n	80076a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800769e:	2308      	movs	r3, #8
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e015      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4a1d      	ldr	r2, [pc, #116]	; (800771c <USB_SetTurnaroundTime+0x13c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d906      	bls.n	80076ba <USB_SetTurnaroundTime+0xda>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <USB_SetTurnaroundTime+0x140>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d202      	bcs.n	80076ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80076b4:	2307      	movs	r3, #7
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e00a      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80076ba:	2306      	movs	r3, #6
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e007      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80076c6:	2309      	movs	r3, #9
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	e001      	b.n	80076d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076cc:	2309      	movs	r3, #9
 80076ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80076e8:	431a      	orrs	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	00d8acbf 	.word	0x00d8acbf
 8007700:	00e4e1c0 	.word	0x00e4e1c0
 8007704:	00f42400 	.word	0x00f42400
 8007708:	01067380 	.word	0x01067380
 800770c:	011a499f 	.word	0x011a499f
 8007710:	01312cff 	.word	0x01312cff
 8007714:	014ca43f 	.word	0x014ca43f
 8007718:	016e3600 	.word	0x016e3600
 800771c:	01a6ab1f 	.word	0x01a6ab1f
 8007720:	01e84800 	.word	0x01e84800

08007724 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f043 0201 	orr.w	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f023 0201 	bic.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d115      	bne.n	80077b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007796:	2001      	movs	r0, #1
 8007798:	f7f9 f850 	bl	800083c <HAL_Delay>
      ms++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f972 	bl	8008a8c <USB_GetMode>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d01e      	beq.n	80077ec <USB_SetCurrentMode+0x84>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b31      	cmp	r3, #49	; 0x31
 80077b2:	d9f0      	bls.n	8007796 <USB_SetCurrentMode+0x2e>
 80077b4:	e01a      	b.n	80077ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d115      	bne.n	80077e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077c8:	2001      	movs	r0, #1
 80077ca:	f7f9 f837 	bl	800083c <HAL_Delay>
      ms++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 f959 	bl	8008a8c <USB_GetMode>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <USB_SetCurrentMode+0x84>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b31      	cmp	r3, #49	; 0x31
 80077e4:	d9f0      	bls.n	80077c8 <USB_SetCurrentMode+0x60>
 80077e6:	e001      	b.n	80077ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e005      	b.n	80077f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b32      	cmp	r3, #50	; 0x32
 80077f0:	d101      	bne.n	80077f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007800:	b084      	sub	sp, #16
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800780e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	e009      	b.n	8007834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3340      	adds	r3, #64	; 0x40
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	2200      	movs	r2, #0
 800782c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	3301      	adds	r3, #1
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b0e      	cmp	r3, #14
 8007838:	d9f2      	bls.n	8007820 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d11c      	bne.n	800787a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800784e:	f043 0302 	orr.w	r3, r3, #2
 8007852:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
 8007878:	e00b      	b.n	8007892 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007898:	461a      	mov	r2, r3
 800789a:	2300      	movs	r3, #0
 800789c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a4:	4619      	mov	r1, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ac:	461a      	mov	r2, r3
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d10c      	bne.n	80078d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078be:	2100      	movs	r1, #0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f945 	bl	8007b50 <USB_SetDevSpeed>
 80078c6:	e008      	b.n	80078da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078c8:	2101      	movs	r1, #1
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f940 	bl	8007b50 <USB_SetDevSpeed>
 80078d0:	e003      	b.n	80078da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078d2:	2103      	movs	r1, #3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f93b 	bl	8007b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078da:	2110      	movs	r1, #16
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8f3 	bl	8007ac8 <USB_FlushTxFifo>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f90f 	bl	8007b10 <USB_FlushRxFifo>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007902:	461a      	mov	r2, r3
 8007904:	2300      	movs	r3, #0
 8007906:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	461a      	mov	r2, r3
 8007910:	2300      	movs	r3, #0
 8007912:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	461a      	mov	r2, r3
 800791c:	2300      	movs	r3, #0
 800791e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	e043      	b.n	80079ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800793c:	d118      	bne.n	8007970 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007950:	461a      	mov	r2, r3
 8007952:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e013      	b.n	8007982 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007966:	461a      	mov	r2, r3
 8007968:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	e008      	b.n	8007982 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797c:	461a      	mov	r2, r3
 800797e:	2300      	movs	r3, #0
 8007980:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a0:	461a      	mov	r2, r3
 80079a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	3301      	adds	r3, #1
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d3b7      	bcc.n	8007926 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	e043      	b.n	8007a44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d2:	d118      	bne.n	8007a06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	461a      	mov	r2, r3
 80079e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e013      	b.n	8007a18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fc:	461a      	mov	r2, r3
 80079fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	e008      	b.n	8007a18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a12:	461a      	mov	r2, r3
 8007a14:	2300      	movs	r3, #0
 8007a16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	461a      	mov	r2, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a36:	461a      	mov	r2, r3
 8007a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3301      	adds	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d3b7      	bcc.n	80079bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f043 0210 	orr.w	r2, r3, #16
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699a      	ldr	r2, [r3, #24]
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <USB_DevInit+0x2c4>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f043 0208 	orr.w	r2, r3, #8
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d107      	bne.n	8007ab4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ac0:	b004      	add	sp, #16
 8007ac2:	4770      	bx	lr
 8007ac4:	803c3800 	.word	0x803c3800

08007ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	019b      	lsls	r3, r3, #6
 8007ada:	f043 0220 	orr.w	r2, r3, #32
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	4a08      	ldr	r2, [pc, #32]	; (8007b0c <USB_FlushTxFifo+0x44>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d901      	bls.n	8007af2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e006      	b.n	8007b00 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d0f1      	beq.n	8007ae2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	00030d40 	.word	0x00030d40

08007b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2210      	movs	r2, #16
 8007b20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	4a08      	ldr	r2, [pc, #32]	; (8007b4c <USB_FlushRxFifo+0x3c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d901      	bls.n	8007b32 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e006      	b.n	8007b40 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b10      	cmp	r3, #16
 8007b3c:	d0f1      	beq.n	8007b22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	00030d40 	.word	0x00030d40

08007b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b70:	4313      	orrs	r3, r2
 8007b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b087      	sub	sp, #28
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0306 	and.w	r3, r3, #6
 8007b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]
 8007ba6:	e00a      	b.n	8007bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d002      	beq.n	8007bb4 <USB_GetDevSpeed+0x32>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b06      	cmp	r3, #6
 8007bb2:	d102      	bne.n	8007bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	75fb      	strb	r3, [r7, #23]
 8007bb8:	e001      	b.n	8007bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007bba:	230f      	movs	r3, #15
 8007bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	785b      	ldrb	r3, [r3, #1]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d13a      	bne.n	8007c5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	68f9      	ldr	r1, [r7, #12]
 8007c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c06:	4313      	orrs	r3, r2
 8007c08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d155      	bne.n	8007ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	78db      	ldrb	r3, [r3, #3]
 8007c3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	059b      	lsls	r3, r3, #22
 8007c42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c44:	4313      	orrs	r3, r2
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	e036      	b.n	8007ccc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c64:	69da      	ldr	r2, [r3, #28]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	2101      	movs	r1, #1
 8007c70:	fa01 f303 	lsl.w	r3, r1, r3
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d11a      	bne.n	8007ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	78db      	ldrb	r3, [r3, #3]
 8007cb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cb2:	430b      	orrs	r3, r1
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	0151      	lsls	r1, r2, #5
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
	...

08007cdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d161      	bne.n	8007dbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d0e:	d11f      	bne.n	8007d50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	2101      	movs	r1, #1
 8007d62:	fa01 f303 	lsl.w	r3, r1, r3
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	68f9      	ldr	r1, [r7, #12]
 8007d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d70:	4013      	ands	r3, r2
 8007d72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	2101      	movs	r1, #1
 8007d86:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d94:	4013      	ands	r3, r2
 8007d96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	0159      	lsls	r1, r3, #5
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	440b      	add	r3, r1
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	4619      	mov	r1, r3
 8007db4:	4b35      	ldr	r3, [pc, #212]	; (8007e8c <USB_DeactivateEndpoint+0x1b0>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]
 8007dba:	e060      	b.n	8007e7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd2:	d11f      	bne.n	8007e14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007df2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	2101      	movs	r1, #1
 8007e26:	fa01 f303 	lsl.w	r3, r1, r3
 8007e2a:	041b      	lsls	r3, r3, #16
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e34:	4013      	ands	r3, r2
 8007e36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	2101      	movs	r1, #1
 8007e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	43db      	mvns	r3, r3
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e58:	4013      	ands	r3, r2
 8007e5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	0159      	lsls	r1, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	440b      	add	r3, r1
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	4619      	mov	r1, r3
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <USB_DeactivateEndpoint+0x1b4>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	ec337800 	.word	0xec337800
 8007e90:	eff37800 	.word	0xeff37800

08007e94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	f040 815c 	bne.w	800816e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d132      	bne.n	8007f24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007edc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	0151      	lsls	r1, r2, #5
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	440a      	add	r2, r1
 8007ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	0151      	lsls	r1, r2, #5
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	440a      	add	r2, r1
 8007f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1c:	0cdb      	lsrs	r3, r3, #19
 8007f1e:	04db      	lsls	r3, r3, #19
 8007f20:	6113      	str	r3, [r2, #16]
 8007f22:	e074      	b.n	800800e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3e:	0cdb      	lsrs	r3, r3, #19
 8007f40:	04db      	lsls	r3, r3, #19
 8007f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6959      	ldr	r1, [r3, #20]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	440b      	add	r3, r1
 8007f80:	1e59      	subs	r1, r3, #1
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f8a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f8c:	4b9d      	ldr	r3, [pc, #628]	; (8008204 <USB_EPStartXfer+0x370>)
 8007f8e:	400b      	ands	r3, r1
 8007f90:	69b9      	ldr	r1, [r7, #24]
 8007f92:	0148      	lsls	r0, r1, #5
 8007f94:	69f9      	ldr	r1, [r7, #28]
 8007f96:	4401      	add	r1, r0
 8007f98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fac:	691a      	ldr	r2, [r3, #16]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb6:	69b9      	ldr	r1, [r7, #24]
 8007fb8:	0148      	lsls	r0, r1, #5
 8007fba:	69f9      	ldr	r1, [r7, #28]
 8007fbc:	4401      	add	r1, r0
 8007fbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	78db      	ldrb	r3, [r3, #3]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d11f      	bne.n	800800e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007fec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	0151      	lsls	r1, r2, #5
 8008000:	69fa      	ldr	r2, [r7, #28]
 8008002:	440a      	add	r2, r1
 8008004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800800c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d14b      	bne.n	80080ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d009      	beq.n	8008030 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008028:	461a      	mov	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	78db      	ldrb	r3, [r3, #3]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d128      	bne.n	800808a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008044:	2b00      	cmp	r3, #0
 8008046:	d110      	bne.n	800806a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	440a      	add	r2, r1
 800805e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	e00f      	b.n	800808a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	440a      	add	r2, r1
 8008080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008088:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e12f      	b.n	800830c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	78db      	ldrb	r3, [r3, #3]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d015      	beq.n	8008100 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8117 	beq.w	800830c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	2101      	movs	r1, #1
 80080f0:	fa01 f303 	lsl.w	r3, r1, r3
 80080f4:	69f9      	ldr	r1, [r7, #28]
 80080f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080fa:	4313      	orrs	r3, r2
 80080fc:	634b      	str	r3, [r1, #52]	; 0x34
 80080fe:	e105      	b.n	800830c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810c:	2b00      	cmp	r3, #0
 800810e:	d110      	bne.n	8008132 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800812a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	e00f      	b.n	8008152 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	0151      	lsls	r1, r2, #5
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	440a      	add	r2, r1
 8008148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800814c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008150:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	68d9      	ldr	r1, [r3, #12]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	b298      	uxth	r0, r3
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4603      	mov	r3, r0
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 fa2b 	bl	80085c2 <USB_WritePacket>
 800816c:	e0ce      	b.n	800830c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	0151      	lsls	r1, r2, #5
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	440a      	add	r2, r1
 8008184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008188:	0cdb      	lsrs	r3, r3, #19
 800818a:	04db      	lsls	r3, r3, #19
 800818c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	0151      	lsls	r1, r2, #5
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	440a      	add	r2, r1
 80081a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d126      	bne.n	8008208 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d0:	69b9      	ldr	r1, [r7, #24]
 80081d2:	0148      	lsls	r0, r1, #5
 80081d4:	69f9      	ldr	r1, [r7, #28]
 80081d6:	4401      	add	r1, r0
 80081d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081dc:	4313      	orrs	r3, r2
 80081de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	0151      	lsls	r1, r2, #5
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	440a      	add	r2, r1
 80081f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081fe:	6113      	str	r3, [r2, #16]
 8008200:	e036      	b.n	8008270 <USB_EPStartXfer+0x3dc>
 8008202:	bf00      	nop
 8008204:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	695a      	ldr	r2, [r3, #20]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	4413      	add	r3, r2
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	fbb2 f3f3 	udiv	r3, r2, r3
 800821c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	8afb      	ldrh	r3, [r7, #22]
 800822e:	04d9      	lsls	r1, r3, #19
 8008230:	4b39      	ldr	r3, [pc, #228]	; (8008318 <USB_EPStartXfer+0x484>)
 8008232:	400b      	ands	r3, r1
 8008234:	69b9      	ldr	r1, [r7, #24]
 8008236:	0148      	lsls	r0, r1, #5
 8008238:	69f9      	ldr	r1, [r7, #28]
 800823a:	4401      	add	r1, r0
 800823c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008240:	4313      	orrs	r3, r2
 8008242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	8af9      	ldrh	r1, [r7, #22]
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	0148      	lsls	r0, r1, #5
 8008264:	69f9      	ldr	r1, [r7, #28]
 8008266:	4401      	add	r1, r0
 8008268:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800826c:	4313      	orrs	r3, r2
 800826e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d10d      	bne.n	8008292 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	68d9      	ldr	r1, [r3, #12]
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	460a      	mov	r2, r1
 8008290:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	78db      	ldrb	r3, [r3, #3]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d128      	bne.n	80082ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d110      	bne.n	80082cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	e00f      	b.n	80082ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	0151      	lsls	r1, r2, #5
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	440a      	add	r2, r1
 8008302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008306:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800830a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3720      	adds	r7, #32
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	1ff80000 	.word	0x1ff80000

0800831c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	2b01      	cmp	r3, #1
 800833a:	f040 80cd 	bne.w	80084d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d132      	bne.n	80083ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	440a      	add	r2, r1
 800835c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	0151      	lsls	r1, r2, #5
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	440a      	add	r2, r1
 8008380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a4:	0cdb      	lsrs	r3, r3, #19
 80083a6:	04db      	lsls	r3, r3, #19
 80083a8:	6113      	str	r3, [r2, #16]
 80083aa:	e04e      	b.n	800844a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c6:	0cdb      	lsrs	r3, r3, #19
 80083c8:	04db      	lsls	r3, r3, #19
 80083ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	695a      	ldr	r2, [r3, #20]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d903      	bls.n	8008404 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	0151      	lsls	r1, r2, #5
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	440a      	add	r2, r1
 800841a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800841e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800843a:	6939      	ldr	r1, [r7, #16]
 800843c:	0148      	lsls	r0, r1, #5
 800843e:	6979      	ldr	r1, [r7, #20]
 8008440:	4401      	add	r1, r0
 8008442:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008446:	4313      	orrs	r3, r2
 8008448:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800844a:	79fb      	ldrb	r3, [r7, #7]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d11e      	bne.n	800848e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d009      	beq.n	800846c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	461a      	mov	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	e092      	b.n	80085b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	0151      	lsls	r1, r2, #5
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	440a      	add	r2, r1
 80084a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d07e      	beq.n	80085b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	2101      	movs	r1, #1
 80084c8:	fa01 f303 	lsl.w	r3, r1, r3
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084d2:	4313      	orrs	r3, r2
 80084d4:	634b      	str	r3, [r1, #52]	; 0x34
 80084d6:	e06d      	b.n	80085b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f2:	0cdb      	lsrs	r3, r3, #19
 80084f4:	04db      	lsls	r3, r3, #19
 80084f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	440a      	add	r2, r1
 800850e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008512:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008516:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800851a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800854a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008562:	6939      	ldr	r1, [r7, #16]
 8008564:	0148      	lsls	r0, r1, #5
 8008566:	6979      	ldr	r1, [r7, #20]
 8008568:	4401      	add	r1, r0
 800856a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800856e:	4313      	orrs	r3, r2
 8008570:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d10d      	bne.n	8008594 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d009      	beq.n	8008594 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	68d9      	ldr	r1, [r3, #12]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008590:	460a      	mov	r2, r1
 8008592:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b089      	sub	sp, #36	; 0x24
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	4611      	mov	r1, r2
 80085ce:	461a      	mov	r2, r3
 80085d0:	460b      	mov	r3, r1
 80085d2:	71fb      	strb	r3, [r7, #7]
 80085d4:	4613      	mov	r3, r2
 80085d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d123      	bne.n	8008630 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085e8:	88bb      	ldrh	r3, [r7, #4]
 80085ea:	3303      	adds	r3, #3
 80085ec:	089b      	lsrs	r3, r3, #2
 80085ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085f0:	2300      	movs	r3, #0
 80085f2:	61bb      	str	r3, [r7, #24]
 80085f4:	e018      	b.n	8008628 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	031a      	lsls	r2, r3, #12
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008602:	461a      	mov	r2, r3
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6013      	str	r3, [r2, #0]
      pSrc++;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	3301      	adds	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	3301      	adds	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	3301      	adds	r3, #1
 800861a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	3301      	adds	r3, #1
 8008620:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	3301      	adds	r3, #1
 8008626:	61bb      	str	r3, [r7, #24]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	429a      	cmp	r2, r3
 800862e:	d3e2      	bcc.n	80085f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3724      	adds	r7, #36	; 0x24
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800863e:	b480      	push	{r7}
 8008640:	b08b      	sub	sp, #44	; 0x2c
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	4613      	mov	r3, r2
 800864a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008654:	88fb      	ldrh	r3, [r7, #6]
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	b29b      	uxth	r3, r3
 800865a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800865c:	88fb      	ldrh	r3, [r7, #6]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008664:	2300      	movs	r3, #0
 8008666:	623b      	str	r3, [r7, #32]
 8008668:	e014      	b.n	8008694 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	601a      	str	r2, [r3, #0]
    pDest++;
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	3301      	adds	r3, #1
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	3301      	adds	r3, #1
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	3301      	adds	r3, #1
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	3301      	adds	r3, #1
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	3301      	adds	r3, #1
 8008692:	623b      	str	r3, [r7, #32]
 8008694:	6a3a      	ldr	r2, [r7, #32]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	429a      	cmp	r2, r3
 800869a:	d3e6      	bcc.n	800866a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800869c:	8bfb      	ldrh	r3, [r7, #30]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01e      	beq.n	80086e0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ac:	461a      	mov	r2, r3
 80086ae:	f107 0310 	add.w	r3, r7, #16
 80086b2:	6812      	ldr	r2, [r2, #0]
 80086b4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	fa22 f303 	lsr.w	r3, r2, r3
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	701a      	strb	r2, [r3, #0]
      i++;
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	3301      	adds	r3, #1
 80086cc:	623b      	str	r3, [r7, #32]
      pDest++;
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	3301      	adds	r3, #1
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80086d4:	8bfb      	ldrh	r3, [r7, #30]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086da:	8bfb      	ldrh	r3, [r7, #30]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1ea      	bne.n	80086b6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	372c      	adds	r7, #44	; 0x2c
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d12c      	bne.n	8008764 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db12      	blt.n	8008742 <USB_EPSetStall+0x54>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008740:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	440a      	add	r2, r1
 8008758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	e02b      	b.n	80087bc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	db12      	blt.n	800879c <USB_EPSetStall+0xae>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00f      	beq.n	800879c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800879a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d128      	bne.n	8008838 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008804:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	78db      	ldrb	r3, [r3, #3]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d003      	beq.n	8008816 <USB_EPClearStall+0x4c>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	78db      	ldrb	r3, [r3, #3]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d138      	bne.n	8008888 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	e027      	b.n	8008888 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	0151      	lsls	r1, r2, #5
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	440a      	add	r2, r1
 800884e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008856:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	78db      	ldrb	r3, [r3, #3]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d003      	beq.n	8008868 <USB_EPClearStall+0x9e>
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	78db      	ldrb	r3, [r3, #3]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d10f      	bne.n	8008888 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	440a      	add	r2, r1
 800887e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008886:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80088b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80088ca:	68f9      	ldr	r1, [r7, #12]
 80088cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088d0:	4313      	orrs	r3, r2
 80088d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088fc:	f023 0303 	bic.w	r3, r3, #3
 8008900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008910:	f023 0302 	bic.w	r3, r3, #2
 8008914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800893e:	f023 0303 	bic.w	r3, r3, #3
 8008942:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008952:	f043 0302 	orr.w	r3, r3, #2
 8008956:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4013      	ands	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4013      	ands	r3, r2
 80089ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	0c1b      	lsrs	r3, r3, #16
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	4013      	ands	r3, r2
 80089e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	b29b      	uxth	r3, r3
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a22:	68bb      	ldr	r3, [r7, #8]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a52:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	f003 030f 	and.w	r3, r3, #15
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a60:	01db      	lsls	r3, r3, #7
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	f003 0301 	and.w	r3, r3, #1
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ac6:	f023 0307 	bic.w	r3, r3, #7
 8008aca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ade:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	460b      	mov	r3, r1
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	333c      	adds	r3, #60	; 0x3c
 8008b06:	3304      	adds	r3, #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	4a26      	ldr	r2, [pc, #152]	; (8008ba8 <USB_EP0_OutStart+0xb8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d90a      	bls.n	8008b2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b24:	d101      	bne.n	8008b2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e037      	b.n	8008b9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b30:	461a      	mov	r2, r3
 8008b32:	2300      	movs	r3, #0
 8008b34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b58:	f043 0318 	orr.w	r3, r3, #24
 8008b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d10f      	bne.n	8008b98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	461a      	mov	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	4f54300a 	.word	0x4f54300a

08008bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	4a13      	ldr	r2, [pc, #76]	; (8008c0c <USB_CoreReset+0x60>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d901      	bls.n	8008bc8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e01a      	b.n	8008bfe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	daf3      	bge.n	8008bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f043 0201 	orr.w	r2, r3, #1
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	4a09      	ldr	r2, [pc, #36]	; (8008c0c <USB_CoreReset+0x60>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d901      	bls.n	8008bf0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e006      	b.n	8008bfe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d0f1      	beq.n	8008be0 <USB_CoreReset+0x34>

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	00030d40 	.word	0x00030d40

08008c10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c20:	f003 f92c 	bl	800be7c <USBD_static_malloc>
 8008c24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d105      	bne.n	8008c38 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008c34:	2302      	movs	r3, #2
 8008c36:	e066      	b.n	8008d06 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7c1b      	ldrb	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d119      	bne.n	8008c7c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	2181      	movs	r1, #129	; 0x81
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f002 fff0 	bl	800bc36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c60:	2202      	movs	r2, #2
 8008c62:	2101      	movs	r1, #1
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f002 ffe6 	bl	800bc36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2210      	movs	r2, #16
 8008c76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008c7a:	e016      	b.n	8008caa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c7c:	2340      	movs	r3, #64	; 0x40
 8008c7e:	2202      	movs	r2, #2
 8008c80:	2181      	movs	r1, #129	; 0x81
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f002 ffd7 	bl	800bc36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	2202      	movs	r2, #2
 8008c92:	2101      	movs	r1, #1
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f002 ffce 	bl	800bc36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008caa:	2308      	movs	r3, #8
 8008cac:	2203      	movs	r2, #3
 8008cae:	2182      	movs	r1, #130	; 0x82
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f002 ffc0 	bl	800bc36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	7c1b      	ldrb	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cea:	2101      	movs	r1, #1
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f003 f891 	bl	800be14 <USBD_LL_PrepareReceive>
 8008cf2:	e007      	b.n	8008d04 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cfa:	2340      	movs	r3, #64	; 0x40
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f003 f888 	bl	800be14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d1a:	2181      	movs	r1, #129	; 0x81
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f002 ffb0 	bl	800bc82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d28:	2101      	movs	r1, #1
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f002 ffa9 	bl	800bc82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d38:	2182      	movs	r1, #130	; 0x82
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f002 ffa1 	bl	800bc82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00e      	beq.n	8008d78 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f003 f894 	bl	800be98 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e0af      	b.n	8008f0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d03f      	beq.n	8008e38 <USBD_CDC_Setup+0xb4>
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	f040 809f 	bne.w	8008efc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d02e      	beq.n	8008e24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b25b      	sxtb	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da16      	bge.n	8008dfe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008ddc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	88d2      	ldrh	r2, [r2, #6]
 8008de2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	2b07      	cmp	r3, #7
 8008dea:	bf28      	it	cs
 8008dec:	2307      	movcs	r3, #7
 8008dee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	89fa      	ldrh	r2, [r7, #14]
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f001 fae9 	bl	800a3ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008dfc:	e085      	b.n	8008f0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	785a      	ldrb	r2, [r3, #1]
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	88db      	ldrh	r3, [r3, #6]
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008e14:	6939      	ldr	r1, [r7, #16]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	88db      	ldrh	r3, [r3, #6]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 fb02 	bl	800a426 <USBD_CtlPrepareRx>
      break;
 8008e22:	e072      	b.n	8008f0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	7850      	ldrb	r0, [r2, #1]
 8008e30:	2200      	movs	r2, #0
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	4798      	blx	r3
      break;
 8008e36:	e068      	b.n	8008f0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	2b0b      	cmp	r3, #11
 8008e3e:	d852      	bhi.n	8008ee6 <USBD_CDC_Setup+0x162>
 8008e40:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <USBD_CDC_Setup+0xc4>)
 8008e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e46:	bf00      	nop
 8008e48:	08008e79 	.word	0x08008e79
 8008e4c:	08008ef5 	.word	0x08008ef5
 8008e50:	08008ee7 	.word	0x08008ee7
 8008e54:	08008ee7 	.word	0x08008ee7
 8008e58:	08008ee7 	.word	0x08008ee7
 8008e5c:	08008ee7 	.word	0x08008ee7
 8008e60:	08008ee7 	.word	0x08008ee7
 8008e64:	08008ee7 	.word	0x08008ee7
 8008e68:	08008ee7 	.word	0x08008ee7
 8008e6c:	08008ee7 	.word	0x08008ee7
 8008e70:	08008ea3 	.word	0x08008ea3
 8008e74:	08008ecd 	.word	0x08008ecd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d107      	bne.n	8008e94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e84:	f107 030a 	add.w	r3, r7, #10
 8008e88:	2202      	movs	r2, #2
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 fa9e 	bl	800a3ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e92:	e032      	b.n	8008efa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fa28 	bl	800a2ec <USBD_CtlError>
            ret = USBD_FAIL;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8008ea0:	e02b      	b.n	8008efa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d107      	bne.n	8008ebe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008eae:	f107 030d 	add.w	r3, r7, #13
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 fa89 	bl	800a3ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ebc:	e01d      	b.n	8008efa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 fa13 	bl	800a2ec <USBD_CtlError>
            ret = USBD_FAIL;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8008eca:	e016      	b.n	8008efa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d00f      	beq.n	8008ef8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fa06 	bl	800a2ec <USBD_CtlError>
            ret = USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ee4:	e008      	b.n	8008ef8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 f9ff 	bl	800a2ec <USBD_CtlError>
          ret = USBD_FAIL;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef2:	e002      	b.n	8008efa <USBD_CDC_Setup+0x176>
          break;
 8008ef4:	bf00      	nop
 8008ef6:	e008      	b.n	8008f0a <USBD_CDC_Setup+0x186>
          break;
 8008ef8:	bf00      	nop
      }
      break;
 8008efa:	e006      	b.n	8008f0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 f9f4 	bl	800a2ec <USBD_CtlError>
      ret = USBD_FAIL;
 8008f04:	2303      	movs	r3, #3
 8008f06:	75fb      	strb	r3, [r7, #23]
      break;
 8008f08:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e04f      	b.n	8008fd6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	440b      	add	r3, r1
 8008f4c:	3318      	adds	r3, #24
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d029      	beq.n	8008fa8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	3318      	adds	r3, #24
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	78f9      	ldrb	r1, [r7, #3]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	1a5b      	subs	r3, r3, r1
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4403      	add	r3, r0
 8008f74:	3344      	adds	r3, #68	; 0x44
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f7c:	fb03 f301 	mul.w	r3, r3, r1
 8008f80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d110      	bne.n	8008fa8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	3318      	adds	r3, #24
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f9a:	78f9      	ldrb	r1, [r7, #3]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f002 ff16 	bl	800bdd2 <USBD_LL_Transmit>
 8008fa6:	e015      	b.n	8008fd4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e015      	b.n	800902c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f002 ff26 	bl	800be56 <USBD_LL_GetRxDataSize>
 800900a:	4602      	mov	r2, r0
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009026:	4611      	mov	r1, r2
 8009028:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009042:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800904a:	2303      	movs	r3, #3
 800904c:	e01b      	b.n	8009086 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d015      	beq.n	8009084 <USBD_CDC_EP0_RxReady+0x50>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800905e:	2bff      	cmp	r3, #255	; 0xff
 8009060:	d010      	beq.n	8009084 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009070:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009078:	b292      	uxth	r2, r2
 800907a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	22ff      	movs	r2, #255	; 0xff
 8009080:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2243      	movs	r2, #67	; 0x43
 800909c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800909e:	4b03      	ldr	r3, [pc, #12]	; (80090ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	20000090 	.word	0x20000090

080090b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2243      	movs	r2, #67	; 0x43
 80090bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80090be:	4b03      	ldr	r3, [pc, #12]	; (80090cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	2000004c 	.word	0x2000004c

080090d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2243      	movs	r2, #67	; 0x43
 80090dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	200000d4 	.word	0x200000d4

080090f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	220a      	movs	r2, #10
 80090fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090fe:	4b03      	ldr	r3, [pc, #12]	; (800910c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	20000008 	.word	0x20000008

08009110 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009120:	2303      	movs	r3, #3
 8009122:	e004      	b.n	800912e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800913a:	b480      	push	{r7}
 800913c:	b087      	sub	sp, #28
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800914c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	e008      	b.n	800916a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009186:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800918e:	2303      	movs	r3, #3
 8009190:	e004      	b.n	800919c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e016      	b.n	80091f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7c1b      	ldrb	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d8:	2101      	movs	r1, #1
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f002 fe1a 	bl	800be14 <USBD_LL_PrepareReceive>
 80091e0:	e007      	b.n	80091f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091e8:	2340      	movs	r3, #64	; 0x40
 80091ea:	2101      	movs	r1, #1
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f002 fe11 	bl	800be14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009210:	2303      	movs	r3, #3
 8009212:	e01f      	b.n	8009254 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	79fa      	ldrb	r2, [r7, #7]
 8009246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f002 fc8d 	bl	800bb68 <USBD_LL_Init>
 800924e:	4603      	mov	r3, r0
 8009250:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009252:	7dfb      	ldrb	r3, [r7, #23]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e016      	b.n	80092a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009290:	f107 020e 	add.w	r2, r7, #14
 8009294:	4610      	mov	r0, r2
 8009296:	4798      	blx	r3
 8009298:	4602      	mov	r2, r0
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f002 fca4 	bl	800bc00 <USBD_LL_Start>
 80092b8:	4603      	mov	r3, r0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092e4:	2303      	movs	r3, #3
 80092e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	4611      	mov	r1, r2
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009322:	2b00      	cmp	r3, #0
 8009324:	d007      	beq.n	8009336 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	4611      	mov	r1, r2
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
  }

  return USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 ff90 	bl	800a278 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009366:	461a      	mov	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009374:	f003 031f 	and.w	r3, r3, #31
 8009378:	2b02      	cmp	r3, #2
 800937a:	d01a      	beq.n	80093b2 <USBD_LL_SetupStage+0x72>
 800937c:	2b02      	cmp	r3, #2
 800937e:	d822      	bhi.n	80093c6 <USBD_LL_SetupStage+0x86>
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <USBD_LL_SetupStage+0x4a>
 8009384:	2b01      	cmp	r3, #1
 8009386:	d00a      	beq.n	800939e <USBD_LL_SetupStage+0x5e>
 8009388:	e01d      	b.n	80093c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa62 	bl	800985c <USBD_StdDevReq>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
      break;
 800939c:	e020      	b.n	80093e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fac6 	bl	8009938 <USBD_StdItfReq>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
      break;
 80093b0:	e016      	b.n	80093e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fb05 	bl	80099ca <USBD_StdEPReq>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]
      break;
 80093c4:	e00c      	b.n	80093e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f002 fc73 	bl	800bcc0 <USBD_LL_StallEP>
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]
      break;
 80093de:	bf00      	nop
  }

  return ret;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b086      	sub	sp, #24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	460b      	mov	r3, r1
 80093f4:	607a      	str	r2, [r7, #4]
 80093f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d138      	bne.n	8009470 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009404:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800940c:	2b03      	cmp	r3, #3
 800940e:	d14a      	bne.n	80094a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	429a      	cmp	r2, r3
 800941a:	d913      	bls.n	8009444 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	1ad2      	subs	r2, r2, r3
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	4293      	cmp	r3, r2
 8009434:	bf28      	it	cs
 8009436:	4613      	movcs	r3, r2
 8009438:	461a      	mov	r2, r3
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f001 f80f 	bl	800a460 <USBD_CtlContinueRx>
 8009442:	e030      	b.n	80094a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b03      	cmp	r3, #3
 800944e:	d10b      	bne.n	8009468 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f001 f80a 	bl	800a482 <USBD_CtlSendStatus>
 800946e:	e01a      	b.n	80094a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b03      	cmp	r3, #3
 800947a:	d114      	bne.n	80094a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	7afa      	ldrb	r2, [r7, #11]
 8009492:	4611      	mov	r1, r2
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	4798      	blx	r3
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	e000      	b.n	80094a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	460b      	mov	r3, r1
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094be:	7afb      	ldrb	r3, [r7, #11]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d16b      	bne.n	800959c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3314      	adds	r3, #20
 80094c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d156      	bne.n	8009582 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d914      	bls.n	800950a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	1ad2      	subs	r2, r2, r3
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 ff84 	bl	800a404 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094fc:	2300      	movs	r3, #0
 80094fe:	2200      	movs	r2, #0
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f002 fc86 	bl	800be14 <USBD_LL_PrepareReceive>
 8009508:	e03b      	b.n	8009582 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	429a      	cmp	r2, r3
 8009514:	d11c      	bne.n	8009550 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800951e:	429a      	cmp	r2, r3
 8009520:	d316      	bcc.n	8009550 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800952c:	429a      	cmp	r2, r3
 800952e:	d20f      	bcs.n	8009550 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009530:	2200      	movs	r2, #0
 8009532:	2100      	movs	r1, #0
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 ff65 	bl	800a404 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009542:	2300      	movs	r3, #0
 8009544:	2200      	movs	r2, #0
 8009546:	2100      	movs	r1, #0
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f002 fc63 	bl	800be14 <USBD_LL_PrepareReceive>
 800954e:	e018      	b.n	8009582 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b03      	cmp	r3, #3
 800955a:	d10b      	bne.n	8009574 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d005      	beq.n	8009574 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009574:	2180      	movs	r1, #128	; 0x80
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f002 fba2 	bl	800bcc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 ff93 	bl	800a4a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009588:	2b01      	cmp	r3, #1
 800958a:	d122      	bne.n	80095d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f7ff fe98 	bl	80092c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800959a:	e01a      	b.n	80095d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d114      	bne.n	80095d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00e      	beq.n	80095d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	7afa      	ldrb	r2, [r7, #11]
 80095be:	4611      	mov	r1, r2
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	4798      	blx	r3
 80095c4:	4603      	mov	r3, r0
 80095c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	e000      	b.n	80095d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	e02f      	b.n	8009670 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00f      	beq.n	800963a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	6852      	ldr	r2, [r2, #4]
 8009632:	b2d2      	uxtb	r2, r2
 8009634:	4611      	mov	r1, r2
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800963a:	2340      	movs	r3, #64	; 0x40
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f002 faf8 	bl	800bc36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2240      	movs	r2, #64	; 0x40
 8009652:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009656:	2340      	movs	r3, #64	; 0x40
 8009658:	2200      	movs	r2, #0
 800965a:	2180      	movs	r1, #128	; 0x80
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f002 faea 	bl	800bc36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2240      	movs	r2, #64	; 0x40
 800966c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2204      	movs	r2, #4
 80096b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d106      	bne.n	80096e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009706:	2303      	movs	r3, #3
 8009708:	e012      	b.n	8009730 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b03      	cmp	r3, #3
 8009714:	d10b      	bne.n	800972e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d005      	beq.n	800972e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800974e:	2303      	movs	r3, #3
 8009750:	e014      	b.n	800977c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b03      	cmp	r3, #3
 800975c:	d10d      	bne.n	800977a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	4611      	mov	r1, r2
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800979a:	2303      	movs	r3, #3
 800979c:	e014      	b.n	80097c8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d10d      	bne.n	80097c6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d007      	beq.n	80097c6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	4611      	mov	r1, r2
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d009      	beq.n	8009814 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6852      	ldr	r2, [r2, #4]
 800980c:	b2d2      	uxtb	r2, r2
 800980e:	4611      	mov	r1, r2
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
  }

  return USBD_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800981e:	b480      	push	{r7}
 8009820:	b087      	sub	sp, #28
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	3301      	adds	r3, #1
 8009834:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800983c:	8a3b      	ldrh	r3, [r7, #16]
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	b21a      	sxth	r2, r3
 8009842:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009846:	4313      	orrs	r3, r2
 8009848:	b21b      	sxth	r3, r3
 800984a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800984c:	89fb      	ldrh	r3, [r7, #14]
}
 800984e:	4618      	mov	r0, r3
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
	...

0800985c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	d005      	beq.n	8009882 <USBD_StdDevReq+0x26>
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	d853      	bhi.n	8009922 <USBD_StdDevReq+0xc6>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00b      	beq.n	8009896 <USBD_StdDevReq+0x3a>
 800987e:	2b20      	cmp	r3, #32
 8009880:	d14f      	bne.n	8009922 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]
      break;
 8009894:	e04a      	b.n	800992c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	785b      	ldrb	r3, [r3, #1]
 800989a:	2b09      	cmp	r3, #9
 800989c:	d83b      	bhi.n	8009916 <USBD_StdDevReq+0xba>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <USBD_StdDevReq+0x48>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098f9 	.word	0x080098f9
 80098a8:	0800990d 	.word	0x0800990d
 80098ac:	08009917 	.word	0x08009917
 80098b0:	08009903 	.word	0x08009903
 80098b4:	08009917 	.word	0x08009917
 80098b8:	080098d7 	.word	0x080098d7
 80098bc:	080098cd 	.word	0x080098cd
 80098c0:	08009917 	.word	0x08009917
 80098c4:	080098ef 	.word	0x080098ef
 80098c8:	080098e1 	.word	0x080098e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f9de 	bl	8009c90 <USBD_GetDescriptor>
          break;
 80098d4:	e024      	b.n	8009920 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fb43 	bl	8009f64 <USBD_SetAddress>
          break;
 80098de:	e01f      	b.n	8009920 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fb82 	bl	8009fec <USBD_SetConfig>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
          break;
 80098ec:	e018      	b.n	8009920 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fc21 	bl	800a138 <USBD_GetConfig>
          break;
 80098f6:	e013      	b.n	8009920 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fc52 	bl	800a1a4 <USBD_GetStatus>
          break;
 8009900:	e00e      	b.n	8009920 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fc81 	bl	800a20c <USBD_SetFeature>
          break;
 800990a:	e009      	b.n	8009920 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fc90 	bl	800a234 <USBD_ClrFeature>
          break;
 8009914:	e004      	b.n	8009920 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fce7 	bl	800a2ec <USBD_CtlError>
          break;
 800991e:	bf00      	nop
      }
      break;
 8009920:	e004      	b.n	800992c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fce1 	bl	800a2ec <USBD_CtlError>
      break;
 800992a:	bf00      	nop
  }

  return ret;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop

08009938 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800994e:	2b40      	cmp	r3, #64	; 0x40
 8009950:	d005      	beq.n	800995e <USBD_StdItfReq+0x26>
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d82f      	bhi.n	80099b6 <USBD_StdItfReq+0x7e>
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <USBD_StdItfReq+0x26>
 800995a:	2b20      	cmp	r3, #32
 800995c:	d12b      	bne.n	80099b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009964:	b2db      	uxtb	r3, r3
 8009966:	3b01      	subs	r3, #1
 8009968:	2b02      	cmp	r3, #2
 800996a:	d81d      	bhi.n	80099a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	889b      	ldrh	r3, [r3, #4]
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b01      	cmp	r3, #1
 8009974:	d813      	bhi.n	800999e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
 8009984:	4603      	mov	r3, r0
 8009986:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	88db      	ldrh	r3, [r3, #6]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d110      	bne.n	80099b2 <USBD_StdItfReq+0x7a>
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10d      	bne.n	80099b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fd73 	bl	800a482 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800999c:	e009      	b.n	80099b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fca3 	bl	800a2ec <USBD_CtlError>
          break;
 80099a6:	e004      	b.n	80099b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fc9e 	bl	800a2ec <USBD_CtlError>
          break;
 80099b0:	e000      	b.n	80099b4 <USBD_StdItfReq+0x7c>
          break;
 80099b2:	bf00      	nop
      }
      break;
 80099b4:	e004      	b.n	80099c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fc97 	bl	800a2ec <USBD_CtlError>
      break;
 80099be:	bf00      	nop
  }

  return ret;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	889b      	ldrh	r3, [r3, #4]
 80099dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d007      	beq.n	80099fa <USBD_StdEPReq+0x30>
 80099ea:	2b40      	cmp	r3, #64	; 0x40
 80099ec:	f200 8145 	bhi.w	8009c7a <USBD_StdEPReq+0x2b0>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00c      	beq.n	8009a0e <USBD_StdEPReq+0x44>
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	f040 8140 	bne.w	8009c7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a0c:	e13a      	b.n	8009c84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d007      	beq.n	8009a26 <USBD_StdEPReq+0x5c>
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	f300 8129 	bgt.w	8009c6e <USBD_StdEPReq+0x2a4>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d07f      	beq.n	8009b20 <USBD_StdEPReq+0x156>
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d03c      	beq.n	8009a9e <USBD_StdEPReq+0xd4>
 8009a24:	e123      	b.n	8009c6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d002      	beq.n	8009a38 <USBD_StdEPReq+0x6e>
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d016      	beq.n	8009a64 <USBD_StdEPReq+0x9a>
 8009a36:	e02c      	b.n	8009a92 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00d      	beq.n	8009a5a <USBD_StdEPReq+0x90>
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	2b80      	cmp	r3, #128	; 0x80
 8009a42:	d00a      	beq.n	8009a5a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f002 f939 	bl	800bcc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a4e:	2180      	movs	r1, #128	; 0x80
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f002 f935 	bl	800bcc0 <USBD_LL_StallEP>
 8009a56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a58:	e020      	b.n	8009a9c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fc45 	bl	800a2ec <USBD_CtlError>
              break;
 8009a62:	e01b      	b.n	8009a9c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	885b      	ldrh	r3, [r3, #2]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10e      	bne.n	8009a8a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00b      	beq.n	8009a8a <USBD_StdEPReq+0xc0>
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b80      	cmp	r3, #128	; 0x80
 8009a76:	d008      	beq.n	8009a8a <USBD_StdEPReq+0xc0>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	88db      	ldrh	r3, [r3, #6]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f002 f91b 	bl	800bcc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fcf9 	bl	800a482 <USBD_CtlSendStatus>

              break;
 8009a90:	e004      	b.n	8009a9c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc29 	bl	800a2ec <USBD_CtlError>
              break;
 8009a9a:	bf00      	nop
          }
          break;
 8009a9c:	e0ec      	b.n	8009c78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d002      	beq.n	8009ab0 <USBD_StdEPReq+0xe6>
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d016      	beq.n	8009adc <USBD_StdEPReq+0x112>
 8009aae:	e030      	b.n	8009b12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00d      	beq.n	8009ad2 <USBD_StdEPReq+0x108>
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	2b80      	cmp	r3, #128	; 0x80
 8009aba:	d00a      	beq.n	8009ad2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f002 f8fd 	bl	800bcc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ac6:	2180      	movs	r1, #128	; 0x80
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f002 f8f9 	bl	800bcc0 <USBD_LL_StallEP>
 8009ace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ad0:	e025      	b.n	8009b1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fc09 	bl	800a2ec <USBD_CtlError>
              break;
 8009ada:	e020      	b.n	8009b1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	885b      	ldrh	r3, [r3, #2]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d11b      	bne.n	8009b1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d004      	beq.n	8009af8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f002 f903 	bl	800bcfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fcc2 	bl	800a482 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	4798      	blx	r3
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009b10:	e004      	b.n	8009b1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fbe9 	bl	800a2ec <USBD_CtlError>
              break;
 8009b1a:	e000      	b.n	8009b1e <USBD_StdEPReq+0x154>
              break;
 8009b1c:	bf00      	nop
          }
          break;
 8009b1e:	e0ab      	b.n	8009c78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d002      	beq.n	8009b32 <USBD_StdEPReq+0x168>
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d032      	beq.n	8009b96 <USBD_StdEPReq+0x1cc>
 8009b30:	e097      	b.n	8009c62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d007      	beq.n	8009b48 <USBD_StdEPReq+0x17e>
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	2b80      	cmp	r3, #128	; 0x80
 8009b3c:	d004      	beq.n	8009b48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fbd3 	bl	800a2ec <USBD_CtlError>
                break;
 8009b46:	e091      	b.n	8009c6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	da0b      	bge.n	8009b68 <USBD_StdEPReq+0x19e>
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	3310      	adds	r3, #16
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	4413      	add	r3, r2
 8009b64:	3304      	adds	r3, #4
 8009b66:	e00b      	b.n	8009b80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b6e:	4613      	mov	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	3304      	adds	r3, #4
 8009b80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fc1d 	bl	800a3ce <USBD_CtlSendData>
              break;
 8009b94:	e06a      	b.n	8009c6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	da11      	bge.n	8009bc2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	f003 020f 	and.w	r2, r3, #15
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	440b      	add	r3, r1
 8009bb0:	3324      	adds	r3, #36	; 0x24
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d117      	bne.n	8009be8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fb96 	bl	800a2ec <USBD_CtlError>
                  break;
 8009bc0:	e054      	b.n	8009c6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	f003 020f 	and.w	r2, r3, #15
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d104      	bne.n	8009be8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fb83 	bl	800a2ec <USBD_CtlError>
                  break;
 8009be6:	e041      	b.n	8009c6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	da0b      	bge.n	8009c08 <USBD_StdEPReq+0x23e>
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	3310      	adds	r3, #16
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	4413      	add	r3, r2
 8009c04:	3304      	adds	r3, #4
 8009c06:	e00b      	b.n	8009c20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	3304      	adds	r3, #4
 8009c20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <USBD_StdEPReq+0x264>
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
 8009c2a:	2b80      	cmp	r3, #128	; 0x80
 8009c2c:	d103      	bne.n	8009c36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2200      	movs	r2, #0
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	e00e      	b.n	8009c54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f002 f87e 	bl	800bd3c <USBD_LL_IsStallEP>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	e002      	b.n	8009c54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2200      	movs	r2, #0
 8009c52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2202      	movs	r2, #2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fbb7 	bl	800a3ce <USBD_CtlSendData>
              break;
 8009c60:	e004      	b.n	8009c6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fb41 	bl	800a2ec <USBD_CtlError>
              break;
 8009c6a:	bf00      	nop
          }
          break;
 8009c6c:	e004      	b.n	8009c78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fb3b 	bl	800a2ec <USBD_CtlError>
          break;
 8009c76:	bf00      	nop
      }
      break;
 8009c78:	e004      	b.n	8009c84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fb35 	bl	800a2ec <USBD_CtlError>
      break;
 8009c82:	bf00      	nop
  }

  return ret;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	885b      	ldrh	r3, [r3, #2]
 8009caa:	0a1b      	lsrs	r3, r3, #8
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b06      	cmp	r3, #6
 8009cb2:	f200 8128 	bhi.w	8009f06 <USBD_GetDescriptor+0x276>
 8009cb6:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <USBD_GetDescriptor+0x2c>)
 8009cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbc:	08009cd9 	.word	0x08009cd9
 8009cc0:	08009cf1 	.word	0x08009cf1
 8009cc4:	08009d31 	.word	0x08009d31
 8009cc8:	08009f07 	.word	0x08009f07
 8009ccc:	08009f07 	.word	0x08009f07
 8009cd0:	08009ea7 	.word	0x08009ea7
 8009cd4:	08009ed3 	.word	0x08009ed3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
      break;
 8009cee:	e112      	b.n	8009f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7c1b      	ldrb	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10d      	bne.n	8009d14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d00:	f107 0208 	add.w	r2, r7, #8
 8009d04:	4610      	mov	r0, r2
 8009d06:	4798      	blx	r3
 8009d08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	2202      	movs	r2, #2
 8009d10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d12:	e100      	b.n	8009f16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	f107 0208 	add.w	r2, r7, #8
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	701a      	strb	r2, [r3, #0]
      break;
 8009d2e:	e0f2      	b.n	8009f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	885b      	ldrh	r3, [r3, #2]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b05      	cmp	r3, #5
 8009d38:	f200 80ac 	bhi.w	8009e94 <USBD_GetDescriptor+0x204>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <USBD_GetDescriptor+0xb4>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009d5d 	.word	0x08009d5d
 8009d48:	08009d91 	.word	0x08009d91
 8009d4c:	08009dc5 	.word	0x08009dc5
 8009d50:	08009df9 	.word	0x08009df9
 8009d54:	08009e2d 	.word	0x08009e2d
 8009d58:	08009e61 	.word	0x08009e61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00b      	beq.n	8009d80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	7c12      	ldrb	r2, [r2, #16]
 8009d74:	f107 0108 	add.w	r1, r7, #8
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4798      	blx	r3
 8009d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d7e:	e091      	b.n	8009ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fab2 	bl	800a2ec <USBD_CtlError>
            err++;
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d8e:	e089      	b.n	8009ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	7c12      	ldrb	r2, [r2, #16]
 8009da8:	f107 0108 	add.w	r1, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009db2:	e077      	b.n	8009ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fa98 	bl	800a2ec <USBD_CtlError>
            err++;
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009dc2:	e06f      	b.n	8009ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00b      	beq.n	8009de8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	7c12      	ldrb	r2, [r2, #16]
 8009ddc:	f107 0108 	add.w	r1, r7, #8
 8009de0:	4610      	mov	r0, r2
 8009de2:	4798      	blx	r3
 8009de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009de6:	e05d      	b.n	8009ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fa7e 	bl	800a2ec <USBD_CtlError>
            err++;
 8009df0:	7afb      	ldrb	r3, [r7, #11]
 8009df2:	3301      	adds	r3, #1
 8009df4:	72fb      	strb	r3, [r7, #11]
          break;
 8009df6:	e055      	b.n	8009ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	7c12      	ldrb	r2, [r2, #16]
 8009e10:	f107 0108 	add.w	r1, r7, #8
 8009e14:	4610      	mov	r0, r2
 8009e16:	4798      	blx	r3
 8009e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e1a:	e043      	b.n	8009ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fa64 	bl	800a2ec <USBD_CtlError>
            err++;
 8009e24:	7afb      	ldrb	r3, [r7, #11]
 8009e26:	3301      	adds	r3, #1
 8009e28:	72fb      	strb	r3, [r7, #11]
          break;
 8009e2a:	e03b      	b.n	8009ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00b      	beq.n	8009e50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	7c12      	ldrb	r2, [r2, #16]
 8009e44:	f107 0108 	add.w	r1, r7, #8
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4798      	blx	r3
 8009e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e4e:	e029      	b.n	8009ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fa4a 	bl	800a2ec <USBD_CtlError>
            err++;
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e5e:	e021      	b.n	8009ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00b      	beq.n	8009e84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7c12      	ldrb	r2, [r2, #16]
 8009e78:	f107 0108 	add.w	r1, r7, #8
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
 8009e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e82:	e00f      	b.n	8009ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa30 	bl	800a2ec <USBD_CtlError>
            err++;
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	72fb      	strb	r3, [r7, #11]
          break;
 8009e92:	e007      	b.n	8009ea4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fa28 	bl	800a2ec <USBD_CtlError>
          err++;
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009ea2:	bf00      	nop
      }
      break;
 8009ea4:	e037      	b.n	8009f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	7c1b      	ldrb	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb6:	f107 0208 	add.w	r2, r7, #8
 8009eba:	4610      	mov	r0, r2
 8009ebc:	4798      	blx	r3
 8009ebe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ec0:	e029      	b.n	8009f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fa11 	bl	800a2ec <USBD_CtlError>
        err++;
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	72fb      	strb	r3, [r7, #11]
      break;
 8009ed0:	e021      	b.n	8009f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7c1b      	ldrb	r3, [r3, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10d      	bne.n	8009ef6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee2:	f107 0208 	add.w	r2, r7, #8
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	4798      	blx	r3
 8009eea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	2207      	movs	r2, #7
 8009ef2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ef4:	e00f      	b.n	8009f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f9f7 	bl	800a2ec <USBD_CtlError>
        err++;
 8009efe:	7afb      	ldrb	r3, [r7, #11]
 8009f00:	3301      	adds	r3, #1
 8009f02:	72fb      	strb	r3, [r7, #11]
      break;
 8009f04:	e007      	b.n	8009f16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f9ef 	bl	800a2ec <USBD_CtlError>
      err++;
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	3301      	adds	r3, #1
 8009f12:	72fb      	strb	r3, [r7, #11]
      break;
 8009f14:	bf00      	nop
  }

  if (err != 0U)
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d11e      	bne.n	8009f5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	88db      	ldrh	r3, [r3, #6]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d016      	beq.n	8009f52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f24:	893b      	ldrh	r3, [r7, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00e      	beq.n	8009f48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	88da      	ldrh	r2, [r3, #6]
 8009f2e:	893b      	ldrh	r3, [r7, #8]
 8009f30:	4293      	cmp	r3, r2
 8009f32:	bf28      	it	cs
 8009f34:	4613      	movcs	r3, r2
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f3a:	893b      	ldrh	r3, [r7, #8]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	68f9      	ldr	r1, [r7, #12]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fa44 	bl	800a3ce <USBD_CtlSendData>
 8009f46:	e009      	b.n	8009f5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f9ce 	bl	800a2ec <USBD_CtlError>
 8009f50:	e004      	b.n	8009f5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fa95 	bl	800a482 <USBD_CtlSendStatus>
 8009f58:	e000      	b.n	8009f5c <USBD_GetDescriptor+0x2cc>
    return;
 8009f5a:	bf00      	nop
  }
}
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop

08009f64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	889b      	ldrh	r3, [r3, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d131      	bne.n	8009fda <USBD_SetAddress+0x76>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88db      	ldrh	r3, [r3, #6]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d12d      	bne.n	8009fda <USBD_SetAddress+0x76>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	885b      	ldrh	r3, [r3, #2]
 8009f82:	2b7f      	cmp	r3, #127	; 0x7f
 8009f84:	d829      	bhi.n	8009fda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	885b      	ldrh	r3, [r3, #2]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d104      	bne.n	8009fa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9a3 	bl	800a2ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa6:	e01d      	b.n	8009fe4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7bfa      	ldrb	r2, [r7, #15]
 8009fac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 feed 	bl	800bd94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa61 	bl	800a482 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d004      	beq.n	8009fd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fce:	e009      	b.n	8009fe4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd8:	e004      	b.n	8009fe4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f985 	bl	800a2ec <USBD_CtlError>
  }
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	885b      	ldrh	r3, [r3, #2]
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	4b4c      	ldr	r3, [pc, #304]	; (800a134 <USBD_SetConfig+0x148>)
 800a002:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a004:	4b4b      	ldr	r3, [pc, #300]	; (800a134 <USBD_SetConfig+0x148>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d905      	bls.n	800a018 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f96c 	bl	800a2ec <USBD_CtlError>
    return USBD_FAIL;
 800a014:	2303      	movs	r3, #3
 800a016:	e088      	b.n	800a12a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b02      	cmp	r3, #2
 800a022:	d002      	beq.n	800a02a <USBD_SetConfig+0x3e>
 800a024:	2b03      	cmp	r3, #3
 800a026:	d025      	beq.n	800a074 <USBD_SetConfig+0x88>
 800a028:	e071      	b.n	800a10e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a02a:	4b42      	ldr	r3, [pc, #264]	; (800a134 <USBD_SetConfig+0x148>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d01c      	beq.n	800a06c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a032:	4b40      	ldr	r3, [pc, #256]	; (800a134 <USBD_SetConfig+0x148>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a03c:	4b3d      	ldr	r3, [pc, #244]	; (800a134 <USBD_SetConfig+0x148>)
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff f948 	bl	80092d8 <USBD_SetClassConfig>
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d004      	beq.n	800a05c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f949 	bl	800a2ec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a05a:	e065      	b.n	800a128 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fa10 	bl	800a482 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2203      	movs	r2, #3
 800a066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a06a:	e05d      	b.n	800a128 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa08 	bl	800a482 <USBD_CtlSendStatus>
      break;
 800a072:	e059      	b.n	800a128 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a074:	4b2f      	ldr	r3, [pc, #188]	; (800a134 <USBD_SetConfig+0x148>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d112      	bne.n	800a0a2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a084:	4b2b      	ldr	r3, [pc, #172]	; (800a134 <USBD_SetConfig+0x148>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a08e:	4b29      	ldr	r3, [pc, #164]	; (800a134 <USBD_SetConfig+0x148>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff f93b 	bl	8009310 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f9f1 	bl	800a482 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0a0:	e042      	b.n	800a128 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <USBD_SetConfig+0x148>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d02a      	beq.n	800a106 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff f929 	bl	8009310 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0be:	4b1d      	ldr	r3, [pc, #116]	; (800a134 <USBD_SetConfig+0x148>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0c8:	4b1a      	ldr	r3, [pc, #104]	; (800a134 <USBD_SetConfig+0x148>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff f902 	bl	80092d8 <USBD_SetClassConfig>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00f      	beq.n	800a0fe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f903 	bl	800a2ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff f90e 	bl	8009310 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0fc:	e014      	b.n	800a128 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f9bf 	bl	800a482 <USBD_CtlSendStatus>
      break;
 800a104:	e010      	b.n	800a128 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f9bb 	bl	800a482 <USBD_CtlSendStatus>
      break;
 800a10c:	e00c      	b.n	800a128 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f8eb 	bl	800a2ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a116:	4b07      	ldr	r3, [pc, #28]	; (800a134 <USBD_SetConfig+0x148>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff f8f7 	bl	8009310 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a122:	2303      	movs	r3, #3
 800a124:	73fb      	strb	r3, [r7, #15]
      break;
 800a126:	bf00      	nop
  }

  return ret;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	2000019c 	.word	0x2000019c

0800a138 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	88db      	ldrh	r3, [r3, #6]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d004      	beq.n	800a154 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f8cd 	bl	800a2ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a152:	e023      	b.n	800a19c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	dc02      	bgt.n	800a166 <USBD_GetConfig+0x2e>
 800a160:	2b00      	cmp	r3, #0
 800a162:	dc03      	bgt.n	800a16c <USBD_GetConfig+0x34>
 800a164:	e015      	b.n	800a192 <USBD_GetConfig+0x5a>
 800a166:	2b03      	cmp	r3, #3
 800a168:	d00b      	beq.n	800a182 <USBD_GetConfig+0x4a>
 800a16a:	e012      	b.n	800a192 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3308      	adds	r3, #8
 800a176:	2201      	movs	r2, #1
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f927 	bl	800a3ce <USBD_CtlSendData>
        break;
 800a180:	e00c      	b.n	800a19c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3304      	adds	r3, #4
 800a186:	2201      	movs	r2, #1
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f91f 	bl	800a3ce <USBD_CtlSendData>
        break;
 800a190:	e004      	b.n	800a19c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f8a9 	bl	800a2ec <USBD_CtlError>
        break;
 800a19a:	bf00      	nop
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d81e      	bhi.n	800a1fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	88db      	ldrh	r3, [r3, #6]
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d004      	beq.n	800a1ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f890 	bl	800a2ec <USBD_CtlError>
        break;
 800a1cc:	e01a      	b.n	800a204 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d005      	beq.n	800a1ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f043 0202 	orr.w	r2, r3, #2
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	330c      	adds	r3, #12
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f8eb 	bl	800a3ce <USBD_CtlSendData>
      break;
 800a1f8:	e004      	b.n	800a204 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f875 	bl	800a2ec <USBD_CtlError>
      break;
 800a202:	bf00      	nop
  }
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	885b      	ldrh	r3, [r3, #2]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d106      	bne.n	800a22c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f92b 	bl	800a482 <USBD_CtlSendStatus>
  }
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a244:	b2db      	uxtb	r3, r3
 800a246:	3b01      	subs	r3, #1
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d80b      	bhi.n	800a264 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	885b      	ldrh	r3, [r3, #2]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d10c      	bne.n	800a26e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f910 	bl	800a482 <USBD_CtlSendStatus>
      }
      break;
 800a262:	e004      	b.n	800a26e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f840 	bl	800a2ec <USBD_CtlError>
      break;
 800a26c:	e000      	b.n	800a270 <USBD_ClrFeature+0x3c>
      break;
 800a26e:	bf00      	nop
  }
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3301      	adds	r3, #1
 800a292:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	781a      	ldrb	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7ff fabb 	bl	800981e <SWAPBYTE>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7ff faae 	bl	800981e <SWAPBYTE>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7ff faa1 	bl	800981e <SWAPBYTE>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	80da      	strh	r2, [r3, #6]
}
 800a2e4:	bf00      	nop
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2f6:	2180      	movs	r1, #128	; 0x80
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fce1 	bl	800bcc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2fe:	2100      	movs	r1, #0
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 fcdd 	bl	800bcc0 <USBD_LL_StallEP>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b086      	sub	sp, #24
 800a312:	af00      	add	r7, sp, #0
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d036      	beq.n	800a392 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a328:	6938      	ldr	r0, [r7, #16]
 800a32a:	f000 f836 	bl	800a39a <USBD_GetLen>
 800a32e:	4603      	mov	r3, r0
 800a330:	3301      	adds	r3, #1
 800a332:	b29b      	uxth	r3, r3
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	4413      	add	r3, r2
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	7812      	ldrb	r2, [r2, #0]
 800a346:	701a      	strb	r2, [r3, #0]
  idx++;
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	3301      	adds	r3, #1
 800a34c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	4413      	add	r3, r2
 800a354:	2203      	movs	r2, #3
 800a356:	701a      	strb	r2, [r3, #0]
  idx++;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	3301      	adds	r3, #1
 800a35c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a35e:	e013      	b.n	800a388 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	4413      	add	r3, r2
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	7812      	ldrb	r2, [r2, #0]
 800a36a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	3301      	adds	r3, #1
 800a370:	613b      	str	r3, [r7, #16]
    idx++;
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	3301      	adds	r3, #1
 800a376:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	2200      	movs	r2, #0
 800a380:	701a      	strb	r2, [r3, #0]
    idx++;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	3301      	adds	r3, #1
 800a386:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e7      	bne.n	800a360 <USBD_GetString+0x52>
 800a390:	e000      	b.n	800a394 <USBD_GetString+0x86>
    return;
 800a392:	bf00      	nop
  }
}
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3aa:	e005      	b.n	800a3b8 <USBD_GetLen+0x1e>
  {
    len++;
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1f5      	bne.n	800a3ac <USBD_GetLen+0x12>
  }

  return len;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	60f8      	str	r0, [r7, #12]
 800a3d6:	60b9      	str	r1, [r7, #8]
 800a3d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2202      	movs	r2, #2
 800a3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f001 fcec 	bl	800bdd2 <USBD_LL_Transmit>

  return USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	2100      	movs	r1, #0
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f001 fcdb 	bl	800bdd2 <USBD_LL_Transmit>

  return USBD_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2203      	movs	r2, #3
 800a436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	2100      	movs	r1, #0
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f001 fcdf 	bl	800be14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	2100      	movs	r1, #0
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f001 fcce 	bl	800be14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2204      	movs	r2, #4
 800a48e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a492:	2300      	movs	r3, #0
 800a494:	2200      	movs	r2, #0
 800a496:	2100      	movs	r1, #0
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 fc9a 	bl	800bdd2 <USBD_LL_Transmit>

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2205      	movs	r2, #5
 800a4b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 fca8 	bl	800be14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0

	switch(sApplicationBase.eApplicationState)
 800a4d4:	4b17      	ldr	r3, [pc, #92]	; (800a534 <ApplicationPerform+0x64>)
 800a4d6:	7e5b      	ldrb	r3, [r3, #25]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d822      	bhi.n	800a524 <ApplicationPerform+0x54>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <ApplicationPerform+0x14>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a4f5 	.word	0x0800a4f5
 800a4e8:	0800a503 	.word	0x0800a503
 800a4ec:	0800a51f 	.word	0x0800a51f
 800a4f0:	0800a52d 	.word	0x0800a52d
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	f7f5 ffeb 	bl	80004d0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	f000 f8a6 	bl	800a64c <AppStateChangeRequest>
		break;
 800a500:	e015      	b.n	800a52e <ApplicationPerform+0x5e>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800a502:	f000 f8ef 	bl	800a6e4 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800a506:	f000 fb8f 	bl	800ac28 <TempCollect_Initialize>
		DataHandler_Initialize();
 800a50a:	f000 f92f 	bl	800a76c <DataHandler_Initialize>
		TurnAllSensorOn();
 800a50e:	f7f6 f84b 	bl	80005a8 <TurnAllSensorOn>
		TurnOnSynchronousEvent();
 800a512:	f000 f923 	bl	800a75c <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800a516:	2002      	movs	r0, #2
 800a518:	f000 f898 	bl	800a64c <AppStateChangeRequest>
		break;
 800a51c:	e007      	b.n	800a52e <ApplicationPerform+0x5e>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800a51e:	f000 f867 	bl	800a5f0 <AsynchronousTaskScheduler>
		break;
 800a522:	e004      	b.n	800a52e <ApplicationPerform+0x5e>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800a524:	2010      	movs	r0, #16
 800a526:	f000 f905 	bl	800a734 <AssertError>
		break;
 800a52a:	e000      	b.n	800a52e <ApplicationPerform+0x5e>
		break;
 800a52c:	bf00      	nop
	}

}
 800a52e:	bf00      	nop
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	200001a0 	.word	0x200001a0

0800a538 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800a53c:	4b20      	ldr	r3, [pc, #128]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <AsynchronousTaskTimerUpdate+0x1c>
	{
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800a546:	4b1e      	ldr	r3, [pc, #120]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a548:	885b      	ldrh	r3, [r3, #2]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	3301      	adds	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	4b1b      	ldr	r3, [pc, #108]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a552:	805a      	strh	r2, [r3, #2]
	}
	if(sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800a554:	4b1a      	ldr	r3, [pc, #104]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a556:	791b      	ldrb	r3, [r3, #4]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d006      	beq.n	800a56c <AsynchronousTaskTimerUpdate+0x34>
	{
		sApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800a55e:	4b18      	ldr	r3, [pc, #96]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a560:	88db      	ldrh	r3, [r3, #6]
 800a562:	b29b      	uxth	r3, r3
 800a564:	3301      	adds	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	4b15      	ldr	r3, [pc, #84]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a56a:	80da      	strh	r2, [r3, #6]
	}
	if(sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800a56c:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a56e:	7a1b      	ldrb	r3, [r3, #8]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d006      	beq.n	800a584 <AsynchronousTaskTimerUpdate+0x4c>
	{
		sApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800a576:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a578:	895b      	ldrh	r3, [r3, #10]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	3301      	adds	r3, #1
 800a57e:	b29a      	uxth	r2, r3
 800a580:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a582:	815a      	strh	r2, [r3, #10]
	}
	if(sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800a584:	4b0e      	ldr	r3, [pc, #56]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a586:	7b1b      	ldrb	r3, [r3, #12]
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d006      	beq.n	800a59c <AsynchronousTaskTimerUpdate+0x64>
	{
		sApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800a58e:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a590:	89db      	ldrh	r3, [r3, #14]
 800a592:	b29b      	uxth	r3, r3
 800a594:	3301      	adds	r3, #1
 800a596:	b29a      	uxth	r2, r3
 800a598:	4b09      	ldr	r3, [pc, #36]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a59a:	81da      	strh	r2, [r3, #14]
	}
	if(sApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800a59c:	4b08      	ldr	r3, [pc, #32]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a59e:	7c1b      	ldrb	r3, [r3, #16]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d006      	beq.n	800a5b4 <AsynchronousTaskTimerUpdate+0x7c>
	{
		sApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800a5a6:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5a8:	8a5b      	ldrh	r3, [r3, #18]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5b2:	825a      	strh	r2, [r3, #18]
	}

}
 800a5b4:	bf00      	nop
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	200001a0 	.word	0x200001a0

0800a5c4 <AsynchronousTask_10ms>:

/* Internal functions */
void AsynchronousTask_10ms()
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800a5c8:	f000 fa3e 	bl	800aa48 <TempCollect_Operate>
}
 800a5cc:	bf00      	nop
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0

}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800a5e2:	f7f5 ff91 	bl	8000508 <ToggleLED_B>
	DataHandler_Operate();
 800a5e6:	f000 fa0d 	bl	800aa04 <DataHandler_Operate>
}
 800a5ea:	bf00      	nop
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800a5f4:	4b14      	ldr	r3, [pc, #80]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a5f6:	885b      	ldrh	r3, [r3, #2]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5fe:	d304      	bcc.n	800a60a <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800a600:	f7ff ffed 	bl	800a5de <AsynchronousTask_1000ms>
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a604:	4b10      	ldr	r3, [pc, #64]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a606:	2200      	movs	r2, #0
 800a608:	805a      	strh	r2, [r3, #2]
	}

	if(sApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800a60a:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a60c:	88db      	ldrh	r3, [r3, #6]
 800a60e:	b29b      	uxth	r3, r3
 800a610:	2b63      	cmp	r3, #99	; 0x63
 800a612:	d904      	bls.n	800a61e <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800a614:	f7ff ffdc 	bl	800a5d0 <AsynchronousTask_100ms>
		sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a618:	4b0b      	ldr	r3, [pc, #44]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	80da      	strh	r2, [r3, #6]
	}

	if(sApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800a61e:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a620:	895b      	ldrh	r3, [r3, #10]
 800a622:	b29b      	uxth	r3, r3
 800a624:	2b09      	cmp	r3, #9
 800a626:	d904      	bls.n	800a632 <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800a628:	f7ff ffcc 	bl	800a5c4 <AsynchronousTask_10ms>
		sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a62e:	2200      	movs	r2, #0
 800a630:	815a      	strh	r2, [r3, #10]
	}

	if(sApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800a632:	4b05      	ldr	r3, [pc, #20]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a634:	89db      	ldrh	r3, [r3, #14]
 800a636:	b29b      	uxth	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <AsynchronousTaskScheduler+0x52>
	{
//		AsynchronousTask_1ms();
		sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a63c:	4b02      	ldr	r3, [pc, #8]	; (800a648 <AsynchronousTaskScheduler+0x58>)
 800a63e:	2200      	movs	r2, #0
 800a640:	81da      	strh	r2, [r3, #14]
	}

}
 800a642:	bf00      	nop
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	200001a0 	.word	0x200001a0

0800a64c <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	71fb      	strb	r3, [r7, #7]
	switch(sApplicationBase.eApplicationState)
 800a656:	4b22      	ldr	r3, [pc, #136]	; (800a6e0 <AppStateChangeRequest+0x94>)
 800a658:	7e5b      	ldrb	r3, [r3, #25]
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d837      	bhi.n	800a6d0 <AppStateChangeRequest+0x84>
 800a660:	a201      	add	r2, pc, #4	; (adr r2, 800a668 <AppStateChangeRequest+0x1c>)
 800a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a666:	bf00      	nop
 800a668:	0800a679 	.word	0x0800a679
 800a66c:	0800a68f 	.word	0x0800a68f
 800a670:	0800a6a5 	.word	0x0800a6a5
 800a674:	0800a6c9 	.word	0x0800a6c9
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d103      	bne.n	800a686 <AppStateChangeRequest+0x3a>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a67e:	4b18      	ldr	r3, [pc, #96]	; (800a6e0 <AppStateChangeRequest+0x94>)
 800a680:	2201      	movs	r2, #1
 800a682:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a684:	e028      	b.n	800a6d8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a686:	2020      	movs	r0, #32
 800a688:	f000 f854 	bl	800a734 <AssertError>
		break;
 800a68c:	e024      	b.n	800a6d8 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	2b02      	cmp	r3, #2
 800a692:	d103      	bne.n	800a69c <AppStateChangeRequest+0x50>
		{
			sApplicationBase.eApplicationState = eApp_Perform;
 800a694:	4b12      	ldr	r3, [pc, #72]	; (800a6e0 <AppStateChangeRequest+0x94>)
 800a696:	2202      	movs	r2, #2
 800a698:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a69a:	e01d      	b.n	800a6d8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a69c:	2020      	movs	r0, #32
 800a69e:	f000 f849 	bl	800a734 <AssertError>
		break;
 800a6a2:	e019      	b.n	800a6d8 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d103      	bne.n	800a6b2 <AppStateChangeRequest+0x66>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	; (800a6e0 <AppStateChangeRequest+0x94>)
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a6b0:	e012      	b.n	800a6d8 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d103      	bne.n	800a6c0 <AppStateChangeRequest+0x74>
			sApplicationBase.eApplicationState = eApp_Shutdown;
 800a6b8:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <AppStateChangeRequest+0x94>)
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	765a      	strb	r2, [r3, #25]
		break;
 800a6be:	e00b      	b.n	800a6d8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a6c0:	2020      	movs	r0, #32
 800a6c2:	f000 f837 	bl	800a734 <AssertError>
		break;
 800a6c6:	e007      	b.n	800a6d8 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800a6c8:	2020      	movs	r0, #32
 800a6ca:	f000 f833 	bl	800a734 <AssertError>
		break;
 800a6ce:	e003      	b.n	800a6d8 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800a6d0:	2020      	movs	r0, #32
 800a6d2:	f000 f82f 	bl	800a734 <AssertError>
		break;
 800a6d6:	bf00      	nop
	}

}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	200001a0 	.word	0x200001a0

0800a6e4 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	af00      	add	r7, sp, #0
	sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800a6e8:	4b11      	ldr	r3, [pc, #68]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	701a      	strb	r2, [r3, #0]
	sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800a6ee:	4b10      	ldr	r3, [pc, #64]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	711a      	strb	r2, [r3, #4]
	sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800a6f4:	4b0e      	ldr	r3, [pc, #56]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	721a      	strb	r2, [r3, #8]
	sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800a6fa:	4b0d      	ldr	r3, [pc, #52]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	731a      	strb	r2, [r3, #12]
	sApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a702:	2201      	movs	r2, #1
 800a704:	741a      	strb	r2, [r3, #16]

	sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a706:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	805a      	strh	r2, [r3, #2]
	sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a70c:	4b08      	ldr	r3, [pc, #32]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a70e:	2200      	movs	r2, #0
 800a710:	80da      	strh	r2, [r3, #6]
	sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a712:	4b07      	ldr	r3, [pc, #28]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a714:	2200      	movs	r2, #0
 800a716:	815a      	strh	r2, [r3, #10]
	sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a718:	4b05      	ldr	r3, [pc, #20]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	81da      	strh	r2, [r3, #14]
	sApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <AppEnableResetTaskTimers+0x4c>)
 800a720:	2200      	movs	r2, #0
 800a722:	825a      	strh	r2, [r3, #18]
}
 800a724:	bf00      	nop
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	200001a0 	.word	0x200001a0

0800a734 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	80fb      	strh	r3, [r7, #6]
	sApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800a73e:	4b06      	ldr	r3, [pc, #24]	; (800a758 <AssertError+0x24>)
 800a740:	695a      	ldr	r2, [r3, #20]
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	4313      	orrs	r3, r2
 800a746:	4a04      	ldr	r2, [pc, #16]	; (800a758 <AssertError+0x24>)
 800a748:	6153      	str	r3, [r2, #20]
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	200001a0 	.word	0x200001a0

0800a75c <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0

}
 800a760:	bf00      	nop
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
	...

0800a76c <DataHandler_Initialize>:
}DataHandler_t;

static DataHandler_t kDataHandler;

void DataHandler_Initialize()
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800a770:	f000 f808 	bl	800a784 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800a774:	4b02      	ldr	r3, [pc, #8]	; (800a780 <DataHandler_Initialize+0x14>)
 800a776:	2201      	movs	r2, #1
 800a778:	701a      	strb	r2, [r3, #0]

}
 800a77a:	bf00      	nop
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	200001bc 	.word	0x200001bc

0800a784 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800a784:	b490      	push	{r4, r7}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800a78a:	4b33      	ldr	r3, [pc, #204]	; (800a858 <DataHandler_Reset+0xd4>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800a792:	4b31      	ldr	r3, [pc, #196]	; (800a858 <DataHandler_Reset+0xd4>)
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800a79a:	4b2f      	ldr	r3, [pc, #188]	; (800a858 <DataHandler_Reset+0xd4>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800a7a2:	4b2d      	ldr	r3, [pc, #180]	; (800a858 <DataHandler_Reset+0xd4>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800a7aa:	4b2b      	ldr	r3, [pc, #172]	; (800a858 <DataHandler_Reset+0xd4>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	71fb      	strb	r3, [r7, #7]
 800a7b6:	e046      	b.n	800a846 <DataHandler_Reset+0xc2>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	71bb      	strb	r3, [r7, #6]
 800a7bc:	e03d      	b.n	800a83a <DataHandler_Reset+0xb6>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800a7be:	79fa      	ldrb	r2, [r7, #7]
 800a7c0:	4925      	ldr	r1, [pc, #148]	; (800a858 <DataHandler_Reset+0xd4>)
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	019b      	lsls	r3, r3, #6
 800a7c6:	4413      	add	r3, r2
 800a7c8:	00db      	lsls	r3, r3, #3
 800a7ca:	440b      	add	r3, r1
 800a7cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800a7d4:	79fa      	ldrb	r2, [r7, #7]
 800a7d6:	4920      	ldr	r1, [pc, #128]	; (800a858 <DataHandler_Reset+0xd4>)
 800a7d8:	4613      	mov	r3, r2
 800a7da:	019b      	lsls	r3, r3, #6
 800a7dc:	4413      	add	r3, r2
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	440b      	add	r3, r1
 800a7e2:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800a7ea:	79fa      	ldrb	r2, [r7, #7]
 800a7ec:	491a      	ldr	r1, [pc, #104]	; (800a858 <DataHandler_Reset+0xd4>)
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	019b      	lsls	r3, r3, #6
 800a7f2:	4413      	add	r3, r2
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	440b      	add	r3, r1
 800a7f8:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a800:	2300      	movs	r3, #0
 800a802:	717b      	strb	r3, [r7, #5]
 800a804:	e013      	b.n	800a82e <DataHandler_Reset+0xaa>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800a806:	79fa      	ldrb	r2, [r7, #7]
 800a808:	79bb      	ldrb	r3, [r7, #6]
 800a80a:	7979      	ldrb	r1, [r7, #5]
 800a80c:	4c12      	ldr	r4, [pc, #72]	; (800a858 <DataHandler_Reset+0xd4>)
 800a80e:	0118      	lsls	r0, r3, #4
 800a810:	4613      	mov	r3, r2
 800a812:	019b      	lsls	r3, r3, #6
 800a814:	4413      	add	r3, r2
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	4403      	add	r3, r0
 800a81a:	440b      	add	r3, r1
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4423      	add	r3, r4
 800a820:	3308      	adds	r3, #8
 800a822:	f04f 0200 	mov.w	r2, #0
 800a826:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a828:	797b      	ldrb	r3, [r7, #5]
 800a82a:	3301      	adds	r3, #1
 800a82c:	717b      	strb	r3, [r7, #5]
 800a82e:	797b      	ldrb	r3, [r7, #5]
 800a830:	2b0f      	cmp	r3, #15
 800a832:	d9e8      	bls.n	800a806 <DataHandler_Reset+0x82>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a834:	79bb      	ldrb	r3, [r7, #6]
 800a836:	3301      	adds	r3, #1
 800a838:	71bb      	strb	r3, [r7, #6]
 800a83a:	79bb      	ldrb	r3, [r7, #6]
 800a83c:	2b07      	cmp	r3, #7
 800a83e:	d9be      	bls.n	800a7be <DataHandler_Reset+0x3a>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a840:	79fb      	ldrb	r3, [r7, #7]
 800a842:	3301      	adds	r3, #1
 800a844:	71fb      	strb	r3, [r7, #7]
 800a846:	79fb      	ldrb	r3, [r7, #7]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d9b5      	bls.n	800a7b8 <DataHandler_Reset+0x34>
			}
		}
	}

}
 800a84c:	bf00      	nop
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bc90      	pop	{r4, r7}
 800a856:	4770      	bx	lr
 800a858:	200001bc 	.word	0x200001bc

0800a85c <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800a864:	4b42      	ldr	r3, [pc, #264]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d078      	beq.n	800a95e <DataHandler_OpenNewMeasurement+0x102>
	{
		kDataHandler.u8LengthPointer++;
 800a86c:	4b40      	ldr	r3, [pc, #256]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a86e:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a872:	3301      	adds	r3, #1
 800a874:	b2da      	uxtb	r2, r3
 800a876:	4b3e      	ldr	r3, [pc, #248]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a878:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800a87c:	4b3c      	ldr	r3, [pc, #240]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800a884:	4b3a      	ldr	r3, [pc, #232]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a886:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a88a:	2b07      	cmp	r3, #7
 800a88c:	d96b      	bls.n	800a966 <DataHandler_OpenNewMeasurement+0x10a>
		{
			kDataHandler.u8LengthPointer = 0;
 800a88e:	4b38      	ldr	r3, [pc, #224]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800a896:	4b36      	ldr	r3, [pc, #216]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a898:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a89c:	4619      	mov	r1, r3
 800a89e:	4a34      	ldr	r2, [pc, #208]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	019b      	lsls	r3, r3, #6
 800a8a4:	440b      	add	r3, r1
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800a8b2:	4b2f      	ldr	r3, [pc, #188]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a8b4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4a2d      	ldr	r2, [pc, #180]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a8bc:	460b      	mov	r3, r1
 800a8be:	019b      	lsls	r3, r3, #6
 800a8c0:	440b      	add	r3, r1
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800a8ce:	4b28      	ldr	r3, [pc, #160]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a8d0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4a26      	ldr	r2, [pc, #152]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a8d8:	460b      	mov	r3, r1
 800a8da:	019b      	lsls	r3, r3, #6
 800a8dc:	440b      	add	r3, r1
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800a8ea:	4b21      	ldr	r3, [pc, #132]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a8ec:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4a1f      	ldr	r2, [pc, #124]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	019b      	lsls	r3, r3, #6
 800a8f8:	440b      	add	r3, r1
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	4413      	add	r3, r2
 800a8fe:	3304      	adds	r3, #4
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800a904:	4b1a      	ldr	r3, [pc, #104]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a906:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a90a:	4619      	mov	r1, r3
 800a90c:	4a18      	ldr	r2, [pc, #96]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a90e:	460b      	mov	r3, r1
 800a910:	019b      	lsls	r3, r3, #6
 800a912:	440b      	add	r3, r1
 800a914:	00db      	lsls	r3, r3, #3
 800a916:	4413      	add	r3, r2
 800a918:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	f083 0301 	eor.w	r3, r3, #1
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <DataHandler_OpenNewMeasurement+0xd2>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800a928:	2040      	movs	r0, #64	; 0x40
 800a92a:	f7ff ff03 	bl	800a734 <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800a92e:	4b10      	ldr	r3, [pc, #64]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a930:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800a934:	4b0e      	ldr	r3, [pc, #56]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a936:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a93c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a940:	3301      	adds	r3, #1
 800a942:	b2da      	uxtb	r2, r3
 800a944:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a946:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a94c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a950:	2b01      	cmp	r3, #1
 800a952:	d908      	bls.n	800a966 <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800a954:	4b06      	ldr	r3, [pc, #24]	; (800a970 <DataHandler_OpenNewMeasurement+0x114>)
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800a95c:	e003      	b.n	800a966 <DataHandler_OpenNewMeasurement+0x10a>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a95e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a962:	f7ff fee7 	bl	800a734 <AssertError>
}
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	200001bc 	.word	0x200001bc

0800a974 <DataHandler_StoreMeasurement>:
void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800a974:	b590      	push	{r4, r7, lr}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800a97e:	4b20      	ldr	r3, [pc, #128]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a980:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a984:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800a986:	4b1e      	ldr	r3, [pc, #120]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a988:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a98c:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800a98e:	4b1c      	ldr	r3, [pc, #112]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a990:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a994:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800a996:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d028      	beq.n	800a9f0 <DataHandler_StoreMeasurement+0x7c>
	{

		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800a99e:	7bfa      	ldrb	r2, [r7, #15]
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	7b79      	ldrb	r1, [r7, #13]
 800a9a4:	4c16      	ldr	r4, [pc, #88]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a9a6:	0118      	lsls	r0, r3, #4
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	019b      	lsls	r3, r3, #6
 800a9ac:	4413      	add	r3, r2
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	4403      	add	r3, r0
 800a9b2:	440b      	add	r3, r1
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4423      	add	r3, r4
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	601a      	str	r2, [r3, #0]

		kDataHandler.u8WidthPointer++;
 800a9be:	4b10      	ldr	r3, [pc, #64]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a9c0:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a9ca:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a9d0:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a9d4:	2b0f      	cmp	r3, #15
 800a9d6:	d90f      	bls.n	800a9f8 <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800a9d8:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a9da:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <DataHandler_StoreMeasurement+0x8c>)
 800a9e4:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800a9e8:	2080      	movs	r0, #128	; 0x80
 800a9ea:	f7ff fea3 	bl	800a734 <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800a9ee:	e003      	b.n	800a9f8 <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a9f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a9f4:	f7ff fe9e 	bl	800a734 <AssertError>
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd90      	pop	{r4, r7, pc}
 800aa00:	200001bc 	.word	0x200001bc

0800aa04 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800aa08:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <DataHandler_Operate+0x40>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d013      	beq.n	800aa38 <DataHandler_Operate+0x34>
	{

		if( kDataHandler.bPageFilled )
 800aa10:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <DataHandler_Operate+0x40>)
 800aa12:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d012      	beq.n	800aa40 <DataHandler_Operate+0x3c>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <DataHandler_Operate+0x40>)
 800aa1c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800aa20:	4619      	mov	r1, r3
 800aa22:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <DataHandler_Operate+0x40>)
 800aa24:	460b      	mov	r3, r1
 800aa26:	019b      	lsls	r3, r3, #6
 800aa28:	440b      	add	r3, r1
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800aa32:	2201      	movs	r2, #1
 800aa34:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800aa36:	e003      	b.n	800aa40 <DataHandler_Operate+0x3c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800aa38:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aa3c:	f7ff fe7a 	bl	800a734 <AssertError>
}
 800aa40:	bf00      	nop
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	200001bc 	.word	0x200001bc

0800aa48 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800aa4c:	4b73      	ldr	r3, [pc, #460]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aa4e:	79db      	ldrb	r3, [r3, #7]
 800aa50:	2b05      	cmp	r3, #5
 800aa52:	f200 80d8 	bhi.w	800ac06 <TempCollect_Operate+0x1be>
 800aa56:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <TempCollect_Operate+0x14>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800aa75 	.word	0x0800aa75
 800aa60:	0800aa7f 	.word	0x0800aa7f
 800aa64:	0800aab9 	.word	0x0800aab9
 800aa68:	0800ab2b 	.word	0x0800ab2b
 800aa6c:	0800abaf 	.word	0x0800abaf
 800aa70:	0800ab13 	.word	0x0800ab13
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800aa74:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aa78:	f7ff fe5c 	bl	800a734 <AssertError>
		break;
 800aa7c:	e0cb      	b.n	800ac16 <TempCollect_Operate+0x1ce>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800aa7e:	4b67      	ldr	r3, [pc, #412]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aa80:	799b      	ldrb	r3, [r3, #6]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 80c4 	beq.w	800ac10 <TempCollect_Operate+0x1c8>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800aa88:	4b64      	ldr	r3, [pc, #400]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800aa8e:	4b63      	ldr	r3, [pc, #396]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800aa94:	4b61      	ldr	r3, [pc, #388]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800aa9a:	4b60      	ldr	r3, [pc, #384]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800aaa0:	4b5e      	ldr	r3, [pc, #376]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	725a      	strb	r2, [r3, #9]
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800aaa6:	4b5d      	ldr	r3, [pc, #372]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	495b      	ldr	r1, [pc, #364]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aaae:	618a      	str	r2, [r1, #24]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7ff fed3 	bl	800a85c <DataHandler_OpenNewMeasurement>
		}
		break;
 800aab6:	e0ab      	b.n	800ac10 <TempCollect_Operate+0x1c8>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800aab8:	4b58      	ldr	r3, [pc, #352]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800aabe:	4b57      	ldr	r3, [pc, #348]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aac0:	8a9b      	ldrh	r3, [r3, #20]
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d80e      	bhi.n	800aae4 <TempCollect_Operate+0x9c>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800aac6:	4b55      	ldr	r3, [pc, #340]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800aacc:	4b53      	ldr	r3, [pc, #332]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aace:	8a9b      	ldrh	r3, [r3, #20]
 800aad0:	461a      	mov	r2, r3
 800aad2:	4613      	mov	r3, r2
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4a51      	ldr	r2, [pc, #324]	; (800ac20 <TempCollect_Operate+0x1d8>)
 800aadc:	4413      	add	r3, r2
 800aade:	4618      	mov	r0, r3
 800aae0:	f7f5 fdd6 	bl	8000690 <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800aae4:	4b4d      	ldr	r3, [pc, #308]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aae6:	8adb      	ldrh	r3, [r3, #22]
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d80e      	bhi.n	800ab0a <TempCollect_Operate+0xc2>
		{
			kTemperatureData.bStateReady[1] = false;
 800aaec:	4b4b      	ldr	r3, [pc, #300]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800aaf2:	4b4a      	ldr	r3, [pc, #296]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aaf4:	8adb      	ldrh	r3, [r3, #22]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4613      	mov	r3, r2
 800aafa:	005b      	lsls	r3, r3, #1
 800aafc:	4413      	add	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4a48      	ldr	r2, [pc, #288]	; (800ac24 <TempCollect_Operate+0x1dc>)
 800ab02:	4413      	add	r3, r2
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7f5 fdc3 	bl	8000690 <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800ab0a:	4b44      	ldr	r3, [pc, #272]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab0c:	2205      	movs	r2, #5
 800ab0e:	71da      	strb	r2, [r3, #7]
		break;
 800ab10:	e081      	b.n	800ac16 <TempCollect_Operate+0x1ce>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800ab12:	4b42      	ldr	r3, [pc, #264]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab14:	7a9b      	ldrb	r3, [r3, #10]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d07c      	beq.n	800ac14 <TempCollect_Operate+0x1cc>
 800ab1a:	4b40      	ldr	r3, [pc, #256]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab1c:	7adb      	ldrb	r3, [r3, #11]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d078      	beq.n	800ac14 <TempCollect_Operate+0x1cc>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800ab22:	4b3e      	ldr	r3, [pc, #248]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab24:	2203      	movs	r2, #3
 800ab26:	71da      	strb	r2, [r3, #7]
		}
		break;
 800ab28:	e074      	b.n	800ac14 <TempCollect_Operate+0x1cc>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800ab2a:	4b3c      	ldr	r3, [pc, #240]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab2c:	7a1b      	ldrb	r3, [r3, #8]
 800ab2e:	f083 0301 	eor.w	r3, r3, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d017      	beq.n	800ab68 <TempCollect_Operate+0x120>
		{
			kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800ab38:	4b38      	ldr	r3, [pc, #224]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab3a:	8a9b      	ldrh	r3, [r3, #20]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4613      	mov	r3, r2
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4a36      	ldr	r2, [pc, #216]	; (800ac20 <TempCollect_Operate+0x1d8>)
 800ab48:	4413      	add	r3, r2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7f5 fdb6 	bl	80006bc <MCP9808_DecodeTemperature>
 800ab50:	eef0 7a40 	vmov.f32	s15, s0
 800ab54:	4b31      	ldr	r3, [pc, #196]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab56:	edc3 7a03 	vstr	s15, [r3, #12]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800ab5a:	4b30      	ldr	r3, [pc, #192]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab5c:	edd3 7a03 	vldr	s15, [r3, #12]
 800ab60:	eeb0 0a67 	vmov.f32	s0, s15
 800ab64:	f7ff ff06 	bl	800a974 <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800ab68:	4b2c      	ldr	r3, [pc, #176]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab6a:	7a5b      	ldrb	r3, [r3, #9]
 800ab6c:	f083 0301 	eor.w	r3, r3, #1
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d017      	beq.n	800aba6 <TempCollect_Operate+0x15e>
		{
			kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800ab76:	4b29      	ldr	r3, [pc, #164]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab78:	8adb      	ldrh	r3, [r3, #22]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4a27      	ldr	r2, [pc, #156]	; (800ac24 <TempCollect_Operate+0x1dc>)
 800ab86:	4413      	add	r3, r2
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f5 fd97 	bl	80006bc <MCP9808_DecodeTemperature>
 800ab8e:	eef0 7a40 	vmov.f32	s15, s0
 800ab92:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab94:	edc3 7a04 	vstr	s15, [r3, #16]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800ab98:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ab9a:	edd3 7a04 	vldr	s15, [r3, #16]
 800ab9e:	eeb0 0a67 	vmov.f32	s0, s15
 800aba2:	f7ff fee7 	bl	800a974 <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800aba6:	4b1d      	ldr	r3, [pc, #116]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800aba8:	2204      	movs	r2, #4
 800abaa:	71da      	strb	r2, [r3, #7]
		break;
 800abac:	e033      	b.n	800ac16 <TempCollect_Operate+0x1ce>

	case(TempCollect_ArmNewReading):
		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800abae:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abb0:	8a9b      	ldrh	r3, [r3, #20]
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d903      	bls.n	800abbe <TempCollect_Operate+0x176>
		{
			kTemperatureData.bReadFinished[0] = true;
 800abb6:	4b19      	ldr	r3, [pc, #100]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abb8:	2201      	movs	r2, #1
 800abba:	721a      	strb	r2, [r3, #8]
 800abbc:	e005      	b.n	800abca <TempCollect_Operate+0x182>
		}
		else
		{
			kTemperatureData.u16ArrayASensorIndex++;
 800abbe:	4b17      	ldr	r3, [pc, #92]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abc0:	8a9b      	ldrh	r3, [r3, #20]
 800abc2:	3301      	adds	r3, #1
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abc8:	829a      	strh	r2, [r3, #20]
		}

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800abca:	4b14      	ldr	r3, [pc, #80]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abcc:	8adb      	ldrh	r3, [r3, #22]
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d903      	bls.n	800abda <TempCollect_Operate+0x192>
		{
			kTemperatureData.bReadFinished[1] = true;
 800abd2:	4b12      	ldr	r3, [pc, #72]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abd4:	2201      	movs	r2, #1
 800abd6:	725a      	strb	r2, [r3, #9]
 800abd8:	e005      	b.n	800abe6 <TempCollect_Operate+0x19e>
		}
		else
		{
			kTemperatureData.u16ArrayBSensorIndex++;
 800abda:	4b10      	ldr	r3, [pc, #64]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abdc:	8adb      	ldrh	r3, [r3, #22]
 800abde:	3301      	adds	r3, #1
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	4b0e      	ldr	r3, [pc, #56]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abe4:	82da      	strh	r2, [r3, #22]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800abe6:	4b0d      	ldr	r3, [pc, #52]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abe8:	7a1b      	ldrb	r3, [r3, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <TempCollect_Operate+0x1b6>
 800abee:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abf0:	7a5b      	ldrb	r3, [r3, #9]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <TempCollect_Operate+0x1b6>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800abf6:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	71da      	strb	r2, [r3, #7]
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800abfc:	e00b      	b.n	800ac16 <TempCollect_Operate+0x1ce>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800abfe:	4b07      	ldr	r3, [pc, #28]	; (800ac1c <TempCollect_Operate+0x1d4>)
 800ac00:	2202      	movs	r2, #2
 800ac02:	71da      	strb	r2, [r3, #7]
		break;
 800ac04:	e007      	b.n	800ac16 <TempCollect_Operate+0x1ce>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800ac06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ac0a:	f7ff fd93 	bl	800a734 <AssertError>
	break;
 800ac0e:	e002      	b.n	800ac16 <TempCollect_Operate+0x1ce>
		break;
 800ac10:	bf00      	nop
 800ac12:	e000      	b.n	800ac16 <TempCollect_Operate+0x1ce>
		break;
 800ac14:	bf00      	nop
	}
}
 800ac16:	bf00      	nop
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200005d8 	.word	0x200005d8
 800ac20:	20000814 	.word	0x20000814
 800ac24:	20000850 	.word	0x20000850

0800ac28 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <TempCollect_Initialize+0x1c>)
 800ac2e:	2201      	movs	r2, #1
 800ac30:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800ac32:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <TempCollect_Initialize+0x1c>)
 800ac34:	2201      	movs	r2, #1
 800ac36:	715a      	strb	r2, [r3, #5]
	}
	if(MCP9808_I2CB_DeviceCount == 0)
	{
		kTemperatureData.bStateReady[1] = true;
	}
}
 800ac38:	bf00      	nop
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	200005d8 	.word	0x200005d8

0800ac48 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800ac4c:	f7f5 fc66 	bl	800051c <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800ac50:	4b06      	ldr	r3, [pc, #24]	; (800ac6c <TempCollect_ScheduleMeasurement+0x24>)
 800ac52:	799b      	ldrb	r3, [r3, #6]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d004      	beq.n	800ac62 <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800ac58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ac5c:	f7ff fd6a 	bl	800a734 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800ac60:	e002      	b.n	800ac68 <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800ac62:	4b02      	ldr	r3, [pc, #8]	; (800ac6c <TempCollect_ScheduleMeasurement+0x24>)
 800ac64:	2201      	movs	r2, #1
 800ac66:	719a      	strb	r2, [r3, #6]
}
 800ac68:	bf00      	nop
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	200005d8 	.word	0x200005d8

0800ac70 <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800ac70:	b480      	push	{r7}
 800ac72:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800ac74:	4b03      	ldr	r3, [pc, #12]	; (800ac84 <TempCollect_I2CA_Done+0x14>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	729a      	strb	r2, [r3, #10]
}
 800ac7a:	bf00      	nop
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	200005d8 	.word	0x200005d8

0800ac88 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800ac8c:	4b03      	ldr	r3, [pc, #12]	; (800ac9c <TempCollect_I2CB_Done+0x14>)
 800ac8e:	2201      	movs	r2, #1
 800ac90:	72da      	strb	r2, [r3, #11]
}
 800ac92:	bf00      	nop
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	200005d8 	.word	0x200005d8

0800aca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aca4:	f7f5 fd58 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aca8:	f000 f836 	bl	800ad18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800acac:	f000 fa0e 	bl	800b0cc <MX_GPIO_Init>
  MX_DMA_Init();
 800acb0:	f000 f9ec 	bl	800b08c <MX_DMA_Init>
  MX_RTC_Init();
 800acb4:	f000 f8f8 	bl	800aea8 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800acb8:	f000 f91c 	bl	800aef4 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800acbc:	f000 f898 	bl	800adf0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800acc0:	f000 f8c4 	bl	800ae4c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800acc4:	f000 f9b8 	bl	800b038 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800acc8:	f000 fd34 	bl	800b734 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800accc:	f000 f942 	bl	800af54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SensorArray_Init(&hi2c1, &hi2c2);
 800acd0:	490d      	ldr	r1, [pc, #52]	; (800ad08 <main+0x68>)
 800acd2:	480e      	ldr	r0, [pc, #56]	; (800ad0c <main+0x6c>)
 800acd4:	f7f5 fc72 	bl	80005bc <SensorArray_Init>
//  HAL_TIM_Base_MspInit(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 800acd8:	480d      	ldr	r0, [pc, #52]	; (800ad10 <main+0x70>)
 800acda:	f7fa ff2f 	bl	8005b3c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800acde:	2201      	movs	r2, #1
 800ace0:	2101      	movs	r1, #1
 800ace2:	480c      	ldr	r0, [pc, #48]	; (800ad14 <main+0x74>)
 800ace4:	f7f6 fb7e 	bl	80013e4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800ace8:	2201      	movs	r2, #1
 800acea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800acee:	4809      	ldr	r0, [pc, #36]	; (800ad14 <main+0x74>)
 800acf0:	f7f6 fb78 	bl	80013e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800acf4:	2201      	movs	r2, #1
 800acf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800acfa:	4806      	ldr	r0, [pc, #24]	; (800ad14 <main+0x74>)
 800acfc:	f7f6 fb72 	bl	80013e4 <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800ad00:	f7ff fbe6 	bl	800a4d0 <ApplicationPerform>
 800ad04:	e7fc      	b.n	800ad00 <main+0x60>
 800ad06:	bf00      	nop
 800ad08:	20000944 	.word	0x20000944
 800ad0c:	200008f0 	.word	0x200008f0
 800ad10:	20000a80 	.word	0x20000a80
 800ad14:	40020800 	.word	0x40020800

0800ad18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b094      	sub	sp, #80	; 0x50
 800ad1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ad1e:	f107 0320 	add.w	r3, r7, #32
 800ad22:	2230      	movs	r2, #48	; 0x30
 800ad24:	2100      	movs	r1, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 fa4a 	bl	800c1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad2c:	f107 030c 	add.w	r3, r7, #12
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	605a      	str	r2, [r3, #4]
 800ad36:	609a      	str	r2, [r3, #8]
 800ad38:	60da      	str	r2, [r3, #12]
 800ad3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	60bb      	str	r3, [r7, #8]
 800ad40:	4b29      	ldr	r3, [pc, #164]	; (800ade8 <SystemClock_Config+0xd0>)
 800ad42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad44:	4a28      	ldr	r2, [pc, #160]	; (800ade8 <SystemClock_Config+0xd0>)
 800ad46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad4a:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4c:	4b26      	ldr	r3, [pc, #152]	; (800ade8 <SystemClock_Config+0xd0>)
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad58:	2300      	movs	r3, #0
 800ad5a:	607b      	str	r3, [r7, #4]
 800ad5c:	4b23      	ldr	r3, [pc, #140]	; (800adec <SystemClock_Config+0xd4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a22      	ldr	r2, [pc, #136]	; (800adec <SystemClock_Config+0xd4>)
 800ad62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	4b20      	ldr	r3, [pc, #128]	; (800adec <SystemClock_Config+0xd4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800ad74:	2305      	movs	r3, #5
 800ad76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ad78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ad82:	2302      	movs	r3, #2
 800ad84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ad86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800ad90:	2348      	movs	r3, #72	; 0x48
 800ad92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ad94:	2302      	movs	r3, #2
 800ad96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad9c:	f107 0320 	add.w	r3, r7, #32
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7f9 fa89 	bl	80042b8 <HAL_RCC_OscConfig>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800adac:	f000 fa10 	bl	800b1d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800adb0:	230f      	movs	r3, #15
 800adb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800adb4:	2302      	movs	r3, #2
 800adb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800adbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800adc6:	f107 030c 	add.w	r3, r7, #12
 800adca:	2102      	movs	r1, #2
 800adcc:	4618      	mov	r0, r3
 800adce:	f7f9 fce9 	bl	80047a4 <HAL_RCC_ClockConfig>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800add8:	f000 f9fa 	bl	800b1d0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800addc:	f7f9 fdc8 	bl	8004970 <HAL_RCC_EnableCSS>
}
 800ade0:	bf00      	nop
 800ade2:	3750      	adds	r7, #80	; 0x50
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	40023800 	.word	0x40023800
 800adec:	40007000 	.word	0x40007000

0800adf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800adf4:	4b12      	ldr	r3, [pc, #72]	; (800ae40 <MX_I2C1_Init+0x50>)
 800adf6:	4a13      	ldr	r2, [pc, #76]	; (800ae44 <MX_I2C1_Init+0x54>)
 800adf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800adfa:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <MX_I2C1_Init+0x50>)
 800adfc:	4a12      	ldr	r2, [pc, #72]	; (800ae48 <MX_I2C1_Init+0x58>)
 800adfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ae00:	4b0f      	ldr	r3, [pc, #60]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800ae06:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae0c:	4b0c      	ldr	r3, [pc, #48]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae14:	4b0a      	ldr	r3, [pc, #40]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ae1a:	4b09      	ldr	r3, [pc, #36]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ae20:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ae26:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ae2c:	4804      	ldr	r0, [pc, #16]	; (800ae40 <MX_I2C1_Init+0x50>)
 800ae2e:	f7f6 fb0d 	bl	800144c <HAL_I2C_Init>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ae38:	f000 f9ca 	bl	800b1d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ae3c:	bf00      	nop
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	200008f0 	.word	0x200008f0
 800ae44:	40005400 	.word	0x40005400
 800ae48:	000186a0 	.word	0x000186a0

0800ae4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800ae50:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae52:	4a13      	ldr	r2, [pc, #76]	; (800aea0 <MX_I2C2_Init+0x54>)
 800ae54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800ae56:	4b11      	ldr	r3, [pc, #68]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae58:	4a12      	ldr	r2, [pc, #72]	; (800aea4 <MX_I2C2_Init+0x58>)
 800ae5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ae5c:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800ae62:	4b0e      	ldr	r3, [pc, #56]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae68:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae70:	4b0a      	ldr	r3, [pc, #40]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800ae76:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ae7c:	4b07      	ldr	r3, [pc, #28]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ae82:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ae88:	4804      	ldr	r0, [pc, #16]	; (800ae9c <MX_I2C2_Init+0x50>)
 800ae8a:	f7f6 fadf 	bl	800144c <HAL_I2C_Init>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800ae94:	f000 f99c 	bl	800b1d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800ae98:	bf00      	nop
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	20000944 	.word	0x20000944
 800aea0:	40005800 	.word	0x40005800
 800aea4:	000186a0 	.word	0x000186a0

0800aea8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800aeac:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <MX_RTC_Init+0x44>)
 800aeae:	4a10      	ldr	r2, [pc, #64]	; (800aef0 <MX_RTC_Init+0x48>)
 800aeb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800aeb2:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <MX_RTC_Init+0x44>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800aeb8:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <MX_RTC_Init+0x44>)
 800aeba:	227f      	movs	r2, #127	; 0x7f
 800aebc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800aebe:	4b0b      	ldr	r3, [pc, #44]	; (800aeec <MX_RTC_Init+0x44>)
 800aec0:	22ff      	movs	r2, #255	; 0xff
 800aec2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800aec4:	4b09      	ldr	r3, [pc, #36]	; (800aeec <MX_RTC_Init+0x44>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800aeca:	4b08      	ldr	r3, [pc, #32]	; (800aeec <MX_RTC_Init+0x44>)
 800aecc:	2200      	movs	r2, #0
 800aece:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800aed0:	4b06      	ldr	r3, [pc, #24]	; (800aeec <MX_RTC_Init+0x44>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800aed6:	4805      	ldr	r0, [pc, #20]	; (800aeec <MX_RTC_Init+0x44>)
 800aed8:	f7f9 ff4c 	bl	8004d74 <HAL_RTC_Init>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800aee2:	f000 f975 	bl	800b1d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800aee6:	bf00      	nop
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	200009dc 	.word	0x200009dc
 800aef0:	40002800 	.word	0x40002800

0800aef4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800aef8:	4b14      	ldr	r3, [pc, #80]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800aefa:	4a15      	ldr	r2, [pc, #84]	; (800af50 <MX_SDIO_SD_Init+0x5c>)
 800aefc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af00:	2200      	movs	r2, #0
 800af02:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800af04:	4b11      	ldr	r3, [pc, #68]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af06:	2200      	movs	r2, #0
 800af08:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800af0a:	4b10      	ldr	r3, [pc, #64]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800af10:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af12:	2200      	movs	r2, #0
 800af14:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af18:	2200      	movs	r2, #0
 800af1a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800af1c:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af1e:	2200      	movs	r2, #0
 800af20:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800af22:	480a      	ldr	r0, [pc, #40]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af24:	f7fa f80b 	bl	8004f3e <HAL_SD_Init>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800af2e:	f000 f94f 	bl	800b1d0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800af32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af36:	4805      	ldr	r0, [pc, #20]	; (800af4c <MX_SDIO_SD_Init+0x58>)
 800af38:	f7fa fa54 	bl	80053e4 <HAL_SD_ConfigWideBusOperation>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800af42:	f000 f945 	bl	800b1d0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800af46:	bf00      	nop
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	200009fc 	.word	0x200009fc
 800af50:	40012c00 	.word	0x40012c00

0800af54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08e      	sub	sp, #56	; 0x38
 800af58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	605a      	str	r2, [r3, #4]
 800af64:	609a      	str	r2, [r3, #8]
 800af66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af68:	f107 0320 	add.w	r3, r7, #32
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af72:	1d3b      	adds	r3, r7, #4
 800af74:	2200      	movs	r2, #0
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	605a      	str	r2, [r3, #4]
 800af7a:	609a      	str	r2, [r3, #8]
 800af7c:	60da      	str	r2, [r3, #12]
 800af7e:	611a      	str	r2, [r3, #16]
 800af80:	615a      	str	r2, [r3, #20]
 800af82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800af84:	4b2b      	ldr	r3, [pc, #172]	; (800b034 <MX_TIM2_Init+0xe0>)
 800af86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800af8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800af8c:	4b29      	ldr	r3, [pc, #164]	; (800b034 <MX_TIM2_Init+0xe0>)
 800af8e:	2248      	movs	r2, #72	; 0x48
 800af90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af92:	4b28      	ldr	r3, [pc, #160]	; (800b034 <MX_TIM2_Init+0xe0>)
 800af94:	2200      	movs	r2, #0
 800af96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 800af98:	4b26      	ldr	r3, [pc, #152]	; (800b034 <MX_TIM2_Init+0xe0>)
 800af9a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800af9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afa0:	4b24      	ldr	r3, [pc, #144]	; (800b034 <MX_TIM2_Init+0xe0>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800afa6:	4b23      	ldr	r3, [pc, #140]	; (800b034 <MX_TIM2_Init+0xe0>)
 800afa8:	2280      	movs	r2, #128	; 0x80
 800afaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800afac:	4821      	ldr	r0, [pc, #132]	; (800b034 <MX_TIM2_Init+0xe0>)
 800afae:	f7fa fd76 	bl	8005a9e <HAL_TIM_Base_Init>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800afb8:	f000 f90a 	bl	800b1d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800afbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800afc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800afc6:	4619      	mov	r1, r3
 800afc8:	481a      	ldr	r0, [pc, #104]	; (800b034 <MX_TIM2_Init+0xe0>)
 800afca:	f7fa ffd7 	bl	8005f7c <HAL_TIM_ConfigClockSource>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800afd4:	f000 f8fc 	bl	800b1d0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800afd8:	4816      	ldr	r0, [pc, #88]	; (800b034 <MX_TIM2_Init+0xe0>)
 800afda:	f7fa fe11 	bl	8005c00 <HAL_TIM_OC_Init>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800afe4:	f000 f8f4 	bl	800b1d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afe8:	2300      	movs	r3, #0
 800afea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afec:	2300      	movs	r3, #0
 800afee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aff0:	f107 0320 	add.w	r3, r7, #32
 800aff4:	4619      	mov	r1, r3
 800aff6:	480f      	ldr	r0, [pc, #60]	; (800b034 <MX_TIM2_Init+0xe0>)
 800aff8:	f7fb fb60 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800b002:	f000 f8e5 	bl	800b1d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800b006:	2300      	movs	r3, #0
 800b008:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b016:	1d3b      	adds	r3, r7, #4
 800b018:	2200      	movs	r2, #0
 800b01a:	4619      	mov	r1, r3
 800b01c:	4805      	ldr	r0, [pc, #20]	; (800b034 <MX_TIM2_Init+0xe0>)
 800b01e:	f7fa ff51 	bl	8005ec4 <HAL_TIM_OC_ConfigChannel>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800b028:	f000 f8d2 	bl	800b1d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b02c:	bf00      	nop
 800b02e:	3738      	adds	r7, #56	; 0x38
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	20000a80 	.word	0x20000a80

0800b038 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b03c:	4b11      	ldr	r3, [pc, #68]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b03e:	4a12      	ldr	r2, [pc, #72]	; (800b088 <MX_USART1_UART_Init+0x50>)
 800b040:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b042:	4b10      	ldr	r3, [pc, #64]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b048:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b04a:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b050:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b052:	2200      	movs	r2, #0
 800b054:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b056:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b058:	2200      	movs	r2, #0
 800b05a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b05e:	220c      	movs	r2, #12
 800b060:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b062:	4b08      	ldr	r3, [pc, #32]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b064:	2200      	movs	r2, #0
 800b066:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b068:	4b06      	ldr	r3, [pc, #24]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b06e:	4805      	ldr	r0, [pc, #20]	; (800b084 <MX_USART1_UART_Init+0x4c>)
 800b070:	f7fb fba6 	bl	80067c0 <HAL_UART_Init>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b07a:	f000 f8a9 	bl	800b1d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b07e:	bf00      	nop
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000998 	.word	0x20000998
 800b088:	40011000 	.word	0x40011000

0800b08c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b092:	2300      	movs	r3, #0
 800b094:	607b      	str	r3, [r7, #4]
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <MX_DMA_Init+0x3c>)
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	4a0b      	ldr	r2, [pc, #44]	; (800b0c8 <MX_DMA_Init+0x3c>)
 800b09c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0a0:	6313      	str	r3, [r2, #48]	; 0x30
 800b0a2:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <MX_DMA_Init+0x3c>)
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0aa:	607b      	str	r3, [r7, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	200c      	movs	r0, #12
 800b0b4:	f7f5 fcc1 	bl	8000a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b0b8:	200c      	movs	r0, #12
 800b0ba:	f7f5 fcda 	bl	8000a72 <HAL_NVIC_EnableIRQ>

}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	40023800 	.word	0x40023800

0800b0cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08a      	sub	sp, #40	; 0x28
 800b0d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d2:	f107 0314 	add.w	r3, r7, #20
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	605a      	str	r2, [r3, #4]
 800b0dc:	609a      	str	r2, [r3, #8]
 800b0de:	60da      	str	r2, [r3, #12]
 800b0e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	4b37      	ldr	r3, [pc, #220]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	4a36      	ldr	r2, [pc, #216]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b0ec:	f043 0304 	orr.w	r3, r3, #4
 800b0f0:	6313      	str	r3, [r2, #48]	; 0x30
 800b0f2:	4b34      	ldr	r3, [pc, #208]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	4b30      	ldr	r3, [pc, #192]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b106:	4a2f      	ldr	r2, [pc, #188]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b10c:	6313      	str	r3, [r2, #48]	; 0x30
 800b10e:	4b2d      	ldr	r3, [pc, #180]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b11a:	2300      	movs	r3, #0
 800b11c:	60bb      	str	r3, [r7, #8]
 800b11e:	4b29      	ldr	r3, [pc, #164]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b122:	4a28      	ldr	r2, [pc, #160]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b124:	f043 0301 	orr.w	r3, r3, #1
 800b128:	6313      	str	r3, [r2, #48]	; 0x30
 800b12a:	4b26      	ldr	r3, [pc, #152]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	60bb      	str	r3, [r7, #8]
 800b134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
 800b13a:	4b22      	ldr	r3, [pc, #136]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	4a21      	ldr	r2, [pc, #132]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b140:	f043 0302 	orr.w	r3, r3, #2
 800b144:	6313      	str	r3, [r2, #48]	; 0x30
 800b146:	4b1f      	ldr	r3, [pc, #124]	; (800b1c4 <MX_GPIO_Init+0xf8>)
 800b148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	607b      	str	r3, [r7, #4]
 800b150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800b152:	2200      	movs	r2, #0
 800b154:	f243 010f 	movw	r1, #12303	; 0x300f
 800b158:	481b      	ldr	r0, [pc, #108]	; (800b1c8 <MX_GPIO_Init+0xfc>)
 800b15a:	f7f6 f943 	bl	80013e4 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800b15e:	2200      	movs	r2, #0
 800b160:	2107      	movs	r1, #7
 800b162:	481a      	ldr	r0, [pc, #104]	; (800b1cc <MX_GPIO_Init+0x100>)
 800b164:	f7f6 f93e 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800b168:	f243 030f 	movw	r3, #12303	; 0x300f
 800b16c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b16e:	2301      	movs	r3, #1
 800b170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b176:	2300      	movs	r3, #0
 800b178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b17a:	f107 0314 	add.w	r3, r7, #20
 800b17e:	4619      	mov	r1, r3
 800b180:	4811      	ldr	r0, [pc, #68]	; (800b1c8 <MX_GPIO_Init+0xfc>)
 800b182:	f7f5 ffab 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800b186:	2307      	movs	r3, #7
 800b188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b18a:	2301      	movs	r3, #1
 800b18c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b192:	2300      	movs	r3, #0
 800b194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b196:	f107 0314 	add.w	r3, r7, #20
 800b19a:	4619      	mov	r1, r3
 800b19c:	480b      	ldr	r0, [pc, #44]	; (800b1cc <MX_GPIO_Init+0x100>)
 800b19e:	f7f5 ff9d 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800b1a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800b1b0:	f107 0314 	add.w	r3, r7, #20
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4805      	ldr	r0, [pc, #20]	; (800b1cc <MX_GPIO_Init+0x100>)
 800b1b8:	f7f5 ff90 	bl	80010dc <HAL_GPIO_Init>

}
 800b1bc:	bf00      	nop
 800b1be:	3728      	adds	r7, #40	; 0x28
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	40023800 	.word	0x40023800
 800b1c8:	40020800 	.word	0x40020800
 800b1cc:	40020000 	.word	0x40020000

0800b1d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b1d4:	b672      	cpsid	i
}
 800b1d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b1d8:	e7fe      	b.n	800b1d8 <Error_Handler+0x8>
	...

0800b1dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	607b      	str	r3, [r7, #4]
 800b1e6:	4b10      	ldr	r3, [pc, #64]	; (800b228 <HAL_MspInit+0x4c>)
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ea:	4a0f      	ldr	r2, [pc, #60]	; (800b228 <HAL_MspInit+0x4c>)
 800b1ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1f0:	6453      	str	r3, [r2, #68]	; 0x44
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <HAL_MspInit+0x4c>)
 800b1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1fa:	607b      	str	r3, [r7, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1fe:	2300      	movs	r3, #0
 800b200:	603b      	str	r3, [r7, #0]
 800b202:	4b09      	ldr	r3, [pc, #36]	; (800b228 <HAL_MspInit+0x4c>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	4a08      	ldr	r2, [pc, #32]	; (800b228 <HAL_MspInit+0x4c>)
 800b208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b20c:	6413      	str	r3, [r2, #64]	; 0x40
 800b20e:	4b06      	ldr	r3, [pc, #24]	; (800b228 <HAL_MspInit+0x4c>)
 800b210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b216:	603b      	str	r3, [r7, #0]
 800b218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b21a:	bf00      	nop
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	40023800 	.word	0x40023800

0800b22c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08c      	sub	sp, #48	; 0x30
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b234:	f107 031c 	add.w	r3, r7, #28
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	605a      	str	r2, [r3, #4]
 800b23e:	609a      	str	r2, [r3, #8]
 800b240:	60da      	str	r2, [r3, #12]
 800b242:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a59      	ldr	r2, [pc, #356]	; (800b3b0 <HAL_I2C_MspInit+0x184>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d162      	bne.n	800b314 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b24e:	2300      	movs	r3, #0
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	4b58      	ldr	r3, [pc, #352]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b256:	4a57      	ldr	r2, [pc, #348]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b258:	f043 0302 	orr.w	r3, r3, #2
 800b25c:	6313      	str	r3, [r2, #48]	; 0x30
 800b25e:	4b55      	ldr	r3, [pc, #340]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	f003 0302 	and.w	r3, r3, #2
 800b266:	61bb      	str	r3, [r7, #24]
 800b268:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b26a:	23c0      	movs	r3, #192	; 0xc0
 800b26c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b26e:	2312      	movs	r3, #18
 800b270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b272:	2301      	movs	r3, #1
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b276:	2303      	movs	r3, #3
 800b278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b27a:	2304      	movs	r3, #4
 800b27c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b27e:	f107 031c 	add.w	r3, r7, #28
 800b282:	4619      	mov	r1, r3
 800b284:	484c      	ldr	r0, [pc, #304]	; (800b3b8 <HAL_I2C_MspInit+0x18c>)
 800b286:	f7f5 ff29 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	4b49      	ldr	r3, [pc, #292]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b292:	4a48      	ldr	r2, [pc, #288]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b298:	6413      	str	r3, [r2, #64]	; 0x40
 800b29a:	4b46      	ldr	r3, [pc, #280]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800b2a6:	4b45      	ldr	r3, [pc, #276]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2a8:	4a45      	ldr	r2, [pc, #276]	; (800b3c0 <HAL_I2C_MspInit+0x194>)
 800b2aa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800b2ac:	4b43      	ldr	r3, [pc, #268]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b2b2:	4b42      	ldr	r3, [pc, #264]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2b4:	2240      	movs	r2, #64	; 0x40
 800b2b6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2b8:	4b40      	ldr	r3, [pc, #256]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b2be:	4b3f      	ldr	r3, [pc, #252]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2c4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2c6:	4b3d      	ldr	r3, [pc, #244]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2cc:	4b3b      	ldr	r3, [pc, #236]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b2d2:	4b3a      	ldr	r3, [pc, #232]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b2d8:	4b38      	ldr	r3, [pc, #224]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b2de:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b2e0:	4b36      	ldr	r3, [pc, #216]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b2e6:	4835      	ldr	r0, [pc, #212]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2e8:	f7f5 fbde 	bl	8000aa8 <HAL_DMA_Init>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800b2f2:	f7ff ff6d 	bl	800b1d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a30      	ldr	r2, [pc, #192]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2fa:	635a      	str	r2, [r3, #52]	; 0x34
 800b2fc:	4a2f      	ldr	r2, [pc, #188]	; (800b3bc <HAL_I2C_MspInit+0x190>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800b302:	2200      	movs	r2, #0
 800b304:	2100      	movs	r1, #0
 800b306:	201f      	movs	r0, #31
 800b308:	f7f5 fb97 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b30c:	201f      	movs	r0, #31
 800b30e:	f7f5 fbb0 	bl	8000a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b312:	e049      	b.n	800b3a8 <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a2a      	ldr	r2, [pc, #168]	; (800b3c4 <HAL_I2C_MspInit+0x198>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d144      	bne.n	800b3a8 <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b31e:	2300      	movs	r3, #0
 800b320:	613b      	str	r3, [r7, #16]
 800b322:	4b24      	ldr	r3, [pc, #144]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b326:	4a23      	ldr	r2, [pc, #140]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b328:	f043 0302 	orr.w	r3, r3, #2
 800b32c:	6313      	str	r3, [r2, #48]	; 0x30
 800b32e:	4b21      	ldr	r3, [pc, #132]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	613b      	str	r3, [r7, #16]
 800b338:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b33e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b340:	2312      	movs	r3, #18
 800b342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b344:	2301      	movs	r3, #1
 800b346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b348:	2303      	movs	r3, #3
 800b34a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b34c:	2304      	movs	r3, #4
 800b34e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b350:	f107 031c 	add.w	r3, r7, #28
 800b354:	4619      	mov	r1, r3
 800b356:	4818      	ldr	r0, [pc, #96]	; (800b3b8 <HAL_I2C_MspInit+0x18c>)
 800b358:	f7f5 fec0 	bl	80010dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b35c:	2308      	movs	r3, #8
 800b35e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b360:	2312      	movs	r3, #18
 800b362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b364:	2301      	movs	r3, #1
 800b366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b368:	2303      	movs	r3, #3
 800b36a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800b36c:	2309      	movs	r3, #9
 800b36e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b370:	f107 031c 	add.w	r3, r7, #28
 800b374:	4619      	mov	r1, r3
 800b376:	4810      	ldr	r0, [pc, #64]	; (800b3b8 <HAL_I2C_MspInit+0x18c>)
 800b378:	f7f5 feb0 	bl	80010dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	4b0c      	ldr	r3, [pc, #48]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	4a0b      	ldr	r2, [pc, #44]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b38a:	6413      	str	r3, [r2, #64]	; 0x40
 800b38c:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <HAL_I2C_MspInit+0x188>)
 800b38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800b398:	2200      	movs	r2, #0
 800b39a:	2100      	movs	r1, #0
 800b39c:	2021      	movs	r0, #33	; 0x21
 800b39e:	f7f5 fb4c 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800b3a2:	2021      	movs	r0, #33	; 0x21
 800b3a4:	f7f5 fb65 	bl	8000a72 <HAL_NVIC_EnableIRQ>
}
 800b3a8:	bf00      	nop
 800b3aa:	3730      	adds	r7, #48	; 0x30
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	40005400 	.word	0x40005400
 800b3b4:	40023800 	.word	0x40023800
 800b3b8:	40020400 	.word	0x40020400
 800b3bc:	20000890 	.word	0x20000890
 800b3c0:	40026028 	.word	0x40026028
 800b3c4:	40005800 	.word	0x40005800

0800b3c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b088      	sub	sp, #32
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b3d0:	f107 0308 	add.w	r3, r7, #8
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	609a      	str	r2, [r3, #8]
 800b3dc:	60da      	str	r2, [r3, #12]
 800b3de:	611a      	str	r2, [r3, #16]
 800b3e0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a0c      	ldr	r2, [pc, #48]	; (800b418 <HAL_RTC_MspInit+0x50>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d111      	bne.n	800b410 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b3f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3f4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b3f6:	f107 0308 	add.w	r3, r7, #8
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7f9 fbca 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800b406:	f7ff fee3 	bl	800b1d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b40a:	4b04      	ldr	r3, [pc, #16]	; (800b41c <HAL_RTC_MspInit+0x54>)
 800b40c:	2201      	movs	r2, #1
 800b40e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b410:	bf00      	nop
 800b412:	3720      	adds	r7, #32
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	40002800 	.word	0x40002800
 800b41c:	42470e3c 	.word	0x42470e3c

0800b420 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08c      	sub	sp, #48	; 0x30
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b428:	f107 031c 	add.w	r3, r7, #28
 800b42c:	2200      	movs	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	605a      	str	r2, [r3, #4]
 800b432:	609a      	str	r2, [r3, #8]
 800b434:	60da      	str	r2, [r3, #12]
 800b436:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a38      	ldr	r2, [pc, #224]	; (800b520 <HAL_SD_MspInit+0x100>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d169      	bne.n	800b516 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b442:	2300      	movs	r3, #0
 800b444:	61bb      	str	r3, [r7, #24]
 800b446:	4b37      	ldr	r3, [pc, #220]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44a:	4a36      	ldr	r2, [pc, #216]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b44c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b450:	6453      	str	r3, [r2, #68]	; 0x44
 800b452:	4b34      	ldr	r3, [pc, #208]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b45a:	61bb      	str	r3, [r7, #24]
 800b45c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b45e:	2300      	movs	r3, #0
 800b460:	617b      	str	r3, [r7, #20]
 800b462:	4b30      	ldr	r3, [pc, #192]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b466:	4a2f      	ldr	r2, [pc, #188]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b468:	f043 0301 	orr.w	r3, r3, #1
 800b46c:	6313      	str	r3, [r2, #48]	; 0x30
 800b46e:	4b2d      	ldr	r3, [pc, #180]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	617b      	str	r3, [r7, #20]
 800b478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b47a:	2300      	movs	r3, #0
 800b47c:	613b      	str	r3, [r7, #16]
 800b47e:	4b29      	ldr	r3, [pc, #164]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b482:	4a28      	ldr	r2, [pc, #160]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b484:	f043 0302 	orr.w	r3, r3, #2
 800b488:	6313      	str	r3, [r2, #48]	; 0x30
 800b48a:	4b26      	ldr	r3, [pc, #152]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	613b      	str	r3, [r7, #16]
 800b494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
 800b49a:	4b22      	ldr	r3, [pc, #136]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49e:	4a21      	ldr	r2, [pc, #132]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b4a0:	f043 0304 	orr.w	r3, r3, #4
 800b4a4:	6313      	str	r3, [r2, #48]	; 0x30
 800b4a6:	4b1f      	ldr	r3, [pc, #124]	; (800b524 <HAL_SD_MspInit+0x104>)
 800b4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4aa:	f003 0304 	and.w	r3, r3, #4
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b4b2:	2340      	movs	r3, #64	; 0x40
 800b4b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4c6:	f107 031c 	add.w	r3, r7, #28
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4816      	ldr	r0, [pc, #88]	; (800b528 <HAL_SD_MspInit+0x108>)
 800b4ce:	f7f5 fe05 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b4d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4e8:	f107 031c 	add.w	r3, r7, #28
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	480f      	ldr	r0, [pc, #60]	; (800b52c <HAL_SD_MspInit+0x10c>)
 800b4f0:	f7f5 fdf4 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800b4f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b4f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b502:	2303      	movs	r3, #3
 800b504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b506:	230c      	movs	r3, #12
 800b508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b50a:	f107 031c 	add.w	r3, r7, #28
 800b50e:	4619      	mov	r1, r3
 800b510:	4807      	ldr	r0, [pc, #28]	; (800b530 <HAL_SD_MspInit+0x110>)
 800b512:	f7f5 fde3 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b516:	bf00      	nop
 800b518:	3730      	adds	r7, #48	; 0x30
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	40012c00 	.word	0x40012c00
 800b524:	40023800 	.word	0x40023800
 800b528:	40020000 	.word	0x40020000
 800b52c:	40020400 	.word	0x40020400
 800b530:	40020800 	.word	0x40020800

0800b534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b544:	d115      	bne.n	800b572 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b546:	2300      	movs	r3, #0
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <HAL_TIM_Base_MspInit+0x48>)
 800b54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54e:	4a0b      	ldr	r2, [pc, #44]	; (800b57c <HAL_TIM_Base_MspInit+0x48>)
 800b550:	f043 0301 	orr.w	r3, r3, #1
 800b554:	6413      	str	r3, [r2, #64]	; 0x40
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <HAL_TIM_Base_MspInit+0x48>)
 800b558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b562:	2200      	movs	r2, #0
 800b564:	2100      	movs	r1, #0
 800b566:	201c      	movs	r0, #28
 800b568:	f7f5 fa67 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b56c:	201c      	movs	r0, #28
 800b56e:	f7f5 fa80 	bl	8000a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	40023800 	.word	0x40023800

0800b580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08a      	sub	sp, #40	; 0x28
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b588:	f107 0314 	add.w	r3, r7, #20
 800b58c:	2200      	movs	r2, #0
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	605a      	str	r2, [r3, #4]
 800b592:	609a      	str	r2, [r3, #8]
 800b594:	60da      	str	r2, [r3, #12]
 800b596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a19      	ldr	r2, [pc, #100]	; (800b604 <HAL_UART_MspInit+0x84>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d12c      	bne.n	800b5fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	4b18      	ldr	r3, [pc, #96]	; (800b608 <HAL_UART_MspInit+0x88>)
 800b5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5aa:	4a17      	ldr	r2, [pc, #92]	; (800b608 <HAL_UART_MspInit+0x88>)
 800b5ac:	f043 0310 	orr.w	r3, r3, #16
 800b5b0:	6453      	str	r3, [r2, #68]	; 0x44
 800b5b2:	4b15      	ldr	r3, [pc, #84]	; (800b608 <HAL_UART_MspInit+0x88>)
 800b5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b6:	f003 0310 	and.w	r3, r3, #16
 800b5ba:	613b      	str	r3, [r7, #16]
 800b5bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	4b11      	ldr	r3, [pc, #68]	; (800b608 <HAL_UART_MspInit+0x88>)
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c6:	4a10      	ldr	r2, [pc, #64]	; (800b608 <HAL_UART_MspInit+0x88>)
 800b5c8:	f043 0301 	orr.w	r3, r3, #1
 800b5cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ce:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <HAL_UART_MspInit+0x88>)
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800b5da:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800b5de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b5ec:	2307      	movs	r3, #7
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5f0:	f107 0314 	add.w	r3, r7, #20
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4805      	ldr	r0, [pc, #20]	; (800b60c <HAL_UART_MspInit+0x8c>)
 800b5f8:	f7f5 fd70 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b5fc:	bf00      	nop
 800b5fe:	3728      	adds	r7, #40	; 0x28
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	40011000 	.word	0x40011000
 800b608:	40023800 	.word	0x40023800
 800b60c:	40020000 	.word	0x40020000

0800b610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800b614:	f7f9 faa2 	bl	8004b5c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b618:	e7fe      	b.n	800b618 <NMI_Handler+0x8>

0800b61a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b61a:	b480      	push	{r7}
 800b61c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b61e:	e7fe      	b.n	800b61e <HardFault_Handler+0x4>

0800b620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b624:	e7fe      	b.n	800b624 <MemManage_Handler+0x4>

0800b626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b626:	b480      	push	{r7}
 800b628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b62a:	e7fe      	b.n	800b62a <BusFault_Handler+0x4>

0800b62c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b62c:	b480      	push	{r7}
 800b62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b630:	e7fe      	b.n	800b630 <UsageFault_Handler+0x4>

0800b632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b632:	b480      	push	{r7}
 800b634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b636:	bf00      	nop
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b640:	b480      	push	{r7}
 800b642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b644:	bf00      	nop
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b64e:	b480      	push	{r7}
 800b650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b652:	bf00      	nop
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800b660:	f7fe ff6a 	bl	800a538 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b664:	f7f5 f8ca 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b668:	bf00      	nop
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b670:	4802      	ldr	r0, [pc, #8]	; (800b67c <DMA1_Stream1_IRQHandler+0x10>)
 800b672:	f7f5 fae9 	bl	8000c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b676:	bf00      	nop
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000890 	.word	0x20000890

0800b680 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b684:	4803      	ldr	r0, [pc, #12]	; (800b694 <TIM2_IRQHandler+0x14>)
 800b686:	f7fa fb14 	bl	8005cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800b68a:	f7ff fadd 	bl	800ac48 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800b68e:	bf00      	nop
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20000a80 	.word	0x20000a80

0800b698 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

//	TempCollect_I2CA_Done();

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b69c:	4802      	ldr	r0, [pc, #8]	; (800b6a8 <I2C1_EV_IRQHandler+0x10>)
 800b69e:	f7f6 f8d7 	bl	8001850 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b6a2:	bf00      	nop
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	200008f0 	.word	0x200008f0

0800b6ac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
//	TempCollect_I2CB_Done();

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b6b0:	4802      	ldr	r0, [pc, #8]	; (800b6bc <I2C2_EV_IRQHandler+0x10>)
 800b6b2:	f7f6 f8cd 	bl	8001850 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b6b6:	bf00      	nop
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000944 	.word	0x20000944

0800b6c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b6c4:	4802      	ldr	r0, [pc, #8]	; (800b6d0 <OTG_FS_IRQHandler+0x10>)
 800b6c6:	f7f7 fdc4 	bl	8003252 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b6ca:	bf00      	nop
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20001d98 	.word	0x20001d98

0800b6d4 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a0a      	ldr	r2, [pc, #40]	; (800b708 <HAL_I2C_MemRxCpltCallback+0x34>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d102      	bne.n	800b6ea <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
 800b6e4:	f7ff fac4 	bl	800ac70 <TempCollect_I2CA_Done>
	}
	else
	{
		AssertError(AppError_UndefinedError);
	}
}
 800b6e8:	e009      	b.n	800b6fe <HAL_I2C_MemRxCpltCallback+0x2a>
	else if ( hi2c == &hi2c2)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a07      	ldr	r2, [pc, #28]	; (800b70c <HAL_I2C_MemRxCpltCallback+0x38>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d102      	bne.n	800b6f8 <HAL_I2C_MemRxCpltCallback+0x24>
		TempCollect_I2CB_Done();
 800b6f2:	f7ff fac9 	bl	800ac88 <TempCollect_I2CB_Done>
}
 800b6f6:	e002      	b.n	800b6fe <HAL_I2C_MemRxCpltCallback+0x2a>
		AssertError(AppError_UndefinedError);
 800b6f8:	2008      	movs	r0, #8
 800b6fa:	f7ff f81b 	bl	800a734 <AssertError>
}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	200008f0 	.word	0x200008f0
 800b70c:	20000944 	.word	0x20000944

0800b710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b714:	4b06      	ldr	r3, [pc, #24]	; (800b730 <SystemInit+0x20>)
 800b716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b71a:	4a05      	ldr	r2, [pc, #20]	; (800b730 <SystemInit+0x20>)
 800b71c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b724:	bf00      	nop
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	e000ed00 	.word	0xe000ed00

0800b734 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b738:	2200      	movs	r2, #0
 800b73a:	4912      	ldr	r1, [pc, #72]	; (800b784 <MX_USB_DEVICE_Init+0x50>)
 800b73c:	4812      	ldr	r0, [pc, #72]	; (800b788 <MX_USB_DEVICE_Init+0x54>)
 800b73e:	f7fd fd5d 	bl	80091fc <USBD_Init>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b748:	f7ff fd42 	bl	800b1d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b74c:	490f      	ldr	r1, [pc, #60]	; (800b78c <MX_USB_DEVICE_Init+0x58>)
 800b74e:	480e      	ldr	r0, [pc, #56]	; (800b788 <MX_USB_DEVICE_Init+0x54>)
 800b750:	f7fd fd84 	bl	800925c <USBD_RegisterClass>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b75a:	f7ff fd39 	bl	800b1d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b75e:	490c      	ldr	r1, [pc, #48]	; (800b790 <MX_USB_DEVICE_Init+0x5c>)
 800b760:	4809      	ldr	r0, [pc, #36]	; (800b788 <MX_USB_DEVICE_Init+0x54>)
 800b762:	f7fd fcd5 	bl	8009110 <USBD_CDC_RegisterInterface>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b76c:	f7ff fd30 	bl	800b1d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b770:	4805      	ldr	r0, [pc, #20]	; (800b788 <MX_USB_DEVICE_Init+0x54>)
 800b772:	f7fd fd9a 	bl	80092aa <USBD_Start>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b77c:	f7ff fd28 	bl	800b1d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b780:	bf00      	nop
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20000130 	.word	0x20000130
 800b788:	20000ac8 	.word	0x20000ac8
 800b78c:	20000014 	.word	0x20000014
 800b790:	2000011c 	.word	0x2000011c

0800b794 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b798:	2200      	movs	r2, #0
 800b79a:	4905      	ldr	r1, [pc, #20]	; (800b7b0 <CDC_Init_FS+0x1c>)
 800b79c:	4805      	ldr	r0, [pc, #20]	; (800b7b4 <CDC_Init_FS+0x20>)
 800b79e:	f7fd fccc 	bl	800913a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b7a2:	4905      	ldr	r1, [pc, #20]	; (800b7b8 <CDC_Init_FS+0x24>)
 800b7a4:	4803      	ldr	r0, [pc, #12]	; (800b7b4 <CDC_Init_FS+0x20>)
 800b7a6:	f7fd fce6 	bl	8009176 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b7aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20001598 	.word	0x20001598
 800b7b4:	20000ac8 	.word	0x20000ac8
 800b7b8:	20000d98 	.word	0x20000d98

0800b7bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	6039      	str	r1, [r7, #0]
 800b7d6:	71fb      	strb	r3, [r7, #7]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	2b23      	cmp	r3, #35	; 0x23
 800b7e0:	d84a      	bhi.n	800b878 <CDC_Control_FS+0xac>
 800b7e2:	a201      	add	r2, pc, #4	; (adr r2, 800b7e8 <CDC_Control_FS+0x1c>)
 800b7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e8:	0800b879 	.word	0x0800b879
 800b7ec:	0800b879 	.word	0x0800b879
 800b7f0:	0800b879 	.word	0x0800b879
 800b7f4:	0800b879 	.word	0x0800b879
 800b7f8:	0800b879 	.word	0x0800b879
 800b7fc:	0800b879 	.word	0x0800b879
 800b800:	0800b879 	.word	0x0800b879
 800b804:	0800b879 	.word	0x0800b879
 800b808:	0800b879 	.word	0x0800b879
 800b80c:	0800b879 	.word	0x0800b879
 800b810:	0800b879 	.word	0x0800b879
 800b814:	0800b879 	.word	0x0800b879
 800b818:	0800b879 	.word	0x0800b879
 800b81c:	0800b879 	.word	0x0800b879
 800b820:	0800b879 	.word	0x0800b879
 800b824:	0800b879 	.word	0x0800b879
 800b828:	0800b879 	.word	0x0800b879
 800b82c:	0800b879 	.word	0x0800b879
 800b830:	0800b879 	.word	0x0800b879
 800b834:	0800b879 	.word	0x0800b879
 800b838:	0800b879 	.word	0x0800b879
 800b83c:	0800b879 	.word	0x0800b879
 800b840:	0800b879 	.word	0x0800b879
 800b844:	0800b879 	.word	0x0800b879
 800b848:	0800b879 	.word	0x0800b879
 800b84c:	0800b879 	.word	0x0800b879
 800b850:	0800b879 	.word	0x0800b879
 800b854:	0800b879 	.word	0x0800b879
 800b858:	0800b879 	.word	0x0800b879
 800b85c:	0800b879 	.word	0x0800b879
 800b860:	0800b879 	.word	0x0800b879
 800b864:	0800b879 	.word	0x0800b879
 800b868:	0800b879 	.word	0x0800b879
 800b86c:	0800b879 	.word	0x0800b879
 800b870:	0800b879 	.word	0x0800b879
 800b874:	0800b879 	.word	0x0800b879
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b878:	bf00      	nop
  }

  return (USBD_OK);
 800b87a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	4805      	ldr	r0, [pc, #20]	; (800b8ac <CDC_Receive_FS+0x24>)
 800b896:	f7fd fc6e 	bl	8009176 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b89a:	4804      	ldr	r0, [pc, #16]	; (800b8ac <CDC_Receive_FS+0x24>)
 800b89c:	f7fd fc84 	bl	80091a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b8a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000ac8 	.word	0x20000ac8

0800b8b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	371c      	adds	r7, #28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
	...

0800b8d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08a      	sub	sp, #40	; 0x28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8dc:	f107 0314 	add.w	r3, r7, #20
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	605a      	str	r2, [r3, #4]
 800b8e6:	609a      	str	r2, [r3, #8]
 800b8e8:	60da      	str	r2, [r3, #12]
 800b8ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8f4:	d147      	bne.n	800b986 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	613b      	str	r3, [r7, #16]
 800b8fa:	4b25      	ldr	r3, [pc, #148]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fe:	4a24      	ldr	r2, [pc, #144]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b900:	f043 0301 	orr.w	r3, r3, #1
 800b904:	6313      	str	r3, [r2, #48]	; 0x30
 800b906:	4b22      	ldr	r3, [pc, #136]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b912:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b918:	2300      	movs	r3, #0
 800b91a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b91c:	2300      	movs	r3, #0
 800b91e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b920:	f107 0314 	add.w	r3, r7, #20
 800b924:	4619      	mov	r1, r3
 800b926:	481b      	ldr	r0, [pc, #108]	; (800b994 <HAL_PCD_MspInit+0xc0>)
 800b928:	f7f5 fbd8 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b92c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b932:	2302      	movs	r3, #2
 800b934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b93a:	2303      	movs	r3, #3
 800b93c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b93e:	230a      	movs	r3, #10
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b942:	f107 0314 	add.w	r3, r7, #20
 800b946:	4619      	mov	r1, r3
 800b948:	4812      	ldr	r0, [pc, #72]	; (800b994 <HAL_PCD_MspInit+0xc0>)
 800b94a:	f7f5 fbc7 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b94e:	4b10      	ldr	r3, [pc, #64]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b952:	4a0f      	ldr	r2, [pc, #60]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b958:	6353      	str	r3, [r2, #52]	; 0x34
 800b95a:	2300      	movs	r3, #0
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	4b0c      	ldr	r3, [pc, #48]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b962:	4a0b      	ldr	r2, [pc, #44]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b968:	6453      	str	r3, [r2, #68]	; 0x44
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <HAL_PCD_MspInit+0xbc>)
 800b96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b976:	2200      	movs	r2, #0
 800b978:	2100      	movs	r1, #0
 800b97a:	2043      	movs	r0, #67	; 0x43
 800b97c:	f7f5 f85d 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b980:	2043      	movs	r0, #67	; 0x43
 800b982:	f7f5 f876 	bl	8000a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b986:	bf00      	nop
 800b988:	3728      	adds	r7, #40	; 0x28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	40023800 	.word	0x40023800
 800b994:	40020000 	.word	0x40020000

0800b998 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7fd fcc6 	bl	8009340 <USBD_LL_SetupStage>
}
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b9ce:	78fa      	ldrb	r2, [r7, #3]
 800b9d0:	6879      	ldr	r1, [r7, #4]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	00db      	lsls	r3, r3, #3
 800b9d6:	1a9b      	subs	r3, r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	440b      	add	r3, r1
 800b9dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	78fb      	ldrb	r3, [r7, #3]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7fd fd00 	bl	80093ea <USBD_LL_DataOutStage>
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ba04:	78fa      	ldrb	r2, [r7, #3]
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	1a9b      	subs	r3, r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	440b      	add	r3, r1
 800ba12:	3348      	adds	r3, #72	; 0x48
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	78fb      	ldrb	r3, [r7, #3]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f7fd fd49 	bl	80094b0 <USBD_LL_DataInStage>
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b082      	sub	sp, #8
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fd fe5d 	bl	80096f4 <USBD_LL_SOF>
}
 800ba3a:	bf00      	nop
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d001      	beq.n	800ba5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba56:	f7ff fbbb 	bl	800b1d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba60:	7bfa      	ldrb	r2, [r7, #15]
 800ba62:	4611      	mov	r1, r2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fd fe07 	bl	8009678 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fd fdb3 	bl	80095dc <USBD_LL_Reset>
}
 800ba76:	bf00      	nop
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fd fe02 	bl	8009698 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800baa6:	f043 0301 	orr.w	r3, r3, #1
 800baaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a1b      	ldr	r3, [r3, #32]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d005      	beq.n	800bac0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bab4:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <HAL_PCD_SuspendCallback+0x48>)
 800bab6:	691b      	ldr	r3, [r3, #16]
 800bab8:	4a03      	ldr	r2, [pc, #12]	; (800bac8 <HAL_PCD_SuspendCallback+0x48>)
 800baba:	f043 0306 	orr.w	r3, r3, #6
 800babe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bac0:	bf00      	nop
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	e000ed00 	.word	0xe000ed00

0800bacc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bada:	4618      	mov	r0, r3
 800badc:	f7fd fdf2 	bl	80096c4 <USBD_LL_Resume>
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bafa:	78fa      	ldrb	r2, [r7, #3]
 800bafc:	4611      	mov	r1, r2
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fd fe40 	bl	8009784 <USBD_LL_IsoOUTIncomplete>
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb1e:	78fa      	ldrb	r2, [r7, #3]
 800bb20:	4611      	mov	r1, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fd fe08 	bl	8009738 <USBD_LL_IsoINIncomplete>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fd fe46 	bl	80097d0 <USBD_LL_DevConnected>
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fd fe43 	bl	80097e6 <USBD_LL_DevDisconnected>
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d13c      	bne.n	800bbf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb78:	4a20      	ldr	r2, [pc, #128]	; (800bbfc <USBD_LL_Init+0x94>)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a1e      	ldr	r2, [pc, #120]	; (800bbfc <USBD_LL_Init+0x94>)
 800bb84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb88:	4b1c      	ldr	r3, [pc, #112]	; (800bbfc <USBD_LL_Init+0x94>)
 800bb8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb90:	4b1a      	ldr	r3, [pc, #104]	; (800bbfc <USBD_LL_Init+0x94>)
 800bb92:	2204      	movs	r2, #4
 800bb94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb96:	4b19      	ldr	r3, [pc, #100]	; (800bbfc <USBD_LL_Init+0x94>)
 800bb98:	2202      	movs	r2, #2
 800bb9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb9c:	4b17      	ldr	r3, [pc, #92]	; (800bbfc <USBD_LL_Init+0x94>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bba2:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <USBD_LL_Init+0x94>)
 800bba4:	2202      	movs	r2, #2
 800bba6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bba8:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bbae:	4b13      	ldr	r3, [pc, #76]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bbb4:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bbba:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bbc0:	4b0e      	ldr	r3, [pc, #56]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bbc6:	480d      	ldr	r0, [pc, #52]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbc8:	f7f7 f9f3 	bl	8002fb2 <HAL_PCD_Init>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bbd2:	f7ff fafd 	bl	800b1d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bbd6:	2180      	movs	r1, #128	; 0x80
 800bbd8:	4808      	ldr	r0, [pc, #32]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbda:	f7f8 fb50 	bl	800427e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bbde:	2240      	movs	r2, #64	; 0x40
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	4806      	ldr	r0, [pc, #24]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbe4:	f7f8 fb04 	bl	80041f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bbe8:	2280      	movs	r2, #128	; 0x80
 800bbea:	2101      	movs	r1, #1
 800bbec:	4803      	ldr	r0, [pc, #12]	; (800bbfc <USBD_LL_Init+0x94>)
 800bbee:	f7f8 faff 	bl	80041f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20001d98 	.word	0x20001d98

0800bc00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7f7 fae8 	bl	80031ec <HAL_PCD_Start>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 f942 	bl	800beac <USBD_Get_USB_Status>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	4608      	mov	r0, r1
 800bc40:	4611      	mov	r1, r2
 800bc42:	461a      	mov	r2, r3
 800bc44:	4603      	mov	r3, r0
 800bc46:	70fb      	strb	r3, [r7, #3]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70bb      	strb	r3, [r7, #2]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc5e:	78bb      	ldrb	r3, [r7, #2]
 800bc60:	883a      	ldrh	r2, [r7, #0]
 800bc62:	78f9      	ldrb	r1, [r7, #3]
 800bc64:	f7f7 fecc 	bl	8003a00 <HAL_PCD_EP_Open>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 f91c 	bl	800beac <USBD_Get_USB_Status>
 800bc74:	4603      	mov	r3, r0
 800bc76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc9c:	78fa      	ldrb	r2, [r7, #3]
 800bc9e:	4611      	mov	r1, r2
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7f7 ff15 	bl	8003ad0 <HAL_PCD_EP_Close>
 800bca6:	4603      	mov	r3, r0
 800bca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 f8fd 	bl	800beac <USBD_Get_USB_Status>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcda:	78fa      	ldrb	r2, [r7, #3]
 800bcdc:	4611      	mov	r1, r2
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7f7 ffed 	bl	8003cbe <HAL_PCD_EP_SetStall>
 800bce4:	4603      	mov	r3, r0
 800bce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	4618      	mov	r0, r3
 800bcec:	f000 f8de 	bl	800beac <USBD_Get_USB_Status>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b084      	sub	sp, #16
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd18:	78fa      	ldrb	r2, [r7, #3]
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7f8 f832 	bl	8003d86 <HAL_PCD_EP_ClrStall>
 800bd22:	4603      	mov	r3, r0
 800bd24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd26:	7bfb      	ldrb	r3, [r7, #15]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 f8bf 	bl	800beac <USBD_Get_USB_Status>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	da0b      	bge.n	800bd70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd58:	78fb      	ldrb	r3, [r7, #3]
 800bd5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd5e:	68f9      	ldr	r1, [r7, #12]
 800bd60:	4613      	mov	r3, r2
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	440b      	add	r3, r1
 800bd6a:	333e      	adds	r3, #62	; 0x3e
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	e00b      	b.n	800bd88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd76:	68f9      	ldr	r1, [r7, #12]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	1a9b      	subs	r3, r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	440b      	add	r3, r1
 800bd82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f7 fdff 	bl	80039b6 <HAL_PCD_SetAddress>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f874 	bl	800beac <USBD_Get_USB_Status>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b086      	sub	sp, #24
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	60f8      	str	r0, [r7, #12]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
 800bdde:	460b      	mov	r3, r1
 800bde0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bdf0:	7af9      	ldrb	r1, [r7, #11]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	f7f7 ff18 	bl	8003c2a <HAL_PCD_EP_Transmit>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	4618      	mov	r0, r3
 800be02:	f000 f853 	bl	800beac <USBD_Get_USB_Status>
 800be06:	4603      	mov	r3, r0
 800be08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	460b      	mov	r3, r1
 800be22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be32:	7af9      	ldrb	r1, [r7, #11]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	f7f7 fe94 	bl	8003b64 <HAL_PCD_EP_Receive>
 800be3c:	4603      	mov	r3, r0
 800be3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	4618      	mov	r0, r3
 800be44:	f000 f832 	bl	800beac <USBD_Get_USB_Status>
 800be48:	4603      	mov	r3, r0
 800be4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3718      	adds	r7, #24
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b082      	sub	sp, #8
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	460b      	mov	r3, r1
 800be60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be68:	78fa      	ldrb	r2, [r7, #3]
 800be6a:	4611      	mov	r1, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f7 fec4 	bl	8003bfa <HAL_PCD_EP_GetRxCount>
 800be72:	4603      	mov	r3, r0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be84:	4b03      	ldr	r3, [pc, #12]	; (800be94 <USBD_static_malloc+0x18>)
}
 800be86:	4618      	mov	r0, r3
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	200005f4 	.word	0x200005f4

0800be98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]

}
 800bea0:	bf00      	nop
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800beba:	79fb      	ldrb	r3, [r7, #7]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d817      	bhi.n	800bef0 <USBD_Get_USB_Status+0x44>
 800bec0:	a201      	add	r2, pc, #4	; (adr r2, 800bec8 <USBD_Get_USB_Status+0x1c>)
 800bec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec6:	bf00      	nop
 800bec8:	0800bed9 	.word	0x0800bed9
 800becc:	0800bedf 	.word	0x0800bedf
 800bed0:	0800bee5 	.word	0x0800bee5
 800bed4:	0800beeb 	.word	0x0800beeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
    break;
 800bedc:	e00b      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bede:	2303      	movs	r3, #3
 800bee0:	73fb      	strb	r3, [r7, #15]
    break;
 800bee2:	e008      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bee4:	2301      	movs	r3, #1
 800bee6:	73fb      	strb	r3, [r7, #15]
    break;
 800bee8:	e005      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beea:	2303      	movs	r3, #3
 800beec:	73fb      	strb	r3, [r7, #15]
    break;
 800beee:	e002      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bef0:	2303      	movs	r3, #3
 800bef2:	73fb      	strb	r3, [r7, #15]
    break;
 800bef4:	bf00      	nop
  }
  return usb_status;
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	6039      	str	r1, [r7, #0]
 800bf0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2212      	movs	r2, #18
 800bf14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bf16:	4b03      	ldr	r3, [pc, #12]	; (800bf24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	2000014c 	.word	0x2000014c

0800bf28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	6039      	str	r1, [r7, #0]
 800bf32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	2204      	movs	r2, #4
 800bf38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bf3a:	4b03      	ldr	r3, [pc, #12]	; (800bf48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	20000160 	.word	0x20000160

0800bf4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	4603      	mov	r3, r0
 800bf54:	6039      	str	r1, [r7, #0]
 800bf56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d105      	bne.n	800bf6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	4907      	ldr	r1, [pc, #28]	; (800bf80 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf62:	4808      	ldr	r0, [pc, #32]	; (800bf84 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf64:	f7fe f9d3 	bl	800a30e <USBD_GetString>
 800bf68:	e004      	b.n	800bf74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	4904      	ldr	r1, [pc, #16]	; (800bf80 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf6e:	4805      	ldr	r0, [pc, #20]	; (800bf84 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf70:	f7fe f9cd 	bl	800a30e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf74:	4b02      	ldr	r3, [pc, #8]	; (800bf80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	200021a0 	.word	0x200021a0
 800bf84:	0800c1e8 	.word	0x0800c1e8

0800bf88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	4904      	ldr	r1, [pc, #16]	; (800bfa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf98:	4804      	ldr	r0, [pc, #16]	; (800bfac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf9a:	f7fe f9b8 	bl	800a30e <USBD_GetString>
  return USBD_StrDesc;
 800bf9e:	4b02      	ldr	r3, [pc, #8]	; (800bfa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	200021a0 	.word	0x200021a0
 800bfac:	0800c200 	.word	0x0800c200

0800bfb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	6039      	str	r1, [r7, #0]
 800bfba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	221a      	movs	r2, #26
 800bfc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bfc2:	f000 f843 	bl	800c04c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bfc6:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20000164 	.word	0x20000164

0800bfd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	6039      	str	r1, [r7, #0]
 800bfde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d105      	bne.n	800bff2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	4907      	ldr	r1, [pc, #28]	; (800c008 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bfea:	4808      	ldr	r0, [pc, #32]	; (800c00c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bfec:	f7fe f98f 	bl	800a30e <USBD_GetString>
 800bff0:	e004      	b.n	800bffc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	4904      	ldr	r1, [pc, #16]	; (800c008 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bff6:	4805      	ldr	r0, [pc, #20]	; (800c00c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bff8:	f7fe f989 	bl	800a30e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bffc:	4b02      	ldr	r3, [pc, #8]	; (800c008 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	200021a0 	.word	0x200021a0
 800c00c:	0800c214 	.word	0x0800c214

0800c010 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	6039      	str	r1, [r7, #0]
 800c01a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c01c:	79fb      	ldrb	r3, [r7, #7]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d105      	bne.n	800c02e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	4907      	ldr	r1, [pc, #28]	; (800c044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c026:	4808      	ldr	r0, [pc, #32]	; (800c048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c028:	f7fe f971 	bl	800a30e <USBD_GetString>
 800c02c:	e004      	b.n	800c038 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	4904      	ldr	r1, [pc, #16]	; (800c044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c032:	4805      	ldr	r0, [pc, #20]	; (800c048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c034:	f7fe f96b 	bl	800a30e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c038:	4b02      	ldr	r3, [pc, #8]	; (800c044 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	200021a0 	.word	0x200021a0
 800c048:	0800c220 	.word	0x0800c220

0800c04c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c052:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <Get_SerialNum+0x44>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c058:	4b0e      	ldr	r3, [pc, #56]	; (800c094 <Get_SerialNum+0x48>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c05e:	4b0e      	ldr	r3, [pc, #56]	; (800c098 <Get_SerialNum+0x4c>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4413      	add	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d009      	beq.n	800c086 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c072:	2208      	movs	r2, #8
 800c074:	4909      	ldr	r1, [pc, #36]	; (800c09c <Get_SerialNum+0x50>)
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 f814 	bl	800c0a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c07c:	2204      	movs	r2, #4
 800c07e:	4908      	ldr	r1, [pc, #32]	; (800c0a0 <Get_SerialNum+0x54>)
 800c080:	68b8      	ldr	r0, [r7, #8]
 800c082:	f000 f80f 	bl	800c0a4 <IntToUnicode>
  }
}
 800c086:	bf00      	nop
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	1fff7a10 	.word	0x1fff7a10
 800c094:	1fff7a14 	.word	0x1fff7a14
 800c098:	1fff7a18 	.word	0x1fff7a18
 800c09c:	20000166 	.word	0x20000166
 800c0a0:	20000176 	.word	0x20000176

0800c0a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75fb      	strb	r3, [r7, #23]
 800c0ba:	e027      	b.n	800c10c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	0f1b      	lsrs	r3, r3, #28
 800c0c0:	2b09      	cmp	r3, #9
 800c0c2:	d80b      	bhi.n	800c0dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	0f1b      	lsrs	r3, r3, #28
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3230      	adds	r2, #48	; 0x30
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	e00a      	b.n	800c0f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	0f1b      	lsrs	r3, r3, #28
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	440b      	add	r3, r1
 800c0ec:	3237      	adds	r2, #55	; 0x37
 800c0ee:	b2d2      	uxtb	r2, r2
 800c0f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	011b      	lsls	r3, r3, #4
 800c0f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
 800c0fa:	005b      	lsls	r3, r3, #1
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	4413      	add	r3, r2
 800c102:	2200      	movs	r2, #0
 800c104:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c106:	7dfb      	ldrb	r3, [r7, #23]
 800c108:	3301      	adds	r3, #1
 800c10a:	75fb      	strb	r3, [r7, #23]
 800c10c:	7dfa      	ldrb	r2, [r7, #23]
 800c10e:	79fb      	ldrb	r3, [r7, #7]
 800c110:	429a      	cmp	r2, r3
 800c112:	d3d3      	bcc.n	800c0bc <IntToUnicode+0x18>
  }
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	371c      	adds	r7, #28
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
	...

0800c124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800c124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c15c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c128:	480d      	ldr	r0, [pc, #52]	; (800c160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800c12a:	490e      	ldr	r1, [pc, #56]	; (800c164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800c12c:	4a0e      	ldr	r2, [pc, #56]	; (800c168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800c12e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c130:	e002      	b.n	800c138 <LoopCopyDataInit>

0800c132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c136:	3304      	adds	r3, #4

0800c138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c13a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c13c:	d3f9      	bcc.n	800c132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c13e:	4a0b      	ldr	r2, [pc, #44]	; (800c16c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800c140:	4c0b      	ldr	r4, [pc, #44]	; (800c170 <LoopFillZerobss+0x26>)
  movs r3, #0
 800c142:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c144:	e001      	b.n	800c14a <LoopFillZerobss>

0800c146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c148:	3204      	adds	r2, #4

0800c14a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c14a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c14c:	d3fb      	bcc.n	800c146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c14e:	f7ff fadf 	bl	800b710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c152:	f000 f811 	bl	800c178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c156:	f7fe fda3 	bl	800aca0 <main>
  bx  lr    
 800c15a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800c15c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c164:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800c168:	0800c270 	.word	0x0800c270
  ldr r2, =_sbss
 800c16c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800c170:	200023a0 	.word	0x200023a0

0800c174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c174:	e7fe      	b.n	800c174 <ADC_IRQHandler>
	...

0800c178 <__libc_init_array>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	4d0d      	ldr	r5, [pc, #52]	; (800c1b0 <__libc_init_array+0x38>)
 800c17c:	4c0d      	ldr	r4, [pc, #52]	; (800c1b4 <__libc_init_array+0x3c>)
 800c17e:	1b64      	subs	r4, r4, r5
 800c180:	10a4      	asrs	r4, r4, #2
 800c182:	2600      	movs	r6, #0
 800c184:	42a6      	cmp	r6, r4
 800c186:	d109      	bne.n	800c19c <__libc_init_array+0x24>
 800c188:	4d0b      	ldr	r5, [pc, #44]	; (800c1b8 <__libc_init_array+0x40>)
 800c18a:	4c0c      	ldr	r4, [pc, #48]	; (800c1bc <__libc_init_array+0x44>)
 800c18c:	f000 f820 	bl	800c1d0 <_init>
 800c190:	1b64      	subs	r4, r4, r5
 800c192:	10a4      	asrs	r4, r4, #2
 800c194:	2600      	movs	r6, #0
 800c196:	42a6      	cmp	r6, r4
 800c198:	d105      	bne.n	800c1a6 <__libc_init_array+0x2e>
 800c19a:	bd70      	pop	{r4, r5, r6, pc}
 800c19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1a0:	4798      	blx	r3
 800c1a2:	3601      	adds	r6, #1
 800c1a4:	e7ee      	b.n	800c184 <__libc_init_array+0xc>
 800c1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1aa:	4798      	blx	r3
 800c1ac:	3601      	adds	r6, #1
 800c1ae:	e7f2      	b.n	800c196 <__libc_init_array+0x1e>
 800c1b0:	0800c268 	.word	0x0800c268
 800c1b4:	0800c268 	.word	0x0800c268
 800c1b8:	0800c268 	.word	0x0800c268
 800c1bc:	0800c26c 	.word	0x0800c26c

0800c1c0 <memset>:
 800c1c0:	4402      	add	r2, r0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d100      	bne.n	800c1ca <memset+0xa>
 800c1c8:	4770      	bx	lr
 800c1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ce:	e7f9      	b.n	800c1c4 <memset+0x4>

0800c1d0 <_init>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	bf00      	nop
 800c1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d6:	bc08      	pop	{r3}
 800c1d8:	469e      	mov	lr, r3
 800c1da:	4770      	bx	lr

0800c1dc <_fini>:
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1de:	bf00      	nop
 800c1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e2:	bc08      	pop	{r3}
 800c1e4:	469e      	mov	lr, r3
 800c1e6:	4770      	bx	lr
