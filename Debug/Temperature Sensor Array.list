
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be34  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800bfcc  0800bfcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c034  0800c034  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c03c  0800c03c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002220  20000180  0800c1c4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a0  0800c1c4  000223a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002694f  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce6  00000000  00000000  00046aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  0004b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  0004d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc9a  00000000  00000000  0004ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d7e  00000000  00000000  0006ca32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0671  00000000  00000000  000907b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130e21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007464  00000000  00000000  00130e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bfb4 	.word	0x0800bfb4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800bfb4 	.word	0x0800bfb4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d105      	bne.n	80004ec <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <OperateLED_A+0x34>)
 80004e6:	f000 feef 	bl	80012c8 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 80004ea:	e007      	b.n	80004fc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <OperateLED_A+0x34>)
 80004f8:	f000 fee6 	bl	80012c8 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800050c:	2102      	movs	r1, #2
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <ToggleLED_B+0x10>)
 8000510:	f000 fef3 	bl	80012fa <HAL_GPIO_TogglePin>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020800 	.word	0x40020800

0800051c <ToggleLED_D>:

void ToggleLED_D()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000520:	2108      	movs	r1, #8
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <ToggleLED_D+0x10>)
 8000524:	f000 fee9 	bl	80012fa <HAL_GPIO_TogglePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020800 	.word	0x40020800

08000530 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d106      	bne.n	800054e <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4808      	ldr	r0, [pc, #32]	; (8000568 <OperateSensorPower_A+0x38>)
 8000548:	f000 febe 	bl	80012c8 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
	}
}
 800054c:	e008      	b.n	8000560 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d105      	bne.n	8000560 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <OperateSensorPower_A+0x38>)
 800055c:	f000 feb4 	bl	80012c8 <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020800 	.word	0x40020800

0800056c <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d106      	bne.n	800058a <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000584:	f000 fea0 	bl	80012c8 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
	}
}
 8000588:	e008      	b.n	800059c <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d105      	bne.n	800059c <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000598:	f000 fe96 	bl	80012c8 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020800 	.word	0x40020800

080005a8 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ffbf 	bl	8000530 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffda 	bl	800056c <OperateSensorPower_B>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6858      	ldr	r0, [r3, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	b299      	uxth	r1, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3308      	adds	r3, #8
 80005d2:	2202      	movs	r2, #2
 80005d4:	9201      	str	r2, [sp, #4]
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	2205      	movs	r2, #5
 80005dc:	f000 ffec 	bl	80015b8 <HAL_I2C_Mem_Read_IT>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <MCP9808_DecodeTemperature>:

float MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	81fb      	strh	r3, [r7, #14]
	uint16_t u16FixedPointReadingHigh = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	81bb      	strh	r3, [r7, #12]
	uint16_t u16FixedPointReading = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	817b      	strh	r3, [r7, #10]

	u16FixedPointReadingLow = (kSensor->u16RawMeasurement[0]) << 8;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	7a1b      	ldrb	r3, [r3, #8]
 8000600:	b29b      	uxth	r3, r3
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	81fb      	strh	r3, [r7, #14]
	u16FixedPointReadingHigh = (kSensor->u16RawMeasurement[1]) >> 8;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7a5b      	ldrb	r3, [r3, #9]
 800060a:	121b      	asrs	r3, r3, #8
 800060c:	81bb      	strh	r3, [r7, #12]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 800060e:	89fa      	ldrh	r2, [r7, #14]
 8000610:	89bb      	ldrh	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	817b      	strh	r3, [r7, #10]

	return (float)(u16FixedPointReading) / 16;
 8000616:	897b      	ldrh	r3, [r7, #10]
 8000618:	ee07 3a90 	vmov	s15, r3
 800061c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000620:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000624:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000628:	eef0 7a66 	vmov.f32	s15, s13
}
 800062c:	eeb0 0a67 	vmov.f32	s0, s15
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_Init+0x40>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <HAL_Init+0x40>)
 8000646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800064a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <HAL_Init+0x40>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <HAL_Init+0x40>)
 8000652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x40>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x40>)
 800065e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f94f 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f00a fcc0 	bl	800aff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023c00 	.word	0x40023c00

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f967 	bl	8000972 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f92f 	bl	800091e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000118 	.word	0x20000118
 80006d8:	20000004 	.word	0x20000004
 80006dc:	20000000 	.word	0x20000000

080006e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_IncTick+0x20>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_IncTick+0x24>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_IncTick+0x24>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004
 8000704:	2000088c 	.word	0x2000088c

08000708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <HAL_GetTick+0x14>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	2000088c 	.word	0x2000088c

08000720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000728:	f7ff ffee 	bl	8000708 <HAL_GetTick>
 800072c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000738:	d005      	beq.n	8000746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_Delay+0x44>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000746:	bf00      	nop
 8000748:	f7ff ffde 	bl	8000708 <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	429a      	cmp	r2, r3
 8000756:	d8f7      	bhi.n	8000748 <HAL_Delay+0x28>
  {
  }
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	; (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4907      	ldr	r1, [pc, #28]	; (8000804 <__NVIC_EnableIRQ+0x38>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	; (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	; (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	; 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff8e 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff29 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff3e 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff8e 	bl	800085c <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5d 	bl	8000808 <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff31 	bl	80007cc <__NVIC_EnableIRQ>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffa2 	bl	80008c4 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff feb6 	bl	8000708 <HAL_GetTick>
 800099c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e099      	b.n	8000adc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2202      	movs	r2, #2
 80009ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 0201 	bic.w	r2, r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009c8:	e00f      	b.n	80009ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009ca:	f7ff fe9d 	bl	8000708 <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d908      	bls.n	80009ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2220      	movs	r2, #32
 80009dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2203      	movs	r2, #3
 80009e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80009e6:	2303      	movs	r3, #3
 80009e8:	e078      	b.n	8000adc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1e8      	bne.n	80009ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <HAL_DMA_Init+0x158>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a1b      	ldr	r3, [r3, #32]
 8000a34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d107      	bne.n	8000a54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f023 0307 	bic.w	r3, r3, #7
 8000a6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d117      	bne.n	8000aae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00e      	beq.n	8000aae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fa19 	bl	8000ec8 <DMA_CheckFifoParam>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d008      	beq.n	8000aae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e016      	b.n	8000adc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f9d0 	bl	8000e5c <DMA_CalcBaseAndBitshift>
 8000abc:	4603      	mov	r3, r0
 8000abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	223f      	movs	r2, #63	; 0x3f
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	f010803f 	.word	0xf010803f

08000ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d004      	beq.n	8000b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00c      	b.n	8000b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2205      	movs	r2, #5
 8000b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 0201 	bic.w	r2, r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b38:	4b92      	ldr	r3, [pc, #584]	; (8000d84 <HAL_DMA_IRQHandler+0x258>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a92      	ldr	r2, [pc, #584]	; (8000d88 <HAL_DMA_IRQHandler+0x25c>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	0a9b      	lsrs	r3, r3, #10
 8000b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	2208      	movs	r2, #8
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01a      	beq.n	8000b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d013      	beq.n	8000b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0204 	bic.w	r2, r2, #4
 8000b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b84:	2208      	movs	r2, #8
 8000b86:	409a      	lsls	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b90:	f043 0201 	orr.w	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d012      	beq.n	8000bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	2201      	movs	r2, #1
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc6:	f043 0202 	orr.w	r2, r3, #2
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d012      	beq.n	8000c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00b      	beq.n	8000c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bfc:	f043 0204 	orr.w	r2, r3, #4
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c08:	2210      	movs	r2, #16
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d043      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d03c      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c26:	2210      	movs	r2, #16
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d018      	beq.n	8000c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d108      	bne.n	8000c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d024      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	4798      	blx	r3
 8000c5a:	e01f      	b.n	8000c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d01b      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	4798      	blx	r3
 8000c6c:	e016      	b.n	8000c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d107      	bne.n	8000c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0208 	bic.w	r2, r2, #8
 8000c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 808e 	beq.w	8000dca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 8086 	beq.w	8000dca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b05      	cmp	r3, #5
 8000cd4:	d136      	bne.n	8000d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 0216 	bic.w	r2, r2, #22
 8000ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	695a      	ldr	r2, [r3, #20]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d103      	bne.n	8000d06 <HAL_DMA_IRQHandler+0x1da>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d007      	beq.n	8000d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 0208 	bic.w	r2, r2, #8
 8000d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1a:	223f      	movs	r2, #63	; 0x3f
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d07d      	beq.n	8000e36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	4798      	blx	r3
        }
        return;
 8000d42:	e078      	b.n	8000e36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d01c      	beq.n	8000d8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d108      	bne.n	8000d72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d030      	beq.n	8000dca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	4798      	blx	r3
 8000d70:	e02b      	b.n	8000dca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d027      	beq.n	8000dca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	4798      	blx	r3
 8000d82:	e022      	b.n	8000dca <HAL_DMA_IRQHandler+0x29e>
 8000d84:	20000118 	.word	0x20000118
 8000d88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0210 	bic.w	r2, r2, #16
 8000da8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d032      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d022      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2205      	movs	r2, #5
 8000de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d307      	bcc.n	8000e12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f2      	bne.n	8000df6 <HAL_DMA_IRQHandler+0x2ca>
 8000e10:	e000      	b.n	8000e14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000e12:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	4798      	blx	r3
 8000e34:	e000      	b.n	8000e38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e36:	bf00      	nop
    }
  }
}
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop

08000e40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e4e:	b2db      	uxtb	r3, r3
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	3b10      	subs	r3, #16
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <DMA_CalcBaseAndBitshift+0x64>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <DMA_CalcBaseAndBitshift+0x68>)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d909      	bls.n	8000e9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	1d1a      	adds	r2, r3, #4
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8000e9c:	e007      	b.n	8000eae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ea6:	f023 0303 	bic.w	r3, r3, #3
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	aaaaaaab 	.word	0xaaaaaaab
 8000ec4:	0800c014 	.word	0x0800c014

08000ec8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d11f      	bne.n	8000f22 <DMA_CheckFifoParam+0x5a>
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d856      	bhi.n	8000f96 <DMA_CheckFifoParam+0xce>
 8000ee8:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <DMA_CheckFifoParam+0x28>)
 8000eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eee:	bf00      	nop
 8000ef0:	08000f01 	.word	0x08000f01
 8000ef4:	08000f13 	.word	0x08000f13
 8000ef8:	08000f01 	.word	0x08000f01
 8000efc:	08000f97 	.word	0x08000f97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d046      	beq.n	8000f9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f10:	e043      	b.n	8000f9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f1a:	d140      	bne.n	8000f9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f20:	e03d      	b.n	8000f9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f2a:	d121      	bne.n	8000f70 <DMA_CheckFifoParam+0xa8>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d837      	bhi.n	8000fa2 <DMA_CheckFifoParam+0xda>
 8000f32:	a201      	add	r2, pc, #4	; (adr r2, 8000f38 <DMA_CheckFifoParam+0x70>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f49 	.word	0x08000f49
 8000f3c:	08000f4f 	.word	0x08000f4f
 8000f40:	08000f49 	.word	0x08000f49
 8000f44:	08000f61 	.word	0x08000f61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f4c:	e030      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d025      	beq.n	8000fa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f5e:	e022      	b.n	8000fa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f68:	d11f      	bne.n	8000faa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f6e:	e01c      	b.n	8000faa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d903      	bls.n	8000f7e <DMA_CheckFifoParam+0xb6>
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d003      	beq.n	8000f84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f7c:	e018      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
      break;
 8000f82:	e015      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00e      	beq.n	8000fae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
      break;
 8000f94:	e00b      	b.n	8000fae <DMA_CheckFifoParam+0xe6>
      break;
 8000f96:	bf00      	nop
 8000f98:	e00a      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8000f9a:	bf00      	nop
 8000f9c:	e008      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8000f9e:	bf00      	nop
 8000fa0:	e006      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fa2:	bf00      	nop
 8000fa4:	e004      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fa6:	bf00      	nop
 8000fa8:	e002      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8000faa:	bf00      	nop
 8000fac:	e000      	b.n	8000fb0 <DMA_CheckFifoParam+0xe8>
      break;
 8000fae:	bf00      	nop
    }
  } 
  
  return status; 
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e159      	b.n	8001290 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 8148 	bne.w	800128a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	2b02      	cmp	r3, #2
 8001010:	d130      	bne.n	8001074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d017      	beq.n	80010b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d123      	bne.n	8001104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	69b9      	ldr	r1, [r7, #24]
 8001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0203 	and.w	r2, r3, #3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80a2 	beq.w	800128a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001162:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a49      	ldr	r2, [pc, #292]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x202>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a48      	ldr	r2, [pc, #288]	; (80012b4 <HAL_GPIO_Init+0x2f4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x1fe>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <HAL_GPIO_Init+0x2f8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x1fa>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a46      	ldr	r2, [pc, #280]	; (80012bc <HAL_GPIO_Init+0x2fc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x1f6>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_GPIO_Init+0x300>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x1f2>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011b2:	2307      	movs	r3, #7
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_GPIO_Init+0x304>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x304>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001230:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125a:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <HAL_GPIO_Init+0x304>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001284:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f aea2 	bls.w	8000fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130c:	887a      	ldrh	r2, [r7, #2]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43d9      	mvns	r1, r3
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	400b      	ands	r3, r1
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e12b      	b.n	800159a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f009 fe74 	bl	800b044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	; 0x24
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001394:	f003 fb36 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8001398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a81      	ldr	r2, [pc, #516]	; (80015a4 <HAL_I2C_Init+0x274>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d807      	bhi.n	80013b4 <HAL_I2C_Init+0x84>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a80      	ldr	r2, [pc, #512]	; (80015a8 <HAL_I2C_Init+0x278>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf94      	ite	ls
 80013ac:	2301      	movls	r3, #1
 80013ae:	2300      	movhi	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e006      	b.n	80013c2 <HAL_I2C_Init+0x92>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a7d      	ldr	r2, [pc, #500]	; (80015ac <HAL_I2C_Init+0x27c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf94      	ite	ls
 80013bc:	2301      	movls	r3, #1
 80013be:	2300      	movhi	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0e7      	b.n	800159a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a78      	ldr	r2, [pc, #480]	; (80015b0 <HAL_I2C_Init+0x280>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a6a      	ldr	r2, [pc, #424]	; (80015a4 <HAL_I2C_Init+0x274>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d802      	bhi.n	8001404 <HAL_I2C_Init+0xd4>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	e009      	b.n	8001418 <HAL_I2C_Init+0xe8>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <HAL_I2C_Init+0x284>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	3301      	adds	r3, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	430b      	orrs	r3, r1
 800141e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800142a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	495c      	ldr	r1, [pc, #368]	; (80015a4 <HAL_I2C_Init+0x274>)
 8001434:	428b      	cmp	r3, r1
 8001436:	d819      	bhi.n	800146c <HAL_I2C_Init+0x13c>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e59      	subs	r1, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fbb1 f3f3 	udiv	r3, r1, r3
 8001446:	1c59      	adds	r1, r3, #1
 8001448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800144c:	400b      	ands	r3, r1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <HAL_I2C_Init+0x138>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1e59      	subs	r1, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001460:	3301      	adds	r3, #1
 8001462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001466:	e051      	b.n	800150c <HAL_I2C_Init+0x1dc>
 8001468:	2304      	movs	r3, #4
 800146a:	e04f      	b.n	800150c <HAL_I2C_Init+0x1dc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d111      	bne.n	8001498 <HAL_I2C_Init+0x168>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e58      	subs	r0, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	440b      	add	r3, r1
 8001482:	fbb0 f3f3 	udiv	r3, r0, r3
 8001486:	3301      	adds	r3, #1
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e012      	b.n	80014be <HAL_I2C_Init+0x18e>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e58      	subs	r0, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	0099      	lsls	r1, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Init+0x196>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e022      	b.n	800150c <HAL_I2C_Init+0x1dc>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10e      	bne.n	80014ec <HAL_I2C_Init+0x1bc>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e58      	subs	r0, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6859      	ldr	r1, [r3, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	440b      	add	r3, r1
 80014dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ea:	e00f      	b.n	800150c <HAL_I2C_Init+0x1dc>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	0099      	lsls	r1, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	4313      	orrs	r3, r2
 8001512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69da      	ldr	r2, [r3, #28]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800153a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6911      	ldr	r1, [r2, #16]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68d2      	ldr	r2, [r2, #12]
 8001546:	4311      	orrs	r1, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	430b      	orrs	r3, r1
 800154e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	000186a0 	.word	0x000186a0
 80015a8:	001e847f 	.word	0x001e847f
 80015ac:	003d08ff 	.word	0x003d08ff
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	10624dd3 	.word	0x10624dd3

080015b8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	4608      	mov	r0, r1
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	817b      	strh	r3, [r7, #10]
 80015ca:	460b      	mov	r3, r1
 80015cc:	813b      	strh	r3, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b20      	cmp	r3, #32
 80015e0:	f040 809a 	bne.w	8001718 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_I2C_Mem_Read_IT+0x170>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	08db      	lsrs	r3, r3, #3
 80015ea:	4a50      	ldr	r2, [pc, #320]	; (800172c <HAL_I2C_Mem_Read_IT+0x174>)
 80015ec:	fba2 2303 	umull	r2, r3, r2, r3
 80015f0:	0a1a      	lsrs	r2, r3, #8
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	009a      	lsls	r2, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3b01      	subs	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2220      	movs	r2, #32
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f043 0220 	orr.w	r2, r3, #32
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e070      	b.n	800171a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d0db      	beq.n	80015fe <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_I2C_Mem_Read_IT+0x9c>
 8001650:	2302      	movs	r3, #2
 8001652:	e062      	b.n	800171a <HAL_I2C_Mem_Read_IT+0x162>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d007      	beq.n	800167a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001688:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2222      	movs	r2, #34	; 0x22
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a3a      	ldr	r2, [r7, #32]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_I2C_Mem_Read_IT+0x178>)
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80016bc:	897a      	ldrh	r2, [r7, #10]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80016c2:	893a      	ldrh	r2, [r7, #8]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80016c8:	88fa      	ldrh	r2, [r7, #6]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016e2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016f2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001712:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001718:	2302      	movs	r3, #2
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000118 	.word	0x20000118
 800172c:	14f8b589 	.word	0x14f8b589
 8001730:	ffff0000 	.word	0xffff0000

08001734 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001754:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b10      	cmp	r3, #16
 8001762:	d003      	beq.n	800176c <HAL_I2C_EV_IRQHandler+0x38>
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b40      	cmp	r3, #64	; 0x40
 8001768:	f040 80c1 	bne.w	80018ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10d      	bne.n	80017a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800178c:	d003      	beq.n	8001796 <HAL_I2C_EV_IRQHandler+0x62>
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001794:	d101      	bne.n	800179a <HAL_I2C_EV_IRQHandler+0x66>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_I2C_EV_IRQHandler+0x68>
 800179a:	2300      	movs	r3, #0
 800179c:	2b01      	cmp	r3, #1
 800179e:	f000 8132 	beq.w	8001a06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00c      	beq.n	80017c6 <HAL_I2C_EV_IRQHandler+0x92>
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	0a5b      	lsrs	r3, r3, #9
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f001 fb5b 	bl	8002e74 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fcd2 	bl	8002168 <I2C_Master_SB>
 80017c4:	e092      	b.n	80018ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	0a5b      	lsrs	r3, r3, #9
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fd48 	bl	8002274 <I2C_Master_ADD10>
 80017e4:	e082      	b.n	80018ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_I2C_EV_IRQHandler+0xd2>
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	0a5b      	lsrs	r3, r3, #9
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fd62 	bl	80022c8 <I2C_Master_ADDR>
 8001804:	e072      	b.n	80018ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03b      	beq.n	800188a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001820:	f000 80f3 	beq.w	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	09db      	lsrs	r3, r3, #7
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00f      	beq.n	8001850 <HAL_I2C_EV_IRQHandler+0x11c>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	0a9b      	lsrs	r3, r3, #10
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <HAL_I2C_EV_IRQHandler+0x11c>
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f94c 	bl	8001ae6 <I2C_MasterTransmit_TXE>
 800184e:	e04d      	b.n	80018ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80d6 	beq.w	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	0a5b      	lsrs	r3, r3, #9
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80cf 	beq.w	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	2b21      	cmp	r3, #33	; 0x21
 8001870:	d103      	bne.n	800187a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f9d3 	bl	8001c1e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001878:	e0c7      	b.n	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	2b40      	cmp	r3, #64	; 0x40
 800187e:	f040 80c4 	bne.w	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa41 	bl	8001d0a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001888:	e0bf      	b.n	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001898:	f000 80b7 	beq.w	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00f      	beq.n	80018c8 <HAL_I2C_EV_IRQHandler+0x194>
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	0a9b      	lsrs	r3, r3, #10
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <HAL_I2C_EV_IRQHandler+0x194>
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 fab6 	bl	8001e32 <I2C_MasterReceive_RXNE>
 80018c6:	e011      	b.n	80018ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 809a 	beq.w	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	0a5b      	lsrs	r3, r3, #9
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8093 	beq.w	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fb55 	bl	8001f94 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ea:	e08e      	b.n	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80018ec:	e08d      	b.n	8001a0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e007      	b.n	8001910 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d012      	beq.n	8001942 <HAL_I2C_EV_IRQHandler+0x20e>
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	0a5b      	lsrs	r3, r3, #9
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001938:	69b9      	ldr	r1, [r7, #24]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 ff13 	bl	8002766 <I2C_Slave_ADDR>
 8001940:	e066      	b.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x22e>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	0a5b      	lsrs	r3, r3, #9
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 ff4e 	bl	80027fc <I2C_Slave_STOPF>
 8001960:	e056      	b.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	2b21      	cmp	r3, #33	; 0x21
 8001966:	d002      	beq.n	800196e <HAL_I2C_EV_IRQHandler+0x23a>
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	2b29      	cmp	r3, #41	; 0x29
 800196c:	d125      	bne.n	80019ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	09db      	lsrs	r3, r3, #7
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00f      	beq.n	800199a <HAL_I2C_EV_IRQHandler+0x266>
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	0a9b      	lsrs	r3, r3, #10
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_I2C_EV_IRQHandler+0x266>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fe29 	bl	80025ea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001998:	e039      	b.n	8001a0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d033      	beq.n	8001a0e <HAL_I2C_EV_IRQHandler+0x2da>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	0a5b      	lsrs	r3, r3, #9
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d02d      	beq.n	8001a0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fe56 	bl	8002664 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019b8:	e029      	b.n	8001a0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00f      	beq.n	80019e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	0a9b      	lsrs	r3, r3, #10
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fe61 	bl	80026a6 <I2C_SlaveReceive_RXNE>
 80019e4:	e014      	b.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00e      	beq.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	0a5b      	lsrs	r3, r3, #9
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fe8f 	bl	8002722 <I2C_SlaveReceive_BTF>
 8001a04:	e004      	b.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a06:	bf00      	nop
 8001a08:	e002      	b.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a0a:	bf00      	nop
 8001a0c:	e000      	b.n	8001a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	70fb      	strb	r3, [r7, #3]
 8001a72:	4613      	mov	r3, r2
 8001a74:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001afc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d150      	bne.n	8001bae <I2C_MasterTransmit_TXE+0xc8>
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b21      	cmp	r3, #33	; 0x21
 8001b10:	d14d      	bne.n	8001bae <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d01d      	beq.n	8001b54 <I2C_MasterTransmit_TXE+0x6e>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d01a      	beq.n	8001b54 <I2C_MasterTransmit_TXE+0x6e>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b24:	d016      	beq.n	8001b54 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b34:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2211      	movs	r2, #17
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff62 	bl	8001a16 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b52:	e060      	b.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b62:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b72:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d107      	bne.n	8001b9e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff7d 	bl	8001a96 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b9c:	e03b      	b.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff35 	bl	8001a16 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bac:	e033      	b.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	2b21      	cmp	r3, #33	; 0x21
 8001bb2:	d005      	beq.n	8001bc0 <I2C_MasterTransmit_TXE+0xda>
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	2b40      	cmp	r3, #64	; 0x40
 8001bb8:	d12d      	bne.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b22      	cmp	r3, #34	; 0x22
 8001bbe:	d12a      	bne.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001bda:	e01c      	b.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b40      	cmp	r3, #64	; 0x40
 8001be6:	d103      	bne.n	8001bf0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f88e 	bl	8001d0a <I2C_MemoryTransmit_TXE_BTF>
}
 8001bee:	e012      	b.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c14:	e7ff      	b.n	8001c16 <I2C_MasterTransmit_TXE+0x130>
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b21      	cmp	r3, #33	; 0x21
 8001c36:	d164      	bne.n	8001d02 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d012      	beq.n	8001c68 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c66:	e04c      	b.n	8001d02 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d01d      	beq.n	8001caa <I2C_MasterTransmit_BTF+0x8c>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d01a      	beq.n	8001caa <I2C_MasterTransmit_BTF+0x8c>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c7a:	d016      	beq.n	8001caa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c8a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2211      	movs	r2, #17
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff feb7 	bl	8001a16 <HAL_I2C_MasterTxCpltCallback>
}
 8001ca8:	e02b      	b.n	8001d02 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cb8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d107      	bne.n	8001cf4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fed2 	bl	8001a96 <HAL_I2C_MemTxCpltCallback>
}
 8001cf2:	e006      	b.n	8001d02 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fe8a 	bl	8001a16 <HAL_I2C_MasterTxCpltCallback>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d18:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11d      	bne.n	8001d5e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10b      	bne.n	8001d42 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3a:	1c9a      	adds	r2, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001d40:	e073      	b.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	121b      	asrs	r3, r3, #8
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d5c:	e065      	b.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10b      	bne.n	8001d7e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d7c:	e055      	b.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d151      	bne.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b22      	cmp	r3, #34	; 0x22
 8001d8a:	d10d      	bne.n	8001da8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001da6:	e040      	b.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	2b21      	cmp	r3, #33	; 0x21
 8001db6:	d112      	bne.n	8001dde <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ddc:	e025      	b.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d120      	bne.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b21      	cmp	r3, #33	; 0x21
 8001dec:	d11d      	bne.n	8001e2a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dfc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fe36 	bl	8001a96 <HAL_I2C_MemTxCpltCallback>
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b22      	cmp	r3, #34	; 0x22
 8001e44:	f040 80a2 	bne.w	8001f8c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d921      	bls.n	8001e9a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	f040 8082 	bne.w	8001f8c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001e98:	e078      	b.n	8001f8c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d074      	beq.n	8001f8c <I2C_MasterReceive_RXNE+0x15a>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d002      	beq.n	8001eae <I2C_MasterReceive_RXNE+0x7c>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d16e      	bne.n	8001f8c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 ffae 	bl	8002e10 <I2C_WaitOnSTOPRequestThroughIT>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d142      	bne.n	8001f40 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ed8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d10a      	bne.n	8001f2a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fdc1 	bl	8001aaa <HAL_I2C_MemRxCpltCallback>
}
 8001f28:	e030      	b.n	8001f8c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2212      	movs	r2, #18
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fd76 	bl	8001a2a <HAL_I2C_MasterRxCpltCallback>
}
 8001f3e:	e025      	b.n	8001f8c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fd99 	bl	8001abe <HAL_I2C_ErrorCallback>
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d11b      	bne.n	8001fe4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001fe2:	e0bd      	b.n	8002160 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d129      	bne.n	8002042 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d00a      	beq.n	800201a <I2C_MasterReceive_BTF+0x86>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d007      	beq.n	800201a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002018:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002040:	e08e      	b.n	8002160 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d176      	bne.n	800213a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d002      	beq.n	8002058 <I2C_MasterReceive_BTF+0xc4>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b10      	cmp	r3, #16
 8002056:	d108      	bne.n	800206a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e019      	b.n	800209e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d002      	beq.n	8002076 <I2C_MasterReceive_BTF+0xe2>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d108      	bne.n	8002088 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e00a      	b.n	800209e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d007      	beq.n	800209e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d10a      	bne.n	8002124 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fcc4 	bl	8001aaa <HAL_I2C_MemRxCpltCallback>
}
 8002122:	e01d      	b.n	8002160 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2212      	movs	r2, #18
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fc79 	bl	8001a2a <HAL_I2C_MasterRxCpltCallback>
}
 8002138:	e012      	b.n	8002160 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d117      	bne.n	80021ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002194:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002196:	e067      	b.n	8002268 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	611a      	str	r2, [r3, #16]
}
 80021aa:	e05d      	b.n	8002268 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b4:	d133      	bne.n	800221e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b21      	cmp	r3, #33	; 0x21
 80021c0:	d109      	bne.n	80021d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021d2:	611a      	str	r2, [r3, #16]
 80021d4:	e008      	b.n	80021e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <I2C_Master_SB+0x92>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d032      	beq.n	8002268 <I2C_Master_SB+0x100>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02d      	beq.n	8002268 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
}
 800221c:	e024      	b.n	8002268 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10e      	bne.n	8002244 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	b29b      	uxth	r3, r3
 800222c:	11db      	asrs	r3, r3, #7
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 0306 	and.w	r3, r3, #6
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f063 030f 	orn	r3, r3, #15
 800223a:	b2da      	uxtb	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	611a      	str	r2, [r3, #16]
}
 8002242:	e011      	b.n	8002268 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10d      	bne.n	8002268 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	b29b      	uxth	r3, r3
 8002252:	11db      	asrs	r3, r3, #7
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f003 0306 	and.w	r3, r3, #6
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f063 030e 	orn	r3, r3, #14
 8002260:	b2da      	uxtb	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	611a      	str	r2, [r3, #16]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	b2da      	uxtb	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <I2C_Master_ADD10+0x26>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <I2C_Master_ADD10+0x48>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	605a      	str	r2, [r3, #4]
  }
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b091      	sub	sp, #68	; 0x44
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b22      	cmp	r3, #34	; 0x22
 80022f0:	f040 8169 	bne.w	80025c6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10f      	bne.n	800231c <I2C_Master_ADDR+0x54>
 80022fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d10b      	bne.n	800231c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002304:	2300      	movs	r3, #0
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	e160      	b.n	80025de <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11d      	bne.n	8002360 <I2C_Master_ADDR+0x98>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800232c:	d118      	bne.n	8002360 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002352:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	651a      	str	r2, [r3, #80]	; 0x50
 800235e:	e13e      	b.n	80025de <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d113      	bne.n	8002392 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e115      	b.n	80025be <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 808a 	bne.w	80024b2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a4:	d137      	bne.n	8002416 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c4:	d113      	bne.n	80023ee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	e0e7      	b.n	80025be <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e0d3      	b.n	80025be <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2b08      	cmp	r3, #8
 800241a:	d02e      	beq.n	800247a <I2C_Master_ADDR+0x1b2>
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	2b20      	cmp	r3, #32
 8002420:	d02b      	beq.n	800247a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	2b12      	cmp	r3, #18
 8002426:	d102      	bne.n	800242e <I2C_Master_ADDR+0x166>
 8002428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242a:	2b01      	cmp	r3, #1
 800242c:	d125      	bne.n	800247a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	2b04      	cmp	r3, #4
 8002432:	d00e      	beq.n	8002452 <I2C_Master_ADDR+0x18a>
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	2b02      	cmp	r3, #2
 8002438:	d00b      	beq.n	8002452 <I2C_Master_ADDR+0x18a>
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	2b10      	cmp	r3, #16
 800243e:	d008      	beq.n	8002452 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e007      	b.n	8002462 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	e0a1      	b.n	80025be <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002488:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e085      	b.n	80025be <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d14d      	bne.n	8002558 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d016      	beq.n	80024f0 <I2C_Master_ADDR+0x228>
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d013      	beq.n	80024f0 <I2C_Master_ADDR+0x228>
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d010      	beq.n	80024f0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024dc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024fe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800250a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800250e:	d117      	bne.n	8002540 <I2C_Master_ADDR+0x278>
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002516:	d00b      	beq.n	8002530 <I2C_Master_ADDR+0x268>
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	2b01      	cmp	r3, #1
 800251c:	d008      	beq.n	8002530 <I2C_Master_ADDR+0x268>
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	2b08      	cmp	r3, #8
 8002522:	d005      	beq.n	8002530 <I2C_Master_ADDR+0x268>
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	2b10      	cmp	r3, #16
 8002528:	d002      	beq.n	8002530 <I2C_Master_ADDR+0x268>
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	2b20      	cmp	r3, #32
 800252e:	d107      	bne.n	8002540 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800253e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	e032      	b.n	80025be <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002566:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002576:	d117      	bne.n	80025a8 <I2C_Master_ADDR+0x2e0>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800257e:	d00b      	beq.n	8002598 <I2C_Master_ADDR+0x2d0>
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	2b01      	cmp	r3, #1
 8002584:	d008      	beq.n	8002598 <I2C_Master_ADDR+0x2d0>
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	2b08      	cmp	r3, #8
 800258a:	d005      	beq.n	8002598 <I2C_Master_ADDR+0x2d0>
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	2b10      	cmp	r3, #16
 8002590:	d002      	beq.n	8002598 <I2C_Master_ADDR+0x2d0>
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	2b20      	cmp	r3, #32
 8002596:	d107      	bne.n	80025a8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80025c4:	e00b      	b.n	80025de <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	e7ff      	b.n	80025de <I2C_Master_ADDR+0x316>
 80025de:	bf00      	nop
 80025e0:	3744      	adds	r7, #68	; 0x44
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02b      	beq.n	800265c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d114      	bne.n	800265c <I2C_SlaveTransmit_TXE+0x72>
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b29      	cmp	r3, #41	; 0x29
 8002636:	d111      	bne.n	800265c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002646:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2221      	movs	r2, #33	; 0x21
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2228      	movs	r2, #40	; 0x28
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff f9f1 	bl	8001a3e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d011      	beq.n	800269a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02c      	beq.n	800271a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d114      	bne.n	800271a <I2C_SlaveReceive_RXNE+0x74>
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	2b2a      	cmp	r3, #42	; 0x2a
 80026f4:	d111      	bne.n	800271a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002704:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2222      	movs	r2, #34	; 0x22
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2228      	movs	r2, #40	; 0x28
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff f99c 	bl	8001a52 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002780:	2b28      	cmp	r3, #40	; 0x28
 8002782:	d127      	bne.n	80027d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002792:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	09db      	lsrs	r3, r3, #7
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	81bb      	strh	r3, [r7, #12]
 80027b6:	e002      	b.n	80027be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80027c6:	89ba      	ldrh	r2, [r7, #12]
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff f94a 	bl	8001a66 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027d2:	e00e      	b.n	80027f2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800281a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002858:	d172      	bne.n	8002940 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b22      	cmp	r3, #34	; 0x22
 800285e:	d002      	beq.n	8002866 <I2C_Slave_STOPF+0x6a>
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b2a      	cmp	r3, #42	; 0x2a
 8002864:	d135      	bne.n	80028d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002898:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe face 	bl	8000e40 <HAL_DMA_GetState>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d049      	beq.n	800293e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4a69      	ldr	r2, [pc, #420]	; (8002a54 <I2C_Slave_STOPF+0x258>)
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe f916 	bl	8000ae8 <HAL_DMA_Abort_IT>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03d      	beq.n	800293e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028cc:	4610      	mov	r0, r2
 80028ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028d0:	e035      	b.n	800293e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002904:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fa98 	bl	8000e40 <HAL_DMA_GetState>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d014      	beq.n	8002940 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <I2C_Slave_STOPF+0x258>)
 800291c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f8e0 	bl	8000ae8 <HAL_DMA_Abort_IT>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002938:	4610      	mov	r0, r2
 800293a:	4798      	blx	r3
 800293c:	e000      	b.n	8002940 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800293e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03e      	beq.n	80029c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d112      	bne.n	800297e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d112      	bne.n	80029b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0204 	orr.w	r2, r3, #4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f843 	bl	8002a5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80029d6:	e039      	b.n	8002a4c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b2a      	cmp	r3, #42	; 0x2a
 80029dc:	d109      	bne.n	80029f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2228      	movs	r2, #40	; 0x28
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff f830 	bl	8001a52 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b28      	cmp	r3, #40	; 0x28
 80029fc:	d111      	bne.n	8002a22 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <I2C_Slave_STOPF+0x25c>)
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff f831 	bl	8001a82 <HAL_I2C_ListenCpltCallback>
}
 8002a20:	e014      	b.n	8002a4c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	2b22      	cmp	r3, #34	; 0x22
 8002a28:	d002      	beq.n	8002a30 <I2C_Slave_STOPF+0x234>
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	2b22      	cmp	r3, #34	; 0x22
 8002a2e:	d10d      	bne.n	8002a4c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff f803 	bl	8001a52 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	08002cc1 	.word	0x08002cc1
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d002      	beq.n	8002a80 <I2C_ITError+0x24>
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d10a      	bne.n	8002a96 <I2C_ITError+0x3a>
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b22      	cmp	r3, #34	; 0x22
 8002a84:	d107      	bne.n	8002a96 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a9c:	2b28      	cmp	r3, #40	; 0x28
 8002a9e:	d107      	bne.n	8002ab0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2228      	movs	r2, #40	; 0x28
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002aae:	e015      	b.n	8002adc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002abe:	d00a      	beq.n	8002ad6 <I2C_ITError+0x7a>
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b60      	cmp	r3, #96	; 0x60
 8002ac4:	d007      	beq.n	8002ad6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aea:	d162      	bne.n	8002bb2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d020      	beq.n	8002b4c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	4a6a      	ldr	r2, [pc, #424]	; (8002cb8 <I2C_ITError+0x25c>)
 8002b10:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd ffe6 	bl	8000ae8 <HAL_DMA_Abort_IT>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8089 	beq.w	8002c36 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b46:	4610      	mov	r0, r2
 8002b48:	4798      	blx	r3
 8002b4a:	e074      	b.n	8002c36 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	4a59      	ldr	r2, [pc, #356]	; (8002cb8 <I2C_ITError+0x25c>)
 8002b52:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd ffc5 	bl	8000ae8 <HAL_DMA_Abort_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d068      	beq.n	8002c36 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d10b      	bne.n	8002b8a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bac:	4610      	mov	r0, r2
 8002bae:	4798      	blx	r3
 8002bb0:	e041      	b.n	8002c36 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b60      	cmp	r3, #96	; 0x60
 8002bbc:	d125      	bne.n	8002c0a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d10b      	bne.n	8002bf2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe ff65 	bl	8001ad2 <HAL_I2C_AbortCpltCallback>
 8002c08:	e015      	b.n	8002c36 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d10b      	bne.n	8002c30 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe ff44 	bl	8001abe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d113      	bne.n	8002cb0 <I2C_ITError+0x254>
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b28      	cmp	r3, #40	; 0x28
 8002c8c:	d110      	bne.n	8002cb0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <I2C_ITError+0x260>)
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fee9 	bl	8001a82 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	ffff0000 	.word	0xffff0000

08002cc0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <I2C_DMAAbort+0x148>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	08db      	lsrs	r3, r3, #3
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <I2C_DMAAbort+0x14c>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a1a      	lsrs	r2, r3, #8
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00da      	lsls	r2, r3, #3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002d06:	e00a      	b.n	8002d1e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1c:	d0ea      	beq.n	8002cf4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	2200      	movs	r2, #0
 8002d62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	2200      	movs	r2, #0
 8002d72:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d10e      	bne.n	8002dae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7fe fe93 	bl	8001ad2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002dac:	e027      	b.n	8002dfe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002db4:	2b28      	cmp	r3, #40	; 0x28
 8002db6:	d117      	bne.n	8002de8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2228      	movs	r2, #40	; 0x28
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002de6:	e007      	b.n	8002df8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002df8:	6978      	ldr	r0, [r7, #20]
 8002dfa:	f7fe fe60 	bl	8001abe <HAL_I2C_ErrorCallback>
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000118 	.word	0x20000118
 8002e0c:	14f8b589 	.word	0x14f8b589

08002e10 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	0a1a      	lsrs	r2, r3, #8
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d107      	bne.n	8002e4e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e008      	b.n	8002e60 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5c:	d0e9      	beq.n	8002e32 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	20000118 	.word	0x20000118
 8002e70:	14f8b589 	.word	0x14f8b589

08002e74 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e84:	d103      	bne.n	8002e8e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e8c:	e007      	b.n	8002e9e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e96:	d102      	bne.n	8002e9e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eac:	b08f      	sub	sp, #60	; 0x3c
 8002eae:	af0a      	add	r7, sp, #40	; 0x28
 8002eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e10f      	b.n	80030dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f008 fbee 	bl	800b6b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 fb3d 	bl	800757a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	687e      	ldr	r6, [r7, #4]
 8002f08:	466d      	mov	r5, sp
 8002f0a:	f106 0410 	add.w	r4, r6, #16
 8002f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f1e:	1d33      	adds	r3, r6, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	f004 fa14 	bl	8007350 <USB_CoreInit>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0d0      	b.n	80030dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f004 fb2b 	bl	800759c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e04a      	b.n	8002fe2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	333d      	adds	r3, #61	; 0x3d
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	333c      	adds	r3, #60	; 0x3c
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	b298      	uxth	r0, r3
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3342      	adds	r3, #66	; 0x42
 8002f88:	4602      	mov	r2, r0
 8002f8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	333f      	adds	r3, #63	; 0x3f
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3344      	adds	r3, #68	; 0x44
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3348      	adds	r3, #72	; 0x48
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3350      	adds	r3, #80	; 0x50
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3af      	bcc.n	8002f4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e044      	b.n	800307c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3301      	adds	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d3b5      	bcc.n	8002ff2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	687e      	ldr	r6, [r7, #4]
 800308e:	466d      	mov	r5, sp
 8003090:	f106 0410 	add.w	r4, r6, #16
 8003094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a4:	1d33      	adds	r3, r6, #4
 80030a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a8:	6838      	ldr	r0, [r7, #0]
 80030aa:	f004 fac3 	bl	8007634 <USB_DevInit>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00d      	b.n	80030dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f005 fb3f 	bl	8008758 <USB_DevDisconnect>

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_Start+0x1c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e020      	b.n	8003142 <HAL_PCD_Start+0x5e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	2b01      	cmp	r3, #1
 800310e:	d109      	bne.n	8003124 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003114:	2b01      	cmp	r3, #1
 8003116:	d005      	beq.n	8003124 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f004 fa15 	bl	8007558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f005 faef 	bl	8008716 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800314a:	b590      	push	{r4, r7, lr}
 800314c:	b08d      	sub	sp, #52	; 0x34
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f005 fbad 	bl	80088c0 <USB_GetMode>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 839d 	bne.w	80038a8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f005 fb11 	bl	800879a <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8393 	beq.w	80038a6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f005 fb08 	bl	800879a <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d107      	bne.n	80031a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f002 0202 	and.w	r2, r2, #2
 80031a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f005 faf6 	bl	800879a <USB_ReadInterrupts>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d161      	bne.n	800327c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0210 	bic.w	r2, r2, #16
 80031c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 020f 	and.w	r2, r3, #15
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	3304      	adds	r3, #4
 80031e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	0c5b      	lsrs	r3, r3, #17
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d124      	bne.n	800323e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d035      	beq.n	800326c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800320a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	6a38      	ldr	r0, [r7, #32]
 8003214:	f005 f92d 	bl	8008472 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003224:	441a      	add	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003236:	441a      	add	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	619a      	str	r2, [r3, #24]
 800323c:	e016      	b.n	800326c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	0c5b      	lsrs	r3, r3, #17
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	2b06      	cmp	r3, #6
 8003248:	d110      	bne.n	800326c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003250:	2208      	movs	r2, #8
 8003252:	4619      	mov	r1, r3
 8003254:	6a38      	ldr	r0, [r7, #32]
 8003256:	f005 f90c 	bl	8008472 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003266:	441a      	add	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0210 	orr.w	r2, r2, #16
 800327a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f005 fa8a 	bl	800879a <USB_ReadInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003290:	d16e      	bne.n	8003370 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f005 fa90 	bl	80087c0 <USB_ReadDevAllOutEpInterrupt>
 80032a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032a2:	e062      	b.n	800336a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d057      	beq.n	800335e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f005 fab5 	bl	8008828 <USB_ReadDevOutEPInterrupt>
 80032be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fdb0 	bl	8003e44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	461a      	mov	r2, r3
 80032fc:	2308      	movs	r3, #8
 80032fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 feaa 	bl	800405c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331e:	461a      	mov	r2, r3
 8003320:	2310      	movs	r3, #16
 8003322:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333a:	461a      	mov	r2, r3
 800333c:	2320      	movs	r3, #32
 800333e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800335c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	3301      	adds	r3, #1
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d199      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f005 fa10 	bl	800879a <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003384:	f040 80c0 	bne.w	8003508 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f005 fa31 	bl	80087f4 <USB_ReadDevAllInEpInterrupt>
 8003392:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003398:	e0b2      	b.n	8003500 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a7 	beq.w	80034f4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 fa57 	bl	8008864 <USB_ReadDevInEPInterrupt>
 80033b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d057      	beq.n	8003472 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2201      	movs	r2, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	69f9      	ldr	r1, [r7, #28]
 80033de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e2:	4013      	ands	r3, r2
 80033e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f2:	461a      	mov	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d132      	bne.n	8003466 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3348      	adds	r3, #72	; 0x48
 8003410:	6819      	ldr	r1, [r3, #0]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4403      	add	r3, r0
 8003420:	3344      	adds	r3, #68	; 0x44
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4419      	add	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4403      	add	r3, r0
 8003434:	3348      	adds	r3, #72	; 0x48
 8003436:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <HAL_PCD_IRQHandler+0x31c>
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3350      	adds	r3, #80	; 0x50
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800345e:	461a      	mov	r2, r3
 8003460:	2101      	movs	r1, #1
 8003462:	f005 fa5f 	bl	8008924 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f008 f9b2 	bl	800b7d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003488:	461a      	mov	r2, r3
 800348a:	2308      	movs	r3, #8
 800348c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a4:	461a      	mov	r2, r3
 80034a6:	2310      	movs	r3, #16
 80034a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c0:	461a      	mov	r2, r3
 80034c2:	2340      	movs	r3, #64	; 0x40
 80034c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034dc:	461a      	mov	r2, r3
 80034de:	2302      	movs	r3, #2
 80034e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fc1b 	bl	8003d2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	3301      	adds	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	f47f af49 	bne.w	800339a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f005 f944 	bl	800879a <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351c:	d122      	bne.n	8003564 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003538:	2b01      	cmp	r3, #1
 800353a:	d108      	bne.n	800354e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003544:	2100      	movs	r1, #0
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fe26 	bl	8004198 <HAL_PCDEx_LPM_Callback>
 800354c:	e002      	b.n	8003554 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f008 f9ae 	bl	800b8b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f005 f916 	bl	800879a <USB_ReadInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003578:	d112      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d102      	bne.n	8003590 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f008 f96a 	bl	800b864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800359e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f005 f8f8 	bl	800879a <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b4:	f040 80c7 	bne.w	8003746 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2110      	movs	r1, #16
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f992 	bl	80078fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035dc:	e056      	b.n	800368c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	461a      	mov	r2, r3
 80035ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	440a      	add	r2, r1
 8003608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800360c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003610:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	440a      	add	r2, r1
 8003628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003630:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003644:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003656:	0151      	lsls	r1, r2, #5
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	440a      	add	r2, r1
 800365c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003660:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003664:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	440a      	add	r2, r1
 800367c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003680:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003684:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	3301      	adds	r3, #1
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	429a      	cmp	r2, r3
 8003694:	d3a3      	bcc.n	80035de <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c2:	f043 030b 	orr.w	r3, r3, #11
 80036c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d8:	f043 030b 	orr.w	r3, r3, #11
 80036dc:	6453      	str	r3, [r2, #68]	; 0x44
 80036de:	e015      	b.n	800370c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003706:	f043 030b 	orr.w	r3, r3, #11
 800370a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800371a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800371e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003730:	461a      	mov	r2, r3
 8003732:	f005 f8f7 	bl	8008924 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f005 f825 	bl	800879a <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d124      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f005 f8bb 	bl	80088dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f004 f923 	bl	80079b6 <USB_GetDevSpeed>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	f001 f936 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8003780:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	4620      	mov	r0, r4
 800378c:	f003 fe42 	bl	8007414 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f008 f848 	bl	800b826 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 fff5 	bl	800879a <USB_ReadInterrupts>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d10a      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f008 f825 	bl	800b80a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f002 0208 	and.w	r2, r2, #8
 80037ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f004 ffe0 	bl	800879a <USB_ReadInterrupts>
 80037da:	4603      	mov	r3, r0
 80037dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e4:	d10f      	bne.n	8003806 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f008 f87d 	bl	800b8f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f004 ffc5 	bl	800879a <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381a:	d10f      	bne.n	800383c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	b2db      	uxtb	r3, r3
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f008 f850 	bl	800b8cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800383a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f004 ffaa 	bl	800879a <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d10a      	bne.n	8003868 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f008 f85e 	bl	800b914 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f004 ff94 	bl	800879a <USB_ReadInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b04      	cmp	r3, #4
 800387a:	d115      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f008 f84e 	bl	800b930 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	e000      	b.n	80038a8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80038a6:	bf00      	nop
    }
  }
}
 80038a8:	3734      	adds	r7, #52	; 0x34
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd90      	pop	{r4, r7, pc}

080038ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_PCD_SetAddress+0x1a>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e013      	b.n	80038f0 <HAL_PCD_SetAddress+0x42>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fef2 	bl	80086ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	70fb      	strb	r3, [r7, #3]
 800390a:	460b      	mov	r3, r1
 800390c:	803b      	strh	r3, [r7, #0]
 800390e:	4613      	mov	r3, r2
 8003910:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391a:	2b00      	cmp	r3, #0
 800391c:	da0f      	bge.n	800393e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	3338      	adds	r3, #56	; 0x38
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	705a      	strb	r2, [r3, #1]
 800393c:	e00f      	b.n	800395e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	f003 020f 	and.w	r2, r3, #15
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	3304      	adds	r3, #4
 8003956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800396a:	883a      	ldrh	r2, [r7, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	78ba      	ldrb	r2, [r7, #2]
 8003974:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003988:	78bb      	ldrb	r3, [r7, #2]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d102      	bne.n	8003994 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_PCD_EP_Open+0xaa>
 800399e:	2302      	movs	r3, #2
 80039a0:	e00e      	b.n	80039c0 <HAL_PCD_EP_Open+0xc8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 f825 	bl	8007a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039be:	7afb      	ldrb	r3, [r7, #11]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da0f      	bge.n	80039fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3338      	adds	r3, #56	; 0x38
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	705a      	strb	r2, [r3, #1]
 80039fa:	e00f      	b.n	8003a1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_EP_Close+0x6e>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e00e      	b.n	8003a54 <HAL_PCD_EP_Close+0x8c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f004 f863 	bl	8007b10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6c:	7afb      	ldrb	r3, [r7, #11]
 8003a6e:	f003 020f 	and.w	r2, r3, #15
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	f004 fb3e 	bl	8008150 <USB_EP0StartXfer>
 8003ad4:	e008      	b.n	8003ae8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6979      	ldr	r1, [r7, #20]
 8003ae4:	f004 f8f0 	bl	8007cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 020f 	and.w	r2, r3, #15
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b14:	681b      	ldr	r3, [r3, #0]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	7afb      	ldrb	r3, [r7, #11]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	3338      	adds	r3, #56	; 0x38
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	f004 fadc 	bl	8008150 <USB_EP0StartXfer>
 8003b98:	e008      	b.n	8003bac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6979      	ldr	r1, [r7, #20]
 8003ba8:	f004 f88e 	bl	8007cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d901      	bls.n	8003bd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e050      	b.n	8003c76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	da0f      	bge.n	8003bfc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3338      	adds	r3, #56	; 0x38
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	705a      	strb	r2, [r3, #1]
 8003bfa:	e00d      	b.n	8003c18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3304      	adds	r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_PCD_EP_SetStall+0x82>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e01e      	b.n	8003c76 <HAL_PCD_EP_SetStall+0xc0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 fc6b 	bl	8008522 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	b2d9      	uxtb	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c66:	461a      	mov	r2, r3
 8003c68:	f004 fe5c 	bl	8008924 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 020f 	and.w	r2, r3, #15
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d901      	bls.n	8003c9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e042      	b.n	8003d22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da0f      	bge.n	8003cc4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	705a      	strb	r2, [r3, #1]
 8003cc2:	e00f      	b.n	8003ce4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_PCD_EP_ClrStall+0x86>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e00e      	b.n	8003d22 <HAL_PCD_EP_ClrStall+0xa4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68f9      	ldr	r1, [r7, #12]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f004 fc73 	bl	80085fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b08a      	sub	sp, #40	; 0x28
 8003d2e:	af02      	add	r7, sp, #8
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	3338      	adds	r3, #56	; 0x38
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d901      	bls.n	8003d62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e06c      	b.n	8003e3c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d902      	bls.n	8003d7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3303      	adds	r3, #3
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d86:	e02b      	b.n	8003de0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d902      	bls.n	8003da4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3303      	adds	r3, #3
 8003da8:	089b      	lsrs	r3, r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68d9      	ldr	r1, [r3, #12]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f004 fb17 	bl	80083f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	441a      	add	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	441a      	add	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d809      	bhi.n	8003e0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d203      	bcs.n	8003e0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1be      	bne.n	8003d88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d811      	bhi.n	8003e3a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	6939      	ldr	r1, [r7, #16]
 8003e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e36:	4013      	ands	r3, r2
 8003e38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	333c      	adds	r3, #60	; 0x3c
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	f040 80a0 	bne.w	8003fbc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d015      	beq.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a72      	ldr	r2, [pc, #456]	; (8004054 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	f240 80dd 	bls.w	800404a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80d7 	beq.w	800404a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eae:	6093      	str	r3, [r2, #8]
 8003eb0:	e0cb      	b.n	800404a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2320      	movs	r3, #32
 8003ecc:	6093      	str	r3, [r2, #8]
 8003ece:	e0bc      	b.n	800404a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 80b7 	bne.w	800404a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a5d      	ldr	r2, [pc, #372]	; (8004054 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d90f      	bls.n	8003f04 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	461a      	mov	r2, r3
 8003efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f00:	6093      	str	r3, [r2, #8]
 8003f02:	e0a2      	b.n	800404a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f16:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	0159      	lsls	r1, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	440b      	add	r3, r1
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f2a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4403      	add	r3, r0
 8003f3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f3e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4403      	add	r3, r0
 8003f62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4419      	add	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4403      	add	r3, r0
 8003f78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f7c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d114      	bne.n	8003fae <PCD_EP_OutXfrComplete_int+0x16a>
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2101      	movs	r1, #1
 8003faa:	f004 fcbb 	bl	8008924 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f007 fbf3 	bl	800b7a0 <HAL_PCD_DataOutStageCallback>
 8003fba:	e046      	b.n	800404a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a26      	ldr	r2, [pc, #152]	; (8004058 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d124      	bne.n	800400e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe0:	6093      	str	r3, [r2, #8]
 8003fe2:	e032      	b.n	800404a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f007 fbca 	bl	800b7a0 <HAL_PCD_DataOutStageCallback>
 800400c:	e01d      	b.n	800404a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d114      	bne.n	800403e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004036:	461a      	mov	r2, r3
 8004038:	2100      	movs	r1, #0
 800403a:	f004 fc73 	bl	8008924 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f007 fbab 	bl	800b7a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	4f54300a 	.word	0x4f54300a
 8004058:	4f54310a 	.word	0x4f54310a

0800405c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	333c      	adds	r3, #60	; 0x3c
 8004074:	3304      	adds	r3, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d90e      	bls.n	80040b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	461a      	mov	r2, r3
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f007 fb63 	bl	800b77c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d90c      	bls.n	80040d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d108      	bne.n	80040d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040d0:	461a      	mov	r2, r3
 80040d2:	2101      	movs	r1, #1
 80040d4:	f004 fc26 	bl	8008924 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	4f54300a 	.word	0x4f54300a

080040e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
 80040f4:	4613      	mov	r3, r2
 80040f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d107      	bne.n	8004116 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004106:	883b      	ldrh	r3, [r7, #0]
 8004108:	0419      	lsls	r1, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	430a      	orrs	r2, r1
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
 8004114:	e028      	b.n	8004168 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4413      	add	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e00d      	b.n	8004146 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	3340      	adds	r3, #64	; 0x40
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	3301      	adds	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	3b01      	subs	r3, #1
 800414c:	429a      	cmp	r2, r3
 800414e:	d3ec      	bcc.n	800412a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004150:	883b      	ldrh	r3, [r7, #0]
 8004152:	0418      	lsls	r0, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	3b01      	subs	r3, #1
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	4302      	orrs	r2, r0
 8004160:	3340      	adds	r3, #64	; 0x40
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	887a      	ldrh	r2, [r7, #2]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e262      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d075      	beq.n	80042ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ce:	4ba3      	ldr	r3, [pc, #652]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d00c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041da:	4ba0      	ldr	r3, [pc, #640]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d112      	bne.n	800420c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e6:	4b9d      	ldr	r3, [pc, #628]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f2:	d10b      	bne.n	800420c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	4b99      	ldr	r3, [pc, #612]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d05b      	beq.n	80042b8 <HAL_RCC_OscConfig+0x108>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d157      	bne.n	80042b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e23d      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d106      	bne.n	8004224 <HAL_RCC_OscConfig+0x74>
 8004216:	4b91      	ldr	r3, [pc, #580]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a90      	ldr	r2, [pc, #576]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e01d      	b.n	8004260 <HAL_RCC_OscConfig+0xb0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x98>
 800422e:	4b8b      	ldr	r3, [pc, #556]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a8a      	ldr	r2, [pc, #552]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a87      	ldr	r2, [pc, #540]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0xb0>
 8004248:	4b84      	ldr	r3, [pc, #528]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a83      	ldr	r2, [pc, #524]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800424e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b81      	ldr	r3, [pc, #516]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a80      	ldr	r2, [pc, #512]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800425a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fc fa4e 	bl	8000708 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004270:	f7fc fa4a 	bl	8000708 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e202      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0xc0>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fc fa3a 	bl	8000708 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fc fa36 	bl	8000708 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e1ee      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0xe8>
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d063      	beq.n	800438e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042c6:	4b65      	ldr	r3, [pc, #404]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d2:	4b62      	ldr	r3, [pc, #392]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d11c      	bne.n	8004318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042de:	4b5f      	ldr	r3, [pc, #380]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d116      	bne.n	8004318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	4b5c      	ldr	r3, [pc, #368]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_RCC_OscConfig+0x152>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d001      	beq.n	8004302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e1c2      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	4b56      	ldr	r3, [pc, #344]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4952      	ldr	r1, [pc, #328]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	e03a      	b.n	800438e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004320:	4b4f      	ldr	r3, [pc, #316]	; (8004460 <HAL_RCC_OscConfig+0x2b0>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004326:	f7fc f9ef 	bl	8000708 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432e:	f7fc f9eb 	bl	8000708 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e1a3      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	4b46      	ldr	r3, [pc, #280]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434c:	4b43      	ldr	r3, [pc, #268]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4940      	ldr	r1, [pc, #256]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]
 8004360:	e015      	b.n	800438e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004362:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <HAL_RCC_OscConfig+0x2b0>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fc f9ce 	bl	8000708 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004370:	f7fc f9ca 	bl	8000708 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e182      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d030      	beq.n	80043fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a2:	4b30      	ldr	r3, [pc, #192]	; (8004464 <HAL_RCC_OscConfig+0x2b4>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fc f9ae 	bl	8000708 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fc f9aa 	bl	8000708 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e162      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x200>
 80043ce:	e015      	b.n	80043fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d0:	4b24      	ldr	r3, [pc, #144]	; (8004464 <HAL_RCC_OscConfig+0x2b4>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d6:	f7fc f997 	bl	8000708 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043de:	f7fc f993 	bl	8000708 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e14b      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 80043f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 809e 	beq.w	8004546 <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10f      	bne.n	800443a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a0e      	ldr	r2, [pc, #56]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	4b0c      	ldr	r3, [pc, #48]	; (800445c <HAL_RCC_OscConfig+0x2ac>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_OscConfig+0x2b8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d121      	bne.n	800448a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_RCC_OscConfig+0x2b8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a07      	ldr	r2, [pc, #28]	; (8004468 <HAL_RCC_OscConfig+0x2b8>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004452:	f7fc f959 	bl	8000708 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	e011      	b.n	800447e <HAL_RCC_OscConfig+0x2ce>
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	42470000 	.word	0x42470000
 8004464:	42470e80 	.word	0x42470e80
 8004468:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446c:	f7fc f94c 	bl	8000708 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e104      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b84      	ldr	r3, [pc, #528]	; (8004690 <HAL_RCC_OscConfig+0x4e0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2f0>
 8004492:	4b80      	ldr	r3, [pc, #512]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a7f      	ldr	r2, [pc, #508]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6713      	str	r3, [r2, #112]	; 0x70
 800449e:	e01c      	b.n	80044da <HAL_RCC_OscConfig+0x32a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCC_OscConfig+0x312>
 80044a8:	4b7a      	ldr	r3, [pc, #488]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a79      	ldr	r2, [pc, #484]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044ae:	f043 0304 	orr.w	r3, r3, #4
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	4b77      	ldr	r3, [pc, #476]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a76      	ldr	r2, [pc, #472]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	e00b      	b.n	80044da <HAL_RCC_OscConfig+0x32a>
 80044c2:	4b74      	ldr	r3, [pc, #464]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a73      	ldr	r2, [pc, #460]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	4b71      	ldr	r3, [pc, #452]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a70      	ldr	r2, [pc, #448]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d014      	beq.n	800450c <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fc f911 	bl	8000708 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	e009      	b.n	80044fe <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fc f90d 	bl	8000708 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0c4      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	4b65      	ldr	r3, [pc, #404]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ef      	beq.n	80044ea <HAL_RCC_OscConfig+0x33a>
 800450a:	e013      	b.n	8004534 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fc f8fc 	bl	8000708 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004512:	e009      	b.n	8004528 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fc f8f8 	bl	8000708 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0af      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004528:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ef      	bne.n	8004514 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453a:	4b56      	ldr	r3, [pc, #344]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a55      	ldr	r2, [pc, #340]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 8004540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 809b 	beq.w	8004686 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004550:	4b50      	ldr	r3, [pc, #320]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b08      	cmp	r3, #8
 800455a:	d05c      	beq.n	8004616 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d141      	bne.n	80045e8 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004564:	4b4c      	ldr	r3, [pc, #304]	; (8004698 <HAL_RCC_OscConfig+0x4e8>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7fc f8cd 	bl	8000708 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004572:	f7fc f8c9 	bl	8000708 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e081      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004584:	4b43      	ldr	r3, [pc, #268]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	019b      	lsls	r3, r3, #6
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	3b01      	subs	r3, #1
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	4937      	ldr	r1, [pc, #220]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ba:	4b37      	ldr	r3, [pc, #220]	; (8004698 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fc f8a2 	bl	8000708 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fc f89e 	bl	8000708 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e056      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x418>
 80045e6:	e04e      	b.n	8004686 <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCC_OscConfig+0x4e8>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fc f88b 	bl	8000708 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fc f887 	bl	8000708 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e03f      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004608:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x446>
 8004614:	e037      	b.n	8004686 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e032      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <HAL_RCC_OscConfig+0x4e4>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d028      	beq.n	8004682 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d121      	bne.n	8004682 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d11a      	bne.n	8004682 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004652:	4013      	ands	r3, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004658:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465a:	4293      	cmp	r3, r2
 800465c:	d111      	bne.n	8004682 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d107      	bne.n	8004682 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40007000 	.word	0x40007000
 8004694:	40023800 	.word	0x40023800
 8004698:	42470060 	.word	0x42470060

0800469c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0cc      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b0:	4b68      	ldr	r3, [pc, #416]	; (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d90c      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b65      	ldr	r3, [pc, #404]	; (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b63      	ldr	r3, [pc, #396]	; (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f0:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a58      	ldr	r2, [pc, #352]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004708:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a52      	ldr	r2, [pc, #328]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b50      	ldr	r3, [pc, #320]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	494d      	ldr	r1, [pc, #308]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d044      	beq.n	80047bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d119      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d003      	beq.n	800475a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004756:	2b03      	cmp	r3, #3
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475a:	4b3f      	ldr	r3, [pc, #252]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476a:	4b3b      	ldr	r3, [pc, #236]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e067      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b37      	ldr	r3, [pc, #220]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4934      	ldr	r1, [pc, #208]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800478c:	f7fb ffbc 	bl	8000708 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	e00a      	b.n	80047aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7fb ffb8 	bl	8000708 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e04f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 020c 	and.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1eb      	bne.n	8004794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b25      	ldr	r3, [pc, #148]	; (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d20c      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b22      	ldr	r3, [pc, #136]	; (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4916      	ldr	r1, [pc, #88]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004822:	f000 f82d 	bl	8004880 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490a      	ldr	r1, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fb ff1c 	bl	8000680 <HAL_InitTick>

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023c00 	.word	0x40023c00
 8004858:	40023800 	.word	0x40023800
 800485c:	0800c01c 	.word	0x0800c01c
 8004860:	20000118 	.word	0x20000118
 8004864:	20000000 	.word	0x20000000

08004868 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800486c:	4b03      	ldr	r3, [pc, #12]	; (800487c <HAL_RCC_EnableCSS+0x14>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	4247004c 	.word	0x4247004c

08004880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004880:	b5b0      	push	{r4, r5, r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004886:	2100      	movs	r1, #0
 8004888:	6079      	str	r1, [r7, #4]
 800488a:	2100      	movs	r1, #0
 800488c:	60f9      	str	r1, [r7, #12]
 800488e:	2100      	movs	r1, #0
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004892:	2100      	movs	r1, #0
 8004894:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004896:	4952      	ldr	r1, [pc, #328]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004898:	6889      	ldr	r1, [r1, #8]
 800489a:	f001 010c 	and.w	r1, r1, #12
 800489e:	2908      	cmp	r1, #8
 80048a0:	d00d      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x3e>
 80048a2:	2908      	cmp	r1, #8
 80048a4:	f200 8094 	bhi.w	80049d0 <HAL_RCC_GetSysClockFreq+0x150>
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x32>
 80048ac:	2904      	cmp	r1, #4
 80048ae:	d003      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x38>
 80048b0:	e08e      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b2:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80048b4:	60bb      	str	r3, [r7, #8]
       break;
 80048b6:	e08e      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b8:	4b4b      	ldr	r3, [pc, #300]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80048ba:	60bb      	str	r3, [r7, #8]
      break;
 80048bc:	e08b      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048be:	4948      	ldr	r1, [pc, #288]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80048c0:	6849      	ldr	r1, [r1, #4]
 80048c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c8:	4945      	ldr	r1, [pc, #276]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ca:	6849      	ldr	r1, [r1, #4]
 80048cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d024      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d4:	4942      	ldr	r1, [pc, #264]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80048d6:	6849      	ldr	r1, [r1, #4]
 80048d8:	0989      	lsrs	r1, r1, #6
 80048da:	4608      	mov	r0, r1
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048e4:	f04f 0500 	mov.w	r5, #0
 80048e8:	ea00 0204 	and.w	r2, r0, r4
 80048ec:	ea01 0305 	and.w	r3, r1, r5
 80048f0:	493d      	ldr	r1, [pc, #244]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80048f2:	fb01 f003 	mul.w	r0, r1, r3
 80048f6:	2100      	movs	r1, #0
 80048f8:	fb01 f102 	mul.w	r1, r1, r2
 80048fc:	1844      	adds	r4, r0, r1
 80048fe:	493a      	ldr	r1, [pc, #232]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004900:	fba2 0101 	umull	r0, r1, r2, r1
 8004904:	1863      	adds	r3, r4, r1
 8004906:	4619      	mov	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	461a      	mov	r2, r3
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	f7fb fc62 	bl	80001d8 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4613      	mov	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e04a      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	461a      	mov	r2, r3
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	ea02 0400 	and.w	r4, r2, r0
 8004936:	ea03 0501 	and.w	r5, r3, r1
 800493a:	4620      	mov	r0, r4
 800493c:	4629      	mov	r1, r5
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	014b      	lsls	r3, r1, #5
 8004948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800494c:	0142      	lsls	r2, r0, #5
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	1b00      	subs	r0, r0, r4
 8004954:	eb61 0105 	sbc.w	r1, r1, r5
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	018b      	lsls	r3, r1, #6
 8004962:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004966:	0182      	lsls	r2, r0, #6
 8004968:	1a12      	subs	r2, r2, r0
 800496a:	eb63 0301 	sbc.w	r3, r3, r1
 800496e:	f04f 0000 	mov.w	r0, #0
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	00d9      	lsls	r1, r3, #3
 8004978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800497c:	00d0      	lsls	r0, r2, #3
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	1912      	adds	r2, r2, r4
 8004984:	eb45 0303 	adc.w	r3, r5, r3
 8004988:	f04f 0000 	mov.w	r0, #0
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	0299      	lsls	r1, r3, #10
 8004992:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004996:	0290      	lsls	r0, r2, #10
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	f7fb fc16 	bl	80001d8 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	3301      	adds	r3, #1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	60bb      	str	r3, [r7, #8]
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80049d2:	60bb      	str	r3, [r7, #8]
      break;
 80049d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d6:	68bb      	ldr	r3, [r7, #8]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bdb0      	pop	{r4, r5, r7, pc}
 80049e0:	40023800 	.word	0x40023800
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	016e3600 	.word	0x016e3600

080049ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000118 	.word	0x20000118

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a08:	f7ff fff0 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0a9b      	lsrs	r3, r3, #10
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4903      	ldr	r1, [pc, #12]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40023800 	.word	0x40023800
 8004a28:	0800c02c 	.word	0x0800c02c

08004a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a30:	f7ff ffdc 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0b5b      	lsrs	r3, r3, #13
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4903      	ldr	r1, [pc, #12]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	0800c02c 	.word	0x0800c02c

08004a54 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d104      	bne.n	8004a6e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004a64:	f000 f80a 	bl	8004a7c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	701a      	strb	r2, [r3, #0]
  }
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	4002380e 	.word	0x4002380e

08004a7c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d038      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab4:	4b68      	ldr	r3, [pc, #416]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aba:	f7fb fe25 	bl	8000708 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ac2:	f7fb fe21 	bl	8000708 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0bc      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad4:	4b61      	ldr	r3, [pc, #388]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	495a      	ldr	r1, [pc, #360]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004afa:	4b57      	ldr	r3, [pc, #348]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b00:	f7fb fe02 	bl	8000708 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b08:	f7fb fdfe 	bl	8000708 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e099      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1a:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8082 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	4a47      	ldr	r2, [pc, #284]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6413      	str	r3, [r2, #64]	; 0x40
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a42      	ldr	r2, [pc, #264]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7fb fdd4 	bl	8000708 <HAL_GetTick>
 8004b60:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b64:	f7fb fdd0 	bl	8000708 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e06b      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b76:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b82:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02e      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d027      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004baa:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb0:	4b2c      	ldr	r3, [pc, #176]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bb6:	4a29      	ldr	r2, [pc, #164]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bbc:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d113      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fb fd9e 	bl	8000708 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bce:	e009      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fb fd9a 	bl	8000708 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e034      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004bfe:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	4912      	ldr	r1, [pc, #72]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
 8004c18:	e005      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4a0f      	ldr	r2, [pc, #60]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c24:	6093      	str	r3, [r2, #8]
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	490a      	ldr	r1, [pc, #40]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7d1a      	ldrb	r2, [r3, #20]
 8004c48:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c4a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	42470068 	.word	0x42470068
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40007000 	.word	0x40007000
 8004c64:	42470e40 	.word	0x42470e40
 8004c68:	424711e0 	.word	0x424711e0

08004c6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e083      	b.n	8004d86 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7f5b      	ldrb	r3, [r3, #29]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f006 faa6 	bl	800b1e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	22ca      	movs	r2, #202	; 0xca
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2253      	movs	r2, #83	; 0x53
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f897 	bl	8004dde <RTC_EnterInitMode>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	22ff      	movs	r2, #255	; 0xff
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e05e      	b.n	8004d86 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cda:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6899      	ldr	r1, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68d2      	ldr	r2, [r2, #12]
 8004d02:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6919      	ldr	r1, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	041a      	lsls	r2, r3, #16
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10e      	bne.n	8004d54 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f829 	bl	8004d8e <HAL_RTC_WaitForSynchro>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e018      	b.n	8004d86 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004d84:	2300      	movs	r3, #0
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004da8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004daa:	f7fb fcad 	bl	8000708 <HAL_GetTick>
 8004dae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004db0:	e009      	b.n	8004dc6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004db2:	f7fb fca9 	bl	8000708 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e007      	b.n	8004dd6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ee      	beq.n	8004db2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d119      	bne.n	8004e2c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e02:	f7fb fc81 	bl	8000708 <HAL_GetTick>
 8004e06:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e08:	e009      	b.n	8004e1e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e0a:	f7fb fc7d 	bl	8000708 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e18:	d901      	bls.n	8004e1e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e007      	b.n	8004e2e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ee      	beq.n	8004e0a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e022      	b.n	8004e8e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d105      	bne.n	8004e60 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f006 f9ec 	bl	800b238 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2203      	movs	r2, #3
 8004e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f815 	bl	8004e98 <HAL_SD_InitCard>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e00a      	b.n	8004e8e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b08e      	sub	sp, #56	; 0x38
 8004e9c:	af04      	add	r7, sp, #16
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004eb4:	2376      	movs	r3, #118	; 0x76
 8004eb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681d      	ldr	r5, [r3, #0]
 8004ebc:	466c      	mov	r4, sp
 8004ebe:	f107 0314 	add.w	r3, r7, #20
 8004ec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f001 fda5 	bl	8006a20 <SDIO_Init>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e04c      	b.n	8004f82 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <HAL_SD_InitCard+0xf4>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fdcc 	bl	8006a90 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004ef8:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_SD_InitCard+0xf4>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fb52 	bl	80055a8 <SD_PowerON>
 8004f04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e02e      	b.n	8004f82 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fa73 	bl	8005410 <SD_InitCard>
 8004f2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e01b      	b.n	8004f82 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 fe2f 	bl	8006bb6 <SDMMC_CmdBlockLength>
 8004f58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00f      	beq.n	8004f80 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_SD_InitCard+0xf8>)
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bdb0      	pop	{r4, r5, r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	422580a0 	.word	0x422580a0
 8004f90:	004005ff 	.word	0x004005ff

08004f94 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa2:	0f9b      	lsrs	r3, r3, #30
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fae:	0e9b      	lsrs	r3, r3, #26
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd2:	0c1b      	lsrs	r3, r3, #16
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff4:	0d1b      	lsrs	r3, r3, #20
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	b2da      	uxtb	r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005012:	0bdb      	lsrs	r3, r3, #15
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005024:	0b9b      	lsrs	r3, r3, #14
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	b2da      	uxtb	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005036:	0b5b      	lsrs	r3, r3, #13
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005048:	0b1b      	lsrs	r3, r3, #12
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	b2da      	uxtb	r2, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2200      	movs	r2, #0
 800505a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	2b00      	cmp	r3, #0
 8005062:	d163      	bne.n	800512c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005068:	009a      	lsls	r2, r3, #2
 800506a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800506e:	4013      	ands	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005074:	0f92      	lsrs	r2, r2, #30
 8005076:	431a      	orrs	r2, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005080:	0edb      	lsrs	r3, r3, #27
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	b2da      	uxtb	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005092:	0e1b      	lsrs	r3, r3, #24
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	b2da      	uxtb	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a4:	0d5b      	lsrs	r3, r3, #21
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b6:	0c9b      	lsrs	r3, r3, #18
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c8:	0bdb      	lsrs	r3, r3, #15
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	7e1b      	ldrb	r3, [r3, #24]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	3302      	adds	r3, #2
 80050ec:	2201      	movs	r2, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80050f6:	fb02 f203 	mul.w	r2, r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	7a1b      	ldrb	r3, [r3, #8]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2201      	movs	r2, #1
 800510a:	409a      	lsls	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005118:	0a52      	lsrs	r2, r2, #9
 800511a:	fb02 f203 	mul.w	r2, r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005128:	661a      	str	r2, [r3, #96]	; 0x60
 800512a:	e031      	b.n	8005190 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005130:	2b01      	cmp	r3, #1
 8005132:	d11d      	bne.n	8005170 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005142:	0c1b      	lsrs	r3, r3, #16
 8005144:	431a      	orrs	r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	3301      	adds	r3, #1
 8005150:	029a      	lsls	r2, r3, #10
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005164:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	661a      	str	r2, [r3, #96]	; 0x60
 800516e:	e00f      	b.n	8005190 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a58      	ldr	r2, [pc, #352]	; (80052d8 <HAL_SD_GetCardCSD+0x344>)
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e09d      	b.n	80052cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005194:	0b9b      	lsrs	r3, r3, #14
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	b2da      	uxtb	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a6:	09db      	lsrs	r3, r3, #7
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	0fdb      	lsrs	r3, r3, #31
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	0f5b      	lsrs	r3, r3, #29
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	0e9b      	lsrs	r3, r3, #26
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	0d9b      	lsrs	r3, r3, #22
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	b2da      	uxtb	r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	0d5b      	lsrs	r3, r3, #21
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	b2da      	uxtb	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	b2da      	uxtb	r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	0bdb      	lsrs	r3, r3, #15
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	0b9b      	lsrs	r3, r3, #14
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	0b5b      	lsrs	r3, r3, #13
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	0b1b      	lsrs	r3, r3, #12
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	0a9b      	lsrs	r3, r3, #10
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	b2da      	uxtb	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	004005ff 	.word	0x004005ff

080052dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	b08e      	sub	sp, #56	; 0x38
 80052e0:	af04      	add	r7, sp, #16
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2203      	movs	r2, #3
 80052f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d02e      	beq.n	800535a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005302:	d106      	bne.n	8005312 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
 8005310:	e029      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005318:	d10a      	bne.n	8005330 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9d2 	bl	80056c4 <SD_WideBus_Enable>
 8005320:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
 800532e:	e01a      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa0f 	bl	800575a <SD_WideBus_Disable>
 800533c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
 800534a:	e00c      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
 8005358:	e005      	b.n	8005366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a26      	ldr	r2, [pc, #152]	; (800540c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005384:	e01f      	b.n	80053c6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681d      	ldr	r5, [r3, #0]
 80053ac:	466c      	mov	r4, sp
 80053ae:	f107 0314 	add.w	r3, r7, #20
 80053b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053ba:	f107 0308 	add.w	r3, r7, #8
 80053be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053c0:	4628      	mov	r0, r5
 80053c2:	f001 fb2d 	bl	8006a20 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fbf1 	bl	8006bb6 <SDMMC_CmdBlockLength>
 80053d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <HAL_SD_ConfigWideBusOperation+0x130>)
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80053fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005402:	4618      	mov	r0, r3
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bdb0      	pop	{r4, r5, r7, pc}
 800540a:	bf00      	nop
 800540c:	004005ff 	.word	0x004005ff

08005410 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	b094      	sub	sp, #80	; 0x50
 8005414:	af04      	add	r7, sp, #16
 8005416:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005418:	2301      	movs	r3, #1
 800541a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f001 fb44 	bl	8006aae <SDIO_GetPowerState>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800542c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005430:	e0b6      	b.n	80055a0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	2b03      	cmp	r3, #3
 8005438:	d02f      	beq.n	800549a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f001 fcc3 	bl	8006dca <SDMMC_CmdSendCID>
 8005444:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <SD_InitCard+0x40>
    {
      return errorstate;
 800544c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544e:	e0a7      	b.n	80055a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f001 fb6e 	bl	8006b38 <SDIO_GetResponse>
 800545c:	4602      	mov	r2, r0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2104      	movs	r1, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fb65 	bl	8006b38 <SDIO_GetResponse>
 800546e:	4602      	mov	r2, r0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2108      	movs	r1, #8
 800547a:	4618      	mov	r0, r3
 800547c:	f001 fb5c 	bl	8006b38 <SDIO_GetResponse>
 8005480:	4602      	mov	r2, r0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	210c      	movs	r1, #12
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fb53 	bl	8006b38 <SDIO_GetResponse>
 8005492:	4602      	mov	r2, r0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d00d      	beq.n	80054be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f107 020e 	add.w	r2, r7, #14
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fcc9 	bl	8006e44 <SDMMC_CmdSetRelAdd>
 80054b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <SD_InitCard+0xae>
    {
      return errorstate;
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054bc:	e070      	b.n	80055a0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d036      	beq.n	8005534 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	461a      	mov	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f001 fc93 	bl	8006e06 <SDMMC_CmdSendCSD>
 80054e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80054e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ea:	e059      	b.n	80055a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2100      	movs	r1, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fb20 	bl	8006b38 <SDIO_GetResponse>
 80054f8:	4602      	mov	r2, r0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2104      	movs	r1, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f001 fb17 	bl	8006b38 <SDIO_GetResponse>
 800550a:	4602      	mov	r2, r0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2108      	movs	r1, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f001 fb0e 	bl	8006b38 <SDIO_GetResponse>
 800551c:	4602      	mov	r2, r0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	210c      	movs	r1, #12
 8005528:	4618      	mov	r0, r3
 800552a:	f001 fb05 	bl	8006b38 <SDIO_GetResponse>
 800552e:	4602      	mov	r2, r0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2104      	movs	r1, #4
 800553a:	4618      	mov	r0, r3
 800553c:	f001 fafc 	bl	8006b38 <SDIO_GetResponse>
 8005540:	4603      	mov	r3, r0
 8005542:	0d1a      	lsrs	r2, r3, #20
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005548:	f107 0310 	add.w	r3, r7, #16
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff fd20 	bl	8004f94 <HAL_SD_GetCardCSD>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800555a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800555e:	e01f      	b.n	80055a0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	4608      	mov	r0, r1
 8005572:	f001 fb42 	bl	8006bfa <SDMMC_CmdSelDesel>
 8005576:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <SD_InitCard+0x172>
  {
    return errorstate;
 800557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005580:	e00e      	b.n	80055a0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681d      	ldr	r5, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	466c      	mov	r4, sp
 800558a:	f103 0210 	add.w	r2, r3, #16
 800558e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005594:	3304      	adds	r3, #4
 8005596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005598:	4628      	mov	r0, r5
 800559a:	f001 fa41 	bl	8006a20 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3740      	adds	r7, #64	; 0x40
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bdb0      	pop	{r4, r5, r7, pc}

080055a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 fb3d 	bl	8006c40 <SDMMC_CmdGoIdleState>
 80055c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	e072      	b.n	80056b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 fb50 	bl	8006c7c <SDMMC_CmdOperCond>
 80055dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00d      	beq.n	8005600 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fb26 	bl	8006c40 <SDMMC_CmdGoIdleState>
 80055f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <SD_PowerON+0x5e>
    {
      return errorstate;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	e05b      	b.n	80056b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560a:	2b01      	cmp	r3, #1
 800560c:	d137      	bne.n	800567e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f001 fb50 	bl	8006cba <SDMMC_CmdAppCommand>
 800561a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02d      	beq.n	800567e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005626:	e047      	b.n	80056b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fb43 	bl	8006cba <SDMMC_CmdAppCommand>
 8005634:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <SD_PowerON+0x98>
    {
      return errorstate;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e03b      	b.n	80056b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	491e      	ldr	r1, [pc, #120]	; (80056c0 <SD_PowerON+0x118>)
 8005646:	4618      	mov	r0, r3
 8005648:	f001 fb59 	bl	8006cfe <SDMMC_CmdAppOperCommand>
 800564c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005658:	e02e      	b.n	80056b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fa69 	bl	8006b38 <SDIO_GetResponse>
 8005666:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	0fdb      	lsrs	r3, r3, #31
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <SD_PowerON+0xcc>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <SD_PowerON+0xce>
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]

    count++;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	3301      	adds	r3, #1
 800567c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005684:	4293      	cmp	r3, r2
 8005686:	d802      	bhi.n	800568e <SD_PowerON+0xe6>
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0cc      	beq.n	8005628 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005694:	4293      	cmp	r3, r2
 8005696:	d902      	bls.n	800569e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800569c:	e00c      	b.n	80056b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
 80056ae:	e002      	b.n	80056b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	c1100000 	.word	0xc1100000

080056c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fa2c 	bl	8006b38 <SDIO_GetResponse>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056ea:	d102      	bne.n	80056f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056f0:	e02f      	b.n	8005752 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f879 	bl	80057f0 <SD_FindSCR>
 80056fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	e023      	b.n	8005752 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01c      	beq.n	800574e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f001 faca 	bl	8006cba <SDMMC_CmdAppCommand>
 8005726:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	e00f      	b.n	8005752 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2102      	movs	r1, #2
 8005738:	4618      	mov	r0, r3
 800573a:	f001 fb03 	bl	8006d44 <SDMMC_CmdBusWidth>
 800573e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	e003      	b.n	8005752 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800574a:	2300      	movs	r3, #0
 800574c:	e001      	b.n	8005752 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800574e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f9e1 	bl	8006b38 <SDIO_GetResponse>
 8005776:	4603      	mov	r3, r0
 8005778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005780:	d102      	bne.n	8005788 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005786:	e02f      	b.n	80057e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f82e 	bl	80057f0 <SD_FindSCR>
 8005794:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	e023      	b.n	80057e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01c      	beq.n	80057e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f001 fa7f 	bl	8006cba <SDMMC_CmdAppCommand>
 80057bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	e00f      	b.n	80057e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 fab8 	bl	8006d44 <SDMMC_CmdBusWidth>
 80057d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	e003      	b.n	80057e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e001      	b.n	80057e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b08f      	sub	sp, #60	; 0x3c
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80057fa:	f7fa ff85 	bl	8000708 <HAL_GetTick>
 80057fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005804:	2300      	movs	r3, #0
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2108      	movs	r1, #8
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f9cd 	bl	8006bb6 <SDMMC_CmdBlockLength>
 800581c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	e0b2      	b.n	800598e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	041b      	lsls	r3, r3, #16
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f001 fa40 	bl	8006cba <SDMMC_CmdAppCommand>
 800583a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	e0a3      	b.n	800598e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295
 800584a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800584c:	2308      	movs	r3, #8
 800584e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005850:	2330      	movs	r3, #48	; 0x30
 8005852:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005854:	2302      	movs	r3, #2
 8005856:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005858:	2300      	movs	r3, #0
 800585a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800585c:	2301      	movs	r3, #1
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f107 0210 	add.w	r2, r7, #16
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f001 f977 	bl	8006b5e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fa87 	bl	8006d88 <SDMMC_CmdSendSCR>
 800587a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02a      	beq.n	80058d8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	e083      	b.n	800598e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00f      	beq.n	80058b4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6819      	ldr	r1, [r3, #0]
 8005898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	f107 0208 	add.w	r2, r7, #8
 80058a0:	18d4      	adds	r4, r2, r3
 80058a2:	4608      	mov	r0, r1
 80058a4:	f001 f8e7 	bl	8006a76 <SDIO_ReadFIFO>
 80058a8:	4603      	mov	r3, r0
 80058aa:	6023      	str	r3, [r4, #0]
      index++;
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	3301      	adds	r3, #1
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	e006      	b.n	80058c2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d012      	beq.n	80058e8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80058c2:	f7fa ff21 	bl	8000708 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d102      	bne.n	80058d8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80058d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058d6:	e05a      	b.n	800598e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0cf      	beq.n	8005886 <SD_FindSCR+0x96>
 80058e6:	e000      	b.n	80058ea <SD_FindSCR+0xfa>
      break;
 80058e8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005900:	2308      	movs	r3, #8
 8005902:	e044      	b.n	800598e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2202      	movs	r2, #2
 8005918:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800591a:	2302      	movs	r3, #2
 800591c:	e037      	b.n	800598e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2220      	movs	r2, #32
 8005932:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005934:	2320      	movs	r3, #32
 8005936:	e02a      	b.n	800598e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005940:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	061a      	lsls	r2, r3, #24
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800594e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005958:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0e1b      	lsrs	r3, r3, #24
 800595e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	601a      	str	r2, [r3, #0]
    scr++;
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	3304      	adds	r3, #4
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	061a      	lsls	r2, r3, #24
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005976:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005980:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	0e1b      	lsrs	r3, r3, #24
 8005986:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	373c      	adds	r7, #60	; 0x3c
 8005992:	46bd      	mov	sp, r7
 8005994:	bd90      	pop	{r4, r7, pc}

08005996 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e041      	b.n	8005a2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f005 fcc5 	bl	800b34c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f000 fae5 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e041      	b.n	8005aca <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f839 	bl	8005ad2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fa96 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d122      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d11b      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f06f 0202 	mvn.w	r2, #2
 8005b12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa1c 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005b2e:	e005      	b.n	8005b3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fa0e 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa1f 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d122      	bne.n	8005b96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d11b      	bne.n	8005b96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f06f 0204 	mvn.w	r2, #4
 8005b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9f2 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005b82:	e005      	b.n	8005b90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f9e4 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9f5 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d122      	bne.n	8005bea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d11b      	bne.n	8005bea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0208 	mvn.w	r2, #8
 8005bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f9c8 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005bd6:	e005      	b.n	8005be4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f9ba 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f9cb 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d122      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d11b      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f06f 0210 	mvn.w	r2, #16
 8005c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2208      	movs	r2, #8
 8005c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f99e 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005c2a:	e005      	b.n	8005c38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f990 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f9a1 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d10e      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d107      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f06f 0201 	mvn.w	r2, #1
 8005c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f96a 	bl	8005f3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b80      	cmp	r3, #128	; 0x80
 8005c76:	d10e      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d107      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fca5 	bl	80065e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d107      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f966 	bl	8005f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d10e      	bne.n	8005cee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0220 	mvn.w	r2, #32
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc6f 	bl	80065cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e048      	b.n	8005da8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	d839      	bhi.n	8005d98 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d99 	.word	0x08005d99
 8005d38:	08005d99 	.word	0x08005d99
 8005d3c:	08005d6f 	.word	0x08005d6f
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d7d 	.word	0x08005d7d
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d8b 	.word	0x08005d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f99c 	bl	80060a4 <TIM_OC1_SetConfig>
      break;
 8005d6c:	e017      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f9fb 	bl	8006170 <TIM_OC2_SetConfig>
      break;
 8005d7a:	e010      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fa60 	bl	8006248 <TIM_OC3_SetConfig>
      break;
 8005d88:	e009      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fac3 	bl	800631c <TIM_OC4_SetConfig>
      break;
 8005d96:	e002      	b.n	8005d9e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0b4      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x186>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e04:	d03e      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0a:	f200 8087 	bhi.w	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	f000 8086 	beq.w	8005f22 <HAL_TIM_ConfigClockSource+0x172>
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d87f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b70      	cmp	r3, #112	; 0x70
 8005e1e:	d01a      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0xa6>
 8005e20:	2b70      	cmp	r3, #112	; 0x70
 8005e22:	d87b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b60      	cmp	r3, #96	; 0x60
 8005e26:	d050      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x11a>
 8005e28:	2b60      	cmp	r3, #96	; 0x60
 8005e2a:	d877      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b50      	cmp	r3, #80	; 0x50
 8005e2e:	d03c      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0xfa>
 8005e30:	2b50      	cmp	r3, #80	; 0x50
 8005e32:	d873      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d058      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x13a>
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d86f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b30      	cmp	r3, #48	; 0x30
 8005e3e:	d064      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b30      	cmp	r3, #48	; 0x30
 8005e42:	d86b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d060      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d867      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d05c      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d05a      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e54:	e062      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6899      	ldr	r1, [r3, #8]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f000 fb23 	bl	80064b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	609a      	str	r2, [r3, #8]
      break;
 8005e82:	e04f      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6899      	ldr	r1, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f000 fb0c 	bl	80064b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea6:	609a      	str	r2, [r3, #8]
      break;
 8005ea8:	e03c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f000 fa80 	bl	80063bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2150      	movs	r1, #80	; 0x50
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fad9 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005ec8:	e02c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 fa9f 	bl	800641a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2160      	movs	r1, #96	; 0x60
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fac9 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e01c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 fa60 	bl	80063bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2140      	movs	r1, #64	; 0x40
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fab9 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005f08:	e00c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 fab0 	bl	800647a <TIM_ITRx_SetConfig>
      break;
 8005f1a:	e003      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	e000      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a34      	ldr	r2, [pc, #208]	; (8006088 <TIM_Base_SetConfig+0xe4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a31      	ldr	r2, [pc, #196]	; (800608c <TIM_Base_SetConfig+0xe8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a30      	ldr	r2, [pc, #192]	; (8006090 <TIM_Base_SetConfig+0xec>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a2f      	ldr	r2, [pc, #188]	; (8006094 <TIM_Base_SetConfig+0xf0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a25      	ldr	r2, [pc, #148]	; (8006088 <TIM_Base_SetConfig+0xe4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01b      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d017      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a22      	ldr	r2, [pc, #136]	; (800608c <TIM_Base_SetConfig+0xe8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a21      	ldr	r2, [pc, #132]	; (8006090 <TIM_Base_SetConfig+0xec>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00f      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a20      	ldr	r2, [pc, #128]	; (8006094 <TIM_Base_SetConfig+0xf0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <TIM_Base_SetConfig+0xf4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a1e      	ldr	r2, [pc, #120]	; (800609c <TIM_Base_SetConfig+0xf8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <TIM_Base_SetConfig+0xfc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d108      	bne.n	8006040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a08      	ldr	r2, [pc, #32]	; (8006088 <TIM_Base_SetConfig+0xe4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d103      	bne.n	8006074 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	615a      	str	r2, [r3, #20]
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40010000 	.word	0x40010000
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800
 8006094:	40000c00 	.word	0x40000c00
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800

080060a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0201 	bic.w	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f023 0302 	bic.w	r3, r3, #2
 80060ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a1c      	ldr	r2, [pc, #112]	; (800616c <TIM_OC1_SetConfig+0xc8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10c      	bne.n	800611a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0308 	bic.w	r3, r3, #8
 8006106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 0304 	bic.w	r3, r3, #4
 8006118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <TIM_OC1_SetConfig+0xc8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d111      	bne.n	8006146 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	621a      	str	r2, [r3, #32]
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40010000 	.word	0x40010000

08006170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0210 	bic.w	r2, r3, #16
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0320 	bic.w	r3, r3, #32
 80061ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a1e      	ldr	r2, [pc, #120]	; (8006244 <TIM_OC2_SetConfig+0xd4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10d      	bne.n	80061ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a15      	ldr	r2, [pc, #84]	; (8006244 <TIM_OC2_SetConfig+0xd4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d113      	bne.n	800621c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40010000 	.word	0x40010000

08006248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0303 	bic.w	r3, r3, #3
 800627e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <TIM_OC3_SetConfig+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d10d      	bne.n	80062c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a14      	ldr	r2, [pc, #80]	; (8006318 <TIM_OC3_SetConfig+0xd0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d113      	bne.n	80062f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	621a      	str	r2, [r3, #32]
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40010000 	.word	0x40010000

0800631c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <TIM_OC4_SetConfig+0x9c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d109      	bne.n	8006390 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40010000 	.word	0x40010000

080063bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 030a 	bic.w	r3, r3, #10
 80063f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641a:	b480      	push	{r7}
 800641c:	b087      	sub	sp, #28
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f023 0210 	bic.w	r2, r3, #16
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	031b      	lsls	r3, r3, #12
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	f043 0307 	orr.w	r3, r3, #7
 800649c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	609a      	str	r2, [r3, #8]
}
 80064a4:	bf00      	nop
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	021a      	lsls	r2, r3, #8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	609a      	str	r2, [r3, #8]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e050      	b.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1c      	ldr	r2, [pc, #112]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d018      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d013      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a18      	ldr	r2, [pc, #96]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00e      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d009      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d10c      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4313      	orrs	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40014000 	.word	0x40014000

080065cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e03f      	b.n	8006686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f004 febc 	bl	800b398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f829 	bl	8006690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800664c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800665c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b09f      	sub	sp, #124	; 0x7c
 8006696:	af00      	add	r7, sp, #0
 8006698:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a6:	68d9      	ldr	r1, [r3, #12]
 80066a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	ea40 0301 	orr.w	r3, r0, r1
 80066b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066d4:	f021 010c 	bic.w	r1, r1, #12
 80066d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066de:	430b      	orrs	r3, r1
 80066e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ee:	6999      	ldr	r1, [r3, #24]
 80066f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	ea40 0301 	orr.w	r3, r0, r1
 80066f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4bc5      	ldr	r3, [pc, #788]	; (8006a14 <UART_SetConfig+0x384>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d004      	beq.n	800670e <UART_SetConfig+0x7e>
 8006704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4bc3      	ldr	r3, [pc, #780]	; (8006a18 <UART_SetConfig+0x388>)
 800670a:	429a      	cmp	r2, r3
 800670c:	d103      	bne.n	8006716 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800670e:	f7fe f98d 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 8006712:	6778      	str	r0, [r7, #116]	; 0x74
 8006714:	e002      	b.n	800671c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006716:	f7fe f975 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 800671a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006724:	f040 80b6 	bne.w	8006894 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672a:	461c      	mov	r4, r3
 800672c:	f04f 0500 	mov.w	r5, #0
 8006730:	4622      	mov	r2, r4
 8006732:	462b      	mov	r3, r5
 8006734:	1891      	adds	r1, r2, r2
 8006736:	6439      	str	r1, [r7, #64]	; 0x40
 8006738:	415b      	adcs	r3, r3
 800673a:	647b      	str	r3, [r7, #68]	; 0x44
 800673c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006740:	1912      	adds	r2, r2, r4
 8006742:	eb45 0303 	adc.w	r3, r5, r3
 8006746:	f04f 0000 	mov.w	r0, #0
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	00d9      	lsls	r1, r3, #3
 8006750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006754:	00d0      	lsls	r0, r2, #3
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	1911      	adds	r1, r2, r4
 800675c:	6639      	str	r1, [r7, #96]	; 0x60
 800675e:	416b      	adcs	r3, r5
 8006760:	667b      	str	r3, [r7, #100]	; 0x64
 8006762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	461a      	mov	r2, r3
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	1891      	adds	r1, r2, r2
 800676e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006770:	415b      	adcs	r3, r3
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006778:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800677c:	f7f9 fd2c 	bl	80001d8 <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4ba5      	ldr	r3, [pc, #660]	; (8006a1c <UART_SetConfig+0x38c>)
 8006786:	fba3 2302 	umull	r2, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	011e      	lsls	r6, r3, #4
 800678e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006790:	461c      	mov	r4, r3
 8006792:	f04f 0500 	mov.w	r5, #0
 8006796:	4622      	mov	r2, r4
 8006798:	462b      	mov	r3, r5
 800679a:	1891      	adds	r1, r2, r2
 800679c:	6339      	str	r1, [r7, #48]	; 0x30
 800679e:	415b      	adcs	r3, r3
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
 80067a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067a6:	1912      	adds	r2, r2, r4
 80067a8:	eb45 0303 	adc.w	r3, r5, r3
 80067ac:	f04f 0000 	mov.w	r0, #0
 80067b0:	f04f 0100 	mov.w	r1, #0
 80067b4:	00d9      	lsls	r1, r3, #3
 80067b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067ba:	00d0      	lsls	r0, r2, #3
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	1911      	adds	r1, r2, r4
 80067c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80067c4:	416b      	adcs	r3, r5
 80067c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	461a      	mov	r2, r3
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	1891      	adds	r1, r2, r2
 80067d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80067d6:	415b      	adcs	r3, r3
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067e2:	f7f9 fcf9 	bl	80001d8 <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4b8c      	ldr	r3, [pc, #560]	; (8006a1c <UART_SetConfig+0x38c>)
 80067ec:	fba3 1302 	umull	r1, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	2164      	movs	r1, #100	; 0x64
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	3332      	adds	r3, #50	; 0x32
 80067fe:	4a87      	ldr	r2, [pc, #540]	; (8006a1c <UART_SetConfig+0x38c>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800680c:	441e      	add	r6, r3
 800680e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006810:	4618      	mov	r0, r3
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	1894      	adds	r4, r2, r2
 800681c:	623c      	str	r4, [r7, #32]
 800681e:	415b      	adcs	r3, r3
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
 8006822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006826:	1812      	adds	r2, r2, r0
 8006828:	eb41 0303 	adc.w	r3, r1, r3
 800682c:	f04f 0400 	mov.w	r4, #0
 8006830:	f04f 0500 	mov.w	r5, #0
 8006834:	00dd      	lsls	r5, r3, #3
 8006836:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800683a:	00d4      	lsls	r4, r2, #3
 800683c:	4622      	mov	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	1814      	adds	r4, r2, r0
 8006842:	653c      	str	r4, [r7, #80]	; 0x50
 8006844:	414b      	adcs	r3, r1
 8006846:	657b      	str	r3, [r7, #84]	; 0x54
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	461a      	mov	r2, r3
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	1891      	adds	r1, r2, r2
 8006854:	61b9      	str	r1, [r7, #24]
 8006856:	415b      	adcs	r3, r3
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800685e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006862:	f7f9 fcb9 	bl	80001d8 <__aeabi_uldivmod>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4b6c      	ldr	r3, [pc, #432]	; (8006a1c <UART_SetConfig+0x38c>)
 800686c:	fba3 1302 	umull	r1, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	2164      	movs	r1, #100	; 0x64
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	3332      	adds	r3, #50	; 0x32
 800687e:	4a67      	ldr	r2, [pc, #412]	; (8006a1c <UART_SetConfig+0x38c>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f003 0207 	and.w	r2, r3, #7
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4432      	add	r2, r6
 8006890:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006892:	e0b9      	b.n	8006a08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006896:	461c      	mov	r4, r3
 8006898:	f04f 0500 	mov.w	r5, #0
 800689c:	4622      	mov	r2, r4
 800689e:	462b      	mov	r3, r5
 80068a0:	1891      	adds	r1, r2, r2
 80068a2:	6139      	str	r1, [r7, #16]
 80068a4:	415b      	adcs	r3, r3
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068ac:	1912      	adds	r2, r2, r4
 80068ae:	eb45 0303 	adc.w	r3, r5, r3
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f04f 0100 	mov.w	r1, #0
 80068ba:	00d9      	lsls	r1, r3, #3
 80068bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068c0:	00d0      	lsls	r0, r2, #3
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	eb12 0804 	adds.w	r8, r2, r4
 80068ca:	eb43 0905 	adc.w	r9, r3, r5
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f04f 0100 	mov.w	r1, #0
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	008b      	lsls	r3, r1, #2
 80068e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068e6:	0082      	lsls	r2, r0, #2
 80068e8:	4640      	mov	r0, r8
 80068ea:	4649      	mov	r1, r9
 80068ec:	f7f9 fc74 	bl	80001d8 <__aeabi_uldivmod>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4b49      	ldr	r3, [pc, #292]	; (8006a1c <UART_SetConfig+0x38c>)
 80068f6:	fba3 2302 	umull	r2, r3, r3, r2
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	011e      	lsls	r6, r3, #4
 80068fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006900:	4618      	mov	r0, r3
 8006902:	f04f 0100 	mov.w	r1, #0
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	1894      	adds	r4, r2, r2
 800690c:	60bc      	str	r4, [r7, #8]
 800690e:	415b      	adcs	r3, r3
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006916:	1812      	adds	r2, r2, r0
 8006918:	eb41 0303 	adc.w	r3, r1, r3
 800691c:	f04f 0400 	mov.w	r4, #0
 8006920:	f04f 0500 	mov.w	r5, #0
 8006924:	00dd      	lsls	r5, r3, #3
 8006926:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800692a:	00d4      	lsls	r4, r2, #3
 800692c:	4622      	mov	r2, r4
 800692e:	462b      	mov	r3, r5
 8006930:	1814      	adds	r4, r2, r0
 8006932:	64bc      	str	r4, [r7, #72]	; 0x48
 8006934:	414b      	adcs	r3, r1
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4618      	mov	r0, r3
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	008b      	lsls	r3, r1, #2
 800694c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006950:	0082      	lsls	r2, r0, #2
 8006952:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006956:	f7f9 fc3f 	bl	80001d8 <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <UART_SetConfig+0x38c>)
 8006960:	fba3 1302 	umull	r1, r3, r3, r2
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	2164      	movs	r1, #100	; 0x64
 8006968:	fb01 f303 	mul.w	r3, r1, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	3332      	adds	r3, #50	; 0x32
 8006972:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <UART_SetConfig+0x38c>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800697e:	441e      	add	r6, r3
 8006980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006982:	4618      	mov	r0, r3
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	1894      	adds	r4, r2, r2
 800698e:	603c      	str	r4, [r7, #0]
 8006990:	415b      	adcs	r3, r3
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006998:	1812      	adds	r2, r2, r0
 800699a:	eb41 0303 	adc.w	r3, r1, r3
 800699e:	f04f 0400 	mov.w	r4, #0
 80069a2:	f04f 0500 	mov.w	r5, #0
 80069a6:	00dd      	lsls	r5, r3, #3
 80069a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069ac:	00d4      	lsls	r4, r2, #3
 80069ae:	4622      	mov	r2, r4
 80069b0:	462b      	mov	r3, r5
 80069b2:	eb12 0a00 	adds.w	sl, r2, r0
 80069b6:	eb43 0b01 	adc.w	fp, r3, r1
 80069ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	4618      	mov	r0, r3
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	008b      	lsls	r3, r1, #2
 80069ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069d2:	0082      	lsls	r2, r0, #2
 80069d4:	4650      	mov	r0, sl
 80069d6:	4659      	mov	r1, fp
 80069d8:	f7f9 fbfe 	bl	80001d8 <__aeabi_uldivmod>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <UART_SetConfig+0x38c>)
 80069e2:	fba3 1302 	umull	r1, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	2164      	movs	r1, #100	; 0x64
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	3332      	adds	r3, #50	; 0x32
 80069f4:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <UART_SetConfig+0x38c>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4432      	add	r2, r6
 8006a06:	609a      	str	r2, [r3, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	377c      	adds	r7, #124	; 0x7c
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	bf00      	nop
 8006a14:	40011000 	.word	0x40011000
 8006a18:	40011400 	.word	0x40011400
 8006a1c:	51eb851f 	.word	0x51eb851f

08006a20 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006a20:	b084      	sub	sp, #16
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	f107 001c 	add.w	r0, r7, #28
 8006a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006a36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006a38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006a3a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006a3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006a42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006a46:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006a4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006a5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	b004      	add	sp, #16
 8006a74:	4770      	bx	lr

08006a76 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	f7f9 fe3e 	bl	8000720 <HAL_Delay>
  
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0303 	and.w	r3, r3, #3
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ae8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006aee:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006af4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b04:	f023 030f 	bic.w	r3, r3, #15
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	b2db      	uxtb	r3, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3314      	adds	r3, #20
 8006b46:	461a      	mov	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
}  
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b84:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006b8a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006b90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0

}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b088      	sub	sp, #32
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff ff74 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be6:	2110      	movs	r1, #16
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f979 	bl	8006ee0 <SDMMC_GetCmdResp1>
 8006bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08a      	sub	sp, #40	; 0x28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006c0a:	2307      	movs	r3, #7
 8006c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c0e:	2340      	movs	r3, #64	; 0x40
 8006c10:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c1a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c1c:	f107 0310 	add.w	r3, r7, #16
 8006c20:	4619      	mov	r1, r3
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7ff ff51 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2c:	2107      	movs	r1, #7
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f956 	bl	8006ee0 <SDMMC_GetCmdResp1>
 8006c34:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3728      	adds	r7, #40	; 0x28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006c50:	2300      	movs	r3, #0
 8006c52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c5e:	f107 0308 	add.w	r3, r7, #8
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ff30 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f90c 	bl	8006e88 <SDMMC_GetCmdError>
 8006c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c72:	69fb      	ldr	r3, [r7, #28]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c84:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c8e:	2340      	movs	r3, #64	; 0x40
 8006c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c9c:	f107 0308 	add.w	r3, r7, #8
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff ff11 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb03 	bl	80072b4 <SDMMC_GetCmdResp7>
 8006cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006cc8:	2337      	movs	r3, #55	; 0x37
 8006cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ccc:	2340      	movs	r3, #64	; 0x40
 8006cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cda:	f107 0308 	add.w	r3, r7, #8
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fef2 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cea:	2137      	movs	r1, #55	; 0x37
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8f7 	bl	8006ee0 <SDMMC_GetCmdResp1>
 8006cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b088      	sub	sp, #32
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d14:	2329      	movs	r3, #41	; 0x29
 8006d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff fecc 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa0a 	bl	800714c <SDMMC_GetCmdResp3>
 8006d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006d52:	2306      	movs	r3, #6
 8006d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d56:	2340      	movs	r3, #64	; 0x40
 8006d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fead 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d74:	2106      	movs	r1, #6
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8b2 	bl	8006ee0 <SDMMC_GetCmdResp1>
 8006d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3720      	adds	r7, #32
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d94:	2333      	movs	r3, #51	; 0x33
 8006d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d98:	2340      	movs	r3, #64	; 0x40
 8006d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006da6:	f107 0308 	add.w	r3, r7, #8
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fe8c 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db6:	2133      	movs	r1, #51	; 0x33
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f891 	bl	8006ee0 <SDMMC_GetCmdResp1>
 8006dbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b088      	sub	sp, #32
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006dda:	23c0      	movs	r3, #192	; 0xc0
 8006ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de8:	f107 0308 	add.w	r3, r7, #8
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fe6b 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f961 	bl	80070bc <SDMMC_GetCmdResp2>
 8006dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b088      	sub	sp, #32
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006e14:	2309      	movs	r3, #9
 8006e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006e18:	23c0      	movs	r3, #192	; 0xc0
 8006e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e26:	f107 0308 	add.w	r3, r7, #8
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff fe4c 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f942 	bl	80070bc <SDMMC_GetCmdResp2>
 8006e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006e52:	2303      	movs	r3, #3
 8006e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e64:	f107 0308 	add.w	r3, r7, #8
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fe2d 	bl	8006aca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	2103      	movs	r1, #3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f9a7 	bl	80071c8 <SDMMC_GetCmdResp6>
 8006e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e90:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <SDMMC_GetCmdError+0x50>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a11      	ldr	r2, [pc, #68]	; (8006edc <SDMMC_GetCmdError+0x54>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	0a5b      	lsrs	r3, r3, #9
 8006e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea0:	fb02 f303 	mul.w	r3, r2, r3
 8006ea4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	60fa      	str	r2, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006eb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006eb4:	e009      	b.n	8006eca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f1      	beq.n	8006ea6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	22c5      	movs	r2, #197	; 0xc5
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	20000118 	.word	0x20000118
 8006edc:	10624dd3 	.word	0x10624dd3

08006ee0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006eee:	4b70      	ldr	r3, [pc, #448]	; (80070b0 <SDMMC_GetCmdResp1+0x1d0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a70      	ldr	r2, [pc, #448]	; (80070b4 <SDMMC_GetCmdResp1+0x1d4>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	0a5a      	lsrs	r2, r3, #9
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	1e5a      	subs	r2, r3, #1
 8006f06:	61fa      	str	r2, [r7, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f10:	e0c9      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ef      	beq.n	8006f02 <SDMMC_GetCmdResp1+0x22>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ea      	bne.n	8006f02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f3e:	2304      	movs	r3, #4
 8006f40:	e0b1      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0a6      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	22c5      	movs	r2, #197	; 0xc5
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7ff fddd 	bl	8006b1e <SDIO_GetCommandResponse>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d001      	beq.n	8006f72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e099      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f72:	2100      	movs	r1, #0
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff fddf 	bl	8006b38 <SDIO_GetResponse>
 8006f7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4b4e      	ldr	r3, [pc, #312]	; (80070b8 <SDMMC_GetCmdResp1+0x1d8>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e08d      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da02      	bge.n	8006f96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f94:	e087      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006fa0:	2340      	movs	r3, #64	; 0x40
 8006fa2:	e080      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	e079      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fc0:	e071      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fd0:	e069      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe0:	e061      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ff0:	e059      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007000:	e051      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800700c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007010:	e049      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800701c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007020:	e041      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800702c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007030:	e039      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800703c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007040:	e031      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800704c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007050:	e029      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800705c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007060:	e021      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800706c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007070:	e019      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800707c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007080:	e011      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800708c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007090:	e009      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800709c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80070a0:	e001      	b.n	80070a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3720      	adds	r7, #32
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000118 	.word	0x20000118
 80070b4:	10624dd3 	.word	0x10624dd3
 80070b8:	fdffe008 	.word	0xfdffe008

080070bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070c4:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <SDMMC_GetCmdResp2+0x88>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <SDMMC_GetCmdResp2+0x8c>)
 80070ca:	fba2 2303 	umull	r2, r3, r2, r3
 80070ce:	0a5b      	lsrs	r3, r3, #9
 80070d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d4:	fb02 f303 	mul.w	r3, r2, r3
 80070d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1e5a      	subs	r2, r3, #1
 80070de:	60fa      	str	r2, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070e8:	e026      	b.n	8007138 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0ef      	beq.n	80070da <SDMMC_GetCmdResp2+0x1e>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ea      	bne.n	80070da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2204      	movs	r2, #4
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007116:	2304      	movs	r3, #4
 8007118:	e00e      	b.n	8007138 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800712c:	2301      	movs	r3, #1
 800712e:	e003      	b.n	8007138 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	22c5      	movs	r2, #197	; 0xc5
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	20000118 	.word	0x20000118
 8007148:	10624dd3 	.word	0x10624dd3

0800714c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007154:	4b1a      	ldr	r3, [pc, #104]	; (80071c0 <SDMMC_GetCmdResp3+0x74>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1a      	ldr	r2, [pc, #104]	; (80071c4 <SDMMC_GetCmdResp3+0x78>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	0a5b      	lsrs	r3, r3, #9
 8007160:	f241 3288 	movw	r2, #5000	; 0x1388
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1e5a      	subs	r2, r3, #1
 800716e:	60fa      	str	r2, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007178:	e01b      	b.n	80071b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0ef      	beq.n	800716a <SDMMC_GetCmdResp3+0x1e>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ea      	bne.n	800716a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2204      	movs	r2, #4
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071a6:	2304      	movs	r3, #4
 80071a8:	e003      	b.n	80071b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	22c5      	movs	r2, #197	; 0xc5
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000118 	.word	0x20000118
 80071c4:	10624dd3 	.word	0x10624dd3

080071c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	460b      	mov	r3, r1
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071d6:	4b35      	ldr	r3, [pc, #212]	; (80072ac <SDMMC_GetCmdResp6+0xe4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a35      	ldr	r2, [pc, #212]	; (80072b0 <SDMMC_GetCmdResp6+0xe8>)
 80071dc:	fba2 2303 	umull	r2, r3, r2, r3
 80071e0:	0a5b      	lsrs	r3, r3, #9
 80071e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	1e5a      	subs	r2, r3, #1
 80071f0:	61fa      	str	r2, [r7, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071fa:	e052      	b.n	80072a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0ef      	beq.n	80071ec <SDMMC_GetCmdResp6+0x24>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1ea      	bne.n	80071ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2204      	movs	r2, #4
 8007226:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007228:	2304      	movs	r3, #4
 800722a:	e03a      	b.n	80072a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800723e:	2301      	movs	r3, #1
 8007240:	e02f      	b.n	80072a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f7ff fc6b 	bl	8006b1e <SDIO_GetCommandResponse>
 8007248:	4603      	mov	r3, r0
 800724a:	461a      	mov	r2, r3
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	4293      	cmp	r3, r2
 8007250:	d001      	beq.n	8007256 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007252:	2301      	movs	r3, #1
 8007254:	e025      	b.n	80072a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	22c5      	movs	r2, #197	; 0xc5
 800725a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800725c:	2100      	movs	r1, #0
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7ff fc6a 	bl	8006b38 <SDIO_GetResponse>
 8007264:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	0c1b      	lsrs	r3, r3, #16
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800727a:	2300      	movs	r3, #0
 800727c:	e011      	b.n	80072a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800728c:	e009      	b.n	80072a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800729c:	e001      	b.n	80072a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800729e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000118 	.word	0x20000118
 80072b0:	10624dd3 	.word	0x10624dd3

080072b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072bc:	4b22      	ldr	r3, [pc, #136]	; (8007348 <SDMMC_GetCmdResp7+0x94>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a22      	ldr	r2, [pc, #136]	; (800734c <SDMMC_GetCmdResp7+0x98>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	0a5b      	lsrs	r3, r3, #9
 80072c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
 80072d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1e5a      	subs	r2, r3, #1
 80072d6:	60fa      	str	r2, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072e0:	e02c      	b.n	800733c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ef      	beq.n	80072d2 <SDMMC_GetCmdResp7+0x1e>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1ea      	bne.n	80072d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2204      	movs	r2, #4
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800730e:	2304      	movs	r3, #4
 8007310:	e014      	b.n	800733c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007324:	2301      	movs	r3, #1
 8007326:	e009      	b.n	800733c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2240      	movs	r2, #64	; 0x40
 8007338:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800733a:	2300      	movs	r3, #0
  
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20000118 	.word	0x20000118
 800734c:	10624dd3 	.word	0x10624dd3

08007350 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007350:	b084      	sub	sp, #16
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	f107 001c 	add.w	r0, r7, #28
 800735e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2b01      	cmp	r3, #1
 8007366:	d122      	bne.n	80073ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800737c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d105      	bne.n	80073a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fb1c 	bl	80089e0 <USB_CoreReset>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
 80073ac:	e01a      	b.n	80073e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fb10 	bl	80089e0 <USB_CoreReset>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38
 80073d6:	e005      	b.n	80073e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d10b      	bne.n	8007402 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f043 0206 	orr.w	r2, r3, #6
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f043 0220 	orr.w	r2, r3, #32
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800740e:	b004      	add	sp, #16
 8007410:	4770      	bx	lr
	...

08007414 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d165      	bne.n	80074f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4a41      	ldr	r2, [pc, #260]	; (8007530 <USB_SetTurnaroundTime+0x11c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d906      	bls.n	800743e <USB_SetTurnaroundTime+0x2a>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4a40      	ldr	r2, [pc, #256]	; (8007534 <USB_SetTurnaroundTime+0x120>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d202      	bcs.n	800743e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007438:	230f      	movs	r3, #15
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e062      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4a3c      	ldr	r2, [pc, #240]	; (8007534 <USB_SetTurnaroundTime+0x120>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d306      	bcc.n	8007454 <USB_SetTurnaroundTime+0x40>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4a3b      	ldr	r2, [pc, #236]	; (8007538 <USB_SetTurnaroundTime+0x124>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d202      	bcs.n	8007454 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800744e:	230e      	movs	r3, #14
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e057      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4a38      	ldr	r2, [pc, #224]	; (8007538 <USB_SetTurnaroundTime+0x124>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d306      	bcc.n	800746a <USB_SetTurnaroundTime+0x56>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4a37      	ldr	r2, [pc, #220]	; (800753c <USB_SetTurnaroundTime+0x128>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d202      	bcs.n	800746a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007464:	230d      	movs	r3, #13
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e04c      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4a33      	ldr	r2, [pc, #204]	; (800753c <USB_SetTurnaroundTime+0x128>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d306      	bcc.n	8007480 <USB_SetTurnaroundTime+0x6c>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4a32      	ldr	r2, [pc, #200]	; (8007540 <USB_SetTurnaroundTime+0x12c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d802      	bhi.n	8007480 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800747a:	230c      	movs	r3, #12
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	e041      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4a2f      	ldr	r2, [pc, #188]	; (8007540 <USB_SetTurnaroundTime+0x12c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d906      	bls.n	8007496 <USB_SetTurnaroundTime+0x82>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4a2e      	ldr	r2, [pc, #184]	; (8007544 <USB_SetTurnaroundTime+0x130>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d802      	bhi.n	8007496 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007490:	230b      	movs	r3, #11
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	e036      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4a2a      	ldr	r2, [pc, #168]	; (8007544 <USB_SetTurnaroundTime+0x130>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d906      	bls.n	80074ac <USB_SetTurnaroundTime+0x98>
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4a29      	ldr	r2, [pc, #164]	; (8007548 <USB_SetTurnaroundTime+0x134>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d802      	bhi.n	80074ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80074a6:	230a      	movs	r3, #10
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	e02b      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4a26      	ldr	r2, [pc, #152]	; (8007548 <USB_SetTurnaroundTime+0x134>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d906      	bls.n	80074c2 <USB_SetTurnaroundTime+0xae>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4a25      	ldr	r2, [pc, #148]	; (800754c <USB_SetTurnaroundTime+0x138>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d202      	bcs.n	80074c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074bc:	2309      	movs	r3, #9
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e020      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4a21      	ldr	r2, [pc, #132]	; (800754c <USB_SetTurnaroundTime+0x138>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d306      	bcc.n	80074d8 <USB_SetTurnaroundTime+0xc4>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4a20      	ldr	r2, [pc, #128]	; (8007550 <USB_SetTurnaroundTime+0x13c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d802      	bhi.n	80074d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80074d2:	2308      	movs	r3, #8
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e015      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <USB_SetTurnaroundTime+0x13c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d906      	bls.n	80074ee <USB_SetTurnaroundTime+0xda>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4a1c      	ldr	r2, [pc, #112]	; (8007554 <USB_SetTurnaroundTime+0x140>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d202      	bcs.n	80074ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80074e8:	2307      	movs	r3, #7
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e00a      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80074ee:	2306      	movs	r3, #6
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e007      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80074fa:	2309      	movs	r3, #9
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	e001      	b.n	8007504 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007500:	2309      	movs	r3, #9
 8007502:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	029b      	lsls	r3, r3, #10
 8007518:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800751c:	431a      	orrs	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	00d8acbf 	.word	0x00d8acbf
 8007534:	00e4e1c0 	.word	0x00e4e1c0
 8007538:	00f42400 	.word	0x00f42400
 800753c:	01067380 	.word	0x01067380
 8007540:	011a499f 	.word	0x011a499f
 8007544:	01312cff 	.word	0x01312cff
 8007548:	014ca43f 	.word	0x014ca43f
 800754c:	016e3600 	.word	0x016e3600
 8007550:	01a6ab1f 	.word	0x01a6ab1f
 8007554:	01e84800 	.word	0x01e84800

08007558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f043 0201 	orr.w	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f023 0201 	bic.w	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d115      	bne.n	80075ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075ca:	2001      	movs	r0, #1
 80075cc:	f7f9 f8a8 	bl	8000720 <HAL_Delay>
      ms++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f972 	bl	80088c0 <USB_GetMode>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d01e      	beq.n	8007620 <USB_SetCurrentMode+0x84>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b31      	cmp	r3, #49	; 0x31
 80075e6:	d9f0      	bls.n	80075ca <USB_SetCurrentMode+0x2e>
 80075e8:	e01a      	b.n	8007620 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d115      	bne.n	800761c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075fc:	2001      	movs	r0, #1
 80075fe:	f7f9 f88f 	bl	8000720 <HAL_Delay>
      ms++;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3301      	adds	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f959 	bl	80088c0 <USB_GetMode>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <USB_SetCurrentMode+0x84>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b31      	cmp	r3, #49	; 0x31
 8007618:	d9f0      	bls.n	80075fc <USB_SetCurrentMode+0x60>
 800761a:	e001      	b.n	8007620 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e005      	b.n	800762c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b32      	cmp	r3, #50	; 0x32
 8007624:	d101      	bne.n	800762a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007634:	b084      	sub	sp, #16
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800764e:	2300      	movs	r3, #0
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	e009      	b.n	8007668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3340      	adds	r3, #64	; 0x40
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	2200      	movs	r2, #0
 8007660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	3301      	adds	r3, #1
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b0e      	cmp	r3, #14
 800766c:	d9f2      	bls.n	8007654 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800766e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11c      	bne.n	80076ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007682:	f043 0302 	orr.w	r3, r3, #2
 8007686:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
 80076ac:	e00b      	b.n	80076c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076cc:	461a      	mov	r2, r3
 80076ce:	2300      	movs	r3, #0
 80076d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d8:	4619      	mov	r1, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e0:	461a      	mov	r2, r3
 80076e2:	680b      	ldr	r3, [r1, #0]
 80076e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d10c      	bne.n	8007706 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d104      	bne.n	80076fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f945 	bl	8007984 <USB_SetDevSpeed>
 80076fa:	e008      	b.n	800770e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076fc:	2101      	movs	r1, #1
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f940 	bl	8007984 <USB_SetDevSpeed>
 8007704:	e003      	b.n	800770e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007706:	2103      	movs	r1, #3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f93b 	bl	8007984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800770e:	2110      	movs	r1, #16
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f8f3 	bl	80078fc <USB_FlushTxFifo>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f90f 	bl	8007944 <USB_FlushRxFifo>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007736:	461a      	mov	r2, r3
 8007738:	2300      	movs	r3, #0
 800773a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007742:	461a      	mov	r2, r3
 8007744:	2300      	movs	r3, #0
 8007746:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	461a      	mov	r2, r3
 8007750:	2300      	movs	r3, #0
 8007752:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007754:	2300      	movs	r3, #0
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	e043      	b.n	80077e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800776c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007770:	d118      	bne.n	80077a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007784:	461a      	mov	r2, r3
 8007786:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e013      	b.n	80077b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779a:	461a      	mov	r2, r3
 800779c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	e008      	b.n	80077b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b0:	461a      	mov	r2, r3
 80077b2:	2300      	movs	r3, #0
 80077b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c2:	461a      	mov	r2, r3
 80077c4:	2300      	movs	r3, #0
 80077c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	461a      	mov	r2, r3
 80077d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	3301      	adds	r3, #1
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d3b7      	bcc.n	800775a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ea:	2300      	movs	r3, #0
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	e043      	b.n	8007878 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007806:	d118      	bne.n	800783a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	461a      	mov	r2, r3
 800781c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e013      	b.n	800784c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007830:	461a      	mov	r2, r3
 8007832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	e008      	b.n	800784c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	461a      	mov	r2, r3
 8007848:	2300      	movs	r3, #0
 800784a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007858:	461a      	mov	r2, r3
 800785a:	2300      	movs	r3, #0
 800785c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786a:	461a      	mov	r2, r3
 800786c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007870:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3301      	adds	r3, #1
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	429a      	cmp	r2, r3
 800787e:	d3b7      	bcc.n	80077f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007892:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d105      	bne.n	80078b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f043 0210 	orr.w	r2, r3, #16
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <USB_DevInit+0x2c4>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f043 0208 	orr.w	r2, r3, #8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d107      	bne.n	80078e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078e0:	f043 0304 	orr.w	r3, r3, #4
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f4:	b004      	add	sp, #16
 80078f6:	4770      	bx	lr
 80078f8:	803c3800 	.word	0x803c3800

080078fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	019b      	lsls	r3, r3, #6
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	4a08      	ldr	r2, [pc, #32]	; (8007940 <USB_FlushTxFifo+0x44>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d901      	bls.n	8007926 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e006      	b.n	8007934 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b20      	cmp	r3, #32
 8007930:	d0f1      	beq.n	8007916 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	00030d40 	.word	0x00030d40

08007944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2210      	movs	r2, #16
 8007954:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3301      	adds	r3, #1
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	4a08      	ldr	r2, [pc, #32]	; (8007980 <USB_FlushRxFifo+0x3c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d901      	bls.n	8007966 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e006      	b.n	8007974 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b10      	cmp	r3, #16
 8007970:	d0f1      	beq.n	8007956 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	00030d40 	.word	0x00030d40

08007984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079a4:	4313      	orrs	r3, r2
 80079a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0306 	and.w	r3, r3, #6
 80079ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d102      	bne.n	80079dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]
 80079da:	e00a      	b.n	80079f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d002      	beq.n	80079e8 <USB_GetDevSpeed+0x32>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b06      	cmp	r3, #6
 80079e6:	d102      	bne.n	80079ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80079e8:	2302      	movs	r3, #2
 80079ea:	75fb      	strb	r3, [r7, #23]
 80079ec:	e001      	b.n	80079f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80079ee:	230f      	movs	r3, #15
 80079f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d13a      	bne.n	8007a92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	68f9      	ldr	r1, [r7, #12]
 8007a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d155      	bne.n	8007b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	78db      	ldrb	r3, [r3, #3]
 8007a6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	059b      	lsls	r3, r3, #22
 8007a76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	e036      	b.n	8007b00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d11a      	bne.n	8007b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007afe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
	...

08007b10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d161      	bne.n	8007bf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b42:	d11f      	bne.n	8007b84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	43db      	mvns	r3, r3
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	2101      	movs	r1, #1
 8007bba:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc8:	4013      	ands	r3, r2
 8007bca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	0159      	lsls	r1, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	440b      	add	r3, r1
 8007be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be6:	4619      	mov	r1, r3
 8007be8:	4b35      	ldr	r3, [pc, #212]	; (8007cc0 <USB_DeactivateEndpoint+0x1b0>)
 8007bea:	4013      	ands	r3, r2
 8007bec:	600b      	str	r3, [r1, #0]
 8007bee:	e060      	b.n	8007cb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c06:	d11f      	bne.n	8007c48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	2101      	movs	r1, #1
 8007c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5e:	041b      	lsls	r3, r3, #16
 8007c60:	43db      	mvns	r3, r3
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c68:	4013      	ands	r3, r2
 8007c6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	43db      	mvns	r3, r3
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	0159      	lsls	r1, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	4619      	mov	r1, r3
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <USB_DeactivateEndpoint+0x1b4>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	ec337800 	.word	0xec337800
 8007cc4:	eff37800 	.word	0xeff37800

08007cc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	f040 815c 	bne.w	8007fa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d132      	bne.n	8007d58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	0151      	lsls	r1, r2, #5
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	440a      	add	r2, r1
 8007d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d50:	0cdb      	lsrs	r3, r3, #19
 8007d52:	04db      	lsls	r3, r3, #19
 8007d54:	6113      	str	r3, [r2, #16]
 8007d56:	e074      	b.n	8007e42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d72:	0cdb      	lsrs	r3, r3, #19
 8007d74:	04db      	lsls	r3, r3, #19
 8007d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6959      	ldr	r1, [r3, #20]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	440b      	add	r3, r1
 8007db4:	1e59      	subs	r1, r3, #1
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dbe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007dc0:	4b9d      	ldr	r3, [pc, #628]	; (8008038 <USB_EPStartXfer+0x370>)
 8007dc2:	400b      	ands	r3, r1
 8007dc4:	69b9      	ldr	r1, [r7, #24]
 8007dc6:	0148      	lsls	r0, r1, #5
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	4401      	add	r1, r0
 8007dcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dea:	69b9      	ldr	r1, [r7, #24]
 8007dec:	0148      	lsls	r0, r1, #5
 8007dee:	69f9      	ldr	r1, [r7, #28]
 8007df0:	4401      	add	r1, r0
 8007df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007df6:	4313      	orrs	r3, r2
 8007df8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d11f      	bne.n	8007e42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007e20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d14b      	bne.n	8007ee0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	78db      	ldrb	r3, [r3, #3]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d128      	bne.n	8007ebe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d110      	bne.n	8007e9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	e00f      	b.n	8007ebe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ebc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	e12f      	b.n	8008140 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007efe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	78db      	ldrb	r3, [r3, #3]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d015      	beq.n	8007f34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8117 	beq.w	8008140 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	2101      	movs	r1, #1
 8007f24:	fa01 f303 	lsl.w	r3, r1, r3
 8007f28:	69f9      	ldr	r1, [r7, #28]
 8007f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	634b      	str	r3, [r1, #52]	; 0x34
 8007f32:	e105      	b.n	8008140 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d110      	bne.n	8007f66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	e00f      	b.n	8007f86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	68d9      	ldr	r1, [r3, #12]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	b298      	uxth	r0, r3
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4603      	mov	r3, r0
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fa2b 	bl	80083f6 <USB_WritePacket>
 8007fa0:	e0ce      	b.n	8008140 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fbc:	0cdb      	lsrs	r3, r3, #19
 8007fbe:	04db      	lsls	r3, r3, #19
 8007fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	0151      	lsls	r1, r2, #5
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	440a      	add	r2, r1
 8007fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fe4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d126      	bne.n	800803c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008004:	69b9      	ldr	r1, [r7, #24]
 8008006:	0148      	lsls	r0, r1, #5
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	4401      	add	r1, r0
 800800c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008010:	4313      	orrs	r3, r2
 8008012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	0151      	lsls	r1, r2, #5
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	440a      	add	r2, r1
 800802a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008032:	6113      	str	r3, [r2, #16]
 8008034:	e036      	b.n	80080a4 <USB_EPStartXfer+0x3dc>
 8008036:	bf00      	nop
 8008038:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	695a      	ldr	r2, [r3, #20]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	4413      	add	r3, r2
 8008046:	1e5a      	subs	r2, r3, #1
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008050:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	8afb      	ldrh	r3, [r7, #22]
 8008062:	04d9      	lsls	r1, r3, #19
 8008064:	4b39      	ldr	r3, [pc, #228]	; (800814c <USB_EPStartXfer+0x484>)
 8008066:	400b      	ands	r3, r1
 8008068:	69b9      	ldr	r1, [r7, #24]
 800806a:	0148      	lsls	r0, r1, #5
 800806c:	69f9      	ldr	r1, [r7, #28]
 800806e:	4401      	add	r1, r0
 8008070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008074:	4313      	orrs	r3, r2
 8008076:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	8af9      	ldrh	r1, [r7, #22]
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008094:	69b9      	ldr	r1, [r7, #24]
 8008096:	0148      	lsls	r0, r1, #5
 8008098:	69f9      	ldr	r1, [r7, #28]
 800809a:	4401      	add	r1, r0
 800809c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080a0:	4313      	orrs	r3, r2
 80080a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10d      	bne.n	80080c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	68d9      	ldr	r1, [r3, #12]
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	460a      	mov	r2, r1
 80080c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	78db      	ldrb	r3, [r3, #3]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d128      	bne.n	8008120 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d110      	bne.n	8008100 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e00f      	b.n	8008120 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	440a      	add	r2, r1
 8008116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800811a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800811e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	0151      	lsls	r1, r2, #5
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	440a      	add	r2, r1
 8008136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800813a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800813e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3720      	adds	r7, #32
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	1ff80000 	.word	0x1ff80000

08008150 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b01      	cmp	r3, #1
 800816e:	f040 80cd 	bne.w	800830c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d132      	bne.n	80081e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	0151      	lsls	r1, r2, #5
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	440a      	add	r2, r1
 8008190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800819c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d8:	0cdb      	lsrs	r3, r3, #19
 80081da:	04db      	lsls	r3, r3, #19
 80081dc:	6113      	str	r3, [r2, #16]
 80081de:	e04e      	b.n	800827e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	0151      	lsls	r1, r2, #5
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	440a      	add	r2, r1
 80081f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081fa:	0cdb      	lsrs	r3, r3, #19
 80081fc:	04db      	lsls	r3, r3, #19
 80081fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	0151      	lsls	r1, r2, #5
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	440a      	add	r2, r1
 8008216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800821e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008222:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	d903      	bls.n	8008238 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	440a      	add	r2, r1
 800824e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800826e:	6939      	ldr	r1, [r7, #16]
 8008270:	0148      	lsls	r0, r1, #5
 8008272:	6979      	ldr	r1, [r7, #20]
 8008274:	4401      	add	r1, r0
 8008276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800827a:	4313      	orrs	r3, r2
 800827c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d11e      	bne.n	80082c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008298:	461a      	mov	r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e092      	b.n	80083e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d07e      	beq.n	80083e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	f003 030f 	and.w	r3, r3, #15
 80082fa:	2101      	movs	r1, #1
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	6979      	ldr	r1, [r7, #20]
 8008302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008306:	4313      	orrs	r3, r2
 8008308:	634b      	str	r3, [r1, #52]	; 0x34
 800830a:	e06d      	b.n	80083e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	0151      	lsls	r1, r2, #5
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	440a      	add	r2, r1
 8008322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008326:	0cdb      	lsrs	r3, r3, #19
 8008328:	04db      	lsls	r3, r3, #19
 800832a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008346:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800834a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800834e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800837a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008396:	6939      	ldr	r1, [r7, #16]
 8008398:	0148      	lsls	r0, r1, #5
 800839a:	6979      	ldr	r1, [r7, #20]
 800839c:	4401      	add	r1, r0
 800839e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083a2:	4313      	orrs	r3, r2
 80083a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d10d      	bne.n	80083c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d009      	beq.n	80083c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	68d9      	ldr	r1, [r3, #12]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c4:	460a      	mov	r2, r1
 80083c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b089      	sub	sp, #36	; 0x24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	4611      	mov	r1, r2
 8008402:	461a      	mov	r2, r3
 8008404:	460b      	mov	r3, r1
 8008406:	71fb      	strb	r3, [r7, #7]
 8008408:	4613      	mov	r3, r2
 800840a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008418:	2b00      	cmp	r3, #0
 800841a:	d123      	bne.n	8008464 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800841c:	88bb      	ldrh	r3, [r7, #4]
 800841e:	3303      	adds	r3, #3
 8008420:	089b      	lsrs	r3, r3, #2
 8008422:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008424:	2300      	movs	r3, #0
 8008426:	61bb      	str	r3, [r7, #24]
 8008428:	e018      	b.n	800845c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	031a      	lsls	r2, r3, #12
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	4413      	add	r3, r2
 8008432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008436:	461a      	mov	r2, r3
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	3301      	adds	r3, #1
 8008442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	3301      	adds	r3, #1
 8008448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	3301      	adds	r3, #1
 800844e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	3301      	adds	r3, #1
 800845a:	61bb      	str	r3, [r7, #24]
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	429a      	cmp	r2, r3
 8008462:	d3e2      	bcc.n	800842a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3724      	adds	r7, #36	; 0x24
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008472:	b480      	push	{r7}
 8008474:	b08b      	sub	sp, #44	; 0x2c
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	4613      	mov	r3, r2
 800847e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008488:	88fb      	ldrh	r3, [r7, #6]
 800848a:	089b      	lsrs	r3, r3, #2
 800848c:	b29b      	uxth	r3, r3
 800848e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008498:	2300      	movs	r3, #0
 800849a:	623b      	str	r3, [r7, #32]
 800849c:	e014      	b.n	80084c8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	3301      	adds	r3, #1
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	3301      	adds	r3, #1
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	3301      	adds	r3, #1
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	3301      	adds	r3, #1
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	3301      	adds	r3, #1
 80084c6:	623b      	str	r3, [r7, #32]
 80084c8:	6a3a      	ldr	r2, [r7, #32]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d3e6      	bcc.n	800849e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084d0:	8bfb      	ldrh	r3, [r7, #30]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01e      	beq.n	8008514 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e0:	461a      	mov	r2, r3
 80084e2:	f107 0310 	add.w	r3, r7, #16
 80084e6:	6812      	ldr	r2, [r2, #0]
 80084e8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	fa22 f303 	lsr.w	r3, r2, r3
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	701a      	strb	r2, [r3, #0]
      i++;
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	3301      	adds	r3, #1
 8008500:	623b      	str	r3, [r7, #32]
      pDest++;
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	3301      	adds	r3, #1
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008508:	8bfb      	ldrh	r3, [r7, #30]
 800850a:	3b01      	subs	r3, #1
 800850c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800850e:	8bfb      	ldrh	r3, [r7, #30]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1ea      	bne.n	80084ea <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008516:	4618      	mov	r0, r3
 8008518:	372c      	adds	r7, #44	; 0x2c
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d12c      	bne.n	8008598 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	db12      	blt.n	8008576 <USB_EPSetStall+0x54>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00f      	beq.n	8008576 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	440a      	add	r2, r1
 800856c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008570:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008574:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	e02b      	b.n	80085f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	db12      	blt.n	80085d0 <USB_EPSetStall+0xae>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00f      	beq.n	80085d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d128      	bne.n	800866c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008638:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	78db      	ldrb	r3, [r3, #3]
 800863e:	2b03      	cmp	r3, #3
 8008640:	d003      	beq.n	800864a <USB_EPClearStall+0x4c>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d138      	bne.n	80086bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e027      	b.n	80086bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	440a      	add	r2, r1
 8008682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800868a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	2b03      	cmp	r3, #3
 8008692:	d003      	beq.n	800869c <USB_EPClearStall+0x9e>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	78db      	ldrb	r3, [r3, #3]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d10f      	bne.n	80086bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008704:	4313      	orrs	r3, r2
 8008706:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008744:	f023 0302 	bic.w	r3, r3, #2
 8008748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008772:	f023 0303 	bic.w	r3, r3, #3
 8008776:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008786:	f043 0302 	orr.w	r3, r3, #2
 800878a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4013      	ands	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087b2:	68fb      	ldr	r3, [r7, #12]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4013      	ands	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	0c1b      	lsrs	r3, r3, #16
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	4013      	ands	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	b29b      	uxth	r3, r3
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	4013      	ands	r3, r2
 8008854:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008856:	68bb      	ldr	r3, [r7, #8]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008886:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
 8008894:	01db      	lsls	r3, r3, #7
 8008896:	b2db      	uxtb	r3, r3
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4013      	ands	r3, r2
 80088b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088b2:	68bb      	ldr	r3, [r7, #8]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f003 0301 	and.w	r3, r3, #1
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80088fa:	f023 0307 	bic.w	r3, r3, #7
 80088fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800890e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008912:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
	...

08008924 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	460b      	mov	r3, r1
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	333c      	adds	r3, #60	; 0x3c
 800893a:	3304      	adds	r3, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4a26      	ldr	r2, [pc, #152]	; (80089dc <USB_EP0_OutStart+0xb8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d90a      	bls.n	800895e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008958:	d101      	bne.n	800895e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	e037      	b.n	80089ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008964:	461a      	mov	r2, r3
 8008966:	2300      	movs	r3, #0
 8008968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800897c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898c:	f043 0318 	orr.w	r3, r3, #24
 8008990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80089a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089a6:	7afb      	ldrb	r3, [r7, #11]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d10f      	bne.n	80089cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80089ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	4f54300a 	.word	0x4f54300a

080089e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	4a13      	ldr	r2, [pc, #76]	; (8008a40 <USB_CoreReset+0x60>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d901      	bls.n	80089fc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e01a      	b.n	8008a32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	daf3      	bge.n	80089ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f043 0201 	orr.w	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <USB_CoreReset+0x60>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d901      	bls.n	8008a24 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e006      	b.n	8008a32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d0f1      	beq.n	8008a14 <USB_CoreReset+0x34>

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	00030d40 	.word	0x00030d40

08008a44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a54:	f003 f904 	bl	800bc60 <USBD_static_malloc>
 8008a58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d105      	bne.n	8008a6c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e066      	b.n	8008b3a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7c1b      	ldrb	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d119      	bne.n	8008ab0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a80:	2202      	movs	r2, #2
 8008a82:	2181      	movs	r1, #129	; 0x81
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f002 ffc8 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a94:	2202      	movs	r2, #2
 8008a96:	2101      	movs	r1, #1
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f002 ffbe 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2210      	movs	r2, #16
 8008aaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008aae:	e016      	b.n	8008ade <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ab0:	2340      	movs	r3, #64	; 0x40
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	2181      	movs	r1, #129	; 0x81
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f002 ffaf 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ac2:	2340      	movs	r3, #64	; 0x40
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f002 ffa6 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2210      	movs	r2, #16
 8008ada:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ade:	2308      	movs	r3, #8
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	2182      	movs	r1, #130	; 0x82
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f002 ff98 	bl	800ba1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7c1b      	ldrb	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b1e:	2101      	movs	r1, #1
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f003 f869 	bl	800bbf8 <USBD_LL_PrepareReceive>
 8008b26:	e007      	b.n	8008b38 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b2e:	2340      	movs	r3, #64	; 0x40
 8008b30:	2101      	movs	r1, #1
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f003 f860 	bl	800bbf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008b4e:	2181      	movs	r1, #129	; 0x81
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 ff88 	bl	800ba66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f002 ff81 	bl	800ba66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b6c:	2182      	movs	r1, #130	; 0x82
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f002 ff79 	bl	800ba66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00e      	beq.n	8008bac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f003 f86c 	bl	800bc7c <USBD_static_free>
    pdev->pClassData = NULL;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e0af      	b.n	8008d40 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d03f      	beq.n	8008c6c <USBD_CDC_Setup+0xb4>
 8008bec:	2b20      	cmp	r3, #32
 8008bee:	f040 809f 	bne.w	8008d30 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	88db      	ldrh	r3, [r3, #6]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d02e      	beq.n	8008c58 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b25b      	sxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da16      	bge.n	8008c32 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008c10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	88d2      	ldrh	r2, [r2, #6]
 8008c16:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	88db      	ldrh	r3, [r3, #6]
 8008c1c:	2b07      	cmp	r3, #7
 8008c1e:	bf28      	it	cs
 8008c20:	2307      	movcs	r3, #7
 8008c22:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	89fa      	ldrh	r2, [r7, #14]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fae9 	bl	800a202 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008c30:	e085      	b.n	8008d3e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	785a      	ldrb	r2, [r3, #1]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	88db      	ldrh	r3, [r3, #6]
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008c48:	6939      	ldr	r1, [r7, #16]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	88db      	ldrh	r3, [r3, #6]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 fb02 	bl	800a25a <USBD_CtlPrepareRx>
      break;
 8008c56:	e072      	b.n	8008d3e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	7850      	ldrb	r0, [r2, #1]
 8008c64:	2200      	movs	r2, #0
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	4798      	blx	r3
      break;
 8008c6a:	e068      	b.n	8008d3e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	785b      	ldrb	r3, [r3, #1]
 8008c70:	2b0b      	cmp	r3, #11
 8008c72:	d852      	bhi.n	8008d1a <USBD_CDC_Setup+0x162>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_CDC_Setup+0xc4>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008cad 	.word	0x08008cad
 8008c80:	08008d29 	.word	0x08008d29
 8008c84:	08008d1b 	.word	0x08008d1b
 8008c88:	08008d1b 	.word	0x08008d1b
 8008c8c:	08008d1b 	.word	0x08008d1b
 8008c90:	08008d1b 	.word	0x08008d1b
 8008c94:	08008d1b 	.word	0x08008d1b
 8008c98:	08008d1b 	.word	0x08008d1b
 8008c9c:	08008d1b 	.word	0x08008d1b
 8008ca0:	08008d1b 	.word	0x08008d1b
 8008ca4:	08008cd7 	.word	0x08008cd7
 8008ca8:	08008d01 	.word	0x08008d01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d107      	bne.n	8008cc8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cb8:	f107 030a 	add.w	r3, r7, #10
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 fa9e 	bl	800a202 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cc6:	e032      	b.n	8008d2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f001 fa28 	bl	800a120 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	75fb      	strb	r3, [r7, #23]
          break;
 8008cd4:	e02b      	b.n	8008d2e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d107      	bne.n	8008cf2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ce2:	f107 030d 	add.w	r3, r7, #13
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fa89 	bl	800a202 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cf0:	e01d      	b.n	8008d2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fa13 	bl	800a120 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8008cfe:	e016      	b.n	8008d2e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d00f      	beq.n	8008d2c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fa06 	bl	800a120 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d14:	2303      	movs	r3, #3
 8008d16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d18:	e008      	b.n	8008d2c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 f9ff 	bl	800a120 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d22:	2303      	movs	r3, #3
 8008d24:	75fb      	strb	r3, [r7, #23]
          break;
 8008d26:	e002      	b.n	8008d2e <USBD_CDC_Setup+0x176>
          break;
 8008d28:	bf00      	nop
 8008d2a:	e008      	b.n	8008d3e <USBD_CDC_Setup+0x186>
          break;
 8008d2c:	bf00      	nop
      }
      break;
 8008d2e:	e006      	b.n	8008d3e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 f9f4 	bl	800a120 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e04f      	b.n	8008e0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	3318      	adds	r3, #24
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d029      	beq.n	8008ddc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	3318      	adds	r3, #24
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	78f9      	ldrb	r1, [r7, #3]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	1a5b      	subs	r3, r3, r1
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4403      	add	r3, r0
 8008da8:	3344      	adds	r3, #68	; 0x44
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	fbb2 f1f3 	udiv	r1, r2, r3
 8008db0:	fb03 f301 	mul.w	r3, r3, r1
 8008db4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d110      	bne.n	8008ddc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	440b      	add	r3, r1
 8008dc8:	3318      	adds	r3, #24
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dce:	78f9      	ldrb	r1, [r7, #3]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f002 feee 	bl	800bbb6 <USBD_LL_Transmit>
 8008dda:	e015      	b.n	8008e08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e015      	b.n	8008e60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f002 fefe 	bl	800bc3a <USBD_LL_GetRxDataSize>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e01b      	b.n	8008eba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d015      	beq.n	8008eb8 <USBD_CDC_EP0_RxReady+0x50>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e92:	2bff      	cmp	r3, #255	; 0xff
 8008e94:	d010      	beq.n	8008eb8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008ea4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008eac:	b292      	uxth	r2, r2
 8008eae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	22ff      	movs	r2, #255	; 0xff
 8008eb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2243      	movs	r2, #67	; 0x43
 8008ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008ed2:	4b03      	ldr	r3, [pc, #12]	; (8008ee0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	20000090 	.word	0x20000090

08008ee4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2243      	movs	r2, #67	; 0x43
 8008ef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008ef2:	4b03      	ldr	r3, [pc, #12]	; (8008f00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	2000004c 	.word	0x2000004c

08008f04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2243      	movs	r2, #67	; 0x43
 8008f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008f12:	4b03      	ldr	r3, [pc, #12]	; (8008f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	200000d4 	.word	0x200000d4

08008f24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	220a      	movs	r2, #10
 8008f30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f32:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20000008 	.word	0x20000008

08008f44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e004      	b.n	8008f62 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b087      	sub	sp, #28
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f80:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e008      	b.n	8008f9e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e004      	b.n	8008fd0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e016      	b.n	8009028 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7c1b      	ldrb	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d109      	bne.n	8009016 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800900c:	2101      	movs	r1, #1
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f002 fdf2 	bl	800bbf8 <USBD_LL_PrepareReceive>
 8009014:	e007      	b.n	8009026 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800901c:	2340      	movs	r3, #64	; 0x40
 800901e:	2101      	movs	r1, #1
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f002 fde9 	bl	800bbf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009044:	2303      	movs	r3, #3
 8009046:	e01f      	b.n	8009088 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	79fa      	ldrb	r2, [r7, #7]
 800907a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f002 fc65 	bl	800b94c <USBD_LL_Init>
 8009082:	4603      	mov	r3, r0
 8009084:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e016      	b.n	80090d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	f107 020e 	add.w	r2, r7, #14
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f002 fc7c 	bl	800b9e4 <USBD_LL_Start>
 80090ec:	4603      	mov	r3, r0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009118:	2303      	movs	r3, #3
 800911a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4611      	mov	r1, r2
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	4798      	blx	r3
 8009136:	4603      	mov	r3, r0
 8009138:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	4798      	blx	r3
  }

  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 ff90 	bl	800a0ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d01a      	beq.n	80091e6 <USBD_LL_SetupStage+0x72>
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d822      	bhi.n	80091fa <USBD_LL_SetupStage+0x86>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <USBD_LL_SetupStage+0x4a>
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d00a      	beq.n	80091d2 <USBD_LL_SetupStage+0x5e>
 80091bc:	e01d      	b.n	80091fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fa62 	bl	8009690 <USBD_StdDevReq>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]
      break;
 80091d0:	e020      	b.n	8009214 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fac6 	bl	800976c <USBD_StdItfReq>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
      break;
 80091e4:	e016      	b.n	8009214 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fb05 	bl	80097fe <USBD_StdEPReq>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
      break;
 80091f8:	e00c      	b.n	8009214 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009200:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009204:	b2db      	uxtb	r3, r3
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f002 fc4b 	bl	800baa4 <USBD_LL_StallEP>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]
      break;
 8009212:	bf00      	nop
  }

  return ret;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	460b      	mov	r3, r1
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d138      	bne.n	80092a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009238:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009240:	2b03      	cmp	r3, #3
 8009242:	d14a      	bne.n	80092da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d913      	bls.n	8009278 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	1ad2      	subs	r2, r2, r3
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	4293      	cmp	r3, r2
 8009268:	bf28      	it	cs
 800926a:	4613      	movcs	r3, r2
 800926c:	461a      	mov	r2, r3
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f001 f80f 	bl	800a294 <USBD_CtlContinueRx>
 8009276:	e030      	b.n	80092da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b03      	cmp	r3, #3
 8009282:	d10b      	bne.n	800929c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f001 f80a 	bl	800a2b6 <USBD_CtlSendStatus>
 80092a2:	e01a      	b.n	80092da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	d114      	bne.n	80092da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00e      	beq.n	80092da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	7afa      	ldrb	r2, [r7, #11]
 80092c6:	4611      	mov	r1, r2
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	4798      	blx	r3
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	e000      	b.n	80092dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	460b      	mov	r3, r1
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d16b      	bne.n	80093d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3314      	adds	r3, #20
 80092fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009304:	2b02      	cmp	r3, #2
 8009306:	d156      	bne.n	80093b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	429a      	cmp	r2, r3
 8009312:	d914      	bls.n	800933e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	1ad2      	subs	r2, r2, r3
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	461a      	mov	r2, r3
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 ff84 	bl	800a238 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009330:	2300      	movs	r3, #0
 8009332:	2200      	movs	r2, #0
 8009334:	2100      	movs	r1, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f002 fc5e 	bl	800bbf8 <USBD_LL_PrepareReceive>
 800933c:	e03b      	b.n	80093b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	429a      	cmp	r2, r3
 8009348:	d11c      	bne.n	8009384 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009352:	429a      	cmp	r2, r3
 8009354:	d316      	bcc.n	8009384 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009360:	429a      	cmp	r2, r3
 8009362:	d20f      	bcs.n	8009384 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009364:	2200      	movs	r2, #0
 8009366:	2100      	movs	r1, #0
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 ff65 	bl	800a238 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009376:	2300      	movs	r3, #0
 8009378:	2200      	movs	r2, #0
 800937a:	2100      	movs	r1, #0
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f002 fc3b 	bl	800bbf8 <USBD_LL_PrepareReceive>
 8009382:	e018      	b.n	80093b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b03      	cmp	r3, #3
 800938e:	d10b      	bne.n	80093a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093a8:	2180      	movs	r1, #128	; 0x80
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f002 fb7a 	bl	800baa4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 ff93 	bl	800a2dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d122      	bne.n	8009406 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff fe98 	bl	80090f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093ce:	e01a      	b.n	8009406 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d114      	bne.n	8009406 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00e      	beq.n	8009406 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	7afa      	ldrb	r2, [r7, #11]
 80093f2:	4611      	mov	r1, r2
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	4798      	blx	r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	e000      	b.n	8009408 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e02f      	b.n	80094a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00f      	beq.n	800946e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d009      	beq.n	800946e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6852      	ldr	r2, [r2, #4]
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	4611      	mov	r1, r2
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800946e:	2340      	movs	r3, #64	; 0x40
 8009470:	2200      	movs	r2, #0
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f002 fad0 	bl	800ba1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2240      	movs	r2, #64	; 0x40
 8009486:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800948a:	2340      	movs	r3, #64	; 0x40
 800948c:	2200      	movs	r2, #0
 800948e:	2180      	movs	r1, #128	; 0x80
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f002 fac2 	bl	800ba1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2240      	movs	r2, #64	; 0x40
 80094a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2204      	movs	r2, #4
 80094e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b04      	cmp	r3, #4
 800950a:	d106      	bne.n	800951a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	e012      	b.n	8009564 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d10b      	bne.n	8009562 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009582:	2303      	movs	r3, #3
 8009584:	e014      	b.n	80095b0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b03      	cmp	r3, #3
 8009590:	d10d      	bne.n	80095ae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d007      	beq.n	80095ae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	4611      	mov	r1, r2
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e014      	b.n	80095fc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d10d      	bne.n	80095fa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d007      	beq.n	80095fa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	78fa      	ldrb	r2, [r7, #3]
 80095f4:	4611      	mov	r1, r2
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6852      	ldr	r2, [r2, #4]
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	4611      	mov	r1, r2
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	4798      	blx	r3
  }

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009652:	b480      	push	{r7}
 8009654:	b087      	sub	sp, #28
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	3301      	adds	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009670:	8a3b      	ldrh	r3, [r7, #16]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	b21a      	sxth	r2, r3
 8009676:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800967a:	4313      	orrs	r3, r2
 800967c:	b21b      	sxth	r3, r3
 800967e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009680:	89fb      	ldrh	r3, [r7, #14]
}
 8009682:	4618      	mov	r0, r3
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d005      	beq.n	80096b6 <USBD_StdDevReq+0x26>
 80096aa:	2b40      	cmp	r3, #64	; 0x40
 80096ac:	d853      	bhi.n	8009756 <USBD_StdDevReq+0xc6>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <USBD_StdDevReq+0x3a>
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d14f      	bne.n	8009756 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]
      break;
 80096c8:	e04a      	b.n	8009760 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	785b      	ldrb	r3, [r3, #1]
 80096ce:	2b09      	cmp	r3, #9
 80096d0:	d83b      	bhi.n	800974a <USBD_StdDevReq+0xba>
 80096d2:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <USBD_StdDevReq+0x48>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	0800972d 	.word	0x0800972d
 80096dc:	08009741 	.word	0x08009741
 80096e0:	0800974b 	.word	0x0800974b
 80096e4:	08009737 	.word	0x08009737
 80096e8:	0800974b 	.word	0x0800974b
 80096ec:	0800970b 	.word	0x0800970b
 80096f0:	08009701 	.word	0x08009701
 80096f4:	0800974b 	.word	0x0800974b
 80096f8:	08009723 	.word	0x08009723
 80096fc:	08009715 	.word	0x08009715
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9de 	bl	8009ac4 <USBD_GetDescriptor>
          break;
 8009708:	e024      	b.n	8009754 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb43 	bl	8009d98 <USBD_SetAddress>
          break;
 8009712:	e01f      	b.n	8009754 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fb82 	bl	8009e20 <USBD_SetConfig>
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]
          break;
 8009720:	e018      	b.n	8009754 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc21 	bl	8009f6c <USBD_GetConfig>
          break;
 800972a:	e013      	b.n	8009754 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fc52 	bl	8009fd8 <USBD_GetStatus>
          break;
 8009734:	e00e      	b.n	8009754 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fc81 	bl	800a040 <USBD_SetFeature>
          break;
 800973e:	e009      	b.n	8009754 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fc90 	bl	800a068 <USBD_ClrFeature>
          break;
 8009748:	e004      	b.n	8009754 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fce7 	bl	800a120 <USBD_CtlError>
          break;
 8009752:	bf00      	nop
      }
      break;
 8009754:	e004      	b.n	8009760 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fce1 	bl	800a120 <USBD_CtlError>
      break;
 800975e:	bf00      	nop
  }

  return ret;
 8009760:	7bfb      	ldrb	r3, [r7, #15]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop

0800976c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009782:	2b40      	cmp	r3, #64	; 0x40
 8009784:	d005      	beq.n	8009792 <USBD_StdItfReq+0x26>
 8009786:	2b40      	cmp	r3, #64	; 0x40
 8009788:	d82f      	bhi.n	80097ea <USBD_StdItfReq+0x7e>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <USBD_StdItfReq+0x26>
 800978e:	2b20      	cmp	r3, #32
 8009790:	d12b      	bne.n	80097ea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009798:	b2db      	uxtb	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	2b02      	cmp	r3, #2
 800979e:	d81d      	bhi.n	80097dc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	889b      	ldrh	r3, [r3, #4]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d813      	bhi.n	80097d2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	4798      	blx	r3
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	88db      	ldrh	r3, [r3, #6]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d110      	bne.n	80097e6 <USBD_StdItfReq+0x7a>
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10d      	bne.n	80097e6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fd73 	bl	800a2b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097d0:	e009      	b.n	80097e6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fca3 	bl	800a120 <USBD_CtlError>
          break;
 80097da:	e004      	b.n	80097e6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc9e 	bl	800a120 <USBD_CtlError>
          break;
 80097e4:	e000      	b.n	80097e8 <USBD_StdItfReq+0x7c>
          break;
 80097e6:	bf00      	nop
      }
      break;
 80097e8:	e004      	b.n	80097f4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fc97 	bl	800a120 <USBD_CtlError>
      break;
 80097f2:	bf00      	nop
  }

  return ret;
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	889b      	ldrh	r3, [r3, #4]
 8009810:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800981a:	2b40      	cmp	r3, #64	; 0x40
 800981c:	d007      	beq.n	800982e <USBD_StdEPReq+0x30>
 800981e:	2b40      	cmp	r3, #64	; 0x40
 8009820:	f200 8145 	bhi.w	8009aae <USBD_StdEPReq+0x2b0>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00c      	beq.n	8009842 <USBD_StdEPReq+0x44>
 8009828:	2b20      	cmp	r3, #32
 800982a:	f040 8140 	bne.w	8009aae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	4798      	blx	r3
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
      break;
 8009840:	e13a      	b.n	8009ab8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	785b      	ldrb	r3, [r3, #1]
 8009846:	2b03      	cmp	r3, #3
 8009848:	d007      	beq.n	800985a <USBD_StdEPReq+0x5c>
 800984a:	2b03      	cmp	r3, #3
 800984c:	f300 8129 	bgt.w	8009aa2 <USBD_StdEPReq+0x2a4>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d07f      	beq.n	8009954 <USBD_StdEPReq+0x156>
 8009854:	2b01      	cmp	r3, #1
 8009856:	d03c      	beq.n	80098d2 <USBD_StdEPReq+0xd4>
 8009858:	e123      	b.n	8009aa2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	d002      	beq.n	800986c <USBD_StdEPReq+0x6e>
 8009866:	2b03      	cmp	r3, #3
 8009868:	d016      	beq.n	8009898 <USBD_StdEPReq+0x9a>
 800986a:	e02c      	b.n	80098c6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00d      	beq.n	800988e <USBD_StdEPReq+0x90>
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b80      	cmp	r3, #128	; 0x80
 8009876:	d00a      	beq.n	800988e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f002 f911 	bl	800baa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009882:	2180      	movs	r1, #128	; 0x80
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f002 f90d 	bl	800baa4 <USBD_LL_StallEP>
 800988a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800988c:	e020      	b.n	80098d0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fc45 	bl	800a120 <USBD_CtlError>
              break;
 8009896:	e01b      	b.n	80098d0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	885b      	ldrh	r3, [r3, #2]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10e      	bne.n	80098be <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <USBD_StdEPReq+0xc0>
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
 80098a8:	2b80      	cmp	r3, #128	; 0x80
 80098aa:	d008      	beq.n	80098be <USBD_StdEPReq+0xc0>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	88db      	ldrh	r3, [r3, #6]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d104      	bne.n	80098be <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f002 f8f3 	bl	800baa4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fcf9 	bl	800a2b6 <USBD_CtlSendStatus>

              break;
 80098c4:	e004      	b.n	80098d0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fc29 	bl	800a120 <USBD_CtlError>
              break;
 80098ce:	bf00      	nop
          }
          break;
 80098d0:	e0ec      	b.n	8009aac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d002      	beq.n	80098e4 <USBD_StdEPReq+0xe6>
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d016      	beq.n	8009910 <USBD_StdEPReq+0x112>
 80098e2:	e030      	b.n	8009946 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00d      	beq.n	8009906 <USBD_StdEPReq+0x108>
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	2b80      	cmp	r3, #128	; 0x80
 80098ee:	d00a      	beq.n	8009906 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f002 f8d5 	bl	800baa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098fa:	2180      	movs	r1, #128	; 0x80
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f002 f8d1 	bl	800baa4 <USBD_LL_StallEP>
 8009902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009904:	e025      	b.n	8009952 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fc09 	bl	800a120 <USBD_CtlError>
              break;
 800990e:	e020      	b.n	8009952 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	885b      	ldrh	r3, [r3, #2]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d11b      	bne.n	8009950 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800991e:	2b00      	cmp	r3, #0
 8009920:	d004      	beq.n	800992c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f002 f8db 	bl	800bae2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fcc2 	bl	800a2b6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009944:	e004      	b.n	8009950 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fbe9 	bl	800a120 <USBD_CtlError>
              break;
 800994e:	e000      	b.n	8009952 <USBD_StdEPReq+0x154>
              break;
 8009950:	bf00      	nop
          }
          break;
 8009952:	e0ab      	b.n	8009aac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b02      	cmp	r3, #2
 800995e:	d002      	beq.n	8009966 <USBD_StdEPReq+0x168>
 8009960:	2b03      	cmp	r3, #3
 8009962:	d032      	beq.n	80099ca <USBD_StdEPReq+0x1cc>
 8009964:	e097      	b.n	8009a96 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d007      	beq.n	800997c <USBD_StdEPReq+0x17e>
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b80      	cmp	r3, #128	; 0x80
 8009970:	d004      	beq.n	800997c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fbd3 	bl	800a120 <USBD_CtlError>
                break;
 800997a:	e091      	b.n	8009aa0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800997c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009980:	2b00      	cmp	r3, #0
 8009982:	da0b      	bge.n	800999c <USBD_StdEPReq+0x19e>
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	3310      	adds	r3, #16
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	3304      	adds	r3, #4
 800999a:	e00b      	b.n	80099b4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	3304      	adds	r3, #4
 80099b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2202      	movs	r2, #2
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fc1d 	bl	800a202 <USBD_CtlSendData>
              break;
 80099c8:	e06a      	b.n	8009aa0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	da11      	bge.n	80099f6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	f003 020f 	and.w	r2, r3, #15
 80099d8:	6879      	ldr	r1, [r7, #4]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	440b      	add	r3, r1
 80099e4:	3324      	adds	r3, #36	; 0x24
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d117      	bne.n	8009a1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fb96 	bl	800a120 <USBD_CtlError>
                  break;
 80099f4:	e054      	b.n	8009aa0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	f003 020f 	and.w	r2, r3, #15
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d104      	bne.n	8009a1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fb83 	bl	800a120 <USBD_CtlError>
                  break;
 8009a1a:	e041      	b.n	8009aa0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	da0b      	bge.n	8009a3c <USBD_StdEPReq+0x23e>
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	3310      	adds	r3, #16
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4413      	add	r3, r2
 8009a38:	3304      	adds	r3, #4
 8009a3a:	e00b      	b.n	8009a54 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	3304      	adds	r3, #4
 8009a54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <USBD_StdEPReq+0x264>
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	2b80      	cmp	r3, #128	; 0x80
 8009a60:	d103      	bne.n	8009a6a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2200      	movs	r2, #0
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	e00e      	b.n	8009a88 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f002 f856 	bl	800bb20 <USBD_LL_IsStallEP>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e002      	b.n	8009a88 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2200      	movs	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fbb7 	bl	800a202 <USBD_CtlSendData>
              break;
 8009a94:	e004      	b.n	8009aa0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fb41 	bl	800a120 <USBD_CtlError>
              break;
 8009a9e:	bf00      	nop
          }
          break;
 8009aa0:	e004      	b.n	8009aac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fb3b 	bl	800a120 <USBD_CtlError>
          break;
 8009aaa:	bf00      	nop
      }
      break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb35 	bl	800a120 <USBD_CtlError>
      break;
 8009ab6:	bf00      	nop
  }

  return ret;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	0a1b      	lsrs	r3, r3, #8
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	2b06      	cmp	r3, #6
 8009ae6:	f200 8128 	bhi.w	8009d3a <USBD_GetDescriptor+0x276>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <USBD_GetDescriptor+0x2c>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009b25 	.word	0x08009b25
 8009af8:	08009b65 	.word	0x08009b65
 8009afc:	08009d3b 	.word	0x08009d3b
 8009b00:	08009d3b 	.word	0x08009d3b
 8009b04:	08009cdb 	.word	0x08009cdb
 8009b08:	08009d07 	.word	0x08009d07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7c12      	ldrb	r2, [r2, #16]
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
      break;
 8009b22:	e112      	b.n	8009d4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7c1b      	ldrb	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10d      	bne.n	8009b48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b34:	f107 0208 	add.w	r2, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	2202      	movs	r2, #2
 8009b44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b46:	e100      	b.n	8009d4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	f107 0208 	add.w	r2, r7, #8
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
 8009b58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	2202      	movs	r2, #2
 8009b60:	701a      	strb	r2, [r3, #0]
      break;
 8009b62:	e0f2      	b.n	8009d4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	885b      	ldrh	r3, [r3, #2]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b05      	cmp	r3, #5
 8009b6c:	f200 80ac 	bhi.w	8009cc8 <USBD_GetDescriptor+0x204>
 8009b70:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <USBD_GetDescriptor+0xb4>)
 8009b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b76:	bf00      	nop
 8009b78:	08009b91 	.word	0x08009b91
 8009b7c:	08009bc5 	.word	0x08009bc5
 8009b80:	08009bf9 	.word	0x08009bf9
 8009b84:	08009c2d 	.word	0x08009c2d
 8009b88:	08009c61 	.word	0x08009c61
 8009b8c:	08009c95 	.word	0x08009c95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00b      	beq.n	8009bb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	7c12      	ldrb	r2, [r2, #16]
 8009ba8:	f107 0108 	add.w	r1, r7, #8
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bb2:	e091      	b.n	8009cd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fab2 	bl	800a120 <USBD_CtlError>
            err++;
 8009bbc:	7afb      	ldrb	r3, [r7, #11]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bc2:	e089      	b.n	8009cd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	7c12      	ldrb	r2, [r2, #16]
 8009bdc:	f107 0108 	add.w	r1, r7, #8
 8009be0:	4610      	mov	r0, r2
 8009be2:	4798      	blx	r3
 8009be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009be6:	e077      	b.n	8009cd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa98 	bl	800a120 <USBD_CtlError>
            err++;
 8009bf0:	7afb      	ldrb	r3, [r7, #11]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bf6:	e06f      	b.n	8009cd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00b      	beq.n	8009c1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	7c12      	ldrb	r2, [r2, #16]
 8009c10:	f107 0108 	add.w	r1, r7, #8
 8009c14:	4610      	mov	r0, r2
 8009c16:	4798      	blx	r3
 8009c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c1a:	e05d      	b.n	8009cd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fa7e 	bl	800a120 <USBD_CtlError>
            err++;
 8009c24:	7afb      	ldrb	r3, [r7, #11]
 8009c26:	3301      	adds	r3, #1
 8009c28:	72fb      	strb	r3, [r7, #11]
          break;
 8009c2a:	e055      	b.n	8009cd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00b      	beq.n	8009c50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	7c12      	ldrb	r2, [r2, #16]
 8009c44:	f107 0108 	add.w	r1, r7, #8
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c4e:	e043      	b.n	8009cd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fa64 	bl	800a120 <USBD_CtlError>
            err++;
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c5e:	e03b      	b.n	8009cd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	7c12      	ldrb	r2, [r2, #16]
 8009c78:	f107 0108 	add.w	r1, r7, #8
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c82:	e029      	b.n	8009cd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa4a 	bl	800a120 <USBD_CtlError>
            err++;
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	72fb      	strb	r3, [r7, #11]
          break;
 8009c92:	e021      	b.n	8009cd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7c12      	ldrb	r2, [r2, #16]
 8009cac:	f107 0108 	add.w	r1, r7, #8
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb6:	e00f      	b.n	8009cd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa30 	bl	800a120 <USBD_CtlError>
            err++;
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc6:	e007      	b.n	8009cd8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa28 	bl	800a120 <USBD_CtlError>
          err++;
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009cd6:	bf00      	nop
      }
      break;
 8009cd8:	e037      	b.n	8009d4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	7c1b      	ldrb	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cea:	f107 0208 	add.w	r2, r7, #8
 8009cee:	4610      	mov	r0, r2
 8009cf0:	4798      	blx	r3
 8009cf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cf4:	e029      	b.n	8009d4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fa11 	bl	800a120 <USBD_CtlError>
        err++;
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	3301      	adds	r3, #1
 8009d02:	72fb      	strb	r3, [r7, #11]
      break;
 8009d04:	e021      	b.n	8009d4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	7c1b      	ldrb	r3, [r3, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10d      	bne.n	8009d2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d16:	f107 0208 	add.w	r2, r7, #8
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4798      	blx	r3
 8009d1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	2207      	movs	r2, #7
 8009d26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d28:	e00f      	b.n	8009d4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9f7 	bl	800a120 <USBD_CtlError>
        err++;
 8009d32:	7afb      	ldrb	r3, [r7, #11]
 8009d34:	3301      	adds	r3, #1
 8009d36:	72fb      	strb	r3, [r7, #11]
      break;
 8009d38:	e007      	b.n	8009d4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f9ef 	bl	800a120 <USBD_CtlError>
      err++;
 8009d42:	7afb      	ldrb	r3, [r7, #11]
 8009d44:	3301      	adds	r3, #1
 8009d46:	72fb      	strb	r3, [r7, #11]
      break;
 8009d48:	bf00      	nop
  }

  if (err != 0U)
 8009d4a:	7afb      	ldrb	r3, [r7, #11]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d11e      	bne.n	8009d8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	88db      	ldrh	r3, [r3, #6]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d016      	beq.n	8009d86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009d58:	893b      	ldrh	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00e      	beq.n	8009d7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	88da      	ldrh	r2, [r3, #6]
 8009d62:	893b      	ldrh	r3, [r7, #8]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	bf28      	it	cs
 8009d68:	4613      	movcs	r3, r2
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d6e:	893b      	ldrh	r3, [r7, #8]
 8009d70:	461a      	mov	r2, r3
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fa44 	bl	800a202 <USBD_CtlSendData>
 8009d7a:	e009      	b.n	8009d90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9ce 	bl	800a120 <USBD_CtlError>
 8009d84:	e004      	b.n	8009d90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa95 	bl	800a2b6 <USBD_CtlSendStatus>
 8009d8c:	e000      	b.n	8009d90 <USBD_GetDescriptor+0x2cc>
    return;
 8009d8e:	bf00      	nop
  }
}
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop

08009d98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	889b      	ldrh	r3, [r3, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d131      	bne.n	8009e0e <USBD_SetAddress+0x76>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88db      	ldrh	r3, [r3, #6]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d12d      	bne.n	8009e0e <USBD_SetAddress+0x76>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	2b7f      	cmp	r3, #127	; 0x7f
 8009db8:	d829      	bhi.n	8009e0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d104      	bne.n	8009ddc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f9a3 	bl	800a120 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dda:	e01d      	b.n	8009e18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7bfa      	ldrb	r2, [r7, #15]
 8009de0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 fec5 	bl	800bb78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fa61 	bl	800a2b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d004      	beq.n	8009e04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e02:	e009      	b.n	8009e18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e0c:	e004      	b.n	8009e18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f985 	bl	800a120 <USBD_CtlError>
  }
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	885b      	ldrh	r3, [r3, #2]
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	4b4c      	ldr	r3, [pc, #304]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e38:	4b4b      	ldr	r3, [pc, #300]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d905      	bls.n	8009e4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f96c 	bl	800a120 <USBD_CtlError>
    return USBD_FAIL;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e088      	b.n	8009f5e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d002      	beq.n	8009e5e <USBD_SetConfig+0x3e>
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d025      	beq.n	8009ea8 <USBD_SetConfig+0x88>
 8009e5c:	e071      	b.n	8009f42 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e5e:	4b42      	ldr	r3, [pc, #264]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01c      	beq.n	8009ea0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009e66:	4b40      	ldr	r3, [pc, #256]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e70:	4b3d      	ldr	r3, [pc, #244]	; (8009f68 <USBD_SetConfig+0x148>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff f948 	bl	800910c <USBD_SetClassConfig>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f949 	bl	800a120 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e8e:	e065      	b.n	8009f5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fa10 	bl	800a2b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2203      	movs	r2, #3
 8009e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e9e:	e05d      	b.n	8009f5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fa08 	bl	800a2b6 <USBD_CtlSendStatus>
      break;
 8009ea6:	e059      	b.n	8009f5c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ea8:	4b2f      	ldr	r3, [pc, #188]	; (8009f68 <USBD_SetConfig+0x148>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d112      	bne.n	8009ed6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009eb8:	4b2b      	ldr	r3, [pc, #172]	; (8009f68 <USBD_SetConfig+0x148>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ec2:	4b29      	ldr	r3, [pc, #164]	; (8009f68 <USBD_SetConfig+0x148>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff f93b 	bl	8009144 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f9f1 	bl	800a2b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ed4:	e042      	b.n	8009f5c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009ed6:	4b24      	ldr	r3, [pc, #144]	; (8009f68 <USBD_SetConfig+0x148>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d02a      	beq.n	8009f3a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff f929 	bl	8009144 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ef2:	4b1d      	ldr	r3, [pc, #116]	; (8009f68 <USBD_SetConfig+0x148>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009efc:	4b1a      	ldr	r3, [pc, #104]	; (8009f68 <USBD_SetConfig+0x148>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff f902 	bl	800910c <USBD_SetClassConfig>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00f      	beq.n	8009f32 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f903 	bl	800a120 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff f90e 	bl	8009144 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f30:	e014      	b.n	8009f5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f9bf 	bl	800a2b6 <USBD_CtlSendStatus>
      break;
 8009f38:	e010      	b.n	8009f5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f9bb 	bl	800a2b6 <USBD_CtlSendStatus>
      break;
 8009f40:	e00c      	b.n	8009f5c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f8eb 	bl	800a120 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f4a:	4b07      	ldr	r3, [pc, #28]	; (8009f68 <USBD_SetConfig+0x148>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff f8f7 	bl	8009144 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f56:	2303      	movs	r3, #3
 8009f58:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5a:	bf00      	nop
  }

  return ret;
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	2000019c 	.word	0x2000019c

08009f6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88db      	ldrh	r3, [r3, #6]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d004      	beq.n	8009f88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f8cd 	bl	800a120 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f86:	e023      	b.n	8009fd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	dc02      	bgt.n	8009f9a <USBD_GetConfig+0x2e>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dc03      	bgt.n	8009fa0 <USBD_GetConfig+0x34>
 8009f98:	e015      	b.n	8009fc6 <USBD_GetConfig+0x5a>
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d00b      	beq.n	8009fb6 <USBD_GetConfig+0x4a>
 8009f9e:	e012      	b.n	8009fc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	2201      	movs	r2, #1
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f927 	bl	800a202 <USBD_CtlSendData>
        break;
 8009fb4:	e00c      	b.n	8009fd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	2201      	movs	r2, #1
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f91f 	bl	800a202 <USBD_CtlSendData>
        break;
 8009fc4:	e004      	b.n	8009fd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f8a9 	bl	800a120 <USBD_CtlError>
        break;
 8009fce:	bf00      	nop
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	3b01      	subs	r3, #1
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d81e      	bhi.n	800a02e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	88db      	ldrh	r3, [r3, #6]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d004      	beq.n	800a002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f890 	bl	800a120 <USBD_CtlError>
        break;
 800a000:	e01a      	b.n	800a038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	f043 0202 	orr.w	r2, r3, #2
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	330c      	adds	r3, #12
 800a022:	2202      	movs	r2, #2
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f8eb 	bl	800a202 <USBD_CtlSendData>
      break;
 800a02c:	e004      	b.n	800a038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f875 	bl	800a120 <USBD_CtlError>
      break;
 800a036:	bf00      	nop
  }
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	885b      	ldrh	r3, [r3, #2]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d106      	bne.n	800a060 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f92b 	bl	800a2b6 <USBD_CtlSendStatus>
  }
}
 800a060:	bf00      	nop
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d80b      	bhi.n	800a098 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	885b      	ldrh	r3, [r3, #2]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d10c      	bne.n	800a0a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f910 	bl	800a2b6 <USBD_CtlSendStatus>
      }
      break;
 800a096:	e004      	b.n	800a0a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f840 	bl	800a120 <USBD_CtlError>
      break;
 800a0a0:	e000      	b.n	800a0a4 <USBD_ClrFeature+0x3c>
      break;
 800a0a2:	bf00      	nop
  }
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	781a      	ldrb	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	781a      	ldrb	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f7ff fabb 	bl	8009652 <SWAPBYTE>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff faae 	bl	8009652 <SWAPBYTE>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3301      	adds	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff faa1 	bl	8009652 <SWAPBYTE>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	80da      	strh	r2, [r3, #6]
}
 800a118:	bf00      	nop
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a12a:	2180      	movs	r1, #128	; 0x80
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 fcb9 	bl	800baa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a132:	2100      	movs	r1, #0
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 fcb5 	bl	800baa4 <USBD_LL_StallEP>
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d036      	beq.n	800a1c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a15c:	6938      	ldr	r0, [r7, #16]
 800a15e:	f000 f836 	bl	800a1ce <USBD_GetLen>
 800a162:	4603      	mov	r3, r0
 800a164:	3301      	adds	r3, #1
 800a166:	b29b      	uxth	r3, r3
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	4413      	add	r3, r2
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	7812      	ldrb	r2, [r2, #0]
 800a17a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	3301      	adds	r3, #1
 800a180:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	4413      	add	r3, r2
 800a188:	2203      	movs	r2, #3
 800a18a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	3301      	adds	r3, #1
 800a190:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a192:	e013      	b.n	800a1bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	4413      	add	r3, r2
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	7812      	ldrb	r2, [r2, #0]
 800a19e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	613b      	str	r3, [r7, #16]
    idx++;
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
    idx++;
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e7      	bne.n	800a194 <USBD_GetString+0x52>
 800a1c4:	e000      	b.n	800a1c8 <USBD_GetString+0x86>
    return;
 800a1c6:	bf00      	nop
  }
}
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b085      	sub	sp, #20
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1de:	e005      	b.n	800a1ec <USBD_GetLen+0x1e>
  {
    len++;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1f5      	bne.n	800a1e0 <USBD_GetLen+0x12>
  }

  return len;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2202      	movs	r2, #2
 800a212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	2100      	movs	r1, #0
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f001 fcc4 	bl	800bbb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	2100      	movs	r1, #0
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f001 fcb3 	bl	800bbb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2203      	movs	r2, #3
 800a26a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	2100      	movs	r1, #0
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f001 fcb7 	bl	800bbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f001 fca6 	bl	800bbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2204      	movs	r2, #4
 800a2c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 fc72 	bl	800bbb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2205      	movs	r2, #5
 800a2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 fc80 	bl	800bbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
	...

0800a304 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0

	switch(sApplicationBase.eApplicationState)
 800a308:	4b17      	ldr	r3, [pc, #92]	; (800a368 <ApplicationPerform+0x64>)
 800a30a:	7e5b      	ldrb	r3, [r3, #25]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d822      	bhi.n	800a358 <ApplicationPerform+0x54>
 800a312:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <ApplicationPerform+0x14>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a329 	.word	0x0800a329
 800a31c:	0800a337 	.word	0x0800a337
 800a320:	0800a353 	.word	0x0800a353
 800a324:	0800a361 	.word	0x0800a361
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800a328:	2000      	movs	r0, #0
 800a32a:	f7f6 f8d1 	bl	80004d0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800a32e:	2001      	movs	r0, #1
 800a330:	f000 f8a6 	bl	800a480 <AppStateChangeRequest>
		break;
 800a334:	e015      	b.n	800a362 <ApplicationPerform+0x5e>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800a336:	f000 f8ef 	bl	800a518 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800a33a:	f000 fb8f 	bl	800aa5c <TempCollect_Initialize>
		DataHandler_Initialize();
 800a33e:	f000 f92f 	bl	800a5a0 <DataHandler_Initialize>
		TurnAllSensorOn();
 800a342:	f7f6 f931 	bl	80005a8 <TurnAllSensorOn>
		TurnOnSynchronousEvent();
 800a346:	f000 f923 	bl	800a590 <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800a34a:	2002      	movs	r0, #2
 800a34c:	f000 f898 	bl	800a480 <AppStateChangeRequest>
		break;
 800a350:	e007      	b.n	800a362 <ApplicationPerform+0x5e>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800a352:	f000 f867 	bl	800a424 <AsynchronousTaskScheduler>
		break;
 800a356:	e004      	b.n	800a362 <ApplicationPerform+0x5e>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800a358:	2010      	movs	r0, #16
 800a35a:	f000 f905 	bl	800a568 <AssertError>
		break;
 800a35e:	e000      	b.n	800a362 <ApplicationPerform+0x5e>
		break;
 800a360:	bf00      	nop
	}

}
 800a362:	bf00      	nop
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200001a0 	.word	0x200001a0

0800a36c <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800a370:	4b20      	ldr	r3, [pc, #128]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d006      	beq.n	800a388 <AsynchronousTaskTimerUpdate+0x1c>
	{
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800a37a:	4b1e      	ldr	r3, [pc, #120]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a37c:	885b      	ldrh	r3, [r3, #2]
 800a37e:	b29b      	uxth	r3, r3
 800a380:	3301      	adds	r3, #1
 800a382:	b29a      	uxth	r2, r3
 800a384:	4b1b      	ldr	r3, [pc, #108]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a386:	805a      	strh	r2, [r3, #2]
	}
	if(sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800a388:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a38a:	791b      	ldrb	r3, [r3, #4]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <AsynchronousTaskTimerUpdate+0x34>
	{
		sApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800a392:	4b18      	ldr	r3, [pc, #96]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a394:	88db      	ldrh	r3, [r3, #6]
 800a396:	b29b      	uxth	r3, r3
 800a398:	3301      	adds	r3, #1
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	4b15      	ldr	r3, [pc, #84]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a39e:	80da      	strh	r2, [r3, #6]
	}
	if(sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800a3a0:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3a2:	7a1b      	ldrb	r3, [r3, #8]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d006      	beq.n	800a3b8 <AsynchronousTaskTimerUpdate+0x4c>
	{
		sApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800a3aa:	4b12      	ldr	r3, [pc, #72]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3ac:	895b      	ldrh	r3, [r3, #10]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3b6:	815a      	strh	r2, [r3, #10]
	}
	if(sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800a3b8:	4b0e      	ldr	r3, [pc, #56]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3ba:	7b1b      	ldrb	r3, [r3, #12]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d006      	beq.n	800a3d0 <AsynchronousTaskTimerUpdate+0x64>
	{
		sApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3c4:	89db      	ldrh	r3, [r3, #14]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3ce:	81da      	strh	r2, [r3, #14]
	}
	if(sApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800a3d0:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3d2:	7c1b      	ldrb	r3, [r3, #16]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d006      	beq.n	800a3e8 <AsynchronousTaskTimerUpdate+0x7c>
	{
		sApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800a3da:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3dc:	8a5b      	ldrh	r3, [r3, #18]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	4b03      	ldr	r3, [pc, #12]	; (800a3f4 <AsynchronousTaskTimerUpdate+0x88>)
 800a3e6:	825a      	strh	r2, [r3, #18]
	}

}
 800a3e8:	bf00      	nop
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	200001a0 	.word	0x200001a0

0800a3f8 <AsynchronousTask_10ms>:

/* Internal functions */
void AsynchronousTask_10ms()
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800a3fc:	f000 fa3e 	bl	800a87c <TempCollect_Operate>
}
 800a400:	bf00      	nop
 800a402:	bd80      	pop	{r7, pc}

0800a404 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0

}
 800a408:	bf00      	nop
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800a412:	b580      	push	{r7, lr}
 800a414:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800a416:	f7f6 f877 	bl	8000508 <ToggleLED_B>
	DataHandler_Operate();
 800a41a:	f000 fa0d 	bl	800a838 <DataHandler_Operate>
}
 800a41e:	bf00      	nop
 800a420:	bd80      	pop	{r7, pc}
	...

0800a424 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800a424:	b580      	push	{r7, lr}
 800a426:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800a428:	4b14      	ldr	r3, [pc, #80]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a42a:	885b      	ldrh	r3, [r3, #2]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a432:	d304      	bcc.n	800a43e <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800a434:	f7ff ffed 	bl	800a412 <AsynchronousTask_1000ms>
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a438:	4b10      	ldr	r3, [pc, #64]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	805a      	strh	r2, [r3, #2]
	}

	if(sApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800a43e:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a440:	88db      	ldrh	r3, [r3, #6]
 800a442:	b29b      	uxth	r3, r3
 800a444:	2b63      	cmp	r3, #99	; 0x63
 800a446:	d904      	bls.n	800a452 <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800a448:	f7ff ffdc 	bl	800a404 <AsynchronousTask_100ms>
		sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a44c:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a44e:	2200      	movs	r2, #0
 800a450:	80da      	strh	r2, [r3, #6]
	}

	if(sApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800a452:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a454:	895b      	ldrh	r3, [r3, #10]
 800a456:	b29b      	uxth	r3, r3
 800a458:	2b09      	cmp	r3, #9
 800a45a:	d904      	bls.n	800a466 <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800a45c:	f7ff ffcc 	bl	800a3f8 <AsynchronousTask_10ms>
		sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a460:	4b06      	ldr	r3, [pc, #24]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a462:	2200      	movs	r2, #0
 800a464:	815a      	strh	r2, [r3, #10]
	}

	if(sApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a468:	89db      	ldrh	r3, [r3, #14]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <AsynchronousTaskScheduler+0x52>
	{
//		AsynchronousTask_1ms();
		sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a470:	4b02      	ldr	r3, [pc, #8]	; (800a47c <AsynchronousTaskScheduler+0x58>)
 800a472:	2200      	movs	r2, #0
 800a474:	81da      	strh	r2, [r3, #14]
	}

}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200001a0 	.word	0x200001a0

0800a480 <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
	switch(sApplicationBase.eApplicationState)
 800a48a:	4b22      	ldr	r3, [pc, #136]	; (800a514 <AppStateChangeRequest+0x94>)
 800a48c:	7e5b      	ldrb	r3, [r3, #25]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b03      	cmp	r3, #3
 800a492:	d837      	bhi.n	800a504 <AppStateChangeRequest+0x84>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <AppStateChangeRequest+0x1c>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4ad 	.word	0x0800a4ad
 800a4a0:	0800a4c3 	.word	0x0800a4c3
 800a4a4:	0800a4d9 	.word	0x0800a4d9
 800a4a8:	0800a4fd 	.word	0x0800a4fd
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d103      	bne.n	800a4ba <AppStateChangeRequest+0x3a>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a4b2:	4b18      	ldr	r3, [pc, #96]	; (800a514 <AppStateChangeRequest+0x94>)
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a4b8:	e028      	b.n	800a50c <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a4ba:	2020      	movs	r0, #32
 800a4bc:	f000 f854 	bl	800a568 <AssertError>
		break;
 800a4c0:	e024      	b.n	800a50c <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800a4c2:	79fb      	ldrb	r3, [r7, #7]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d103      	bne.n	800a4d0 <AppStateChangeRequest+0x50>
		{
			sApplicationBase.eApplicationState = eApp_Perform;
 800a4c8:	4b12      	ldr	r3, [pc, #72]	; (800a514 <AppStateChangeRequest+0x94>)
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a4ce:	e01d      	b.n	800a50c <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a4d0:	2020      	movs	r0, #32
 800a4d2:	f000 f849 	bl	800a568 <AssertError>
		break;
 800a4d6:	e019      	b.n	800a50c <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d103      	bne.n	800a4e6 <AppStateChangeRequest+0x66>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a4de:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <AppStateChangeRequest+0x94>)
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a4e4:	e012      	b.n	800a50c <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d103      	bne.n	800a4f4 <AppStateChangeRequest+0x74>
			sApplicationBase.eApplicationState = eApp_Shutdown;
 800a4ec:	4b09      	ldr	r3, [pc, #36]	; (800a514 <AppStateChangeRequest+0x94>)
 800a4ee:	2203      	movs	r2, #3
 800a4f0:	765a      	strb	r2, [r3, #25]
		break;
 800a4f2:	e00b      	b.n	800a50c <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a4f4:	2020      	movs	r0, #32
 800a4f6:	f000 f837 	bl	800a568 <AssertError>
		break;
 800a4fa:	e007      	b.n	800a50c <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800a4fc:	2020      	movs	r0, #32
 800a4fe:	f000 f833 	bl	800a568 <AssertError>
		break;
 800a502:	e003      	b.n	800a50c <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800a504:	2020      	movs	r0, #32
 800a506:	f000 f82f 	bl	800a568 <AssertError>
		break;
 800a50a:	bf00      	nop
	}

}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	200001a0 	.word	0x200001a0

0800a518 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
	sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800a51c:	4b11      	ldr	r3, [pc, #68]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]
	sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800a522:	4b10      	ldr	r3, [pc, #64]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a524:	2201      	movs	r2, #1
 800a526:	711a      	strb	r2, [r3, #4]
	sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800a528:	4b0e      	ldr	r3, [pc, #56]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	721a      	strb	r2, [r3, #8]
	sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800a52e:	4b0d      	ldr	r3, [pc, #52]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a530:	2201      	movs	r2, #1
 800a532:	731a      	strb	r2, [r3, #12]
	sApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a536:	2201      	movs	r2, #1
 800a538:	741a      	strb	r2, [r3, #16]

	sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	805a      	strh	r2, [r3, #2]
	sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a540:	4b08      	ldr	r3, [pc, #32]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a542:	2200      	movs	r2, #0
 800a544:	80da      	strh	r2, [r3, #6]
	sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a546:	4b07      	ldr	r3, [pc, #28]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a548:	2200      	movs	r2, #0
 800a54a:	815a      	strh	r2, [r3, #10]
	sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a54e:	2200      	movs	r2, #0
 800a550:	81da      	strh	r2, [r3, #14]
	sApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800a552:	4b04      	ldr	r3, [pc, #16]	; (800a564 <AppEnableResetTaskTimers+0x4c>)
 800a554:	2200      	movs	r2, #0
 800a556:	825a      	strh	r2, [r3, #18]
}
 800a558:	bf00      	nop
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	200001a0 	.word	0x200001a0

0800a568 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	80fb      	strh	r3, [r7, #6]
	sApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <AssertError+0x24>)
 800a574:	695a      	ldr	r2, [r3, #20]
 800a576:	88fb      	ldrh	r3, [r7, #6]
 800a578:	4313      	orrs	r3, r2
 800a57a:	4a04      	ldr	r2, [pc, #16]	; (800a58c <AssertError+0x24>)
 800a57c:	6153      	str	r3, [r2, #20]
}
 800a57e:	bf00      	nop
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	200001a0 	.word	0x200001a0

0800a590 <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0

}
 800a594:	bf00      	nop
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
	...

0800a5a0 <DataHandler_Initialize>:
}DataHandler_t;

static DataHandler_t kDataHandler;

void DataHandler_Initialize()
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800a5a4:	f000 f808 	bl	800a5b8 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <DataHandler_Initialize+0x14>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	701a      	strb	r2, [r3, #0]

}
 800a5ae:	bf00      	nop
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	200001bc 	.word	0x200001bc

0800a5b8 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800a5b8:	b490      	push	{r4, r7}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800a5be:	4b33      	ldr	r3, [pc, #204]	; (800a68c <DataHandler_Reset+0xd4>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800a5c6:	4b31      	ldr	r3, [pc, #196]	; (800a68c <DataHandler_Reset+0xd4>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800a5ce:	4b2f      	ldr	r3, [pc, #188]	; (800a68c <DataHandler_Reset+0xd4>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800a5d6:	4b2d      	ldr	r3, [pc, #180]	; (800a68c <DataHandler_Reset+0xd4>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800a5de:	4b2b      	ldr	r3, [pc, #172]	; (800a68c <DataHandler_Reset+0xd4>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	71fb      	strb	r3, [r7, #7]
 800a5ea:	e046      	b.n	800a67a <DataHandler_Reset+0xc2>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	71bb      	strb	r3, [r7, #6]
 800a5f0:	e03d      	b.n	800a66e <DataHandler_Reset+0xb6>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800a5f2:	79fa      	ldrb	r2, [r7, #7]
 800a5f4:	4925      	ldr	r1, [pc, #148]	; (800a68c <DataHandler_Reset+0xd4>)
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	019b      	lsls	r3, r3, #6
 800a5fa:	4413      	add	r3, r2
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	440b      	add	r3, r1
 800a600:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a604:	2200      	movs	r2, #0
 800a606:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800a608:	79fa      	ldrb	r2, [r7, #7]
 800a60a:	4920      	ldr	r1, [pc, #128]	; (800a68c <DataHandler_Reset+0xd4>)
 800a60c:	4613      	mov	r3, r2
 800a60e:	019b      	lsls	r3, r3, #6
 800a610:	4413      	add	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	440b      	add	r3, r1
 800a616:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a61a:	2200      	movs	r2, #0
 800a61c:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800a61e:	79fa      	ldrb	r2, [r7, #7]
 800a620:	491a      	ldr	r1, [pc, #104]	; (800a68c <DataHandler_Reset+0xd4>)
 800a622:	4613      	mov	r3, r2
 800a624:	019b      	lsls	r3, r3, #6
 800a626:	4413      	add	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	440b      	add	r3, r1
 800a62c:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a630:	2200      	movs	r2, #0
 800a632:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a634:	2300      	movs	r3, #0
 800a636:	717b      	strb	r3, [r7, #5]
 800a638:	e013      	b.n	800a662 <DataHandler_Reset+0xaa>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800a63a:	79fa      	ldrb	r2, [r7, #7]
 800a63c:	79bb      	ldrb	r3, [r7, #6]
 800a63e:	7979      	ldrb	r1, [r7, #5]
 800a640:	4c12      	ldr	r4, [pc, #72]	; (800a68c <DataHandler_Reset+0xd4>)
 800a642:	0118      	lsls	r0, r3, #4
 800a644:	4613      	mov	r3, r2
 800a646:	019b      	lsls	r3, r3, #6
 800a648:	4413      	add	r3, r2
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	4403      	add	r3, r0
 800a64e:	440b      	add	r3, r1
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4423      	add	r3, r4
 800a654:	3308      	adds	r3, #8
 800a656:	f04f 0200 	mov.w	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a65c:	797b      	ldrb	r3, [r7, #5]
 800a65e:	3301      	adds	r3, #1
 800a660:	717b      	strb	r3, [r7, #5]
 800a662:	797b      	ldrb	r3, [r7, #5]
 800a664:	2b0f      	cmp	r3, #15
 800a666:	d9e8      	bls.n	800a63a <DataHandler_Reset+0x82>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a668:	79bb      	ldrb	r3, [r7, #6]
 800a66a:	3301      	adds	r3, #1
 800a66c:	71bb      	strb	r3, [r7, #6]
 800a66e:	79bb      	ldrb	r3, [r7, #6]
 800a670:	2b07      	cmp	r3, #7
 800a672:	d9be      	bls.n	800a5f2 <DataHandler_Reset+0x3a>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	3301      	adds	r3, #1
 800a678:	71fb      	strb	r3, [r7, #7]
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d9b5      	bls.n	800a5ec <DataHandler_Reset+0x34>
			}
		}
	}

}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bc90      	pop	{r4, r7}
 800a68a:	4770      	bx	lr
 800a68c:	200001bc 	.word	0x200001bc

0800a690 <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800a698:	4b42      	ldr	r3, [pc, #264]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d078      	beq.n	800a792 <DataHandler_OpenNewMeasurement+0x102>
	{
		kDataHandler.u8LengthPointer++;
 800a6a0:	4b40      	ldr	r3, [pc, #256]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6a2:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	4b3e      	ldr	r3, [pc, #248]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6ac:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800a6b0:	4b3c      	ldr	r3, [pc, #240]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800a6b8:	4b3a      	ldr	r3, [pc, #232]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6ba:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a6be:	2b07      	cmp	r3, #7
 800a6c0:	d96b      	bls.n	800a79a <DataHandler_OpenNewMeasurement+0x10a>
		{
			kDataHandler.u8LengthPointer = 0;
 800a6c2:	4b38      	ldr	r3, [pc, #224]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800a6ca:	4b36      	ldr	r3, [pc, #216]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6cc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4a34      	ldr	r2, [pc, #208]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	019b      	lsls	r3, r3, #6
 800a6d8:	440b      	add	r3, r1
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800a6e6:	4b2f      	ldr	r3, [pc, #188]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6e8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	4a2d      	ldr	r2, [pc, #180]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	019b      	lsls	r3, r3, #6
 800a6f4:	440b      	add	r3, r1
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a6fe:	2201      	movs	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800a702:	4b28      	ldr	r3, [pc, #160]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a704:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a708:	4619      	mov	r1, r3
 800a70a:	4a26      	ldr	r2, [pc, #152]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a70c:	460b      	mov	r3, r1
 800a70e:	019b      	lsls	r3, r3, #6
 800a710:	440b      	add	r3, r1
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	4413      	add	r3, r2
 800a716:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a71a:	2200      	movs	r2, #0
 800a71c:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800a71e:	4b21      	ldr	r3, [pc, #132]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a720:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a724:	4619      	mov	r1, r3
 800a726:	4a1f      	ldr	r2, [pc, #124]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a728:	460b      	mov	r3, r1
 800a72a:	019b      	lsls	r3, r3, #6
 800a72c:	440b      	add	r3, r1
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4413      	add	r3, r2
 800a732:	3304      	adds	r3, #4
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800a738:	4b1a      	ldr	r3, [pc, #104]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a73a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a73e:	4619      	mov	r1, r3
 800a740:	4a18      	ldr	r2, [pc, #96]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a742:	460b      	mov	r3, r1
 800a744:	019b      	lsls	r3, r3, #6
 800a746:	440b      	add	r3, r1
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	4413      	add	r3, r2
 800a74c:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f083 0301 	eor.w	r3, r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <DataHandler_OpenNewMeasurement+0xd2>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800a75c:	2040      	movs	r0, #64	; 0x40
 800a75e:	f7ff ff03 	bl	800a568 <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800a762:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a764:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800a768:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a76a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800a76e:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a770:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a774:	3301      	adds	r3, #1
 800a776:	b2da      	uxtb	r2, r3
 800a778:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a77a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a780:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a784:	2b01      	cmp	r3, #1
 800a786:	d908      	bls.n	800a79a <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <DataHandler_OpenNewMeasurement+0x114>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800a790:	e003      	b.n	800a79a <DataHandler_OpenNewMeasurement+0x10a>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a792:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a796:	f7ff fee7 	bl	800a568 <AssertError>
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200001bc 	.word	0x200001bc

0800a7a8 <DataHandler_StoreMeasurement>:
void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800a7b2:	4b20      	ldr	r3, [pc, #128]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a7b4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800a7b8:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800a7ba:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a7bc:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800a7c0:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800a7c2:	4b1c      	ldr	r3, [pc, #112]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a7c4:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a7c8:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800a7ca:	4b1a      	ldr	r3, [pc, #104]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d028      	beq.n	800a824 <DataHandler_StoreMeasurement+0x7c>
	{

		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800a7d2:	7bfa      	ldrb	r2, [r7, #15]
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	7b79      	ldrb	r1, [r7, #13]
 800a7d8:	4c16      	ldr	r4, [pc, #88]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a7da:	0118      	lsls	r0, r3, #4
 800a7dc:	4613      	mov	r3, r2
 800a7de:	019b      	lsls	r3, r3, #6
 800a7e0:	4413      	add	r3, r2
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	4403      	add	r3, r0
 800a7e6:	440b      	add	r3, r1
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4423      	add	r3, r4
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	601a      	str	r2, [r3, #0]

		kDataHandler.u8WidthPointer++;
 800a7f2:	4b10      	ldr	r3, [pc, #64]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a7f4:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a7fe:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800a802:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a804:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a808:	2b0f      	cmp	r3, #15
 800a80a:	d90f      	bls.n	800a82c <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800a80c:	4b09      	ldr	r3, [pc, #36]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a80e:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800a812:	3b01      	subs	r3, #1
 800a814:	b2da      	uxtb	r2, r3
 800a816:	4b07      	ldr	r3, [pc, #28]	; (800a834 <DataHandler_StoreMeasurement+0x8c>)
 800a818:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800a81c:	2080      	movs	r0, #128	; 0x80
 800a81e:	f7ff fea3 	bl	800a568 <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800a822:	e003      	b.n	800a82c <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a824:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a828:	f7ff fe9e 	bl	800a568 <AssertError>
}
 800a82c:	bf00      	nop
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	bd90      	pop	{r4, r7, pc}
 800a834:	200001bc 	.word	0x200001bc

0800a838 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800a83c:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <DataHandler_Operate+0x40>)
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d013      	beq.n	800a86c <DataHandler_Operate+0x34>
	{

		if( kDataHandler.bPageFilled )
 800a844:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <DataHandler_Operate+0x40>)
 800a846:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d012      	beq.n	800a874 <DataHandler_Operate+0x3c>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800a84e:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <DataHandler_Operate+0x40>)
 800a850:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800a854:	4619      	mov	r1, r3
 800a856:	4a08      	ldr	r2, [pc, #32]	; (800a878 <DataHandler_Operate+0x40>)
 800a858:	460b      	mov	r3, r1
 800a85a:	019b      	lsls	r3, r3, #6
 800a85c:	440b      	add	r3, r1
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4413      	add	r3, r2
 800a862:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a866:	2201      	movs	r2, #1
 800a868:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800a86a:	e003      	b.n	800a874 <DataHandler_Operate+0x3c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a86c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a870:	f7ff fe7a 	bl	800a568 <AssertError>
}
 800a874:	bf00      	nop
 800a876:	bd80      	pop	{r7, pc}
 800a878:	200001bc 	.word	0x200001bc

0800a87c <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800a880:	4b73      	ldr	r3, [pc, #460]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a882:	79db      	ldrb	r3, [r3, #7]
 800a884:	2b05      	cmp	r3, #5
 800a886:	f200 80d8 	bhi.w	800aa3a <TempCollect_Operate+0x1be>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <TempCollect_Operate+0x14>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a8a9 	.word	0x0800a8a9
 800a894:	0800a8b3 	.word	0x0800a8b3
 800a898:	0800a8ed 	.word	0x0800a8ed
 800a89c:	0800a95f 	.word	0x0800a95f
 800a8a0:	0800a9e3 	.word	0x0800a9e3
 800a8a4:	0800a947 	.word	0x0800a947
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800a8a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a8ac:	f7ff fe5c 	bl	800a568 <AssertError>
		break;
 800a8b0:	e0cb      	b.n	800aa4a <TempCollect_Operate+0x1ce>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800a8b2:	4b67      	ldr	r3, [pc, #412]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8b4:	799b      	ldrb	r3, [r3, #6]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 80c4 	beq.w	800aa44 <TempCollect_Operate+0x1c8>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800a8bc:	4b64      	ldr	r3, [pc, #400]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8be:	2202      	movs	r2, #2
 800a8c0:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800a8c2:	4b63      	ldr	r3, [pc, #396]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800a8c8:	4b61      	ldr	r3, [pc, #388]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800a8ce:	4b60      	ldr	r3, [pc, #384]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800a8d4:	4b5e      	ldr	r3, [pc, #376]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	725a      	strb	r2, [r3, #9]
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800a8da:	4b5d      	ldr	r3, [pc, #372]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	495b      	ldr	r1, [pc, #364]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8e2:	618a      	str	r2, [r1, #24]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff fed3 	bl	800a690 <DataHandler_OpenNewMeasurement>
		}
		break;
 800a8ea:	e0ab      	b.n	800aa44 <TempCollect_Operate+0x1c8>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800a8ec:	4b58      	ldr	r3, [pc, #352]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800a8f2:	4b57      	ldr	r3, [pc, #348]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8f4:	8a9b      	ldrh	r3, [r3, #20]
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d80e      	bhi.n	800a918 <TempCollect_Operate+0x9c>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800a8fa:	4b55      	ldr	r3, [pc, #340]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800a900:	4b53      	ldr	r3, [pc, #332]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a902:	8a9b      	ldrh	r3, [r3, #20]
 800a904:	461a      	mov	r2, r3
 800a906:	4613      	mov	r3, r2
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4a51      	ldr	r2, [pc, #324]	; (800aa54 <TempCollect_Operate+0x1d8>)
 800a910:	4413      	add	r3, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7f5 fe52 	bl	80005bc <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800a918:	4b4d      	ldr	r3, [pc, #308]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a91a:	8adb      	ldrh	r3, [r3, #22]
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d80e      	bhi.n	800a93e <TempCollect_Operate+0xc2>
		{
			kTemperatureData.bStateReady[1] = false;
 800a920:	4b4b      	ldr	r3, [pc, #300]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a922:	2200      	movs	r2, #0
 800a924:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800a926:	4b4a      	ldr	r3, [pc, #296]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a928:	8adb      	ldrh	r3, [r3, #22]
 800a92a:	461a      	mov	r2, r3
 800a92c:	4613      	mov	r3, r2
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	4413      	add	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4a48      	ldr	r2, [pc, #288]	; (800aa58 <TempCollect_Operate+0x1dc>)
 800a936:	4413      	add	r3, r2
 800a938:	4618      	mov	r0, r3
 800a93a:	f7f5 fe3f 	bl	80005bc <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800a93e:	4b44      	ldr	r3, [pc, #272]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a940:	2205      	movs	r2, #5
 800a942:	71da      	strb	r2, [r3, #7]
		break;
 800a944:	e081      	b.n	800aa4a <TempCollect_Operate+0x1ce>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800a946:	4b42      	ldr	r3, [pc, #264]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a948:	7a9b      	ldrb	r3, [r3, #10]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d07c      	beq.n	800aa48 <TempCollect_Operate+0x1cc>
 800a94e:	4b40      	ldr	r3, [pc, #256]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a950:	7adb      	ldrb	r3, [r3, #11]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d078      	beq.n	800aa48 <TempCollect_Operate+0x1cc>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800a956:	4b3e      	ldr	r3, [pc, #248]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a958:	2203      	movs	r2, #3
 800a95a:	71da      	strb	r2, [r3, #7]
		}
		break;
 800a95c:	e074      	b.n	800aa48 <TempCollect_Operate+0x1cc>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800a95e:	4b3c      	ldr	r3, [pc, #240]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a960:	7a1b      	ldrb	r3, [r3, #8]
 800a962:	f083 0301 	eor.w	r3, r3, #1
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d017      	beq.n	800a99c <TempCollect_Operate+0x120>
		{
			kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800a96c:	4b38      	ldr	r3, [pc, #224]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a96e:	8a9b      	ldrh	r3, [r3, #20]
 800a970:	461a      	mov	r2, r3
 800a972:	4613      	mov	r3, r2
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	4413      	add	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4a36      	ldr	r2, [pc, #216]	; (800aa54 <TempCollect_Operate+0x1d8>)
 800a97c:	4413      	add	r3, r2
 800a97e:	4618      	mov	r0, r3
 800a980:	f7f5 fe32 	bl	80005e8 <MCP9808_DecodeTemperature>
 800a984:	eef0 7a40 	vmov.f32	s15, s0
 800a988:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a98a:	edc3 7a03 	vstr	s15, [r3, #12]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800a98e:	4b30      	ldr	r3, [pc, #192]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a990:	edd3 7a03 	vldr	s15, [r3, #12]
 800a994:	eeb0 0a67 	vmov.f32	s0, s15
 800a998:	f7ff ff06 	bl	800a7a8 <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800a99c:	4b2c      	ldr	r3, [pc, #176]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a99e:	7a5b      	ldrb	r3, [r3, #9]
 800a9a0:	f083 0301 	eor.w	r3, r3, #1
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d017      	beq.n	800a9da <TempCollect_Operate+0x15e>
		{
			kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800a9aa:	4b29      	ldr	r3, [pc, #164]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9ac:	8adb      	ldrh	r3, [r3, #22]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4a27      	ldr	r2, [pc, #156]	; (800aa58 <TempCollect_Operate+0x1dc>)
 800a9ba:	4413      	add	r3, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7f5 fe13 	bl	80005e8 <MCP9808_DecodeTemperature>
 800a9c2:	eef0 7a40 	vmov.f32	s15, s0
 800a9c6:	4b22      	ldr	r3, [pc, #136]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9c8:	edc3 7a04 	vstr	s15, [r3, #16]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800a9cc:	4b20      	ldr	r3, [pc, #128]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9ce:	edd3 7a04 	vldr	s15, [r3, #16]
 800a9d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9d6:	f7ff fee7 	bl	800a7a8 <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800a9da:	4b1d      	ldr	r3, [pc, #116]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9dc:	2204      	movs	r2, #4
 800a9de:	71da      	strb	r2, [r3, #7]
		break;
 800a9e0:	e033      	b.n	800aa4a <TempCollect_Operate+0x1ce>

	case(TempCollect_ArmNewReading):
		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9e4:	8a9b      	ldrh	r3, [r3, #20]
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d903      	bls.n	800a9f2 <TempCollect_Operate+0x176>
		{
			kTemperatureData.bReadFinished[0] = true;
 800a9ea:	4b19      	ldr	r3, [pc, #100]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	721a      	strb	r2, [r3, #8]
 800a9f0:	e005      	b.n	800a9fe <TempCollect_Operate+0x182>
		}
		else
		{
			kTemperatureData.u16ArrayASensorIndex++;
 800a9f2:	4b17      	ldr	r3, [pc, #92]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9f4:	8a9b      	ldrh	r3, [r3, #20]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800a9fc:	829a      	strh	r2, [r3, #20]
		}

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800a9fe:	4b14      	ldr	r3, [pc, #80]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa00:	8adb      	ldrh	r3, [r3, #22]
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d903      	bls.n	800aa0e <TempCollect_Operate+0x192>
		{
			kTemperatureData.bReadFinished[1] = true;
 800aa06:	4b12      	ldr	r3, [pc, #72]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa08:	2201      	movs	r2, #1
 800aa0a:	725a      	strb	r2, [r3, #9]
 800aa0c:	e005      	b.n	800aa1a <TempCollect_Operate+0x19e>
		}
		else
		{
			kTemperatureData.u16ArrayBSensorIndex++;
 800aa0e:	4b10      	ldr	r3, [pc, #64]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa10:	8adb      	ldrh	r3, [r3, #22]
 800aa12:	3301      	adds	r3, #1
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	4b0e      	ldr	r3, [pc, #56]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa18:	82da      	strh	r2, [r3, #22]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800aa1a:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa1c:	7a1b      	ldrb	r3, [r3, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d007      	beq.n	800aa32 <TempCollect_Operate+0x1b6>
 800aa22:	4b0b      	ldr	r3, [pc, #44]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa24:	7a5b      	ldrb	r3, [r3, #9]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <TempCollect_Operate+0x1b6>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	71da      	strb	r2, [r3, #7]
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800aa30:	e00b      	b.n	800aa4a <TempCollect_Operate+0x1ce>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800aa32:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <TempCollect_Operate+0x1d4>)
 800aa34:	2202      	movs	r2, #2
 800aa36:	71da      	strb	r2, [r3, #7]
		break;
 800aa38:	e007      	b.n	800aa4a <TempCollect_Operate+0x1ce>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800aa3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800aa3e:	f7ff fd93 	bl	800a568 <AssertError>
	break;
 800aa42:	e002      	b.n	800aa4a <TempCollect_Operate+0x1ce>
		break;
 800aa44:	bf00      	nop
 800aa46:	e000      	b.n	800aa4a <TempCollect_Operate+0x1ce>
		break;
 800aa48:	bf00      	nop
	}
}
 800aa4a:	bf00      	nop
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	200005d8 	.word	0x200005d8
 800aa54:	20000814 	.word	0x20000814
 800aa58:	20000850 	.word	0x20000850

0800aa5c <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <TempCollect_Initialize+0x1c>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800aa66:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <TempCollect_Initialize+0x1c>)
 800aa68:	2201      	movs	r2, #1
 800aa6a:	715a      	strb	r2, [r3, #5]
}
 800aa6c:	bf00      	nop
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	200005d8 	.word	0x200005d8

0800aa7c <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800aa80:	f7f5 fd4c 	bl	800051c <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800aa84:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <TempCollect_ScheduleMeasurement+0x24>)
 800aa86:	799b      	ldrb	r3, [r3, #6]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d004      	beq.n	800aa96 <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800aa8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aa90:	f7ff fd6a 	bl	800a568 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800aa94:	e002      	b.n	800aa9c <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800aa96:	4b02      	ldr	r3, [pc, #8]	; (800aaa0 <TempCollect_ScheduleMeasurement+0x24>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	719a      	strb	r2, [r3, #6]
}
 800aa9c:	bf00      	nop
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	200005d8 	.word	0x200005d8

0800aaa4 <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800aaa8:	4b03      	ldr	r3, [pc, #12]	; (800aab8 <TempCollect_I2CA_Done+0x14>)
 800aaaa:	2201      	movs	r2, #1
 800aaac:	729a      	strb	r2, [r3, #10]
}
 800aaae:	bf00      	nop
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	200005d8 	.word	0x200005d8

0800aabc <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800aac0:	4b03      	ldr	r3, [pc, #12]	; (800aad0 <TempCollect_I2CB_Done+0x14>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	72da      	strb	r2, [r3, #11]
}
 800aac6:	bf00      	nop
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	200005d8 	.word	0x200005d8

0800aad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aad8:	f7f5 fdb0 	bl	800063c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aadc:	f000 f828 	bl	800ab30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aae0:	f000 fa00 	bl	800aee4 <MX_GPIO_Init>
  MX_DMA_Init();
 800aae4:	f000 f9de 	bl	800aea4 <MX_DMA_Init>
  MX_RTC_Init();
 800aae8:	f000 f8ea 	bl	800acc0 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800aaec:	f000 f90e 	bl	800ad0c <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800aaf0:	f000 f88a 	bl	800ac08 <MX_I2C1_Init>
  MX_I2C2_Init();
 800aaf4:	f000 f8b6 	bl	800ac64 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800aaf8:	f000 f9aa 	bl	800ae50 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800aafc:	f000 fd0c 	bl	800b518 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800ab00:	f000 f934 	bl	800ad6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800ab04:	2201      	movs	r2, #1
 800ab06:	2101      	movs	r1, #1
 800ab08:	4808      	ldr	r0, [pc, #32]	; (800ab2c <main+0x58>)
 800ab0a:	f7f6 fbdd 	bl	80012c8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ab14:	4805      	ldr	r0, [pc, #20]	; (800ab2c <main+0x58>)
 800ab16:	f7f6 fbd7 	bl	80012c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ab20:	4802      	ldr	r0, [pc, #8]	; (800ab2c <main+0x58>)
 800ab22:	f7f6 fbd1 	bl	80012c8 <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800ab26:	f7ff fbed 	bl	800a304 <ApplicationPerform>
 800ab2a:	e7fc      	b.n	800ab26 <main+0x52>
 800ab2c:	40020800 	.word	0x40020800

0800ab30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b094      	sub	sp, #80	; 0x50
 800ab34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab36:	f107 0320 	add.w	r3, r7, #32
 800ab3a:	2230      	movs	r2, #48	; 0x30
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 fa30 	bl	800bfa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ab44:	f107 030c 	add.w	r3, r7, #12
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	609a      	str	r2, [r3, #8]
 800ab50:	60da      	str	r2, [r3, #12]
 800ab52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ab54:	2300      	movs	r3, #0
 800ab56:	60bb      	str	r3, [r7, #8]
 800ab58:	4b29      	ldr	r3, [pc, #164]	; (800ac00 <SystemClock_Config+0xd0>)
 800ab5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5c:	4a28      	ldr	r2, [pc, #160]	; (800ac00 <SystemClock_Config+0xd0>)
 800ab5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab62:	6413      	str	r3, [r2, #64]	; 0x40
 800ab64:	4b26      	ldr	r3, [pc, #152]	; (800ac00 <SystemClock_Config+0xd0>)
 800ab66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab6c:	60bb      	str	r3, [r7, #8]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab70:	2300      	movs	r3, #0
 800ab72:	607b      	str	r3, [r7, #4]
 800ab74:	4b23      	ldr	r3, [pc, #140]	; (800ac04 <SystemClock_Config+0xd4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a22      	ldr	r2, [pc, #136]	; (800ac04 <SystemClock_Config+0xd4>)
 800ab7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	4b20      	ldr	r3, [pc, #128]	; (800ac04 <SystemClock_Config+0xd4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab88:	607b      	str	r3, [r7, #4]
 800ab8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800ab8c:	2305      	movs	r3, #5
 800ab8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ab90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ab96:	2301      	movs	r3, #1
 800ab98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ab9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800aba4:	230c      	movs	r3, #12
 800aba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800aba8:	2348      	movs	r3, #72	; 0x48
 800abaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800abac:	2302      	movs	r3, #2
 800abae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800abb0:	2303      	movs	r3, #3
 800abb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800abb4:	f107 0320 	add.w	r3, r7, #32
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f9 faf9 	bl	80041b0 <HAL_RCC_OscConfig>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800abc4:	f000 fa10 	bl	800afe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800abc8:	230f      	movs	r3, #15
 800abca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800abcc:	2302      	movs	r3, #2
 800abce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800abd0:	2300      	movs	r3, #0
 800abd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800abd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800abde:	f107 030c 	add.w	r3, r7, #12
 800abe2:	2102      	movs	r1, #2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7f9 fd59 	bl	800469c <HAL_RCC_ClockConfig>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800abf0:	f000 f9fa 	bl	800afe8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800abf4:	f7f9 fe38 	bl	8004868 <HAL_RCC_EnableCSS>
}
 800abf8:	bf00      	nop
 800abfa:	3750      	adds	r7, #80	; 0x50
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	40023800 	.word	0x40023800
 800ac04:	40007000 	.word	0x40007000

0800ac08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800ac0c:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac0e:	4a13      	ldr	r2, [pc, #76]	; (800ac5c <MX_I2C1_Init+0x54>)
 800ac10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800ac12:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac14:	4a12      	ldr	r2, [pc, #72]	; (800ac60 <MX_I2C1_Init+0x58>)
 800ac16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ac18:	4b0f      	ldr	r3, [pc, #60]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800ac1e:	4b0e      	ldr	r3, [pc, #56]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ac24:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ac2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ac32:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ac3e:	4b06      	ldr	r3, [pc, #24]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ac44:	4804      	ldr	r0, [pc, #16]	; (800ac58 <MX_I2C1_Init+0x50>)
 800ac46:	f7f6 fb73 	bl	8001330 <HAL_I2C_Init>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ac50:	f000 f9ca 	bl	800afe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ac54:	bf00      	nop
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	200008f0 	.word	0x200008f0
 800ac5c:	40005400 	.word	0x40005400
 800ac60:	000186a0 	.word	0x000186a0

0800ac64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800ac68:	4b12      	ldr	r3, [pc, #72]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac6a:	4a13      	ldr	r2, [pc, #76]	; (800acb8 <MX_I2C2_Init+0x54>)
 800ac6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800ac6e:	4b11      	ldr	r3, [pc, #68]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac70:	4a12      	ldr	r2, [pc, #72]	; (800acbc <MX_I2C2_Init+0x58>)
 800ac72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ac74:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800ac7a:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ac80:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ac86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800ac8e:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ac94:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ac9a:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <MX_I2C2_Init+0x50>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800aca0:	4804      	ldr	r0, [pc, #16]	; (800acb4 <MX_I2C2_Init+0x50>)
 800aca2:	f7f6 fb45 	bl	8001330 <HAL_I2C_Init>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800acac:	f000 f99c 	bl	800afe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800acb0:	bf00      	nop
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20000944 	.word	0x20000944
 800acb8:	40005800 	.word	0x40005800
 800acbc:	000186a0 	.word	0x000186a0

0800acc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800acc4:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <MX_RTC_Init+0x44>)
 800acc6:	4a10      	ldr	r2, [pc, #64]	; (800ad08 <MX_RTC_Init+0x48>)
 800acc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800acca:	4b0e      	ldr	r3, [pc, #56]	; (800ad04 <MX_RTC_Init+0x44>)
 800accc:	2200      	movs	r2, #0
 800acce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800acd0:	4b0c      	ldr	r3, [pc, #48]	; (800ad04 <MX_RTC_Init+0x44>)
 800acd2:	227f      	movs	r2, #127	; 0x7f
 800acd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <MX_RTC_Init+0x44>)
 800acd8:	22ff      	movs	r2, #255	; 0xff
 800acda:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <MX_RTC_Init+0x44>)
 800acde:	2200      	movs	r2, #0
 800ace0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ace2:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <MX_RTC_Init+0x44>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ace8:	4b06      	ldr	r3, [pc, #24]	; (800ad04 <MX_RTC_Init+0x44>)
 800acea:	2200      	movs	r2, #0
 800acec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800acee:	4805      	ldr	r0, [pc, #20]	; (800ad04 <MX_RTC_Init+0x44>)
 800acf0:	f7f9 ffbc 	bl	8004c6c <HAL_RTC_Init>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800acfa:	f000 f975 	bl	800afe8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800acfe:	bf00      	nop
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	200009dc 	.word	0x200009dc
 800ad08:	40002800 	.word	0x40002800

0800ad0c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800ad10:	4b14      	ldr	r3, [pc, #80]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad12:	4a15      	ldr	r2, [pc, #84]	; (800ad68 <MX_SDIO_SD_Init+0x5c>)
 800ad14:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800ad1c:	4b11      	ldr	r3, [pc, #68]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ad22:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800ad28:	4b0e      	ldr	r3, [pc, #56]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800ad34:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800ad3a:	480a      	ldr	r0, [pc, #40]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad3c:	f7fa f87b 	bl	8004e36 <HAL_SD_Init>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800ad46:	f000 f94f 	bl	800afe8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ad4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad4e:	4805      	ldr	r0, [pc, #20]	; (800ad64 <MX_SDIO_SD_Init+0x58>)
 800ad50:	f7fa fac4 	bl	80052dc <HAL_SD_ConfigWideBusOperation>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800ad5a:	f000 f945 	bl	800afe8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800ad5e:	bf00      	nop
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	200009fc 	.word	0x200009fc
 800ad68:	40012c00 	.word	0x40012c00

0800ad6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08e      	sub	sp, #56	; 0x38
 800ad70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ad72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	605a      	str	r2, [r3, #4]
 800ad7c:	609a      	str	r2, [r3, #8]
 800ad7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad80:	f107 0320 	add.w	r3, r7, #32
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ad8a:	1d3b      	adds	r3, r7, #4
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	605a      	str	r2, [r3, #4]
 800ad92:	609a      	str	r2, [r3, #8]
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	611a      	str	r2, [r3, #16]
 800ad98:	615a      	str	r2, [r3, #20]
 800ad9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ad9c:	4b2b      	ldr	r3, [pc, #172]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800ad9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ada2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800ada4:	4b29      	ldr	r3, [pc, #164]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800ada6:	2248      	movs	r2, #72	; 0x48
 800ada8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800adaa:	4b28      	ldr	r3, [pc, #160]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800adac:	2200      	movs	r2, #0
 800adae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 800adb0:	4b26      	ldr	r3, [pc, #152]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800adb2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800adb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800adb8:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800adba:	2200      	movs	r2, #0
 800adbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800adbe:	4b23      	ldr	r3, [pc, #140]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800adc0:	2280      	movs	r2, #128	; 0x80
 800adc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800adc4:	4821      	ldr	r0, [pc, #132]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800adc6:	f7fa fde6 	bl	8005996 <HAL_TIM_Base_Init>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800add0:	f000 f90a 	bl	800afe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800add4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800add8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800adda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adde:	4619      	mov	r1, r3
 800ade0:	481a      	ldr	r0, [pc, #104]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800ade2:	f7fa ffe5 	bl	8005db0 <HAL_TIM_ConfigClockSource>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800adec:	f000 f8fc 	bl	800afe8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800adf0:	4816      	ldr	r0, [pc, #88]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800adf2:	f7fa fe1f 	bl	8005a34 <HAL_TIM_OC_Init>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800adfc:	f000 f8f4 	bl	800afe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae00:	2300      	movs	r3, #0
 800ae02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae04:	2300      	movs	r3, #0
 800ae06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ae08:	f107 0320 	add.w	r3, r7, #32
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	480f      	ldr	r0, [pc, #60]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800ae10:	f7fb fb6e 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800ae1a:	f000 f8e5 	bl	800afe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ae2e:	1d3b      	adds	r3, r7, #4
 800ae30:	2200      	movs	r2, #0
 800ae32:	4619      	mov	r1, r3
 800ae34:	4805      	ldr	r0, [pc, #20]	; (800ae4c <MX_TIM2_Init+0xe0>)
 800ae36:	f7fa ff5f 	bl	8005cf8 <HAL_TIM_OC_ConfigChannel>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800ae40:	f000 f8d2 	bl	800afe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ae44:	bf00      	nop
 800ae46:	3738      	adds	r7, #56	; 0x38
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	20000a80 	.word	0x20000a80

0800ae50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ae54:	4b11      	ldr	r3, [pc, #68]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae56:	4a12      	ldr	r2, [pc, #72]	; (800aea0 <MX_USART1_UART_Init+0x50>)
 800ae58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ae5a:	4b10      	ldr	r3, [pc, #64]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ae60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ae62:	4b0e      	ldr	r3, [pc, #56]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ae68:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ae6e:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ae74:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae76:	220c      	movs	r2, #12
 800ae78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ae7a:	4b08      	ldr	r3, [pc, #32]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae80:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ae86:	4805      	ldr	r0, [pc, #20]	; (800ae9c <MX_USART1_UART_Init+0x4c>)
 800ae88:	f7fb fbb4 	bl	80065f4 <HAL_UART_Init>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ae92:	f000 f8a9 	bl	800afe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ae96:	bf00      	nop
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20000998 	.word	0x20000998
 800aea0:	40011000 	.word	0x40011000

0800aea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800aeaa:	2300      	movs	r3, #0
 800aeac:	607b      	str	r3, [r7, #4]
 800aeae:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <MX_DMA_Init+0x3c>)
 800aeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb2:	4a0b      	ldr	r2, [pc, #44]	; (800aee0 <MX_DMA_Init+0x3c>)
 800aeb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aeb8:	6313      	str	r3, [r2, #48]	; 0x30
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <MX_DMA_Init+0x3c>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aec2:	607b      	str	r3, [r7, #4]
 800aec4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800aec6:	2200      	movs	r2, #0
 800aec8:	2100      	movs	r1, #0
 800aeca:	200c      	movs	r0, #12
 800aecc:	f7f5 fd27 	bl	800091e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800aed0:	200c      	movs	r0, #12
 800aed2:	f7f5 fd40 	bl	8000956 <HAL_NVIC_EnableIRQ>

}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	40023800 	.word	0x40023800

0800aee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08a      	sub	sp, #40	; 0x28
 800aee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aeea:	f107 0314 	add.w	r3, r7, #20
 800aeee:	2200      	movs	r2, #0
 800aef0:	601a      	str	r2, [r3, #0]
 800aef2:	605a      	str	r2, [r3, #4]
 800aef4:	609a      	str	r2, [r3, #8]
 800aef6:	60da      	str	r2, [r3, #12]
 800aef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aefa:	2300      	movs	r3, #0
 800aefc:	613b      	str	r3, [r7, #16]
 800aefe:	4b37      	ldr	r3, [pc, #220]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	4a36      	ldr	r2, [pc, #216]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af04:	f043 0304 	orr.w	r3, r3, #4
 800af08:	6313      	str	r3, [r2, #48]	; 0x30
 800af0a:	4b34      	ldr	r3, [pc, #208]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0e:	f003 0304 	and.w	r3, r3, #4
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	4b30      	ldr	r3, [pc, #192]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1e:	4a2f      	ldr	r2, [pc, #188]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af24:	6313      	str	r3, [r2, #48]	; 0x30
 800af26:	4b2d      	ldr	r3, [pc, #180]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800af32:	2300      	movs	r3, #0
 800af34:	60bb      	str	r3, [r7, #8]
 800af36:	4b29      	ldr	r3, [pc, #164]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	4a28      	ldr	r2, [pc, #160]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af3c:	f043 0301 	orr.w	r3, r3, #1
 800af40:	6313      	str	r3, [r2, #48]	; 0x30
 800af42:	4b26      	ldr	r3, [pc, #152]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	60bb      	str	r3, [r7, #8]
 800af4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800af4e:	2300      	movs	r3, #0
 800af50:	607b      	str	r3, [r7, #4]
 800af52:	4b22      	ldr	r3, [pc, #136]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	4a21      	ldr	r2, [pc, #132]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af58:	f043 0302 	orr.w	r3, r3, #2
 800af5c:	6313      	str	r3, [r2, #48]	; 0x30
 800af5e:	4b1f      	ldr	r3, [pc, #124]	; (800afdc <MX_GPIO_Init+0xf8>)
 800af60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	607b      	str	r3, [r7, #4]
 800af68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800af6a:	2200      	movs	r2, #0
 800af6c:	f243 010f 	movw	r1, #12303	; 0x300f
 800af70:	481b      	ldr	r0, [pc, #108]	; (800afe0 <MX_GPIO_Init+0xfc>)
 800af72:	f7f6 f9a9 	bl	80012c8 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800af76:	2200      	movs	r2, #0
 800af78:	2107      	movs	r1, #7
 800af7a:	481a      	ldr	r0, [pc, #104]	; (800afe4 <MX_GPIO_Init+0x100>)
 800af7c:	f7f6 f9a4 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800af80:	f243 030f 	movw	r3, #12303	; 0x300f
 800af84:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af86:	2301      	movs	r3, #1
 800af88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af8e:	2300      	movs	r3, #0
 800af90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af92:	f107 0314 	add.w	r3, r7, #20
 800af96:	4619      	mov	r1, r3
 800af98:	4811      	ldr	r0, [pc, #68]	; (800afe0 <MX_GPIO_Init+0xfc>)
 800af9a:	f7f6 f811 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800af9e:	2307      	movs	r3, #7
 800afa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afa2:	2301      	movs	r3, #1
 800afa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afa6:	2300      	movs	r3, #0
 800afa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afaa:	2300      	movs	r3, #0
 800afac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afae:	f107 0314 	add.w	r3, r7, #20
 800afb2:	4619      	mov	r1, r3
 800afb4:	480b      	ldr	r0, [pc, #44]	; (800afe4 <MX_GPIO_Init+0x100>)
 800afb6:	f7f6 f803 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800afba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800afc0:	2300      	movs	r3, #0
 800afc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	4619      	mov	r1, r3
 800afce:	4805      	ldr	r0, [pc, #20]	; (800afe4 <MX_GPIO_Init+0x100>)
 800afd0:	f7f5 fff6 	bl	8000fc0 <HAL_GPIO_Init>

}
 800afd4:	bf00      	nop
 800afd6:	3728      	adds	r7, #40	; 0x28
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	40023800 	.word	0x40023800
 800afe0:	40020800 	.word	0x40020800
 800afe4:	40020000 	.word	0x40020000

0800afe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800afec:	b672      	cpsid	i
}
 800afee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aff0:	e7fe      	b.n	800aff0 <Error_Handler+0x8>
	...

0800aff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800affa:	2300      	movs	r3, #0
 800affc:	607b      	str	r3, [r7, #4]
 800affe:	4b10      	ldr	r3, [pc, #64]	; (800b040 <HAL_MspInit+0x4c>)
 800b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b002:	4a0f      	ldr	r2, [pc, #60]	; (800b040 <HAL_MspInit+0x4c>)
 800b004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b008:	6453      	str	r3, [r2, #68]	; 0x44
 800b00a:	4b0d      	ldr	r3, [pc, #52]	; (800b040 <HAL_MspInit+0x4c>)
 800b00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b012:	607b      	str	r3, [r7, #4]
 800b014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b016:	2300      	movs	r3, #0
 800b018:	603b      	str	r3, [r7, #0]
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <HAL_MspInit+0x4c>)
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	4a08      	ldr	r2, [pc, #32]	; (800b040 <HAL_MspInit+0x4c>)
 800b020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b024:	6413      	str	r3, [r2, #64]	; 0x40
 800b026:	4b06      	ldr	r3, [pc, #24]	; (800b040 <HAL_MspInit+0x4c>)
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b032:	bf00      	nop
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	40023800 	.word	0x40023800

0800b044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b08c      	sub	sp, #48	; 0x30
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b04c:	f107 031c 	add.w	r3, r7, #28
 800b050:	2200      	movs	r2, #0
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	605a      	str	r2, [r3, #4]
 800b056:	609a      	str	r2, [r3, #8]
 800b058:	60da      	str	r2, [r3, #12]
 800b05a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a59      	ldr	r2, [pc, #356]	; (800b1c8 <HAL_I2C_MspInit+0x184>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d162      	bne.n	800b12c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b066:	2300      	movs	r3, #0
 800b068:	61bb      	str	r3, [r7, #24]
 800b06a:	4b58      	ldr	r3, [pc, #352]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06e:	4a57      	ldr	r2, [pc, #348]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b070:	f043 0302 	orr.w	r3, r3, #2
 800b074:	6313      	str	r3, [r2, #48]	; 0x30
 800b076:	4b55      	ldr	r3, [pc, #340]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07a:	f003 0302 	and.w	r3, r3, #2
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b082:	23c0      	movs	r3, #192	; 0xc0
 800b084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b086:	2312      	movs	r3, #18
 800b088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b08a:	2301      	movs	r3, #1
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b08e:	2303      	movs	r3, #3
 800b090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b092:	2304      	movs	r3, #4
 800b094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b096:	f107 031c 	add.w	r3, r7, #28
 800b09a:	4619      	mov	r1, r3
 800b09c:	484c      	ldr	r0, [pc, #304]	; (800b1d0 <HAL_I2C_MspInit+0x18c>)
 800b09e:	f7f5 ff8f 	bl	8000fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	4b49      	ldr	r3, [pc, #292]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0aa:	4a48      	ldr	r2, [pc, #288]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b0ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0b0:	6413      	str	r3, [r2, #64]	; 0x40
 800b0b2:	4b46      	ldr	r3, [pc, #280]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800b0be:	4b45      	ldr	r3, [pc, #276]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0c0:	4a45      	ldr	r2, [pc, #276]	; (800b1d8 <HAL_I2C_MspInit+0x194>)
 800b0c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800b0c4:	4b43      	ldr	r3, [pc, #268]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b0ca:	4b42      	ldr	r3, [pc, #264]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0cc:	2240      	movs	r2, #64	; 0x40
 800b0ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b0d0:	4b40      	ldr	r3, [pc, #256]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b0d6:	4b3f      	ldr	r3, [pc, #252]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0de:	4b3d      	ldr	r3, [pc, #244]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0e4:	4b3b      	ldr	r3, [pc, #236]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b0ea:	4b3a      	ldr	r3, [pc, #232]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b0f0:	4b38      	ldr	r3, [pc, #224]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b0f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b0f8:	4b36      	ldr	r3, [pc, #216]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b0fe:	4835      	ldr	r0, [pc, #212]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b100:	f7f5 fc44 	bl	800098c <HAL_DMA_Init>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800b10a:	f7ff ff6d 	bl	800afe8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a30      	ldr	r2, [pc, #192]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b112:	635a      	str	r2, [r3, #52]	; 0x34
 800b114:	4a2f      	ldr	r2, [pc, #188]	; (800b1d4 <HAL_I2C_MspInit+0x190>)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800b11a:	2200      	movs	r2, #0
 800b11c:	2100      	movs	r1, #0
 800b11e:	201f      	movs	r0, #31
 800b120:	f7f5 fbfd 	bl	800091e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b124:	201f      	movs	r0, #31
 800b126:	f7f5 fc16 	bl	8000956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b12a:	e049      	b.n	800b1c0 <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a2a      	ldr	r2, [pc, #168]	; (800b1dc <HAL_I2C_MspInit+0x198>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d144      	bne.n	800b1c0 <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b136:	2300      	movs	r3, #0
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	4b24      	ldr	r3, [pc, #144]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	4a23      	ldr	r2, [pc, #140]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b140:	f043 0302 	orr.w	r3, r3, #2
 800b144:	6313      	str	r3, [r2, #48]	; 0x30
 800b146:	4b21      	ldr	r3, [pc, #132]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	613b      	str	r3, [r7, #16]
 800b150:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b158:	2312      	movs	r3, #18
 800b15a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b15c:	2301      	movs	r3, #1
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b160:	2303      	movs	r3, #3
 800b162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b164:	2304      	movs	r3, #4
 800b166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b168:	f107 031c 	add.w	r3, r7, #28
 800b16c:	4619      	mov	r1, r3
 800b16e:	4818      	ldr	r0, [pc, #96]	; (800b1d0 <HAL_I2C_MspInit+0x18c>)
 800b170:	f7f5 ff26 	bl	8000fc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b174:	2308      	movs	r3, #8
 800b176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b178:	2312      	movs	r3, #18
 800b17a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b17c:	2301      	movs	r3, #1
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b180:	2303      	movs	r3, #3
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800b184:	2309      	movs	r3, #9
 800b186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b188:	f107 031c 	add.w	r3, r7, #28
 800b18c:	4619      	mov	r1, r3
 800b18e:	4810      	ldr	r0, [pc, #64]	; (800b1d0 <HAL_I2C_MspInit+0x18c>)
 800b190:	f7f5 ff16 	bl	8000fc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b194:	2300      	movs	r3, #0
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	4b0c      	ldr	r3, [pc, #48]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	4a0b      	ldr	r2, [pc, #44]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b19e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b1a2:	6413      	str	r3, [r2, #64]	; 0x40
 800b1a4:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <HAL_I2C_MspInit+0x188>)
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	2021      	movs	r0, #33	; 0x21
 800b1b6:	f7f5 fbb2 	bl	800091e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800b1ba:	2021      	movs	r0, #33	; 0x21
 800b1bc:	f7f5 fbcb 	bl	8000956 <HAL_NVIC_EnableIRQ>
}
 800b1c0:	bf00      	nop
 800b1c2:	3730      	adds	r7, #48	; 0x30
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	40005400 	.word	0x40005400
 800b1cc:	40023800 	.word	0x40023800
 800b1d0:	40020400 	.word	0x40020400
 800b1d4:	20000890 	.word	0x20000890
 800b1d8:	40026028 	.word	0x40026028
 800b1dc:	40005800 	.word	0x40005800

0800b1e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b1e8:	f107 0308 	add.w	r3, r7, #8
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	605a      	str	r2, [r3, #4]
 800b1f2:	609a      	str	r2, [r3, #8]
 800b1f4:	60da      	str	r2, [r3, #12]
 800b1f6:	611a      	str	r2, [r3, #16]
 800b1f8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a0c      	ldr	r2, [pc, #48]	; (800b230 <HAL_RTC_MspInit+0x50>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d111      	bne.n	800b228 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b204:	2302      	movs	r3, #2
 800b206:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b20c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b20e:	f107 0308 	add.w	r3, r7, #8
 800b212:	4618      	mov	r0, r3
 800b214:	f7f9 fc3a 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800b21e:	f7ff fee3 	bl	800afe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b222:	4b04      	ldr	r3, [pc, #16]	; (800b234 <HAL_RTC_MspInit+0x54>)
 800b224:	2201      	movs	r2, #1
 800b226:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b228:	bf00      	nop
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	40002800 	.word	0x40002800
 800b234:	42470e3c 	.word	0x42470e3c

0800b238 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08c      	sub	sp, #48	; 0x30
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b240:	f107 031c 	add.w	r3, r7, #28
 800b244:	2200      	movs	r2, #0
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	605a      	str	r2, [r3, #4]
 800b24a:	609a      	str	r2, [r3, #8]
 800b24c:	60da      	str	r2, [r3, #12]
 800b24e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a38      	ldr	r2, [pc, #224]	; (800b338 <HAL_SD_MspInit+0x100>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d169      	bne.n	800b32e <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b25a:	2300      	movs	r3, #0
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	4b37      	ldr	r3, [pc, #220]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b262:	4a36      	ldr	r2, [pc, #216]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b264:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b268:	6453      	str	r3, [r2, #68]	; 0x44
 800b26a:	4b34      	ldr	r3, [pc, #208]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b26e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b276:	2300      	movs	r3, #0
 800b278:	617b      	str	r3, [r7, #20]
 800b27a:	4b30      	ldr	r3, [pc, #192]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27e:	4a2f      	ldr	r2, [pc, #188]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b280:	f043 0301 	orr.w	r3, r3, #1
 800b284:	6313      	str	r3, [r2, #48]	; 0x30
 800b286:	4b2d      	ldr	r3, [pc, #180]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b292:	2300      	movs	r3, #0
 800b294:	613b      	str	r3, [r7, #16]
 800b296:	4b29      	ldr	r3, [pc, #164]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29a:	4a28      	ldr	r2, [pc, #160]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b29c:	f043 0302 	orr.w	r3, r3, #2
 800b2a0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2a2:	4b26      	ldr	r3, [pc, #152]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a6:	f003 0302 	and.w	r3, r3, #2
 800b2aa:	613b      	str	r3, [r7, #16]
 800b2ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]
 800b2b2:	4b22      	ldr	r3, [pc, #136]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	4a21      	ldr	r2, [pc, #132]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b2b8:	f043 0304 	orr.w	r3, r3, #4
 800b2bc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2be:	4b1f      	ldr	r3, [pc, #124]	; (800b33c <HAL_SD_MspInit+0x104>)
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b2ca:	2340      	movs	r3, #64	; 0x40
 800b2cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b2da:	230c      	movs	r3, #12
 800b2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2de:	f107 031c 	add.w	r3, r7, #28
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4816      	ldr	r0, [pc, #88]	; (800b340 <HAL_SD_MspInit+0x108>)
 800b2e6:	f7f5 fe6b 	bl	8000fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b2fc:	230c      	movs	r3, #12
 800b2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b300:	f107 031c 	add.w	r3, r7, #28
 800b304:	4619      	mov	r1, r3
 800b306:	480f      	ldr	r0, [pc, #60]	; (800b344 <HAL_SD_MspInit+0x10c>)
 800b308:	f7f5 fe5a 	bl	8000fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800b30c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b312:	2302      	movs	r3, #2
 800b314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b316:	2300      	movs	r3, #0
 800b318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b31a:	2303      	movs	r3, #3
 800b31c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b31e:	230c      	movs	r3, #12
 800b320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b322:	f107 031c 	add.w	r3, r7, #28
 800b326:	4619      	mov	r1, r3
 800b328:	4807      	ldr	r0, [pc, #28]	; (800b348 <HAL_SD_MspInit+0x110>)
 800b32a:	f7f5 fe49 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b32e:	bf00      	nop
 800b330:	3730      	adds	r7, #48	; 0x30
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	40012c00 	.word	0x40012c00
 800b33c:	40023800 	.word	0x40023800
 800b340:	40020000 	.word	0x40020000
 800b344:	40020400 	.word	0x40020400
 800b348:	40020800 	.word	0x40020800

0800b34c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b35c:	d115      	bne.n	800b38a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b35e:	2300      	movs	r3, #0
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	4b0c      	ldr	r3, [pc, #48]	; (800b394 <HAL_TIM_Base_MspInit+0x48>)
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	4a0b      	ldr	r2, [pc, #44]	; (800b394 <HAL_TIM_Base_MspInit+0x48>)
 800b368:	f043 0301 	orr.w	r3, r3, #1
 800b36c:	6413      	str	r3, [r2, #64]	; 0x40
 800b36e:	4b09      	ldr	r3, [pc, #36]	; (800b394 <HAL_TIM_Base_MspInit+0x48>)
 800b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b37a:	2200      	movs	r2, #0
 800b37c:	2100      	movs	r1, #0
 800b37e:	201c      	movs	r0, #28
 800b380:	f7f5 facd 	bl	800091e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b384:	201c      	movs	r0, #28
 800b386:	f7f5 fae6 	bl	8000956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b38a:	bf00      	nop
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	40023800 	.word	0x40023800

0800b398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08a      	sub	sp, #40	; 0x28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3a0:	f107 0314 	add.w	r3, r7, #20
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	605a      	str	r2, [r3, #4]
 800b3aa:	609a      	str	r2, [r3, #8]
 800b3ac:	60da      	str	r2, [r3, #12]
 800b3ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a19      	ldr	r2, [pc, #100]	; (800b41c <HAL_UART_MspInit+0x84>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d12c      	bne.n	800b414 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	613b      	str	r3, [r7, #16]
 800b3be:	4b18      	ldr	r3, [pc, #96]	; (800b420 <HAL_UART_MspInit+0x88>)
 800b3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c2:	4a17      	ldr	r2, [pc, #92]	; (800b420 <HAL_UART_MspInit+0x88>)
 800b3c4:	f043 0310 	orr.w	r3, r3, #16
 800b3c8:	6453      	str	r3, [r2, #68]	; 0x44
 800b3ca:	4b15      	ldr	r3, [pc, #84]	; (800b420 <HAL_UART_MspInit+0x88>)
 800b3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ce:	f003 0310 	and.w	r3, r3, #16
 800b3d2:	613b      	str	r3, [r7, #16]
 800b3d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	4b11      	ldr	r3, [pc, #68]	; (800b420 <HAL_UART_MspInit+0x88>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	4a10      	ldr	r2, [pc, #64]	; (800b420 <HAL_UART_MspInit+0x88>)
 800b3e0:	f043 0301 	orr.w	r3, r3, #1
 800b3e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3e6:	4b0e      	ldr	r3, [pc, #56]	; (800b420 <HAL_UART_MspInit+0x88>)
 800b3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800b3f2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800b3f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b400:	2303      	movs	r3, #3
 800b402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b404:	2307      	movs	r3, #7
 800b406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b408:	f107 0314 	add.w	r3, r7, #20
 800b40c:	4619      	mov	r1, r3
 800b40e:	4805      	ldr	r0, [pc, #20]	; (800b424 <HAL_UART_MspInit+0x8c>)
 800b410:	f7f5 fdd6 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b414:	bf00      	nop
 800b416:	3728      	adds	r7, #40	; 0x28
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	40011000 	.word	0x40011000
 800b420:	40023800 	.word	0x40023800
 800b424:	40020000 	.word	0x40020000

0800b428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800b42c:	f7f9 fb12 	bl	8004a54 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b430:	e7fe      	b.n	800b430 <NMI_Handler+0x8>

0800b432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b432:	b480      	push	{r7}
 800b434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b436:	e7fe      	b.n	800b436 <HardFault_Handler+0x4>

0800b438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b438:	b480      	push	{r7}
 800b43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b43c:	e7fe      	b.n	800b43c <MemManage_Handler+0x4>

0800b43e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b43e:	b480      	push	{r7}
 800b440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b442:	e7fe      	b.n	800b442 <BusFault_Handler+0x4>

0800b444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b444:	b480      	push	{r7}
 800b446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b448:	e7fe      	b.n	800b448 <UsageFault_Handler+0x4>

0800b44a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b44a:	b480      	push	{r7}
 800b44c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b44e:	bf00      	nop
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b45c:	bf00      	nop
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b466:	b480      	push	{r7}
 800b468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b46a:	bf00      	nop
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800b478:	f7fe ff78 	bl	800a36c <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b47c:	f7f5 f930 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b480:	bf00      	nop
 800b482:	bd80      	pop	{r7, pc}

0800b484 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b488:	4802      	ldr	r0, [pc, #8]	; (800b494 <DMA1_Stream1_IRQHandler+0x10>)
 800b48a:	f7f5 fb4f 	bl	8000b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b48e:	bf00      	nop
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20000890 	.word	0x20000890

0800b498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b49c:	4803      	ldr	r0, [pc, #12]	; (800b4ac <TIM2_IRQHandler+0x14>)
 800b49e:	f7fa fb22 	bl	8005ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800b4a2:	f7ff faeb 	bl	800aa7c <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800b4a6:	bf00      	nop
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20000a80 	.word	0x20000a80

0800b4b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	TempCollect_I2CA_Done();
 800b4b4:	f7ff faf6 	bl	800aaa4 <TempCollect_I2CA_Done>

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b4b8:	4802      	ldr	r0, [pc, #8]	; (800b4c4 <I2C1_EV_IRQHandler+0x14>)
 800b4ba:	f7f6 f93b 	bl	8001734 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b4be:	bf00      	nop
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	200008f0 	.word	0x200008f0

0800b4c8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	TempCollect_I2CB_Done();
 800b4cc:	f7ff faf6 	bl	800aabc <TempCollect_I2CB_Done>

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b4d0:	4802      	ldr	r0, [pc, #8]	; (800b4dc <I2C2_EV_IRQHandler+0x14>)
 800b4d2:	f7f6 f92f 	bl	8001734 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b4d6:	bf00      	nop
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20000944 	.word	0x20000944

0800b4e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b4e4:	4802      	ldr	r0, [pc, #8]	; (800b4f0 <OTG_FS_IRQHandler+0x10>)
 800b4e6:	f7f7 fe30 	bl	800314a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b4ea:	bf00      	nop
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20001d98 	.word	0x20001d98

0800b4f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b4f8:	4b06      	ldr	r3, [pc, #24]	; (800b514 <SystemInit+0x20>)
 800b4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fe:	4a05      	ldr	r2, [pc, #20]	; (800b514 <SystemInit+0x20>)
 800b500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b508:	bf00      	nop
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	e000ed00 	.word	0xe000ed00

0800b518 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b51c:	2200      	movs	r2, #0
 800b51e:	4912      	ldr	r1, [pc, #72]	; (800b568 <MX_USB_DEVICE_Init+0x50>)
 800b520:	4812      	ldr	r0, [pc, #72]	; (800b56c <MX_USB_DEVICE_Init+0x54>)
 800b522:	f7fd fd85 	bl	8009030 <USBD_Init>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b52c:	f7ff fd5c 	bl	800afe8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b530:	490f      	ldr	r1, [pc, #60]	; (800b570 <MX_USB_DEVICE_Init+0x58>)
 800b532:	480e      	ldr	r0, [pc, #56]	; (800b56c <MX_USB_DEVICE_Init+0x54>)
 800b534:	f7fd fdac 	bl	8009090 <USBD_RegisterClass>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b53e:	f7ff fd53 	bl	800afe8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b542:	490c      	ldr	r1, [pc, #48]	; (800b574 <MX_USB_DEVICE_Init+0x5c>)
 800b544:	4809      	ldr	r0, [pc, #36]	; (800b56c <MX_USB_DEVICE_Init+0x54>)
 800b546:	f7fd fcfd 	bl	8008f44 <USBD_CDC_RegisterInterface>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d001      	beq.n	800b554 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b550:	f7ff fd4a 	bl	800afe8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b554:	4805      	ldr	r0, [pc, #20]	; (800b56c <MX_USB_DEVICE_Init+0x54>)
 800b556:	f7fd fdc2 	bl	80090de <USBD_Start>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b560:	f7ff fd42 	bl	800afe8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b564:	bf00      	nop
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20000130 	.word	0x20000130
 800b56c:	20000ac8 	.word	0x20000ac8
 800b570:	20000014 	.word	0x20000014
 800b574:	2000011c 	.word	0x2000011c

0800b578 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b57c:	2200      	movs	r2, #0
 800b57e:	4905      	ldr	r1, [pc, #20]	; (800b594 <CDC_Init_FS+0x1c>)
 800b580:	4805      	ldr	r0, [pc, #20]	; (800b598 <CDC_Init_FS+0x20>)
 800b582:	f7fd fcf4 	bl	8008f6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b586:	4905      	ldr	r1, [pc, #20]	; (800b59c <CDC_Init_FS+0x24>)
 800b588:	4803      	ldr	r0, [pc, #12]	; (800b598 <CDC_Init_FS+0x20>)
 800b58a:	f7fd fd0e 	bl	8008faa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b58e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b590:	4618      	mov	r0, r3
 800b592:	bd80      	pop	{r7, pc}
 800b594:	20001598 	.word	0x20001598
 800b598:	20000ac8 	.word	0x20000ac8
 800b59c:	20000d98 	.word	0x20000d98

0800b5a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	6039      	str	r1, [r7, #0]
 800b5ba:	71fb      	strb	r3, [r7, #7]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5c0:	79fb      	ldrb	r3, [r7, #7]
 800b5c2:	2b23      	cmp	r3, #35	; 0x23
 800b5c4:	d84a      	bhi.n	800b65c <CDC_Control_FS+0xac>
 800b5c6:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <CDC_Control_FS+0x1c>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b65d 	.word	0x0800b65d
 800b5d0:	0800b65d 	.word	0x0800b65d
 800b5d4:	0800b65d 	.word	0x0800b65d
 800b5d8:	0800b65d 	.word	0x0800b65d
 800b5dc:	0800b65d 	.word	0x0800b65d
 800b5e0:	0800b65d 	.word	0x0800b65d
 800b5e4:	0800b65d 	.word	0x0800b65d
 800b5e8:	0800b65d 	.word	0x0800b65d
 800b5ec:	0800b65d 	.word	0x0800b65d
 800b5f0:	0800b65d 	.word	0x0800b65d
 800b5f4:	0800b65d 	.word	0x0800b65d
 800b5f8:	0800b65d 	.word	0x0800b65d
 800b5fc:	0800b65d 	.word	0x0800b65d
 800b600:	0800b65d 	.word	0x0800b65d
 800b604:	0800b65d 	.word	0x0800b65d
 800b608:	0800b65d 	.word	0x0800b65d
 800b60c:	0800b65d 	.word	0x0800b65d
 800b610:	0800b65d 	.word	0x0800b65d
 800b614:	0800b65d 	.word	0x0800b65d
 800b618:	0800b65d 	.word	0x0800b65d
 800b61c:	0800b65d 	.word	0x0800b65d
 800b620:	0800b65d 	.word	0x0800b65d
 800b624:	0800b65d 	.word	0x0800b65d
 800b628:	0800b65d 	.word	0x0800b65d
 800b62c:	0800b65d 	.word	0x0800b65d
 800b630:	0800b65d 	.word	0x0800b65d
 800b634:	0800b65d 	.word	0x0800b65d
 800b638:	0800b65d 	.word	0x0800b65d
 800b63c:	0800b65d 	.word	0x0800b65d
 800b640:	0800b65d 	.word	0x0800b65d
 800b644:	0800b65d 	.word	0x0800b65d
 800b648:	0800b65d 	.word	0x0800b65d
 800b64c:	0800b65d 	.word	0x0800b65d
 800b650:	0800b65d 	.word	0x0800b65d
 800b654:	0800b65d 	.word	0x0800b65d
 800b658:	0800b65d 	.word	0x0800b65d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b65c:	bf00      	nop
  }

  return (USBD_OK);
 800b65e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b660:	4618      	mov	r0, r3
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	4805      	ldr	r0, [pc, #20]	; (800b690 <CDC_Receive_FS+0x24>)
 800b67a:	f7fd fc96 	bl	8008faa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b67e:	4804      	ldr	r0, [pc, #16]	; (800b690 <CDC_Receive_FS+0x24>)
 800b680:	f7fd fcac 	bl	8008fdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b684:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b686:	4618      	mov	r0, r3
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20000ac8 	.word	0x20000ac8

0800b694 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	371c      	adds	r7, #28
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
	...

0800b6b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08a      	sub	sp, #40	; 0x28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	605a      	str	r2, [r3, #4]
 800b6ca:	609a      	str	r2, [r3, #8]
 800b6cc:	60da      	str	r2, [r3, #12]
 800b6ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6d8:	d147      	bne.n	800b76a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6da:	2300      	movs	r3, #0
 800b6dc:	613b      	str	r3, [r7, #16]
 800b6de:	4b25      	ldr	r3, [pc, #148]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	4a24      	ldr	r2, [pc, #144]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b6e4:	f043 0301 	orr.w	r3, r3, #1
 800b6e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ea:	4b22      	ldr	r3, [pc, #136]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	613b      	str	r3, [r7, #16]
 800b6f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b6f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b700:	2300      	movs	r3, #0
 800b702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b704:	f107 0314 	add.w	r3, r7, #20
 800b708:	4619      	mov	r1, r3
 800b70a:	481b      	ldr	r0, [pc, #108]	; (800b778 <HAL_PCD_MspInit+0xc0>)
 800b70c:	f7f5 fc58 	bl	8000fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b710:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b716:	2302      	movs	r3, #2
 800b718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b71e:	2303      	movs	r3, #3
 800b720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b722:	230a      	movs	r3, #10
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b726:	f107 0314 	add.w	r3, r7, #20
 800b72a:	4619      	mov	r1, r3
 800b72c:	4812      	ldr	r0, [pc, #72]	; (800b778 <HAL_PCD_MspInit+0xc0>)
 800b72e:	f7f5 fc47 	bl	8000fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b732:	4b10      	ldr	r3, [pc, #64]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b736:	4a0f      	ldr	r2, [pc, #60]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b73c:	6353      	str	r3, [r2, #52]	; 0x34
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	4b0c      	ldr	r3, [pc, #48]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b746:	4a0b      	ldr	r2, [pc, #44]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b74c:	6453      	str	r3, [r2, #68]	; 0x44
 800b74e:	4b09      	ldr	r3, [pc, #36]	; (800b774 <HAL_PCD_MspInit+0xbc>)
 800b750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	2043      	movs	r0, #67	; 0x43
 800b760:	f7f5 f8dd 	bl	800091e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b764:	2043      	movs	r0, #67	; 0x43
 800b766:	f7f5 f8f6 	bl	8000956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b76a:	bf00      	nop
 800b76c:	3728      	adds	r7, #40	; 0x28
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	40023800 	.word	0x40023800
 800b778:	40020000 	.word	0x40020000

0800b77c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	f7fd fcee 	bl	8009174 <USBD_LL_SetupStage>
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b7b2:	78fa      	ldrb	r2, [r7, #3]
 800b7b4:	6879      	ldr	r1, [r7, #4]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	00db      	lsls	r3, r3, #3
 800b7ba:	1a9b      	subs	r3, r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	440b      	add	r3, r1
 800b7c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	78fb      	ldrb	r3, [r7, #3]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	f7fd fd28 	bl	800921e <USBD_LL_DataOutStage>
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b7e8:	78fa      	ldrb	r2, [r7, #3]
 800b7ea:	6879      	ldr	r1, [r7, #4]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	1a9b      	subs	r3, r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	440b      	add	r3, r1
 800b7f6:	3348      	adds	r3, #72	; 0x48
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	78fb      	ldrb	r3, [r7, #3]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f7fd fd71 	bl	80092e4 <USBD_LL_DataInStage>
}
 800b802:	bf00      	nop
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b082      	sub	sp, #8
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fd fe85 	bl	8009528 <USBD_LL_SOF>
}
 800b81e:	bf00      	nop
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b82e:	2301      	movs	r3, #1
 800b830:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	2b02      	cmp	r3, #2
 800b838:	d001      	beq.n	800b83e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b83a:	f7ff fbd5 	bl	800afe8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b844:	7bfa      	ldrb	r2, [r7, #15]
 800b846:	4611      	mov	r1, r2
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fd fe2f 	bl	80094ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b854:	4618      	mov	r0, r3
 800b856:	f7fd fddb 	bl	8009410 <USBD_LL_Reset>
}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
	...

0800b864 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b872:	4618      	mov	r0, r3
 800b874:	f7fd fe2a 	bl	80094cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	6812      	ldr	r2, [r2, #0]
 800b886:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b88a:	f043 0301 	orr.w	r3, r3, #1
 800b88e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a1b      	ldr	r3, [r3, #32]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <HAL_PCD_SuspendCallback+0x48>)
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	4a03      	ldr	r2, [pc, #12]	; (800b8ac <HAL_PCD_SuspendCallback+0x48>)
 800b89e:	f043 0306 	orr.w	r3, r3, #6
 800b8a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	e000ed00 	.word	0xe000ed00

0800b8b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fd fe1a 	bl	80094f8 <USBD_LL_Resume>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8de:	78fa      	ldrb	r2, [r7, #3]
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fd fe68 	bl	80095b8 <USBD_LL_IsoOUTIncomplete>
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b902:	78fa      	ldrb	r2, [r7, #3]
 800b904:	4611      	mov	r1, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f7fd fe30 	bl	800956c <USBD_LL_IsoINIncomplete>
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b922:	4618      	mov	r0, r3
 800b924:	f7fd fe6e 	bl	8009604 <USBD_LL_DevConnected>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fd fe6b 	bl	800961a <USBD_LL_DevDisconnected>
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d13c      	bne.n	800b9d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b95c:	4a20      	ldr	r2, [pc, #128]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a1e      	ldr	r2, [pc, #120]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b968:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b96c:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b96e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b972:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b974:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b976:	2204      	movs	r2, #4
 800b978:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b97a:	4b19      	ldr	r3, [pc, #100]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b97c:	2202      	movs	r2, #2
 800b97e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b980:	4b17      	ldr	r3, [pc, #92]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b982:	2200      	movs	r2, #0
 800b984:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b986:	4b16      	ldr	r3, [pc, #88]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b988:	2202      	movs	r2, #2
 800b98a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b98c:	4b14      	ldr	r3, [pc, #80]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b98e:	2200      	movs	r2, #0
 800b990:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b992:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b994:	2200      	movs	r2, #0
 800b996:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b998:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b99e:	4b10      	ldr	r3, [pc, #64]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b9a4:	4b0e      	ldr	r3, [pc, #56]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b9aa:	480d      	ldr	r0, [pc, #52]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b9ac:	f7f7 fa7d 	bl	8002eaa <HAL_PCD_Init>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b9b6:	f7ff fb17 	bl	800afe8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b9ba:	2180      	movs	r1, #128	; 0x80
 800b9bc:	4808      	ldr	r0, [pc, #32]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b9be:	f7f8 fbda 	bl	8004176 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b9c2:	2240      	movs	r2, #64	; 0x40
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4806      	ldr	r0, [pc, #24]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b9c8:	f7f8 fb8e 	bl	80040e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b9cc:	2280      	movs	r2, #128	; 0x80
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	4803      	ldr	r0, [pc, #12]	; (800b9e0 <USBD_LL_Init+0x94>)
 800b9d2:	f7f8 fb89 	bl	80040e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20001d98 	.word	0x20001d98

0800b9e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7f7 fb72 	bl	80030e4 <HAL_PCD_Start>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 f942 	bl	800bc90 <USBD_Get_USB_Status>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	461a      	mov	r2, r3
 800ba28:	4603      	mov	r3, r0
 800ba2a:	70fb      	strb	r3, [r7, #3]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70bb      	strb	r3, [r7, #2]
 800ba30:	4613      	mov	r3, r2
 800ba32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba42:	78bb      	ldrb	r3, [r7, #2]
 800ba44:	883a      	ldrh	r2, [r7, #0]
 800ba46:	78f9      	ldrb	r1, [r7, #3]
 800ba48:	f7f7 ff56 	bl	80038f8 <HAL_PCD_EP_Open>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 f91c 	bl	800bc90 <USBD_Get_USB_Status>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba80:	78fa      	ldrb	r2, [r7, #3]
 800ba82:	4611      	mov	r1, r2
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f7 ff9f 	bl	80039c8 <HAL_PCD_EP_Close>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 f8fd 	bl	800bc90 <USBD_Get_USB_Status>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800babe:	78fa      	ldrb	r2, [r7, #3]
 800bac0:	4611      	mov	r1, r2
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7f8 f877 	bl	8003bb6 <HAL_PCD_EP_SetStall>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 f8de 	bl	800bc90 <USBD_Get_USB_Status>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	4611      	mov	r1, r2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7f8 f8bc 	bl	8003c7e <HAL_PCD_EP_ClrStall>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 f8bf 	bl	800bc90 <USBD_Get_USB_Status>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	da0b      	bge.n	800bb54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb3c:	78fb      	ldrb	r3, [r7, #3]
 800bb3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb42:	68f9      	ldr	r1, [r7, #12]
 800bb44:	4613      	mov	r3, r2
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	1a9b      	subs	r3, r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	440b      	add	r3, r1
 800bb4e:	333e      	adds	r3, #62	; 0x3e
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	e00b      	b.n	800bb6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb54:	78fb      	ldrb	r3, [r7, #3]
 800bb56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb5a:	68f9      	ldr	r1, [r7, #12]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	1a9b      	subs	r3, r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	440b      	add	r3, r1
 800bb66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb92:	78fa      	ldrb	r2, [r7, #3]
 800bb94:	4611      	mov	r1, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7f7 fe89 	bl	80038ae <HAL_PCD_SetAddress>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 f874 	bl	800bc90 <USBD_Get_USB_Status>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b086      	sub	sp, #24
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbd4:	7af9      	ldrb	r1, [r7, #11]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	f7f7 ffa2 	bl	8003b22 <HAL_PCD_EP_Transmit>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 f853 	bl	800bc90 <USBD_Get_USB_Status>
 800bbea:	4603      	mov	r3, r0
 800bbec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbee:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	607a      	str	r2, [r7, #4]
 800bc02:	603b      	str	r3, [r7, #0]
 800bc04:	460b      	mov	r3, r1
 800bc06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc16:	7af9      	ldrb	r1, [r7, #11]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	f7f7 ff1e 	bl	8003a5c <HAL_PCD_EP_Receive>
 800bc20:	4603      	mov	r3, r0
 800bc22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 f832 	bl	800bc90 <USBD_Get_USB_Status>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc30:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc4c:	78fa      	ldrb	r2, [r7, #3]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7f7 ff4e 	bl	8003af2 <HAL_PCD_EP_GetRxCount>
 800bc56:	4603      	mov	r3, r0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc68:	4b03      	ldr	r3, [pc, #12]	; (800bc78 <USBD_static_malloc+0x18>)
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	200005f4 	.word	0x200005f4

0800bc7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]

}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d817      	bhi.n	800bcd4 <USBD_Get_USB_Status+0x44>
 800bca4:	a201      	add	r2, pc, #4	; (adr r2, 800bcac <USBD_Get_USB_Status+0x1c>)
 800bca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcaa:	bf00      	nop
 800bcac:	0800bcbd 	.word	0x0800bcbd
 800bcb0:	0800bcc3 	.word	0x0800bcc3
 800bcb4:	0800bcc9 	.word	0x0800bcc9
 800bcb8:	0800bccf 	.word	0x0800bccf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc0:	e00b      	b.n	800bcda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc6:	e008      	b.n	800bcda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	73fb      	strb	r3, [r7, #15]
    break;
 800bccc:	e005      	b.n	800bcda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd2:	e002      	b.n	800bcda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd8:	bf00      	nop
  }
  return usb_status;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2212      	movs	r2, #18
 800bcf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcfa:	4b03      	ldr	r3, [pc, #12]	; (800bd08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	2000014c 	.word	0x2000014c

0800bd0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	6039      	str	r1, [r7, #0]
 800bd16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2204      	movs	r2, #4
 800bd1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd1e:	4b03      	ldr	r3, [pc, #12]	; (800bd2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	20000160 	.word	0x20000160

0800bd30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d105      	bne.n	800bd4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4907      	ldr	r1, [pc, #28]	; (800bd64 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd46:	4808      	ldr	r0, [pc, #32]	; (800bd68 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd48:	f7fe f9fb 	bl	800a142 <USBD_GetString>
 800bd4c:	e004      	b.n	800bd58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	4904      	ldr	r1, [pc, #16]	; (800bd64 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd52:	4805      	ldr	r0, [pc, #20]	; (800bd68 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd54:	f7fe f9f5 	bl	800a142 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd58:	4b02      	ldr	r3, [pc, #8]	; (800bd64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200021a0 	.word	0x200021a0
 800bd68:	0800bfcc 	.word	0x0800bfcc

0800bd6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	4904      	ldr	r1, [pc, #16]	; (800bd8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd7c:	4804      	ldr	r0, [pc, #16]	; (800bd90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd7e:	f7fe f9e0 	bl	800a142 <USBD_GetString>
  return USBD_StrDesc;
 800bd82:	4b02      	ldr	r3, [pc, #8]	; (800bd8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	200021a0 	.word	0x200021a0
 800bd90:	0800bfe4 	.word	0x0800bfe4

0800bd94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	6039      	str	r1, [r7, #0]
 800bd9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	221a      	movs	r2, #26
 800bda4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bda6:	f000 f843 	bl	800be30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdaa:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20000164 	.word	0x20000164

0800bdb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	6039      	str	r1, [r7, #0]
 800bdc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d105      	bne.n	800bdd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	4907      	ldr	r1, [pc, #28]	; (800bdec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdce:	4808      	ldr	r0, [pc, #32]	; (800bdf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bdd0:	f7fe f9b7 	bl	800a142 <USBD_GetString>
 800bdd4:	e004      	b.n	800bde0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	4904      	ldr	r1, [pc, #16]	; (800bdec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bdda:	4805      	ldr	r0, [pc, #20]	; (800bdf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bddc:	f7fe f9b1 	bl	800a142 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bde0:	4b02      	ldr	r3, [pc, #8]	; (800bdec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200021a0 	.word	0x200021a0
 800bdf0:	0800bff8 	.word	0x0800bff8

0800bdf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	6039      	str	r1, [r7, #0]
 800bdfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d105      	bne.n	800be12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	4907      	ldr	r1, [pc, #28]	; (800be28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be0a:	4808      	ldr	r0, [pc, #32]	; (800be2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be0c:	f7fe f999 	bl	800a142 <USBD_GetString>
 800be10:	e004      	b.n	800be1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4904      	ldr	r1, [pc, #16]	; (800be28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be16:	4805      	ldr	r0, [pc, #20]	; (800be2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be18:	f7fe f993 	bl	800a142 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be1c:	4b02      	ldr	r3, [pc, #8]	; (800be28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	200021a0 	.word	0x200021a0
 800be2c:	0800c004 	.word	0x0800c004

0800be30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be36:	4b0f      	ldr	r3, [pc, #60]	; (800be74 <Get_SerialNum+0x44>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be3c:	4b0e      	ldr	r3, [pc, #56]	; (800be78 <Get_SerialNum+0x48>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be42:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <Get_SerialNum+0x4c>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4413      	add	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d009      	beq.n	800be6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be56:	2208      	movs	r2, #8
 800be58:	4909      	ldr	r1, [pc, #36]	; (800be80 <Get_SerialNum+0x50>)
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f000 f814 	bl	800be88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be60:	2204      	movs	r2, #4
 800be62:	4908      	ldr	r1, [pc, #32]	; (800be84 <Get_SerialNum+0x54>)
 800be64:	68b8      	ldr	r0, [r7, #8]
 800be66:	f000 f80f 	bl	800be88 <IntToUnicode>
  }
}
 800be6a:	bf00      	nop
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	1fff7a10 	.word	0x1fff7a10
 800be78:	1fff7a14 	.word	0x1fff7a14
 800be7c:	1fff7a18 	.word	0x1fff7a18
 800be80:	20000166 	.word	0x20000166
 800be84:	20000176 	.word	0x20000176

0800be88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	4613      	mov	r3, r2
 800be94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be9a:	2300      	movs	r3, #0
 800be9c:	75fb      	strb	r3, [r7, #23]
 800be9e:	e027      	b.n	800bef0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	0f1b      	lsrs	r3, r3, #28
 800bea4:	2b09      	cmp	r3, #9
 800bea6:	d80b      	bhi.n	800bec0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	0f1b      	lsrs	r3, r3, #28
 800beac:	b2da      	uxtb	r2, r3
 800beae:	7dfb      	ldrb	r3, [r7, #23]
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	4619      	mov	r1, r3
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	440b      	add	r3, r1
 800beb8:	3230      	adds	r2, #48	; 0x30
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	e00a      	b.n	800bed6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	0f1b      	lsrs	r3, r3, #28
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4619      	mov	r1, r3
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	440b      	add	r3, r1
 800bed0:	3237      	adds	r2, #55	; 0x37
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	011b      	lsls	r3, r3, #4
 800beda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bedc:	7dfb      	ldrb	r3, [r7, #23]
 800bede:	005b      	lsls	r3, r3, #1
 800bee0:	3301      	adds	r3, #1
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	4413      	add	r3, r2
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	3301      	adds	r3, #1
 800beee:	75fb      	strb	r3, [r7, #23]
 800bef0:	7dfa      	ldrb	r2, [r7, #23]
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d3d3      	bcc.n	800bea0 <IntToUnicode+0x18>
  }
}
 800bef8:	bf00      	nop
 800befa:	bf00      	nop
 800befc:	371c      	adds	r7, #28
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
	...

0800bf08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800bf08:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bf40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800bf0c:	480d      	ldr	r0, [pc, #52]	; (800bf44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800bf0e:	490e      	ldr	r1, [pc, #56]	; (800bf48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800bf10:	4a0e      	ldr	r2, [pc, #56]	; (800bf4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800bf12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bf14:	e002      	b.n	800bf1c <LoopCopyDataInit>

0800bf16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bf16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bf18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bf1a:	3304      	adds	r3, #4

0800bf1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bf1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bf1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bf20:	d3f9      	bcc.n	800bf16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bf22:	4a0b      	ldr	r2, [pc, #44]	; (800bf50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800bf24:	4c0b      	ldr	r4, [pc, #44]	; (800bf54 <LoopFillZerobss+0x26>)
  movs r3, #0
 800bf26:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bf28:	e001      	b.n	800bf2e <LoopFillZerobss>

0800bf2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bf2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bf2c:	3204      	adds	r2, #4

0800bf2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bf2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bf30:	d3fb      	bcc.n	800bf2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bf32:	f7ff fadf 	bl	800b4f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bf36:	f000 f811 	bl	800bf5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bf3a:	f7fe fdcb 	bl	800aad4 <main>
  bx  lr    
 800bf3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800bf40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800bf44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bf48:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800bf4c:	0800c044 	.word	0x0800c044
  ldr r2, =_sbss
 800bf50:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800bf54:	200023a0 	.word	0x200023a0

0800bf58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bf58:	e7fe      	b.n	800bf58 <ADC_IRQHandler>
	...

0800bf5c <__libc_init_array>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4d0d      	ldr	r5, [pc, #52]	; (800bf94 <__libc_init_array+0x38>)
 800bf60:	4c0d      	ldr	r4, [pc, #52]	; (800bf98 <__libc_init_array+0x3c>)
 800bf62:	1b64      	subs	r4, r4, r5
 800bf64:	10a4      	asrs	r4, r4, #2
 800bf66:	2600      	movs	r6, #0
 800bf68:	42a6      	cmp	r6, r4
 800bf6a:	d109      	bne.n	800bf80 <__libc_init_array+0x24>
 800bf6c:	4d0b      	ldr	r5, [pc, #44]	; (800bf9c <__libc_init_array+0x40>)
 800bf6e:	4c0c      	ldr	r4, [pc, #48]	; (800bfa0 <__libc_init_array+0x44>)
 800bf70:	f000 f820 	bl	800bfb4 <_init>
 800bf74:	1b64      	subs	r4, r4, r5
 800bf76:	10a4      	asrs	r4, r4, #2
 800bf78:	2600      	movs	r6, #0
 800bf7a:	42a6      	cmp	r6, r4
 800bf7c:	d105      	bne.n	800bf8a <__libc_init_array+0x2e>
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf84:	4798      	blx	r3
 800bf86:	3601      	adds	r6, #1
 800bf88:	e7ee      	b.n	800bf68 <__libc_init_array+0xc>
 800bf8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf8e:	4798      	blx	r3
 800bf90:	3601      	adds	r6, #1
 800bf92:	e7f2      	b.n	800bf7a <__libc_init_array+0x1e>
 800bf94:	0800c03c 	.word	0x0800c03c
 800bf98:	0800c03c 	.word	0x0800c03c
 800bf9c:	0800c03c 	.word	0x0800c03c
 800bfa0:	0800c040 	.word	0x0800c040

0800bfa4 <memset>:
 800bfa4:	4402      	add	r2, r0
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d100      	bne.n	800bfae <memset+0xa>
 800bfac:	4770      	bx	lr
 800bfae:	f803 1b01 	strb.w	r1, [r3], #1
 800bfb2:	e7f9      	b.n	800bfa8 <memset+0x4>

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
