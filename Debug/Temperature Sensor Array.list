
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001147c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08011620  08011620  00021620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a94  08011a94  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08011a94  08011a94  00021a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a9c  08011a9c  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a9c  08011a9c  00021a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011aa0  08011aa0  00021aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08011aa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002338  20000350  08011df4  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20002688  08011df4  00032688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030c96  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eff  00000000  00000000  00061016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  00066f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  00068e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fd4  00000000  00000000  0006aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b253  00000000  00000000  0008ba9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad13e  00000000  00000000  000b6cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163e2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009320  00000000  00000000  00163e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0016d1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0016d26c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011604 	.word	0x08011604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	08011604 	.word	0x08011604

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2101      	movs	r1, #1
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <OperateLED_A+0x34>)
 8000f66:	f001 fb89 	bl	800267c <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 8000f6a:	e007      	b.n	8000f7c <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d104      	bne.n	8000f7c <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2101      	movs	r1, #1
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <OperateLED_A+0x34>)
 8000f78:	f001 fb80 	bl	800267c <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020800 	.word	0x40020800

08000f88 <OperateLED_C>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
void OperateLED_C (LEDState_t eState)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <OperateLED_C+0x1c>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <OperateLED_C+0x34>)
 8000f9e:	f001 fb6d 	bl	800267c <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	}
}
 8000fa2:	e007      	b.n	8000fb4 <OperateLED_C+0x2c>
	else if(eState == eLED_Off)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d104      	bne.n	8000fb4 <OperateLED_C+0x2c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2104      	movs	r1, #4
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <OperateLED_C+0x34>)
 8000fb0:	f001 fb64 	bl	800267c <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <ToggleLED_B+0x10>)
 8000fc8:	f001 fb71 	bl	80026ae <HAL_GPIO_TogglePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020800 	.word	0x40020800

08000fd4 <ToggleLED_D>:

void ToggleLED_D()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <ToggleLED_D+0x10>)
 8000fdc:	f001 fb67 	bl	80026ae <HAL_GPIO_TogglePin>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d106      	bne.n	8001006 <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <OperateSensorPower_A+0x38>)
 8001000:	f001 fb3c 	bl	800267c <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 8001004:	e008      	b.n	8001018 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <OperateSensorPower_A+0x38>)
 8001014:	f001 fb32 	bl	800267c <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020800 	.word	0x40020800

08001024 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	4808      	ldr	r0, [pc, #32]	; (800105c <OperateSensorPower_B+0x38>)
 800103c:	f001 fb1e 	bl	800267c <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8001040:	e008      	b.n	8001054 <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <OperateSensorPower_B+0x38>)
 8001050:	f001 fb14 	bl	800267c <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020800 	.word	0x40020800

08001060 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff ffbf 	bl	8000fe8 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ffda 	bl	8001024 <OperateSensorPower_B>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_Init+0x40>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_Init+0x40>)
 800108a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x40>)
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 fdf5 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f00c fb1e 	bl	800d6e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023c00 	.word	0x40023c00

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fe0d 	bl	8001cf6 <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 fdd5 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000118 	.word	0x20000118
 8001110:	20000004 	.word	0x20000004
 8001114:	20000000 	.word	0x20000000

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000004 	.word	0x20000004
 800113c:	20000a2c 	.word	0x20000a2c

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000a2c 	.word	0x20000a2c

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e033      	b.n	800121e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f00c faba 	bl	800d738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e6:	f023 0302 	bic.w	r3, r3, #2
 80011ea:	f043 0202 	orr.w	r2, r3, #2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fb74 	bl	80018e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
 800120e:	e001      	b.n	8001214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Start_IT+0x1a>
 800123e:	2302      	movs	r3, #2
 8001240:	e0a1      	b.n	8001386 <HAL_ADC_Start_IT+0x15e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d018      	beq.n	800128a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001268:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <HAL_ADC_Start_IT+0x16c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_ADC_Start_IT+0x170>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9a      	lsrs	r2, r3, #18
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d169      	bne.n	800136c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d6:	d106      	bne.n	80012e6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	f023 0206 	bic.w	r2, r3, #6
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44
 80012e4:	e002      	b.n	80012ec <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_ADC_Start_IT+0x174>)
 80012f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001300:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10f      	bne.n	8001342 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d129      	bne.n	8001384 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e020      	b.n	8001384 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_ADC_Start_IT+0x178>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d11b      	bne.n	8001384 <HAL_ADC_Start_IT+0x15c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d114      	bne.n	8001384 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	e00b      	b.n	8001384 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f043 0210 	orr.w	r2, r3, #16
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000118 	.word	0x20000118
 8001398:	431bde83 	.word	0x431bde83
 800139c:	40012300 	.word	0x40012300
 80013a0:	40012000 	.word	0x40012000

080013a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b02      	cmp	r3, #2
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d049      	beq.n	800147a <HAL_ADC_IRQHandler+0xd6>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d046      	beq.n	800147a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d12b      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001416:	2b00      	cmp	r3, #0
 8001418:	d127      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001432:	2b00      	cmp	r3, #0
 8001434:	d119      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0220 	bic.w	r2, r2, #32
 8001444:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f8e8 	bl	8001640 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f06f 0212 	mvn.w	r2, #18
 8001478:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b04      	cmp	r3, #4
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	2b80      	cmp	r3, #128	; 0x80
 800149c:	bf0c      	ite	eq
 800149e:	2301      	moveq	r3, #1
 80014a0:	2300      	movne	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d057      	beq.n	800155c <HAL_ADC_IRQHandler+0x1b8>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d054      	beq.n	800155c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d139      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d12b      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d124      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11d      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d119      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001526:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fac3 	bl	8001ad8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 020c 	mvn.w	r2, #12
 800155a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	bf0c      	ite	eq
 800156a:	2301      	moveq	r3, #1
 800156c:	2300      	movne	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d017      	beq.n	80015be <HAL_ADC_IRQHandler+0x21a>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d014      	beq.n	80015be <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10d      	bne.n	80015be <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f850 	bl	8001654 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f06f 0201 	mvn.w	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <HAL_ADC_IRQHandler+0x27a>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d012      	beq.n	800161e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f06f 0220 	mvn.w	r2, #32
 800160c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f82a 	bl	8001668 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0220 	mvn.w	r2, #32
 800161c:	601a      	str	r2, [r3, #0]
  }
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1c>
 8001694:	2302      	movs	r3, #2
 8001696:	e113      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x244>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d925      	bls.n	80016f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68d9      	ldr	r1, [r3, #12]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b1e      	subs	r3, #30
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43da      	mvns	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	400a      	ands	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68d9      	ldr	r1, [r3, #12]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4403      	add	r3, r0
 80016e6:	3b1e      	subs	r3, #30
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	e022      	b.n	800173a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	2207      	movs	r2, #7
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6919      	ldr	r1, [r3, #16]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	4603      	mov	r3, r0
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4403      	add	r3, r0
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d824      	bhi.n	800178c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b05      	subs	r3, #5
 8001754:	221f      	movs	r2, #31
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b05      	subs	r3, #5
 800177e:	fa00 f203 	lsl.w	r2, r0, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
 800178a:	e04c      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d824      	bhi.n	80017de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	; 0x23
 80017a6:	221f      	movs	r2, #31
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43da      	mvns	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b23      	subs	r3, #35	; 0x23
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
 80017dc:	e023      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b41      	subs	r3, #65	; 0x41
 80017f0:	221f      	movs	r2, #31
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	400a      	ands	r2, r1
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b41      	subs	r3, #65	; 0x41
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_ADC_ConfigChannel+0x250>)
 8001828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_ADC_ConfigChannel+0x254>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d10f      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d8>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d10b      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_ADC_ConfigChannel+0x254>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12b      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_ADC_ConfigChannel+0x258>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d003      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x1f4>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b11      	cmp	r3, #17
 800186e:	d122      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_ADC_ConfigChannel+0x258>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d111      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_ADC_ConfigChannel+0x25c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_ADC_ConfigChannel+0x260>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	0c9a      	lsrs	r2, r3, #18
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40012300 	.word	0x40012300
 80018d0:	40012000 	.word	0x40012000
 80018d4:	10000012 	.word	0x10000012
 80018d8:	20000118 	.word	0x20000118
 80018dc:	431bde83 	.word	0x431bde83

080018e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <ADC_Init+0x1f0>)
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	431a      	orrs	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <ADC_Init+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d022      	beq.n	80019be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6899      	ldr	r1, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e00f      	b.n	80019de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0202 	bic.w	r2, r2, #2
 80019ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e1b      	ldrb	r3, [r3, #24]
 80019f8:	005a      	lsls	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01b      	beq.n	8001a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	3b01      	subs	r3, #1
 8001a38:	035a      	lsls	r2, r3, #13
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	e007      	b.n	8001a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	051a      	lsls	r2, r3, #20
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6899      	ldr	r1, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a96:	025a      	lsls	r2, r3, #9
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6899      	ldr	r1, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	029a      	lsls	r2, r3, #10
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40012300 	.word	0x40012300
 8001ad4:	0f000001 	.word	0x0f000001

08001ad8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	; (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff fa10 	bl	8001140 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e099      	b.n	8001e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	e00f      	b.n	8001d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4e:	f7ff f9f7 	bl	8001140 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d908      	bls.n	8001d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e078      	b.n	8001e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e8      	bne.n	8001d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_DMA_Init+0x158>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d107      	bne.n	8001dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d117      	bne.n	8001e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fa19 	bl	800224c <DMA_CheckFifoParam>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e016      	b.n	8001e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f9d0 	bl	80021e0 <DMA_CalcBaseAndBitshift>
 8001e40:	4603      	mov	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	223f      	movs	r2, #63	; 0x3f
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	f010803f 	.word	0xf010803f

08001e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d004      	beq.n	8001e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00c      	b.n	8001ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2205      	movs	r2, #5
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ebc:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_DMA_IRQHandler+0x258>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_DMA_IRQHandler+0x25c>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	2208      	movs	r2, #8
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01a      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0204 	bic.w	r2, r2, #4
 8001f02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	2208      	movs	r2, #8
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2201      	movs	r2, #1
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d012      	beq.n	8001f52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	2201      	movs	r2, #1
 8001f40:	409a      	lsls	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f043 0202 	orr.w	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2204      	movs	r2, #4
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d012      	beq.n	8001f88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2204      	movs	r2, #4
 8001f76:	409a      	lsls	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f043 0204 	orr.w	r2, r3, #4
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d043      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03c      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2210      	movs	r2, #16
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d018      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d024      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
 8001fde:	e01f      	b.n	8002020 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e016      	b.n	8002020 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0208 	bic.w	r2, r2, #8
 800200e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2220      	movs	r2, #32
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 808e 	beq.w	800214e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 8086 	beq.w	800214e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	2220      	movs	r2, #32
 8002048:	409a      	lsls	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b05      	cmp	r3, #5
 8002058:	d136      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0216 	bic.w	r2, r2, #22
 8002068:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002078:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <HAL_DMA_IRQHandler+0x1da>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0208 	bic.w	r2, r2, #8
 8002098:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	223f      	movs	r2, #63	; 0x3f
 80020a0:	409a      	lsls	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d07d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
        }
        return;
 80020c6:	e078      	b.n	80021ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01c      	beq.n	8002110 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d108      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d030      	beq.n	800214e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e02b      	b.n	800214e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d027      	beq.n	800214e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
 8002106:	e022      	b.n	800214e <HAL_DMA_IRQHandler+0x29e>
 8002108:	20000118 	.word	0x20000118
 800210c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0210 	bic.w	r2, r2, #16
 800212c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	2b00      	cmp	r3, #0
 8002154:	d032      	beq.n	80021bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d022      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3301      	adds	r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	429a      	cmp	r2, r3
 8002184:	d307      	bcc.n	8002196 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f2      	bne.n	800217a <HAL_DMA_IRQHandler+0x2ca>
 8002194:	e000      	b.n	8002198 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002196:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e000      	b.n	80021bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80021ba:	bf00      	nop
    }
  }
}
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop

080021c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d2:	b2db      	uxtb	r3, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3b10      	subs	r3, #16
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <DMA_CalcBaseAndBitshift+0x64>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <DMA_CalcBaseAndBitshift+0x68>)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d909      	bls.n	8002222 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	1d1a      	adds	r2, r3, #4
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	659a      	str	r2, [r3, #88]	; 0x58
 8002220:	e007      	b.n	8002232 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	aaaaaaab 	.word	0xaaaaaaab
 8002248:	08011674 	.word	0x08011674

0800224c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11f      	bne.n	80022a6 <DMA_CheckFifoParam+0x5a>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d856      	bhi.n	800231a <DMA_CheckFifoParam+0xce>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <DMA_CheckFifoParam+0x28>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002285 	.word	0x08002285
 8002278:	08002297 	.word	0x08002297
 800227c:	08002285 	.word	0x08002285
 8002280:	0800231b 	.word	0x0800231b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d046      	beq.n	800231e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002294:	e043      	b.n	800231e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800229e:	d140      	bne.n	8002322 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a4:	e03d      	b.n	8002322 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ae:	d121      	bne.n	80022f4 <DMA_CheckFifoParam+0xa8>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d837      	bhi.n	8002326 <DMA_CheckFifoParam+0xda>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <DMA_CheckFifoParam+0x70>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022d3 	.word	0x080022d3
 80022c4:	080022cd 	.word	0x080022cd
 80022c8:	080022e5 	.word	0x080022e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      break;
 80022d0:	e030      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d025      	beq.n	800232a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e2:	e022      	b.n	800232a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ec:	d11f      	bne.n	800232e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022f2:	e01c      	b.n	800232e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d903      	bls.n	8002302 <DMA_CheckFifoParam+0xb6>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d003      	beq.n	8002308 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002300:	e018      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      break;
 8002306:	e015      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      break;
 8002318:	e00b      	b.n	8002332 <DMA_CheckFifoParam+0xe6>
      break;
 800231a:	bf00      	nop
 800231c:	e00a      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 800231e:	bf00      	nop
 8002320:	e008      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 8002322:	bf00      	nop
 8002324:	e006      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 8002326:	bf00      	nop
 8002328:	e004      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 800232a:	bf00      	nop
 800232c:	e002      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;   
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 8002332:	bf00      	nop
    }
  } 
  
  return status; 
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e159      	b.n	8002614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 8148 	bne.w	800260e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	2b02      	cmp	r3, #2
 8002394:	d130      	bne.n	80023f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 0201 	and.w	r2, r3, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b03      	cmp	r3, #3
 8002402:	d017      	beq.n	8002434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d123      	bne.n	8002488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	69b9      	ldr	r1, [r7, #24]
 8002484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80a2 	beq.w	800260e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <HAL_GPIO_Init+0x2e8>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a56      	ldr	r2, [pc, #344]	; (800262c <HAL_GPIO_Init+0x2e8>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b54      	ldr	r3, [pc, #336]	; (800262c <HAL_GPIO_Init+0x2e8>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e6:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_GPIO_Init+0x2ec>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_GPIO_Init+0x2f0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0x202>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_GPIO_Init+0x2f4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x1fe>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a47      	ldr	r2, [pc, #284]	; (800263c <HAL_GPIO_Init+0x2f8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x1fa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a46      	ldr	r2, [pc, #280]	; (8002640 <HAL_GPIO_Init+0x2fc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x1f6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a45      	ldr	r2, [pc, #276]	; (8002644 <HAL_GPIO_Init+0x300>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x1f2>
 8002532:	2304      	movs	r3, #4
 8002534:	e008      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002536:	2307      	movs	r3, #7
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x204>
 800253a:	2303      	movs	r3, #3
 800253c:	e004      	b.n	8002548 <HAL_GPIO_Init+0x204>
 800253e:	2302      	movs	r3, #2
 8002540:	e002      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002546:	2300      	movs	r3, #0
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f002 0203 	and.w	r2, r2, #3
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	4093      	lsls	r3, r2
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002558:	4935      	ldr	r1, [pc, #212]	; (8002630 <HAL_GPIO_Init+0x2ec>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_GPIO_Init+0x304>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258a:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <HAL_GPIO_Init+0x304>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_GPIO_Init+0x304>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b4:	4a24      	ldr	r2, [pc, #144]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025de:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_GPIO_Init+0x304>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3301      	adds	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	f67f aea2 	bls.w	8002360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40013800 	.word	0x40013800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400
 800263c:	40020800 	.word	0x40020800
 8002640:	40020c00 	.word	0x40020c00
 8002644:	40021000 	.word	0x40021000
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e001      	b.n	800266e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002698:	e003      	b.n	80026a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026c0:	887a      	ldrh	r2, [r7, #2]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	041a      	lsls	r2, r3, #16
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	400b      	ands	r3, r1
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f806 	bl	8002714 <HAL_GPIO_EXTI_Callback>
  }
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e12b      	b.n	8002996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f00b f83c 	bl	800d7d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800277e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800278e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002790:	f003 fc42 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8002794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4a81      	ldr	r2, [pc, #516]	; (80029a0 <HAL_I2C_Init+0x274>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d807      	bhi.n	80027b0 <HAL_I2C_Init+0x84>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a80      	ldr	r2, [pc, #512]	; (80029a4 <HAL_I2C_Init+0x278>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	e006      	b.n	80027be <HAL_I2C_Init+0x92>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a7d      	ldr	r2, [pc, #500]	; (80029a8 <HAL_I2C_Init+0x27c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0e7      	b.n	8002996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a78      	ldr	r2, [pc, #480]	; (80029ac <HAL_I2C_Init+0x280>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0c9b      	lsrs	r3, r3, #18
 80027d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a6a      	ldr	r2, [pc, #424]	; (80029a0 <HAL_I2C_Init+0x274>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d802      	bhi.n	8002800 <HAL_I2C_Init+0xd4>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	3301      	adds	r3, #1
 80027fe:	e009      	b.n	8002814 <HAL_I2C_Init+0xe8>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_I2C_Init+0x284>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	3301      	adds	r3, #1
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	430b      	orrs	r3, r1
 800281a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	495c      	ldr	r1, [pc, #368]	; (80029a0 <HAL_I2C_Init+0x274>)
 8002830:	428b      	cmp	r3, r1
 8002832:	d819      	bhi.n	8002868 <HAL_I2C_Init+0x13c>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1e59      	subs	r1, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002842:	1c59      	adds	r1, r3, #1
 8002844:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002848:	400b      	ands	r3, r1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_I2C_Init+0x138>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1e59      	subs	r1, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fbb1 f3f3 	udiv	r3, r1, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002862:	e051      	b.n	8002908 <HAL_I2C_Init+0x1dc>
 8002864:	2304      	movs	r3, #4
 8002866:	e04f      	b.n	8002908 <HAL_I2C_Init+0x1dc>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d111      	bne.n	8002894 <HAL_I2C_Init+0x168>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	440b      	add	r3, r1
 800287e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e012      	b.n	80028ba <HAL_I2C_Init+0x18e>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	0099      	lsls	r1, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x196>
 80028be:	2301      	movs	r3, #1
 80028c0:	e022      	b.n	8002908 <HAL_I2C_Init+0x1dc>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10e      	bne.n	80028e8 <HAL_I2C_Init+0x1bc>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e58      	subs	r0, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	440b      	add	r3, r1
 80028d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028dc:	3301      	adds	r3, #1
 80028de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e6:	e00f      	b.n	8002908 <HAL_I2C_Init+0x1dc>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1e58      	subs	r0, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	0099      	lsls	r1, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	6809      	ldr	r1, [r1, #0]
 800290c:	4313      	orrs	r3, r2
 800290e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6911      	ldr	r1, [r2, #16]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68d2      	ldr	r2, [r2, #12]
 8002942:	4311      	orrs	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	430b      	orrs	r3, r1
 800294a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	000186a0 	.word	0x000186a0
 80029a4:	001e847f 	.word	0x001e847f
 80029a8:	003d08ff 	.word	0x003d08ff
 80029ac:	431bde83 	.word	0x431bde83
 80029b0:	10624dd3 	.word	0x10624dd3

080029b4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	4608      	mov	r0, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	461a      	mov	r2, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	817b      	strh	r3, [r7, #10]
 80029c6:	460b      	mov	r3, r1
 80029c8:	813b      	strh	r3, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b20      	cmp	r3, #32
 80029dc:	f040 809a 	bne.w	8002b14 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80029e0:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <HAL_I2C_Mem_Read_IT+0x170>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	4a50      	ldr	r2, [pc, #320]	; (8002b28 <HAL_I2C_Mem_Read_IT+0x174>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	0a1a      	lsrs	r2, r3, #8
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e070      	b.n	8002b16 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d0db      	beq.n	80029fa <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_I2C_Mem_Read_IT+0x9c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e062      	b.n	8002b16 <HAL_I2C_Mem_Read_IT+0x162>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d007      	beq.n	8002a76 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a84:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2240      	movs	r2, #64	; 0x40
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a3a      	ldr	r2, [r7, #32]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_I2C_Mem_Read_IT+0x178>)
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002ab8:	897a      	ldrh	r2, [r7, #10]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002abe:	893a      	ldrh	r2, [r7, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ade:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002b0e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000118 	.word	0x20000118
 8002b28:	14f8b589 	.word	0x14f8b589
 8002b2c:	ffff0000 	.word	0xffff0000

08002b30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d003      	beq.n	8002b68 <HAL_I2C_EV_IRQHandler+0x38>
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	f040 80c1 	bne.w	8002cea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10d      	bne.n	8002b9e <HAL_I2C_EV_IRQHandler+0x6e>
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b88:	d003      	beq.n	8002b92 <HAL_I2C_EV_IRQHandler+0x62>
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_EV_IRQHandler+0x66>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_I2C_EV_IRQHandler+0x68>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f000 8132 	beq.w	8002e02 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x92>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	0a5b      	lsrs	r3, r3, #9
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f001 fc67 	bl	8004488 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fd6f 	bl	800369e <I2C_Master_SB>
 8002bc0:	e092      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	0a5b      	lsrs	r3, r3, #9
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fde5 	bl	80037aa <I2C_Master_ADD10>
 8002be0:	e082      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_I2C_EV_IRQHandler+0xd2>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	0a5b      	lsrs	r3, r3, #9
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fdff 	bl	80037fe <I2C_Master_ADDR>
 8002c00:	e072      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d03b      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1c:	f000 80f3 	beq.w	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	09db      	lsrs	r3, r3, #7
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <HAL_I2C_EV_IRQHandler+0x11c>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	0a9b      	lsrs	r3, r3, #10
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_I2C_EV_IRQHandler+0x11c>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9e9 	bl	800301c <I2C_MasterTransmit_TXE>
 8002c4a:	e04d      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80d6 	beq.w	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80cf 	beq.w	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	2b21      	cmp	r3, #33	; 0x21
 8002c6c:	d103      	bne.n	8002c76 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa70 	bl	8003154 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c74:	e0c7      	b.n	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	f040 80c4 	bne.w	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fade 	bl	8003240 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c84:	e0bf      	b.n	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c94:	f000 80b7 	beq.w	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00f      	beq.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x194>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	0a9b      	lsrs	r3, r3, #10
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x194>
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fb53 	bl	8003368 <I2C_MasterReceive_RXNE>
 8002cc2:	e011      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 809a 	beq.w	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	0a5b      	lsrs	r3, r3, #9
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8093 	beq.w	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fbf2 	bl	80034ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce6:	e08e      	b.n	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ce8:	e08d      	b.n	8002e06 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e007      	b.n	8002d0c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d012      	beq.n	8002d3e <HAL_I2C_EV_IRQHandler+0x20e>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	0a5b      	lsrs	r3, r3, #9
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d34:	69b9      	ldr	r1, [r7, #24]
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 ffb0 	bl	8003c9c <I2C_Slave_ADDR>
 8002d3c:	e066      	b.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_I2C_EV_IRQHandler+0x22e>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	0a5b      	lsrs	r3, r3, #9
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 ffea 	bl	8003d30 <I2C_Slave_STOPF>
 8002d5c:	e056      	b.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d5e:	7bbb      	ldrb	r3, [r7, #14]
 8002d60:	2b21      	cmp	r3, #33	; 0x21
 8002d62:	d002      	beq.n	8002d6a <HAL_I2C_EV_IRQHandler+0x23a>
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	2b29      	cmp	r3, #41	; 0x29
 8002d68:	d125      	bne.n	8002db6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	09db      	lsrs	r3, r3, #7
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00f      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0x266>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	0a9b      	lsrs	r3, r3, #10
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0x266>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fec6 	bl	8003b20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d94:	e039      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d033      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2da>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	0a5b      	lsrs	r3, r3, #9
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02d      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fef3 	bl	8003b9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002db4:	e029      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00f      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	0a9b      	lsrs	r3, r3, #10
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fefe 	bl	8003bdc <I2C_SlaveReceive_RXNE>
 8002de0:	e014      	b.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00e      	beq.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	0a5b      	lsrs	r3, r3, #9
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 ff2c 	bl	8003c58 <I2C_SlaveReceive_BTF>
 8002e00:	e004      	b.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e0a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08a      	sub	sp, #40	; 0x28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e34:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00e      	beq.n	8002e60 <HAL_I2C_ER_IRQHandler+0x4e>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e5e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	0a5b      	lsrs	r3, r3, #9
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <HAL_I2C_ER_IRQHandler+0x78>
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002e88:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	0a9b      	lsrs	r3, r3, #10
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03f      	beq.n	8002f16 <HAL_I2C_ER_IRQHandler+0x104>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d039      	beq.n	8002f16 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002ea2:	7efb      	ldrb	r3, [r7, #27]
 8002ea4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ebc:	7ebb      	ldrb	r3, [r7, #26]
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d112      	bne.n	8002ee8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b21      	cmp	r3, #33	; 0x21
 8002ecc:	d008      	beq.n	8002ee0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	2b29      	cmp	r3, #41	; 0x29
 8002ed2:	d005      	beq.n	8002ee0 <HAL_I2C_ER_IRQHandler+0xce>
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	2b28      	cmp	r3, #40	; 0x28
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b21      	cmp	r3, #33	; 0x21
 8002ede:	d103      	bne.n	8002ee8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f001 f855 	bl	8003f90 <I2C_Slave_AF>
 8002ee6:	e016      	b.n	8002f16 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002efa:	7efb      	ldrb	r3, [r7, #27]
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d002      	beq.n	8002f06 <HAL_I2C_ER_IRQHandler+0xf4>
 8002f00:	7efb      	ldrb	r3, [r7, #27]
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d107      	bne.n	8002f16 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	0adb      	lsrs	r3, r3, #11
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <HAL_I2C_ER_IRQHandler+0x12e>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002f3e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f001 f88c 	bl	8004070 <I2C_ITError>
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003032:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d150      	bne.n	80030e4 <I2C_MasterTransmit_TXE+0xc8>
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b21      	cmp	r3, #33	; 0x21
 8003046:	d14d      	bne.n	80030e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d01d      	beq.n	800308a <I2C_MasterTransmit_TXE+0x6e>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b20      	cmp	r3, #32
 8003052:	d01a      	beq.n	800308a <I2C_MasterTransmit_TXE+0x6e>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800305a:	d016      	beq.n	800308a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800306a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2211      	movs	r2, #17
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff6c 	bl	8002f60 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003088:	e060      	b.n	800314c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003098:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d107      	bne.n	80030d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff87 	bl	8002fe0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030d2:	e03b      	b.n	800314c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff ff3f 	bl	8002f60 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e2:	e033      	b.n	800314c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b21      	cmp	r3, #33	; 0x21
 80030e8:	d005      	beq.n	80030f6 <I2C_MasterTransmit_TXE+0xda>
 80030ea:	7bbb      	ldrb	r3, [r7, #14]
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d12d      	bne.n	800314c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b22      	cmp	r3, #34	; 0x22
 80030f4:	d12a      	bne.n	800314c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d108      	bne.n	8003112 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003110:	e01c      	b.n	800314c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d103      	bne.n	8003126 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f88e 	bl	8003240 <I2C_MemoryTransmit_TXE_BTF>
}
 8003124:	e012      	b.n	800314c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800314a:	e7ff      	b.n	800314c <I2C_MasterTransmit_TXE+0x130>
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b21      	cmp	r3, #33	; 0x21
 800316c:	d164      	bne.n	8003238 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800319c:	e04c      	b.n	8003238 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d01d      	beq.n	80031e0 <I2C_MasterTransmit_BTF+0x8c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d01a      	beq.n	80031e0 <I2C_MasterTransmit_BTF+0x8c>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b0:	d016      	beq.n	80031e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2211      	movs	r2, #17
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff fec1 	bl	8002f60 <HAL_I2C_MasterTxCpltCallback>
}
 80031de:	e02b      	b.n	8003238 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d107      	bne.n	800322a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fedc 	bl	8002fe0 <HAL_I2C_MemTxCpltCallback>
}
 8003228:	e006      	b.n	8003238 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fe94 	bl	8002f60 <HAL_I2C_MasterTxCpltCallback>
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11d      	bne.n	8003294 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10b      	bne.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003276:	e073      	b.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327c:	b29b      	uxth	r3, r3
 800327e:	121b      	asrs	r3, r3, #8
 8003280:	b2da      	uxtb	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003292:	e065      	b.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10b      	bne.n	80032b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032b2:	e055      	b.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d151      	bne.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b22      	cmp	r3, #34	; 0x22
 80032c0:	d10d      	bne.n	80032de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032dc:	e040      	b.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b21      	cmp	r3, #33	; 0x21
 80032ec:	d112      	bne.n	8003314 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003312:	e025      	b.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d120      	bne.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	2b21      	cmp	r3, #33	; 0x21
 8003322:	d11d      	bne.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003332:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fe40 	bl	8002fe0 <HAL_I2C_MemTxCpltCallback>
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b22      	cmp	r3, #34	; 0x22
 800337a:	f040 80a2 	bne.w	80034c2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d921      	bls.n	80033d0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	f040 8082 	bne.w	80034c2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80033ce:	e078      	b.n	80034c2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d074      	beq.n	80034c2 <I2C_MasterReceive_RXNE+0x15a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d002      	beq.n	80033e4 <I2C_MasterReceive_RXNE+0x7c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d16e      	bne.n	80034c2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f001 f81d 	bl	8004424 <I2C_WaitOnSTOPRequestThroughIT>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d142      	bne.n	8003476 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d10a      	bne.n	8003460 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f00a fc59 	bl	800dd10 <HAL_I2C_MemRxCpltCallback>
}
 800345e:	e030      	b.n	80034c2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2212      	movs	r2, #18
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fd80 	bl	8002f74 <HAL_I2C_MasterRxCpltCallback>
}
 8003474:	e025      	b.n	80034c2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003484:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fd99 	bl	8002ff4 <HAL_I2C_ErrorCallback>
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d11b      	bne.n	800351a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003518:	e0bd      	b.n	8003696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b03      	cmp	r3, #3
 8003522:	d129      	bne.n	8003578 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003532:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d00a      	beq.n	8003550 <I2C_MasterReceive_BTF+0x86>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d007      	beq.n	8003550 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003576:	e08e      	b.n	8003696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d176      	bne.n	8003670 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d002      	beq.n	800358e <I2C_MasterReceive_BTF+0xc4>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b10      	cmp	r3, #16
 800358c:	d108      	bne.n	80035a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e019      	b.n	80035d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d002      	beq.n	80035ac <I2C_MasterReceive_BTF+0xe2>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d108      	bne.n	80035be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e00a      	b.n	80035d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d007      	beq.n	80035d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800362e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d10a      	bne.n	800365a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f00a fb5c 	bl	800dd10 <HAL_I2C_MemRxCpltCallback>
}
 8003658:	e01d      	b.n	8003696 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2212      	movs	r2, #18
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fc83 	bl	8002f74 <HAL_I2C_MasterRxCpltCallback>
}
 800366e:	e012      	b.n	8003696 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d117      	bne.n	80036e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80036cc:	e067      	b.n	800379e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	611a      	str	r2, [r3, #16]
}
 80036e0:	e05d      	b.n	800379e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ea:	d133      	bne.n	8003754 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b21      	cmp	r3, #33	; 0x21
 80036f6:	d109      	bne.n	800370c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003708:	611a      	str	r2, [r3, #16]
 800370a:	e008      	b.n	800371e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <I2C_Master_SB+0x92>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d108      	bne.n	8003742 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d032      	beq.n	800379e <I2C_Master_SB+0x100>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02d      	beq.n	800379e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003750:	605a      	str	r2, [r3, #4]
}
 8003752:	e024      	b.n	800379e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10e      	bne.n	800377a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	b29b      	uxth	r3, r3
 8003762:	11db      	asrs	r3, r3, #7
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f063 030f 	orn	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
}
 8003778:	e011      	b.n	800379e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10d      	bne.n	800379e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	b29b      	uxth	r3, r3
 8003788:	11db      	asrs	r3, r3, #7
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0306 	and.w	r3, r3, #6
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f063 030e 	orn	r3, r3, #14
 8003796:	b2da      	uxtb	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <I2C_Master_ADD10+0x26>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00c      	beq.n	80037f2 <I2C_Master_ADD10+0x48>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f0:	605a      	str	r2, [r3, #4]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037fe:	b480      	push	{r7}
 8003800:	b091      	sub	sp, #68	; 0x44
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b22      	cmp	r3, #34	; 0x22
 8003826:	f040 8169 	bne.w	8003afc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <I2C_Master_ADDR+0x54>
 8003832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d10b      	bne.n	8003852 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	e160      	b.n	8003b14 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <I2C_Master_ADDR+0x98>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003862:	d118      	bne.n	8003896 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003888:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	651a      	str	r2, [r3, #80]	; 0x50
 8003894:	e13e      	b.n	8003b14 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e115      	b.n	8003af4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 808a 	bne.w	80039e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038da:	d137      	bne.n	800394c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fa:	d113      	bne.n	8003924 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	e0e7      	b.n	8003af4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003924:	2300      	movs	r3, #0
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e0d3      	b.n	8003af4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	2b08      	cmp	r3, #8
 8003950:	d02e      	beq.n	80039b0 <I2C_Master_ADDR+0x1b2>
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2b20      	cmp	r3, #32
 8003956:	d02b      	beq.n	80039b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	2b12      	cmp	r3, #18
 800395c:	d102      	bne.n	8003964 <I2C_Master_ADDR+0x166>
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	2b01      	cmp	r3, #1
 8003962:	d125      	bne.n	80039b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00e      	beq.n	8003988 <I2C_Master_ADDR+0x18a>
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	2b02      	cmp	r3, #2
 800396e:	d00b      	beq.n	8003988 <I2C_Master_ADDR+0x18a>
 8003970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003972:	2b10      	cmp	r3, #16
 8003974:	d008      	beq.n	8003988 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e007      	b.n	8003998 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003996:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	e0a1      	b.n	8003af4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e085      	b.n	8003af4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d14d      	bne.n	8003a8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d016      	beq.n	8003a26 <I2C_Master_ADDR+0x228>
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d013      	beq.n	8003a26 <I2C_Master_ADDR+0x228>
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d010      	beq.n	8003a26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e007      	b.n	8003a36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a44:	d117      	bne.n	8003a76 <I2C_Master_ADDR+0x278>
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a4c:	d00b      	beq.n	8003a66 <I2C_Master_ADDR+0x268>
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d008      	beq.n	8003a66 <I2C_Master_ADDR+0x268>
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d005      	beq.n	8003a66 <I2C_Master_ADDR+0x268>
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d002      	beq.n	8003a66 <I2C_Master_ADDR+0x268>
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d107      	bne.n	8003a76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	e032      	b.n	8003af4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aac:	d117      	bne.n	8003ade <I2C_Master_ADDR+0x2e0>
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab4:	d00b      	beq.n	8003ace <I2C_Master_ADDR+0x2d0>
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d008      	beq.n	8003ace <I2C_Master_ADDR+0x2d0>
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d005      	beq.n	8003ace <I2C_Master_ADDR+0x2d0>
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d002      	beq.n	8003ace <I2C_Master_ADDR+0x2d0>
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d107      	bne.n	8003ade <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003adc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003afa:	e00b      	b.n	8003b14 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
}
 8003b12:	e7ff      	b.n	8003b14 <I2C_Master_ADDR+0x316>
 8003b14:	bf00      	nop
 8003b16:	3744      	adds	r7, #68	; 0x44
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02b      	beq.n	8003b92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d114      	bne.n	8003b92 <I2C_SlaveTransmit_TXE+0x72>
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b29      	cmp	r3, #41	; 0x29
 8003b6c:	d111      	bne.n	8003b92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2221      	movs	r2, #33	; 0x21
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2228      	movs	r2, #40	; 0x28
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff f9fb 	bl	8002f88 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02c      	beq.n	8003c50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d114      	bne.n	8003c50 <I2C_SlaveReceive_RXNE+0x74>
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2a:	d111      	bne.n	8003c50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2222      	movs	r2, #34	; 0x22
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2228      	movs	r2, #40	; 0x28
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff f9a6 	bl	8002f9c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cb6:	2b28      	cmp	r3, #40	; 0x28
 8003cb8:	d127      	bne.n	8003d0a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	09db      	lsrs	r3, r3, #7
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	81bb      	strh	r3, [r7, #12]
 8003cec:	e002      	b.n	8003cf4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003cfc:	89ba      	ldrh	r2, [r7, #12]
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff f954 	bl	8002fb0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d08:	e00e      	b.n	8003d28 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8c:	d172      	bne.n	8003e74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b22      	cmp	r3, #34	; 0x22
 8003d92:	d002      	beq.n	8003d9a <I2C_Slave_STOPF+0x6a>
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b2a      	cmp	r3, #42	; 0x2a
 8003d98:	d135      	bne.n	8003e06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f043 0204 	orr.w	r2, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe f9f6 	bl	80021c4 <HAL_DMA_GetState>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d049      	beq.n	8003e72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	4a69      	ldr	r2, [pc, #420]	; (8003f88 <I2C_Slave_STOPF+0x258>)
 8003de4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe f83e 	bl	8001e6c <HAL_DMA_Abort_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d03d      	beq.n	8003e72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e04:	e035      	b.n	8003e72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0204 	orr.w	r2, r3, #4
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f9c0 	bl	80021c4 <HAL_DMA_GetState>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d014      	beq.n	8003e74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	4a4e      	ldr	r2, [pc, #312]	; (8003f88 <I2C_Slave_STOPF+0x258>)
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe f808 	bl	8001e6c <HAL_DMA_Abort_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4798      	blx	r3
 8003e70:	e000      	b.n	8003e74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d03e      	beq.n	8003efc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d112      	bne.n	8003eb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d112      	bne.n	8003ee6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f8b3 	bl	8004070 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f0a:	e039      	b.n	8003f80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f10:	d109      	bne.n	8003f26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2228      	movs	r2, #40	; 0x28
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff f83b 	bl	8002f9c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b28      	cmp	r3, #40	; 0x28
 8003f30:	d111      	bne.n	8003f56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <I2C_Slave_STOPF+0x25c>)
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff f83c 	bl	8002fcc <HAL_I2C_ListenCpltCallback>
}
 8003f54:	e014      	b.n	8003f80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	2b22      	cmp	r3, #34	; 0x22
 8003f5c:	d002      	beq.n	8003f64 <I2C_Slave_STOPF+0x234>
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b22      	cmp	r3, #34	; 0x22
 8003f62:	d10d      	bne.n	8003f80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff f80e 	bl	8002f9c <HAL_I2C_SlaveRxCpltCallback>
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	080042d5 	.word	0x080042d5
 8003f8c:	ffff0000 	.word	0xffff0000

08003f90 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d002      	beq.n	8003fb2 <I2C_Slave_AF+0x22>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d129      	bne.n	8004006 <I2C_Slave_AF+0x76>
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b28      	cmp	r3, #40	; 0x28
 8003fb6:	d126      	bne.n	8004006 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a2c      	ldr	r2, [pc, #176]	; (800406c <I2C_Slave_AF+0xdc>)
 8003fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fcc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fd6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe ffe4 	bl	8002fcc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004004:	e02e      	b.n	8004064 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b21      	cmp	r3, #33	; 0x21
 800400a:	d126      	bne.n	800405a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <I2C_Slave_AF+0xdc>)
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2221      	movs	r2, #33	; 0x21
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004036:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004040:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fe ff98 	bl	8002f88 <HAL_I2C_SlaveTxCpltCallback>
}
 8004058:	e004      	b.n	8004064 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004062:	615a      	str	r2, [r3, #20]
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	ffff0000 	.word	0xffff0000

08004070 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004088:	7bbb      	ldrb	r3, [r7, #14]
 800408a:	2b10      	cmp	r3, #16
 800408c:	d002      	beq.n	8004094 <I2C_ITError+0x24>
 800408e:	7bbb      	ldrb	r3, [r7, #14]
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d10a      	bne.n	80040aa <I2C_ITError+0x3a>
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b22      	cmp	r3, #34	; 0x22
 8004098:	d107      	bne.n	80040aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b0:	2b28      	cmp	r3, #40	; 0x28
 80040b2:	d107      	bne.n	80040c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2228      	movs	r2, #40	; 0x28
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040c2:	e015      	b.n	80040f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d00a      	beq.n	80040ea <I2C_ITError+0x7a>
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b60      	cmp	r3, #96	; 0x60
 80040d8:	d007      	beq.n	80040ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fe:	d162      	bne.n	80041c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d020      	beq.n	8004160 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <I2C_ITError+0x25c>)
 8004124:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fe9e 	bl	8001e6c <HAL_DMA_Abort_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8089 	beq.w	800424a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800415a:	4610      	mov	r0, r2
 800415c:	4798      	blx	r3
 800415e:	e074      	b.n	800424a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	4a59      	ldr	r2, [pc, #356]	; (80042cc <I2C_ITError+0x25c>)
 8004166:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fe7d 	bl	8001e6c <HAL_DMA_Abort_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d068      	beq.n	800424a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d10b      	bne.n	800419e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041c0:	4610      	mov	r0, r2
 80041c2:	4798      	blx	r3
 80041c4:	e041      	b.n	800424a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b60      	cmp	r3, #96	; 0x60
 80041d0:	d125      	bne.n	800421e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d10b      	bne.n	8004206 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fe fef6 	bl	8003008 <HAL_I2C_AbortCpltCallback>
 800421c:	e015      	b.n	800424a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d10b      	bne.n	8004244 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7fe fed5 	bl	8002ff4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10e      	bne.n	8004278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d113      	bne.n	80042c4 <I2C_ITError+0x254>
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b28      	cmp	r3, #40	; 0x28
 80042a0:	d110      	bne.n	80042c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <I2C_ITError+0x260>)
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fe fe84 	bl	8002fcc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	080042d5 	.word	0x080042d5
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042ee:	4b4b      	ldr	r3, [pc, #300]	; (800441c <I2C_DMAAbort+0x148>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	4a4a      	ldr	r2, [pc, #296]	; (8004420 <I2C_DMAAbort+0x14c>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	0a1a      	lsrs	r2, r3, #8
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	00da      	lsls	r2, r3, #3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800431a:	e00a      	b.n	8004332 <I2C_DMAAbort+0x5e>
    }
    count--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3b01      	subs	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004330:	d0ea      	beq.n	8004308 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	2200      	movs	r2, #0
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	2200      	movs	r2, #0
 8004350:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004360:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004374:	2200      	movs	r2, #0
 8004376:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	2200      	movs	r2, #0
 8004386:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b60      	cmp	r3, #96	; 0x60
 80043a2:	d10e      	bne.n	80043c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2200      	movs	r2, #0
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043ba:	6978      	ldr	r0, [r7, #20]
 80043bc:	f7fe fe24 	bl	8003008 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043c0:	e027      	b.n	8004412 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043c8:	2b28      	cmp	r3, #40	; 0x28
 80043ca:	d117      	bne.n	80043fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2228      	movs	r2, #40	; 0x28
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043fa:	e007      	b.n	800440c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800440c:	6978      	ldr	r0, [r7, #20]
 800440e:	f7fe fdf1 	bl	8002ff4 <HAL_I2C_ErrorCallback>
}
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000118 	.word	0x20000118
 8004420:	14f8b589 	.word	0x14f8b589

08004424 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004430:	4b13      	ldr	r3, [pc, #76]	; (8004480 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	08db      	lsrs	r3, r3, #3
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	0a1a      	lsrs	r2, r3, #8
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3b01      	subs	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e008      	b.n	8004474 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800446c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004470:	d0e9      	beq.n	8004446 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	20000118 	.word	0x20000118
 8004484:	14f8b589 	.word	0x14f8b589

08004488 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004498:	d103      	bne.n	80044a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80044a0:	e007      	b.n	80044b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044aa:	d102      	bne.n	80044b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2208      	movs	r2, #8
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c0:	b08f      	sub	sp, #60	; 0x3c
 80044c2:	af0a      	add	r7, sp, #40	; 0x28
 80044c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e10f      	b.n	80046f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f009 fd36 	bl	800df5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2203      	movs	r2, #3
 80044f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f004 fd21 	bl	8008f56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	687e      	ldr	r6, [r7, #4]
 800451c:	466d      	mov	r5, sp
 800451e:	f106 0410 	add.w	r4, r6, #16
 8004522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800452a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800452e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004532:	1d33      	adds	r3, r6, #4
 8004534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004536:	6838      	ldr	r0, [r7, #0]
 8004538:	f004 fbf8 	bl	8008d2c <USB_CoreInit>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e0d0      	b.n	80046f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f004 fd0f 	bl	8008f78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e04a      	b.n	80045f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	333d      	adds	r3, #61	; 0x3d
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004574:	7bfa      	ldrb	r2, [r7, #15]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	333c      	adds	r3, #60	; 0x3c
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	b298      	uxth	r0, r3
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3342      	adds	r3, #66	; 0x42
 800459c:	4602      	mov	r2, r0
 800459e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	333f      	adds	r3, #63	; 0x3f
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3344      	adds	r3, #68	; 0x44
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3348      	adds	r3, #72	; 0x48
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3350      	adds	r3, #80	; 0x50
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	3301      	adds	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d3af      	bcc.n	8004560 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e044      	b.n	8004690 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	3301      	adds	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d3b5      	bcc.n	8004606 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	687e      	ldr	r6, [r7, #4]
 80046a2:	466d      	mov	r5, sp
 80046a4:	f106 0410 	add.w	r4, r6, #16
 80046a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80046b8:	1d33      	adds	r3, r6, #4
 80046ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046bc:	6838      	ldr	r0, [r7, #0]
 80046be:	f004 fca7 	bl	8009010 <USB_DevInit>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e00d      	b.n	80046f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f005 fd23 	bl	800a134 <USB_DevDisconnect>

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_PCD_Start+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e020      	b.n	8004756 <HAL_PCD_Start+0x5e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	2b01      	cmp	r3, #1
 8004722:	d109      	bne.n	8004738 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004728:	2b01      	cmp	r3, #1
 800472a:	d005      	beq.n	8004738 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f004 fbf9 	bl	8008f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f005 fcd3 	bl	800a0f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800475e:	b590      	push	{r4, r7, lr}
 8004760:	b08d      	sub	sp, #52	; 0x34
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f005 fd91 	bl	800a29c <USB_GetMode>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 839d 	bne.w	8004ebc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f005 fcf5 	bl	800a176 <USB_ReadInterrupts>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8393 	beq.w	8004eba <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f005 fcec 	bl	800a176 <USB_ReadInterrupts>
 800479e:	4603      	mov	r3, r0
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d107      	bne.n	80047b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f002 0202 	and.w	r2, r2, #2
 80047b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f005 fcda 	bl	800a176 <USB_ReadInterrupts>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d161      	bne.n	8004890 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0210 	bic.w	r2, r2, #16
 80047da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	3304      	adds	r3, #4
 80047fa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	0c5b      	lsrs	r3, r3, #17
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	2b02      	cmp	r3, #2
 8004806:	d124      	bne.n	8004852 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d035      	beq.n	8004880 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800481e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004822:	b29b      	uxth	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	6a38      	ldr	r0, [r7, #32]
 8004828:	f005 fb11 	bl	8009e4e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004838:	441a      	add	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800484a:	441a      	add	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	619a      	str	r2, [r3, #24]
 8004850:	e016      	b.n	8004880 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	0c5b      	lsrs	r3, r3, #17
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	2b06      	cmp	r3, #6
 800485c:	d110      	bne.n	8004880 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004864:	2208      	movs	r2, #8
 8004866:	4619      	mov	r1, r3
 8004868:	6a38      	ldr	r0, [r7, #32]
 800486a:	f005 faf0 	bl	8009e4e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487a:	441a      	add	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0210 	orr.w	r2, r2, #16
 800488e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f005 fc6e 	bl	800a176 <USB_ReadInterrupts>
 800489a:	4603      	mov	r3, r0
 800489c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048a4:	d16e      	bne.n	8004984 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f005 fc74 	bl	800a19c <USB_ReadDevAllOutEpInterrupt>
 80048b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048b6:	e062      	b.n	800497e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d057      	beq.n	8004972 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f005 fc99 	bl	800a204 <USB_ReadDevOutEPInterrupt>
 80048d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00c      	beq.n	80048f8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	461a      	mov	r2, r3
 80048ec:	2301      	movs	r3, #1
 80048ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fdb0 	bl	8005458 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	461a      	mov	r2, r3
 8004910:	2308      	movs	r3, #8
 8004912:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 feaa 	bl	8005670 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	461a      	mov	r2, r3
 8004934:	2310      	movs	r3, #16
 8004936:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	2320      	movs	r3, #32
 8004952:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004970:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	3301      	adds	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d199      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f005 fbf4 	bl	800a176 <USB_ReadInterrupts>
 800498e:	4603      	mov	r3, r0
 8004990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004998:	f040 80c0 	bne.w	8004b1c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f005 fc15 	bl	800a1d0 <USB_ReadDevAllInEpInterrupt>
 80049a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049ac:	e0b2      	b.n	8004b14 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80a7 	beq.w	8004b08 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f005 fc3b 	bl	800a240 <USB_ReadDevInEPInterrupt>
 80049ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d057      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	2201      	movs	r2, #1
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69f9      	ldr	r1, [r7, #28]
 80049f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f6:	4013      	ands	r3, r2
 80049f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	461a      	mov	r2, r3
 8004a08:	2301      	movs	r3, #1
 8004a0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d132      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	3348      	adds	r3, #72	; 0x48
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4403      	add	r3, r0
 8004a34:	3344      	adds	r3, #68	; 0x44
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4419      	add	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4403      	add	r3, r0
 8004a48:	3348      	adds	r3, #72	; 0x48
 8004a4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d113      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x31c>
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3350      	adds	r3, #80	; 0x50
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d108      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a72:	461a      	mov	r2, r3
 8004a74:	2101      	movs	r1, #1
 8004a76:	f005 fc43 	bl	800a300 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f009 faec 	bl	800e05e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2310      	movs	r3, #16
 8004abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2340      	movs	r3, #64	; 0x40
 8004ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	461a      	mov	r2, r3
 8004af2:	2302      	movs	r3, #2
 8004af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fc1b 	bl	800533e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f47f af49 	bne.w	80049ae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f005 fb28 	bl	800a176 <USB_ReadInterrupts>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b30:	d122      	bne.n	8004b78 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d108      	bne.n	8004b62 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b58:	2100      	movs	r1, #0
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fe26 	bl	80057ac <HAL_PCDEx_LPM_Callback>
 8004b60:	e002      	b.n	8004b68 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f009 fae8 	bl	800e138 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f005 fafa 	bl	800a176 <USB_ReadInterrupts>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	d112      	bne.n	8004bb4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d102      	bne.n	8004ba4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f009 faa4 	bl	800e0ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004bb2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f005 fadc 	bl	800a176 <USB_ReadInterrupts>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc8:	f040 80c7 	bne.w	8004d5a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2110      	movs	r1, #16
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fb76 	bl	80092d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf0:	e056      	b.n	8004ca0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c24:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	461a      	mov	r2, r3
 8004c54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d3a3      	bcc.n	8004bf2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004cbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd6:	f043 030b 	orr.w	r3, r3, #11
 8004cda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f043 030b 	orr.w	r3, r3, #11
 8004cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf2:	e015      	b.n	8004d20 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f043 030b 	orr.w	r3, r3, #11
 8004d1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d44:	461a      	mov	r2, r3
 8004d46:	f005 fadb 	bl	800a300 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 fa09 	bl	800a176 <USB_ReadInterrupts>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6e:	d124      	bne.n	8004dba <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f005 fa9f 	bl	800a2b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f004 fb07 	bl	8009392 <USB_GetDevSpeed>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681c      	ldr	r4, [r3, #0]
 8004d90:	f001 f936 	bl	8006000 <HAL_RCC_GetHCLKFreq>
 8004d94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f004 f826 	bl	8008df0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f009 f982 	bl	800e0ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 f9d9 	bl	800a176 <USB_ReadInterrupts>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d10a      	bne.n	8004de4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f009 f95f 	bl	800e092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f002 0208 	and.w	r2, r2, #8
 8004de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f005 f9c4 	bl	800a176 <USB_ReadInterrupts>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df8:	d10f      	bne.n	8004e1a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f009 f9b7 	bl	800e178 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f005 f9a9 	bl	800a176 <USB_ReadInterrupts>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e2e:	d10f      	bne.n	8004e50 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f009 f98a 	bl	800e154 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f005 f98e 	bl	800a176 <USB_ReadInterrupts>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d10a      	bne.n	8004e7c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f009 f998 	bl	800e19c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f005 f978 	bl	800a176 <USB_ReadInterrupts>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d115      	bne.n	8004ebc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f009 f988 	bl	800e1b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	e000      	b.n	8004ebc <HAL_PCD_IRQHandler+0x75e>
      return;
 8004eba:	bf00      	nop
    }
  }
}
 8004ebc:	3734      	adds	r7, #52	; 0x34
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd90      	pop	{r4, r7, pc}

08004ec2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_PCD_SetAddress+0x1a>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e013      	b.n	8004f04 <HAL_PCD_SetAddress+0x42>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f005 f8d6 	bl	800a0a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	70fb      	strb	r3, [r7, #3]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	803b      	strh	r3, [r7, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da0f      	bge.n	8004f52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	f003 020f 	and.w	r2, r3, #15
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	3338      	adds	r3, #56	; 0x38
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	3304      	adds	r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	705a      	strb	r2, [r3, #1]
 8004f50:	e00f      	b.n	8004f72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4413      	add	r3, r2
 8004f68:	3304      	adds	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f7e:	883a      	ldrh	r2, [r7, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	78ba      	ldrb	r2, [r7, #2]
 8004f88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f9c:	78bb      	ldrb	r3, [r7, #2]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d102      	bne.n	8004fa8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_PCD_EP_Open+0xaa>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e00e      	b.n	8004fd4 <HAL_PCD_EP_Open+0xc8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f004 fa09 	bl	80093dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da0f      	bge.n	8005010 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	f003 020f 	and.w	r2, r3, #15
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	3338      	adds	r3, #56	; 0x38
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4413      	add	r3, r2
 8005004:	3304      	adds	r3, #4
 8005006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	705a      	strb	r2, [r3, #1]
 800500e:	e00f      	b.n	8005030 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	f003 020f 	and.w	r2, r3, #15
 8005016:	4613      	mov	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	3304      	adds	r3, #4
 8005028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_PCD_EP_Close+0x6e>
 8005046:	2302      	movs	r3, #2
 8005048:	e00e      	b.n	8005068 <HAL_PCD_EP_Close+0x8c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	4618      	mov	r0, r3
 800505a:	f004 fa47 	bl	80094ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	460b      	mov	r3, r1
 800507e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005080:	7afb      	ldrb	r3, [r7, #11]
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d102      	bne.n	80050cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050cc:	7afb      	ldrb	r3, [r7, #11]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	f004 fd22 	bl	8009b2c <USB_EP0StartXfer>
 80050e8:	e008      	b.n	80050fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	f004 fad4 	bl	80096a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	f003 020f 	and.w	r2, r3, #15
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005128:	681b      	ldr	r3, [r3, #0]
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b086      	sub	sp, #24
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	460b      	mov	r3, r1
 8005144:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005146:	7afb      	ldrb	r3, [r7, #11]
 8005148:	f003 020f 	and.w	r2, r3, #15
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3338      	adds	r3, #56	; 0x38
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	3304      	adds	r3, #4
 800515c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2200      	movs	r2, #0
 800516e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2201      	movs	r2, #1
 8005174:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005176:	7afb      	ldrb	r3, [r7, #11]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	b2da      	uxtb	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d102      	bne.n	8005190 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005190:	7afb      	ldrb	r3, [r7, #11]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6979      	ldr	r1, [r7, #20]
 80051a8:	f004 fcc0 	bl	8009b2c <USB_EP0StartXfer>
 80051ac:	e008      	b.n	80051c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	6979      	ldr	r1, [r7, #20]
 80051bc:	f004 fa72 	bl	80096a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	f003 020f 	and.w	r2, r3, #15
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d901      	bls.n	80051e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e050      	b.n	800528a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	da0f      	bge.n	8005210 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	f003 020f 	and.w	r2, r3, #15
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	3338      	adds	r3, #56	; 0x38
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4413      	add	r3, r2
 8005204:	3304      	adds	r3, #4
 8005206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	705a      	strb	r2, [r3, #1]
 800520e:	e00d      	b.n	800522c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	3304      	adds	r3, #4
 8005224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_PCD_EP_SetStall+0x82>
 8005248:	2302      	movs	r3, #2
 800524a:	e01e      	b.n	800528a <HAL_PCD_EP_SetStall+0xc0>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	4618      	mov	r0, r3
 800525c:	f004 fe4f 	bl	8009efe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	b2d9      	uxtb	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800527a:	461a      	mov	r2, r3
 800527c:	f005 f840 	bl	800a300 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	f003 020f 	and.w	r2, r3, #15
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d901      	bls.n	80052b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e042      	b.n	8005336 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	da0f      	bge.n	80052d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	f003 020f 	and.w	r2, r3, #15
 80052be:	4613      	mov	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	3338      	adds	r3, #56	; 0x38
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	3304      	adds	r3, #4
 80052ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	705a      	strb	r2, [r3, #1]
 80052d6:	e00f      	b.n	80052f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	f003 020f 	and.w	r2, r3, #15
 80052de:	4613      	mov	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	3304      	adds	r3, #4
 80052f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_PCD_EP_ClrStall+0x86>
 8005314:	2302      	movs	r3, #2
 8005316:	e00e      	b.n	8005336 <HAL_PCD_EP_ClrStall+0xa4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68f9      	ldr	r1, [r7, #12]
 8005326:	4618      	mov	r0, r3
 8005328:	f004 fe57 	bl	8009fda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b08a      	sub	sp, #40	; 0x28
 8005342:	af02      	add	r7, sp, #8
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	3338      	adds	r3, #56	; 0x38
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	3304      	adds	r3, #4
 8005364:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	429a      	cmp	r2, r3
 8005370:	d901      	bls.n	8005376 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e06c      	b.n	8005450 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	429a      	cmp	r2, r3
 800538a:	d902      	bls.n	8005392 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	3303      	adds	r3, #3
 8005396:	089b      	lsrs	r3, r3, #2
 8005398:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800539a:	e02b      	b.n	80053f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d902      	bls.n	80053b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3303      	adds	r3, #3
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68d9      	ldr	r1, [r3, #12]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4603      	mov	r3, r0
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f004 fcfb 	bl	8009dd2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	441a      	add	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	441a      	add	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	b29b      	uxth	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	429a      	cmp	r2, r3
 8005408:	d809      	bhi.n	800541e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005412:	429a      	cmp	r2, r3
 8005414:	d203      	bcs.n	800541e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1be      	bne.n	800539c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	429a      	cmp	r2, r3
 8005428:	d811      	bhi.n	800544e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	2201      	movs	r2, #1
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	43db      	mvns	r3, r3
 8005444:	6939      	ldr	r1, [r7, #16]
 8005446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544a:	4013      	ands	r3, r2
 800544c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	333c      	adds	r3, #60	; 0x3c
 8005470:	3304      	adds	r3, #4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b01      	cmp	r3, #1
 800548c:	f040 80a0 	bne.w	80055d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d015      	beq.n	80054c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a72      	ldr	r2, [pc, #456]	; (8005668 <PCD_EP_OutXfrComplete_int+0x210>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f240 80dd 	bls.w	800565e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80d7 	beq.w	800565e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	461a      	mov	r2, r3
 80054be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c2:	6093      	str	r3, [r2, #8]
 80054c4:	e0cb      	b.n	800565e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	2320      	movs	r3, #32
 80054e0:	6093      	str	r3, [r2, #8]
 80054e2:	e0bc      	b.n	800565e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 80b7 	bne.w	800565e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a5d      	ldr	r2, [pc, #372]	; (8005668 <PCD_EP_OutXfrComplete_int+0x210>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d90f      	bls.n	8005518 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	461a      	mov	r2, r3
 8005510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005514:	6093      	str	r3, [r2, #8]
 8005516:	e0a2      	b.n	800565e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800552a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	0159      	lsls	r1, r3, #5
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	440b      	add	r3, r1
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800553e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4403      	add	r3, r0
 800554e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005552:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005566:	6819      	ldr	r1, [r3, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4403      	add	r3, r0
 8005576:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4419      	add	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	4613      	mov	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4403      	add	r3, r0
 800558c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005590:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d114      	bne.n	80055c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055ba:	461a      	mov	r2, r3
 80055bc:	2101      	movs	r1, #1
 80055be:	f004 fe9f 	bl	800a300 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f008 fd2d 	bl	800e028 <HAL_PCD_DataOutStageCallback>
 80055ce:	e046      	b.n	800565e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a26      	ldr	r2, [pc, #152]	; (800566c <PCD_EP_OutXfrComplete_int+0x214>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d124      	bne.n	8005622 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	461a      	mov	r2, r3
 80055f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f4:	6093      	str	r3, [r2, #8]
 80055f6:	e032      	b.n	800565e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	461a      	mov	r2, r3
 8005610:	2320      	movs	r3, #32
 8005612:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f008 fd04 	bl	800e028 <HAL_PCD_DataOutStageCallback>
 8005620:	e01d      	b.n	800565e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d114      	bne.n	8005652 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d108      	bne.n	8005652 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800564a:	461a      	mov	r2, r3
 800564c:	2100      	movs	r1, #0
 800564e:	f004 fe57 	bl	800a300 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f008 fce5 	bl	800e028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	4f54300a 	.word	0x4f54300a
 800566c:	4f54310a 	.word	0x4f54310a

08005670 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	333c      	adds	r3, #60	; 0x3c
 8005688:	3304      	adds	r3, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d90e      	bls.n	80056c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	461a      	mov	r2, r3
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f008 fc9d 	bl	800e004 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d90c      	bls.n	80056ec <PCD_EP_OutSetupPacket_int+0x7c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d108      	bne.n	80056ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056e4:	461a      	mov	r2, r3
 80056e6:	2101      	movs	r1, #1
 80056e8:	f004 fe0a 	bl	800a300 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	4f54300a 	.word	0x4f54300a

080056fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
 8005708:	4613      	mov	r3, r2
 800570a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800571a:	883b      	ldrh	r3, [r7, #0]
 800571c:	0419      	lsls	r1, r3, #16
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	430a      	orrs	r2, r1
 8005726:	629a      	str	r2, [r3, #40]	; 0x28
 8005728:	e028      	b.n	800577c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	4413      	add	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]
 800573c:	e00d      	b.n	800575a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	3340      	adds	r3, #64	; 0x40
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4413      	add	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	3301      	adds	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
 800575a:	7bfa      	ldrb	r2, [r7, #15]
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	3b01      	subs	r3, #1
 8005760:	429a      	cmp	r2, r3
 8005762:	d3ec      	bcc.n	800573e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005764:	883b      	ldrh	r3, [r7, #0]
 8005766:	0418      	lsls	r0, r3, #16
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6819      	ldr	r1, [r3, #0]
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	3b01      	subs	r3, #1
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	4302      	orrs	r2, r0
 8005774:	3340      	adds	r3, #64	; 0x40
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e262      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d075      	beq.n	80058ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057e2:	4ba3      	ldr	r3, [pc, #652]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d00c      	beq.n	8005808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ee:	4ba0      	ldr	r3, [pc, #640]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d112      	bne.n	8005820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057fa:	4b9d      	ldr	r3, [pc, #628]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005806:	d10b      	bne.n	8005820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	4b99      	ldr	r3, [pc, #612]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d05b      	beq.n	80058cc <HAL_RCC_OscConfig+0x108>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d157      	bne.n	80058cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e23d      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005828:	d106      	bne.n	8005838 <HAL_RCC_OscConfig+0x74>
 800582a:	4b91      	ldr	r3, [pc, #580]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a90      	ldr	r2, [pc, #576]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e01d      	b.n	8005874 <HAL_RCC_OscConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005840:	d10c      	bne.n	800585c <HAL_RCC_OscConfig+0x98>
 8005842:	4b8b      	ldr	r3, [pc, #556]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a8a      	ldr	r2, [pc, #552]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b88      	ldr	r3, [pc, #544]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a87      	ldr	r2, [pc, #540]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e00b      	b.n	8005874 <HAL_RCC_OscConfig+0xb0>
 800585c:	4b84      	ldr	r3, [pc, #528]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a83      	ldr	r2, [pc, #524]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4b81      	ldr	r3, [pc, #516]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a80      	ldr	r2, [pc, #512]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800586e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d013      	beq.n	80058a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587c:	f7fb fc60 	bl	8001140 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005884:	f7fb fc5c 	bl	8001140 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	; 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e202      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005896:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0xc0>
 80058a2:	e014      	b.n	80058ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a4:	f7fb fc4c 	bl	8001140 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fb fc48 	bl	8001140 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e1ee      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058be:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0xe8>
 80058ca:	e000      	b.n	80058ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d063      	beq.n	80059a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058da:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058e6:	4b62      	ldr	r3, [pc, #392]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d11c      	bne.n	800592c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d116      	bne.n	800592c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fe:	4b5c      	ldr	r3, [pc, #368]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_RCC_OscConfig+0x152>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d001      	beq.n	8005916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e1c2      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005916:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4952      	ldr	r1, [pc, #328]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005926:	4313      	orrs	r3, r2
 8005928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592a:	e03a      	b.n	80059a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d020      	beq.n	8005976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005934:	4b4f      	ldr	r3, [pc, #316]	; (8005a74 <HAL_RCC_OscConfig+0x2b0>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593a:	f7fb fc01 	bl	8001140 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005942:	f7fb fbfd 	bl	8001140 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e1a3      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005954:	4b46      	ldr	r3, [pc, #280]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4940      	ldr	r1, [pc, #256]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	4313      	orrs	r3, r2
 8005972:	600b      	str	r3, [r1, #0]
 8005974:	e015      	b.n	80059a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005976:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <HAL_RCC_OscConfig+0x2b0>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fb fbe0 	bl	8001140 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005984:	f7fb fbdc 	bl	8001140 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e182      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d030      	beq.n	8005a10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059b6:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <HAL_RCC_OscConfig+0x2b4>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059bc:	f7fb fbc0 	bl	8001140 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c4:	f7fb fbbc 	bl	8001140 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e162      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x200>
 80059e2:	e015      	b.n	8005a10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059e4:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <HAL_RCC_OscConfig+0x2b4>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ea:	f7fb fba9 	bl	8001140 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f2:	f7fb fba5 	bl	8001140 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e14b      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a04:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f0      	bne.n	80059f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 809e 	beq.w	8005b5a <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10f      	bne.n	8005a4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	4a0e      	ldr	r2, [pc, #56]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_OscConfig+0x2b8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d121      	bne.n	8005a9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_RCC_OscConfig+0x2b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <HAL_RCC_OscConfig+0x2b8>)
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a66:	f7fb fb6b 	bl	8001140 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6c:	e011      	b.n	8005a92 <HAL_RCC_OscConfig+0x2ce>
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800
 8005a74:	42470000 	.word	0x42470000
 8005a78:	42470e80 	.word	0x42470e80
 8005a7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a80:	f7fb fb5e 	bl	8001140 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e104      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a92:	4b84      	ldr	r3, [pc, #528]	; (8005ca4 <HAL_RCC_OscConfig+0x4e0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x2f0>
 8005aa6:	4b80      	ldr	r3, [pc, #512]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a7f      	ldr	r2, [pc, #508]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab2:	e01c      	b.n	8005aee <HAL_RCC_OscConfig+0x32a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b05      	cmp	r3, #5
 8005aba:	d10c      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x312>
 8005abc:	4b7a      	ldr	r3, [pc, #488]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	4a79      	ldr	r2, [pc, #484]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005ac2:	f043 0304 	orr.w	r3, r3, #4
 8005ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac8:	4b77      	ldr	r3, [pc, #476]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	4a76      	ldr	r2, [pc, #472]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad4:	e00b      	b.n	8005aee <HAL_RCC_OscConfig+0x32a>
 8005ad6:	4b74      	ldr	r3, [pc, #464]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ada:	4a73      	ldr	r2, [pc, #460]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae2:	4b71      	ldr	r3, [pc, #452]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4a70      	ldr	r2, [pc, #448]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005ae8:	f023 0304 	bic.w	r3, r3, #4
 8005aec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af6:	f7fb fb23 	bl	8001140 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afc:	e009      	b.n	8005b12 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fb fb1f 	bl	8001140 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e0c4      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b12:	4b65      	ldr	r3, [pc, #404]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ef      	beq.n	8005afe <HAL_RCC_OscConfig+0x33a>
 8005b1e:	e013      	b.n	8005b48 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b20:	f7fb fb0e 	bl	8001140 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b26:	e009      	b.n	8005b3c <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b28:	f7fb fb0a 	bl	8001140 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0af      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3c:	4b5a      	ldr	r3, [pc, #360]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ef      	bne.n	8005b28 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d105      	bne.n	8005b5a <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b4e:	4b56      	ldr	r3, [pc, #344]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	4a55      	ldr	r2, [pc, #340]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 809b 	beq.w	8005c9a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b64:	4b50      	ldr	r3, [pc, #320]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 030c 	and.w	r3, r3, #12
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d05c      	beq.n	8005c2a <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d141      	bne.n	8005bfc <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b78:	4b4c      	ldr	r3, [pc, #304]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7e:	f7fb fadf 	bl	8001140 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b86:	f7fb fadb 	bl	8001140 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e081      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	019b      	lsls	r3, r3, #6
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	061b      	lsls	r3, r3, #24
 8005bc8:	4937      	ldr	r1, [pc, #220]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd4:	f7fb fab4 	bl	8001140 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bdc:	f7fb fab0 	bl	8001140 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e056      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x418>
 8005bfa:	e04e      	b.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfc:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fb fa9d 	bl	8001140 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0a:	f7fb fa99 	bl	8001140 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e03f      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f0      	bne.n	8005c0a <HAL_RCC_OscConfig+0x446>
 8005c28:	e037      	b.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e032      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c36:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d028      	beq.n	8005c96 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d121      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d11a      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c66:	4013      	ands	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d111      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40007000 	.word	0x40007000
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	42470060 	.word	0x42470060

08005cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0cc      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b68      	ldr	r3, [pc, #416]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d90c      	bls.n	8005cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b65      	ldr	r3, [pc, #404]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b63      	ldr	r3, [pc, #396]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0b8      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d020      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d04:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4a58      	ldr	r2, [pc, #352]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d1c:	4b53      	ldr	r3, [pc, #332]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4a52      	ldr	r2, [pc, #328]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d28:	4b50      	ldr	r3, [pc, #320]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	494d      	ldr	r1, [pc, #308]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d044      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4e:	4b47      	ldr	r3, [pc, #284]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d119      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e07f      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d003      	beq.n	8005d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6e:	4b3f      	ldr	r3, [pc, #252]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e06f      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7e:	4b3b      	ldr	r3, [pc, #236]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e067      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d8e:	4b37      	ldr	r3, [pc, #220]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f023 0203 	bic.w	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4934      	ldr	r1, [pc, #208]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005da0:	f7fb f9ce 	bl	8001140 <HAL_GetTick>
 8005da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da8:	f7fb f9ca 	bl	8001140 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e04f      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbe:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 020c 	and.w	r2, r3, #12
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d1eb      	bne.n	8005da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd0:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d20c      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dde:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e032      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4916      	ldr	r1, [pc, #88]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	490e      	ldr	r1, [pc, #56]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e36:	f000 f82d 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	490a      	ldr	r1, [pc, #40]	; (8005e70 <HAL_RCC_ClockConfig+0x1c0>)
 8005e48:	5ccb      	ldrb	r3, [r1, r3]
 8005e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fb f92e 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40023c00 	.word	0x40023c00
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	0801169c 	.word	0x0801169c
 8005e74:	20000118 	.word	0x20000118
 8005e78:	20000000 	.word	0x20000000

08005e7c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <HAL_RCC_EnableCSS+0x14>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
}
 8005e86:	bf00      	nop
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	4247004c 	.word	0x4247004c

08005e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e94:	b5b0      	push	{r4, r5, r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	6079      	str	r1, [r7, #4]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	60f9      	str	r1, [r7, #12]
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eaa:	4952      	ldr	r1, [pc, #328]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005eac:	6889      	ldr	r1, [r1, #8]
 8005eae:	f001 010c 	and.w	r1, r1, #12
 8005eb2:	2908      	cmp	r1, #8
 8005eb4:	d00d      	beq.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x3e>
 8005eb6:	2908      	cmp	r1, #8
 8005eb8:	f200 8094 	bhi.w	8005fe4 <HAL_RCC_GetSysClockFreq+0x150>
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x32>
 8005ec0:	2904      	cmp	r1, #4
 8005ec2:	d003      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x38>
 8005ec4:	e08e      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ec6:	4b4c      	ldr	r3, [pc, #304]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005ec8:	60bb      	str	r3, [r7, #8]
       break;
 8005eca:	e08e      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ecc:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x168>)
 8005ece:	60bb      	str	r3, [r7, #8]
      break;
 8005ed0:	e08b      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed2:	4948      	ldr	r1, [pc, #288]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ed4:	6849      	ldr	r1, [r1, #4]
 8005ed6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005eda:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005edc:	4945      	ldr	r1, [pc, #276]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ede:	6849      	ldr	r1, [r1, #4]
 8005ee0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	d024      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee8:	4942      	ldr	r1, [pc, #264]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005eea:	6849      	ldr	r1, [r1, #4]
 8005eec:	0989      	lsrs	r1, r1, #6
 8005eee:	4608      	mov	r0, r1
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ef8:	f04f 0500 	mov.w	r5, #0
 8005efc:	ea00 0204 	and.w	r2, r0, r4
 8005f00:	ea01 0305 	and.w	r3, r1, r5
 8005f04:	493d      	ldr	r1, [pc, #244]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x168>)
 8005f06:	fb01 f003 	mul.w	r0, r1, r3
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	fb01 f102 	mul.w	r1, r1, r2
 8005f10:	1844      	adds	r4, r0, r1
 8005f12:	493a      	ldr	r1, [pc, #232]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x168>)
 8005f14:	fba2 0101 	umull	r0, r1, r2, r1
 8005f18:	1863      	adds	r3, r4, r1
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	f7fa fe98 	bl	8000c58 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e04a      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f32:	4b30      	ldr	r3, [pc, #192]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f42:	f04f 0100 	mov.w	r1, #0
 8005f46:	ea02 0400 	and.w	r4, r2, r0
 8005f4a:	ea03 0501 	and.w	r5, r3, r1
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	014b      	lsls	r3, r1, #5
 8005f5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f60:	0142      	lsls	r2, r0, #5
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	1b00      	subs	r0, r0, r4
 8005f68:	eb61 0105 	sbc.w	r1, r1, r5
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	018b      	lsls	r3, r1, #6
 8005f76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f7a:	0182      	lsls	r2, r0, #6
 8005f7c:	1a12      	subs	r2, r2, r0
 8005f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	00d9      	lsls	r1, r3, #3
 8005f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f90:	00d0      	lsls	r0, r2, #3
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	1912      	adds	r2, r2, r4
 8005f98:	eb45 0303 	adc.w	r3, r5, r3
 8005f9c:	f04f 0000 	mov.w	r0, #0
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	0299      	lsls	r1, r3, #10
 8005fa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005faa:	0290      	lsls	r0, r2, #10
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	f7fa fe4c 	bl	8000c58 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	60bb      	str	r3, [r7, #8]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe4:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fe6:	60bb      	str	r3, [r7, #8]
      break;
 8005fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fea:	68bb      	ldr	r3, [r7, #8]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	00f42400 	.word	0x00f42400
 8005ffc:	016e3600 	.word	0x016e3600

08006000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <HAL_RCC_GetHCLKFreq+0x14>)
 8006006:	681b      	ldr	r3, [r3, #0]
}
 8006008:	4618      	mov	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000118 	.word	0x20000118

08006018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800601c:	f7ff fff0 	bl	8006000 <HAL_RCC_GetHCLKFreq>
 8006020:	4602      	mov	r2, r0
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0a9b      	lsrs	r3, r3, #10
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <HAL_RCC_GetPCLK1Freq+0x24>)
 800602e:	5ccb      	ldrb	r3, [r1, r3]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800
 800603c:	080116ac 	.word	0x080116ac

08006040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006044:	f7ff ffdc 	bl	8006000 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0b5b      	lsrs	r3, r3, #13
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4903      	ldr	r1, [pc, #12]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40023800 	.word	0x40023800
 8006064:	080116ac 	.word	0x080116ac

08006068 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCC_NMI_IRQHandler+0x20>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d104      	bne.n	8006082 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006078:	f000 f80a 	bl	8006090 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800607c:	4b03      	ldr	r3, [pc, #12]	; (800608c <HAL_RCC_NMI_IRQHandler+0x24>)
 800607e:	2280      	movs	r2, #128	; 0x80
 8006080:	701a      	strb	r2, [r3, #0]
  }
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	4002380e 	.word	0x4002380e

08006090 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d038      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060c8:	4b68      	ldr	r3, [pc, #416]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060ce:	f7fb f837 	bl	8001140 <HAL_GetTick>
 80060d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060d4:	e008      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060d6:	f7fb f833 	bl	8001140 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e0bc      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060e8:	4b61      	ldr	r3, [pc, #388]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f0      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	019b      	lsls	r3, r3, #6
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	071b      	lsls	r3, r3, #28
 8006106:	495a      	ldr	r1, [pc, #360]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800610e:	4b57      	ldr	r3, [pc, #348]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006114:	f7fb f814 	bl	8001140 <HAL_GetTick>
 8006118:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800611a:	e008      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800611c:	f7fb f810 	bl	8001140 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e099      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800612e:	4b50      	ldr	r3, [pc, #320]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f0      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 8082 	beq.w	800624c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	4b48      	ldr	r3, [pc, #288]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	4a47      	ldr	r2, [pc, #284]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006156:	6413      	str	r3, [r2, #64]	; 0x40
 8006158:	4b45      	ldr	r3, [pc, #276]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006164:	4b43      	ldr	r3, [pc, #268]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a42      	ldr	r2, [pc, #264]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800616a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006170:	f7fa ffe6 	bl	8001140 <HAL_GetTick>
 8006174:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006178:	f7fa ffe2 	bl	8001140 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e06b      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800618a:	4b3a      	ldr	r3, [pc, #232]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006196:	4b36      	ldr	r3, [pc, #216]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d02e      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d027      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061b4:	4b2e      	ldr	r3, [pc, #184]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061bc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061c4:	4b2c      	ldr	r3, [pc, #176]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061ca:	4a29      	ldr	r2, [pc, #164]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d113      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061dc:	f7fa ffb0 	bl	8001140 <HAL_GetTick>
 80061e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e2:	e009      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061e4:	f7fa ffac 	bl	8001140 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80061f2:	d901      	bls.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e034      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f8:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ef      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006210:	d10d      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006212:	4b17      	ldr	r3, [pc, #92]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006226:	4912      	ldr	r1, [pc, #72]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006228:	4313      	orrs	r3, r2
 800622a:	608b      	str	r3, [r1, #8]
 800622c:	e005      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006234:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006238:	6093      	str	r3, [r2, #8]
 800623a:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006246:	490a      	ldr	r1, [pc, #40]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006248:	4313      	orrs	r3, r2
 800624a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7d1a      	ldrb	r2, [r3, #20]
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800625e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	42470068 	.word	0x42470068
 8006270:	40023800 	.word	0x40023800
 8006274:	40007000 	.word	0x40007000
 8006278:	42470e40 	.word	0x42470e40
 800627c:	424711e0 	.word	0x424711e0

08006280 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e083      	b.n	800639a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7f5b      	ldrb	r3, [r3, #29]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f007 fb72 	bl	800d98c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	22ca      	movs	r2, #202	; 0xca
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2253      	movs	r2, #83	; 0x53
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f9fb 	bl	80066ba <RTC_EnterInitMode>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	22ff      	movs	r2, #255	; 0xff
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2204      	movs	r2, #4
 80062d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e05e      	b.n	800639a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6899      	ldr	r1, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68d2      	ldr	r2, [r2, #12]
 8006316:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6919      	ldr	r1, [r3, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	041a      	lsls	r2, r3, #16
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800633a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10e      	bne.n	8006368 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f98d 	bl	800666a <HAL_RTC_WaitForSynchro>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	22ff      	movs	r2, #255	; 0xff
 800635c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2204      	movs	r2, #4
 8006362:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e018      	b.n	800639a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	22ff      	movs	r2, #255	; 0xff
 8006390:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006398:	2300      	movs	r3, #0
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063a2:	b590      	push	{r4, r7, lr}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	7f1b      	ldrb	r3, [r3, #28]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_RTC_SetTime+0x1c>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e0aa      	b.n	8006514 <HAL_RTC_SetTime+0x172>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2202      	movs	r2, #2
 80063c8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d126      	bne.n	800641e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 f992 	bl	8006712 <RTC_ByteToBcd2>
 80063ee:	4603      	mov	r3, r0
 80063f0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f98b 	bl	8006712 <RTC_ByteToBcd2>
 80063fc:	4603      	mov	r3, r0
 80063fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006400:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	789b      	ldrb	r3, [r3, #2]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f983 	bl	8006712 <RTC_ByteToBcd2>
 800640c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800640e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	78db      	ldrb	r3, [r3, #3]
 8006416:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e018      	b.n	8006450 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800643e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006444:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	78db      	ldrb	r3, [r3, #3]
 800644a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	22ca      	movs	r2, #202	; 0xca
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2253      	movs	r2, #83	; 0x53
 800645e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f92a 	bl	80066ba <RTC_EnterInitMode>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	22ff      	movs	r2, #255	; 0xff
 8006472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2204      	movs	r2, #4
 8006478:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e047      	b.n	8006514 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800648e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006492:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064a2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6899      	ldr	r1, [r3, #8]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d111      	bne.n	80064fe <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f8c5 	bl	800666a <HAL_RTC_WaitForSynchro>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00b      	beq.n	80064fe <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	22ff      	movs	r2, #255	; 0xff
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2204      	movs	r2, #4
 80064f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00a      	b.n	8006514 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	22ff      	movs	r2, #255	; 0xff
 8006504:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006512:	2300      	movs	r3, #0
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	bd90      	pop	{r4, r7, pc}

0800651c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	7f1b      	ldrb	r3, [r3, #28]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_RTC_SetDate+0x1c>
 8006534:	2302      	movs	r3, #2
 8006536:	e094      	b.n	8006662 <HAL_RTC_SetDate+0x146>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2202      	movs	r2, #2
 8006542:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10e      	bne.n	8006568 <HAL_RTC_SetDate+0x4c>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	f023 0310 	bic.w	r3, r3, #16
 800655e:	b2db      	uxtb	r3, r3
 8006560:	330a      	adds	r3, #10
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d11c      	bne.n	80065a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	78db      	ldrb	r3, [r3, #3]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f8cd 	bl	8006712 <RTC_ByteToBcd2>
 8006578:	4603      	mov	r3, r0
 800657a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	4618      	mov	r0, r3
 8006582:	f000 f8c6 	bl	8006712 <RTC_ByteToBcd2>
 8006586:	4603      	mov	r3, r0
 8006588:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800658a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	789b      	ldrb	r3, [r3, #2]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 f8be 	bl	8006712 <RTC_ByteToBcd2>
 8006596:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006598:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e00e      	b.n	80065c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	78db      	ldrb	r3, [r3, #3]
 80065ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80065b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80065ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	22ca      	movs	r2, #202	; 0xca
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2253      	movs	r2, #83	; 0x53
 80065d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f86f 	bl	80066ba <RTC_EnterInitMode>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	22ff      	movs	r2, #255	; 0xff
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2204      	movs	r2, #4
 80065ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e033      	b.n	8006662 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006604:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006608:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006618:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d111      	bne.n	800664c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f81e 	bl	800666a <HAL_RTC_WaitForSynchro>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2204      	movs	r2, #4
 8006640:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e00a      	b.n	8006662 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	22ff      	movs	r2, #255	; 0xff
 8006652:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006660:	2300      	movs	r3, #0
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}

0800666a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006684:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006686:	f7fa fd5b 	bl	8001140 <HAL_GetTick>
 800668a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800668c:	e009      	b.n	80066a2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800668e:	f7fa fd57 	bl	8001140 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800669c:	d901      	bls.n	80066a2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e007      	b.n	80066b2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ee      	beq.n	800668e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d119      	bne.n	8006708 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f04f 32ff 	mov.w	r2, #4294967295
 80066dc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066de:	f7fa fd2f 	bl	8001140 <HAL_GetTick>
 80066e2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066e4:	e009      	b.n	80066fa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80066e6:	f7fa fd2b 	bl	8001140 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f4:	d901      	bls.n	80066fa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e007      	b.n	800670a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0ee      	beq.n	80066e6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	4603      	mov	r3, r0
 800671a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006720:	e005      	b.n	800672e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	3b0a      	subs	r3, #10
 800672c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	2b09      	cmp	r3, #9
 8006732:	d8f6      	bhi.n	8006722 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	b2da      	uxtb	r2, r3
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	4313      	orrs	r3, r2
 8006740:	b2db      	uxtb	r3, r3
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e022      	b.n	80067a6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f007 f936 	bl	800d9e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2203      	movs	r2, #3
 800677c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f815 	bl	80067b0 <HAL_SD_InitCard>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e00a      	b.n	80067a6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067b0:	b5b0      	push	{r4, r5, r7, lr}
 80067b2:	b08e      	sub	sp, #56	; 0x38
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80067cc:	2376      	movs	r3, #118	; 0x76
 80067ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681d      	ldr	r5, [r3, #0]
 80067d4:	466c      	mov	r4, sp
 80067d6:	f107 0314 	add.w	r3, r7, #20
 80067da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067e8:	4628      	mov	r0, r5
 80067ea:	f001 fe07 	bl	80083fc <SDIO_Init>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80067f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e04c      	b.n	800689a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <HAL_SD_InitCard+0xf4>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fe2e 	bl	800846c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006810:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <HAL_SD_InitCard+0xf4>)
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fb52 	bl	8006ec0 <SD_PowerON>
 800681c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e02e      	b.n	800689a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa73 	bl	8006d28 <SD_InitCard>
 8006842:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e01b      	b.n	800689a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800686a:	4618      	mov	r0, r3
 800686c:	f001 fe91 	bl	8008592 <SDMMC_CmdBlockLength>
 8006870:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00f      	beq.n	8006898 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <HAL_SD_InitCard+0xf8>)
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3728      	adds	r7, #40	; 0x28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bdb0      	pop	{r4, r5, r7, pc}
 80068a2:	bf00      	nop
 80068a4:	422580a0 	.word	0x422580a0
 80068a8:	004005ff 	.word	0x004005ff

080068ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ba:	0f9b      	lsrs	r3, r3, #30
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c6:	0e9b      	lsrs	r3, r3, #26
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d8:	0e1b      	lsrs	r3, r3, #24
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006902:	b2da      	uxtb	r2, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690c:	0d1b      	lsrs	r3, r3, #20
 800690e:	b29a      	uxth	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006918:	0c1b      	lsrs	r3, r3, #16
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	b2da      	uxtb	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692a:	0bdb      	lsrs	r3, r3, #15
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693c:	0b9b      	lsrs	r3, r3, #14
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	b2da      	uxtb	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694e:	0b5b      	lsrs	r3, r3, #13
 8006950:	b2db      	uxtb	r3, r3
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	b2da      	uxtb	r2, r3
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006960:	0b1b      	lsrs	r3, r3, #12
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2200      	movs	r2, #0
 8006972:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006978:	2b00      	cmp	r3, #0
 800697a:	d163      	bne.n	8006a44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006980:	009a      	lsls	r2, r3, #2
 8006982:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006986:	4013      	ands	r3, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800698c:	0f92      	lsrs	r2, r2, #30
 800698e:	431a      	orrs	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006998:	0edb      	lsrs	r3, r3, #27
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069aa:	0e1b      	lsrs	r3, r3, #24
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	0d5b      	lsrs	r3, r3, #21
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ce:	0c9b      	lsrs	r3, r3, #18
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e0:	0bdb      	lsrs	r3, r3, #15
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	7e1b      	ldrb	r3, [r3, #24]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	3302      	adds	r3, #2
 8006a04:	2201      	movs	r2, #1
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a0e:	fb02 f203 	mul.w	r2, r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	7a1b      	ldrb	r3, [r3, #8]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	2201      	movs	r2, #1
 8006a22:	409a      	lsls	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a30:	0a52      	lsrs	r2, r2, #9
 8006a32:	fb02 f203 	mul.w	r2, r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a40:	661a      	str	r2, [r3, #96]	; 0x60
 8006a42:	e031      	b.n	8006aa8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d11d      	bne.n	8006a88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a50:	041b      	lsls	r3, r3, #16
 8006a52:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	3301      	adds	r3, #1
 8006a68:	029a      	lsls	r2, r3, #10
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a7c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	661a      	str	r2, [r3, #96]	; 0x60
 8006a86:	e00f      	b.n	8006aa8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a58      	ldr	r2, [pc, #352]	; (8006bf0 <HAL_SD_GetCardCSD+0x344>)
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e09d      	b.n	8006be4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aac:	0b9b      	lsrs	r3, r3, #14
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006abe:	09db      	lsrs	r3, r3, #7
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	0fdb      	lsrs	r3, r3, #31
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	0f5b      	lsrs	r3, r3, #29
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	0e9b      	lsrs	r3, r3, #26
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	0d9b      	lsrs	r3, r3, #22
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	0d5b      	lsrs	r3, r3, #21
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	0bdb      	lsrs	r3, r3, #15
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	0b9b      	lsrs	r3, r3, #14
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	0b5b      	lsrs	r3, r3, #13
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	0b1b      	lsrs	r3, r3, #12
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	0a9b      	lsrs	r3, r3, #10
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb6:	0a1b      	lsrs	r3, r3, #8
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	004005ff 	.word	0x004005ff

08006bf4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b08e      	sub	sp, #56	; 0x38
 8006bf8:	af04      	add	r7, sp, #16
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2203      	movs	r2, #3
 8006c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d02e      	beq.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1a:	d106      	bne.n	8006c2a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
 8006c28:	e029      	b.n	8006c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d10a      	bne.n	8006c48 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9d2 	bl	8006fdc <SD_WideBus_Enable>
 8006c38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
 8006c46:	e01a      	b.n	8006c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fa0f 	bl	8007072 <SD_WideBus_Disable>
 8006c54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
 8006c62:	e00c      	b.n	8006c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c70:	e005      	b.n	8006c7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00b      	beq.n	8006c9e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a26      	ldr	r2, [pc, #152]	; (8006d24 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c9c:	e01f      	b.n	8006cde <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681d      	ldr	r5, [r3, #0]
 8006cc4:	466c      	mov	r4, sp
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f001 fb8f 	bl	80083fc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fc53 	bl	8008592 <SDMMC_CmdBlockLength>
 8006cec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00c      	beq.n	8006d0e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3728      	adds	r7, #40	; 0x28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bdb0      	pop	{r4, r5, r7, pc}
 8006d22:	bf00      	nop
 8006d24:	004005ff 	.word	0x004005ff

08006d28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b094      	sub	sp, #80	; 0x50
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006d30:	2301      	movs	r3, #1
 8006d32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 fba6 	bl	800848a <SDIO_GetPowerState>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d48:	e0b6      	b.n	8006eb8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d02f      	beq.n	8006db2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fd25 	bl	80087a6 <SDMMC_CmdSendCID>
 8006d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <SD_InitCard+0x40>
    {
      return errorstate;
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	e0a7      	b.n	8006eb8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fbd0 	bl	8008514 <SDIO_GetResponse>
 8006d74:	4602      	mov	r2, r0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2104      	movs	r1, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f001 fbc7 	bl	8008514 <SDIO_GetResponse>
 8006d86:	4602      	mov	r2, r0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2108      	movs	r1, #8
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 fbbe 	bl	8008514 <SDIO_GetResponse>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	210c      	movs	r1, #12
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 fbb5 	bl	8008514 <SDIO_GetResponse>
 8006daa:	4602      	mov	r2, r0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d00d      	beq.n	8006dd6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f107 020e 	add.w	r2, r7, #14
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fd2b 	bl	8008820 <SDMMC_CmdSetRelAdd>
 8006dca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <SD_InitCard+0xae>
    {
      return errorstate;
 8006dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd4:	e070      	b.n	8006eb8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d036      	beq.n	8006e4c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006dde:	89fb      	ldrh	r3, [r7, #14]
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dee:	041b      	lsls	r3, r3, #16
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f001 fcf5 	bl	80087e2 <SDMMC_CmdSendCSD>
 8006df8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	e059      	b.n	8006eb8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 fb82 	bl	8008514 <SDIO_GetResponse>
 8006e10:	4602      	mov	r2, r0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2104      	movs	r1, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 fb79 	bl	8008514 <SDIO_GetResponse>
 8006e22:	4602      	mov	r2, r0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 fb70 	bl	8008514 <SDIO_GetResponse>
 8006e34:	4602      	mov	r2, r0
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	210c      	movs	r1, #12
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 fb67 	bl	8008514 <SDIO_GetResponse>
 8006e46:	4602      	mov	r2, r0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2104      	movs	r1, #4
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 fb5e 	bl	8008514 <SDIO_GetResponse>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	0d1a      	lsrs	r2, r3, #20
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e60:	f107 0310 	add.w	r3, r7, #16
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fd20 	bl	80068ac <HAL_SD_GetCardCSD>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e76:	e01f      	b.n	8006eb8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6819      	ldr	r1, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	461a      	mov	r2, r3
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	f001 fba4 	bl	80085d6 <SDMMC_CmdSelDesel>
 8006e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <SD_InitCard+0x172>
  {
    return errorstate;
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	e00e      	b.n	8006eb8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	466c      	mov	r4, sp
 8006ea2:	f103 0210 	add.w	r2, r3, #16
 8006ea6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006eac:	3304      	adds	r3, #4
 8006eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	f001 faa3 	bl	80083fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3740      	adds	r7, #64	; 0x40
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bdb0      	pop	{r4, r5, r7, pc}

08006ec0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 fb9f 	bl	800861c <SDMMC_CmdGoIdleState>
 8006ede:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <SD_PowerON+0x2a>
  {
    return errorstate;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	e072      	b.n	8006fd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 fbb2 	bl	8008658 <SDMMC_CmdOperCond>
 8006ef4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00d      	beq.n	8006f18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 fb88 	bl	800861c <SDMMC_CmdGoIdleState>
 8006f0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	e05b      	b.n	8006fd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d137      	bne.n	8006f96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 fbb2 	bl	8008696 <SDMMC_CmdAppCommand>
 8006f32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d02d      	beq.n	8006f96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f3e:	e047      	b.n	8006fd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f001 fba5 	bl	8008696 <SDMMC_CmdAppCommand>
 8006f4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <SD_PowerON+0x98>
    {
      return errorstate;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	e03b      	b.n	8006fd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	491e      	ldr	r1, [pc, #120]	; (8006fd8 <SD_PowerON+0x118>)
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fbbb 	bl	80086da <SDMMC_CmdAppOperCommand>
 8006f64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f70:	e02e      	b.n	8006fd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 facb 	bl	8008514 <SDIO_GetResponse>
 8006f7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	0fdb      	lsrs	r3, r3, #31
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <SD_PowerON+0xcc>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <SD_PowerON+0xce>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]

    count++;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d802      	bhi.n	8006fa6 <SD_PowerON+0xe6>
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0cc      	beq.n	8006f40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d902      	bls.n	8006fb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fb4:	e00c      	b.n	8006fd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
 8006fc6:	e002      	b.n	8006fce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	c1100000 	.word	0xc1100000

08006fdc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 fa8e 	bl	8008514 <SDIO_GetResponse>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007002:	d102      	bne.n	800700a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007008:	e02f      	b.n	800706a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800700a:	f107 030c 	add.w	r3, r7, #12
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f879 	bl	8007108 <SD_FindSCR>
 8007016:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	e023      	b.n	800706a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01c      	beq.n	8007066 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f001 fb2c 	bl	8008696 <SDMMC_CmdAppCommand>
 800703e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	e00f      	b.n	800706a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2102      	movs	r1, #2
 8007050:	4618      	mov	r0, r3
 8007052:	f001 fb65 	bl	8008720 <SDMMC_CmdBusWidth>
 8007056:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	e003      	b.n	800706a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007062:	2300      	movs	r3, #0
 8007064:	e001      	b.n	800706a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007066:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fa43 	bl	8008514 <SDIO_GetResponse>
 800708e:	4603      	mov	r3, r0
 8007090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007098:	d102      	bne.n	80070a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800709a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800709e:	e02f      	b.n	8007100 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f82e 	bl	8007108 <SD_FindSCR>
 80070ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	e023      	b.n	8007100 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01c      	beq.n	80070fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ca:	041b      	lsls	r3, r3, #16
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f001 fae1 	bl	8008696 <SDMMC_CmdAppCommand>
 80070d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	e00f      	b.n	8007100 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 fb1a 	bl	8008720 <SDMMC_CmdBusWidth>
 80070ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	e003      	b.n	8007100 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	e001      	b.n	8007100 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007108:	b590      	push	{r4, r7, lr}
 800710a:	b08f      	sub	sp, #60	; 0x3c
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007112:	f7fa f815 	bl	8001140 <HAL_GetTick>
 8007116:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800711c:	2300      	movs	r3, #0
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2108      	movs	r1, #8
 800712e:	4618      	mov	r0, r3
 8007130:	f001 fa2f 	bl	8008592 <SDMMC_CmdBlockLength>
 8007134:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <SD_FindSCR+0x38>
  {
    return errorstate;
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	e0b2      	b.n	80072a6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007148:	041b      	lsls	r3, r3, #16
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f001 faa2 	bl	8008696 <SDMMC_CmdAppCommand>
 8007152:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <SD_FindSCR+0x56>
  {
    return errorstate;
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	e0a3      	b.n	80072a6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295
 8007162:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007164:	2308      	movs	r3, #8
 8007166:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007168:	2330      	movs	r3, #48	; 0x30
 800716a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800716c:	2302      	movs	r3, #2
 800716e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007170:	2300      	movs	r3, #0
 8007172:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007174:	2301      	movs	r3, #1
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f107 0210 	add.w	r2, r7, #16
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f9d9 	bl	800853a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f001 fae9 	bl	8008764 <SDMMC_CmdSendSCR>
 8007192:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d02a      	beq.n	80071f0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	e083      	b.n	80072a6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00f      	beq.n	80071cc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6819      	ldr	r1, [r3, #0]
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	f107 0208 	add.w	r2, r7, #8
 80071b8:	18d4      	adds	r4, r2, r3
 80071ba:	4608      	mov	r0, r1
 80071bc:	f001 f949 	bl	8008452 <SDIO_ReadFIFO>
 80071c0:	4603      	mov	r3, r0
 80071c2:	6023      	str	r3, [r4, #0]
      index++;
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	3301      	adds	r3, #1
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	e006      	b.n	80071da <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d012      	beq.n	8007200 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071da:	f7f9 ffb1 	bl	8001140 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d102      	bne.n	80071f0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071ee:	e05a      	b.n	80072a6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0cf      	beq.n	800719e <SD_FindSCR+0x96>
 80071fe:	e000      	b.n	8007202 <SD_FindSCR+0xfa>
      break;
 8007200:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2208      	movs	r2, #8
 8007216:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007218:	2308      	movs	r3, #8
 800721a:	e044      	b.n	80072a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2202      	movs	r2, #2
 8007230:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	e037      	b.n	80072a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2220      	movs	r2, #32
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800724c:	2320      	movs	r3, #32
 800724e:	e02a      	b.n	80072a6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f240 523a 	movw	r2, #1338	; 0x53a
 8007258:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	061a      	lsls	r2, r3, #24
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007266:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007270:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	0e1b      	lsrs	r3, r3, #24
 8007276:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	601a      	str	r2, [r3, #0]
    scr++;
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	3304      	adds	r3, #4
 8007280:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	061a      	lsls	r2, r3, #24
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800728e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007298:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	373c      	adds	r7, #60	; 0x3c
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}

080072ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e041      	b.n	8007344 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d106      	bne.n	80072da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f006 fc0f 	bl	800daf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f000 fb47 	bl	8007980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d001      	beq.n	8007364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e044      	b.n	80073ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1e      	ldr	r2, [pc, #120]	; (80073fc <HAL_TIM_Base_Start_IT+0xb0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d018      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738e:	d013      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1a      	ldr	r2, [pc, #104]	; (8007400 <HAL_TIM_Base_Start_IT+0xb4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00e      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a19      	ldr	r2, [pc, #100]	; (8007404 <HAL_TIM_Base_Start_IT+0xb8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d009      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a17      	ldr	r2, [pc, #92]	; (8007408 <HAL_TIM_Base_Start_IT+0xbc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x6c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a16      	ldr	r2, [pc, #88]	; (800740c <HAL_TIM_Base_Start_IT+0xc0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d111      	bne.n	80073dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b06      	cmp	r3, #6
 80073c8:	d010      	beq.n	80073ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073da:	e007      	b.n	80073ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40010000 	.word	0x40010000
 8007400:	40000400 	.word	0x40000400
 8007404:	40000800 	.word	0x40000800
 8007408:	40000c00 	.word	0x40000c00
 800740c:	40014000 	.word	0x40014000

08007410 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e041      	b.n	80074a6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f839 	bl	80074ae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f000 fa96 	bl	8007980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d122      	bne.n	800751e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d11b      	bne.n	800751e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0202 	mvn.w	r2, #2
 80074ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fa1c 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 800750a:	e005      	b.n	8007518 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fa0e 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa1f 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b04      	cmp	r3, #4
 800752a:	d122      	bne.n	8007572 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b04      	cmp	r3, #4
 8007538:	d11b      	bne.n	8007572 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f06f 0204 	mvn.w	r2, #4
 8007542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f9f2 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 800755e:	e005      	b.n	800756c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f9e4 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9f5 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b08      	cmp	r3, #8
 800757e:	d122      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b08      	cmp	r3, #8
 800758c:	d11b      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f06f 0208 	mvn.w	r2, #8
 8007596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2204      	movs	r2, #4
 800759c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f9c8 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 80075b2:	e005      	b.n	80075c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f9ba 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9cb 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0310 	and.w	r3, r3, #16
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d122      	bne.n	800761a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d11b      	bne.n	800761a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f06f 0210 	mvn.w	r2, #16
 80075ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2208      	movs	r2, #8
 80075f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f99e 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 8007606:	e005      	b.n	8007614 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f990 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f9a1 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b01      	cmp	r3, #1
 8007626:	d10e      	bne.n	8007646 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b01      	cmp	r3, #1
 8007634:	d107      	bne.n	8007646 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f06f 0201 	mvn.w	r2, #1
 800763e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f96a 	bl	800791a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007650:	2b80      	cmp	r3, #128	; 0x80
 8007652:	d10e      	bne.n	8007672 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765e:	2b80      	cmp	r3, #128	; 0x80
 8007660:	d107      	bne.n	8007672 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800766a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fca5 	bl	8007fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d10e      	bne.n	800769e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d107      	bne.n	800769e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f966 	bl	800796a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d10e      	bne.n	80076ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d107      	bne.n	80076ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f06f 0220 	mvn.w	r2, #32
 80076c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fc6f 	bl	8007fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e048      	b.n	8007784 <HAL_TIM_OC_ConfigChannel+0xb0>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b0c      	cmp	r3, #12
 80076fe:	d839      	bhi.n	8007774 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	0800773d 	.word	0x0800773d
 800770c:	08007775 	.word	0x08007775
 8007710:	08007775 	.word	0x08007775
 8007714:	08007775 	.word	0x08007775
 8007718:	0800774b 	.word	0x0800774b
 800771c:	08007775 	.word	0x08007775
 8007720:	08007775 	.word	0x08007775
 8007724:	08007775 	.word	0x08007775
 8007728:	08007759 	.word	0x08007759
 800772c:	08007775 	.word	0x08007775
 8007730:	08007775 	.word	0x08007775
 8007734:	08007775 	.word	0x08007775
 8007738:	08007767 	.word	0x08007767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f99c 	bl	8007a80 <TIM_OC1_SetConfig>
      break;
 8007748:	e017      	b.n	800777a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 f9fb 	bl	8007b4c <TIM_OC2_SetConfig>
      break;
 8007756:	e010      	b.n	800777a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fa60 	bl	8007c24 <TIM_OC3_SetConfig>
      break;
 8007764:	e009      	b.n	800777a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fac3 	bl	8007cf8 <TIM_OC4_SetConfig>
      break;
 8007772:	e002      	b.n	800777a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]
      break;
 8007778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007782:	7dfb      	ldrb	r3, [r7, #23]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIM_ConfigClockSource+0x1c>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e0b4      	b.n	8007912 <HAL_TIM_ConfigClockSource+0x186>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e0:	d03e      	beq.n	8007860 <HAL_TIM_ConfigClockSource+0xd4>
 80077e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e6:	f200 8087 	bhi.w	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 80077ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ee:	f000 8086 	beq.w	80078fe <HAL_TIM_ConfigClockSource+0x172>
 80077f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f6:	d87f      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 80077f8:	2b70      	cmp	r3, #112	; 0x70
 80077fa:	d01a      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0xa6>
 80077fc:	2b70      	cmp	r3, #112	; 0x70
 80077fe:	d87b      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007800:	2b60      	cmp	r3, #96	; 0x60
 8007802:	d050      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007804:	2b60      	cmp	r3, #96	; 0x60
 8007806:	d877      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007808:	2b50      	cmp	r3, #80	; 0x50
 800780a:	d03c      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0xfa>
 800780c:	2b50      	cmp	r3, #80	; 0x50
 800780e:	d873      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d058      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007814:	2b40      	cmp	r3, #64	; 0x40
 8007816:	d86f      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007818:	2b30      	cmp	r3, #48	; 0x30
 800781a:	d064      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x15a>
 800781c:	2b30      	cmp	r3, #48	; 0x30
 800781e:	d86b      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007820:	2b20      	cmp	r3, #32
 8007822:	d060      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007824:	2b20      	cmp	r3, #32
 8007826:	d867      	bhi.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d05c      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x15a>
 800782c:	2b10      	cmp	r3, #16
 800782e:	d05a      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007830:	e062      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6899      	ldr	r1, [r3, #8]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f000 fb23 	bl	8007e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	609a      	str	r2, [r3, #8]
      break;
 800785e:	e04f      	b.n	8007900 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	6899      	ldr	r1, [r3, #8]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f000 fb0c 	bl	8007e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007882:	609a      	str	r2, [r3, #8]
      break;
 8007884:	e03c      	b.n	8007900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6859      	ldr	r1, [r3, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	461a      	mov	r2, r3
 8007894:	f000 fa80 	bl	8007d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2150      	movs	r1, #80	; 0x50
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fad9 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 80078a4:	e02c      	b.n	8007900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6859      	ldr	r1, [r3, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f000 fa9f 	bl	8007df6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2160      	movs	r1, #96	; 0x60
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fac9 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 80078c4:	e01c      	b.n	8007900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6859      	ldr	r1, [r3, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f000 fa60 	bl	8007d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2140      	movs	r1, #64	; 0x40
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fab9 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 80078e4:	e00c      	b.n	8007900 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4619      	mov	r1, r3
 80078f0:	4610      	mov	r0, r2
 80078f2:	f000 fab0 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 80078f6:	e003      	b.n	8007900 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	73fb      	strb	r3, [r7, #15]
      break;
 80078fc:	e000      	b.n	8007900 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a34      	ldr	r2, [pc, #208]	; (8007a64 <TIM_Base_SetConfig+0xe4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00f      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799e:	d00b      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a31      	ldr	r2, [pc, #196]	; (8007a68 <TIM_Base_SetConfig+0xe8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a30      	ldr	r2, [pc, #192]	; (8007a6c <TIM_Base_SetConfig+0xec>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a2f      	ldr	r2, [pc, #188]	; (8007a70 <TIM_Base_SetConfig+0xf0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d108      	bne.n	80079ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a25      	ldr	r2, [pc, #148]	; (8007a64 <TIM_Base_SetConfig+0xe4>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d01b      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d8:	d017      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a22      	ldr	r2, [pc, #136]	; (8007a68 <TIM_Base_SetConfig+0xe8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a21      	ldr	r2, [pc, #132]	; (8007a6c <TIM_Base_SetConfig+0xec>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00f      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <TIM_Base_SetConfig+0xf0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1f      	ldr	r2, [pc, #124]	; (8007a74 <TIM_Base_SetConfig+0xf4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d007      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <TIM_Base_SetConfig+0xf8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <TIM_Base_SetConfig+0xfc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d108      	bne.n	8007a1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <TIM_Base_SetConfig+0xe4>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d103      	bne.n	8007a50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	615a      	str	r2, [r3, #20]
}
 8007a56:	bf00      	nop
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40000400 	.word	0x40000400
 8007a6c:	40000800 	.word	0x40000800
 8007a70:	40000c00 	.word	0x40000c00
 8007a74:	40014000 	.word	0x40014000
 8007a78:	40014400 	.word	0x40014400
 8007a7c:	40014800 	.word	0x40014800

08007a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f023 0201 	bic.w	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0303 	bic.w	r3, r3, #3
 8007ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f023 0302 	bic.w	r3, r3, #2
 8007ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a1c      	ldr	r2, [pc, #112]	; (8007b48 <TIM_OC1_SetConfig+0xc8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d10c      	bne.n	8007af6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f023 0308 	bic.w	r3, r3, #8
 8007ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f023 0304 	bic.w	r3, r3, #4
 8007af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a13      	ldr	r2, [pc, #76]	; (8007b48 <TIM_OC1_SetConfig+0xc8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d111      	bne.n	8007b22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	621a      	str	r2, [r3, #32]
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40010000 	.word	0x40010000

08007b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f023 0210 	bic.w	r2, r3, #16
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 0320 	bic.w	r3, r3, #32
 8007b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <TIM_OC2_SetConfig+0xd4>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d10d      	bne.n	8007bc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <TIM_OC2_SetConfig+0xd4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d113      	bne.n	8007bf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	621a      	str	r2, [r3, #32]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40010000 	.word	0x40010000

08007c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <TIM_OC3_SetConfig+0xd0>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10d      	bne.n	8007c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a14      	ldr	r2, [pc, #80]	; (8007cf4 <TIM_OC3_SetConfig+0xd0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d113      	bne.n	8007cce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	621a      	str	r2, [r3, #32]
}
 8007ce8:	bf00      	nop
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40010000 	.word	0x40010000

08007cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	031b      	lsls	r3, r3, #12
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a10      	ldr	r2, [pc, #64]	; (8007d94 <TIM_OC4_SetConfig+0x9c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d109      	bne.n	8007d6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	019b      	lsls	r3, r3, #6
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000

08007d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f023 0201 	bic.w	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f023 030a 	bic.w	r3, r3, #10
 8007dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	621a      	str	r2, [r3, #32]
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b087      	sub	sp, #28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f023 0210 	bic.w	r2, r3, #16
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	031b      	lsls	r3, r3, #12
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f043 0307 	orr.w	r3, r3, #7
 8007e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	609a      	str	r2, [r3, #8]
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	021a      	lsls	r2, r3, #8
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	609a      	str	r2, [r3, #8]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e050      	b.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1c      	ldr	r2, [pc, #112]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d018      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f30:	d013      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00e      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a16      	ldr	r2, [pc, #88]	; (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d009      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d004      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a13      	ldr	r2, [pc, #76]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d10c      	bne.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40014000 	.word	0x40014000

08007fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e03f      	b.n	8008062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f005 fda4 	bl	800db44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2224      	movs	r2, #36	; 0x24
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f829 	bl	800806c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691a      	ldr	r2, [r3, #16]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	695a      	ldr	r2, [r3, #20]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	b09f      	sub	sp, #124	; 0x7c
 8008072:	af00      	add	r7, sp, #0
 8008074:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008082:	68d9      	ldr	r1, [r3, #12]
 8008084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	ea40 0301 	orr.w	r3, r0, r1
 800808c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800808e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	431a      	orrs	r2, r3
 8008098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	431a      	orrs	r2, r3
 800809e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80080a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080b0:	f021 010c 	bic.w	r1, r1, #12
 80080b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ba:	430b      	orrs	r3, r1
 80080bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ca:	6999      	ldr	r1, [r3, #24]
 80080cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	ea40 0301 	orr.w	r3, r0, r1
 80080d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4bc5      	ldr	r3, [pc, #788]	; (80083f0 <UART_SetConfig+0x384>)
 80080dc:	429a      	cmp	r2, r3
 80080de:	d004      	beq.n	80080ea <UART_SetConfig+0x7e>
 80080e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4bc3      	ldr	r3, [pc, #780]	; (80083f4 <UART_SetConfig+0x388>)
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d103      	bne.n	80080f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080ea:	f7fd ffa9 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 80080ee:	6778      	str	r0, [r7, #116]	; 0x74
 80080f0:	e002      	b.n	80080f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080f2:	f7fd ff91 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 80080f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008100:	f040 80b6 	bne.w	8008270 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008106:	461c      	mov	r4, r3
 8008108:	f04f 0500 	mov.w	r5, #0
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	1891      	adds	r1, r2, r2
 8008112:	6439      	str	r1, [r7, #64]	; 0x40
 8008114:	415b      	adcs	r3, r3
 8008116:	647b      	str	r3, [r7, #68]	; 0x44
 8008118:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800811c:	1912      	adds	r2, r2, r4
 800811e:	eb45 0303 	adc.w	r3, r5, r3
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f04f 0100 	mov.w	r1, #0
 800812a:	00d9      	lsls	r1, r3, #3
 800812c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008130:	00d0      	lsls	r0, r2, #3
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	1911      	adds	r1, r2, r4
 8008138:	6639      	str	r1, [r7, #96]	; 0x60
 800813a:	416b      	adcs	r3, r5
 800813c:	667b      	str	r3, [r7, #100]	; 0x64
 800813e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	461a      	mov	r2, r3
 8008144:	f04f 0300 	mov.w	r3, #0
 8008148:	1891      	adds	r1, r2, r2
 800814a:	63b9      	str	r1, [r7, #56]	; 0x38
 800814c:	415b      	adcs	r3, r3
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008154:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008158:	f7f8 fd7e 	bl	8000c58 <__aeabi_uldivmod>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4ba5      	ldr	r3, [pc, #660]	; (80083f8 <UART_SetConfig+0x38c>)
 8008162:	fba3 2302 	umull	r2, r3, r3, r2
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	011e      	lsls	r6, r3, #4
 800816a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800816c:	461c      	mov	r4, r3
 800816e:	f04f 0500 	mov.w	r5, #0
 8008172:	4622      	mov	r2, r4
 8008174:	462b      	mov	r3, r5
 8008176:	1891      	adds	r1, r2, r2
 8008178:	6339      	str	r1, [r7, #48]	; 0x30
 800817a:	415b      	adcs	r3, r3
 800817c:	637b      	str	r3, [r7, #52]	; 0x34
 800817e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008182:	1912      	adds	r2, r2, r4
 8008184:	eb45 0303 	adc.w	r3, r5, r3
 8008188:	f04f 0000 	mov.w	r0, #0
 800818c:	f04f 0100 	mov.w	r1, #0
 8008190:	00d9      	lsls	r1, r3, #3
 8008192:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008196:	00d0      	lsls	r0, r2, #3
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	1911      	adds	r1, r2, r4
 800819e:	65b9      	str	r1, [r7, #88]	; 0x58
 80081a0:	416b      	adcs	r3, r5
 80081a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	461a      	mov	r2, r3
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	1891      	adds	r1, r2, r2
 80081b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80081b2:	415b      	adcs	r3, r3
 80081b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081be:	f7f8 fd4b 	bl	8000c58 <__aeabi_uldivmod>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4b8c      	ldr	r3, [pc, #560]	; (80083f8 <UART_SetConfig+0x38c>)
 80081c8:	fba3 1302 	umull	r1, r3, r3, r2
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	2164      	movs	r1, #100	; 0x64
 80081d0:	fb01 f303 	mul.w	r3, r1, r3
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	3332      	adds	r3, #50	; 0x32
 80081da:	4a87      	ldr	r2, [pc, #540]	; (80083f8 <UART_SetConfig+0x38c>)
 80081dc:	fba2 2303 	umull	r2, r3, r2, r3
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081e8:	441e      	add	r6, r3
 80081ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ec:	4618      	mov	r0, r3
 80081ee:	f04f 0100 	mov.w	r1, #0
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	1894      	adds	r4, r2, r2
 80081f8:	623c      	str	r4, [r7, #32]
 80081fa:	415b      	adcs	r3, r3
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
 80081fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008202:	1812      	adds	r2, r2, r0
 8008204:	eb41 0303 	adc.w	r3, r1, r3
 8008208:	f04f 0400 	mov.w	r4, #0
 800820c:	f04f 0500 	mov.w	r5, #0
 8008210:	00dd      	lsls	r5, r3, #3
 8008212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008216:	00d4      	lsls	r4, r2, #3
 8008218:	4622      	mov	r2, r4
 800821a:	462b      	mov	r3, r5
 800821c:	1814      	adds	r4, r2, r0
 800821e:	653c      	str	r4, [r7, #80]	; 0x50
 8008220:	414b      	adcs	r3, r1
 8008222:	657b      	str	r3, [r7, #84]	; 0x54
 8008224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	461a      	mov	r2, r3
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	1891      	adds	r1, r2, r2
 8008230:	61b9      	str	r1, [r7, #24]
 8008232:	415b      	adcs	r3, r3
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800823a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800823e:	f7f8 fd0b 	bl	8000c58 <__aeabi_uldivmod>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4b6c      	ldr	r3, [pc, #432]	; (80083f8 <UART_SetConfig+0x38c>)
 8008248:	fba3 1302 	umull	r1, r3, r3, r2
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	2164      	movs	r1, #100	; 0x64
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	3332      	adds	r3, #50	; 0x32
 800825a:	4a67      	ldr	r2, [pc, #412]	; (80083f8 <UART_SetConfig+0x38c>)
 800825c:	fba2 2303 	umull	r2, r3, r2, r3
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	f003 0207 	and.w	r2, r3, #7
 8008266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4432      	add	r2, r6
 800826c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800826e:	e0b9      	b.n	80083e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008272:	461c      	mov	r4, r3
 8008274:	f04f 0500 	mov.w	r5, #0
 8008278:	4622      	mov	r2, r4
 800827a:	462b      	mov	r3, r5
 800827c:	1891      	adds	r1, r2, r2
 800827e:	6139      	str	r1, [r7, #16]
 8008280:	415b      	adcs	r3, r3
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008288:	1912      	adds	r2, r2, r4
 800828a:	eb45 0303 	adc.w	r3, r5, r3
 800828e:	f04f 0000 	mov.w	r0, #0
 8008292:	f04f 0100 	mov.w	r1, #0
 8008296:	00d9      	lsls	r1, r3, #3
 8008298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800829c:	00d0      	lsls	r0, r2, #3
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	eb12 0804 	adds.w	r8, r2, r4
 80082a6:	eb43 0905 	adc.w	r9, r3, r5
 80082aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	008b      	lsls	r3, r1, #2
 80082be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082c2:	0082      	lsls	r2, r0, #2
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f8 fcc6 	bl	8000c58 <__aeabi_uldivmod>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4b49      	ldr	r3, [pc, #292]	; (80083f8 <UART_SetConfig+0x38c>)
 80082d2:	fba3 2302 	umull	r2, r3, r3, r2
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	011e      	lsls	r6, r3, #4
 80082da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082dc:	4618      	mov	r0, r3
 80082de:	f04f 0100 	mov.w	r1, #0
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	1894      	adds	r4, r2, r2
 80082e8:	60bc      	str	r4, [r7, #8]
 80082ea:	415b      	adcs	r3, r3
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082f2:	1812      	adds	r2, r2, r0
 80082f4:	eb41 0303 	adc.w	r3, r1, r3
 80082f8:	f04f 0400 	mov.w	r4, #0
 80082fc:	f04f 0500 	mov.w	r5, #0
 8008300:	00dd      	lsls	r5, r3, #3
 8008302:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008306:	00d4      	lsls	r4, r2, #3
 8008308:	4622      	mov	r2, r4
 800830a:	462b      	mov	r3, r5
 800830c:	1814      	adds	r4, r2, r0
 800830e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008310:	414b      	adcs	r3, r1
 8008312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	f04f 0100 	mov.w	r1, #0
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	008b      	lsls	r3, r1, #2
 8008328:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800832c:	0082      	lsls	r2, r0, #2
 800832e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008332:	f7f8 fc91 	bl	8000c58 <__aeabi_uldivmod>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4b2f      	ldr	r3, [pc, #188]	; (80083f8 <UART_SetConfig+0x38c>)
 800833c:	fba3 1302 	umull	r1, r3, r3, r2
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	2164      	movs	r1, #100	; 0x64
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	3332      	adds	r3, #50	; 0x32
 800834e:	4a2a      	ldr	r2, [pc, #168]	; (80083f8 <UART_SetConfig+0x38c>)
 8008350:	fba2 2303 	umull	r2, r3, r2, r3
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800835a:	441e      	add	r6, r3
 800835c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800835e:	4618      	mov	r0, r3
 8008360:	f04f 0100 	mov.w	r1, #0
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	1894      	adds	r4, r2, r2
 800836a:	603c      	str	r4, [r7, #0]
 800836c:	415b      	adcs	r3, r3
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008374:	1812      	adds	r2, r2, r0
 8008376:	eb41 0303 	adc.w	r3, r1, r3
 800837a:	f04f 0400 	mov.w	r4, #0
 800837e:	f04f 0500 	mov.w	r5, #0
 8008382:	00dd      	lsls	r5, r3, #3
 8008384:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008388:	00d4      	lsls	r4, r2, #3
 800838a:	4622      	mov	r2, r4
 800838c:	462b      	mov	r3, r5
 800838e:	eb12 0a00 	adds.w	sl, r2, r0
 8008392:	eb43 0b01 	adc.w	fp, r3, r1
 8008396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	4618      	mov	r0, r3
 800839c:	f04f 0100 	mov.w	r1, #0
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	008b      	lsls	r3, r1, #2
 80083aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083ae:	0082      	lsls	r2, r0, #2
 80083b0:	4650      	mov	r0, sl
 80083b2:	4659      	mov	r1, fp
 80083b4:	f7f8 fc50 	bl	8000c58 <__aeabi_uldivmod>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <UART_SetConfig+0x38c>)
 80083be:	fba3 1302 	umull	r1, r3, r3, r2
 80083c2:	095b      	lsrs	r3, r3, #5
 80083c4:	2164      	movs	r1, #100	; 0x64
 80083c6:	fb01 f303 	mul.w	r3, r1, r3
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	3332      	adds	r3, #50	; 0x32
 80083d0:	4a09      	ldr	r2, [pc, #36]	; (80083f8 <UART_SetConfig+0x38c>)
 80083d2:	fba2 2303 	umull	r2, r3, r2, r3
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4432      	add	r2, r6
 80083e2:	609a      	str	r2, [r3, #8]
}
 80083e4:	bf00      	nop
 80083e6:	377c      	adds	r7, #124	; 0x7c
 80083e8:	46bd      	mov	sp, r7
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	bf00      	nop
 80083f0:	40011000 	.word	0x40011000
 80083f4:	40011400 	.word	0x40011400
 80083f8:	51eb851f 	.word	0x51eb851f

080083fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80083fc:	b084      	sub	sp, #16
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	f107 001c 	add.w	r0, r7, #28
 800840a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008412:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008414:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008416:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800841a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800841e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008422:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008426:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	4313      	orrs	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008436:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	b004      	add	sp, #16
 8008450:	4770      	bx	lr

08008452 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2203      	movs	r2, #3
 8008478:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800847a:	2002      	movs	r0, #2
 800847c:	f7f8 fe6c 	bl	8001158 <HAL_Delay>
  
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0303 	and.w	r3, r3, #3
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084c4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084ca:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80084d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084e0:	f023 030f 	bic.w	r3, r3, #15
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	b2db      	uxtb	r3, r3
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3314      	adds	r3, #20
 8008522:	461a      	mov	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	4413      	add	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
}  
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008560:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008566:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800856c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	4313      	orrs	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008584:	2300      	movs	r3, #0

}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b088      	sub	sp, #32
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085a0:	2310      	movs	r3, #16
 80085a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff ff74 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80085be:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c2:	2110      	movs	r1, #16
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f979 	bl	80088bc <SDMMC_GetCmdResp1>
 80085ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085cc:	69fb      	ldr	r3, [r7, #28]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3720      	adds	r7, #32
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b08a      	sub	sp, #40	; 0x28
 80085da:	af00      	add	r7, sp, #0
 80085dc:	60f8      	str	r0, [r7, #12]
 80085de:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80085e6:	2307      	movs	r3, #7
 80085e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085ea:	2340      	movs	r3, #64	; 0x40
 80085ec:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f6:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085f8:	f107 0310 	add.w	r3, r7, #16
 80085fc:	4619      	mov	r1, r3
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff ff51 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008604:	f241 3288 	movw	r2, #5000	; 0x1388
 8008608:	2107      	movs	r1, #7
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 f956 	bl	80088bc <SDMMC_GetCmdResp1>
 8008610:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008614:	4618      	mov	r0, r3
 8008616:	3728      	adds	r7, #40	; 0x28
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008638:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800863a:	f107 0308 	add.w	r3, r7, #8
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ff30 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f90c 	bl	8008864 <SDMMC_GetCmdError>
 800864c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800864e:	69fb      	ldr	r3, [r7, #28]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008660:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008666:	2308      	movs	r3, #8
 8008668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800866a:	2340      	movs	r3, #64	; 0x40
 800866c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008676:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008678:	f107 0308 	add.w	r3, r7, #8
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff ff11 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fb03 	bl	8008c90 <SDMMC_GetCmdResp7>
 800868a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800868c:	69fb      	ldr	r3, [r7, #28]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3720      	adds	r7, #32
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b088      	sub	sp, #32
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80086a4:	2337      	movs	r3, #55	; 0x37
 80086a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086a8:	2340      	movs	r3, #64	; 0x40
 80086aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086b6:	f107 0308 	add.w	r3, r7, #8
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff fef2 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80086c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c6:	2137      	movs	r1, #55	; 0x37
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8f7 	bl	80088bc <SDMMC_GetCmdResp1>
 80086ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086d0:	69fb      	ldr	r3, [r7, #28]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b088      	sub	sp, #32
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80086f0:	2329      	movs	r3, #41	; 0x29
 80086f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086f4:	2340      	movs	r3, #64	; 0x40
 80086f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008700:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008702:	f107 0308 	add.w	r3, r7, #8
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fecc 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa0a 	bl	8008b28 <SDMMC_GetCmdResp3>
 8008714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008716:	69fb      	ldr	r3, [r7, #28]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3720      	adds	r7, #32
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800872e:	2306      	movs	r3, #6
 8008730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008732:	2340      	movs	r3, #64	; 0x40
 8008734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008736:	2300      	movs	r3, #0
 8008738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800873a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800873e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008740:	f107 0308 	add.w	r3, r7, #8
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff fead 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800874c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008750:	2106      	movs	r1, #6
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f8b2 	bl	80088bc <SDMMC_GetCmdResp1>
 8008758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800875a:	69fb      	ldr	r3, [r7, #28]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3720      	adds	r7, #32
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008770:	2333      	movs	r3, #51	; 0x33
 8008772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008774:	2340      	movs	r3, #64	; 0x40
 8008776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800877c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff fe8c 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800878e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008792:	2133      	movs	r1, #51	; 0x33
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f891 	bl	80088bc <SDMMC_GetCmdResp1>
 800879a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800879c:	69fb      	ldr	r3, [r7, #28]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3720      	adds	r7, #32
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b088      	sub	sp, #32
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80087b2:	2302      	movs	r3, #2
 80087b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087b6:	23c0      	movs	r3, #192	; 0xc0
 80087b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087c4:	f107 0308 	add.w	r3, r7, #8
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fe6b 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f961 	bl	8008a98 <SDMMC_GetCmdResp2>
 80087d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087d8:	69fb      	ldr	r3, [r7, #28]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b088      	sub	sp, #32
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80087f0:	2309      	movs	r3, #9
 80087f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087f4:	23c0      	movs	r3, #192	; 0xc0
 80087f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087f8:	2300      	movs	r3, #0
 80087fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008800:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff fe4c 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f942 	bl	8008a98 <SDMMC_GetCmdResp2>
 8008814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008816:	69fb      	ldr	r3, [r7, #28]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800882e:	2303      	movs	r3, #3
 8008830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008832:	2340      	movs	r3, #64	; 0x40
 8008834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800883a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800883e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008840:	f107 0308 	add.w	r3, r7, #8
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff fe2d 	bl	80084a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	2103      	movs	r1, #3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f9a7 	bl	8008ba4 <SDMMC_GetCmdResp6>
 8008856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008858:	69fb      	ldr	r3, [r7, #28]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3720      	adds	r7, #32
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800886c:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <SDMMC_GetCmdError+0x50>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a11      	ldr	r2, [pc, #68]	; (80088b8 <SDMMC_GetCmdError+0x54>)
 8008872:	fba2 2303 	umull	r2, r3, r2, r3
 8008876:	0a5b      	lsrs	r3, r3, #9
 8008878:	f241 3288 	movw	r2, #5000	; 0x1388
 800887c:	fb02 f303 	mul.w	r3, r2, r3
 8008880:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	1e5a      	subs	r2, r3, #1
 8008886:	60fa      	str	r2, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800888c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008890:	e009      	b.n	80088a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f1      	beq.n	8008882 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	22c5      	movs	r2, #197	; 0xc5
 80088a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20000118 	.word	0x20000118
 80088b8:	10624dd3 	.word	0x10624dd3

080088bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	460b      	mov	r3, r1
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80088ca:	4b70      	ldr	r3, [pc, #448]	; (8008a8c <SDMMC_GetCmdResp1+0x1d0>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a70      	ldr	r2, [pc, #448]	; (8008a90 <SDMMC_GetCmdResp1+0x1d4>)
 80088d0:	fba2 2303 	umull	r2, r3, r2, r3
 80088d4:	0a5a      	lsrs	r2, r3, #9
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	1e5a      	subs	r2, r3, #1
 80088e2:	61fa      	str	r2, [r7, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ec:	e0c9      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0ef      	beq.n	80088de <SDMMC_GetCmdResp1+0x22>
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1ea      	bne.n	80088de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2204      	movs	r2, #4
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800891a:	2304      	movs	r3, #4
 800891c:	e0b1      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d004      	beq.n	8008934 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008930:	2301      	movs	r3, #1
 8008932:	e0a6      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	22c5      	movs	r2, #197	; 0xc5
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fddd 	bl	80084fa <SDIO_GetCommandResponse>
 8008940:	4603      	mov	r3, r0
 8008942:	461a      	mov	r2, r3
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	4293      	cmp	r3, r2
 8008948:	d001      	beq.n	800894e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800894a:	2301      	movs	r3, #1
 800894c:	e099      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800894e:	2100      	movs	r1, #0
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff fddf 	bl	8008514 <SDIO_GetResponse>
 8008956:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	4b4e      	ldr	r3, [pc, #312]	; (8008a94 <SDMMC_GetCmdResp1+0x1d8>)
 800895c:	4013      	ands	r3, r2
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008962:	2300      	movs	r3, #0
 8008964:	e08d      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	da02      	bge.n	8008972 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800896c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008970:	e087      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	e080      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800898a:	2380      	movs	r3, #128	; 0x80
 800898c:	e079      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800899c:	e071      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80089a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089ac:	e069      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80089b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089bc:	e061      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089cc:	e059      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089dc:	e051      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089ec:	e049      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80089f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089fc:	e041      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0c:	e039      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a1c:	e031      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a2c:	e029      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a3c:	e021      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a4c:	e019      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a5c:	e011      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a6c:	e009      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f003 0308 	and.w	r3, r3, #8
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a7c:	e001      	b.n	8008a82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000118 	.word	0x20000118
 8008a90:	10624dd3 	.word	0x10624dd3
 8008a94:	fdffe008 	.word	0xfdffe008

08008a98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008aa0:	4b1f      	ldr	r3, [pc, #124]	; (8008b20 <SDMMC_GetCmdResp2+0x88>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a1f      	ldr	r2, [pc, #124]	; (8008b24 <SDMMC_GetCmdResp2+0x8c>)
 8008aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aaa:	0a5b      	lsrs	r3, r3, #9
 8008aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab0:	fb02 f303 	mul.w	r3, r2, r3
 8008ab4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	60fa      	str	r2, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ac4:	e026      	b.n	8008b14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0ef      	beq.n	8008ab6 <SDMMC_GetCmdResp2+0x1e>
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1ea      	bne.n	8008ab6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2204      	movs	r2, #4
 8008af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008af2:	2304      	movs	r3, #4
 8008af4:	e00e      	b.n	8008b14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d004      	beq.n	8008b0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e003      	b.n	8008b14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	22c5      	movs	r2, #197	; 0xc5
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	20000118 	.word	0x20000118
 8008b24:	10624dd3 	.word	0x10624dd3

08008b28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b30:	4b1a      	ldr	r3, [pc, #104]	; (8008b9c <SDMMC_GetCmdResp3+0x74>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1a      	ldr	r2, [pc, #104]	; (8008ba0 <SDMMC_GetCmdResp3+0x78>)
 8008b36:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3a:	0a5b      	lsrs	r3, r3, #9
 8008b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b40:	fb02 f303 	mul.w	r3, r2, r3
 8008b44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	1e5a      	subs	r2, r3, #1
 8008b4a:	60fa      	str	r2, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d102      	bne.n	8008b56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b54:	e01b      	b.n	8008b8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0ef      	beq.n	8008b46 <SDMMC_GetCmdResp3+0x1e>
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1ea      	bne.n	8008b46 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b82:	2304      	movs	r3, #4
 8008b84:	e003      	b.n	8008b8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	22c5      	movs	r2, #197	; 0xc5
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	20000118 	.word	0x20000118
 8008ba0:	10624dd3 	.word	0x10624dd3

08008ba4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	460b      	mov	r3, r1
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bb2:	4b35      	ldr	r3, [pc, #212]	; (8008c88 <SDMMC_GetCmdResp6+0xe4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a35      	ldr	r2, [pc, #212]	; (8008c8c <SDMMC_GetCmdResp6+0xe8>)
 8008bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bbc:	0a5b      	lsrs	r3, r3, #9
 8008bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc2:	fb02 f303 	mul.w	r3, r2, r3
 8008bc6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	1e5a      	subs	r2, r3, #1
 8008bcc:	61fa      	str	r2, [r7, #28]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bd6:	e052      	b.n	8008c7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bdc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0ef      	beq.n	8008bc8 <SDMMC_GetCmdResp6+0x24>
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1ea      	bne.n	8008bc8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2204      	movs	r2, #4
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c04:	2304      	movs	r3, #4
 8008c06:	e03a      	b.n	8008c7e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e02f      	b.n	8008c7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff fc6b 	bl	80084fa <SDIO_GetCommandResponse>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d001      	beq.n	8008c32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e025      	b.n	8008c7e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	22c5      	movs	r2, #197	; 0xc5
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c38:	2100      	movs	r1, #0
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff fc6a 	bl	8008514 <SDIO_GetResponse>
 8008c40:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	0c1b      	lsrs	r3, r3, #16
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e011      	b.n	8008c7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c68:	e009      	b.n	8008c7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c78:	e001      	b.n	8008c7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000118 	.word	0x20000118
 8008c8c:	10624dd3 	.word	0x10624dd3

08008c90 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c98:	4b22      	ldr	r3, [pc, #136]	; (8008d24 <SDMMC_GetCmdResp7+0x94>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a22      	ldr	r2, [pc, #136]	; (8008d28 <SDMMC_GetCmdResp7+0x98>)
 8008c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca2:	0a5b      	lsrs	r3, r3, #9
 8008ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca8:	fb02 f303 	mul.w	r3, r2, r3
 8008cac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1e5a      	subs	r2, r3, #1
 8008cb2:	60fa      	str	r2, [r7, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d102      	bne.n	8008cbe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cbc:	e02c      	b.n	8008d18 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0ef      	beq.n	8008cae <SDMMC_GetCmdResp7+0x1e>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1ea      	bne.n	8008cae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d004      	beq.n	8008cee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cea:	2304      	movs	r3, #4
 8008cec:	e014      	b.n	8008d18 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e009      	b.n	8008d18 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2240      	movs	r2, #64	; 0x40
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d16:	2300      	movs	r3, #0
  
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	20000118 	.word	0x20000118
 8008d28:	10624dd3 	.word	0x10624dd3

08008d2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	f107 001c 	add.w	r0, r7, #28
 8008d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d122      	bne.n	8008d8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d105      	bne.n	8008d7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 fb1c 	bl	800a3bc <USB_CoreReset>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
 8008d88:	e01a      	b.n	8008dc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 fb10 	bl	800a3bc <USB_CoreReset>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
 8008db2:	e005      	b.n	8008dc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10b      	bne.n	8008dde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f043 0206 	orr.w	r2, r3, #6
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f043 0220 	orr.w	r2, r3, #32
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dea:	b004      	add	sp, #16
 8008dec:	4770      	bx	lr
	...

08008df0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d165      	bne.n	8008ed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4a41      	ldr	r2, [pc, #260]	; (8008f0c <USB_SetTurnaroundTime+0x11c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d906      	bls.n	8008e1a <USB_SetTurnaroundTime+0x2a>
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4a40      	ldr	r2, [pc, #256]	; (8008f10 <USB_SetTurnaroundTime+0x120>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d202      	bcs.n	8008e1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e14:	230f      	movs	r3, #15
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e062      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	4a3c      	ldr	r2, [pc, #240]	; (8008f10 <USB_SetTurnaroundTime+0x120>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d306      	bcc.n	8008e30 <USB_SetTurnaroundTime+0x40>
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	4a3b      	ldr	r2, [pc, #236]	; (8008f14 <USB_SetTurnaroundTime+0x124>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d202      	bcs.n	8008e30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e2a:	230e      	movs	r3, #14
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	e057      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4a38      	ldr	r2, [pc, #224]	; (8008f14 <USB_SetTurnaroundTime+0x124>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d306      	bcc.n	8008e46 <USB_SetTurnaroundTime+0x56>
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4a37      	ldr	r2, [pc, #220]	; (8008f18 <USB_SetTurnaroundTime+0x128>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d202      	bcs.n	8008e46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e40:	230d      	movs	r3, #13
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	e04c      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4a33      	ldr	r2, [pc, #204]	; (8008f18 <USB_SetTurnaroundTime+0x128>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d306      	bcc.n	8008e5c <USB_SetTurnaroundTime+0x6c>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	4a32      	ldr	r2, [pc, #200]	; (8008f1c <USB_SetTurnaroundTime+0x12c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d802      	bhi.n	8008e5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e56:	230c      	movs	r3, #12
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	e041      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	4a2f      	ldr	r2, [pc, #188]	; (8008f1c <USB_SetTurnaroundTime+0x12c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d906      	bls.n	8008e72 <USB_SetTurnaroundTime+0x82>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4a2e      	ldr	r2, [pc, #184]	; (8008f20 <USB_SetTurnaroundTime+0x130>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d802      	bhi.n	8008e72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e6c:	230b      	movs	r3, #11
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	e036      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4a2a      	ldr	r2, [pc, #168]	; (8008f20 <USB_SetTurnaroundTime+0x130>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d906      	bls.n	8008e88 <USB_SetTurnaroundTime+0x98>
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4a29      	ldr	r2, [pc, #164]	; (8008f24 <USB_SetTurnaroundTime+0x134>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d802      	bhi.n	8008e88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e82:	230a      	movs	r3, #10
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	e02b      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4a26      	ldr	r2, [pc, #152]	; (8008f24 <USB_SetTurnaroundTime+0x134>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d906      	bls.n	8008e9e <USB_SetTurnaroundTime+0xae>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4a25      	ldr	r2, [pc, #148]	; (8008f28 <USB_SetTurnaroundTime+0x138>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d202      	bcs.n	8008e9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e98:	2309      	movs	r3, #9
 8008e9a:	617b      	str	r3, [r7, #20]
 8008e9c:	e020      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4a21      	ldr	r2, [pc, #132]	; (8008f28 <USB_SetTurnaroundTime+0x138>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d306      	bcc.n	8008eb4 <USB_SetTurnaroundTime+0xc4>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <USB_SetTurnaroundTime+0x13c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d802      	bhi.n	8008eb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008eae:	2308      	movs	r3, #8
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	e015      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <USB_SetTurnaroundTime+0x13c>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d906      	bls.n	8008eca <USB_SetTurnaroundTime+0xda>
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4a1c      	ldr	r2, [pc, #112]	; (8008f30 <USB_SetTurnaroundTime+0x140>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d202      	bcs.n	8008eca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ec4:	2307      	movs	r3, #7
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	e00a      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008eca:	2306      	movs	r3, #6
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	e007      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d102      	bne.n	8008edc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ed6:	2309      	movs	r3, #9
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e001      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008edc:	2309      	movs	r3, #9
 8008ede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	029b      	lsls	r3, r3, #10
 8008ef4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	00d8acbf 	.word	0x00d8acbf
 8008f10:	00e4e1c0 	.word	0x00e4e1c0
 8008f14:	00f42400 	.word	0x00f42400
 8008f18:	01067380 	.word	0x01067380
 8008f1c:	011a499f 	.word	0x011a499f
 8008f20:	01312cff 	.word	0x01312cff
 8008f24:	014ca43f 	.word	0x014ca43f
 8008f28:	016e3600 	.word	0x016e3600
 8008f2c:	01a6ab1f 	.word	0x01a6ab1f
 8008f30:	01e84800 	.word	0x01e84800

08008f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f043 0201 	orr.w	r2, r3, #1
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f023 0201 	bic.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d115      	bne.n	8008fc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	f7f8 f8d6 	bl	8001158 <HAL_Delay>
      ms++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 f972 	bl	800a29c <USB_GetMode>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d01e      	beq.n	8008ffc <USB_SetCurrentMode+0x84>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b31      	cmp	r3, #49	; 0x31
 8008fc2:	d9f0      	bls.n	8008fa6 <USB_SetCurrentMode+0x2e>
 8008fc4:	e01a      	b.n	8008ffc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d115      	bne.n	8008ff8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fd8:	2001      	movs	r0, #1
 8008fda:	f7f8 f8bd 	bl	8001158 <HAL_Delay>
      ms++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f959 	bl	800a29c <USB_GetMode>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <USB_SetCurrentMode+0x84>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b31      	cmp	r3, #49	; 0x31
 8008ff4:	d9f0      	bls.n	8008fd8 <USB_SetCurrentMode+0x60>
 8008ff6:	e001      	b.n	8008ffc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e005      	b.n	8009008 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b32      	cmp	r3, #50	; 0x32
 8009000:	d101      	bne.n	8009006 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009010:	b084      	sub	sp, #16
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800901e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800902a:	2300      	movs	r3, #0
 800902c:	613b      	str	r3, [r7, #16]
 800902e:	e009      	b.n	8009044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	3340      	adds	r3, #64	; 0x40
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	2200      	movs	r2, #0
 800903c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3301      	adds	r3, #1
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2b0e      	cmp	r3, #14
 8009048:	d9f2      	bls.n	8009030 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800904a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d11c      	bne.n	800908a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905e:	f043 0302 	orr.w	r3, r3, #2
 8009062:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
 8009088:	e00b      	b.n	80090a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a8:	461a      	mov	r2, r3
 80090aa:	2300      	movs	r3, #0
 80090ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b4:	4619      	mov	r1, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090bc:	461a      	mov	r2, r3
 80090be:	680b      	ldr	r3, [r1, #0]
 80090c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10c      	bne.n	80090e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d104      	bne.n	80090d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090ce:	2100      	movs	r1, #0
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f945 	bl	8009360 <USB_SetDevSpeed>
 80090d6:	e008      	b.n	80090ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090d8:	2101      	movs	r1, #1
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f940 	bl	8009360 <USB_SetDevSpeed>
 80090e0:	e003      	b.n	80090ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090e2:	2103      	movs	r1, #3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f93b 	bl	8009360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090ea:	2110      	movs	r1, #16
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f8f3 	bl	80092d8 <USB_FlushTxFifo>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f90f 	bl	8009320 <USB_FlushRxFifo>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009112:	461a      	mov	r2, r3
 8009114:	2300      	movs	r3, #0
 8009116:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911e:	461a      	mov	r2, r3
 8009120:	2300      	movs	r3, #0
 8009122:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	461a      	mov	r2, r3
 800912c:	2300      	movs	r3, #0
 800912e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009130:	2300      	movs	r3, #0
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	e043      	b.n	80091be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800914c:	d118      	bne.n	8009180 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009160:	461a      	mov	r2, r3
 8009162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	e013      	b.n	8009192 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009176:	461a      	mov	r2, r3
 8009178:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	e008      	b.n	8009192 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918c:	461a      	mov	r2, r3
 800918e:	2300      	movs	r3, #0
 8009190:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	4413      	add	r3, r2
 800919a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919e:	461a      	mov	r2, r3
 80091a0:	2300      	movs	r3, #0
 80091a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	461a      	mov	r2, r3
 80091b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	3301      	adds	r3, #1
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d3b7      	bcc.n	8009136 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c6:	2300      	movs	r3, #0
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	e043      	b.n	8009254 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e2:	d118      	bne.n	8009216 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10a      	bne.n	8009200 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f6:	461a      	mov	r2, r3
 80091f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	e013      	b.n	8009228 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920c:	461a      	mov	r2, r3
 800920e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	e008      	b.n	8009228 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009222:	461a      	mov	r2, r3
 8009224:	2300      	movs	r3, #0
 8009226:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009234:	461a      	mov	r2, r3
 8009236:	2300      	movs	r3, #0
 8009238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009246:	461a      	mov	r2, r3
 8009248:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800924c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	3301      	adds	r3, #1
 8009252:	613b      	str	r3, [r7, #16]
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	429a      	cmp	r2, r3
 800925a:	d3b7      	bcc.n	80091cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800926a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800926e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800927c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	2b00      	cmp	r3, #0
 8009282:	d105      	bne.n	8009290 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	f043 0210 	orr.w	r2, r3, #16
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <USB_DevInit+0x2c4>)
 8009296:	4313      	orrs	r3, r2
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800929c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	f043 0208 	orr.w	r2, r3, #8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d107      	bne.n	80092c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092bc:	f043 0304 	orr.w	r3, r3, #4
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092d0:	b004      	add	sp, #16
 80092d2:	4770      	bx	lr
 80092d4:	803c3800 	.word	0x803c3800

080092d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	019b      	lsls	r3, r3, #6
 80092ea:	f043 0220 	orr.w	r2, r3, #32
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3301      	adds	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	4a08      	ldr	r2, [pc, #32]	; (800931c <USB_FlushTxFifo+0x44>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d901      	bls.n	8009302 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e006      	b.n	8009310 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f003 0320 	and.w	r3, r3, #32
 800930a:	2b20      	cmp	r3, #32
 800930c:	d0f1      	beq.n	80092f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	00030d40 	.word	0x00030d40

08009320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2210      	movs	r2, #16
 8009330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3301      	adds	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	4a08      	ldr	r2, [pc, #32]	; (800935c <USB_FlushRxFifo+0x3c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d901      	bls.n	8009342 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e006      	b.n	8009350 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0310 	and.w	r3, r3, #16
 800934a:	2b10      	cmp	r3, #16
 800934c:	d0f1      	beq.n	8009332 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	00030d40 	.word	0x00030d40

08009360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009380:	4313      	orrs	r3, r2
 8009382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f003 0306 	and.w	r3, r3, #6
 80093aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d102      	bne.n	80093b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80093b2:	2300      	movs	r3, #0
 80093b4:	75fb      	strb	r3, [r7, #23]
 80093b6:	e00a      	b.n	80093ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d002      	beq.n	80093c4 <USB_GetDevSpeed+0x32>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b06      	cmp	r3, #6
 80093c2:	d102      	bne.n	80093ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80093c4:	2302      	movs	r3, #2
 80093c6:	75fb      	strb	r3, [r7, #23]
 80093c8:	e001      	b.n	80093ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80093ca:	230f      	movs	r3, #15
 80093cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	371c      	adds	r7, #28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	785b      	ldrb	r3, [r3, #1]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d13a      	bne.n	800946e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fe:	69da      	ldr	r2, [r3, #28]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	2101      	movs	r1, #1
 800940a:	fa01 f303 	lsl.w	r3, r1, r3
 800940e:	b29b      	uxth	r3, r3
 8009410:	68f9      	ldr	r1, [r7, #12]
 8009412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009416:	4313      	orrs	r3, r2
 8009418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d155      	bne.n	80094dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	78db      	ldrb	r3, [r3, #3]
 800944a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800944c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	059b      	lsls	r3, r3, #22
 8009452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009454:	4313      	orrs	r3, r2
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	0151      	lsls	r1, r2, #5
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	440a      	add	r2, r1
 800945e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	e036      	b.n	80094dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009474:	69da      	ldr	r2, [r3, #28]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	2101      	movs	r1, #1
 8009480:	fa01 f303 	lsl.w	r3, r1, r3
 8009484:	041b      	lsls	r3, r3, #16
 8009486:	68f9      	ldr	r1, [r7, #12]
 8009488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800948c:	4313      	orrs	r3, r2
 800948e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d11a      	bne.n	80094dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	78db      	ldrb	r3, [r3, #3]
 80094c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094c2:	430b      	orrs	r3, r1
 80094c4:	4313      	orrs	r3, r2
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	0151      	lsls	r1, r2, #5
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	440a      	add	r2, r1
 80094ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d161      	bne.n	80095cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800951a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800951e:	d11f      	bne.n	8009560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	0151      	lsls	r1, r2, #5
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	440a      	add	r2, r1
 8009536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800953e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	015a      	lsls	r2, r3, #5
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4413      	add	r3, r2
 8009548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	0151      	lsls	r1, r2, #5
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	440a      	add	r2, r1
 8009556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800955a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800955e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 030f 	and.w	r3, r3, #15
 8009570:	2101      	movs	r1, #1
 8009572:	fa01 f303 	lsl.w	r3, r1, r3
 8009576:	b29b      	uxth	r3, r3
 8009578:	43db      	mvns	r3, r3
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009580:	4013      	ands	r3, r2
 8009582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800958a:	69da      	ldr	r2, [r3, #28]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	2101      	movs	r1, #1
 8009596:	fa01 f303 	lsl.w	r3, r1, r3
 800959a:	b29b      	uxth	r3, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095a4:	4013      	ands	r3, r2
 80095a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	0159      	lsls	r1, r3, #5
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	440b      	add	r3, r1
 80095be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c2:	4619      	mov	r1, r3
 80095c4:	4b35      	ldr	r3, [pc, #212]	; (800969c <USB_DeactivateEndpoint+0x1b0>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	600b      	str	r3, [r1, #0]
 80095ca:	e060      	b.n	800968e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095e2:	d11f      	bne.n	8009624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	0151      	lsls	r1, r2, #5
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	440a      	add	r2, r1
 80095fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	f003 030f 	and.w	r3, r3, #15
 8009634:	2101      	movs	r1, #1
 8009636:	fa01 f303 	lsl.w	r3, r1, r3
 800963a:	041b      	lsls	r3, r3, #16
 800963c:	43db      	mvns	r3, r3
 800963e:	68f9      	ldr	r1, [r7, #12]
 8009640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009644:	4013      	ands	r3, r2
 8009646:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	2101      	movs	r1, #1
 800965a:	fa01 f303 	lsl.w	r3, r1, r3
 800965e:	041b      	lsls	r3, r3, #16
 8009660:	43db      	mvns	r3, r3
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009668:	4013      	ands	r3, r2
 800966a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	0159      	lsls	r1, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	440b      	add	r3, r1
 8009682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009686:	4619      	mov	r1, r3
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <USB_DeactivateEndpoint+0x1b4>)
 800968a:	4013      	ands	r3, r2
 800968c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	ec337800 	.word	0xec337800
 80096a0:	eff37800 	.word	0xeff37800

080096a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08a      	sub	sp, #40	; 0x28
 80096a8:	af02      	add	r7, sp, #8
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	4613      	mov	r3, r2
 80096b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	f040 815c 	bne.w	800997e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d132      	bne.n	8009734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	0151      	lsls	r1, r2, #5
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	440a      	add	r2, r1
 80096e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800970c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800972c:	0cdb      	lsrs	r3, r3, #19
 800972e:	04db      	lsls	r3, r3, #19
 8009730:	6113      	str	r3, [r2, #16]
 8009732:	e074      	b.n	800981e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	440a      	add	r2, r1
 800974a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800974e:	0cdb      	lsrs	r3, r3, #19
 8009750:	04db      	lsls	r3, r3, #19
 8009752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	0151      	lsls	r1, r2, #5
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	440a      	add	r2, r1
 800976a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6959      	ldr	r1, [r3, #20]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	440b      	add	r3, r1
 8009790:	1e59      	subs	r1, r3, #1
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	fbb1 f3f3 	udiv	r3, r1, r3
 800979a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800979c:	4b9d      	ldr	r3, [pc, #628]	; (8009a14 <USB_EPStartXfer+0x370>)
 800979e:	400b      	ands	r3, r1
 80097a0:	69b9      	ldr	r1, [r7, #24]
 80097a2:	0148      	lsls	r0, r1, #5
 80097a4:	69f9      	ldr	r1, [r7, #28]
 80097a6:	4401      	add	r1, r0
 80097a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097ac:	4313      	orrs	r3, r2
 80097ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097c6:	69b9      	ldr	r1, [r7, #24]
 80097c8:	0148      	lsls	r0, r1, #5
 80097ca:	69f9      	ldr	r1, [r7, #28]
 80097cc:	4401      	add	r1, r0
 80097ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097d2:	4313      	orrs	r3, r2
 80097d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	78db      	ldrb	r3, [r3, #3]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d11f      	bne.n	800981e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	0151      	lsls	r1, r2, #5
 80097f0:	69fa      	ldr	r2, [r7, #28]
 80097f2:	440a      	add	r2, r1
 80097f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80097fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	0151      	lsls	r1, r2, #5
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	440a      	add	r2, r1
 8009814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800981c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d14b      	bne.n	80098bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d009      	beq.n	8009840 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009838:	461a      	mov	r2, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	78db      	ldrb	r3, [r3, #3]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d128      	bne.n	800989a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009854:	2b00      	cmp	r3, #0
 8009856:	d110      	bne.n	800987a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	e00f      	b.n	800989a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	4413      	add	r3, r2
 8009882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	0151      	lsls	r1, r2, #5
 800988c:	69fa      	ldr	r2, [r7, #28]
 800988e:	440a      	add	r2, r1
 8009890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009898:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	e12f      	b.n	8009b1c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	0151      	lsls	r1, r2, #5
 80098ce:	69fa      	ldr	r2, [r7, #28]
 80098d0:	440a      	add	r2, r1
 80098d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	78db      	ldrb	r3, [r3, #3]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d015      	beq.n	8009910 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8117 	beq.w	8009b1c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	f003 030f 	and.w	r3, r3, #15
 80098fe:	2101      	movs	r1, #1
 8009900:	fa01 f303 	lsl.w	r3, r1, r3
 8009904:	69f9      	ldr	r1, [r7, #28]
 8009906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800990a:	4313      	orrs	r3, r2
 800990c:	634b      	str	r3, [r1, #52]	; 0x34
 800990e:	e105      	b.n	8009b1c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991c:	2b00      	cmp	r3, #0
 800991e:	d110      	bne.n	8009942 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	0151      	lsls	r1, r2, #5
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	440a      	add	r2, r1
 8009936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800993a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	e00f      	b.n	8009962 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	69ba      	ldr	r2, [r7, #24]
 8009952:	0151      	lsls	r1, r2, #5
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	440a      	add	r2, r1
 8009958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800995c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009960:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	68d9      	ldr	r1, [r3, #12]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	b298      	uxth	r0, r3
 8009970:	79fb      	ldrb	r3, [r7, #7]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	4603      	mov	r3, r0
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 fa2b 	bl	8009dd2 <USB_WritePacket>
 800997c:	e0ce      	b.n	8009b1c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	0151      	lsls	r1, r2, #5
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	440a      	add	r2, r1
 8009994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009998:	0cdb      	lsrs	r3, r3, #19
 800999a:	04db      	lsls	r3, r3, #19
 800999c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	0151      	lsls	r1, r2, #5
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	440a      	add	r2, r1
 80099b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d126      	bne.n	8009a18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	015a      	lsls	r2, r3, #5
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	4413      	add	r3, r2
 80099d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d6:	691a      	ldr	r2, [r3, #16]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099e0:	69b9      	ldr	r1, [r7, #24]
 80099e2:	0148      	lsls	r0, r1, #5
 80099e4:	69f9      	ldr	r1, [r7, #28]
 80099e6:	4401      	add	r1, r0
 80099e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099ec:	4313      	orrs	r3, r2
 80099ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a0e:	6113      	str	r3, [r2, #16]
 8009a10:	e036      	b.n	8009a80 <USB_EPStartXfer+0x3dc>
 8009a12:	bf00      	nop
 8009a14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	695a      	ldr	r2, [r3, #20]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	1e5a      	subs	r2, r3, #1
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a2c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	8afb      	ldrh	r3, [r7, #22]
 8009a3e:	04d9      	lsls	r1, r3, #19
 8009a40:	4b39      	ldr	r3, [pc, #228]	; (8009b28 <USB_EPStartXfer+0x484>)
 8009a42:	400b      	ands	r3, r1
 8009a44:	69b9      	ldr	r1, [r7, #24]
 8009a46:	0148      	lsls	r0, r1, #5
 8009a48:	69f9      	ldr	r1, [r7, #28]
 8009a4a:	4401      	add	r1, r0
 8009a4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a50:	4313      	orrs	r3, r2
 8009a52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a60:	691a      	ldr	r2, [r3, #16]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	8af9      	ldrh	r1, [r7, #22]
 8009a68:	fb01 f303 	mul.w	r3, r1, r3
 8009a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a70:	69b9      	ldr	r1, [r7, #24]
 8009a72:	0148      	lsls	r0, r1, #5
 8009a74:	69f9      	ldr	r1, [r7, #28]
 8009a76:	4401      	add	r1, r0
 8009a78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d10d      	bne.n	8009aa2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d009      	beq.n	8009aa2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	68d9      	ldr	r1, [r3, #12]
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9e:	460a      	mov	r2, r1
 8009aa0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	78db      	ldrb	r3, [r3, #3]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d128      	bne.n	8009afc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d110      	bne.n	8009adc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	0151      	lsls	r1, r2, #5
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	440a      	add	r2, r1
 8009ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	e00f      	b.n	8009afc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009afa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	0151      	lsls	r1, r2, #5
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	440a      	add	r2, r1
 8009b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3720      	adds	r7, #32
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	1ff80000 	.word	0x1ff80000

08009b2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	f040 80cd 	bne.w	8009ce8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d132      	bne.n	8009bbc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	0151      	lsls	r1, r2, #5
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	0151      	lsls	r1, r2, #5
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	440a      	add	r2, r1
 8009b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb4:	0cdb      	lsrs	r3, r3, #19
 8009bb6:	04db      	lsls	r3, r3, #19
 8009bb8:	6113      	str	r3, [r2, #16]
 8009bba:	e04e      	b.n	8009c5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	0151      	lsls	r1, r2, #5
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	440a      	add	r2, r1
 8009bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd6:	0cdb      	lsrs	r3, r3, #19
 8009bd8:	04db      	lsls	r3, r3, #19
 8009bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	0151      	lsls	r1, r2, #5
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	440a      	add	r2, r1
 8009bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bfe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	695a      	ldr	r2, [r3, #20]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d903      	bls.n	8009c14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	0151      	lsls	r1, r2, #5
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	440a      	add	r2, r1
 8009c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c40:	691a      	ldr	r2, [r3, #16]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c4a:	6939      	ldr	r1, [r7, #16]
 8009c4c:	0148      	lsls	r0, r1, #5
 8009c4e:	6979      	ldr	r1, [r7, #20]
 8009c50:	4401      	add	r1, r0
 8009c52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c56:	4313      	orrs	r3, r2
 8009c58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d11e      	bne.n	8009c9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d009      	beq.n	8009c7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	461a      	mov	r2, r3
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	0151      	lsls	r1, r2, #5
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	440a      	add	r2, r1
 8009c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	e092      	b.n	8009dc4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	0151      	lsls	r1, r2, #5
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	440a      	add	r2, r1
 8009cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d07e      	beq.n	8009dc4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cdc:	6979      	ldr	r1, [r7, #20]
 8009cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	634b      	str	r3, [r1, #52]	; 0x34
 8009ce6:	e06d      	b.n	8009dc4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d02:	0cdb      	lsrs	r3, r3, #19
 8009d04:	04db      	lsls	r3, r3, #19
 8009d06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d2a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	689a      	ldr	r2, [r3, #8]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d68:	691a      	ldr	r2, [r3, #16]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d72:	6939      	ldr	r1, [r7, #16]
 8009d74:	0148      	lsls	r0, r1, #5
 8009d76:	6979      	ldr	r1, [r7, #20]
 8009d78:	4401      	add	r1, r0
 8009d7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10d      	bne.n	8009da4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d009      	beq.n	8009da4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	68d9      	ldr	r1, [r3, #12]
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da0:	460a      	mov	r2, r1
 8009da2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	0151      	lsls	r1, r2, #5
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	440a      	add	r2, r1
 8009dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b089      	sub	sp, #36	; 0x24
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	4611      	mov	r1, r2
 8009dde:	461a      	mov	r2, r3
 8009de0:	460b      	mov	r3, r1
 8009de2:	71fb      	strb	r3, [r7, #7]
 8009de4:	4613      	mov	r3, r2
 8009de6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009df0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d123      	bne.n	8009e40 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009df8:	88bb      	ldrh	r3, [r7, #4]
 8009dfa:	3303      	adds	r3, #3
 8009dfc:	089b      	lsrs	r3, r3, #2
 8009dfe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e00:	2300      	movs	r3, #0
 8009e02:	61bb      	str	r3, [r7, #24]
 8009e04:	e018      	b.n	8009e38 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	031a      	lsls	r2, r3, #12
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e12:	461a      	mov	r2, r3
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	3301      	adds	r3, #1
 8009e24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	3301      	adds	r3, #1
 8009e36:	61bb      	str	r3, [r7, #24]
 8009e38:	69ba      	ldr	r2, [r7, #24]
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d3e2      	bcc.n	8009e06 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3724      	adds	r7, #36	; 0x24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b08b      	sub	sp, #44	; 0x2c
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	089b      	lsrs	r3, r3, #2
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009e6c:	88fb      	ldrh	r3, [r7, #6]
 8009e6e:	f003 0303 	and.w	r3, r3, #3
 8009e72:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009e74:	2300      	movs	r3, #0
 8009e76:	623b      	str	r3, [r7, #32]
 8009e78:	e014      	b.n	8009ea4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	601a      	str	r2, [r3, #0]
    pDest++;
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	3301      	adds	r3, #1
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	3301      	adds	r3, #1
 8009e90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	3301      	adds	r3, #1
 8009e96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	623b      	str	r3, [r7, #32]
 8009ea4:	6a3a      	ldr	r2, [r7, #32]
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d3e6      	bcc.n	8009e7a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009eac:	8bfb      	ldrh	r3, [r7, #30]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01e      	beq.n	8009ef0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	f107 0310 	add.w	r3, r7, #16
 8009ec2:	6812      	ldr	r2, [r2, #0]
 8009ec4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	701a      	strb	r2, [r3, #0]
      i++;
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	3301      	adds	r3, #1
 8009edc:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009ee4:	8bfb      	ldrh	r3, [r7, #30]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009eea:	8bfb      	ldrh	r3, [r7, #30]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1ea      	bne.n	8009ec6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	372c      	adds	r7, #44	; 0x2c
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	785b      	ldrb	r3, [r3, #1]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d12c      	bne.n	8009f74 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	db12      	blt.n	8009f52 <USB_EPSetStall+0x54>
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00f      	beq.n	8009f52 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	0151      	lsls	r1, r2, #5
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	440a      	add	r2, r1
 8009f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f50:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	0151      	lsls	r1, r2, #5
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	440a      	add	r2, r1
 8009f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	e02b      	b.n	8009fcc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	db12      	blt.n	8009fac <USB_EPSetStall+0xae>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00f      	beq.n	8009fac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	0151      	lsls	r1, r2, #5
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	440a      	add	r2, r1
 8009fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009faa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	785b      	ldrb	r3, [r3, #1]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d128      	bne.n	800a048 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a010:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a014:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	78db      	ldrb	r3, [r3, #3]
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d003      	beq.n	800a026 <USB_EPClearStall+0x4c>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	78db      	ldrb	r3, [r3, #3]
 800a022:	2b02      	cmp	r3, #2
 800a024:	d138      	bne.n	800a098 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	0151      	lsls	r1, r2, #5
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	440a      	add	r2, r1
 800a03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	e027      	b.n	800a098 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a066:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	78db      	ldrb	r3, [r3, #3]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d003      	beq.n	800a078 <USB_EPClearStall+0x9e>
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	78db      	ldrb	r3, [r3, #3]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d10f      	bne.n	800a098 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	0151      	lsls	r1, r2, #5
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	440a      	add	r2, r1
 800a08e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a096:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b085      	sub	sp, #20
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a0c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a0da:	68f9      	ldr	r1, [r7, #12]
 800a0dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a10c:	f023 0303 	bic.w	r3, r3, #3
 800a110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a120:	f023 0302 	bic.w	r3, r3, #2
 800a124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a14e:	f023 0303 	bic.w	r3, r3, #3
 800a152:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a162:	f043 0302 	orr.w	r3, r3, #2
 800a166:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a176:	b480      	push	{r7}
 800a178:	b085      	sub	sp, #20
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	4013      	ands	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	0c1b      	lsrs	r3, r3, #16
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	b29b      	uxth	r3, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4013      	ands	r3, r2
 800a230:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a232:	68bb      	ldr	r3, [r7, #8]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a240:	b480      	push	{r7}
 800a242:	b087      	sub	sp, #28
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a262:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	f003 030f 	and.w	r3, r3, #15
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	fa22 f303 	lsr.w	r3, r2, r3
 800a270:	01db      	lsls	r3, r3, #7
 800a272:	b2db      	uxtb	r3, r3
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4313      	orrs	r3, r2
 800a278:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	015a      	lsls	r2, r3, #5
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	4413      	add	r3, r2
 800a282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	4013      	ands	r3, r2
 800a28c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a28e:	68bb      	ldr	r3, [r7, #8]
}
 800a290:	4618      	mov	r0, r3
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	f003 0301 	and.w	r3, r3, #1
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2d6:	f023 0307 	bic.w	r3, r3, #7
 800a2da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
	...

0800a300 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	460b      	mov	r3, r1
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	333c      	adds	r3, #60	; 0x3c
 800a316:	3304      	adds	r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	4a26      	ldr	r2, [pc, #152]	; (800a3b8 <USB_EP0_OutStart+0xb8>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d90a      	bls.n	800a33a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a334:	d101      	bne.n	800a33a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	e037      	b.n	800a3aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a340:	461a      	mov	r2, r3
 800a342:	2300      	movs	r3, #0
 800a344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a368:	f043 0318 	orr.w	r3, r3, #24
 800a36c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a37c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a380:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a382:	7afb      	ldrb	r3, [r7, #11]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d10f      	bne.n	800a3a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	4f54300a 	.word	0x4f54300a

0800a3bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	60fb      	str	r3, [r7, #12]
 800a3ce:	4a13      	ldr	r2, [pc, #76]	; (800a41c <USB_CoreReset+0x60>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d901      	bls.n	800a3d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e01a      	b.n	800a40e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	daf3      	bge.n	800a3c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	f043 0201 	orr.w	r2, r3, #1
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	4a09      	ldr	r2, [pc, #36]	; (800a41c <USB_CoreReset+0x60>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d901      	bls.n	800a400 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e006      	b.n	800a40e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d0f1      	beq.n	800a3f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	00030d40 	.word	0x00030d40

0800a420 <SensorArray_Init>:
		eSensor_MCP9808,
		eSensor_MCP9808
};

void SensorArray_Init(I2C_HandleTypeDef *hI2CA, I2C_HandleTypeDef *hI2CB)
{
 800a420:	b590      	push	{r4, r7, lr}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]
 800a42e:	e079      	b.n	800a524 <SensorArray_Init+0x104>
	{
		kaSensorArrayDataA[u8Idx].eSensorType = eSensorTypeListArrayA[u8Idx];
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	7bfa      	ldrb	r2, [r7, #15]
 800a434:	497f      	ldr	r1, [pc, #508]	; (800a634 <SensorArray_Init+0x214>)
 800a436:	5cc8      	ldrb	r0, [r1, r3]
 800a438:	497f      	ldr	r1, [pc, #508]	; (800a638 <SensorArray_Init+0x218>)
 800a43a:	4613      	mov	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4413      	add	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	440b      	add	r3, r1
 800a444:	330b      	adds	r3, #11
 800a446:	4602      	mov	r2, r0
 800a448:	701a      	strb	r2, [r3, #0]

		if(eSensorTypeListArrayA[u8Idx] == eSensor_MCP9803)
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	4a79      	ldr	r2, [pc, #484]	; (800a634 <SensorArray_Init+0x214>)
 800a44e:	5cd3      	ldrb	r3, [r2, r3]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d126      	bne.n	800a4a2 <SensorArray_Init+0x82>
		{

			kaSensorArrayDataA[u8Idx].u8Address = MCP9803_CalculateAddress(u8DeviceAddressListA[u8Idx]);
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	4a79      	ldr	r2, [pc, #484]	; (800a63c <SensorArray_Init+0x21c>)
 800a458:	5cd3      	ldrb	r3, [r2, r3]
 800a45a:	7bfc      	ldrb	r4, [r7, #15]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 f913 	bl	800a688 <MCP9803_CalculateAddress>
 800a462:	4603      	mov	r3, r0
 800a464:	4619      	mov	r1, r3
 800a466:	4a74      	ldr	r2, [pc, #464]	; (800a638 <SensorArray_Init+0x218>)
 800a468:	4623      	mov	r3, r4
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4423      	add	r3, r4
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	3301      	adds	r3, #1
 800a474:	460a      	mov	r2, r1
 800a476:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnDecodeTemperature = &MCP9803_DecodeTemperature;
 800a478:	7bfa      	ldrb	r2, [r7, #15]
 800a47a:	496f      	ldr	r1, [pc, #444]	; (800a638 <SensorArray_Init+0x218>)
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	330c      	adds	r3, #12
 800a488:	4a6d      	ldr	r2, [pc, #436]	; (800a640 <SensorArray_Init+0x220>)
 800a48a:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnReadTemperature = &MCP9803_Read;
 800a48c:	7bfa      	ldrb	r2, [r7, #15]
 800a48e:	496a      	ldr	r1, [pc, #424]	; (800a638 <SensorArray_Init+0x218>)
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	3310      	adds	r3, #16
 800a49c:	4a69      	ldr	r2, [pc, #420]	; (800a644 <SensorArray_Init+0x224>)
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e02a      	b.n	800a4f8 <SensorArray_Init+0xd8>
		}
		else if (eSensorTypeListArrayA[u8Idx] == eSensor_MCP9808)
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	4a63      	ldr	r2, [pc, #396]	; (800a634 <SensorArray_Init+0x214>)
 800a4a6:	5cd3      	ldrb	r3, [r2, r3]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d125      	bne.n	800a4f8 <SensorArray_Init+0xd8>
		{
			kaSensorArrayDataA[u8Idx].u8Address = MCP9808_CalculateAddress(u8DeviceAddressListA[u8Idx]);
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	4a63      	ldr	r2, [pc, #396]	; (800a63c <SensorArray_Init+0x21c>)
 800a4b0:	5cd3      	ldrb	r3, [r2, r3]
 800a4b2:	7bfc      	ldrb	r4, [r7, #15]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 f98d 	bl	800a7d4 <MCP9808_CalculateAddress>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4a5e      	ldr	r2, [pc, #376]	; (800a638 <SensorArray_Init+0x218>)
 800a4c0:	4623      	mov	r3, r4
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4423      	add	r3, r4
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	460a      	mov	r2, r1
 800a4ce:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnDecodeTemperature = &MCP9808_DecodeTemperature;
 800a4d0:	7bfa      	ldrb	r2, [r7, #15]
 800a4d2:	4959      	ldr	r1, [pc, #356]	; (800a638 <SensorArray_Init+0x218>)
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	330c      	adds	r3, #12
 800a4e0:	4a59      	ldr	r2, [pc, #356]	; (800a648 <SensorArray_Init+0x228>)
 800a4e2:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataA[u8Idx].fcnReadTemperature = &MCP9808_Read;
 800a4e4:	7bfa      	ldrb	r2, [r7, #15]
 800a4e6:	4954      	ldr	r1, [pc, #336]	; (800a638 <SensorArray_Init+0x218>)
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	440b      	add	r3, r1
 800a4f2:	3310      	adds	r3, #16
 800a4f4:	4a55      	ldr	r2, [pc, #340]	; (800a64c <SensorArray_Init+0x22c>)
 800a4f6:	601a      	str	r2, [r3, #0]
		}
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 800a4f8:	7bfa      	ldrb	r2, [r7, #15]
 800a4fa:	494f      	ldr	r1, [pc, #316]	; (800a638 <SensorArray_Init+0x218>)
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	3304      	adds	r3, #4
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 800a50c:	7bfa      	ldrb	r2, [r7, #15]
 800a50e:	494a      	ldr	r1, [pc, #296]	; (800a638 <SensorArray_Init+0x218>)
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	440b      	add	r3, r1
 800a51a:	2201      	movs	r2, #1
 800a51c:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++)
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	3301      	adds	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	2b05      	cmp	r3, #5
 800a528:	d982      	bls.n	800a430 <SensorArray_Init+0x10>
	}
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++)
 800a52a:	2300      	movs	r3, #0
 800a52c:	73bb      	strb	r3, [r7, #14]
 800a52e:	e079      	b.n	800a624 <SensorArray_Init+0x204>
	{
		kaSensorArrayDataB[u8Idx].eSensorType = eSensorTypeListArrayB[u8Idx];
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	7bba      	ldrb	r2, [r7, #14]
 800a534:	4946      	ldr	r1, [pc, #280]	; (800a650 <SensorArray_Init+0x230>)
 800a536:	5cc8      	ldrb	r0, [r1, r3]
 800a538:	4946      	ldr	r1, [pc, #280]	; (800a654 <SensorArray_Init+0x234>)
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	440b      	add	r3, r1
 800a544:	330b      	adds	r3, #11
 800a546:	4602      	mov	r2, r0
 800a548:	701a      	strb	r2, [r3, #0]

		if(eSensorTypeListArrayB[u8Idx] == eSensor_MCP9803)
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	4a40      	ldr	r2, [pc, #256]	; (800a650 <SensorArray_Init+0x230>)
 800a54e:	5cd3      	ldrb	r3, [r2, r3]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d126      	bne.n	800a5a2 <SensorArray_Init+0x182>
		{
			kaSensorArrayDataB[u8Idx].u8Address = MCP9803_CalculateAddress(u8DeviceAddressListB[u8Idx]);
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	4a40      	ldr	r2, [pc, #256]	; (800a658 <SensorArray_Init+0x238>)
 800a558:	5cd3      	ldrb	r3, [r2, r3]
 800a55a:	7bbc      	ldrb	r4, [r7, #14]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 f893 	bl	800a688 <MCP9803_CalculateAddress>
 800a562:	4603      	mov	r3, r0
 800a564:	4619      	mov	r1, r3
 800a566:	4a3b      	ldr	r2, [pc, #236]	; (800a654 <SensorArray_Init+0x234>)
 800a568:	4623      	mov	r3, r4
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4423      	add	r3, r4
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	3301      	adds	r3, #1
 800a574:	460a      	mov	r2, r1
 800a576:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnDecodeTemperature = &MCP9803_DecodeTemperature;
 800a578:	7bba      	ldrb	r2, [r7, #14]
 800a57a:	4936      	ldr	r1, [pc, #216]	; (800a654 <SensorArray_Init+0x234>)
 800a57c:	4613      	mov	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	330c      	adds	r3, #12
 800a588:	4a2d      	ldr	r2, [pc, #180]	; (800a640 <SensorArray_Init+0x220>)
 800a58a:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnReadTemperature = &MCP9803_Read;
 800a58c:	7bba      	ldrb	r2, [r7, #14]
 800a58e:	4931      	ldr	r1, [pc, #196]	; (800a654 <SensorArray_Init+0x234>)
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	440b      	add	r3, r1
 800a59a:	3310      	adds	r3, #16
 800a59c:	4a29      	ldr	r2, [pc, #164]	; (800a644 <SensorArray_Init+0x224>)
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	e02a      	b.n	800a5f8 <SensorArray_Init+0x1d8>
		}
		else if (eSensorTypeListArrayB[u8Idx] == eSensor_MCP9808)
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	4a2a      	ldr	r2, [pc, #168]	; (800a650 <SensorArray_Init+0x230>)
 800a5a6:	5cd3      	ldrb	r3, [r2, r3]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d125      	bne.n	800a5f8 <SensorArray_Init+0x1d8>
		{
			kaSensorArrayDataB[u8Idx].u8Address = MCP9808_CalculateAddress(u8DeviceAddressListB[u8Idx]);
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	4a2a      	ldr	r2, [pc, #168]	; (800a658 <SensorArray_Init+0x238>)
 800a5b0:	5cd3      	ldrb	r3, [r2, r3]
 800a5b2:	7bbc      	ldrb	r4, [r7, #14]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 f90d 	bl	800a7d4 <MCP9808_CalculateAddress>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4a25      	ldr	r2, [pc, #148]	; (800a654 <SensorArray_Init+0x234>)
 800a5c0:	4623      	mov	r3, r4
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4423      	add	r3, r4
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	460a      	mov	r2, r1
 800a5ce:	701a      	strb	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnDecodeTemperature = &MCP9808_DecodeTemperature;
 800a5d0:	7bba      	ldrb	r2, [r7, #14]
 800a5d2:	4920      	ldr	r1, [pc, #128]	; (800a654 <SensorArray_Init+0x234>)
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	440b      	add	r3, r1
 800a5de:	330c      	adds	r3, #12
 800a5e0:	4a19      	ldr	r2, [pc, #100]	; (800a648 <SensorArray_Init+0x228>)
 800a5e2:	601a      	str	r2, [r3, #0]
			kaSensorArrayDataB[u8Idx].fcnReadTemperature = &MCP9808_Read;
 800a5e4:	7bba      	ldrb	r2, [r7, #14]
 800a5e6:	491b      	ldr	r1, [pc, #108]	; (800a654 <SensorArray_Init+0x234>)
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	440b      	add	r3, r1
 800a5f2:	3310      	adds	r3, #16
 800a5f4:	4a15      	ldr	r2, [pc, #84]	; (800a64c <SensorArray_Init+0x22c>)
 800a5f6:	601a      	str	r2, [r3, #0]
		}
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 800a5f8:	7bba      	ldrb	r2, [r7, #14]
 800a5fa:	4916      	ldr	r1, [pc, #88]	; (800a654 <SensorArray_Init+0x234>)
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	440b      	add	r3, r1
 800a606:	3304      	adds	r3, #4
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 800a60c:	7bba      	ldrb	r2, [r7, #14]
 800a60e:	4911      	ldr	r1, [pc, #68]	; (800a654 <SensorArray_Init+0x234>)
 800a610:	4613      	mov	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	2201      	movs	r2, #1
 800a61c:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++)
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
 800a620:	3301      	adds	r3, #1
 800a622:	73bb      	strb	r3, [r7, #14]
 800a624:	7bbb      	ldrb	r3, [r7, #14]
 800a626:	2b05      	cmp	r3, #5
 800a628:	d982      	bls.n	800a530 <SensorArray_Init+0x110>
	}
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	bd90      	pop	{r4, r7, pc}
 800a634:	0801168c 	.word	0x0801168c
 800a638:	20000a30 	.word	0x20000a30
 800a63c:	0801167c 	.word	0x0801167c
 800a640:	0800a6a5 	.word	0x0800a6a5
 800a644:	0800a65d 	.word	0x0800a65d
 800a648:	0800a7f1 	.word	0x0800a7f1
 800a64c:	0800a7a9 	.word	0x0800a7a9
 800a650:	08011694 	.word	0x08011694
 800a654:	20000aa8 	.word	0x20000aa8
 800a658:	08011684 	.word	0x08011684

0800a65c <MCP9803_Read>:
#include "TemperatureSensor_ArrayData.h"

#define MCP9803_AddresLowerNibble 0x9

void MCP9803_Read(TemperatureSensor_t *kSensor)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af02      	add	r7, sp, #8
 800a662:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9803_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6858      	ldr	r0, [r3, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	785b      	ldrb	r3, [r3, #1]
 800a66c:	b299      	uxth	r1, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3308      	adds	r3, #8
 800a672:	2202      	movs	r2, #2
 800a674:	9201      	str	r2, [sp, #4]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	2301      	movs	r3, #1
 800a67a:	2200      	movs	r2, #0
 800a67c:	f7f8 f99a 	bl	80029b4 <HAL_I2C_Mem_Read_IT>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <MCP9803_CalculateAddress>:

uint8_t MCP9803_CalculateAddress(uint8_t u8BitSettings)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	71fb      	strb	r3, [r7, #7]
	return ((MCP9803_AddresLowerNibble << 4) + u8BitSettings);
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	3b70      	subs	r3, #112	; 0x70
 800a696:	b2db      	uxtb	r3, r3
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <MCP9803_DecodeTemperature>:

float MCP9803_DecodeTemperature(TemperatureSensor_t *kSensor)
{
 800a6a4:	b5b0      	push	{r4, r5, r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	823b      	strh	r3, [r7, #16]
	bool bNegativeSign = false;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
	float fResult = 0.0;
 800a6b8:	f04f 0300 	mov.w	r3, #0
 800a6bc:	617b      	str	r3, [r7, #20]


	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0]));
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7a1b      	ldrb	r3, [r3, #8]
 800a6c2:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x80) && 0x80;
 800a6c4:	8a7b      	ldrh	r3, [r7, #18]
 800a6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bf14      	ite	ne
 800a6ce:	2301      	movne	r3, #1
 800a6d0:	2300      	moveq	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x007F); // Mask to delete threshold data and sign
 800a6d4:	8a7b      	ldrh	r3, [r7, #18]
 800a6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6da:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1])) >> 4;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7a5b      	ldrb	r3, [r3, #9]
 800a6e0:	091b      	lsrs	r3, r3, #4
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	823b      	strh	r3, [r7, #16]

	if (bNegativeSign)
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d02c      	beq.n	800a746 <MCP9803_DecodeTemperature+0xa2>
	{
		fResult = (((float)u16FixedPointReadingLow) + (((float)u16FixedPointReadingHigh) * 0.0625)) * -1;
 800a6ec:	8a7b      	ldrh	r3, [r7, #18]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	ee17 0a90 	vmov	r0, s15
 800a6fa:	f7f5 ff2d 	bl	8000558 <__aeabi_f2d>
 800a6fe:	4604      	mov	r4, r0
 800a700:	460d      	mov	r5, r1
 800a702:	8a3b      	ldrh	r3, [r7, #16]
 800a704:	ee07 3a90 	vmov	s15, r3
 800a708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70c:	ee17 0a90 	vmov	r0, s15
 800a710:	f7f5 ff22 	bl	8000558 <__aeabi_f2d>
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <MCP9803_DecodeTemperature+0x100>)
 800a71a:	f7f5 ff75 	bl	8000608 <__aeabi_dmul>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4620      	mov	r0, r4
 800a724:	4629      	mov	r1, r5
 800a726:	f7f5 fdb9 	bl	800029c <__adddf3>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4610      	mov	r0, r2
 800a730:	4619      	mov	r1, r3
 800a732:	f7f6 fa41 	bl	8000bb8 <__aeabi_d2f>
 800a736:	4603      	mov	r3, r0
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eef1 7a67 	vneg.f32	s15, s15
 800a740:	edc7 7a05 	vstr	s15, [r7, #20]
 800a744:	e026      	b.n	800a794 <MCP9803_DecodeTemperature+0xf0>
	}
	else
	{
		fResult = ((float)u16FixedPointReadingLow) + (((float)u16FixedPointReadingHigh) * 0.0625);
 800a746:	8a7b      	ldrh	r3, [r7, #18]
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a750:	ee17 0a90 	vmov	r0, s15
 800a754:	f7f5 ff00 	bl	8000558 <__aeabi_f2d>
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	8a3b      	ldrh	r3, [r7, #16]
 800a75e:	ee07 3a90 	vmov	s15, r3
 800a762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a766:	ee17 0a90 	vmov	r0, s15
 800a76a:	f7f5 fef5 	bl	8000558 <__aeabi_f2d>
 800a76e:	f04f 0200 	mov.w	r2, #0
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <MCP9803_DecodeTemperature+0x100>)
 800a774:	f7f5 ff48 	bl	8000608 <__aeabi_dmul>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4620      	mov	r0, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	f7f5 fd8c 	bl	800029c <__adddf3>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4610      	mov	r0, r2
 800a78a:	4619      	mov	r1, r3
 800a78c:	f7f6 fa14 	bl	8000bb8 <__aeabi_d2f>
 800a790:	4603      	mov	r3, r0
 800a792:	617b      	str	r3, [r7, #20]
	}

	return fResult;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	ee07 3a90 	vmov	s15, r3
}
 800a79a:	eeb0 0a67 	vmov.f32	s0, s15
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bdb0      	pop	{r4, r5, r7, pc}
 800a7a4:	3fb00000 	.word	0x3fb00000

0800a7a8 <MCP9808_Read>:
#include "TemperatureSensor_ArrayData.h"

#define MCP9808_AddresLowerNibble 0x3

void MCP9808_Read(TemperatureSensor_t *kSensor)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6858      	ldr	r0, [r3, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	785b      	ldrb	r3, [r3, #1]
 800a7b8:	b299      	uxth	r1, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	2202      	movs	r2, #2
 800a7c0:	9201      	str	r2, [sp, #4]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	2205      	movs	r2, #5
 800a7c8:	f7f8 f8f4 	bl	80029b4 <HAL_I2C_Mem_Read_IT>
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <MCP9808_CalculateAddress>:

uint8_t MCP9808_CalculateAddress(uint8_t u8BitSettings)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
	return ((MCP9808_AddresLowerNibble << 4) + u8BitSettings);
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	3330      	adds	r3, #48	; 0x30
 800a7e2:	b2db      	uxtb	r3, r3
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <MCP9808_DecodeTemperature>:

float MCP9808_DecodeTemperature(TemperatureSensor_t *kSensor)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	823b      	strh	r3, [r7, #16]
	uint16_t u16FixedPointReading = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	81fb      	strh	r3, [r7, #14]
	bool bNegativeSign = false;
 800a804:	2300      	movs	r3, #0
 800a806:	737b      	strb	r3, [r7, #13]
	float fResult = 0.0;
 800a808:	f04f 0300 	mov.w	r3, #0
 800a80c:	617b      	str	r3, [r7, #20]

	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	7a1b      	ldrb	r3, [r3, #8]
 800a812:	b29b      	uxth	r3, r3
 800a814:	021b      	lsls	r3, r3, #8
 800a816:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
 800a818:	8a7b      	ldrh	r3, [r7, #18]
 800a81a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bf14      	ite	ne
 800a822:	2301      	movne	r3, #1
 800a824:	2300      	moveq	r3, #0
 800a826:	737b      	strb	r3, [r7, #13]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 800a828:	8a7b      	ldrh	r3, [r7, #18]
 800a82a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a82e:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	7a5b      	ldrb	r3, [r3, #9]
 800a834:	823b      	strh	r3, [r7, #16]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 800a836:	8a7a      	ldrh	r2, [r7, #18]
 800a838:	8a3b      	ldrh	r3, [r7, #16]
 800a83a:	4413      	add	r3, r2
 800a83c:	81fb      	strh	r3, [r7, #14]

	if (bNegativeSign)
 800a83e:	7b7b      	ldrb	r3, [r7, #13]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00d      	beq.n	800a860 <MCP9808_DecodeTemperature+0x70>
	{
		fResult = ((float)(u16FixedPointReading) / 16) * -1;
 800a844:	89fb      	ldrh	r3, [r7, #14]
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a84e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800a852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a856:	eef1 7a67 	vneg.f32	s15, s15
 800a85a:	edc7 7a05 	vstr	s15, [r7, #20]
 800a85e:	e00a      	b.n	800a876 <MCP9808_DecodeTemperature+0x86>
	}
	else
	{
		fResult = ((float)(u16FixedPointReading) / 16);
 800a860:	89fb      	ldrh	r3, [r7, #14]
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a86a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800a86e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a872:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return fResult;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	ee07 3a90 	vmov	s15, r3
}
 800a87c:	eeb0 0a67 	vmov.f32	s0, s15
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	460b      	mov	r3, r1
 800a894:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a896:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a89a:	f003 fe25 	bl	800e4e8 <USBD_static_malloc>
 800a89e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d105      	bne.n	800a8b2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e066      	b.n	800a980 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	7c1b      	ldrb	r3, [r3, #16]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d119      	bne.n	800a8f6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	2181      	movs	r1, #129	; 0x81
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f003 fce9 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8da:	2202      	movs	r2, #2
 800a8dc:	2101      	movs	r1, #1
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f003 fcdf 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2210      	movs	r2, #16
 800a8f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a8f4:	e016      	b.n	800a924 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8f6:	2340      	movs	r3, #64	; 0x40
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	2181      	movs	r1, #129	; 0x81
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f003 fcd0 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a908:	2340      	movs	r3, #64	; 0x40
 800a90a:	2202      	movs	r2, #2
 800a90c:	2101      	movs	r1, #1
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f003 fcc7 	bl	800e2a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2210      	movs	r2, #16
 800a920:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a924:	2308      	movs	r3, #8
 800a926:	2203      	movs	r2, #3
 800a928:	2182      	movs	r1, #130	; 0x82
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f003 fcb9 	bl	800e2a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7c1b      	ldrb	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d109      	bne.n	800a96e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a960:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a964:	2101      	movs	r1, #1
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f003 fd8a 	bl	800e480 <USBD_LL_PrepareReceive>
 800a96c:	e007      	b.n	800a97e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a974:	2340      	movs	r3, #64	; 0x40
 800a976:	2101      	movs	r1, #1
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f003 fd81 	bl	800e480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	460b      	mov	r3, r1
 800a992:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a994:	2181      	movs	r1, #129	; 0x81
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f003 fca9 	bl	800e2ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f003 fca2 	bl	800e2ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a9b2:	2182      	movs	r1, #130	; 0x82
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f003 fc9a 	bl	800e2ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00e      	beq.n	800a9f2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f003 fd8d 	bl	800e504 <USBD_static_free>
    pdev->pClassData = NULL;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e0af      	b.n	800ab84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d03f      	beq.n	800aab0 <USBD_CDC_Setup+0xb4>
 800aa30:	2b20      	cmp	r3, #32
 800aa32:	f040 809f 	bne.w	800ab74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	88db      	ldrh	r3, [r3, #6]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d02e      	beq.n	800aa9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	da16      	bge.n	800aa76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800aa54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	88d2      	ldrh	r2, [r2, #6]
 800aa5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	88db      	ldrh	r3, [r3, #6]
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	bf28      	it	cs
 800aa64:	2307      	movcs	r3, #7
 800aa66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	89fa      	ldrh	r2, [r7, #14]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fb19 	bl	800c0a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800aa74:	e085      	b.n	800ab82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	785a      	ldrb	r2, [r3, #1]
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	88db      	ldrh	r3, [r3, #6]
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aa8c:	6939      	ldr	r1, [r7, #16]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	88db      	ldrh	r3, [r3, #6]
 800aa92:	461a      	mov	r2, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 fb32 	bl	800c0fe <USBD_CtlPrepareRx>
      break;
 800aa9a:	e072      	b.n	800ab82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	7850      	ldrb	r0, [r2, #1]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	4798      	blx	r3
      break;
 800aaae:	e068      	b.n	800ab82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	785b      	ldrb	r3, [r3, #1]
 800aab4:	2b0b      	cmp	r3, #11
 800aab6:	d852      	bhi.n	800ab5e <USBD_CDC_Setup+0x162>
 800aab8:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <USBD_CDC_Setup+0xc4>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800aaf1 	.word	0x0800aaf1
 800aac4:	0800ab6d 	.word	0x0800ab6d
 800aac8:	0800ab5f 	.word	0x0800ab5f
 800aacc:	0800ab5f 	.word	0x0800ab5f
 800aad0:	0800ab5f 	.word	0x0800ab5f
 800aad4:	0800ab5f 	.word	0x0800ab5f
 800aad8:	0800ab5f 	.word	0x0800ab5f
 800aadc:	0800ab5f 	.word	0x0800ab5f
 800aae0:	0800ab5f 	.word	0x0800ab5f
 800aae4:	0800ab5f 	.word	0x0800ab5f
 800aae8:	0800ab1b 	.word	0x0800ab1b
 800aaec:	0800ab45 	.word	0x0800ab45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d107      	bne.n	800ab0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aafc:	f107 030a 	add.w	r3, r7, #10
 800ab00:	2202      	movs	r2, #2
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f001 face 	bl	800c0a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab0a:	e032      	b.n	800ab72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f001 fa58 	bl	800bfc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab14:	2303      	movs	r3, #3
 800ab16:	75fb      	strb	r3, [r7, #23]
          break;
 800ab18:	e02b      	b.n	800ab72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d107      	bne.n	800ab36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab26:	f107 030d 	add.w	r3, r7, #13
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f001 fab9 	bl	800c0a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab34:	e01d      	b.n	800ab72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f001 fa43 	bl	800bfc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	75fb      	strb	r3, [r7, #23]
          break;
 800ab42:	e016      	b.n	800ab72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d00f      	beq.n	800ab70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 fa36 	bl	800bfc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab5c:	e008      	b.n	800ab70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 fa2f 	bl	800bfc4 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab66:	2303      	movs	r3, #3
 800ab68:	75fb      	strb	r3, [r7, #23]
          break;
 800ab6a:	e002      	b.n	800ab72 <USBD_CDC_Setup+0x176>
          break;
 800ab6c:	bf00      	nop
 800ab6e:	e008      	b.n	800ab82 <USBD_CDC_Setup+0x186>
          break;
 800ab70:	bf00      	nop
      }
      break;
 800ab72:	e006      	b.n	800ab82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f001 fa24 	bl	800bfc4 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab80:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800abaa:	2303      	movs	r3, #3
 800abac:	e04f      	b.n	800ac4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800abb6:	78fa      	ldrb	r2, [r7, #3]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	4613      	mov	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	440b      	add	r3, r1
 800abc4:	3318      	adds	r3, #24
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d029      	beq.n	800ac20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800abcc:	78fa      	ldrb	r2, [r7, #3]
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	440b      	add	r3, r1
 800abda:	3318      	adds	r3, #24
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	78f9      	ldrb	r1, [r7, #3]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	460b      	mov	r3, r1
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	1a5b      	subs	r3, r3, r1
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4403      	add	r3, r0
 800abec:	3344      	adds	r3, #68	; 0x44
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	fbb2 f1f3 	udiv	r1, r2, r3
 800abf4:	fb03 f301 	mul.w	r3, r3, r1
 800abf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d110      	bne.n	800ac20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800abfe:	78fa      	ldrb	r2, [r7, #3]
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	3318      	adds	r3, #24
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac12:	78f9      	ldrb	r1, [r7, #3]
 800ac14:	2300      	movs	r3, #0
 800ac16:	2200      	movs	r2, #0
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f003 fc10 	bl	800e43e <USBD_LL_Transmit>
 800ac1e:	e015      	b.n	800ac4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00b      	beq.n	800ac4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ac48:	78fa      	ldrb	r2, [r7, #3]
 800ac4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e015      	b.n	800aca4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f003 fc20 	bl	800e4c2 <USBD_LL_GetRxDataSize>
 800ac82:	4602      	mov	r2, r0
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac9e:	4611      	mov	r1, r2
 800aca0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e01b      	b.n	800acfe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d015      	beq.n	800acfc <USBD_CDC_EP0_RxReady+0x50>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800acd6:	2bff      	cmp	r3, #255	; 0xff
 800acd8:	d010      	beq.n	800acfc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ace8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800acf0:	b292      	uxth	r2, r2
 800acf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	22ff      	movs	r2, #255	; 0xff
 800acf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2243      	movs	r2, #67	; 0x43
 800ad14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ad16:	4b03      	ldr	r3, [pc, #12]	; (800ad24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000090 	.word	0x20000090

0800ad28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2243      	movs	r2, #67	; 0x43
 800ad34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ad36:	4b03      	ldr	r3, [pc, #12]	; (800ad44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	2000004c 	.word	0x2000004c

0800ad48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2243      	movs	r2, #67	; 0x43
 800ad54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ad56:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	200000d4 	.word	0x200000d4

0800ad68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	220a      	movs	r2, #10
 800ad74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad76:	4b03      	ldr	r3, [pc, #12]	; (800ad84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	20000008 	.word	0x20000008

0800ad88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	e004      	b.n	800ada6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b087      	sub	sp, #28
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adc4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d101      	bne.n	800add0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800adcc:	2303      	movs	r3, #3
 800adce:	e008      	b.n	800ade2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800adee:	b480      	push	{r7}
 800adf0:	b085      	sub	sp, #20
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e004      	b.n	800ae14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ae30:	2301      	movs	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e01a      	b.n	800ae78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d114      	bne.n	800ae76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ae6a:	2181      	movs	r1, #129	; 0x81
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f003 fae6 	bl	800e43e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e016      	b.n	800aecc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7c1b      	ldrb	r3, [r3, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d109      	bne.n	800aeba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aeac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f003 fae4 	bl	800e480 <USBD_LL_PrepareReceive>
 800aeb8:	e007      	b.n	800aeca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aec0:	2340      	movs	r3, #64	; 0x40
 800aec2:	2101      	movs	r1, #1
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f003 fadb 	bl	800e480 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4613      	mov	r3, r2
 800aee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e01f      	b.n	800af2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	79fa      	ldrb	r2, [r7, #7]
 800af1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f003 f957 	bl	800e1d4 <USBD_LL_Init>
 800af26:	4603      	mov	r3, r0
 800af28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	e016      	b.n	800af7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af68:	f107 020e 	add.w	r2, r7, #14
 800af6c:	4610      	mov	r0, r2
 800af6e:	4798      	blx	r3
 800af70:	4602      	mov	r2, r0
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f003 f96e 	bl	800e26c <USBD_LL_Start>
 800af90:	4603      	mov	r3, r0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800afbc:	2303      	movs	r3, #3
 800afbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d009      	beq.n	800afde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	78fa      	ldrb	r2, [r7, #3]
 800afd4:	4611      	mov	r1, r2
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	4798      	blx	r3
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800afde:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800affa:	2b00      	cmp	r3, #0
 800affc:	d007      	beq.n	800b00e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	78fa      	ldrb	r2, [r7, #3]
 800b008:	4611      	mov	r1, r2
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	4798      	blx	r3
  }

  return USBD_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 ff90 	bl	800bf50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b04c:	f003 031f 	and.w	r3, r3, #31
 800b050:	2b02      	cmp	r3, #2
 800b052:	d01a      	beq.n	800b08a <USBD_LL_SetupStage+0x72>
 800b054:	2b02      	cmp	r3, #2
 800b056:	d822      	bhi.n	800b09e <USBD_LL_SetupStage+0x86>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <USBD_LL_SetupStage+0x4a>
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d00a      	beq.n	800b076 <USBD_LL_SetupStage+0x5e>
 800b060:	e01d      	b.n	800b09e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa62 	bl	800b534 <USBD_StdDevReq>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
      break;
 800b074:	e020      	b.n	800b0b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fac6 	bl	800b610 <USBD_StdItfReq>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
      break;
 800b088:	e016      	b.n	800b0b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fb05 	bl	800b6a2 <USBD_StdEPReq>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
      break;
 800b09c:	e00c      	b.n	800b0b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f003 f93d 	bl	800e32c <USBD_LL_StallEP>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b6:	bf00      	nop
  }

  return ret;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b086      	sub	sp, #24
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	607a      	str	r2, [r7, #4]
 800b0ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b0d0:	7afb      	ldrb	r3, [r7, #11]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d138      	bne.n	800b148 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b0dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d14a      	bne.n	800b17e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d913      	bls.n	800b11c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	689a      	ldr	r2, [r3, #8]
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	1ad2      	subs	r2, r2, r3
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	4293      	cmp	r3, r2
 800b10c:	bf28      	it	cs
 800b10e:	4613      	movcs	r3, r2
 800b110:	461a      	mov	r2, r3
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f001 f80f 	bl	800c138 <USBD_CtlContinueRx>
 800b11a:	e030      	b.n	800b17e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b03      	cmp	r3, #3
 800b126:	d10b      	bne.n	800b140 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d005      	beq.n	800b140 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f001 f80a 	bl	800c15a <USBD_CtlSendStatus>
 800b146:	e01a      	b.n	800b17e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b03      	cmp	r3, #3
 800b152:	d114      	bne.n	800b17e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00e      	beq.n	800b17e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	7afa      	ldrb	r2, [r7, #11]
 800b16a:	4611      	mov	r1, r2
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	4798      	blx	r3
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b174:	7dfb      	ldrb	r3, [r7, #23]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	e000      	b.n	800b180 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	460b      	mov	r3, r1
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b196:	7afb      	ldrb	r3, [r7, #11]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d16b      	bne.n	800b274 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3314      	adds	r3, #20
 800b1a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d156      	bne.n	800b25a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d914      	bls.n	800b1e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	1ad2      	subs	r2, r2, r3
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 ff84 	bl	800c0dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2100      	movs	r1, #0
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f003 f950 	bl	800e480 <USBD_LL_PrepareReceive>
 800b1e0:	e03b      	b.n	800b25a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d11c      	bne.n	800b228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d316      	bcc.n	800b228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b204:	429a      	cmp	r2, r3
 800b206:	d20f      	bcs.n	800b228 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b208:	2200      	movs	r2, #0
 800b20a:	2100      	movs	r1, #0
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 ff65 	bl	800c0dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b21a:	2300      	movs	r3, #0
 800b21c:	2200      	movs	r2, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f003 f92d 	bl	800e480 <USBD_LL_PrepareReceive>
 800b226:	e018      	b.n	800b25a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b03      	cmp	r3, #3
 800b232:	d10b      	bne.n	800b24c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d005      	beq.n	800b24c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b24c:	2180      	movs	r1, #128	; 0x80
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f003 f86c 	bl	800e32c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 ff93 	bl	800c180 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b260:	2b01      	cmp	r3, #1
 800b262:	d122      	bne.n	800b2aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7ff fe98 	bl	800af9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b272:	e01a      	b.n	800b2aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d114      	bne.n	800b2aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00e      	beq.n	800b2aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	7afa      	ldrb	r2, [r7, #11]
 800b296:	4611      	mov	r1, r2
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	4798      	blx	r3
 800b29c:	4603      	mov	r3, r0
 800b29e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	e000      	b.n	800b2ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e02f      	b.n	800b348 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00f      	beq.n	800b312 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	6852      	ldr	r2, [r2, #4]
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	4611      	mov	r1, r2
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b312:	2340      	movs	r3, #64	; 0x40
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f002 ffc2 	bl	800e2a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2240      	movs	r2, #64	; 0x40
 800b32a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b32e:	2340      	movs	r3, #64	; 0x40
 800b330:	2200      	movs	r2, #0
 800b332:	2180      	movs	r1, #128	; 0x80
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f002 ffb4 	bl	800e2a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2240      	movs	r2, #64	; 0x40
 800b344:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	78fa      	ldrb	r2, [r7, #3]
 800b360:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2204      	movs	r2, #4
 800b38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d106      	bne.n	800b3be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e012      	b.n	800b408 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d10b      	bne.n	800b406 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d005      	beq.n	800b406 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b426:	2303      	movs	r3, #3
 800b428:	e014      	b.n	800b454 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b03      	cmp	r3, #3
 800b434:	d10d      	bne.n	800b452 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d007      	beq.n	800b452 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	78fa      	ldrb	r2, [r7, #3]
 800b44c:	4611      	mov	r1, r2
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b472:	2303      	movs	r3, #3
 800b474:	e014      	b.n	800b4a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d10d      	bne.n	800b49e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d007      	beq.n	800b49e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	78fa      	ldrb	r2, [r7, #3]
 800b498:	4611      	mov	r1, r2
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d009      	beq.n	800b4ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	6852      	ldr	r2, [r2, #4]
 800b4e4:	b2d2      	uxtb	r2, r2
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	4798      	blx	r3
  }

  return USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b087      	sub	sp, #28
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	3301      	adds	r3, #1
 800b50c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b514:	8a3b      	ldrh	r3, [r7, #16]
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	b21a      	sxth	r2, r3
 800b51a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b51e:	4313      	orrs	r3, r2
 800b520:	b21b      	sxth	r3, r3
 800b522:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b524:	89fb      	ldrh	r3, [r7, #14]
}
 800b526:	4618      	mov	r0, r3
 800b528:	371c      	adds	r7, #28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
	...

0800b534 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b54a:	2b40      	cmp	r3, #64	; 0x40
 800b54c:	d005      	beq.n	800b55a <USBD_StdDevReq+0x26>
 800b54e:	2b40      	cmp	r3, #64	; 0x40
 800b550:	d853      	bhi.n	800b5fa <USBD_StdDevReq+0xc6>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00b      	beq.n	800b56e <USBD_StdDevReq+0x3a>
 800b556:	2b20      	cmp	r3, #32
 800b558:	d14f      	bne.n	800b5fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	4798      	blx	r3
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]
      break;
 800b56c:	e04a      	b.n	800b604 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	785b      	ldrb	r3, [r3, #1]
 800b572:	2b09      	cmp	r3, #9
 800b574:	d83b      	bhi.n	800b5ee <USBD_StdDevReq+0xba>
 800b576:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <USBD_StdDevReq+0x48>)
 800b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57c:	0800b5d1 	.word	0x0800b5d1
 800b580:	0800b5e5 	.word	0x0800b5e5
 800b584:	0800b5ef 	.word	0x0800b5ef
 800b588:	0800b5db 	.word	0x0800b5db
 800b58c:	0800b5ef 	.word	0x0800b5ef
 800b590:	0800b5af 	.word	0x0800b5af
 800b594:	0800b5a5 	.word	0x0800b5a5
 800b598:	0800b5ef 	.word	0x0800b5ef
 800b59c:	0800b5c7 	.word	0x0800b5c7
 800b5a0:	0800b5b9 	.word	0x0800b5b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f9de 	bl	800b968 <USBD_GetDescriptor>
          break;
 800b5ac:	e024      	b.n	800b5f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fb43 	bl	800bc3c <USBD_SetAddress>
          break;
 800b5b6:	e01f      	b.n	800b5f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fb82 	bl	800bcc4 <USBD_SetConfig>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
          break;
 800b5c4:	e018      	b.n	800b5f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fc21 	bl	800be10 <USBD_GetConfig>
          break;
 800b5ce:	e013      	b.n	800b5f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fc52 	bl	800be7c <USBD_GetStatus>
          break;
 800b5d8:	e00e      	b.n	800b5f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fc81 	bl	800bee4 <USBD_SetFeature>
          break;
 800b5e2:	e009      	b.n	800b5f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fc90 	bl	800bf0c <USBD_ClrFeature>
          break;
 800b5ec:	e004      	b.n	800b5f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fce7 	bl	800bfc4 <USBD_CtlError>
          break;
 800b5f6:	bf00      	nop
      }
      break;
 800b5f8:	e004      	b.n	800b604 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fce1 	bl	800bfc4 <USBD_CtlError>
      break;
 800b602:	bf00      	nop
  }

  return ret;
 800b604:	7bfb      	ldrb	r3, [r7, #15]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop

0800b610 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b626:	2b40      	cmp	r3, #64	; 0x40
 800b628:	d005      	beq.n	800b636 <USBD_StdItfReq+0x26>
 800b62a:	2b40      	cmp	r3, #64	; 0x40
 800b62c:	d82f      	bhi.n	800b68e <USBD_StdItfReq+0x7e>
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <USBD_StdItfReq+0x26>
 800b632:	2b20      	cmp	r3, #32
 800b634:	d12b      	bne.n	800b68e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	3b01      	subs	r3, #1
 800b640:	2b02      	cmp	r3, #2
 800b642:	d81d      	bhi.n	800b680 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	889b      	ldrh	r3, [r3, #4]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d813      	bhi.n	800b676 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	4798      	blx	r3
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	88db      	ldrh	r3, [r3, #6]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d110      	bne.n	800b68a <USBD_StdItfReq+0x7a>
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10d      	bne.n	800b68a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fd73 	bl	800c15a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b674:	e009      	b.n	800b68a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fca3 	bl	800bfc4 <USBD_CtlError>
          break;
 800b67e:	e004      	b.n	800b68a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fc9e 	bl	800bfc4 <USBD_CtlError>
          break;
 800b688:	e000      	b.n	800b68c <USBD_StdItfReq+0x7c>
          break;
 800b68a:	bf00      	nop
      }
      break;
 800b68c:	e004      	b.n	800b698 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fc97 	bl	800bfc4 <USBD_CtlError>
      break;
 800b696:	bf00      	nop
  }

  return ret;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	889b      	ldrh	r3, [r3, #4]
 800b6b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6be:	2b40      	cmp	r3, #64	; 0x40
 800b6c0:	d007      	beq.n	800b6d2 <USBD_StdEPReq+0x30>
 800b6c2:	2b40      	cmp	r3, #64	; 0x40
 800b6c4:	f200 8145 	bhi.w	800b952 <USBD_StdEPReq+0x2b0>
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00c      	beq.n	800b6e6 <USBD_StdEPReq+0x44>
 800b6cc:	2b20      	cmp	r3, #32
 800b6ce:	f040 8140 	bne.w	800b952 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	4798      	blx	r3
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e4:	e13a      	b.n	800b95c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	785b      	ldrb	r3, [r3, #1]
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d007      	beq.n	800b6fe <USBD_StdEPReq+0x5c>
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	f300 8129 	bgt.w	800b946 <USBD_StdEPReq+0x2a4>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d07f      	beq.n	800b7f8 <USBD_StdEPReq+0x156>
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d03c      	beq.n	800b776 <USBD_StdEPReq+0xd4>
 800b6fc:	e123      	b.n	800b946 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b02      	cmp	r3, #2
 800b708:	d002      	beq.n	800b710 <USBD_StdEPReq+0x6e>
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d016      	beq.n	800b73c <USBD_StdEPReq+0x9a>
 800b70e:	e02c      	b.n	800b76a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00d      	beq.n	800b732 <USBD_StdEPReq+0x90>
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	2b80      	cmp	r3, #128	; 0x80
 800b71a:	d00a      	beq.n	800b732 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f002 fe03 	bl	800e32c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b726:	2180      	movs	r1, #128	; 0x80
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f002 fdff 	bl	800e32c <USBD_LL_StallEP>
 800b72e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b730:	e020      	b.n	800b774 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fc45 	bl	800bfc4 <USBD_CtlError>
              break;
 800b73a:	e01b      	b.n	800b774 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	885b      	ldrh	r3, [r3, #2]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10e      	bne.n	800b762 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00b      	beq.n	800b762 <USBD_StdEPReq+0xc0>
 800b74a:	7bbb      	ldrb	r3, [r7, #14]
 800b74c:	2b80      	cmp	r3, #128	; 0x80
 800b74e:	d008      	beq.n	800b762 <USBD_StdEPReq+0xc0>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	88db      	ldrh	r3, [r3, #6]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d104      	bne.n	800b762 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b758:	7bbb      	ldrb	r3, [r7, #14]
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f002 fde5 	bl	800e32c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fcf9 	bl	800c15a <USBD_CtlSendStatus>

              break;
 800b768:	e004      	b.n	800b774 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fc29 	bl	800bfc4 <USBD_CtlError>
              break;
 800b772:	bf00      	nop
          }
          break;
 800b774:	e0ec      	b.n	800b950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d002      	beq.n	800b788 <USBD_StdEPReq+0xe6>
 800b782:	2b03      	cmp	r3, #3
 800b784:	d016      	beq.n	800b7b4 <USBD_StdEPReq+0x112>
 800b786:	e030      	b.n	800b7ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b788:	7bbb      	ldrb	r3, [r7, #14]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00d      	beq.n	800b7aa <USBD_StdEPReq+0x108>
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	2b80      	cmp	r3, #128	; 0x80
 800b792:	d00a      	beq.n	800b7aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b794:	7bbb      	ldrb	r3, [r7, #14]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f002 fdc7 	bl	800e32c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b79e:	2180      	movs	r1, #128	; 0x80
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f002 fdc3 	bl	800e32c <USBD_LL_StallEP>
 800b7a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7a8:	e025      	b.n	800b7f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fc09 	bl	800bfc4 <USBD_CtlError>
              break;
 800b7b2:	e020      	b.n	800b7f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	885b      	ldrh	r3, [r3, #2]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d11b      	bne.n	800b7f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d004      	beq.n	800b7d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7c6:	7bbb      	ldrb	r3, [r7, #14]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f002 fdcd 	bl	800e36a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fcc2 	bl	800c15a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	4798      	blx	r3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b7e8:	e004      	b.n	800b7f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fbe9 	bl	800bfc4 <USBD_CtlError>
              break;
 800b7f2:	e000      	b.n	800b7f6 <USBD_StdEPReq+0x154>
              break;
 800b7f4:	bf00      	nop
          }
          break;
 800b7f6:	e0ab      	b.n	800b950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b02      	cmp	r3, #2
 800b802:	d002      	beq.n	800b80a <USBD_StdEPReq+0x168>
 800b804:	2b03      	cmp	r3, #3
 800b806:	d032      	beq.n	800b86e <USBD_StdEPReq+0x1cc>
 800b808:	e097      	b.n	800b93a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b80a:	7bbb      	ldrb	r3, [r7, #14]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d007      	beq.n	800b820 <USBD_StdEPReq+0x17e>
 800b810:	7bbb      	ldrb	r3, [r7, #14]
 800b812:	2b80      	cmp	r3, #128	; 0x80
 800b814:	d004      	beq.n	800b820 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fbd3 	bl	800bfc4 <USBD_CtlError>
                break;
 800b81e:	e091      	b.n	800b944 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b824:	2b00      	cmp	r3, #0
 800b826:	da0b      	bge.n	800b840 <USBD_StdEPReq+0x19e>
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b82e:	4613      	mov	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	3310      	adds	r3, #16
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	4413      	add	r3, r2
 800b83c:	3304      	adds	r3, #4
 800b83e:	e00b      	b.n	800b858 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b846:	4613      	mov	r3, r2
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4413      	add	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	4413      	add	r3, r2
 800b856:	3304      	adds	r3, #4
 800b858:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2200      	movs	r2, #0
 800b85e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2202      	movs	r2, #2
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fc1d 	bl	800c0a6 <USBD_CtlSendData>
              break;
 800b86c:	e06a      	b.n	800b944 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b86e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b872:	2b00      	cmp	r3, #0
 800b874:	da11      	bge.n	800b89a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	f003 020f 	and.w	r2, r3, #15
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	440b      	add	r3, r1
 800b888:	3324      	adds	r3, #36	; 0x24
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d117      	bne.n	800b8c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fb96 	bl	800bfc4 <USBD_CtlError>
                  break;
 800b898:	e054      	b.n	800b944 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b89a:	7bbb      	ldrb	r3, [r7, #14]
 800b89c:	f003 020f 	and.w	r2, r3, #15
 800b8a0:	6879      	ldr	r1, [r7, #4]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d104      	bne.n	800b8c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fb83 	bl	800bfc4 <USBD_CtlError>
                  break;
 800b8be:	e041      	b.n	800b944 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	da0b      	bge.n	800b8e0 <USBD_StdEPReq+0x23e>
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	3310      	adds	r3, #16
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	4413      	add	r3, r2
 800b8dc:	3304      	adds	r3, #4
 800b8de:	e00b      	b.n	800b8f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <USBD_StdEPReq+0x264>
 800b900:	7bbb      	ldrb	r3, [r7, #14]
 800b902:	2b80      	cmp	r3, #128	; 0x80
 800b904:	d103      	bne.n	800b90e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	e00e      	b.n	800b92c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b90e:	7bbb      	ldrb	r3, [r7, #14]
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f002 fd48 	bl	800e3a8 <USBD_LL_IsStallEP>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2201      	movs	r2, #1
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	e002      	b.n	800b92c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2202      	movs	r2, #2
 800b930:	4619      	mov	r1, r3
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fbb7 	bl	800c0a6 <USBD_CtlSendData>
              break;
 800b938:	e004      	b.n	800b944 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fb41 	bl	800bfc4 <USBD_CtlError>
              break;
 800b942:	bf00      	nop
          }
          break;
 800b944:	e004      	b.n	800b950 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fb3b 	bl	800bfc4 <USBD_CtlError>
          break;
 800b94e:	bf00      	nop
      }
      break;
 800b950:	e004      	b.n	800b95c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fb35 	bl	800bfc4 <USBD_CtlError>
      break;
 800b95a:	bf00      	nop
  }

  return ret;
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b97a:	2300      	movs	r3, #0
 800b97c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	885b      	ldrh	r3, [r3, #2]
 800b982:	0a1b      	lsrs	r3, r3, #8
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	2b06      	cmp	r3, #6
 800b98a:	f200 8128 	bhi.w	800bbde <USBD_GetDescriptor+0x276>
 800b98e:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <USBD_GetDescriptor+0x2c>)
 800b990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b994:	0800b9b1 	.word	0x0800b9b1
 800b998:	0800b9c9 	.word	0x0800b9c9
 800b99c:	0800ba09 	.word	0x0800ba09
 800b9a0:	0800bbdf 	.word	0x0800bbdf
 800b9a4:	0800bbdf 	.word	0x0800bbdf
 800b9a8:	0800bb7f 	.word	0x0800bb7f
 800b9ac:	0800bbab 	.word	0x0800bbab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	7c12      	ldrb	r2, [r2, #16]
 800b9bc:	f107 0108 	add.w	r1, r7, #8
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4798      	blx	r3
 800b9c4:	60f8      	str	r0, [r7, #12]
      break;
 800b9c6:	e112      	b.n	800bbee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	7c1b      	ldrb	r3, [r3, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d10d      	bne.n	800b9ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d8:	f107 0208 	add.w	r2, r7, #8
 800b9dc:	4610      	mov	r0, r2
 800b9de:	4798      	blx	r3
 800b9e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9ea:	e100      	b.n	800bbee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	f107 0208 	add.w	r2, r7, #8
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	4798      	blx	r3
 800b9fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3301      	adds	r3, #1
 800ba02:	2202      	movs	r2, #2
 800ba04:	701a      	strb	r2, [r3, #0]
      break;
 800ba06:	e0f2      	b.n	800bbee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	885b      	ldrh	r3, [r3, #2]
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b05      	cmp	r3, #5
 800ba10:	f200 80ac 	bhi.w	800bb6c <USBD_GetDescriptor+0x204>
 800ba14:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <USBD_GetDescriptor+0xb4>)
 800ba16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1a:	bf00      	nop
 800ba1c:	0800ba35 	.word	0x0800ba35
 800ba20:	0800ba69 	.word	0x0800ba69
 800ba24:	0800ba9d 	.word	0x0800ba9d
 800ba28:	0800bad1 	.word	0x0800bad1
 800ba2c:	0800bb05 	.word	0x0800bb05
 800ba30:	0800bb39 	.word	0x0800bb39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00b      	beq.n	800ba58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	7c12      	ldrb	r2, [r2, #16]
 800ba4c:	f107 0108 	add.w	r1, r7, #8
 800ba50:	4610      	mov	r0, r2
 800ba52:	4798      	blx	r3
 800ba54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba56:	e091      	b.n	800bb7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fab2 	bl	800bfc4 <USBD_CtlError>
            err++;
 800ba60:	7afb      	ldrb	r3, [r7, #11]
 800ba62:	3301      	adds	r3, #1
 800ba64:	72fb      	strb	r3, [r7, #11]
          break;
 800ba66:	e089      	b.n	800bb7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	7c12      	ldrb	r2, [r2, #16]
 800ba80:	f107 0108 	add.w	r1, r7, #8
 800ba84:	4610      	mov	r0, r2
 800ba86:	4798      	blx	r3
 800ba88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba8a:	e077      	b.n	800bb7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fa98 	bl	800bfc4 <USBD_CtlError>
            err++;
 800ba94:	7afb      	ldrb	r3, [r7, #11]
 800ba96:	3301      	adds	r3, #1
 800ba98:	72fb      	strb	r3, [r7, #11]
          break;
 800ba9a:	e06f      	b.n	800bb7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00b      	beq.n	800bac0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	7c12      	ldrb	r2, [r2, #16]
 800bab4:	f107 0108 	add.w	r1, r7, #8
 800bab8:	4610      	mov	r0, r2
 800baba:	4798      	blx	r3
 800babc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800babe:	e05d      	b.n	800bb7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fa7e 	bl	800bfc4 <USBD_CtlError>
            err++;
 800bac8:	7afb      	ldrb	r3, [r7, #11]
 800baca:	3301      	adds	r3, #1
 800bacc:	72fb      	strb	r3, [r7, #11]
          break;
 800bace:	e055      	b.n	800bb7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00b      	beq.n	800baf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	7c12      	ldrb	r2, [r2, #16]
 800bae8:	f107 0108 	add.w	r1, r7, #8
 800baec:	4610      	mov	r0, r2
 800baee:	4798      	blx	r3
 800baf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baf2:	e043      	b.n	800bb7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fa64 	bl	800bfc4 <USBD_CtlError>
            err++;
 800bafc:	7afb      	ldrb	r3, [r7, #11]
 800bafe:	3301      	adds	r3, #1
 800bb00:	72fb      	strb	r3, [r7, #11]
          break;
 800bb02:	e03b      	b.n	800bb7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	7c12      	ldrb	r2, [r2, #16]
 800bb1c:	f107 0108 	add.w	r1, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb26:	e029      	b.n	800bb7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa4a 	bl	800bfc4 <USBD_CtlError>
            err++;
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	3301      	adds	r3, #1
 800bb34:	72fb      	strb	r3, [r7, #11]
          break;
 800bb36:	e021      	b.n	800bb7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	7c12      	ldrb	r2, [r2, #16]
 800bb50:	f107 0108 	add.w	r1, r7, #8
 800bb54:	4610      	mov	r0, r2
 800bb56:	4798      	blx	r3
 800bb58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb5a:	e00f      	b.n	800bb7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa30 	bl	800bfc4 <USBD_CtlError>
            err++;
 800bb64:	7afb      	ldrb	r3, [r7, #11]
 800bb66:	3301      	adds	r3, #1
 800bb68:	72fb      	strb	r3, [r7, #11]
          break;
 800bb6a:	e007      	b.n	800bb7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fa28 	bl	800bfc4 <USBD_CtlError>
          err++;
 800bb74:	7afb      	ldrb	r3, [r7, #11]
 800bb76:	3301      	adds	r3, #1
 800bb78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bb7a:	bf00      	nop
      }
      break;
 800bb7c:	e037      	b.n	800bbee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7c1b      	ldrb	r3, [r3, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d109      	bne.n	800bb9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8e:	f107 0208 	add.w	r2, r7, #8
 800bb92:	4610      	mov	r0, r2
 800bb94:	4798      	blx	r3
 800bb96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb98:	e029      	b.n	800bbee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fa11 	bl	800bfc4 <USBD_CtlError>
        err++;
 800bba2:	7afb      	ldrb	r3, [r7, #11]
 800bba4:	3301      	adds	r3, #1
 800bba6:	72fb      	strb	r3, [r7, #11]
      break;
 800bba8:	e021      	b.n	800bbee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7c1b      	ldrb	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10d      	bne.n	800bbce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbba:	f107 0208 	add.w	r2, r7, #8
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	4798      	blx	r3
 800bbc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	2207      	movs	r2, #7
 800bbca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbcc:	e00f      	b.n	800bbee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f9f7 	bl	800bfc4 <USBD_CtlError>
        err++;
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	72fb      	strb	r3, [r7, #11]
      break;
 800bbdc:	e007      	b.n	800bbee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f9ef 	bl	800bfc4 <USBD_CtlError>
      err++;
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	72fb      	strb	r3, [r7, #11]
      break;
 800bbec:	bf00      	nop
  }

  if (err != 0U)
 800bbee:	7afb      	ldrb	r3, [r7, #11]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d11e      	bne.n	800bc32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	88db      	ldrh	r3, [r3, #6]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d016      	beq.n	800bc2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bbfc:	893b      	ldrh	r3, [r7, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00e      	beq.n	800bc20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	88da      	ldrh	r2, [r3, #6]
 800bc06:	893b      	ldrh	r3, [r7, #8]
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	bf28      	it	cs
 800bc0c:	4613      	movcs	r3, r2
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc12:	893b      	ldrh	r3, [r7, #8]
 800bc14:	461a      	mov	r2, r3
 800bc16:	68f9      	ldr	r1, [r7, #12]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fa44 	bl	800c0a6 <USBD_CtlSendData>
 800bc1e:	e009      	b.n	800bc34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f9ce 	bl	800bfc4 <USBD_CtlError>
 800bc28:	e004      	b.n	800bc34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa95 	bl	800c15a <USBD_CtlSendStatus>
 800bc30:	e000      	b.n	800bc34 <USBD_GetDescriptor+0x2cc>
    return;
 800bc32:	bf00      	nop
  }
}
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop

0800bc3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	889b      	ldrh	r3, [r3, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d131      	bne.n	800bcb2 <USBD_SetAddress+0x76>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	88db      	ldrh	r3, [r3, #6]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d12d      	bne.n	800bcb2 <USBD_SetAddress+0x76>
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	885b      	ldrh	r3, [r3, #2]
 800bc5a:	2b7f      	cmp	r3, #127	; 0x7f
 800bc5c:	d829      	bhi.n	800bcb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	885b      	ldrh	r3, [r3, #2]
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d104      	bne.n	800bc80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f9a3 	bl	800bfc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc7e:	e01d      	b.n	800bcbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7bfa      	ldrb	r2, [r7, #15]
 800bc84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f002 fbb7 	bl	800e400 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fa61 	bl	800c15a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d004      	beq.n	800bca8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2202      	movs	r2, #2
 800bca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bca6:	e009      	b.n	800bcbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb0:	e004      	b.n	800bcbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f985 	bl	800bfc4 <USBD_CtlError>
  }
}
 800bcba:	bf00      	nop
 800bcbc:	bf00      	nop
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	885b      	ldrh	r3, [r3, #2]
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	4b4c      	ldr	r3, [pc, #304]	; (800be0c <USBD_SetConfig+0x148>)
 800bcda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bcdc:	4b4b      	ldr	r3, [pc, #300]	; (800be0c <USBD_SetConfig+0x148>)
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d905      	bls.n	800bcf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f96c 	bl	800bfc4 <USBD_CtlError>
    return USBD_FAIL;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e088      	b.n	800be02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d002      	beq.n	800bd02 <USBD_SetConfig+0x3e>
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d025      	beq.n	800bd4c <USBD_SetConfig+0x88>
 800bd00:	e071      	b.n	800bde6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd02:	4b42      	ldr	r3, [pc, #264]	; (800be0c <USBD_SetConfig+0x148>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d01c      	beq.n	800bd44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bd0a:	4b40      	ldr	r3, [pc, #256]	; (800be0c <USBD_SetConfig+0x148>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd14:	4b3d      	ldr	r3, [pc, #244]	; (800be0c <USBD_SetConfig+0x148>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff f948 	bl	800afb0 <USBD_SetClassConfig>
 800bd20:	4603      	mov	r3, r0
 800bd22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d004      	beq.n	800bd34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f949 	bl	800bfc4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd32:	e065      	b.n	800be00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fa10 	bl	800c15a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd42:	e05d      	b.n	800be00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fa08 	bl	800c15a <USBD_CtlSendStatus>
      break;
 800bd4a:	e059      	b.n	800be00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bd4c:	4b2f      	ldr	r3, [pc, #188]	; (800be0c <USBD_SetConfig+0x148>)
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d112      	bne.n	800bd7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2202      	movs	r2, #2
 800bd58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bd5c:	4b2b      	ldr	r3, [pc, #172]	; (800be0c <USBD_SetConfig+0x148>)
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	461a      	mov	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd66:	4b29      	ldr	r3, [pc, #164]	; (800be0c <USBD_SetConfig+0x148>)
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff f93b 	bl	800afe8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f9f1 	bl	800c15a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd78:	e042      	b.n	800be00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bd7a:	4b24      	ldr	r3, [pc, #144]	; (800be0c <USBD_SetConfig+0x148>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d02a      	beq.n	800bdde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff f929 	bl	800afe8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd96:	4b1d      	ldr	r3, [pc, #116]	; (800be0c <USBD_SetConfig+0x148>)
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bda0:	4b1a      	ldr	r3, [pc, #104]	; (800be0c <USBD_SetConfig+0x148>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff f902 	bl	800afb0 <USBD_SetClassConfig>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00f      	beq.n	800bdd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 f903 	bl	800bfc4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7ff f90e 	bl	800afe8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2202      	movs	r2, #2
 800bdd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bdd4:	e014      	b.n	800be00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f9bf 	bl	800c15a <USBD_CtlSendStatus>
      break;
 800bddc:	e010      	b.n	800be00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f9bb 	bl	800c15a <USBD_CtlSendStatus>
      break;
 800bde4:	e00c      	b.n	800be00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f8eb 	bl	800bfc4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdee:	4b07      	ldr	r3, [pc, #28]	; (800be0c <USBD_SetConfig+0x148>)
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f7ff f8f7 	bl	800afe8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	73fb      	strb	r3, [r7, #15]
      break;
 800bdfe:	bf00      	nop
  }

  return ret;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	2000036c 	.word	0x2000036c

0800be10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	88db      	ldrh	r3, [r3, #6]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d004      	beq.n	800be2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f8cd 	bl	800bfc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be2a:	e023      	b.n	800be74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b02      	cmp	r3, #2
 800be36:	dc02      	bgt.n	800be3e <USBD_GetConfig+0x2e>
 800be38:	2b00      	cmp	r3, #0
 800be3a:	dc03      	bgt.n	800be44 <USBD_GetConfig+0x34>
 800be3c:	e015      	b.n	800be6a <USBD_GetConfig+0x5a>
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d00b      	beq.n	800be5a <USBD_GetConfig+0x4a>
 800be42:	e012      	b.n	800be6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3308      	adds	r3, #8
 800be4e:	2201      	movs	r2, #1
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f927 	bl	800c0a6 <USBD_CtlSendData>
        break;
 800be58:	e00c      	b.n	800be74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3304      	adds	r3, #4
 800be5e:	2201      	movs	r2, #1
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f91f 	bl	800c0a6 <USBD_CtlSendData>
        break;
 800be68:	e004      	b.n	800be74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f8a9 	bl	800bfc4 <USBD_CtlError>
        break;
 800be72:	bf00      	nop
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	3b01      	subs	r3, #1
 800be90:	2b02      	cmp	r3, #2
 800be92:	d81e      	bhi.n	800bed2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	88db      	ldrh	r3, [r3, #6]
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d004      	beq.n	800bea6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800be9c:	6839      	ldr	r1, [r7, #0]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f890 	bl	800bfc4 <USBD_CtlError>
        break;
 800bea4:	e01a      	b.n	800bedc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d005      	beq.n	800bec2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	f043 0202 	orr.w	r2, r3, #2
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	330c      	adds	r3, #12
 800bec6:	2202      	movs	r2, #2
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f8eb 	bl	800c0a6 <USBD_CtlSendData>
      break;
 800bed0:	e004      	b.n	800bedc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f875 	bl	800bfc4 <USBD_CtlError>
      break;
 800beda:	bf00      	nop
  }
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	885b      	ldrh	r3, [r3, #2]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d106      	bne.n	800bf04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f92b 	bl	800c15a <USBD_CtlSendStatus>
  }
}
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d80b      	bhi.n	800bf3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	885b      	ldrh	r3, [r3, #2]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d10c      	bne.n	800bf46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f910 	bl	800c15a <USBD_CtlSendStatus>
      }
      break;
 800bf3a:	e004      	b.n	800bf46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f840 	bl	800bfc4 <USBD_CtlError>
      break;
 800bf44:	e000      	b.n	800bf48 <USBD_ClrFeature+0x3c>
      break;
 800bf46:	bf00      	nop
  }
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	781a      	ldrb	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	781a      	ldrb	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	3301      	adds	r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fabb 	bl	800b4f6 <SWAPBYTE>
 800bf80:	4603      	mov	r3, r0
 800bf82:	461a      	mov	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3301      	adds	r3, #1
 800bf92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f7ff faae 	bl	800b4f6 <SWAPBYTE>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7ff faa1 	bl	800b4f6 <SWAPBYTE>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	80da      	strh	r2, [r3, #6]
}
 800bfbc:	bf00      	nop
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfce:	2180      	movs	r1, #128	; 0x80
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f002 f9ab 	bl	800e32c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f002 f9a7 	bl	800e32c <USBD_LL_StallEP>
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b086      	sub	sp, #24
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bff2:	2300      	movs	r3, #0
 800bff4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d036      	beq.n	800c06a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c000:	6938      	ldr	r0, [r7, #16]
 800c002:	f000 f836 	bl	800c072 <USBD_GetLen>
 800c006:	4603      	mov	r3, r0
 800c008:	3301      	adds	r3, #1
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	4413      	add	r3, r2
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	7812      	ldrb	r2, [r2, #0]
 800c01e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	3301      	adds	r3, #1
 800c024:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	4413      	add	r3, r2
 800c02c:	2203      	movs	r2, #3
 800c02e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c030:	7dfb      	ldrb	r3, [r7, #23]
 800c032:	3301      	adds	r3, #1
 800c034:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c036:	e013      	b.n	800c060 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c038:	7dfb      	ldrb	r3, [r7, #23]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	7812      	ldrb	r2, [r2, #0]
 800c042:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	3301      	adds	r3, #1
 800c048:	613b      	str	r3, [r7, #16]
    idx++;
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	3301      	adds	r3, #1
 800c04e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	4413      	add	r3, r2
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
    idx++;
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	3301      	adds	r3, #1
 800c05e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1e7      	bne.n	800c038 <USBD_GetString+0x52>
 800c068:	e000      	b.n	800c06c <USBD_GetString+0x86>
    return;
 800c06a:	bf00      	nop
  }
}
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c072:	b480      	push	{r7}
 800c074:	b085      	sub	sp, #20
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c07a:	2300      	movs	r3, #0
 800c07c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c082:	e005      	b.n	800c090 <USBD_GetLen+0x1e>
  {
    len++;
 800c084:	7bfb      	ldrb	r3, [r7, #15]
 800c086:	3301      	adds	r3, #1
 800c088:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	3301      	adds	r3, #1
 800c08e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1f5      	bne.n	800c084 <USBD_GetLen+0x12>
  }

  return len;
 800c098:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f002 f9b6 	bl	800e43e <USBD_LL_Transmit>

  return USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f002 f9a5 	bl	800e43e <USBD_LL_Transmit>

  return USBD_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2203      	movs	r2, #3
 800c10e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	2100      	movs	r1, #0
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f002 f9a9 	bl	800e480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	2100      	movs	r1, #0
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f002 f998 	bl	800e480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2204      	movs	r2, #4
 800c166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c16a:	2300      	movs	r3, #0
 800c16c:	2200      	movs	r2, #0
 800c16e:	2100      	movs	r1, #0
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f002 f964 	bl	800e43e <USBD_LL_Transmit>

  return USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2205      	movs	r2, #5
 800c18c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c190:	2300      	movs	r3, #0
 800c192:	2200      	movs	r2, #0
 800c194:	2100      	movs	r1, #0
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f002 f972 	bl	800e480 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	af00      	add	r7, sp, #0

	switch(kApplicationBase.eApplicationState)
 800c1ac:	4b19      	ldr	r3, [pc, #100]	; (800c214 <ApplicationPerform+0x6c>)
 800c1ae:	7e5b      	ldrb	r3, [r3, #25]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b03      	cmp	r3, #3
 800c1b4:	d826      	bhi.n	800c204 <ApplicationPerform+0x5c>
 800c1b6:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <ApplicationPerform+0x14>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1cd 	.word	0x0800c1cd
 800c1c0:	0800c1db 	.word	0x0800c1db
 800c1c4:	0800c1ff 	.word	0x0800c1ff
 800c1c8:	0800c20d 	.word	0x0800c20d
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f7f4 febf 	bl	8000f50 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	f000 f8b2 	bl	800c33c <AppStateChangeRequest>
		break;
 800c1d8:	e019      	b.n	800c20e <ApplicationPerform+0x66>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800c1da:	f000 f8fb 	bl	800c3d4 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800c1de:	f000 fd1f 	bl	800cc20 <TempCollect_Initialize>
		DataHandler_Initialize();
 800c1e2:	f000 f93b 	bl	800c45c <DataHandler_Initialize>
		CommManager_Initialize();
 800c1e6:	f000 fd71 	bl	800cccc <CommManager_Initialize>
		EventSystem_Initialize();
 800c1ea:	f000 fb1b 	bl	800c824 <EventSystem_Initialize>
		TurnAllSensorOn();
 800c1ee:	f7f4 ff37 	bl	8001060 <TurnAllSensorOn>
		TurnOnSynchronousEvent(); //todo: add actual on/off functionality to synchronous timers
 800c1f2:	f000 f92b 	bl	800c44c <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800c1f6:	2002      	movs	r0, #2
 800c1f8:	f000 f8a0 	bl	800c33c <AppStateChangeRequest>
		break;
 800c1fc:	e007      	b.n	800c20e <ApplicationPerform+0x66>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800c1fe:	f000 f86d 	bl	800c2dc <AsynchronousTaskScheduler>
		break;
 800c202:	e004      	b.n	800c20e <ApplicationPerform+0x66>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800c204:	2010      	movs	r0, #16
 800c206:	f000 f90d 	bl	800c424 <AssertError>
		break;
 800c20a:	e000      	b.n	800c20e <ApplicationPerform+0x66>
		break;
 800c20c:	bf00      	nop
	}

}
 800c20e:	bf00      	nop
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20000370 	.word	0x20000370

0800c218 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800c218:	b480      	push	{r7}
 800c21a:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800c21c:	4b20      	ldr	r3, [pc, #128]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	b2db      	uxtb	r3, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	d006      	beq.n	800c234 <AsynchronousTaskTimerUpdate+0x1c>
	{
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800c226:	4b1e      	ldr	r3, [pc, #120]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c228:	885b      	ldrh	r3, [r3, #2]
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	3301      	adds	r3, #1
 800c22e:	b29a      	uxth	r2, r3
 800c230:	4b1b      	ldr	r3, [pc, #108]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c232:	805a      	strh	r2, [r3, #2]
	}
	if(kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800c234:	4b1a      	ldr	r3, [pc, #104]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c236:	791b      	ldrb	r3, [r3, #4]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d006      	beq.n	800c24c <AsynchronousTaskTimerUpdate+0x34>
	{
		kApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800c23e:	4b18      	ldr	r3, [pc, #96]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c240:	88db      	ldrh	r3, [r3, #6]
 800c242:	b29b      	uxth	r3, r3
 800c244:	3301      	adds	r3, #1
 800c246:	b29a      	uxth	r2, r3
 800c248:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c24a:	80da      	strh	r2, [r3, #6]
	}
	if(kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800c24c:	4b14      	ldr	r3, [pc, #80]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c24e:	7a1b      	ldrb	r3, [r3, #8]
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	d006      	beq.n	800c264 <AsynchronousTaskTimerUpdate+0x4c>
	{
		kApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800c256:	4b12      	ldr	r3, [pc, #72]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c258:	895b      	ldrh	r3, [r3, #10]
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	3301      	adds	r3, #1
 800c25e:	b29a      	uxth	r2, r3
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c262:	815a      	strh	r2, [r3, #10]
	}
	if(kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800c264:	4b0e      	ldr	r3, [pc, #56]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c266:	7b1b      	ldrb	r3, [r3, #12]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d006      	beq.n	800c27c <AsynchronousTaskTimerUpdate+0x64>
	{
		kApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800c26e:	4b0c      	ldr	r3, [pc, #48]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c270:	89db      	ldrh	r3, [r3, #14]
 800c272:	b29b      	uxth	r3, r3
 800c274:	3301      	adds	r3, #1
 800c276:	b29a      	uxth	r2, r3
 800c278:	4b09      	ldr	r3, [pc, #36]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c27a:	81da      	strh	r2, [r3, #14]
	}
	if(kApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800c27c:	4b08      	ldr	r3, [pc, #32]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c27e:	7c1b      	ldrb	r3, [r3, #16]
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	d006      	beq.n	800c294 <AsynchronousTaskTimerUpdate+0x7c>
	{
		kApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800c286:	4b06      	ldr	r3, [pc, #24]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c288:	8a5b      	ldrh	r3, [r3, #18]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	3301      	adds	r3, #1
 800c28e:	b29a      	uxth	r2, r3
 800c290:	4b03      	ldr	r3, [pc, #12]	; (800c2a0 <AsynchronousTaskTimerUpdate+0x88>)
 800c292:	825a      	strh	r2, [r3, #18]
	}

}
 800c294:	bf00      	nop
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	20000370 	.word	0x20000370

0800c2a4 <AsynchronousTask_1ms>:

/* Internal functions */

void AsynchronousTask_1ms()
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	af00      	add	r7, sp, #0
	 * 10 us with no frame assembly,
	 * 70 us with frame assembly
	 *
	 * two functions (22.12.2201): EventSystem and CommManager
	 */
	EventSystem_HandleEvent();
 800c2a8:	f000 fac8 	bl	800c83c <EventSystem_HandleEvent>
	CommManager_Operate();
 800c2ac:	f000 fd1a 	bl	800cce4 <CommManager_Operate>
}
 800c2b0:	bf00      	nop
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <AsynchronousTask_10ms>:

void AsynchronousTask_10ms()
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	af00      	add	r7, sp, #0
	 * 5-10 us with no communication
	 * 1-9 us with communication
	 *
	 * one function (22.12.2201): TempCollect
	 */
	TempCollect_Operate();
 800c2b8:	f000 fb3e 	bl	800c938 <TempCollect_Operate>
}
 800c2bc:	bf00      	nop
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
	 * 8-11 us with no communication
	 * same with communication
	 *
	 * two functions (22.12.2201): USB_Check and DataHandler
	 */
	USB_CheckForUSBConnection();
 800c2c4:	f000 fe82 	bl	800cfcc <USB_CheckForUSBConnection>
	DataHandler_Operate();
 800c2c8:	f000 fa20 	bl	800c70c <DataHandler_Operate>
}
 800c2cc:	bf00      	nop
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
	 * 999 ms without communication
	 * same with communication
	 *
	 * Measured 22.12.2021
	 */
	ToggleLED_B();
 800c2d4:	f7f4 fe74 	bl	8000fc0 <ToggleLED_B>
}
 800c2d8:	bf00      	nop
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800c2e0:	4b15      	ldr	r3, [pc, #84]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c2e2:	885b      	ldrh	r3, [r3, #2]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2ea:	d304      	bcc.n	800c2f6 <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800c2ec:	f7ff fff0 	bl	800c2d0 <AsynchronousTask_1000ms>
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800c2f0:	4b11      	ldr	r3, [pc, #68]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	805a      	strh	r2, [r3, #2]
	}

	if(kApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800c2f6:	4b10      	ldr	r3, [pc, #64]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c2f8:	88db      	ldrh	r3, [r3, #6]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	2b63      	cmp	r3, #99	; 0x63
 800c2fe:	d904      	bls.n	800c30a <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800c300:	f7ff ffde 	bl	800c2c0 <AsynchronousTask_100ms>
		kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c306:	2200      	movs	r2, #0
 800c308:	80da      	strh	r2, [r3, #6]
	}

	if(kApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800c30a:	4b0b      	ldr	r3, [pc, #44]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c30c:	895b      	ldrh	r3, [r3, #10]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	2b09      	cmp	r3, #9
 800c312:	d904      	bls.n	800c31e <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800c314:	f7ff ffce 	bl	800c2b4 <AsynchronousTask_10ms>
		kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800c318:	4b07      	ldr	r3, [pc, #28]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	815a      	strh	r2, [r3, #10]
	}

 	if(kApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800c31e:	4b06      	ldr	r3, [pc, #24]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c320:	89db      	ldrh	r3, [r3, #14]
 800c322:	b29b      	uxth	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	d004      	beq.n	800c332 <AsynchronousTaskScheduler+0x56>
	{
		AsynchronousTask_1ms();
 800c328:	f7ff ffbc 	bl	800c2a4 <AsynchronousTask_1ms>
		kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800c32c:	4b02      	ldr	r3, [pc, #8]	; (800c338 <AsynchronousTaskScheduler+0x5c>)
 800c32e:	2200      	movs	r2, #0
 800c330:	81da      	strh	r2, [r3, #14]
	}

}
 800c332:	bf00      	nop
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	20000370 	.word	0x20000370

0800c33c <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	71fb      	strb	r3, [r7, #7]
	switch(kApplicationBase.eApplicationState)
 800c346:	4b22      	ldr	r3, [pc, #136]	; (800c3d0 <AppStateChangeRequest+0x94>)
 800c348:	7e5b      	ldrb	r3, [r3, #25]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b03      	cmp	r3, #3
 800c34e:	d837      	bhi.n	800c3c0 <AppStateChangeRequest+0x84>
 800c350:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <AppStateChangeRequest+0x1c>)
 800c352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c356:	bf00      	nop
 800c358:	0800c369 	.word	0x0800c369
 800c35c:	0800c37f 	.word	0x0800c37f
 800c360:	0800c395 	.word	0x0800c395
 800c364:	0800c3b9 	.word	0x0800c3b9
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d103      	bne.n	800c376 <AppStateChangeRequest+0x3a>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800c36e:	4b18      	ldr	r3, [pc, #96]	; (800c3d0 <AppStateChangeRequest+0x94>)
 800c370:	2201      	movs	r2, #1
 800c372:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800c374:	e028      	b.n	800c3c8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800c376:	2020      	movs	r0, #32
 800c378:	f000 f854 	bl	800c424 <AssertError>
		break;
 800c37c:	e024      	b.n	800c3c8 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800c37e:	79fb      	ldrb	r3, [r7, #7]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d103      	bne.n	800c38c <AppStateChangeRequest+0x50>
		{
			kApplicationBase.eApplicationState = eApp_Perform;
 800c384:	4b12      	ldr	r3, [pc, #72]	; (800c3d0 <AppStateChangeRequest+0x94>)
 800c386:	2202      	movs	r2, #2
 800c388:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800c38a:	e01d      	b.n	800c3c8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800c38c:	2020      	movs	r0, #32
 800c38e:	f000 f849 	bl	800c424 <AssertError>
		break;
 800c392:	e019      	b.n	800c3c8 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d103      	bne.n	800c3a2 <AppStateChangeRequest+0x66>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800c39a:	4b0d      	ldr	r3, [pc, #52]	; (800c3d0 <AppStateChangeRequest+0x94>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800c3a0:	e012      	b.n	800c3c8 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800c3a2:	79fb      	ldrb	r3, [r7, #7]
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d103      	bne.n	800c3b0 <AppStateChangeRequest+0x74>
			kApplicationBase.eApplicationState = eApp_Shutdown;
 800c3a8:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <AppStateChangeRequest+0x94>)
 800c3aa:	2203      	movs	r2, #3
 800c3ac:	765a      	strb	r2, [r3, #25]
		break;
 800c3ae:	e00b      	b.n	800c3c8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800c3b0:	2020      	movs	r0, #32
 800c3b2:	f000 f837 	bl	800c424 <AssertError>
		break;
 800c3b6:	e007      	b.n	800c3c8 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800c3b8:	2020      	movs	r0, #32
 800c3ba:	f000 f833 	bl	800c424 <AssertError>
		break;
 800c3be:	e003      	b.n	800c3c8 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800c3c0:	2020      	movs	r0, #32
 800c3c2:	f000 f82f 	bl	800c424 <AssertError>
		break;
 800c3c6:	bf00      	nop
	}

}
 800c3c8:	bf00      	nop
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20000370 	.word	0x20000370

0800c3d4 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	af00      	add	r7, sp, #0
	kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800c3d8:	4b11      	ldr	r3, [pc, #68]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	701a      	strb	r2, [r3, #0]
	kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800c3de:	4b10      	ldr	r3, [pc, #64]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	711a      	strb	r2, [r3, #4]
	kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	721a      	strb	r2, [r3, #8]
	kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800c3ea:	4b0d      	ldr	r3, [pc, #52]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	731a      	strb	r2, [r3, #12]
	kApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	741a      	strb	r2, [r3, #16]

	kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800c3f6:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	805a      	strh	r2, [r3, #2]
	kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800c3fc:	4b08      	ldr	r3, [pc, #32]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	80da      	strh	r2, [r3, #6]
	kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800c402:	4b07      	ldr	r3, [pc, #28]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c404:	2200      	movs	r2, #0
 800c406:	815a      	strh	r2, [r3, #10]
	kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800c408:	4b05      	ldr	r3, [pc, #20]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	81da      	strh	r2, [r3, #14]
	kApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800c40e:	4b04      	ldr	r3, [pc, #16]	; (800c420 <AppEnableResetTaskTimers+0x4c>)
 800c410:	2200      	movs	r2, #0
 800c412:	825a      	strh	r2, [r3, #18]
}
 800c414:	bf00      	nop
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20000370 	.word	0x20000370

0800c424 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	80fb      	strh	r3, [r7, #6]
	kApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800c42e:	4b06      	ldr	r3, [pc, #24]	; (800c448 <AssertError+0x24>)
 800c430:	695a      	ldr	r2, [r3, #20]
 800c432:	88fb      	ldrh	r3, [r7, #6]
 800c434:	4313      	orrs	r3, r2
 800c436:	4a04      	ldr	r2, [pc, #16]	; (800c448 <AssertError+0x24>)
 800c438:	6153      	str	r3, [r2, #20]
}
 800c43a:	bf00      	nop
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	20000370 	.word	0x20000370

0800c44c <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800c44c:	b480      	push	{r7}
 800c44e:	af00      	add	r7, sp, #0

}
 800c450:	bf00      	nop
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
	...

0800c45c <DataHandler_Initialize>:
static MemoryInterchange_t kMemoryInterchange;

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray );

void DataHandler_Initialize()
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800c460:	f000 f808 	bl	800c474 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800c464:	4b02      	ldr	r3, [pc, #8]	; (800c470 <DataHandler_Initialize+0x14>)
 800c466:	2201      	movs	r2, #1
 800c468:	701a      	strb	r2, [r3, #0]

}
 800c46a:	bf00      	nop
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	2000038c 	.word	0x2000038c

0800c474 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800c474:	b490      	push	{r4, r7}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800c47a:	4b35      	ldr	r3, [pc, #212]	; (800c550 <DataHandler_Reset+0xdc>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800c482:	4b33      	ldr	r3, [pc, #204]	; (800c550 <DataHandler_Reset+0xdc>)
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800c48a:	4b31      	ldr	r3, [pc, #196]	; (800c550 <DataHandler_Reset+0xdc>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800c492:	4b2f      	ldr	r3, [pc, #188]	; (800c550 <DataHandler_Reset+0xdc>)
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800c49a:	4b2d      	ldr	r3, [pc, #180]	; (800c550 <DataHandler_Reset+0xdc>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	kDataHandler.bReadyToSend = false;
 800c4a2:	4b2b      	ldr	r3, [pc, #172]	; (800c550 <DataHandler_Reset+0xdc>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	71fb      	strb	r3, [r7, #7]
 800c4ae:	e046      	b.n	800c53e <DataHandler_Reset+0xca>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	71bb      	strb	r3, [r7, #6]
 800c4b4:	e03d      	b.n	800c532 <DataHandler_Reset+0xbe>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800c4b6:	79fa      	ldrb	r2, [r7, #7]
 800c4b8:	4925      	ldr	r1, [pc, #148]	; (800c550 <DataHandler_Reset+0xdc>)
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	019b      	lsls	r3, r3, #6
 800c4be:	4413      	add	r3, r2
 800c4c0:	00db      	lsls	r3, r3, #3
 800c4c2:	440b      	add	r3, r1
 800c4c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800c4cc:	79fa      	ldrb	r2, [r7, #7]
 800c4ce:	4920      	ldr	r1, [pc, #128]	; (800c550 <DataHandler_Reset+0xdc>)
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	019b      	lsls	r3, r3, #6
 800c4d4:	4413      	add	r3, r2
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	440b      	add	r3, r1
 800c4da:	f203 2309 	addw	r3, r3, #521	; 0x209
 800c4de:	2200      	movs	r2, #0
 800c4e0:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800c4e2:	79fa      	ldrb	r2, [r7, #7]
 800c4e4:	491a      	ldr	r1, [pc, #104]	; (800c550 <DataHandler_Reset+0xdc>)
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	019b      	lsls	r3, r3, #6
 800c4ea:	4413      	add	r3, r2
 800c4ec:	00db      	lsls	r3, r3, #3
 800c4ee:	440b      	add	r3, r1
 800c4f0:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	717b      	strb	r3, [r7, #5]
 800c4fc:	e013      	b.n	800c526 <DataHandler_Reset+0xb2>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800c4fe:	79fa      	ldrb	r2, [r7, #7]
 800c500:	79bb      	ldrb	r3, [r7, #6]
 800c502:	7979      	ldrb	r1, [r7, #5]
 800c504:	4c12      	ldr	r4, [pc, #72]	; (800c550 <DataHandler_Reset+0xdc>)
 800c506:	0118      	lsls	r0, r3, #4
 800c508:	4613      	mov	r3, r2
 800c50a:	019b      	lsls	r3, r3, #6
 800c50c:	4413      	add	r3, r2
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	4403      	add	r3, r0
 800c512:	440b      	add	r3, r1
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4423      	add	r3, r4
 800c518:	3308      	adds	r3, #8
 800c51a:	f04f 0200 	mov.w	r2, #0
 800c51e:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800c520:	797b      	ldrb	r3, [r7, #5]
 800c522:	3301      	adds	r3, #1
 800c524:	717b      	strb	r3, [r7, #5]
 800c526:	797b      	ldrb	r3, [r7, #5]
 800c528:	2b0f      	cmp	r3, #15
 800c52a:	d9e8      	bls.n	800c4fe <DataHandler_Reset+0x8a>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800c52c:	79bb      	ldrb	r3, [r7, #6]
 800c52e:	3301      	adds	r3, #1
 800c530:	71bb      	strb	r3, [r7, #6]
 800c532:	79bb      	ldrb	r3, [r7, #6]
 800c534:	2b07      	cmp	r3, #7
 800c536:	d9be      	bls.n	800c4b6 <DataHandler_Reset+0x42>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800c538:	79fb      	ldrb	r3, [r7, #7]
 800c53a:	3301      	adds	r3, #1
 800c53c:	71fb      	strb	r3, [r7, #7]
 800c53e:	79fb      	ldrb	r3, [r7, #7]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d9b5      	bls.n	800c4b0 <DataHandler_Reset+0x3c>
			}
		}
	}

}
 800c544:	bf00      	nop
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bc90      	pop	{r4, r7}
 800c54e:	4770      	bx	lr
 800c550:	2000038c 	.word	0x2000038c

0800c554 <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800c55c:	4b46      	ldr	r3, [pc, #280]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 8081 	beq.w	800c668 <DataHandler_OpenNewMeasurement+0x114>
	{
		kDataHandler.u8LengthPointer++;
 800c566:	4b44      	ldr	r3, [pc, #272]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c568:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c56c:	3301      	adds	r3, #1
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	4b41      	ldr	r3, [pc, #260]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c572:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800c576:	4b40      	ldr	r3, [pc, #256]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		/*
		 * Every time new measurement is opened the previous one is assumed to be ready for transmission
		 */
		kDataHandler.bReadyToSend = true;
 800c57e:	4b3e      	ldr	r3, [pc, #248]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800c586:	4b3c      	ldr	r3, [pc, #240]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c588:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c58c:	2b07      	cmp	r3, #7
 800c58e:	d96f      	bls.n	800c670 <DataHandler_OpenNewMeasurement+0x11c>
		{
			kDataHandler.u8LengthPointer = 0;
 800c590:	4b39      	ldr	r3, [pc, #228]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800c598:	4b37      	ldr	r3, [pc, #220]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c59a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4a35      	ldr	r2, [pc, #212]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	019b      	lsls	r3, r3, #6
 800c5a6:	440b      	add	r3, r1
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800c5b4:	4b30      	ldr	r3, [pc, #192]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c5b6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4a2e      	ldr	r2, [pc, #184]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c5be:	460b      	mov	r3, r1
 800c5c0:	019b      	lsls	r3, r3, #6
 800c5c2:	440b      	add	r3, r1
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800c5d0:	4b29      	ldr	r3, [pc, #164]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c5d2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4a27      	ldr	r2, [pc, #156]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c5da:	460b      	mov	r3, r1
 800c5dc:	019b      	lsls	r3, r3, #6
 800c5de:	440b      	add	r3, r1
 800c5e0:	00db      	lsls	r3, r3, #3
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f203 2309 	addw	r3, r3, #521	; 0x209
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800c5ec:	4b22      	ldr	r3, [pc, #136]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c5ee:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4a20      	ldr	r2, [pc, #128]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	019b      	lsls	r3, r3, #6
 800c5fa:	440b      	add	r3, r1
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	4413      	add	r3, r2
 800c600:	3304      	adds	r3, #4
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800c606:	4b1c      	ldr	r3, [pc, #112]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c608:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c60c:	4619      	mov	r1, r3
 800c60e:	4a1a      	ldr	r2, [pc, #104]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c610:	460b      	mov	r3, r1
 800c612:	019b      	lsls	r3, r3, #6
 800c614:	440b      	add	r3, r1
 800c616:	00db      	lsls	r3, r3, #3
 800c618:	4413      	add	r3, r2
 800c61a:	f203 2309 	addw	r3, r3, #521	; 0x209
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f083 0301 	eor.w	r3, r3, #1
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d002      	beq.n	800c630 <DataHandler_OpenNewMeasurement+0xdc>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800c62a:	2040      	movs	r0, #64	; 0x40
 800c62c:	f7ff fefa 	bl	800c424 <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800c630:	4b11      	ldr	r3, [pc, #68]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c632:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800c636:	4b10      	ldr	r3, [pc, #64]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c638:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800c63c:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c63e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c642:	3301      	adds	r3, #1
 800c644:	b2da      	uxtb	r2, r3
 800c646:	4b0c      	ldr	r3, [pc, #48]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c648:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c64e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c652:	2b01      	cmp	r3, #1
 800c654:	d903      	bls.n	800c65e <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800c656:	4b08      	ldr	r3, [pc, #32]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			}
			kDataHandler.bPageFilled = true;
 800c65e:	4b06      	ldr	r3, [pc, #24]	; (800c678 <DataHandler_OpenNewMeasurement+0x124>)
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800c666:	e003      	b.n	800c670 <DataHandler_OpenNewMeasurement+0x11c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800c668:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c66c:	f7ff feda 	bl	800c424 <AssertError>
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	2000038c 	.word	0x2000038c

0800c67c <DataHandler_StoreMeasurement>:

void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800c686:	4b20      	ldr	r3, [pc, #128]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c688:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c68c:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800c68e:	4b1e      	ldr	r3, [pc, #120]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c690:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c694:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800c696:	4b1c      	ldr	r3, [pc, #112]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c698:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c69c:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800c69e:	4b1a      	ldr	r3, [pc, #104]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d028      	beq.n	800c6f8 <DataHandler_StoreMeasurement+0x7c>
	{
		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800c6a6:	7bfa      	ldrb	r2, [r7, #15]
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	7b79      	ldrb	r1, [r7, #13]
 800c6ac:	4c16      	ldr	r4, [pc, #88]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c6ae:	0118      	lsls	r0, r3, #4
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	019b      	lsls	r3, r3, #6
 800c6b4:	4413      	add	r3, r2
 800c6b6:	005b      	lsls	r3, r3, #1
 800c6b8:	4403      	add	r3, r0
 800c6ba:	440b      	add	r3, r1
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4423      	add	r3, r4
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	601a      	str	r2, [r3, #0]
		kDataHandler.u8WidthPointer++;
 800c6c6:	4b10      	ldr	r3, [pc, #64]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c6c8:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	4b0d      	ldr	r3, [pc, #52]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c6d2:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c6d8:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c6dc:	2b0f      	cmp	r3, #15
 800c6de:	d90f      	bls.n	800c700 <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800c6e0:	4b09      	ldr	r3, [pc, #36]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c6e2:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	4b07      	ldr	r3, [pc, #28]	; (800c708 <DataHandler_StoreMeasurement+0x8c>)
 800c6ec:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800c6f0:	2080      	movs	r0, #128	; 0x80
 800c6f2:	f7ff fe97 	bl	800c424 <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800c6f6:	e003      	b.n	800c700 <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800c6f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c6fc:	f7ff fe92 	bl	800c424 <AssertError>
}
 800c700:	bf00      	nop
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	bd90      	pop	{r4, r7, pc}
 800c708:	2000038c 	.word	0x2000038c

0800c70c <DataHandler_Operate>:

void DataHandler_Operate()
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800c710:	4b2b      	ldr	r3, [pc, #172]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d04c      	beq.n	800c7b2 <DataHandler_Operate+0xa6>
	{

		if( kDataHandler.bPageFilled )
 800c718:	4b29      	ldr	r3, [pc, #164]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c71a:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d011      	beq.n	800c746 <DataHandler_Operate+0x3a>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800c722:	4b27      	ldr	r3, [pc, #156]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c724:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800c728:	4619      	mov	r1, r3
 800c72a:	4a25      	ldr	r2, [pc, #148]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c72c:	460b      	mov	r3, r1
 800c72e:	019b      	lsls	r3, r3, #6
 800c730:	440b      	add	r3, r1
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	4413      	add	r3, r2
 800c736:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800c73a:	2201      	movs	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
			kDataHandler.bPageFilled = false;
 800c73e:	4b20      	ldr	r3, [pc, #128]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
			// Call to save with SD card
		}

		if( kDataHandler.bReadyToSend )
 800c746:	4b1e      	ldr	r3, [pc, #120]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c748:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d034      	beq.n	800c7ba <DataHandler_Operate+0xae>
		{
			if(kDataHandler.u8LengthPointer == 0)
 800c750:	4b1b      	ldr	r3, [pc, #108]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c752:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c756:	2b00      	cmp	r3, #0
 800c758:	d110      	bne.n	800c77c <DataHandler_Operate+0x70>
			{
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
 800c75a:	4b19      	ldr	r3, [pc, #100]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c75c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800c760:	461a      	mov	r2, r3
 800c762:	4613      	mov	r3, r2
 800c764:	019b      	lsls	r3, r3, #6
 800c766:	4413      	add	r3, r2
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800c76e:	4a14      	ldr	r2, [pc, #80]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c770:	4413      	add	r3, r2
 800c772:	3308      	adds	r3, #8
 800c774:	4618      	mov	r0, r3
 800c776:	f000 f837 	bl	800c7e8 <DataHandler_CopyMemoryToTransmissionBuffer>
 800c77a:	e013      	b.n	800c7a4 <DataHandler_Operate+0x98>
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
			}
			else
			{
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
 800c77c:	4b10      	ldr	r3, [pc, #64]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c77e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c782:	4619      	mov	r1, r3
 800c784:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c786:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c78a:	3b01      	subs	r3, #1
 800c78c:	019a      	lsls	r2, r3, #6
 800c78e:	460b      	mov	r3, r1
 800c790:	019b      	lsls	r3, r3, #6
 800c792:	440b      	add	r3, r1
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	4413      	add	r3, r2
 800c798:	4a09      	ldr	r2, [pc, #36]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c79a:	4413      	add	r3, r2
 800c79c:	3308      	adds	r3, #8
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f000 f822 	bl	800c7e8 <DataHandler_CopyMemoryToTransmissionBuffer>
			}

			CallForTransmissionEvent(); //Inform main event system that there is a pending transmission and data is preloaded to Memory Interchange
 800c7a4:	f000 f8b2 	bl	800c90c <CallForTransmissionEvent>
			kDataHandler.bReadyToSend = false;
 800c7a8:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <DataHandler_Operate+0xb4>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800c7b0:	e003      	b.n	800c7ba <DataHandler_Operate+0xae>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800c7b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c7b6:	f7ff fe35 	bl	800c424 <AssertError>
}
 800c7ba:	bf00      	nop
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	2000038c 	.word	0x2000038c

0800c7c4 <DataHandler_AccessMemoryInterchange>:

void DataHandler_AccessMemoryInterchange( MemoryInterchange_t ** pkMemoryInterchangeAddress)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
	MemoryInterchange_t *pkPointer;
	pkPointer = &kMemoryInterchange;
 800c7cc:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <DataHandler_AccessMemoryInterchange+0x20>)
 800c7ce:	60fb      	str	r3, [r7, #12]
	*pkMemoryInterchangeAddress = pkPointer;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	601a      	str	r2, [r3, #0]
}
 800c7d6:	bf00      	nop
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	200007a8 	.word	0x200007a8

0800c7e8 <DataHandler_CopyMemoryToTransmissionBuffer>:

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	if( (kMemoryInterchange.eMemoryState != MemoryState_DataSent) && ( kMemoryInterchange.eMemoryState != MemoryState_DataSkipped ) )
 800c7f0:	4b0b      	ldr	r3, [pc, #44]	; (800c820 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c7f2:	791b      	ldrb	r3, [r3, #4]
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d007      	beq.n	800c808 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
 800c7f8:	4b09      	ldr	r3, [pc, #36]	; (800c820 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c7fa:	791b      	ldrb	r3, [r3, #4]
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	d003      	beq.n	800c808 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
	{
		AssertError(AppError_DataLost); // Memory would be overwritten;
 800c800:	2040      	movs	r0, #64	; 0x40
 800c802:	f7ff fe0f 	bl	800c424 <AssertError>
 800c806:	e006      	b.n	800c816 <DataHandler_CopyMemoryToTransmissionBuffer+0x2e>
	}
	else
	{
		kMemoryInterchange.fDataPointer = pfMemoryArray;
 800c808:	4a05      	ldr	r2, [pc, #20]	; (800c820 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6013      	str	r3, [r2, #0]
		kMemoryInterchange.eMemoryState = MemoryState_NewData;
 800c80e:	4b04      	ldr	r3, [pc, #16]	; (800c820 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c810:	2200      	movs	r2, #0
 800c812:	711a      	strb	r2, [r3, #4]
	}

}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	200007a8 	.word	0x200007a8

0800c824 <EventSystem_Initialize>:
}EventData_t;

static EventData_t kEventData;

void EventSystem_Initialize()
{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0
	kEventData.bInitalized = true;
 800c828:	4b03      	ldr	r3, [pc, #12]	; (800c838 <EventSystem_Initialize+0x14>)
 800c82a:	2201      	movs	r2, #1
 800c82c:	701a      	strb	r2, [r3, #0]
}
 800c82e:	bf00      	nop
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr
 800c838:	200007b0 	.word	0x200007b0

0800c83c <EventSystem_HandleEvent>:
void EventSystem_HandleEvent()
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
	uint32_t u32EventCode = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	607b      	str	r3, [r7, #4]

	u32EventCode = (uint32_t)Event_DataReadyToTransmit;
 800c846:	2301      	movs	r3, #1
 800c848:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c84a:	4b1d      	ldr	r3, [pc, #116]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4013      	ands	r3, r2
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	429a      	cmp	r2, r3
 800c856:	d108      	bne.n	800c86a <EventSystem_HandleEvent+0x2e>
	{
		ComManager_ArmTransmission();
 800c858:	f000 fb32 	bl	800cec0 <ComManager_ArmTransmission>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c85c:	4b18      	ldr	r3, [pc, #96]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	43db      	mvns	r3, r3
 800c864:	4013      	ands	r3, r2
 800c866:	4a16      	ldr	r2, [pc, #88]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c868:	6053      	str	r3, [r2, #4]
	}
	u32EventCode = (uint32_t)Event_USBConnected;
 800c86a:	2302      	movs	r3, #2
 800c86c:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c86e:	4b14      	ldr	r3, [pc, #80]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4013      	ands	r3, r2
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d109      	bne.n	800c890 <EventSystem_HandleEvent+0x54>
	{
		CommManager_SetUSBConnectionState(USB_Connected);
 800c87c:	2001      	movs	r0, #1
 800c87e:	f000 fb01 	bl	800ce84 <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c882:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c884:	685a      	ldr	r2, [r3, #4]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	43db      	mvns	r3, r3
 800c88a:	4013      	ands	r3, r2
 800c88c:	4a0c      	ldr	r2, [pc, #48]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c88e:	6053      	str	r3, [r2, #4]
	}
	u32EventCode = (uint32_t)Event_USBDisconnected;
 800c890:	2304      	movs	r3, #4
 800c892:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c894:	4b0a      	ldr	r3, [pc, #40]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4013      	ands	r3, r2
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d109      	bne.n	800c8b6 <EventSystem_HandleEvent+0x7a>
	{
		CommManager_SetUSBConnectionState(USB_Disconnected);
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	f000 faee 	bl	800ce84 <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c8a8:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	43db      	mvns	r3, r3
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	4a03      	ldr	r2, [pc, #12]	; (800c8c0 <EventSystem_HandleEvent+0x84>)
 800c8b4:	6053      	str	r3, [r2, #4]
	}
}
 800c8b6:	bf00      	nop
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	200007b0 	.word	0x200007b0

0800c8c4 <EventSystem_Signalize>:

void EventSystem_Signalize(Event_t eEvent)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	71fb      	strb	r3, [r7, #7]
	uint32_t u32EventCode = (uint32_t)eEvent;
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
 800c8d0:	60fb      	str	r3, [r7, #12]

	if(kEventData.bInitalized)
 800c8d2:	4b0d      	ldr	r3, [pc, #52]	; (800c908 <EventSystem_Signalize+0x44>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d011      	beq.n	800c8fe <EventSystem_Signalize+0x3a>
	{
		if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c8da:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <EventSystem_Signalize+0x44>)
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d104      	bne.n	800c8f2 <EventSystem_Signalize+0x2e>
		{
			AssertError(AppError_EventOverlap); // Event already set, before handling it
 800c8e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c8ec:	f7ff fd9a 	bl	800c424 <AssertError>
		else
		{
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
		}
	}
}
 800c8f0:	e005      	b.n	800c8fe <EventSystem_Signalize+0x3a>
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
 800c8f2:	4b05      	ldr	r3, [pc, #20]	; (800c908 <EventSystem_Signalize+0x44>)
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	4a03      	ldr	r2, [pc, #12]	; (800c908 <EventSystem_Signalize+0x44>)
 800c8fc:	6053      	str	r3, [r2, #4]
}
 800c8fe:	bf00      	nop
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	200007b0 	.word	0x200007b0

0800c90c <CallForTransmissionEvent>:
#include "ModuleInterconnect.h"
#include "EventSystem.h"
#include "DataCommon.h"

void CallForTransmissionEvent()
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_DataReadyToTransmit);
 800c910:	2001      	movs	r0, #1
 800c912:	f7ff ffd7 	bl	800c8c4 <EventSystem_Signalize>
}
 800c916:	bf00      	nop
 800c918:	bd80      	pop	{r7, pc}

0800c91a <CallForUSBConnection>:

void CallForUSBConnection()
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBConnected);
 800c91e:	2002      	movs	r0, #2
 800c920:	f7ff ffd0 	bl	800c8c4 <EventSystem_Signalize>
}
 800c924:	bf00      	nop
 800c926:	bd80      	pop	{r7, pc}

0800c928 <CallForUSBDisonnection>:
void CallForUSBDisonnection()
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBDisconnected);
 800c92c:	2004      	movs	r0, #4
 800c92e:	f7ff ffc9 	bl	800c8c4 <EventSystem_Signalize>
}
 800c932:	bf00      	nop
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800c93c:	4bac      	ldr	r3, [pc, #688]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c93e:	79db      	ldrb	r3, [r3, #7]
 800c940:	2b05      	cmp	r3, #5
 800c942:	f200 8161 	bhi.w	800cc08 <TempCollect_Operate+0x2d0>
 800c946:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <TempCollect_Operate+0x14>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c965 	.word	0x0800c965
 800c950:	0800c96f 	.word	0x0800c96f
 800c954:	0800c99f 	.word	0x0800c99f
 800c958:	0800cabb 	.word	0x0800cabb
 800c95c:	0800cb93 	.word	0x0800cb93
 800c960:	0800ca21 	.word	0x0800ca21
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800c964:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c968:	f7ff fd5c 	bl	800c424 <AssertError>
		break;
 800c96c:	e154      	b.n	800cc18 <TempCollect_Operate+0x2e0>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800c96e:	4ba0      	ldr	r3, [pc, #640]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c970:	799b      	ldrb	r3, [r3, #6]
 800c972:	2b00      	cmp	r3, #0
 800c974:	f000 814d 	beq.w	800cc12 <TempCollect_Operate+0x2da>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800c978:	4b9d      	ldr	r3, [pc, #628]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c97a:	2202      	movs	r2, #2
 800c97c:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800c97e:	4b9c      	ldr	r3, [pc, #624]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c980:	2200      	movs	r2, #0
 800c982:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800c984:	4b9a      	ldr	r3, [pc, #616]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c986:	2200      	movs	r2, #0
 800c988:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800c98a:	4b99      	ldr	r3, [pc, #612]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800c990:	4b97      	ldr	r3, [pc, #604]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c992:	2200      	movs	r2, #0
 800c994:	725a      	strb	r2, [r3, #9]
			kTemperatureData.u8TimeoutCounter = 0;
 800c996:	4b96      	ldr	r3, [pc, #600]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c998:	2200      	movs	r2, #0
 800c99a:	771a      	strb	r2, [r3, #28]
		}
		break;
 800c99c:	e139      	b.n	800cc12 <TempCollect_Operate+0x2da>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800c99e:	4b94      	ldr	r3, [pc, #592]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < Sensor_I2CA_DeviceCount)
 800c9a4:	4b92      	ldr	r3, [pc, #584]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9a6:	8a9b      	ldrh	r3, [r3, #20]
 800c9a8:	2b05      	cmp	r3, #5
 800c9aa:	d818      	bhi.n	800c9de <TempCollect_Operate+0xa6>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800c9ac:	4b90      	ldr	r3, [pc, #576]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	729a      	strb	r2, [r3, #10]
			kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex].fcnReadTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800c9b2:	4b8f      	ldr	r3, [pc, #572]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9b4:	8a9b      	ldrh	r3, [r3, #20]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4a8e      	ldr	r2, [pc, #568]	; (800cbf4 <TempCollect_Operate+0x2bc>)
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	440b      	add	r3, r1
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	3310      	adds	r3, #16
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	4b89      	ldr	r3, [pc, #548]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9ca:	8a9b      	ldrh	r3, [r3, #20]
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	440b      	add	r3, r1
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4987      	ldr	r1, [pc, #540]	; (800cbf4 <TempCollect_Operate+0x2bc>)
 800c9d8:	440b      	add	r3, r1
 800c9da:	4618      	mov	r0, r3
 800c9dc:	4790      	blx	r2
		}
		if(kTemperatureData.u16ArrayBSensorIndex < Sensor_I2CB_DeviceCount)
 800c9de:	4b84      	ldr	r3, [pc, #528]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9e0:	8adb      	ldrh	r3, [r3, #22]
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d818      	bhi.n	800ca18 <TempCollect_Operate+0xe0>
		{
			kTemperatureData.bStateReady[1] = false;
 800c9e6:	4b82      	ldr	r3, [pc, #520]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	72da      	strb	r2, [r3, #11]
			kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex].fcnReadTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800c9ec:	4b80      	ldr	r3, [pc, #512]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800c9ee:	8adb      	ldrh	r3, [r3, #22]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4a81      	ldr	r2, [pc, #516]	; (800cbf8 <TempCollect_Operate+0x2c0>)
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	440b      	add	r3, r1
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	3310      	adds	r3, #16
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	4b7b      	ldr	r3, [pc, #492]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca04:	8adb      	ldrh	r3, [r3, #22]
 800ca06:	4619      	mov	r1, r3
 800ca08:	460b      	mov	r3, r1
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	440b      	add	r3, r1
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4979      	ldr	r1, [pc, #484]	; (800cbf8 <TempCollect_Operate+0x2c0>)
 800ca12:	440b      	add	r3, r1
 800ca14:	4618      	mov	r0, r3
 800ca16:	4790      	blx	r2
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800ca18:	4b75      	ldr	r3, [pc, #468]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca1a:	2205      	movs	r2, #5
 800ca1c:	71da      	strb	r2, [r3, #7]
		break;
 800ca1e:	e0fb      	b.n	800cc18 <TempCollect_Operate+0x2e0>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800ca20:	4b73      	ldr	r3, [pc, #460]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca22:	7a9b      	ldrb	r3, [r3, #10]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00a      	beq.n	800ca3e <TempCollect_Operate+0x106>
 800ca28:	4b71      	ldr	r3, [pc, #452]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca2a:	7adb      	ldrb	r3, [r3, #11]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d006      	beq.n	800ca3e <TempCollect_Operate+0x106>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800ca30:	4b6f      	ldr	r3, [pc, #444]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca32:	2203      	movs	r2, #3
 800ca34:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u8TimeoutCounter = 0;
 800ca36:	4b6e      	ldr	r3, [pc, #440]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	771a      	strb	r2, [r3, #28]
					AssertError(AppError_ArrayBError);
				}
				kTemperatureData.eState = TempCollect_ProcessData;
			}
		}
		break;
 800ca3c:	e0eb      	b.n	800cc16 <TempCollect_Operate+0x2de>
			kTemperatureData.u8TimeoutCounter++;
 800ca3e:	4b6c      	ldr	r3, [pc, #432]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca40:	7f1b      	ldrb	r3, [r3, #28]
 800ca42:	3301      	adds	r3, #1
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	4b6a      	ldr	r3, [pc, #424]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca48:	771a      	strb	r2, [r3, #28]
			if( (kTemperatureData.u8TimeoutCounter > dTimeoutMaxWait) || kTemperatureData.bErrorOnArray[0] || kTemperatureData.bErrorOnArray[1] )
 800ca4a:	4b69      	ldr	r3, [pc, #420]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca4c:	7f1b      	ldrb	r3, [r3, #28]
 800ca4e:	2b0f      	cmp	r3, #15
 800ca50:	d808      	bhi.n	800ca64 <TempCollect_Operate+0x12c>
 800ca52:	4b67      	ldr	r3, [pc, #412]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca54:	7f5b      	ldrb	r3, [r3, #29]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d104      	bne.n	800ca64 <TempCollect_Operate+0x12c>
 800ca5a:	4b65      	ldr	r3, [pc, #404]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca5c:	7f9b      	ldrb	r3, [r3, #30]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f000 80d9 	beq.w	800cc16 <TempCollect_Operate+0x2de>
				kTemperatureData.u8TimeoutCounter = 0;
 800ca64:	4b62      	ldr	r3, [pc, #392]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	771a      	strb	r2, [r3, #28]
				if(!kTemperatureData.bStateReady[0] || kTemperatureData.bErrorOnArray[0])
 800ca6a:	4b61      	ldr	r3, [pc, #388]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca6c:	7a9b      	ldrb	r3, [r3, #10]
 800ca6e:	f083 0301 	eor.w	r3, r3, #1
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d103      	bne.n	800ca80 <TempCollect_Operate+0x148>
 800ca78:	4b5d      	ldr	r3, [pc, #372]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca7a:	7f5b      	ldrb	r3, [r3, #29]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d006      	beq.n	800ca8e <TempCollect_Operate+0x156>
					kTemperatureData.bErrorOnArray[0] = true;
 800ca80:	4b5b      	ldr	r3, [pc, #364]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	775a      	strb	r2, [r3, #29]
					AssertError(AppError_ArrayAError);
 800ca86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ca8a:	f7ff fccb 	bl	800c424 <AssertError>
				if(!kTemperatureData.bStateReady[1] || kTemperatureData.bErrorOnArray[1])
 800ca8e:	4b58      	ldr	r3, [pc, #352]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca90:	7adb      	ldrb	r3, [r3, #11]
 800ca92:	f083 0301 	eor.w	r3, r3, #1
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d103      	bne.n	800caa4 <TempCollect_Operate+0x16c>
 800ca9c:	4b54      	ldr	r3, [pc, #336]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800ca9e:	7f9b      	ldrb	r3, [r3, #30]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d006      	beq.n	800cab2 <TempCollect_Operate+0x17a>
					kTemperatureData.bErrorOnArray[1] = true;
 800caa4:	4b52      	ldr	r3, [pc, #328]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800caa6:	2201      	movs	r2, #1
 800caa8:	779a      	strb	r2, [r3, #30]
					AssertError(AppError_ArrayBError);
 800caaa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800caae:	f7ff fcb9 	bl	800c424 <AssertError>
				kTemperatureData.eState = TempCollect_ProcessData;
 800cab2:	4b4f      	ldr	r3, [pc, #316]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cab4:	2203      	movs	r2, #3
 800cab6:	71da      	strb	r2, [r3, #7]
		break;
 800cab8:	e0ad      	b.n	800cc16 <TempCollect_Operate+0x2de>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800caba:	4b4d      	ldr	r3, [pc, #308]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cabc:	7a1b      	ldrb	r3, [r3, #8]
 800cabe:	f083 0301 	eor.w	r3, r3, #1
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d02c      	beq.n	800cb22 <TempCollect_Operate+0x1ea>
		{
			if(kTemperatureData.bErrorOnArray[0])
 800cac8:	4b49      	ldr	r3, [pc, #292]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800caca:	7f5b      	ldrb	r3, [r3, #29]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d006      	beq.n	800cade <TempCollect_Operate+0x1a6>
			{
				kTemperatureData.fConvertedTemperature[0] = dErrorIndication;
 800cad0:	4b47      	ldr	r3, [pc, #284]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cad2:	4a4a      	ldr	r2, [pc, #296]	; (800cbfc <TempCollect_Operate+0x2c4>)
 800cad4:	60da      	str	r2, [r3, #12]
				kTemperatureData.bErrorOnArray[0] = false;
 800cad6:	4b46      	ldr	r3, [pc, #280]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cad8:	2200      	movs	r2, #0
 800cada:	775a      	strb	r2, [r3, #29]
 800cadc:	e01a      	b.n	800cb14 <TempCollect_Operate+0x1dc>
			}
			else
			{
				kTemperatureData.fConvertedTemperature[0] = kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex].fcnDecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800cade:	4b44      	ldr	r3, [pc, #272]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cae0:	8a9b      	ldrh	r3, [r3, #20]
 800cae2:	4619      	mov	r1, r3
 800cae4:	4a43      	ldr	r2, [pc, #268]	; (800cbf4 <TempCollect_Operate+0x2bc>)
 800cae6:	460b      	mov	r3, r1
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	440b      	add	r3, r1
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	330c      	adds	r3, #12
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	4b3e      	ldr	r3, [pc, #248]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800caf6:	8a9b      	ldrh	r3, [r3, #20]
 800caf8:	4619      	mov	r1, r3
 800cafa:	460b      	mov	r3, r1
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	440b      	add	r3, r1
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	493c      	ldr	r1, [pc, #240]	; (800cbf4 <TempCollect_Operate+0x2bc>)
 800cb04:	440b      	add	r3, r1
 800cb06:	4618      	mov	r0, r3
 800cb08:	4790      	blx	r2
 800cb0a:	eef0 7a40 	vmov.f32	s15, s0
 800cb0e:	4b38      	ldr	r3, [pc, #224]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb10:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800cb14:	4b36      	ldr	r3, [pc, #216]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb16:	edd3 7a03 	vldr	s15, [r3, #12]
 800cb1a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb1e:	f7ff fdad 	bl	800c67c <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800cb22:	4b33      	ldr	r3, [pc, #204]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb24:	7a5b      	ldrb	r3, [r3, #9]
 800cb26:	f083 0301 	eor.w	r3, r3, #1
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d02c      	beq.n	800cb8a <TempCollect_Operate+0x252>
		{
			if(kTemperatureData.bErrorOnArray[1])
 800cb30:	4b2f      	ldr	r3, [pc, #188]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb32:	7f9b      	ldrb	r3, [r3, #30]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d006      	beq.n	800cb46 <TempCollect_Operate+0x20e>
			{
				kTemperatureData.fConvertedTemperature[1] = dErrorIndication;
 800cb38:	4b2d      	ldr	r3, [pc, #180]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb3a:	4a30      	ldr	r2, [pc, #192]	; (800cbfc <TempCollect_Operate+0x2c4>)
 800cb3c:	611a      	str	r2, [r3, #16]
				kTemperatureData.bErrorOnArray[1] = false;
 800cb3e:	4b2c      	ldr	r3, [pc, #176]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	779a      	strb	r2, [r3, #30]
 800cb44:	e01a      	b.n	800cb7c <TempCollect_Operate+0x244>
			}
			else
			{
				kTemperatureData.fConvertedTemperature[1] = kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex].fcnDecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800cb46:	4b2a      	ldr	r3, [pc, #168]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb48:	8adb      	ldrh	r3, [r3, #22]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4a2a      	ldr	r2, [pc, #168]	; (800cbf8 <TempCollect_Operate+0x2c0>)
 800cb4e:	460b      	mov	r3, r1
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	440b      	add	r3, r1
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	330c      	adds	r3, #12
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	4b24      	ldr	r3, [pc, #144]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb5e:	8adb      	ldrh	r3, [r3, #22]
 800cb60:	4619      	mov	r1, r3
 800cb62:	460b      	mov	r3, r1
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	440b      	add	r3, r1
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4923      	ldr	r1, [pc, #140]	; (800cbf8 <TempCollect_Operate+0x2c0>)
 800cb6c:	440b      	add	r3, r1
 800cb6e:	4618      	mov	r0, r3
 800cb70:	4790      	blx	r2
 800cb72:	eef0 7a40 	vmov.f32	s15, s0
 800cb76:	4b1e      	ldr	r3, [pc, #120]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb78:	edc3 7a04 	vstr	s15, [r3, #16]
			}
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800cb7c:	4b1c      	ldr	r3, [pc, #112]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb7e:	edd3 7a04 	vldr	s15, [r3, #16]
 800cb82:	eeb0 0a67 	vmov.f32	s0, s15
 800cb86:	f7ff fd79 	bl	800c67c <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800cb8a:	4b19      	ldr	r3, [pc, #100]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb8c:	2204      	movs	r2, #4
 800cb8e:	71da      	strb	r2, [r3, #7]
		break;
 800cb90:	e042      	b.n	800cc18 <TempCollect_Operate+0x2e0>

	case(TempCollect_ArmNewReading):
		kTemperatureData.u16ArrayASensorIndex++;
 800cb92:	4b17      	ldr	r3, [pc, #92]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb94:	8a9b      	ldrh	r3, [r3, #20]
 800cb96:	3301      	adds	r3, #1
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cb9c:	829a      	strh	r2, [r3, #20]

		if( kTemperatureData.u16ArrayASensorIndex >= Sensor_I2CA_DeviceCount)
 800cb9e:	4b14      	ldr	r3, [pc, #80]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cba0:	8a9b      	ldrh	r3, [r3, #20]
 800cba2:	2b05      	cmp	r3, #5
 800cba4:	d902      	bls.n	800cbac <TempCollect_Operate+0x274>
		{
			kTemperatureData.bReadFinished[0] = true;
 800cba6:	4b12      	ldr	r3, [pc, #72]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cba8:	2201      	movs	r2, #1
 800cbaa:	721a      	strb	r2, [r3, #8]
		}

		kTemperatureData.u16ArrayBSensorIndex++;
 800cbac:	4b10      	ldr	r3, [pc, #64]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbae:	8adb      	ldrh	r3, [r3, #22]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	4b0e      	ldr	r3, [pc, #56]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbb6:	82da      	strh	r2, [r3, #22]

		if( kTemperatureData.u16ArrayBSensorIndex >= Sensor_I2CB_DeviceCount)
 800cbb8:	4b0d      	ldr	r3, [pc, #52]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbba:	8adb      	ldrh	r3, [r3, #22]
 800cbbc:	2b05      	cmp	r3, #5
 800cbbe:	d902      	bls.n	800cbc6 <TempCollect_Operate+0x28e>
		{
			kTemperatureData.bReadFinished[1] = true;
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	725a      	strb	r2, [r3, #9]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800cbc6:	4b0a      	ldr	r3, [pc, #40]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbc8:	7a1b      	ldrb	r3, [r3, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d018      	beq.n	800cc00 <TempCollect_Operate+0x2c8>
 800cbce:	4b08      	ldr	r3, [pc, #32]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbd0:	7a5b      	ldrb	r3, [r3, #9]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d014      	beq.n	800cc00 <TempCollect_Operate+0x2c8>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800cbd6:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbd8:	2201      	movs	r2, #1
 800cbda:	71da      	strb	r2, [r3, #7]

			/*
			 * Open new measurement at the end of current session
			 */
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800cbdc:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbde:	699b      	ldr	r3, [r3, #24]
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	4903      	ldr	r1, [pc, #12]	; (800cbf0 <TempCollect_Operate+0x2b8>)
 800cbe4:	618a      	str	r2, [r1, #24]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7ff fcb4 	bl	800c554 <DataHandler_OpenNewMeasurement>
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800cbec:	e014      	b.n	800cc18 <TempCollect_Operate+0x2e0>
 800cbee:	bf00      	nop
 800cbf0:	200007b8 	.word	0x200007b8
 800cbf4:	20000a30 	.word	0x20000a30
 800cbf8:	20000aa8 	.word	0x20000aa8
 800cbfc:	43480000 	.word	0x43480000
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800cc00:	4b06      	ldr	r3, [pc, #24]	; (800cc1c <TempCollect_Operate+0x2e4>)
 800cc02:	2202      	movs	r2, #2
 800cc04:	71da      	strb	r2, [r3, #7]
		break;
 800cc06:	e007      	b.n	800cc18 <TempCollect_Operate+0x2e0>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800cc08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cc0c:	f7ff fc0a 	bl	800c424 <AssertError>
	break;
 800cc10:	e002      	b.n	800cc18 <TempCollect_Operate+0x2e0>
		break;
 800cc12:	bf00      	nop
 800cc14:	e000      	b.n	800cc18 <TempCollect_Operate+0x2e0>
		break;
 800cc16:	bf00      	nop
	}
}
 800cc18:	bf00      	nop
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	200007b8 	.word	0x200007b8

0800cc20 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800cc24:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <TempCollect_Initialize+0x1c>)
 800cc26:	2201      	movs	r2, #1
 800cc28:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800cc2a:	4b04      	ldr	r3, [pc, #16]	; (800cc3c <TempCollect_Initialize+0x1c>)
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	715a      	strb	r2, [r3, #5]
	}
	if(Sensor_I2CB_DeviceCount == 0)
	{
		kTemperatureData.bStateReady[1] = true;
	}
}
 800cc30:	bf00      	nop
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	200007b8 	.word	0x200007b8

0800cc40 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800cc44:	f7f4 f9c6 	bl	8000fd4 <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800cc48:	4b06      	ldr	r3, [pc, #24]	; (800cc64 <TempCollect_ScheduleMeasurement+0x24>)
 800cc4a:	799b      	ldrb	r3, [r3, #6]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d004      	beq.n	800cc5a <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800cc50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cc54:	f7ff fbe6 	bl	800c424 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800cc58:	e002      	b.n	800cc60 <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800cc5a:	4b02      	ldr	r3, [pc, #8]	; (800cc64 <TempCollect_ScheduleMeasurement+0x24>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	719a      	strb	r2, [r3, #6]
}
 800cc60:	bf00      	nop
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	200007b8 	.word	0x200007b8

0800cc68 <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800cc68:	b480      	push	{r7}
 800cc6a:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800cc6c:	4b03      	ldr	r3, [pc, #12]	; (800cc7c <TempCollect_I2CA_Done+0x14>)
 800cc6e:	2201      	movs	r2, #1
 800cc70:	729a      	strb	r2, [r3, #10]
}
 800cc72:	bf00      	nop
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	200007b8 	.word	0x200007b8

0800cc80 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800cc84:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <TempCollect_I2CB_Done+0x14>)
 800cc86:	2201      	movs	r2, #1
 800cc88:	72da      	strb	r2, [r3, #11]
}
 800cc8a:	bf00      	nop
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	200007b8 	.word	0x200007b8

0800cc98 <TempCollect_CommFaultOccured>:

void TempCollect_CommFaultOccured(CommunicationModule_t eModule)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	71fb      	strb	r3, [r7, #7]
	if( eModule == eModule_I2CA)
 800cca2:	79fb      	ldrb	r3, [r7, #7]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d102      	bne.n	800ccae <TempCollect_CommFaultOccured+0x16>
	{
		kTemperatureData.bErrorOnArray[0] = true;
 800cca8:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <TempCollect_CommFaultOccured+0x30>)
 800ccaa:	2201      	movs	r2, #1
 800ccac:	775a      	strb	r2, [r3, #29]
	}
	if( eModule == eModule_I2CB)
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d102      	bne.n	800ccba <TempCollect_CommFaultOccured+0x22>
	{
		kTemperatureData.bErrorOnArray[1] = true;
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <TempCollect_CommFaultOccured+0x30>)
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	779a      	strb	r2, [r3, #30]
	}
}
 800ccba:	bf00      	nop
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	200007b8 	.word	0x200007b8

0800cccc <CommManager_Initialize>:
}CommunicationData_t;

static CommunicationData_t kCommData;

void CommManager_Initialize()
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
	kCommData.bInitialized = true;
 800ccd0:	4b03      	ldr	r3, [pc, #12]	; (800cce0 <CommManager_Initialize+0x14>)
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	701a      	strb	r2, [r3, #0]
	CommManager_FlushFrame();
 800ccd6:	f000 f917 	bl	800cf08 <CommManager_FlushFrame>
}
 800ccda:	bf00      	nop
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	200007d8 	.word	0x200007d8

0800cce4 <CommManager_Operate>:
void CommManager_Operate()
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
	bool bResult;
	float * pfPointer;
	float fValue;

	if(kCommData.bInitialized)
 800ccea:	4b64      	ldr	r3, [pc, #400]	; (800ce7c <CommManager_Operate+0x198>)
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 80ba 	beq.w	800ce68 <CommManager_Operate+0x184>
	{

		switch (kCommData.eState)
 800ccf4:	4b61      	ldr	r3, [pc, #388]	; (800ce7c <CommManager_Operate+0x198>)
 800ccf6:	7a1b      	ldrb	r3, [r3, #8]
 800ccf8:	2b07      	cmp	r3, #7
 800ccfa:	f200 80b7 	bhi.w	800ce6c <CommManager_Operate+0x188>
 800ccfe:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <CommManager_Operate+0x20>)
 800cd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd04:	0800cd25 	.word	0x0800cd25
 800cd08:	0800ce6d 	.word	0x0800ce6d
 800cd0c:	0800cd2d 	.word	0x0800cd2d
 800cd10:	0800cd49 	.word	0x0800cd49
 800cd14:	0800cd7f 	.word	0x0800cd7f
 800cd18:	0800cd9b 	.word	0x0800cd9b
 800cd1c:	0800ce6d 	.word	0x0800ce6d
 800cd20:	0800ce4f 	.word	0x0800ce4f
		{
		case Comm_Initialized:

			kCommData.eState = Comm_Idle;
 800cd24:	4b55      	ldr	r3, [pc, #340]	; (800ce7c <CommManager_Operate+0x198>)
 800cd26:	2201      	movs	r2, #1
 800cd28:	721a      	strb	r2, [r3, #8]
			break;
 800cd2a:	e0a2      	b.n	800ce72 <CommManager_Operate+0x18e>

			//Wait for new Arm_Transmission call
			break;
		case Comm_OpenTransmission:

			kCommData.u8Frame[0] = dOpeningByte;
 800cd2c:	4b53      	ldr	r3, [pc, #332]	; (800ce7c <CommManager_Operate+0x198>)
 800cd2e:	220a      	movs	r2, #10
 800cd30:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800cd32:	4b52      	ldr	r3, [pc, #328]	; (800ce7c <CommManager_Operate+0x198>)
 800cd34:	2201      	movs	r2, #1
 800cd36:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800cd38:	4b50      	ldr	r3, [pc, #320]	; (800ce7c <CommManager_Operate+0x198>)
 800cd3a:	7a1a      	ldrb	r2, [r3, #8]
 800cd3c:	4b4f      	ldr	r3, [pc, #316]	; (800ce7c <CommManager_Operate+0x198>)
 800cd3e:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800cd40:	4b4e      	ldr	r3, [pc, #312]	; (800ce7c <CommManager_Operate+0x198>)
 800cd42:	2205      	movs	r2, #5
 800cd44:	721a      	strb	r2, [r3, #8]
			break;
 800cd46:	e094      	b.n	800ce72 <CommManager_Operate+0x18e>
		case Comm_AssembleFrame:

			pfPointer = kCommData.pkMemoryPointer->fDataPointer;
 800cd48:	4b4c      	ldr	r3, [pc, #304]	; (800ce7c <CommManager_Operate+0x198>)
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60bb      	str	r3, [r7, #8]
			fValue = pfPointer[kCommData.u16ReadoutPointer];
 800cd50:	4b4a      	ldr	r3, [pc, #296]	; (800ce7c <CommManager_Operate+0x198>)
 800cd52:	895b      	ldrh	r3, [r3, #10]
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	4413      	add	r3, r2
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	607b      	str	r3, [r7, #4]
			FrameAssembler_ConvertFloatToCharArray(kCommData.u8Frame, fValue);
 800cd5e:	ed97 0a01 	vldr	s0, [r7, #4]
 800cd62:	4847      	ldr	r0, [pc, #284]	; (800ce80 <CommManager_Operate+0x19c>)
 800cd64:	f000 f8ea 	bl	800cf3c <FrameAssembler_ConvertFloatToCharArray>
			kCommData.u8CurrentFrameLength = 10;
 800cd68:	4b44      	ldr	r3, [pc, #272]	; (800ce7c <CommManager_Operate+0x198>)
 800cd6a:	220a      	movs	r2, #10
 800cd6c:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800cd6e:	4b43      	ldr	r3, [pc, #268]	; (800ce7c <CommManager_Operate+0x198>)
 800cd70:	7a1a      	ldrb	r2, [r3, #8]
 800cd72:	4b42      	ldr	r3, [pc, #264]	; (800ce7c <CommManager_Operate+0x198>)
 800cd74:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800cd76:	4b41      	ldr	r3, [pc, #260]	; (800ce7c <CommManager_Operate+0x198>)
 800cd78:	2205      	movs	r2, #5
 800cd7a:	721a      	strb	r2, [r3, #8]
			break;
 800cd7c:	e079      	b.n	800ce72 <CommManager_Operate+0x18e>
		case Comm_CloseTransmission:

			kCommData.u8Frame[0] = dClosingByte;
 800cd7e:	4b3f      	ldr	r3, [pc, #252]	; (800ce7c <CommManager_Operate+0x198>)
 800cd80:	220d      	movs	r2, #13
 800cd82:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800cd84:	4b3d      	ldr	r3, [pc, #244]	; (800ce7c <CommManager_Operate+0x198>)
 800cd86:	2201      	movs	r2, #1
 800cd88:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800cd8a:	4b3c      	ldr	r3, [pc, #240]	; (800ce7c <CommManager_Operate+0x198>)
 800cd8c:	7a1a      	ldrb	r2, [r3, #8]
 800cd8e:	4b3b      	ldr	r3, [pc, #236]	; (800ce7c <CommManager_Operate+0x198>)
 800cd90:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800cd92:	4b3a      	ldr	r3, [pc, #232]	; (800ce7c <CommManager_Operate+0x198>)
 800cd94:	2205      	movs	r2, #5
 800cd96:	721a      	strb	r2, [r3, #8]
			break;
 800cd98:	e06b      	b.n	800ce72 <CommManager_Operate+0x18e>
		case Comm_Transmit:

			bResult = USB_TransmitData(kCommData.u8Frame, kCommData.u8CurrentFrameLength);
 800cd9a:	4b38      	ldr	r3, [pc, #224]	; (800ce7c <CommManager_Operate+0x198>)
 800cd9c:	7d9b      	ldrb	r3, [r3, #22]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	4837      	ldr	r0, [pc, #220]	; (800ce80 <CommManager_Operate+0x19c>)
 800cda2:	f000 f8f3 	bl	800cf8c <USB_TransmitData>
 800cda6:	4603      	mov	r3, r0
 800cda8:	73fb      	strb	r3, [r7, #15]
			if( !bResult )
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
 800cdac:	f083 0301 	eor.w	r3, r3, #1
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d039      	beq.n	800ce2a <CommManager_Operate+0x146>
			{
				kCommData.u8TrialsCounter = 0;
 800cdb6:	4b31      	ldr	r3, [pc, #196]	; (800ce7c <CommManager_Operate+0x198>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	75da      	strb	r2, [r3, #23]
				if ( kCommData.ePreviousState == Comm_AssembleFrame )
 800cdbc:	4b2f      	ldr	r3, [pc, #188]	; (800ce7c <CommManager_Operate+0x198>)
 800cdbe:	7a5b      	ldrb	r3, [r3, #9]
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d113      	bne.n	800cdec <CommManager_Operate+0x108>
				{
					kCommData.u16ReadoutPointer++;
 800cdc4:	4b2d      	ldr	r3, [pc, #180]	; (800ce7c <CommManager_Operate+0x198>)
 800cdc6:	895b      	ldrh	r3, [r3, #10]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	4b2b      	ldr	r3, [pc, #172]	; (800ce7c <CommManager_Operate+0x198>)
 800cdce:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800cdd0:	4b2a      	ldr	r3, [pc, #168]	; (800ce7c <CommManager_Operate+0x198>)
 800cdd2:	2203      	movs	r2, #3
 800cdd4:	721a      	strb	r2, [r3, #8]
					if( kCommData.u16ReadoutPointer >= dMemoryWidth)
 800cdd6:	4b29      	ldr	r3, [pc, #164]	; (800ce7c <CommManager_Operate+0x198>)
 800cdd8:	895b      	ldrh	r3, [r3, #10]
 800cdda:	2b0f      	cmp	r3, #15
 800cddc:	d948      	bls.n	800ce70 <CommManager_Operate+0x18c>
					{
						kCommData.eState = Comm_CloseTransmission;
 800cdde:	4b27      	ldr	r3, [pc, #156]	; (800ce7c <CommManager_Operate+0x198>)
 800cde0:	2204      	movs	r2, #4
 800cde2:	721a      	strb	r2, [r3, #8]
						kCommData.u16ReadoutPointer = 0;
 800cde4:	4b25      	ldr	r3, [pc, #148]	; (800ce7c <CommManager_Operate+0x198>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	815a      	strh	r2, [r3, #10]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
				{
					kCommData.eState = Comm_Abort;
				}
			}
			break;
 800cdea:	e041      	b.n	800ce70 <CommManager_Operate+0x18c>
				else if( kCommData.ePreviousState == Comm_CloseTransmission)
 800cdec:	4b23      	ldr	r3, [pc, #140]	; (800ce7c <CommManager_Operate+0x198>)
 800cdee:	7a5b      	ldrb	r3, [r3, #9]
 800cdf0:	2b04      	cmp	r3, #4
 800cdf2:	d107      	bne.n	800ce04 <CommManager_Operate+0x120>
					kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSent;
 800cdf4:	4b21      	ldr	r3, [pc, #132]	; (800ce7c <CommManager_Operate+0x198>)
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	711a      	strb	r2, [r3, #4]
					kCommData.eState = Comm_Idle;
 800cdfc:	4b1f      	ldr	r3, [pc, #124]	; (800ce7c <CommManager_Operate+0x198>)
 800cdfe:	2201      	movs	r2, #1
 800ce00:	721a      	strb	r2, [r3, #8]
			break;
 800ce02:	e035      	b.n	800ce70 <CommManager_Operate+0x18c>
				else if ( kCommData.ePreviousState == Comm_OpenTransmission )
 800ce04:	4b1d      	ldr	r3, [pc, #116]	; (800ce7c <CommManager_Operate+0x198>)
 800ce06:	7a5b      	ldrb	r3, [r3, #9]
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d106      	bne.n	800ce1a <CommManager_Operate+0x136>
					kCommData.u16ReadoutPointer = 0;
 800ce0c:	4b1b      	ldr	r3, [pc, #108]	; (800ce7c <CommManager_Operate+0x198>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800ce12:	4b1a      	ldr	r3, [pc, #104]	; (800ce7c <CommManager_Operate+0x198>)
 800ce14:	2203      	movs	r2, #3
 800ce16:	721a      	strb	r2, [r3, #8]
			break;
 800ce18:	e02a      	b.n	800ce70 <CommManager_Operate+0x18c>
					AssertError(AppError_TransmissionLogicBroken);
 800ce1a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ce1e:	f7ff fb01 	bl	800c424 <AssertError>
					kCommData.eState = Comm_Abort;
 800ce22:	4b16      	ldr	r3, [pc, #88]	; (800ce7c <CommManager_Operate+0x198>)
 800ce24:	2207      	movs	r2, #7
 800ce26:	721a      	strb	r2, [r3, #8]
			break;
 800ce28:	e022      	b.n	800ce70 <CommManager_Operate+0x18c>
				kCommData.eState = kCommData.ePreviousState;
 800ce2a:	4b14      	ldr	r3, [pc, #80]	; (800ce7c <CommManager_Operate+0x198>)
 800ce2c:	7a5a      	ldrb	r2, [r3, #9]
 800ce2e:	4b13      	ldr	r3, [pc, #76]	; (800ce7c <CommManager_Operate+0x198>)
 800ce30:	721a      	strb	r2, [r3, #8]
				kCommData.u8TrialsCounter++;
 800ce32:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <CommManager_Operate+0x198>)
 800ce34:	7ddb      	ldrb	r3, [r3, #23]
 800ce36:	3301      	adds	r3, #1
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <CommManager_Operate+0x198>)
 800ce3c:	75da      	strb	r2, [r3, #23]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
 800ce3e:	4b0f      	ldr	r3, [pc, #60]	; (800ce7c <CommManager_Operate+0x198>)
 800ce40:	7ddb      	ldrb	r3, [r3, #23]
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	d914      	bls.n	800ce70 <CommManager_Operate+0x18c>
					kCommData.eState = Comm_Abort;
 800ce46:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <CommManager_Operate+0x198>)
 800ce48:	2207      	movs	r2, #7
 800ce4a:	721a      	strb	r2, [r3, #8]
			break;
 800ce4c:	e010      	b.n	800ce70 <CommManager_Operate+0x18c>
		case Comm_Receiving:

			break;
		case Comm_Abort:

			kCommData.eState = Comm_Idle;
 800ce4e:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <CommManager_Operate+0x198>)
 800ce50:	2201      	movs	r2, #1
 800ce52:	721a      	strb	r2, [r3, #8]

			kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800ce54:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <CommManager_Operate+0x198>)
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	2203      	movs	r2, #3
 800ce5a:	711a      	strb	r2, [r3, #4]
			kCommData.u16ReadoutPointer = 0;
 800ce5c:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <CommManager_Operate+0x198>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	815a      	strh	r2, [r3, #10]
			CommManager_FlushFrame();
 800ce62:	f000 f851 	bl	800cf08 <CommManager_FlushFrame>
			break;
 800ce66:	e004      	b.n	800ce72 <CommManager_Operate+0x18e>
		default:

			break;
		}
	}
 800ce68:	bf00      	nop
 800ce6a:	e002      	b.n	800ce72 <CommManager_Operate+0x18e>
			break;
 800ce6c:	bf00      	nop
 800ce6e:	e000      	b.n	800ce72 <CommManager_Operate+0x18e>
			break;
 800ce70:	bf00      	nop
}
 800ce72:	bf00      	nop
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200007d8 	.word	0x200007d8
 800ce80:	200007e4 	.word	0x200007e4

0800ce84 <CommManager_SetUSBConnectionState>:

void CommManager_SetUSBConnectionState( USBState_t eState )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	71fb      	strb	r3, [r7, #7]
	//todo: Add periodic change of the VSENSE pin
	if( eState == USB_Connected)
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d106      	bne.n	800cea2 <CommManager_SetUSBConnectionState+0x1e>
	{
		kCommData.bUSBConnected = true;
 800ce94:	4b09      	ldr	r3, [pc, #36]	; (800cebc <CommManager_SetUSBConnectionState+0x38>)
 800ce96:	2201      	movs	r2, #1
 800ce98:	761a      	strb	r2, [r3, #24]
		OperateLED_C(eLED_On);
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	f7f4 f874 	bl	8000f88 <OperateLED_C>
	{
		kCommData.bUSBConnected = false;
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
		OperateLED_C(eLED_Off);
	}
}
 800cea0:	e008      	b.n	800ceb4 <CommManager_SetUSBConnectionState+0x30>
		kCommData.bUSBConnected = false;
 800cea2:	4b06      	ldr	r3, [pc, #24]	; (800cebc <CommManager_SetUSBConnectionState+0x38>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	761a      	strb	r2, [r3, #24]
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
 800cea8:	4b04      	ldr	r3, [pc, #16]	; (800cebc <CommManager_SetUSBConnectionState+0x38>)
 800ceaa:	2207      	movs	r2, #7
 800ceac:	721a      	strb	r2, [r3, #8]
		OperateLED_C(eLED_Off);
 800ceae:	2001      	movs	r0, #1
 800ceb0:	f7f4 f86a 	bl	8000f88 <OperateLED_C>
}
 800ceb4:	bf00      	nop
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	200007d8 	.word	0x200007d8

0800cec0 <ComManager_ArmTransmission>:

void ComManager_ArmTransmission()
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	af00      	add	r7, sp, #0
	DataHandler_AccessMemoryInterchange(&kCommData.pkMemoryPointer);
 800cec4:	480e      	ldr	r0, [pc, #56]	; (800cf00 <ComManager_ArmTransmission+0x40>)
 800cec6:	f7ff fc7d 	bl	800c7c4 <DataHandler_AccessMemoryInterchange>

	if( kCommData.bUSBConnected)
 800ceca:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <ComManager_ArmTransmission+0x44>)
 800cecc:	7e1b      	ldrb	r3, [r3, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00f      	beq.n	800cef2 <ComManager_ArmTransmission+0x32>
	{
		if(kCommData.eState == Comm_Idle)
 800ced2:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <ComManager_ArmTransmission+0x44>)
 800ced4:	7a1b      	ldrb	r3, [r3, #8]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d106      	bne.n	800cee8 <ComManager_ArmTransmission+0x28>
		{
			kCommData.eState = Comm_OpenTransmission;
 800ceda:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <ComManager_ArmTransmission+0x44>)
 800cedc:	2202      	movs	r2, #2
 800cede:	721a      	strb	r2, [r3, #8]
			kCommData.u16ReadoutPointer = 0;
 800cee0:	4b08      	ldr	r3, [pc, #32]	; (800cf04 <ComManager_ArmTransmission+0x44>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	815a      	strh	r2, [r3, #10]
	else
	{
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
	}

}
 800cee6:	e008      	b.n	800cefa <ComManager_ArmTransmission+0x3a>
			AssertError(AppError_TransmissionOverlap);
 800cee8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ceec:	f7ff fa9a 	bl	800c424 <AssertError>
}
 800cef0:	e003      	b.n	800cefa <ComManager_ArmTransmission+0x3a>
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800cef2:	4b04      	ldr	r3, [pc, #16]	; (800cf04 <ComManager_ArmTransmission+0x44>)
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	2203      	movs	r2, #3
 800cef8:	711a      	strb	r2, [r3, #4]
}
 800cefa:	bf00      	nop
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	200007dc 	.word	0x200007dc
 800cf04:	200007d8 	.word	0x200007d8

0800cf08 <CommManager_FlushFrame>:

/* Internal functions */

void CommManager_FlushFrame()
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800cf0e:	2300      	movs	r3, #0
 800cf10:	71fb      	strb	r3, [r7, #7]
 800cf12:	e007      	b.n	800cf24 <CommManager_FlushFrame+0x1c>
	{
		kCommData.u8Frame[u8Idx] = 0;
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	4a08      	ldr	r2, [pc, #32]	; (800cf38 <CommManager_FlushFrame+0x30>)
 800cf18:	4413      	add	r3, r2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	731a      	strb	r2, [r3, #12]
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800cf1e:	79fb      	ldrb	r3, [r7, #7]
 800cf20:	3301      	adds	r3, #1
 800cf22:	71fb      	strb	r3, [r7, #7]
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	2b09      	cmp	r3, #9
 800cf28:	d9f4      	bls.n	800cf14 <CommManager_FlushFrame+0xc>
	}
}
 800cf2a:	bf00      	nop
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr
 800cf38:	200007d8 	.word	0x200007d8

0800cf3c <FrameAssembler_ConvertFloatToCharArray>:

#include "FrameAssembler.h"
#include <stdio.h>

void FrameAssembler_ConvertFloatToCharArray(uint8_t *pResultArray, float fNumber)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	ed87 0a00 	vstr	s0, [r7]
	sprintf((char*)pResultArray,"%+8.4f \t",fNumber);
 800cf48:	6838      	ldr	r0, [r7, #0]
 800cf4a:	f7f3 fb05 	bl	8000558 <__aeabi_f2d>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	4904      	ldr	r1, [pc, #16]	; (800cf64 <FrameAssembler_ConvertFloatToCharArray+0x28>)
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f002 f8db 	bl	800f110 <siprintf>
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	08011620 	.word	0x08011620

0800cf68 <USB_InitalizeTransmitterLogic>:
//static uint8_t Buf[] = "Test/r/n";

void ConvertDataToBytes(float *Dataset);

void USB_InitalizeTransmitterLogic(ADC_HandleTypeDef *phADCHandle)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
	kUSBTransmitterData.phADCHandle = phADCHandle;
 800cf70:	4a05      	ldr	r2, [pc, #20]	; (800cf88 <USB_InitalizeTransmitterLogic+0x20>)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6093      	str	r3, [r2, #8]
	kUSBTransmitterData.bInitialized = true;
 800cf76:	4b04      	ldr	r3, [pc, #16]	; (800cf88 <USB_InitalizeTransmitterLogic+0x20>)
 800cf78:	2201      	movs	r2, #1
 800cf7a:	701a      	strb	r2, [r3, #0]
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	200007f4 	.word	0x200007f4

0800cf8c <USB_TransmitData>:

bool USB_TransmitData(uint8_t *Dataset, uint8_t u8Length)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
	bool bResult = true;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	73fb      	strb	r3, [r7, #15]

	if(kUSBTransmitterData.bInitialized)
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <USB_TransmitData+0x3c>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <USB_TransmitData+0x30>
	{
	/*
	 * result = true means that a fault occurred
	 */
	bResult = CDC_Transmit_FS(Dataset,  u8Length);
 800cfa4:	78fb      	ldrb	r3, [r7, #3]
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 ff9e 	bl	800deec <CDC_Transmit_FS>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bf14      	ite	ne
 800cfb6:	2301      	movne	r3, #1
 800cfb8:	2300      	moveq	r3, #0
 800cfba:	73fb      	strb	r3, [r7, #15]
	}
	return bResult;
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	200007f4 	.word	0x200007f4

0800cfcc <USB_CheckForUSBConnection>:

void USB_CheckForUSBConnection()
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	af00      	add	r7, sp, #0
	if( kUSBTransmitterData.bInitialized )
 800cfd0:	4b1e      	ldr	r3, [pc, #120]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d037      	beq.n	800d048 <USB_CheckForUSBConnection+0x7c>
	{
		if( !kUSBTransmitterData.bCheckStarted )
 800cfd8:	4b1c      	ldr	r3, [pc, #112]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	f083 0301 	eor.w	r3, r3, #1
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d007      	beq.n	800cff6 <USB_CheckForUSBConnection+0x2a>
		{
			HAL_ADC_Start_IT(kUSBTransmitterData.phADCHandle);
 800cfe6:	4b19      	ldr	r3, [pc, #100]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f4 f91c 	bl	8001228 <HAL_ADC_Start_IT>
			kUSBTransmitterData.bCheckStarted = true;
 800cff0:	4b16      	ldr	r3, [pc, #88]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	705a      	strb	r2, [r3, #1]
		}

		if( kUSBTransmitterData.bNewMeasurement )
 800cff6:	4b15      	ldr	r3, [pc, #84]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800cff8:	789b      	ldrb	r3, [r3, #2]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d024      	beq.n	800d048 <USB_CheckForUSBConnection+0x7c>
		{
			kUSBTransmitterData.bNewMeasurement = false;
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800d000:	2200      	movs	r2, #0
 800d002:	709a      	strb	r2, [r3, #2]
			if( (kUSBTransmitterData.u32MeasuredVbus < dLowThreshold) && kUSBTransmitterData.bConnected )
 800d004:	4b11      	ldr	r3, [pc, #68]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800d006:	889b      	ldrh	r3, [r3, #4]
 800d008:	f640 429a 	movw	r2, #3226	; 0xc9a
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d809      	bhi.n	800d024 <USB_CheckForUSBConnection+0x58>
 800d010:	4b0e      	ldr	r3, [pc, #56]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800d012:	78db      	ldrb	r3, [r3, #3]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d005      	beq.n	800d024 <USB_CheckForUSBConnection+0x58>
			{
				kUSBTransmitterData.bConnected = false;
 800d018:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	70da      	strb	r2, [r3, #3]
				CallForUSBDisonnection();
 800d01e:	f7ff fc83 	bl	800c928 <CallForUSBDisonnection>
				CallForUSBConnection();
			}
		}
	}

}
 800d022:	e011      	b.n	800d048 <USB_CheckForUSBConnection+0x7c>
			else if ( (kUSBTransmitterData.u32MeasuredVbus > dHighThreshold) && !kUSBTransmitterData.bConnected )
 800d024:	4b09      	ldr	r3, [pc, #36]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800d026:	889b      	ldrh	r3, [r3, #4]
 800d028:	f640 5217 	movw	r2, #3351	; 0xd17
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d90b      	bls.n	800d048 <USB_CheckForUSBConnection+0x7c>
 800d030:	4b06      	ldr	r3, [pc, #24]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800d032:	78db      	ldrb	r3, [r3, #3]
 800d034:	f083 0301 	eor.w	r3, r3, #1
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d004      	beq.n	800d048 <USB_CheckForUSBConnection+0x7c>
				kUSBTransmitterData.bConnected = true;
 800d03e:	4b03      	ldr	r3, [pc, #12]	; (800d04c <USB_CheckForUSBConnection+0x80>)
 800d040:	2201      	movs	r2, #1
 800d042:	70da      	strb	r2, [r3, #3]
				CallForUSBConnection();
 800d044:	f7ff fc69 	bl	800c91a <CallForUSBConnection>
}
 800d048:	bf00      	nop
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	200007f4 	.word	0x200007f4

0800d050 <USB_SignalizeVBUSMeasurementReady>:

void USB_SignalizeVBUSMeasurementReady(uint32_t u32Result)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	kUSBTransmitterData.bNewMeasurement = true;
 800d058:	4b07      	ldr	r3, [pc, #28]	; (800d078 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800d05a:	2201      	movs	r2, #1
 800d05c:	709a      	strb	r2, [r3, #2]
	kUSBTransmitterData.u32MeasuredVbus = u32Result;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	b29a      	uxth	r2, r3
 800d062:	4b05      	ldr	r3, [pc, #20]	; (800d078 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800d064:	809a      	strh	r2, [r3, #4]
	kUSBTransmitterData.bCheckStarted = false;
 800d066:	4b04      	ldr	r3, [pc, #16]	; (800d078 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800d068:	2200      	movs	r2, #0
 800d06a:	705a      	strb	r2, [r3, #1]
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr
 800d078:	200007f4 	.word	0x200007f4

0800d07c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d080:	f7f3 fff8 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d084:	f000 f83c 	bl	800d100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d088:	f000 fa9c 	bl	800d5c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800d08c:	f000 fa7a 	bl	800d584 <MX_DMA_Init>
  MX_RTC_Init();
 800d090:	f000 f950 	bl	800d334 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800d094:	f000 f9a8 	bl	800d3e8 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800d098:	f000 f8f0 	bl	800d27c <MX_I2C1_Init>
  MX_I2C2_Init();
 800d09c:	f000 f91c 	bl	800d2d8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800d0a0:	f000 fa46 	bl	800d530 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800d0a4:	f000 fe64 	bl	800dd70 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800d0a8:	f000 f9ce 	bl	800d448 <MX_TIM2_Init>
  MX_ADC1_Init();
 800d0ac:	f000 f894 	bl	800d1d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //todo: add global handles assignment function
  SensorArray_Init(&hi2c1, &hi2c2);
 800d0b0:	490e      	ldr	r1, [pc, #56]	; (800d0ec <main+0x70>)
 800d0b2:	480f      	ldr	r0, [pc, #60]	; (800d0f0 <main+0x74>)
 800d0b4:	f7fd f9b4 	bl	800a420 <SensorArray_Init>
  USB_InitalizeTransmitterLogic(&hadc1);
 800d0b8:	480e      	ldr	r0, [pc, #56]	; (800d0f4 <main+0x78>)
 800d0ba:	f7ff ff55 	bl	800cf68 <USB_InitalizeTransmitterLogic>

  HAL_TIM_Base_Start_IT(&htim2);
 800d0be:	480e      	ldr	r0, [pc, #56]	; (800d0f8 <main+0x7c>)
 800d0c0:	f7fa f944 	bl	800734c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	2101      	movs	r1, #1
 800d0c8:	480c      	ldr	r0, [pc, #48]	; (800d0fc <main+0x80>)
 800d0ca:	f7f5 fad7 	bl	800267c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d0d4:	4809      	ldr	r0, [pc, #36]	; (800d0fc <main+0x80>)
 800d0d6:	f7f5 fad1 	bl	800267c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d0e0:	4806      	ldr	r0, [pc, #24]	; (800d0fc <main+0x80>)
 800d0e2:	f7f5 facb 	bl	800267c <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800d0e6:	f7ff f85f 	bl	800c1a8 <ApplicationPerform>
 800d0ea:	e7fc      	b.n	800d0e6 <main+0x6a>
 800d0ec:	20000bd4 	.word	0x20000bd4
 800d0f0:	20000b80 	.word	0x20000b80
 800d0f4:	20000c28 	.word	0x20000c28
 800d0f8:	20000d58 	.word	0x20000d58
 800d0fc:	40020800 	.word	0x40020800

0800d100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b094      	sub	sp, #80	; 0x50
 800d104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d106:	f107 0320 	add.w	r3, r7, #32
 800d10a:	2230      	movs	r2, #48	; 0x30
 800d10c:	2100      	movs	r1, #0
 800d10e:	4618      	mov	r0, r3
 800d110:	f001 fb8c 	bl	800e82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d114:	f107 030c 	add.w	r3, r7, #12
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	605a      	str	r2, [r3, #4]
 800d11e:	609a      	str	r2, [r3, #8]
 800d120:	60da      	str	r2, [r3, #12]
 800d122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d124:	2300      	movs	r3, #0
 800d126:	60bb      	str	r3, [r7, #8]
 800d128:	4b29      	ldr	r3, [pc, #164]	; (800d1d0 <SystemClock_Config+0xd0>)
 800d12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12c:	4a28      	ldr	r2, [pc, #160]	; (800d1d0 <SystemClock_Config+0xd0>)
 800d12e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d132:	6413      	str	r3, [r2, #64]	; 0x40
 800d134:	4b26      	ldr	r3, [pc, #152]	; (800d1d0 <SystemClock_Config+0xd0>)
 800d136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d13c:	60bb      	str	r3, [r7, #8]
 800d13e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d140:	2300      	movs	r3, #0
 800d142:	607b      	str	r3, [r7, #4]
 800d144:	4b23      	ldr	r3, [pc, #140]	; (800d1d4 <SystemClock_Config+0xd4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a22      	ldr	r2, [pc, #136]	; (800d1d4 <SystemClock_Config+0xd4>)
 800d14a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	4b20      	ldr	r3, [pc, #128]	; (800d1d4 <SystemClock_Config+0xd4>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d158:	607b      	str	r3, [r7, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800d15c:	2305      	movs	r3, #5
 800d15e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d164:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d166:	2301      	movs	r3, #1
 800d168:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d16a:	2302      	movs	r3, #2
 800d16c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d16e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800d174:	230c      	movs	r3, #12
 800d176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800d178:	2348      	movs	r3, #72	; 0x48
 800d17a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d17c:	2302      	movs	r3, #2
 800d17e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800d180:	2303      	movs	r3, #3
 800d182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d184:	f107 0320 	add.w	r3, r7, #32
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f8 fb1b 	bl	80057c4 <HAL_RCC_OscConfig>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800d194:	f000 faa2 	bl	800d6dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d198:	230f      	movs	r3, #15
 800d19a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d19c:	2302      	movs	r3, #2
 800d19e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d1a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d1ae:	f107 030c 	add.w	r3, r7, #12
 800d1b2:	2102      	movs	r1, #2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7f8 fd7b 	bl	8005cb0 <HAL_RCC_ClockConfig>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800d1c0:	f000 fa8c 	bl	800d6dc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800d1c4:	f7f8 fe5a 	bl	8005e7c <HAL_RCC_EnableCSS>
}
 800d1c8:	bf00      	nop
 800d1ca:	3750      	adds	r7, #80	; 0x50
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	40023800 	.word	0x40023800
 800d1d4:	40007000 	.word	0x40007000

0800d1d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d1de:	463b      	mov	r3, r7
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	605a      	str	r2, [r3, #4]
 800d1e6:	609a      	str	r2, [r3, #8]
 800d1e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800d1ea:	4b21      	ldr	r3, [pc, #132]	; (800d270 <MX_ADC1_Init+0x98>)
 800d1ec:	4a21      	ldr	r2, [pc, #132]	; (800d274 <MX_ADC1_Init+0x9c>)
 800d1ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800d1f0:	4b1f      	ldr	r3, [pc, #124]	; (800d270 <MX_ADC1_Init+0x98>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d1f6:	4b1e      	ldr	r3, [pc, #120]	; (800d270 <MX_ADC1_Init+0x98>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800d1fc:	4b1c      	ldr	r3, [pc, #112]	; (800d270 <MX_ADC1_Init+0x98>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d202:	4b1b      	ldr	r3, [pc, #108]	; (800d270 <MX_ADC1_Init+0x98>)
 800d204:	2200      	movs	r2, #0
 800d206:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d208:	4b19      	ldr	r3, [pc, #100]	; (800d270 <MX_ADC1_Init+0x98>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d210:	4b17      	ldr	r3, [pc, #92]	; (800d270 <MX_ADC1_Init+0x98>)
 800d212:	2200      	movs	r2, #0
 800d214:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d216:	4b16      	ldr	r3, [pc, #88]	; (800d270 <MX_ADC1_Init+0x98>)
 800d218:	4a17      	ldr	r2, [pc, #92]	; (800d278 <MX_ADC1_Init+0xa0>)
 800d21a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d21c:	4b14      	ldr	r3, [pc, #80]	; (800d270 <MX_ADC1_Init+0x98>)
 800d21e:	2200      	movs	r2, #0
 800d220:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800d222:	4b13      	ldr	r3, [pc, #76]	; (800d270 <MX_ADC1_Init+0x98>)
 800d224:	2201      	movs	r2, #1
 800d226:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d228:	4b11      	ldr	r3, [pc, #68]	; (800d270 <MX_ADC1_Init+0x98>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d230:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <MX_ADC1_Init+0x98>)
 800d232:	2201      	movs	r2, #1
 800d234:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d236:	480e      	ldr	r0, [pc, #56]	; (800d270 <MX_ADC1_Init+0x98>)
 800d238:	f7f3 ffb2 	bl	80011a0 <HAL_ADC_Init>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800d242:	f000 fa4b 	bl	800d6dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800d246:	2308      	movs	r3, #8
 800d248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d24a:	2301      	movs	r3, #1
 800d24c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d24e:	2300      	movs	r3, #0
 800d250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d252:	463b      	mov	r3, r7
 800d254:	4619      	mov	r1, r3
 800d256:	4806      	ldr	r0, [pc, #24]	; (800d270 <MX_ADC1_Init+0x98>)
 800d258:	f7f4 fa10 	bl	800167c <HAL_ADC_ConfigChannel>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800d262:	f000 fa3b 	bl	800d6dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d266:	bf00      	nop
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20000c28 	.word	0x20000c28
 800d274:	40012000 	.word	0x40012000
 800d278:	0f000001 	.word	0x0f000001

0800d27c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d280:	4b13      	ldr	r3, [pc, #76]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d282:	4a14      	ldr	r2, [pc, #80]	; (800d2d4 <MX_I2C1_Init+0x58>)
 800d284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 800d286:	4b12      	ldr	r3, [pc, #72]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d288:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800d28c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d28e:	4b10      	ldr	r3, [pc, #64]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d290:	2200      	movs	r2, #0
 800d292:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d294:	4b0e      	ldr	r3, [pc, #56]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d296:	2200      	movs	r2, #0
 800d298:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d29a:	4b0d      	ldr	r3, [pc, #52]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d29c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d2a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d2a2:	4b0b      	ldr	r3, [pc, #44]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d2a8:	4b09      	ldr	r3, [pc, #36]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d2ae:	4b08      	ldr	r3, [pc, #32]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d2b4:	4b06      	ldr	r3, [pc, #24]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d2ba:	4805      	ldr	r0, [pc, #20]	; (800d2d0 <MX_I2C1_Init+0x54>)
 800d2bc:	f7f5 fa36 	bl	800272c <HAL_I2C_Init>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800d2c6:	f000 fa09 	bl	800d6dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d2ca:	bf00      	nop
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20000b80 	.word	0x20000b80
 800d2d4:	40005400 	.word	0x40005400

0800d2d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800d2dc:	4b13      	ldr	r3, [pc, #76]	; (800d32c <MX_I2C2_Init+0x54>)
 800d2de:	4a14      	ldr	r2, [pc, #80]	; (800d330 <MX_I2C2_Init+0x58>)
 800d2e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 25000;
 800d2e2:	4b12      	ldr	r3, [pc, #72]	; (800d32c <MX_I2C2_Init+0x54>)
 800d2e4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800d2e8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d2ea:	4b10      	ldr	r3, [pc, #64]	; (800d32c <MX_I2C2_Init+0x54>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800d2f0:	4b0e      	ldr	r3, [pc, #56]	; (800d32c <MX_I2C2_Init+0x54>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d2f6:	4b0d      	ldr	r3, [pc, #52]	; (800d32c <MX_I2C2_Init+0x54>)
 800d2f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d2fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d2fe:	4b0b      	ldr	r3, [pc, #44]	; (800d32c <MX_I2C2_Init+0x54>)
 800d300:	2200      	movs	r2, #0
 800d302:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800d304:	4b09      	ldr	r3, [pc, #36]	; (800d32c <MX_I2C2_Init+0x54>)
 800d306:	2200      	movs	r2, #0
 800d308:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d30a:	4b08      	ldr	r3, [pc, #32]	; (800d32c <MX_I2C2_Init+0x54>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d310:	4b06      	ldr	r3, [pc, #24]	; (800d32c <MX_I2C2_Init+0x54>)
 800d312:	2200      	movs	r2, #0
 800d314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800d316:	4805      	ldr	r0, [pc, #20]	; (800d32c <MX_I2C2_Init+0x54>)
 800d318:	f7f5 fa08 	bl	800272c <HAL_I2C_Init>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800d322:	f000 f9db 	bl	800d6dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800d326:	bf00      	nop
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20000bd4 	.word	0x20000bd4
 800d330:	40005800 	.word	0x40005800

0800d334 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d33a:	1d3b      	adds	r3, r7, #4
 800d33c:	2200      	movs	r2, #0
 800d33e:	601a      	str	r2, [r3, #0]
 800d340:	605a      	str	r2, [r3, #4]
 800d342:	609a      	str	r2, [r3, #8]
 800d344:	60da      	str	r2, [r3, #12]
 800d346:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800d348:	2300      	movs	r3, #0
 800d34a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d34c:	4b24      	ldr	r3, [pc, #144]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d34e:	4a25      	ldr	r2, [pc, #148]	; (800d3e4 <MX_RTC_Init+0xb0>)
 800d350:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d352:	4b23      	ldr	r3, [pc, #140]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d354:	2200      	movs	r2, #0
 800d356:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d358:	4b21      	ldr	r3, [pc, #132]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d35a:	227f      	movs	r2, #127	; 0x7f
 800d35c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d35e:	4b20      	ldr	r3, [pc, #128]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d360:	22ff      	movs	r2, #255	; 0xff
 800d362:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d364:	4b1e      	ldr	r3, [pc, #120]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d366:	2200      	movs	r2, #0
 800d368:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d36a:	4b1d      	ldr	r3, [pc, #116]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d370:	4b1b      	ldr	r3, [pc, #108]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d372:	2200      	movs	r2, #0
 800d374:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d376:	481a      	ldr	r0, [pc, #104]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d378:	f7f8 ff82 	bl	8006280 <HAL_RTC_Init>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800d382:	f000 f9ab 	bl	800d6dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800d386:	2300      	movs	r3, #0
 800d388:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800d38e:	2300      	movs	r3, #0
 800d390:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d392:	2300      	movs	r3, #0
 800d394:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d396:	2300      	movs	r3, #0
 800d398:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800d39a:	1d3b      	adds	r3, r7, #4
 800d39c:	2201      	movs	r2, #1
 800d39e:	4619      	mov	r1, r3
 800d3a0:	480f      	ldr	r0, [pc, #60]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d3a2:	f7f8 fffe 	bl	80063a2 <HAL_RTC_SetTime>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800d3ac:	f000 f996 	bl	800d6dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 800d3b4:	2312      	movs	r3, #18
 800d3b6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 800d3b8:	2327      	movs	r3, #39	; 0x27
 800d3ba:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 800d3bc:	2321      	movs	r3, #33	; 0x21
 800d3be:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800d3c0:	463b      	mov	r3, r7
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4806      	ldr	r0, [pc, #24]	; (800d3e0 <MX_RTC_Init+0xac>)
 800d3c8:	f7f9 f8a8 	bl	800651c <HAL_RTC_SetDate>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800d3d2:	f000 f983 	bl	800d6dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d3d6:	bf00      	nop
 800d3d8:	3718      	adds	r7, #24
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20000cb4 	.word	0x20000cb4
 800d3e4:	40002800 	.word	0x40002800

0800d3e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800d3ec:	4b14      	ldr	r3, [pc, #80]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d3ee:	4a15      	ldr	r2, [pc, #84]	; (800d444 <MX_SDIO_SD_Init+0x5c>)
 800d3f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800d3f2:	4b13      	ldr	r3, [pc, #76]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800d3f8:	4b11      	ldr	r3, [pc, #68]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d3fe:	4b10      	ldr	r3, [pc, #64]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d400:	2200      	movs	r2, #0
 800d402:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800d404:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d406:	2200      	movs	r2, #0
 800d408:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d40a:	4b0d      	ldr	r3, [pc, #52]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800d410:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d412:	2200      	movs	r2, #0
 800d414:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800d416:	480a      	ldr	r0, [pc, #40]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d418:	f7f9 f999 	bl	800674e <HAL_SD_Init>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800d422:	f000 f95b 	bl	800d6dc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d42a:	4805      	ldr	r0, [pc, #20]	; (800d440 <MX_SDIO_SD_Init+0x58>)
 800d42c:	f7f9 fbe2 	bl	8006bf4 <HAL_SD_ConfigWideBusOperation>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800d436:	f000 f951 	bl	800d6dc <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800d43a:	bf00      	nop
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	20000cd4 	.word	0x20000cd4
 800d444:	40012c00 	.word	0x40012c00

0800d448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08e      	sub	sp, #56	; 0x38
 800d44c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d44e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d452:	2200      	movs	r2, #0
 800d454:	601a      	str	r2, [r3, #0]
 800d456:	605a      	str	r2, [r3, #4]
 800d458:	609a      	str	r2, [r3, #8]
 800d45a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d45c:	f107 0320 	add.w	r3, r7, #32
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d466:	1d3b      	adds	r3, r7, #4
 800d468:	2200      	movs	r2, #0
 800d46a:	601a      	str	r2, [r3, #0]
 800d46c:	605a      	str	r2, [r3, #4]
 800d46e:	609a      	str	r2, [r3, #8]
 800d470:	60da      	str	r2, [r3, #12]
 800d472:	611a      	str	r2, [r3, #16]
 800d474:	615a      	str	r2, [r3, #20]
 800d476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d478:	4b2b      	ldr	r3, [pc, #172]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d47a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d47e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800d480:	4b29      	ldr	r3, [pc, #164]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d482:	2248      	movs	r2, #72	; 0x48
 800d484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d486:	4b28      	ldr	r3, [pc, #160]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d488:	2200      	movs	r2, #0
 800d48a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250000;
 800d48c:	4b26      	ldr	r3, [pc, #152]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d48e:	4a27      	ldr	r2, [pc, #156]	; (800d52c <MX_TIM2_Init+0xe4>)
 800d490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d492:	4b25      	ldr	r3, [pc, #148]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d494:	2200      	movs	r2, #0
 800d496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d498:	4b23      	ldr	r3, [pc, #140]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d49a:	2280      	movs	r2, #128	; 0x80
 800d49c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d49e:	4822      	ldr	r0, [pc, #136]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d4a0:	f7f9 ff05 	bl	80072ae <HAL_TIM_Base_Init>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800d4aa:	f000 f917 	bl	800d6dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d4b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	481b      	ldr	r0, [pc, #108]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d4bc:	f7fa f966 	bl	800778c <HAL_TIM_ConfigClockSource>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800d4c6:	f000 f909 	bl	800d6dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800d4ca:	4817      	ldr	r0, [pc, #92]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d4cc:	f7f9 ffa0 	bl	8007410 <HAL_TIM_OC_Init>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800d4d6:	f000 f901 	bl	800d6dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d4e2:	f107 0320 	add.w	r3, r7, #32
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	480f      	ldr	r0, [pc, #60]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d4ea:	f7fa fcef 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800d4f4:	f000 f8f2 	bl	800d6dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d500:	2300      	movs	r3, #0
 800d502:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d504:	2300      	movs	r3, #0
 800d506:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d508:	1d3b      	adds	r3, r7, #4
 800d50a:	2200      	movs	r2, #0
 800d50c:	4619      	mov	r1, r3
 800d50e:	4806      	ldr	r0, [pc, #24]	; (800d528 <MX_TIM2_Init+0xe0>)
 800d510:	f7fa f8e0 	bl	80076d4 <HAL_TIM_OC_ConfigChannel>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800d51a:	f000 f8df 	bl	800d6dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800d51e:	bf00      	nop
 800d520:	3738      	adds	r7, #56	; 0x38
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	20000d58 	.word	0x20000d58
 800d52c:	0003d090 	.word	0x0003d090

0800d530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d534:	4b11      	ldr	r3, [pc, #68]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d536:	4a12      	ldr	r2, [pc, #72]	; (800d580 <MX_USART1_UART_Init+0x50>)
 800d538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d53a:	4b10      	ldr	r3, [pc, #64]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d53c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d542:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d544:	2200      	movs	r2, #0
 800d546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d548:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d54a:	2200      	movs	r2, #0
 800d54c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d54e:	4b0b      	ldr	r3, [pc, #44]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d550:	2200      	movs	r2, #0
 800d552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d554:	4b09      	ldr	r3, [pc, #36]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d556:	220c      	movs	r2, #12
 800d558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d55a:	4b08      	ldr	r3, [pc, #32]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d560:	4b06      	ldr	r3, [pc, #24]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d562:	2200      	movs	r2, #0
 800d564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d566:	4805      	ldr	r0, [pc, #20]	; (800d57c <MX_USART1_UART_Init+0x4c>)
 800d568:	f7fa fd32 	bl	8007fd0 <HAL_UART_Init>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d572:	f000 f8b3 	bl	800d6dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d576:	bf00      	nop
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20000c70 	.word	0x20000c70
 800d580:	40011000 	.word	0x40011000

0800d584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d58a:	2300      	movs	r3, #0
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <MX_DMA_Init+0x3c>)
 800d590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d592:	4a0b      	ldr	r2, [pc, #44]	; (800d5c0 <MX_DMA_Init+0x3c>)
 800d594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d598:	6313      	str	r3, [r2, #48]	; 0x30
 800d59a:	4b09      	ldr	r3, [pc, #36]	; (800d5c0 <MX_DMA_Init+0x3c>)
 800d59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d59e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5a2:	607b      	str	r3, [r7, #4]
 800d5a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	200c      	movs	r0, #12
 800d5ac:	f7f4 fb79 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800d5b0:	200c      	movs	r0, #12
 800d5b2:	f7f4 fb92 	bl	8001cda <HAL_NVIC_EnableIRQ>

}
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	40023800 	.word	0x40023800

0800d5c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08a      	sub	sp, #40	; 0x28
 800d5c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5ca:	f107 0314 	add.w	r3, r7, #20
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	605a      	str	r2, [r3, #4]
 800d5d4:	609a      	str	r2, [r3, #8]
 800d5d6:	60da      	str	r2, [r3, #12]
 800d5d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d5da:	2300      	movs	r3, #0
 800d5dc:	613b      	str	r3, [r7, #16]
 800d5de:	4b3c      	ldr	r3, [pc, #240]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e2:	4a3b      	ldr	r2, [pc, #236]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d5e4:	f043 0304 	orr.w	r3, r3, #4
 800d5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800d5ea:	4b39      	ldr	r3, [pc, #228]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ee:	f003 0304 	and.w	r3, r3, #4
 800d5f2:	613b      	str	r3, [r7, #16]
 800d5f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	4b35      	ldr	r3, [pc, #212]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5fe:	4a34      	ldr	r2, [pc, #208]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d604:	6313      	str	r3, [r2, #48]	; 0x30
 800d606:	4b32      	ldr	r3, [pc, #200]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d60e:	60fb      	str	r3, [r7, #12]
 800d610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d612:	2300      	movs	r3, #0
 800d614:	60bb      	str	r3, [r7, #8]
 800d616:	4b2e      	ldr	r3, [pc, #184]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d61a:	4a2d      	ldr	r2, [pc, #180]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d61c:	f043 0301 	orr.w	r3, r3, #1
 800d620:	6313      	str	r3, [r2, #48]	; 0x30
 800d622:	4b2b      	ldr	r3, [pc, #172]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	60bb      	str	r3, [r7, #8]
 800d62c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d62e:	2300      	movs	r3, #0
 800d630:	607b      	str	r3, [r7, #4]
 800d632:	4b27      	ldr	r3, [pc, #156]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d636:	4a26      	ldr	r2, [pc, #152]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d638:	f043 0302 	orr.w	r3, r3, #2
 800d63c:	6313      	str	r3, [r2, #48]	; 0x30
 800d63e:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <MX_GPIO_Init+0x10c>)
 800d640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d642:	f003 0302 	and.w	r3, r3, #2
 800d646:	607b      	str	r3, [r7, #4]
 800d648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800d64a:	2200      	movs	r2, #0
 800d64c:	f243 010f 	movw	r1, #12303	; 0x300f
 800d650:	4820      	ldr	r0, [pc, #128]	; (800d6d4 <MX_GPIO_Init+0x110>)
 800d652:	f7f5 f813 	bl	800267c <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800d656:	2200      	movs	r2, #0
 800d658:	2107      	movs	r1, #7
 800d65a:	481f      	ldr	r0, [pc, #124]	; (800d6d8 <MX_GPIO_Init+0x114>)
 800d65c:	f7f5 f80e 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800d660:	f243 030f 	movw	r3, #12303	; 0x300f
 800d664:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d666:	2301      	movs	r3, #1
 800d668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d66e:	2300      	movs	r3, #0
 800d670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d672:	f107 0314 	add.w	r3, r7, #20
 800d676:	4619      	mov	r1, r3
 800d678:	4816      	ldr	r0, [pc, #88]	; (800d6d4 <MX_GPIO_Init+0x110>)
 800d67a:	f7f4 fe63 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800d67e:	2307      	movs	r3, #7
 800d680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d682:	2301      	movs	r3, #1
 800d684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d686:	2300      	movs	r3, #0
 800d688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d68a:	2300      	movs	r3, #0
 800d68c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d68e:	f107 0314 	add.w	r3, r7, #20
 800d692:	4619      	mov	r1, r3
 800d694:	4810      	ldr	r0, [pc, #64]	; (800d6d8 <MX_GPIO_Init+0x114>)
 800d696:	f7f4 fe55 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800d69a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d69e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d6a0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800d6a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800d6aa:	f107 0314 	add.w	r3, r7, #20
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	4809      	ldr	r0, [pc, #36]	; (800d6d8 <MX_GPIO_Init+0x114>)
 800d6b2:	f7f4 fe47 	bl	8002344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	2017      	movs	r0, #23
 800d6bc:	f7f4 faf1 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800d6c0:	2017      	movs	r0, #23
 800d6c2:	f7f4 fb0a 	bl	8001cda <HAL_NVIC_EnableIRQ>

}
 800d6c6:	bf00      	nop
 800d6c8:	3728      	adds	r7, #40	; 0x28
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	40023800 	.word	0x40023800
 800d6d4:	40020800 	.word	0x40020800
 800d6d8:	40020000 	.word	0x40020000

0800d6dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d6e0:	b672      	cpsid	i
}
 800d6e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d6e4:	e7fe      	b.n	800d6e4 <Error_Handler+0x8>
	...

0800d6e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	607b      	str	r3, [r7, #4]
 800d6f2:	4b10      	ldr	r3, [pc, #64]	; (800d734 <HAL_MspInit+0x4c>)
 800d6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6f6:	4a0f      	ldr	r2, [pc, #60]	; (800d734 <HAL_MspInit+0x4c>)
 800d6f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d6fc:	6453      	str	r3, [r2, #68]	; 0x44
 800d6fe:	4b0d      	ldr	r3, [pc, #52]	; (800d734 <HAL_MspInit+0x4c>)
 800d700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d706:	607b      	str	r3, [r7, #4]
 800d708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d70a:	2300      	movs	r3, #0
 800d70c:	603b      	str	r3, [r7, #0]
 800d70e:	4b09      	ldr	r3, [pc, #36]	; (800d734 <HAL_MspInit+0x4c>)
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	4a08      	ldr	r2, [pc, #32]	; (800d734 <HAL_MspInit+0x4c>)
 800d714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d718:	6413      	str	r3, [r2, #64]	; 0x40
 800d71a:	4b06      	ldr	r3, [pc, #24]	; (800d734 <HAL_MspInit+0x4c>)
 800d71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d71e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d726:	bf00      	nop
 800d728:	370c      	adds	r7, #12
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop
 800d734:	40023800 	.word	0x40023800

0800d738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08a      	sub	sp, #40	; 0x28
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d740:	f107 0314 	add.w	r3, r7, #20
 800d744:	2200      	movs	r2, #0
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	605a      	str	r2, [r3, #4]
 800d74a:	609a      	str	r2, [r3, #8]
 800d74c:	60da      	str	r2, [r3, #12]
 800d74e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a1b      	ldr	r2, [pc, #108]	; (800d7c4 <HAL_ADC_MspInit+0x8c>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d12f      	bne.n	800d7ba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d75a:	2300      	movs	r3, #0
 800d75c:	613b      	str	r3, [r7, #16]
 800d75e:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <HAL_ADC_MspInit+0x90>)
 800d760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d762:	4a19      	ldr	r2, [pc, #100]	; (800d7c8 <HAL_ADC_MspInit+0x90>)
 800d764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d768:	6453      	str	r3, [r2, #68]	; 0x44
 800d76a:	4b17      	ldr	r3, [pc, #92]	; (800d7c8 <HAL_ADC_MspInit+0x90>)
 800d76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d772:	613b      	str	r3, [r7, #16]
 800d774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d776:	2300      	movs	r3, #0
 800d778:	60fb      	str	r3, [r7, #12]
 800d77a:	4b13      	ldr	r3, [pc, #76]	; (800d7c8 <HAL_ADC_MspInit+0x90>)
 800d77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77e:	4a12      	ldr	r2, [pc, #72]	; (800d7c8 <HAL_ADC_MspInit+0x90>)
 800d780:	f043 0302 	orr.w	r3, r3, #2
 800d784:	6313      	str	r3, [r2, #48]	; 0x30
 800d786:	4b10      	ldr	r3, [pc, #64]	; (800d7c8 <HAL_ADC_MspInit+0x90>)
 800d788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78a:	f003 0302 	and.w	r3, r3, #2
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d792:	2301      	movs	r3, #1
 800d794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d796:	2303      	movs	r3, #3
 800d798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d79e:	f107 0314 	add.w	r3, r7, #20
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	4809      	ldr	r0, [pc, #36]	; (800d7cc <HAL_ADC_MspInit+0x94>)
 800d7a6:	f7f4 fdcd 	bl	8002344 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	2012      	movs	r0, #18
 800d7b0:	f7f4 fa77 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800d7b4:	2012      	movs	r0, #18
 800d7b6:	f7f4 fa90 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800d7ba:	bf00      	nop
 800d7bc:	3728      	adds	r7, #40	; 0x28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	40012000 	.word	0x40012000
 800d7c8:	40023800 	.word	0x40023800
 800d7cc:	40020400 	.word	0x40020400

0800d7d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08c      	sub	sp, #48	; 0x30
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7d8:	f107 031c 	add.w	r3, r7, #28
 800d7dc:	2200      	movs	r2, #0
 800d7de:	601a      	str	r2, [r3, #0]
 800d7e0:	605a      	str	r2, [r3, #4]
 800d7e2:	609a      	str	r2, [r3, #8]
 800d7e4:	60da      	str	r2, [r3, #12]
 800d7e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a61      	ldr	r2, [pc, #388]	; (800d974 <HAL_I2C_MspInit+0x1a4>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d16a      	bne.n	800d8c8 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	61bb      	str	r3, [r7, #24]
 800d7f6:	4b60      	ldr	r3, [pc, #384]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fa:	4a5f      	ldr	r2, [pc, #380]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d7fc:	f043 0302 	orr.w	r3, r3, #2
 800d800:	6313      	str	r3, [r2, #48]	; 0x30
 800d802:	4b5d      	ldr	r3, [pc, #372]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d806:	f003 0302 	and.w	r3, r3, #2
 800d80a:	61bb      	str	r3, [r7, #24]
 800d80c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d80e:	23c0      	movs	r3, #192	; 0xc0
 800d810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d812:	2312      	movs	r3, #18
 800d814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d816:	2301      	movs	r3, #1
 800d818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d81a:	2303      	movs	r3, #3
 800d81c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d81e:	2304      	movs	r3, #4
 800d820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d822:	f107 031c 	add.w	r3, r7, #28
 800d826:	4619      	mov	r1, r3
 800d828:	4854      	ldr	r0, [pc, #336]	; (800d97c <HAL_I2C_MspInit+0x1ac>)
 800d82a:	f7f4 fd8b 	bl	8002344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d82e:	2300      	movs	r3, #0
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	4b51      	ldr	r3, [pc, #324]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d836:	4a50      	ldr	r2, [pc, #320]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d83c:	6413      	str	r3, [r2, #64]	; 0x40
 800d83e:	4b4e      	ldr	r3, [pc, #312]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d846:	617b      	str	r3, [r7, #20]
 800d848:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800d84a:	4b4d      	ldr	r3, [pc, #308]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d84c:	4a4d      	ldr	r2, [pc, #308]	; (800d984 <HAL_I2C_MspInit+0x1b4>)
 800d84e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800d850:	4b4b      	ldr	r3, [pc, #300]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d852:	2200      	movs	r2, #0
 800d854:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d856:	4b4a      	ldr	r3, [pc, #296]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d858:	2240      	movs	r2, #64	; 0x40
 800d85a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d85c:	4b48      	ldr	r3, [pc, #288]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d85e:	2200      	movs	r2, #0
 800d860:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d862:	4b47      	ldr	r3, [pc, #284]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d868:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d86a:	4b45      	ldr	r3, [pc, #276]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d870:	4b43      	ldr	r3, [pc, #268]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d872:	2200      	movs	r2, #0
 800d874:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800d876:	4b42      	ldr	r3, [pc, #264]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d878:	2200      	movs	r2, #0
 800d87a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800d87c:	4b40      	ldr	r3, [pc, #256]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d87e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d882:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d884:	4b3e      	ldr	r3, [pc, #248]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d886:	2200      	movs	r2, #0
 800d888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800d88a:	483d      	ldr	r0, [pc, #244]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d88c:	f7f4 fa40 	bl	8001d10 <HAL_DMA_Init>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800d896:	f7ff ff21 	bl	800d6dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a38      	ldr	r2, [pc, #224]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d89e:	635a      	str	r2, [r3, #52]	; 0x34
 800d8a0:	4a37      	ldr	r2, [pc, #220]	; (800d980 <HAL_I2C_MspInit+0x1b0>)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	201f      	movs	r0, #31
 800d8ac:	f7f4 f9f9 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800d8b0:	201f      	movs	r0, #31
 800d8b2:	f7f4 fa12 	bl	8001cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	2020      	movs	r0, #32
 800d8bc:	f7f4 f9f1 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800d8c0:	2020      	movs	r0, #32
 800d8c2:	f7f4 fa0a 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800d8c6:	e051      	b.n	800d96c <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C2)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a2e      	ldr	r2, [pc, #184]	; (800d988 <HAL_I2C_MspInit+0x1b8>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d14c      	bne.n	800d96c <HAL_I2C_MspInit+0x19c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	613b      	str	r3, [r7, #16]
 800d8d6:	4b28      	ldr	r3, [pc, #160]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8da:	4a27      	ldr	r2, [pc, #156]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d8dc:	f043 0302 	orr.w	r3, r3, #2
 800d8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800d8e2:	4b25      	ldr	r3, [pc, #148]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e6:	f003 0302 	and.w	r3, r3, #2
 800d8ea:	613b      	str	r3, [r7, #16]
 800d8ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d8f4:	2312      	movs	r3, #18
 800d8f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d900:	2304      	movs	r3, #4
 800d902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d904:	f107 031c 	add.w	r3, r7, #28
 800d908:	4619      	mov	r1, r3
 800d90a:	481c      	ldr	r0, [pc, #112]	; (800d97c <HAL_I2C_MspInit+0x1ac>)
 800d90c:	f7f4 fd1a 	bl	8002344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d910:	2308      	movs	r3, #8
 800d912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d914:	2312      	movs	r3, #18
 800d916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d918:	2301      	movs	r3, #1
 800d91a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d91c:	2303      	movs	r3, #3
 800d91e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800d920:	2309      	movs	r3, #9
 800d922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d924:	f107 031c 	add.w	r3, r7, #28
 800d928:	4619      	mov	r1, r3
 800d92a:	4814      	ldr	r0, [pc, #80]	; (800d97c <HAL_I2C_MspInit+0x1ac>)
 800d92c:	f7f4 fd0a 	bl	8002344 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d930:	2300      	movs	r3, #0
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	4b10      	ldr	r3, [pc, #64]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d938:	4a0f      	ldr	r2, [pc, #60]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d93a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d93e:	6413      	str	r3, [r2, #64]	; 0x40
 800d940:	4b0d      	ldr	r3, [pc, #52]	; (800d978 <HAL_I2C_MspInit+0x1a8>)
 800d942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d948:	60fb      	str	r3, [r7, #12]
 800d94a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800d94c:	2200      	movs	r2, #0
 800d94e:	2100      	movs	r1, #0
 800d950:	2021      	movs	r0, #33	; 0x21
 800d952:	f7f4 f9a6 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800d956:	2021      	movs	r0, #33	; 0x21
 800d958:	f7f4 f9bf 	bl	8001cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800d95c:	2200      	movs	r2, #0
 800d95e:	2100      	movs	r1, #0
 800d960:	2022      	movs	r0, #34	; 0x22
 800d962:	f7f4 f99e 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800d966:	2022      	movs	r0, #34	; 0x22
 800d968:	f7f4 f9b7 	bl	8001cda <HAL_NVIC_EnableIRQ>
}
 800d96c:	bf00      	nop
 800d96e:	3730      	adds	r7, #48	; 0x30
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	40005400 	.word	0x40005400
 800d978:	40023800 	.word	0x40023800
 800d97c:	40020400 	.word	0x40020400
 800d980:	20000b20 	.word	0x20000b20
 800d984:	40026028 	.word	0x40026028
 800d988:	40005800 	.word	0x40005800

0800d98c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d994:	f107 0308 	add.w	r3, r7, #8
 800d998:	2200      	movs	r2, #0
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	609a      	str	r2, [r3, #8]
 800d9a0:	60da      	str	r2, [r3, #12]
 800d9a2:	611a      	str	r2, [r3, #16]
 800d9a4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a0c      	ldr	r2, [pc, #48]	; (800d9dc <HAL_RTC_MspInit+0x50>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d111      	bne.n	800d9d4 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d9b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d9ba:	f107 0308 	add.w	r3, r7, #8
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7f8 fb6e 	bl	80060a0 <HAL_RCCEx_PeriphCLKConfig>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800d9ca:	f7ff fe87 	bl	800d6dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d9ce:	4b04      	ldr	r3, [pc, #16]	; (800d9e0 <HAL_RTC_MspInit+0x54>)
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800d9d4:	bf00      	nop
 800d9d6:	3720      	adds	r7, #32
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	40002800 	.word	0x40002800
 800d9e0:	42470e3c 	.word	0x42470e3c

0800d9e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08c      	sub	sp, #48	; 0x30
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9ec:	f107 031c 	add.w	r3, r7, #28
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	605a      	str	r2, [r3, #4]
 800d9f6:	609a      	str	r2, [r3, #8]
 800d9f8:	60da      	str	r2, [r3, #12]
 800d9fa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a38      	ldr	r2, [pc, #224]	; (800dae4 <HAL_SD_MspInit+0x100>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d169      	bne.n	800dada <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800da06:	2300      	movs	r3, #0
 800da08:	61bb      	str	r3, [r7, #24]
 800da0a:	4b37      	ldr	r3, [pc, #220]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da0e:	4a36      	ldr	r2, [pc, #216]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800da14:	6453      	str	r3, [r2, #68]	; 0x44
 800da16:	4b34      	ldr	r3, [pc, #208]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da1e:	61bb      	str	r3, [r7, #24]
 800da20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da22:	2300      	movs	r3, #0
 800da24:	617b      	str	r3, [r7, #20]
 800da26:	4b30      	ldr	r3, [pc, #192]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da2a:	4a2f      	ldr	r2, [pc, #188]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da2c:	f043 0301 	orr.w	r3, r3, #1
 800da30:	6313      	str	r3, [r2, #48]	; 0x30
 800da32:	4b2d      	ldr	r3, [pc, #180]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da36:	f003 0301 	and.w	r3, r3, #1
 800da3a:	617b      	str	r3, [r7, #20]
 800da3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800da3e:	2300      	movs	r3, #0
 800da40:	613b      	str	r3, [r7, #16]
 800da42:	4b29      	ldr	r3, [pc, #164]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da46:	4a28      	ldr	r2, [pc, #160]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da48:	f043 0302 	orr.w	r3, r3, #2
 800da4c:	6313      	str	r3, [r2, #48]	; 0x30
 800da4e:	4b26      	ldr	r3, [pc, #152]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	613b      	str	r3, [r7, #16]
 800da58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	4b22      	ldr	r3, [pc, #136]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da62:	4a21      	ldr	r2, [pc, #132]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da64:	f043 0304 	orr.w	r3, r3, #4
 800da68:	6313      	str	r3, [r2, #48]	; 0x30
 800da6a:	4b1f      	ldr	r3, [pc, #124]	; (800dae8 <HAL_SD_MspInit+0x104>)
 800da6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da6e:	f003 0304 	and.w	r3, r3, #4
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800da76:	2340      	movs	r3, #64	; 0x40
 800da78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da7a:	2302      	movs	r3, #2
 800da7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da82:	2303      	movs	r3, #3
 800da84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800da86:	230c      	movs	r3, #12
 800da88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da8a:	f107 031c 	add.w	r3, r7, #28
 800da8e:	4619      	mov	r1, r3
 800da90:	4816      	ldr	r0, [pc, #88]	; (800daec <HAL_SD_MspInit+0x108>)
 800da92:	f7f4 fc57 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800da96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da9c:	2302      	movs	r3, #2
 800da9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daa0:	2300      	movs	r3, #0
 800daa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800daa4:	2303      	movs	r3, #3
 800daa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800daa8:	230c      	movs	r3, #12
 800daaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800daac:	f107 031c 	add.w	r3, r7, #28
 800dab0:	4619      	mov	r1, r3
 800dab2:	480f      	ldr	r0, [pc, #60]	; (800daf0 <HAL_SD_MspInit+0x10c>)
 800dab4:	f7f4 fc46 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800dab8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800dabc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dabe:	2302      	movs	r3, #2
 800dac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dac6:	2303      	movs	r3, #3
 800dac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800daca:	230c      	movs	r3, #12
 800dacc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dace:	f107 031c 	add.w	r3, r7, #28
 800dad2:	4619      	mov	r1, r3
 800dad4:	4807      	ldr	r0, [pc, #28]	; (800daf4 <HAL_SD_MspInit+0x110>)
 800dad6:	f7f4 fc35 	bl	8002344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800dada:	bf00      	nop
 800dadc:	3730      	adds	r7, #48	; 0x30
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	40012c00 	.word	0x40012c00
 800dae8:	40023800 	.word	0x40023800
 800daec:	40020000 	.word	0x40020000
 800daf0:	40020400 	.word	0x40020400
 800daf4:	40020800 	.word	0x40020800

0800daf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db08:	d115      	bne.n	800db36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800db0a:	2300      	movs	r3, #0
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	4b0c      	ldr	r3, [pc, #48]	; (800db40 <HAL_TIM_Base_MspInit+0x48>)
 800db10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db12:	4a0b      	ldr	r2, [pc, #44]	; (800db40 <HAL_TIM_Base_MspInit+0x48>)
 800db14:	f043 0301 	orr.w	r3, r3, #1
 800db18:	6413      	str	r3, [r2, #64]	; 0x40
 800db1a:	4b09      	ldr	r3, [pc, #36]	; (800db40 <HAL_TIM_Base_MspInit+0x48>)
 800db1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	60fb      	str	r3, [r7, #12]
 800db24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800db26:	2200      	movs	r2, #0
 800db28:	2100      	movs	r1, #0
 800db2a:	201c      	movs	r0, #28
 800db2c:	f7f4 f8b9 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800db30:	201c      	movs	r0, #28
 800db32:	f7f4 f8d2 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800db36:	bf00      	nop
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	40023800 	.word	0x40023800

0800db44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08a      	sub	sp, #40	; 0x28
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db4c:	f107 0314 	add.w	r3, r7, #20
 800db50:	2200      	movs	r2, #0
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	605a      	str	r2, [r3, #4]
 800db56:	609a      	str	r2, [r3, #8]
 800db58:	60da      	str	r2, [r3, #12]
 800db5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a19      	ldr	r2, [pc, #100]	; (800dbc8 <HAL_UART_MspInit+0x84>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d12c      	bne.n	800dbc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800db66:	2300      	movs	r3, #0
 800db68:	613b      	str	r3, [r7, #16]
 800db6a:	4b18      	ldr	r3, [pc, #96]	; (800dbcc <HAL_UART_MspInit+0x88>)
 800db6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db6e:	4a17      	ldr	r2, [pc, #92]	; (800dbcc <HAL_UART_MspInit+0x88>)
 800db70:	f043 0310 	orr.w	r3, r3, #16
 800db74:	6453      	str	r3, [r2, #68]	; 0x44
 800db76:	4b15      	ldr	r3, [pc, #84]	; (800dbcc <HAL_UART_MspInit+0x88>)
 800db78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db7a:	f003 0310 	and.w	r3, r3, #16
 800db7e:	613b      	str	r3, [r7, #16]
 800db80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	4b11      	ldr	r3, [pc, #68]	; (800dbcc <HAL_UART_MspInit+0x88>)
 800db88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db8a:	4a10      	ldr	r2, [pc, #64]	; (800dbcc <HAL_UART_MspInit+0x88>)
 800db8c:	f043 0301 	orr.w	r3, r3, #1
 800db90:	6313      	str	r3, [r2, #48]	; 0x30
 800db92:	4b0e      	ldr	r3, [pc, #56]	; (800dbcc <HAL_UART_MspInit+0x88>)
 800db94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	60fb      	str	r3, [r7, #12]
 800db9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800db9e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800dba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dba4:	2302      	movs	r3, #2
 800dba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbac:	2303      	movs	r3, #3
 800dbae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dbb0:	2307      	movs	r3, #7
 800dbb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbb4:	f107 0314 	add.w	r3, r7, #20
 800dbb8:	4619      	mov	r1, r3
 800dbba:	4805      	ldr	r0, [pc, #20]	; (800dbd0 <HAL_UART_MspInit+0x8c>)
 800dbbc:	f7f4 fbc2 	bl	8002344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800dbc0:	bf00      	nop
 800dbc2:	3728      	adds	r7, #40	; 0x28
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	40011000 	.word	0x40011000
 800dbcc:	40023800 	.word	0x40023800
 800dbd0:	40020000 	.word	0x40020000

0800dbd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800dbd8:	f7f8 fa46 	bl	8006068 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800dbdc:	e7fe      	b.n	800dbdc <NMI_Handler+0x8>

0800dbde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dbde:	b480      	push	{r7}
 800dbe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dbe2:	e7fe      	b.n	800dbe2 <HardFault_Handler+0x4>

0800dbe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dbe8:	e7fe      	b.n	800dbe8 <MemManage_Handler+0x4>

0800dbea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dbea:	b480      	push	{r7}
 800dbec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dbee:	e7fe      	b.n	800dbee <BusFault_Handler+0x4>

0800dbf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dbf4:	e7fe      	b.n	800dbf4 <UsageFault_Handler+0x4>

0800dbf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dbfa:	bf00      	nop
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dc04:	b480      	push	{r7}
 800dc06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dc08:	bf00      	nop
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr

0800dc12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dc12:	b480      	push	{r7}
 800dc14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dc16:	bf00      	nop
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800dc24:	f7fe faf8 	bl	800c218 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dc28:	f7f3 fa76 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dc2c:	bf00      	nop
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dc34:	4802      	ldr	r0, [pc, #8]	; (800dc40 <DMA1_Stream1_IRQHandler+0x10>)
 800dc36:	f7f4 f93b 	bl	8001eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800dc3a:	bf00      	nop
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	20000b20 	.word	0x20000b20

0800dc44 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	uint32_t u32Result;

	u32Result = HAL_ADC_GetValue(&hadc1);
 800dc4a:	4807      	ldr	r0, [pc, #28]	; (800dc68 <ADC_IRQHandler+0x24>)
 800dc4c:	f7f3 fceb 	bl	8001626 <HAL_ADC_GetValue>
 800dc50:	6078      	str	r0, [r7, #4]

	USB_SignalizeVBUSMeasurementReady(u32Result);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7ff f9fc 	bl	800d050 <USB_SignalizeVBUSMeasurementReady>

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800dc58:	4803      	ldr	r0, [pc, #12]	; (800dc68 <ADC_IRQHandler+0x24>)
 800dc5a:	f7f3 fba3 	bl	80013a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800dc5e:	bf00      	nop
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20000c28 	.word	0x20000c28

0800dc6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 800dc70:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc74:	4804      	ldr	r0, [pc, #16]	; (800dc88 <EXTI9_5_IRQHandler+0x1c>)
 800dc76:	f7f4 fce9 	bl	800264c <HAL_GPIO_ReadPin>
	else
	{
//		CommManager_SetUSBConnectionState(USB_Disconnected);
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800dc7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dc7e:	f7f4 fd31 	bl	80026e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800dc82:	bf00      	nop
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	40020000 	.word	0x40020000

0800dc8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800dc90:	4803      	ldr	r0, [pc, #12]	; (800dca0 <TIM2_IRQHandler+0x14>)
 800dc92:	f7f9 fc16 	bl	80074c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800dc96:	f7fe ffd3 	bl	800cc40 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800dc9a:	bf00      	nop
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20000d58 	.word	0x20000d58

0800dca4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800dca8:	4802      	ldr	r0, [pc, #8]	; (800dcb4 <I2C1_EV_IRQHandler+0x10>)
 800dcaa:	f7f4 ff41 	bl	8002b30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800dcae:	bf00      	nop
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	20000b80 	.word	0x20000b80

0800dcb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
	TempCollect_CommFaultOccured(eModule_I2CA);
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	f7fe ffeb 	bl	800cc98 <TempCollect_CommFaultOccured>
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800dcc2:	4802      	ldr	r0, [pc, #8]	; (800dccc <I2C1_ER_IRQHandler+0x14>)
 800dcc4:	f7f5 f8a5 	bl	8002e12 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800dcc8:	bf00      	nop
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20000b80 	.word	0x20000b80

0800dcd0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800dcd4:	4802      	ldr	r0, [pc, #8]	; (800dce0 <I2C2_EV_IRQHandler+0x10>)
 800dcd6:	f7f4 ff2b 	bl	8002b30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800dcda:	bf00      	nop
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	20000bd4 	.word	0x20000bd4

0800dce4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	TempCollect_CommFaultOccured(eModule_I2CB);
 800dce8:	2001      	movs	r0, #1
 800dcea:	f7fe ffd5 	bl	800cc98 <TempCollect_CommFaultOccured>
  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800dcee:	4802      	ldr	r0, [pc, #8]	; (800dcf8 <I2C2_ER_IRQHandler+0x14>)
 800dcf0:	f7f5 f88f 	bl	8002e12 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800dcf4:	bf00      	nop
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	20000bd4 	.word	0x20000bd4

0800dcfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800dd00:	4802      	ldr	r0, [pc, #8]	; (800dd0c <OTG_FS_IRQHandler+0x10>)
 800dd02:	f7f6 fd2c 	bl	800475e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800dd06:	bf00      	nop
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	20002070 	.word	0x20002070

0800dd10 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a0a      	ldr	r2, [pc, #40]	; (800dd44 <HAL_I2C_MemRxCpltCallback+0x34>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d102      	bne.n	800dd26 <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
 800dd20:	f7fe ffa2 	bl	800cc68 <TempCollect_I2CA_Done>
	}
	else
	{
		AssertError(AppError_UndefinedError);
	}
}
 800dd24:	e009      	b.n	800dd3a <HAL_I2C_MemRxCpltCallback+0x2a>
	else if ( hi2c == &hi2c2)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4a07      	ldr	r2, [pc, #28]	; (800dd48 <HAL_I2C_MemRxCpltCallback+0x38>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d102      	bne.n	800dd34 <HAL_I2C_MemRxCpltCallback+0x24>
		TempCollect_I2CB_Done();
 800dd2e:	f7fe ffa7 	bl	800cc80 <TempCollect_I2CB_Done>
}
 800dd32:	e002      	b.n	800dd3a <HAL_I2C_MemRxCpltCallback+0x2a>
		AssertError(AppError_UndefinedError);
 800dd34:	2008      	movs	r0, #8
 800dd36:	f7fe fb75 	bl	800c424 <AssertError>
}
 800dd3a:	bf00      	nop
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	20000b80 	.word	0x20000b80
 800dd48:	20000bd4 	.word	0x20000bd4

0800dd4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dd50:	4b06      	ldr	r3, [pc, #24]	; (800dd6c <SystemInit+0x20>)
 800dd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd56:	4a05      	ldr	r2, [pc, #20]	; (800dd6c <SystemInit+0x20>)
 800dd58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dd60:	bf00      	nop
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	e000ed00 	.word	0xe000ed00

0800dd70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dd74:	2200      	movs	r2, #0
 800dd76:	4912      	ldr	r1, [pc, #72]	; (800ddc0 <MX_USB_DEVICE_Init+0x50>)
 800dd78:	4812      	ldr	r0, [pc, #72]	; (800ddc4 <MX_USB_DEVICE_Init+0x54>)
 800dd7a:	f7fd f8ab 	bl	800aed4 <USBD_Init>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dd84:	f7ff fcaa 	bl	800d6dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dd88:	490f      	ldr	r1, [pc, #60]	; (800ddc8 <MX_USB_DEVICE_Init+0x58>)
 800dd8a:	480e      	ldr	r0, [pc, #56]	; (800ddc4 <MX_USB_DEVICE_Init+0x54>)
 800dd8c:	f7fd f8d2 	bl	800af34 <USBD_RegisterClass>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dd96:	f7ff fca1 	bl	800d6dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dd9a:	490c      	ldr	r1, [pc, #48]	; (800ddcc <MX_USB_DEVICE_Init+0x5c>)
 800dd9c:	4809      	ldr	r0, [pc, #36]	; (800ddc4 <MX_USB_DEVICE_Init+0x54>)
 800dd9e:	f7fc fff3 	bl	800ad88 <USBD_CDC_RegisterInterface>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dda8:	f7ff fc98 	bl	800d6dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ddac:	4805      	ldr	r0, [pc, #20]	; (800ddc4 <MX_USB_DEVICE_Init+0x54>)
 800ddae:	f7fd f8e8 	bl	800af82 <USBD_Start>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d001      	beq.n	800ddbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ddb8:	f7ff fc90 	bl	800d6dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ddbc:	bf00      	nop
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20000130 	.word	0x20000130
 800ddc4:	20000da0 	.word	0x20000da0
 800ddc8:	20000014 	.word	0x20000014
 800ddcc:	2000011c 	.word	0x2000011c

0800ddd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	4905      	ldr	r1, [pc, #20]	; (800ddec <CDC_Init_FS+0x1c>)
 800ddd8:	4805      	ldr	r0, [pc, #20]	; (800ddf0 <CDC_Init_FS+0x20>)
 800ddda:	f7fc ffea 	bl	800adb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ddde:	4905      	ldr	r1, [pc, #20]	; (800ddf4 <CDC_Init_FS+0x24>)
 800dde0:	4803      	ldr	r0, [pc, #12]	; (800ddf0 <CDC_Init_FS+0x20>)
 800dde2:	f7fd f804 	bl	800adee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dde6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	20001870 	.word	0x20001870
 800ddf0:	20000da0 	.word	0x20000da0
 800ddf4:	20001070 	.word	0x20001070

0800ddf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ddfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
 800de14:	4613      	mov	r3, r2
 800de16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de18:	79fb      	ldrb	r3, [r7, #7]
 800de1a:	2b23      	cmp	r3, #35	; 0x23
 800de1c:	d84a      	bhi.n	800deb4 <CDC_Control_FS+0xac>
 800de1e:	a201      	add	r2, pc, #4	; (adr r2, 800de24 <CDC_Control_FS+0x1c>)
 800de20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de24:	0800deb5 	.word	0x0800deb5
 800de28:	0800deb5 	.word	0x0800deb5
 800de2c:	0800deb5 	.word	0x0800deb5
 800de30:	0800deb5 	.word	0x0800deb5
 800de34:	0800deb5 	.word	0x0800deb5
 800de38:	0800deb5 	.word	0x0800deb5
 800de3c:	0800deb5 	.word	0x0800deb5
 800de40:	0800deb5 	.word	0x0800deb5
 800de44:	0800deb5 	.word	0x0800deb5
 800de48:	0800deb5 	.word	0x0800deb5
 800de4c:	0800deb5 	.word	0x0800deb5
 800de50:	0800deb5 	.word	0x0800deb5
 800de54:	0800deb5 	.word	0x0800deb5
 800de58:	0800deb5 	.word	0x0800deb5
 800de5c:	0800deb5 	.word	0x0800deb5
 800de60:	0800deb5 	.word	0x0800deb5
 800de64:	0800deb5 	.word	0x0800deb5
 800de68:	0800deb5 	.word	0x0800deb5
 800de6c:	0800deb5 	.word	0x0800deb5
 800de70:	0800deb5 	.word	0x0800deb5
 800de74:	0800deb5 	.word	0x0800deb5
 800de78:	0800deb5 	.word	0x0800deb5
 800de7c:	0800deb5 	.word	0x0800deb5
 800de80:	0800deb5 	.word	0x0800deb5
 800de84:	0800deb5 	.word	0x0800deb5
 800de88:	0800deb5 	.word	0x0800deb5
 800de8c:	0800deb5 	.word	0x0800deb5
 800de90:	0800deb5 	.word	0x0800deb5
 800de94:	0800deb5 	.word	0x0800deb5
 800de98:	0800deb5 	.word	0x0800deb5
 800de9c:	0800deb5 	.word	0x0800deb5
 800dea0:	0800deb5 	.word	0x0800deb5
 800dea4:	0800deb5 	.word	0x0800deb5
 800dea8:	0800deb5 	.word	0x0800deb5
 800deac:	0800deb5 	.word	0x0800deb5
 800deb0:	0800deb5 	.word	0x0800deb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800deb4:	bf00      	nop
  }

  return (USBD_OK);
 800deb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dece:	6879      	ldr	r1, [r7, #4]
 800ded0:	4805      	ldr	r0, [pc, #20]	; (800dee8 <CDC_Receive_FS+0x24>)
 800ded2:	f7fc ff8c 	bl	800adee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ded6:	4804      	ldr	r0, [pc, #16]	; (800dee8 <CDC_Receive_FS+0x24>)
 800ded8:	f7fc ffd2 	bl	800ae80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dedc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20000da0 	.word	0x20000da0

0800deec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	460b      	mov	r3, r1
 800def6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800defc:	4b0d      	ldr	r3, [pc, #52]	; (800df34 <CDC_Transmit_FS+0x48>)
 800defe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800df0e:	2301      	movs	r3, #1
 800df10:	e00b      	b.n	800df2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800df12:	887b      	ldrh	r3, [r7, #2]
 800df14:	461a      	mov	r2, r3
 800df16:	6879      	ldr	r1, [r7, #4]
 800df18:	4806      	ldr	r0, [pc, #24]	; (800df34 <CDC_Transmit_FS+0x48>)
 800df1a:	f7fc ff4a 	bl	800adb2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800df1e:	4805      	ldr	r0, [pc, #20]	; (800df34 <CDC_Transmit_FS+0x48>)
 800df20:	f7fc ff7e 	bl	800ae20 <USBD_CDC_TransmitPacket>
 800df24:	4603      	mov	r3, r0
 800df26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800df28:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20000da0 	.word	0x20000da0

0800df38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df38:	b480      	push	{r7}
 800df3a:	b087      	sub	sp, #28
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	4613      	mov	r3, r2
 800df44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df46:	2300      	movs	r3, #0
 800df48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	371c      	adds	r7, #28
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
	...

0800df5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08a      	sub	sp, #40	; 0x28
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df64:	f107 0314 	add.w	r3, r7, #20
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	605a      	str	r2, [r3, #4]
 800df6e:	609a      	str	r2, [r3, #8]
 800df70:	60da      	str	r2, [r3, #12]
 800df72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df7c:	d13a      	bne.n	800dff4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df7e:	2300      	movs	r3, #0
 800df80:	613b      	str	r3, [r7, #16]
 800df82:	4b1e      	ldr	r3, [pc, #120]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800df84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df86:	4a1d      	ldr	r2, [pc, #116]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800df88:	f043 0301 	orr.w	r3, r3, #1
 800df8c:	6313      	str	r3, [r2, #48]	; 0x30
 800df8e:	4b1b      	ldr	r3, [pc, #108]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800df90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df92:	f003 0301 	and.w	r3, r3, #1
 800df96:	613b      	str	r3, [r7, #16]
 800df98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dfac:	230a      	movs	r3, #10
 800dfae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfb0:	f107 0314 	add.w	r3, r7, #20
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4812      	ldr	r0, [pc, #72]	; (800e000 <HAL_PCD_MspInit+0xa4>)
 800dfb8:	f7f4 f9c4 	bl	8002344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dfbc:	4b0f      	ldr	r3, [pc, #60]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800dfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc0:	4a0e      	ldr	r2, [pc, #56]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800dfc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfc6:	6353      	str	r3, [r2, #52]	; 0x34
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]
 800dfcc:	4b0b      	ldr	r3, [pc, #44]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800dfce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfd0:	4a0a      	ldr	r2, [pc, #40]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800dfd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dfd6:	6453      	str	r3, [r2, #68]	; 0x44
 800dfd8:	4b08      	ldr	r3, [pc, #32]	; (800dffc <HAL_PCD_MspInit+0xa0>)
 800dfda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	2043      	movs	r0, #67	; 0x43
 800dfea:	f7f3 fe5a 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dfee:	2043      	movs	r0, #67	; 0x43
 800dff0:	f7f3 fe73 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dff4:	bf00      	nop
 800dff6:	3728      	adds	r7, #40	; 0x28
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	40023800 	.word	0x40023800
 800e000:	40020000 	.word	0x40020000

0800e004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e018:	4619      	mov	r1, r3
 800e01a:	4610      	mov	r0, r2
 800e01c:	f7fc fffc 	bl	800b018 <USBD_LL_SetupStage>
}
 800e020:	bf00      	nop
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	460b      	mov	r3, r1
 800e032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e03a:	78fa      	ldrb	r2, [r7, #3]
 800e03c:	6879      	ldr	r1, [r7, #4]
 800e03e:	4613      	mov	r3, r2
 800e040:	00db      	lsls	r3, r3, #3
 800e042:	1a9b      	subs	r3, r3, r2
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	440b      	add	r3, r1
 800e048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	78fb      	ldrb	r3, [r7, #3]
 800e050:	4619      	mov	r1, r3
 800e052:	f7fd f836 	bl	800b0c2 <USBD_LL_DataOutStage>
}
 800e056:	bf00      	nop
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b082      	sub	sp, #8
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
 800e066:	460b      	mov	r3, r1
 800e068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e070:	78fa      	ldrb	r2, [r7, #3]
 800e072:	6879      	ldr	r1, [r7, #4]
 800e074:	4613      	mov	r3, r2
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	1a9b      	subs	r3, r3, r2
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	440b      	add	r3, r1
 800e07e:	3348      	adds	r3, #72	; 0x48
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	78fb      	ldrb	r3, [r7, #3]
 800e084:	4619      	mov	r1, r3
 800e086:	f7fd f87f 	bl	800b188 <USBD_LL_DataInStage>
}
 800e08a:	bf00      	nop
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b082      	sub	sp, #8
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fd f993 	bl	800b3cc <USBD_LL_SOF>
}
 800e0a6:	bf00      	nop
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b084      	sub	sp, #16
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d001      	beq.n	800e0c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e0c2:	f7ff fb0b 	bl	800d6dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0cc:	7bfa      	ldrb	r2, [r7, #15]
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fd f93d 	bl	800b350 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fd f8e9 	bl	800b2b4 <USBD_LL_Reset>
}
 800e0e2:	bf00      	nop
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
	...

0800e0ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fd f938 	bl	800b370 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	6812      	ldr	r2, [r2, #0]
 800e10e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e112:	f043 0301 	orr.w	r3, r3, #1
 800e116:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d005      	beq.n	800e12c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e120:	4b04      	ldr	r3, [pc, #16]	; (800e134 <HAL_PCD_SuspendCallback+0x48>)
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	4a03      	ldr	r2, [pc, #12]	; (800e134 <HAL_PCD_SuspendCallback+0x48>)
 800e126:	f043 0306 	orr.w	r3, r3, #6
 800e12a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e12c:	bf00      	nop
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	e000ed00 	.word	0xe000ed00

0800e138 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e146:	4618      	mov	r0, r3
 800e148:	f7fd f928 	bl	800b39c <USBD_LL_Resume>
}
 800e14c:	bf00      	nop
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e166:	78fa      	ldrb	r2, [r7, #3]
 800e168:	4611      	mov	r1, r2
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fd f976 	bl	800b45c <USBD_LL_IsoOUTIncomplete>
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	460b      	mov	r3, r1
 800e182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e18a:	78fa      	ldrb	r2, [r7, #3]
 800e18c:	4611      	mov	r1, r2
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fd f93e 	bl	800b410 <USBD_LL_IsoINIncomplete>
}
 800e194:	bf00      	nop
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fd f97c 	bl	800b4a8 <USBD_LL_DevConnected>
}
 800e1b0:	bf00      	nop
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fd f979 	bl	800b4be <USBD_LL_DevDisconnected>
}
 800e1cc:	bf00      	nop
 800e1ce:	3708      	adds	r7, #8
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d13c      	bne.n	800e25e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e1e4:	4a20      	ldr	r2, [pc, #128]	; (800e268 <USBD_LL_Init+0x94>)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a1e      	ldr	r2, [pc, #120]	; (800e268 <USBD_LL_Init+0x94>)
 800e1f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e1f4:	4b1c      	ldr	r3, [pc, #112]	; (800e268 <USBD_LL_Init+0x94>)
 800e1f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e1fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e1fc:	4b1a      	ldr	r3, [pc, #104]	; (800e268 <USBD_LL_Init+0x94>)
 800e1fe:	2204      	movs	r2, #4
 800e200:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e202:	4b19      	ldr	r3, [pc, #100]	; (800e268 <USBD_LL_Init+0x94>)
 800e204:	2202      	movs	r2, #2
 800e206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e208:	4b17      	ldr	r3, [pc, #92]	; (800e268 <USBD_LL_Init+0x94>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e20e:	4b16      	ldr	r3, [pc, #88]	; (800e268 <USBD_LL_Init+0x94>)
 800e210:	2202      	movs	r2, #2
 800e212:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e214:	4b14      	ldr	r3, [pc, #80]	; (800e268 <USBD_LL_Init+0x94>)
 800e216:	2200      	movs	r2, #0
 800e218:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e21a:	4b13      	ldr	r3, [pc, #76]	; (800e268 <USBD_LL_Init+0x94>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e220:	4b11      	ldr	r3, [pc, #68]	; (800e268 <USBD_LL_Init+0x94>)
 800e222:	2200      	movs	r2, #0
 800e224:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e226:	4b10      	ldr	r3, [pc, #64]	; (800e268 <USBD_LL_Init+0x94>)
 800e228:	2200      	movs	r2, #0
 800e22a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e22c:	4b0e      	ldr	r3, [pc, #56]	; (800e268 <USBD_LL_Init+0x94>)
 800e22e:	2200      	movs	r2, #0
 800e230:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e232:	480d      	ldr	r0, [pc, #52]	; (800e268 <USBD_LL_Init+0x94>)
 800e234:	f7f6 f943 	bl	80044be <HAL_PCD_Init>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d001      	beq.n	800e242 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e23e:	f7ff fa4d 	bl	800d6dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e242:	2180      	movs	r1, #128	; 0x80
 800e244:	4808      	ldr	r0, [pc, #32]	; (800e268 <USBD_LL_Init+0x94>)
 800e246:	f7f7 faa0 	bl	800578a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e24a:	2240      	movs	r2, #64	; 0x40
 800e24c:	2100      	movs	r1, #0
 800e24e:	4806      	ldr	r0, [pc, #24]	; (800e268 <USBD_LL_Init+0x94>)
 800e250:	f7f7 fa54 	bl	80056fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e254:	2280      	movs	r2, #128	; 0x80
 800e256:	2101      	movs	r1, #1
 800e258:	4803      	ldr	r0, [pc, #12]	; (800e268 <USBD_LL_Init+0x94>)
 800e25a:	f7f7 fa4f 	bl	80056fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3708      	adds	r7, #8
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	20002070 	.word	0x20002070

0800e26c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e282:	4618      	mov	r0, r3
 800e284:	f7f6 fa38 	bl	80046f8 <HAL_PCD_Start>
 800e288:	4603      	mov	r3, r0
 800e28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
 800e28e:	4618      	mov	r0, r3
 800e290:	f000 f942 	bl	800e518 <USBD_Get_USB_Status>
 800e294:	4603      	mov	r3, r0
 800e296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e298:	7bbb      	ldrb	r3, [r7, #14]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b084      	sub	sp, #16
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	4608      	mov	r0, r1
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	70fb      	strb	r3, [r7, #3]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	70bb      	strb	r3, [r7, #2]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e2ca:	78bb      	ldrb	r3, [r7, #2]
 800e2cc:	883a      	ldrh	r2, [r7, #0]
 800e2ce:	78f9      	ldrb	r1, [r7, #3]
 800e2d0:	f7f6 fe1c 	bl	8004f0c <HAL_PCD_EP_Open>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 f91c 	bl	800e518 <USBD_Get_USB_Status>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b084      	sub	sp, #16
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e308:	78fa      	ldrb	r2, [r7, #3]
 800e30a:	4611      	mov	r1, r2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7f6 fe65 	bl	8004fdc <HAL_PCD_EP_Close>
 800e312:	4603      	mov	r3, r0
 800e314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e316:	7bfb      	ldrb	r3, [r7, #15]
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 f8fd 	bl	800e518 <USBD_Get_USB_Status>
 800e31e:	4603      	mov	r3, r0
 800e320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e322:	7bbb      	ldrb	r3, [r7, #14]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	460b      	mov	r3, r1
 800e336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e346:	78fa      	ldrb	r2, [r7, #3]
 800e348:	4611      	mov	r1, r2
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7f6 ff3d 	bl	80051ca <HAL_PCD_EP_SetStall>
 800e350:	4603      	mov	r3, r0
 800e352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e354:	7bfb      	ldrb	r3, [r7, #15]
 800e356:	4618      	mov	r0, r3
 800e358:	f000 f8de 	bl	800e518 <USBD_Get_USB_Status>
 800e35c:	4603      	mov	r3, r0
 800e35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e360:	7bbb      	ldrb	r3, [r7, #14]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b084      	sub	sp, #16
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e384:	78fa      	ldrb	r2, [r7, #3]
 800e386:	4611      	mov	r1, r2
 800e388:	4618      	mov	r0, r3
 800e38a:	f7f6 ff82 	bl	8005292 <HAL_PCD_EP_ClrStall>
 800e38e:	4603      	mov	r3, r0
 800e390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e392:	7bfb      	ldrb	r3, [r7, #15]
 800e394:	4618      	mov	r0, r3
 800e396:	f000 f8bf 	bl	800e518 <USBD_Get_USB_Status>
 800e39a:	4603      	mov	r3, r0
 800e39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e3ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e3bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	da0b      	bge.n	800e3dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e3c4:	78fb      	ldrb	r3, [r7, #3]
 800e3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3ca:	68f9      	ldr	r1, [r7, #12]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	00db      	lsls	r3, r3, #3
 800e3d0:	1a9b      	subs	r3, r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	440b      	add	r3, r1
 800e3d6:	333e      	adds	r3, #62	; 0x3e
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	e00b      	b.n	800e3f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3dc:	78fb      	ldrb	r3, [r7, #3]
 800e3de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3e2:	68f9      	ldr	r1, [r7, #12]
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	00db      	lsls	r3, r3, #3
 800e3e8:	1a9b      	subs	r3, r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	440b      	add	r3, r1
 800e3ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	460b      	mov	r3, r1
 800e40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e410:	2300      	movs	r3, #0
 800e412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e41a:	78fa      	ldrb	r2, [r7, #3]
 800e41c:	4611      	mov	r1, r2
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f6 fd4f 	bl	8004ec2 <HAL_PCD_SetAddress>
 800e424:	4603      	mov	r3, r0
 800e426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 f874 	bl	800e518 <USBD_Get_USB_Status>
 800e430:	4603      	mov	r3, r0
 800e432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e434:	7bbb      	ldrb	r3, [r7, #14]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b086      	sub	sp, #24
 800e442:	af00      	add	r7, sp, #0
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	607a      	str	r2, [r7, #4]
 800e448:	603b      	str	r3, [r7, #0]
 800e44a:	460b      	mov	r3, r1
 800e44c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e45c:	7af9      	ldrb	r1, [r7, #11]
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	f7f6 fe68 	bl	8005136 <HAL_PCD_EP_Transmit>
 800e466:	4603      	mov	r3, r0
 800e468:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f000 f853 	bl	800e518 <USBD_Get_USB_Status>
 800e472:	4603      	mov	r3, r0
 800e474:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e476:	7dbb      	ldrb	r3, [r7, #22]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3718      	adds	r7, #24
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	607a      	str	r2, [r7, #4]
 800e48a:	603b      	str	r3, [r7, #0]
 800e48c:	460b      	mov	r3, r1
 800e48e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e490:	2300      	movs	r3, #0
 800e492:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e494:	2300      	movs	r3, #0
 800e496:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e49e:	7af9      	ldrb	r1, [r7, #11]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	f7f6 fde4 	bl	8005070 <HAL_PCD_EP_Receive>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4ac:	7dfb      	ldrb	r3, [r7, #23]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 f832 	bl	800e518 <USBD_Get_USB_Status>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3718      	adds	r7, #24
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b082      	sub	sp, #8
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e4d4:	78fa      	ldrb	r2, [r7, #3]
 800e4d6:	4611      	mov	r1, r2
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7f6 fe14 	bl	8005106 <HAL_PCD_EP_GetRxCount>
 800e4de:	4603      	mov	r3, r0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e4f0:	4b03      	ldr	r3, [pc, #12]	; (800e500 <USBD_static_malloc+0x18>)
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	20000800 	.word	0x20000800

0800e504 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]

}
 800e50c:	bf00      	nop
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	4603      	mov	r3, r0
 800e520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e522:	2300      	movs	r3, #0
 800e524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	2b03      	cmp	r3, #3
 800e52a:	d817      	bhi.n	800e55c <USBD_Get_USB_Status+0x44>
 800e52c:	a201      	add	r2, pc, #4	; (adr r2, 800e534 <USBD_Get_USB_Status+0x1c>)
 800e52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e532:	bf00      	nop
 800e534:	0800e545 	.word	0x0800e545
 800e538:	0800e54b 	.word	0x0800e54b
 800e53c:	0800e551 	.word	0x0800e551
 800e540:	0800e557 	.word	0x0800e557
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e544:	2300      	movs	r3, #0
 800e546:	73fb      	strb	r3, [r7, #15]
    break;
 800e548:	e00b      	b.n	800e562 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e54a:	2303      	movs	r3, #3
 800e54c:	73fb      	strb	r3, [r7, #15]
    break;
 800e54e:	e008      	b.n	800e562 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e550:	2301      	movs	r3, #1
 800e552:	73fb      	strb	r3, [r7, #15]
    break;
 800e554:	e005      	b.n	800e562 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e556:	2303      	movs	r3, #3
 800e558:	73fb      	strb	r3, [r7, #15]
    break;
 800e55a:	e002      	b.n	800e562 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e55c:	2303      	movs	r3, #3
 800e55e:	73fb      	strb	r3, [r7, #15]
    break;
 800e560:	bf00      	nop
  }
  return usb_status;
 800e562:	7bfb      	ldrb	r3, [r7, #15]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	6039      	str	r1, [r7, #0]
 800e57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	2212      	movs	r2, #18
 800e580:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e582:	4b03      	ldr	r3, [pc, #12]	; (800e590 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	2000014c 	.word	0x2000014c

0800e594 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	4603      	mov	r3, r0
 800e59c:	6039      	str	r1, [r7, #0]
 800e59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	2204      	movs	r2, #4
 800e5a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e5a6:	4b03      	ldr	r3, [pc, #12]	; (800e5b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr
 800e5b4:	20000160 	.word	0x20000160

0800e5b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	4603      	mov	r3, r0
 800e5c0:	6039      	str	r1, [r7, #0]
 800e5c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5c4:	79fb      	ldrb	r3, [r7, #7]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d105      	bne.n	800e5d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	4907      	ldr	r1, [pc, #28]	; (800e5ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e5ce:	4808      	ldr	r0, [pc, #32]	; (800e5f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5d0:	f7fd fd09 	bl	800bfe6 <USBD_GetString>
 800e5d4:	e004      	b.n	800e5e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	4904      	ldr	r1, [pc, #16]	; (800e5ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e5da:	4805      	ldr	r0, [pc, #20]	; (800e5f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5dc:	f7fd fd03 	bl	800bfe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5e0:	4b02      	ldr	r3, [pc, #8]	; (800e5ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20002478 	.word	0x20002478
 800e5f0:	0801162c 	.word	0x0801162c

0800e5f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	6039      	str	r1, [r7, #0]
 800e5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	4904      	ldr	r1, [pc, #16]	; (800e614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e604:	4804      	ldr	r0, [pc, #16]	; (800e618 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e606:	f7fd fcee 	bl	800bfe6 <USBD_GetString>
  return USBD_StrDesc;
 800e60a:	4b02      	ldr	r3, [pc, #8]	; (800e614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	20002478 	.word	0x20002478
 800e618:	08011644 	.word	0x08011644

0800e61c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	4603      	mov	r3, r0
 800e624:	6039      	str	r1, [r7, #0]
 800e626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	221a      	movs	r2, #26
 800e62c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e62e:	f000 f843 	bl	800e6b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e632:	4b02      	ldr	r3, [pc, #8]	; (800e63c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	20000164 	.word	0x20000164

0800e640 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	4603      	mov	r3, r0
 800e648:	6039      	str	r1, [r7, #0]
 800e64a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e64c:	79fb      	ldrb	r3, [r7, #7]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d105      	bne.n	800e65e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e652:	683a      	ldr	r2, [r7, #0]
 800e654:	4907      	ldr	r1, [pc, #28]	; (800e674 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e656:	4808      	ldr	r0, [pc, #32]	; (800e678 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e658:	f7fd fcc5 	bl	800bfe6 <USBD_GetString>
 800e65c:	e004      	b.n	800e668 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	4904      	ldr	r1, [pc, #16]	; (800e674 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e662:	4805      	ldr	r0, [pc, #20]	; (800e678 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e664:	f7fd fcbf 	bl	800bfe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e668:	4b02      	ldr	r3, [pc, #8]	; (800e674 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20002478 	.word	0x20002478
 800e678:	08011658 	.word	0x08011658

0800e67c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	6039      	str	r1, [r7, #0]
 800e686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	4907      	ldr	r1, [pc, #28]	; (800e6b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e692:	4808      	ldr	r0, [pc, #32]	; (800e6b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e694:	f7fd fca7 	bl	800bfe6 <USBD_GetString>
 800e698:	e004      	b.n	800e6a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	4904      	ldr	r1, [pc, #16]	; (800e6b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e69e:	4805      	ldr	r0, [pc, #20]	; (800e6b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6a0:	f7fd fca1 	bl	800bfe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6a4:	4b02      	ldr	r3, [pc, #8]	; (800e6b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20002478 	.word	0x20002478
 800e6b4:	08011664 	.word	0x08011664

0800e6b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e6be:	4b0f      	ldr	r3, [pc, #60]	; (800e6fc <Get_SerialNum+0x44>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6c4:	4b0e      	ldr	r3, [pc, #56]	; (800e700 <Get_SerialNum+0x48>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6ca:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <Get_SerialNum+0x4c>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d009      	beq.n	800e6f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e6de:	2208      	movs	r2, #8
 800e6e0:	4909      	ldr	r1, [pc, #36]	; (800e708 <Get_SerialNum+0x50>)
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f000 f814 	bl	800e710 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e6e8:	2204      	movs	r2, #4
 800e6ea:	4908      	ldr	r1, [pc, #32]	; (800e70c <Get_SerialNum+0x54>)
 800e6ec:	68b8      	ldr	r0, [r7, #8]
 800e6ee:	f000 f80f 	bl	800e710 <IntToUnicode>
  }
}
 800e6f2:	bf00      	nop
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	1fff7a10 	.word	0x1fff7a10
 800e700:	1fff7a14 	.word	0x1fff7a14
 800e704:	1fff7a18 	.word	0x1fff7a18
 800e708:	20000166 	.word	0x20000166
 800e70c:	20000176 	.word	0x20000176

0800e710 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e710:	b480      	push	{r7}
 800e712:	b087      	sub	sp, #28
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4613      	mov	r3, r2
 800e71c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e71e:	2300      	movs	r3, #0
 800e720:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e722:	2300      	movs	r3, #0
 800e724:	75fb      	strb	r3, [r7, #23]
 800e726:	e027      	b.n	800e778 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	0f1b      	lsrs	r3, r3, #28
 800e72c:	2b09      	cmp	r3, #9
 800e72e:	d80b      	bhi.n	800e748 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	0f1b      	lsrs	r3, r3, #28
 800e734:	b2da      	uxtb	r2, r3
 800e736:	7dfb      	ldrb	r3, [r7, #23]
 800e738:	005b      	lsls	r3, r3, #1
 800e73a:	4619      	mov	r1, r3
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	440b      	add	r3, r1
 800e740:	3230      	adds	r2, #48	; 0x30
 800e742:	b2d2      	uxtb	r2, r2
 800e744:	701a      	strb	r2, [r3, #0]
 800e746:	e00a      	b.n	800e75e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	0f1b      	lsrs	r3, r3, #28
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	005b      	lsls	r3, r3, #1
 800e752:	4619      	mov	r1, r3
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	440b      	add	r3, r1
 800e758:	3237      	adds	r2, #55	; 0x37
 800e75a:	b2d2      	uxtb	r2, r2
 800e75c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	011b      	lsls	r3, r3, #4
 800e762:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e764:	7dfb      	ldrb	r3, [r7, #23]
 800e766:	005b      	lsls	r3, r3, #1
 800e768:	3301      	adds	r3, #1
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	4413      	add	r3, r2
 800e76e:	2200      	movs	r2, #0
 800e770:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e772:	7dfb      	ldrb	r3, [r7, #23]
 800e774:	3301      	adds	r3, #1
 800e776:	75fb      	strb	r3, [r7, #23]
 800e778:	7dfa      	ldrb	r2, [r7, #23]
 800e77a:	79fb      	ldrb	r3, [r7, #7]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d3d3      	bcc.n	800e728 <IntToUnicode+0x18>
  }
}
 800e780:	bf00      	nop
 800e782:	bf00      	nop
 800e784:	371c      	adds	r7, #28
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
	...

0800e790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800e790:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e7c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e794:	480d      	ldr	r0, [pc, #52]	; (800e7cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e796:	490e      	ldr	r1, [pc, #56]	; (800e7d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e798:	4a0e      	ldr	r2, [pc, #56]	; (800e7d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e79a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e79c:	e002      	b.n	800e7a4 <LoopCopyDataInit>

0800e79e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e79e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e7a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e7a2:	3304      	adds	r3, #4

0800e7a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e7a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e7a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e7a8:	d3f9      	bcc.n	800e79e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e7aa:	4a0b      	ldr	r2, [pc, #44]	; (800e7d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e7ac:	4c0b      	ldr	r4, [pc, #44]	; (800e7dc <LoopFillZerobss+0x26>)
  movs r3, #0
 800e7ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e7b0:	e001      	b.n	800e7b6 <LoopFillZerobss>

0800e7b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e7b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e7b4:	3204      	adds	r2, #4

0800e7b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e7b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e7b8:	d3fb      	bcc.n	800e7b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e7ba:	f7ff fac7 	bl	800dd4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e7be:	f000 f811 	bl	800e7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e7c2:	f7fe fc5b 	bl	800d07c <main>
  bx  lr    
 800e7c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800e7c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e7cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e7d0:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800e7d4:	08011aa4 	.word	0x08011aa4
  ldr r2, =_sbss
 800e7d8:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800e7dc:	20002688 	.word	0x20002688

0800e7e0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e7e0:	e7fe      	b.n	800e7e0 <DMA1_Stream0_IRQHandler>
	...

0800e7e4 <__libc_init_array>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	4d0d      	ldr	r5, [pc, #52]	; (800e81c <__libc_init_array+0x38>)
 800e7e8:	4c0d      	ldr	r4, [pc, #52]	; (800e820 <__libc_init_array+0x3c>)
 800e7ea:	1b64      	subs	r4, r4, r5
 800e7ec:	10a4      	asrs	r4, r4, #2
 800e7ee:	2600      	movs	r6, #0
 800e7f0:	42a6      	cmp	r6, r4
 800e7f2:	d109      	bne.n	800e808 <__libc_init_array+0x24>
 800e7f4:	4d0b      	ldr	r5, [pc, #44]	; (800e824 <__libc_init_array+0x40>)
 800e7f6:	4c0c      	ldr	r4, [pc, #48]	; (800e828 <__libc_init_array+0x44>)
 800e7f8:	f002 ff04 	bl	8011604 <_init>
 800e7fc:	1b64      	subs	r4, r4, r5
 800e7fe:	10a4      	asrs	r4, r4, #2
 800e800:	2600      	movs	r6, #0
 800e802:	42a6      	cmp	r6, r4
 800e804:	d105      	bne.n	800e812 <__libc_init_array+0x2e>
 800e806:	bd70      	pop	{r4, r5, r6, pc}
 800e808:	f855 3b04 	ldr.w	r3, [r5], #4
 800e80c:	4798      	blx	r3
 800e80e:	3601      	adds	r6, #1
 800e810:	e7ee      	b.n	800e7f0 <__libc_init_array+0xc>
 800e812:	f855 3b04 	ldr.w	r3, [r5], #4
 800e816:	4798      	blx	r3
 800e818:	3601      	adds	r6, #1
 800e81a:	e7f2      	b.n	800e802 <__libc_init_array+0x1e>
 800e81c:	08011a9c 	.word	0x08011a9c
 800e820:	08011a9c 	.word	0x08011a9c
 800e824:	08011a9c 	.word	0x08011a9c
 800e828:	08011aa0 	.word	0x08011aa0

0800e82c <memset>:
 800e82c:	4402      	add	r2, r0
 800e82e:	4603      	mov	r3, r0
 800e830:	4293      	cmp	r3, r2
 800e832:	d100      	bne.n	800e836 <memset+0xa>
 800e834:	4770      	bx	lr
 800e836:	f803 1b01 	strb.w	r1, [r3], #1
 800e83a:	e7f9      	b.n	800e830 <memset+0x4>

0800e83c <__cvt>:
 800e83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e840:	ec55 4b10 	vmov	r4, r5, d0
 800e844:	2d00      	cmp	r5, #0
 800e846:	460e      	mov	r6, r1
 800e848:	4619      	mov	r1, r3
 800e84a:	462b      	mov	r3, r5
 800e84c:	bfbb      	ittet	lt
 800e84e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e852:	461d      	movlt	r5, r3
 800e854:	2300      	movge	r3, #0
 800e856:	232d      	movlt	r3, #45	; 0x2d
 800e858:	700b      	strb	r3, [r1, #0]
 800e85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e85c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e860:	4691      	mov	r9, r2
 800e862:	f023 0820 	bic.w	r8, r3, #32
 800e866:	bfbc      	itt	lt
 800e868:	4622      	movlt	r2, r4
 800e86a:	4614      	movlt	r4, r2
 800e86c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e870:	d005      	beq.n	800e87e <__cvt+0x42>
 800e872:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e876:	d100      	bne.n	800e87a <__cvt+0x3e>
 800e878:	3601      	adds	r6, #1
 800e87a:	2102      	movs	r1, #2
 800e87c:	e000      	b.n	800e880 <__cvt+0x44>
 800e87e:	2103      	movs	r1, #3
 800e880:	ab03      	add	r3, sp, #12
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	ab02      	add	r3, sp, #8
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	ec45 4b10 	vmov	d0, r4, r5
 800e88c:	4653      	mov	r3, sl
 800e88e:	4632      	mov	r2, r6
 800e890:	f000 fcea 	bl	800f268 <_dtoa_r>
 800e894:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e898:	4607      	mov	r7, r0
 800e89a:	d102      	bne.n	800e8a2 <__cvt+0x66>
 800e89c:	f019 0f01 	tst.w	r9, #1
 800e8a0:	d022      	beq.n	800e8e8 <__cvt+0xac>
 800e8a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8a6:	eb07 0906 	add.w	r9, r7, r6
 800e8aa:	d110      	bne.n	800e8ce <__cvt+0x92>
 800e8ac:	783b      	ldrb	r3, [r7, #0]
 800e8ae:	2b30      	cmp	r3, #48	; 0x30
 800e8b0:	d10a      	bne.n	800e8c8 <__cvt+0x8c>
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7f2 f90d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8be:	b918      	cbnz	r0, 800e8c8 <__cvt+0x8c>
 800e8c0:	f1c6 0601 	rsb	r6, r6, #1
 800e8c4:	f8ca 6000 	str.w	r6, [sl]
 800e8c8:	f8da 3000 	ldr.w	r3, [sl]
 800e8cc:	4499      	add	r9, r3
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	4629      	mov	r1, r5
 800e8d6:	f7f2 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8da:	b108      	cbz	r0, 800e8e0 <__cvt+0xa4>
 800e8dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e8e0:	2230      	movs	r2, #48	; 0x30
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	454b      	cmp	r3, r9
 800e8e6:	d307      	bcc.n	800e8f8 <__cvt+0xbc>
 800e8e8:	9b03      	ldr	r3, [sp, #12]
 800e8ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8ec:	1bdb      	subs	r3, r3, r7
 800e8ee:	4638      	mov	r0, r7
 800e8f0:	6013      	str	r3, [r2, #0]
 800e8f2:	b004      	add	sp, #16
 800e8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8f8:	1c59      	adds	r1, r3, #1
 800e8fa:	9103      	str	r1, [sp, #12]
 800e8fc:	701a      	strb	r2, [r3, #0]
 800e8fe:	e7f0      	b.n	800e8e2 <__cvt+0xa6>

0800e900 <__exponent>:
 800e900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e902:	4603      	mov	r3, r0
 800e904:	2900      	cmp	r1, #0
 800e906:	bfb8      	it	lt
 800e908:	4249      	neglt	r1, r1
 800e90a:	f803 2b02 	strb.w	r2, [r3], #2
 800e90e:	bfb4      	ite	lt
 800e910:	222d      	movlt	r2, #45	; 0x2d
 800e912:	222b      	movge	r2, #43	; 0x2b
 800e914:	2909      	cmp	r1, #9
 800e916:	7042      	strb	r2, [r0, #1]
 800e918:	dd2a      	ble.n	800e970 <__exponent+0x70>
 800e91a:	f10d 0407 	add.w	r4, sp, #7
 800e91e:	46a4      	mov	ip, r4
 800e920:	270a      	movs	r7, #10
 800e922:	46a6      	mov	lr, r4
 800e924:	460a      	mov	r2, r1
 800e926:	fb91 f6f7 	sdiv	r6, r1, r7
 800e92a:	fb07 1516 	mls	r5, r7, r6, r1
 800e92e:	3530      	adds	r5, #48	; 0x30
 800e930:	2a63      	cmp	r2, #99	; 0x63
 800e932:	f104 34ff 	add.w	r4, r4, #4294967295
 800e936:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e93a:	4631      	mov	r1, r6
 800e93c:	dcf1      	bgt.n	800e922 <__exponent+0x22>
 800e93e:	3130      	adds	r1, #48	; 0x30
 800e940:	f1ae 0502 	sub.w	r5, lr, #2
 800e944:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e948:	1c44      	adds	r4, r0, #1
 800e94a:	4629      	mov	r1, r5
 800e94c:	4561      	cmp	r1, ip
 800e94e:	d30a      	bcc.n	800e966 <__exponent+0x66>
 800e950:	f10d 0209 	add.w	r2, sp, #9
 800e954:	eba2 020e 	sub.w	r2, r2, lr
 800e958:	4565      	cmp	r5, ip
 800e95a:	bf88      	it	hi
 800e95c:	2200      	movhi	r2, #0
 800e95e:	4413      	add	r3, r2
 800e960:	1a18      	subs	r0, r3, r0
 800e962:	b003      	add	sp, #12
 800e964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e96a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e96e:	e7ed      	b.n	800e94c <__exponent+0x4c>
 800e970:	2330      	movs	r3, #48	; 0x30
 800e972:	3130      	adds	r1, #48	; 0x30
 800e974:	7083      	strb	r3, [r0, #2]
 800e976:	70c1      	strb	r1, [r0, #3]
 800e978:	1d03      	adds	r3, r0, #4
 800e97a:	e7f1      	b.n	800e960 <__exponent+0x60>

0800e97c <_printf_float>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	ed2d 8b02 	vpush	{d8}
 800e984:	b08d      	sub	sp, #52	; 0x34
 800e986:	460c      	mov	r4, r1
 800e988:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e98c:	4616      	mov	r6, r2
 800e98e:	461f      	mov	r7, r3
 800e990:	4605      	mov	r5, r0
 800e992:	f001 fa55 	bl	800fe40 <_localeconv_r>
 800e996:	f8d0 a000 	ldr.w	sl, [r0]
 800e99a:	4650      	mov	r0, sl
 800e99c:	f7f1 fc20 	bl	80001e0 <strlen>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	9305      	str	r3, [sp, #20]
 800e9a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e9b0:	3307      	adds	r3, #7
 800e9b2:	f023 0307 	bic.w	r3, r3, #7
 800e9b6:	f103 0208 	add.w	r2, r3, #8
 800e9ba:	f8c8 2000 	str.w	r2, [r8]
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e9c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e9ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e9ce:	9307      	str	r3, [sp, #28]
 800e9d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e9d4:	ee08 0a10 	vmov	s16, r0
 800e9d8:	4b9f      	ldr	r3, [pc, #636]	; (800ec58 <_printf_float+0x2dc>)
 800e9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9de:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e2:	f7f2 f8ab 	bl	8000b3c <__aeabi_dcmpun>
 800e9e6:	bb88      	cbnz	r0, 800ea4c <_printf_float+0xd0>
 800e9e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9ec:	4b9a      	ldr	r3, [pc, #616]	; (800ec58 <_printf_float+0x2dc>)
 800e9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f2:	f7f2 f885 	bl	8000b00 <__aeabi_dcmple>
 800e9f6:	bb48      	cbnz	r0, 800ea4c <_printf_float+0xd0>
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	4649      	mov	r1, r9
 800ea00:	f7f2 f874 	bl	8000aec <__aeabi_dcmplt>
 800ea04:	b110      	cbz	r0, 800ea0c <_printf_float+0x90>
 800ea06:	232d      	movs	r3, #45	; 0x2d
 800ea08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea0c:	4b93      	ldr	r3, [pc, #588]	; (800ec5c <_printf_float+0x2e0>)
 800ea0e:	4894      	ldr	r0, [pc, #592]	; (800ec60 <_printf_float+0x2e4>)
 800ea10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ea14:	bf94      	ite	ls
 800ea16:	4698      	movls	r8, r3
 800ea18:	4680      	movhi	r8, r0
 800ea1a:	2303      	movs	r3, #3
 800ea1c:	6123      	str	r3, [r4, #16]
 800ea1e:	9b05      	ldr	r3, [sp, #20]
 800ea20:	f023 0204 	bic.w	r2, r3, #4
 800ea24:	6022      	str	r2, [r4, #0]
 800ea26:	f04f 0900 	mov.w	r9, #0
 800ea2a:	9700      	str	r7, [sp, #0]
 800ea2c:	4633      	mov	r3, r6
 800ea2e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea30:	4621      	mov	r1, r4
 800ea32:	4628      	mov	r0, r5
 800ea34:	f000 f9d8 	bl	800ede8 <_printf_common>
 800ea38:	3001      	adds	r0, #1
 800ea3a:	f040 8090 	bne.w	800eb5e <_printf_float+0x1e2>
 800ea3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea42:	b00d      	add	sp, #52	; 0x34
 800ea44:	ecbd 8b02 	vpop	{d8}
 800ea48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea4c:	4642      	mov	r2, r8
 800ea4e:	464b      	mov	r3, r9
 800ea50:	4640      	mov	r0, r8
 800ea52:	4649      	mov	r1, r9
 800ea54:	f7f2 f872 	bl	8000b3c <__aeabi_dcmpun>
 800ea58:	b140      	cbz	r0, 800ea6c <_printf_float+0xf0>
 800ea5a:	464b      	mov	r3, r9
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bfbc      	itt	lt
 800ea60:	232d      	movlt	r3, #45	; 0x2d
 800ea62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ea66:	487f      	ldr	r0, [pc, #508]	; (800ec64 <_printf_float+0x2e8>)
 800ea68:	4b7f      	ldr	r3, [pc, #508]	; (800ec68 <_printf_float+0x2ec>)
 800ea6a:	e7d1      	b.n	800ea10 <_printf_float+0x94>
 800ea6c:	6863      	ldr	r3, [r4, #4]
 800ea6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ea72:	9206      	str	r2, [sp, #24]
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	d13f      	bne.n	800eaf8 <_printf_float+0x17c>
 800ea78:	2306      	movs	r3, #6
 800ea7a:	6063      	str	r3, [r4, #4]
 800ea7c:	9b05      	ldr	r3, [sp, #20]
 800ea7e:	6861      	ldr	r1, [r4, #4]
 800ea80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ea84:	2300      	movs	r3, #0
 800ea86:	9303      	str	r3, [sp, #12]
 800ea88:	ab0a      	add	r3, sp, #40	; 0x28
 800ea8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ea8e:	ab09      	add	r3, sp, #36	; 0x24
 800ea90:	ec49 8b10 	vmov	d0, r8, r9
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	6022      	str	r2, [r4, #0]
 800ea98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	f7ff fecd 	bl	800e83c <__cvt>
 800eaa2:	9b06      	ldr	r3, [sp, #24]
 800eaa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaa6:	2b47      	cmp	r3, #71	; 0x47
 800eaa8:	4680      	mov	r8, r0
 800eaaa:	d108      	bne.n	800eabe <_printf_float+0x142>
 800eaac:	1cc8      	adds	r0, r1, #3
 800eaae:	db02      	blt.n	800eab6 <_printf_float+0x13a>
 800eab0:	6863      	ldr	r3, [r4, #4]
 800eab2:	4299      	cmp	r1, r3
 800eab4:	dd41      	ble.n	800eb3a <_printf_float+0x1be>
 800eab6:	f1ab 0b02 	sub.w	fp, fp, #2
 800eaba:	fa5f fb8b 	uxtb.w	fp, fp
 800eabe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eac2:	d820      	bhi.n	800eb06 <_printf_float+0x18a>
 800eac4:	3901      	subs	r1, #1
 800eac6:	465a      	mov	r2, fp
 800eac8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eacc:	9109      	str	r1, [sp, #36]	; 0x24
 800eace:	f7ff ff17 	bl	800e900 <__exponent>
 800ead2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ead4:	1813      	adds	r3, r2, r0
 800ead6:	2a01      	cmp	r2, #1
 800ead8:	4681      	mov	r9, r0
 800eada:	6123      	str	r3, [r4, #16]
 800eadc:	dc02      	bgt.n	800eae4 <_printf_float+0x168>
 800eade:	6822      	ldr	r2, [r4, #0]
 800eae0:	07d2      	lsls	r2, r2, #31
 800eae2:	d501      	bpl.n	800eae8 <_printf_float+0x16c>
 800eae4:	3301      	adds	r3, #1
 800eae6:	6123      	str	r3, [r4, #16]
 800eae8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d09c      	beq.n	800ea2a <_printf_float+0xae>
 800eaf0:	232d      	movs	r3, #45	; 0x2d
 800eaf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaf6:	e798      	b.n	800ea2a <_printf_float+0xae>
 800eaf8:	9a06      	ldr	r2, [sp, #24]
 800eafa:	2a47      	cmp	r2, #71	; 0x47
 800eafc:	d1be      	bne.n	800ea7c <_printf_float+0x100>
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1bc      	bne.n	800ea7c <_printf_float+0x100>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e7b9      	b.n	800ea7a <_printf_float+0xfe>
 800eb06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eb0a:	d118      	bne.n	800eb3e <_printf_float+0x1c2>
 800eb0c:	2900      	cmp	r1, #0
 800eb0e:	6863      	ldr	r3, [r4, #4]
 800eb10:	dd0b      	ble.n	800eb2a <_printf_float+0x1ae>
 800eb12:	6121      	str	r1, [r4, #16]
 800eb14:	b913      	cbnz	r3, 800eb1c <_printf_float+0x1a0>
 800eb16:	6822      	ldr	r2, [r4, #0]
 800eb18:	07d0      	lsls	r0, r2, #31
 800eb1a:	d502      	bpl.n	800eb22 <_printf_float+0x1a6>
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	440b      	add	r3, r1
 800eb20:	6123      	str	r3, [r4, #16]
 800eb22:	65a1      	str	r1, [r4, #88]	; 0x58
 800eb24:	f04f 0900 	mov.w	r9, #0
 800eb28:	e7de      	b.n	800eae8 <_printf_float+0x16c>
 800eb2a:	b913      	cbnz	r3, 800eb32 <_printf_float+0x1b6>
 800eb2c:	6822      	ldr	r2, [r4, #0]
 800eb2e:	07d2      	lsls	r2, r2, #31
 800eb30:	d501      	bpl.n	800eb36 <_printf_float+0x1ba>
 800eb32:	3302      	adds	r3, #2
 800eb34:	e7f4      	b.n	800eb20 <_printf_float+0x1a4>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e7f2      	b.n	800eb20 <_printf_float+0x1a4>
 800eb3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb40:	4299      	cmp	r1, r3
 800eb42:	db05      	blt.n	800eb50 <_printf_float+0x1d4>
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	6121      	str	r1, [r4, #16]
 800eb48:	07d8      	lsls	r0, r3, #31
 800eb4a:	d5ea      	bpl.n	800eb22 <_printf_float+0x1a6>
 800eb4c:	1c4b      	adds	r3, r1, #1
 800eb4e:	e7e7      	b.n	800eb20 <_printf_float+0x1a4>
 800eb50:	2900      	cmp	r1, #0
 800eb52:	bfd4      	ite	le
 800eb54:	f1c1 0202 	rsble	r2, r1, #2
 800eb58:	2201      	movgt	r2, #1
 800eb5a:	4413      	add	r3, r2
 800eb5c:	e7e0      	b.n	800eb20 <_printf_float+0x1a4>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	055a      	lsls	r2, r3, #21
 800eb62:	d407      	bmi.n	800eb74 <_printf_float+0x1f8>
 800eb64:	6923      	ldr	r3, [r4, #16]
 800eb66:	4642      	mov	r2, r8
 800eb68:	4631      	mov	r1, r6
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	47b8      	blx	r7
 800eb6e:	3001      	adds	r0, #1
 800eb70:	d12c      	bne.n	800ebcc <_printf_float+0x250>
 800eb72:	e764      	b.n	800ea3e <_printf_float+0xc2>
 800eb74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb78:	f240 80e0 	bls.w	800ed3c <_printf_float+0x3c0>
 800eb7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb80:	2200      	movs	r2, #0
 800eb82:	2300      	movs	r3, #0
 800eb84:	f7f1 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d034      	beq.n	800ebf6 <_printf_float+0x27a>
 800eb8c:	4a37      	ldr	r2, [pc, #220]	; (800ec6c <_printf_float+0x2f0>)
 800eb8e:	2301      	movs	r3, #1
 800eb90:	4631      	mov	r1, r6
 800eb92:	4628      	mov	r0, r5
 800eb94:	47b8      	blx	r7
 800eb96:	3001      	adds	r0, #1
 800eb98:	f43f af51 	beq.w	800ea3e <_printf_float+0xc2>
 800eb9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eba0:	429a      	cmp	r2, r3
 800eba2:	db02      	blt.n	800ebaa <_printf_float+0x22e>
 800eba4:	6823      	ldr	r3, [r4, #0]
 800eba6:	07d8      	lsls	r0, r3, #31
 800eba8:	d510      	bpl.n	800ebcc <_printf_float+0x250>
 800ebaa:	ee18 3a10 	vmov	r3, s16
 800ebae:	4652      	mov	r2, sl
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f af41 	beq.w	800ea3e <_printf_float+0xc2>
 800ebbc:	f04f 0800 	mov.w	r8, #0
 800ebc0:	f104 091a 	add.w	r9, r4, #26
 800ebc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	4543      	cmp	r3, r8
 800ebca:	dc09      	bgt.n	800ebe0 <_printf_float+0x264>
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	079b      	lsls	r3, r3, #30
 800ebd0:	f100 8105 	bmi.w	800edde <_printf_float+0x462>
 800ebd4:	68e0      	ldr	r0, [r4, #12]
 800ebd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebd8:	4298      	cmp	r0, r3
 800ebda:	bfb8      	it	lt
 800ebdc:	4618      	movlt	r0, r3
 800ebde:	e730      	b.n	800ea42 <_printf_float+0xc6>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	464a      	mov	r2, r9
 800ebe4:	4631      	mov	r1, r6
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	47b8      	blx	r7
 800ebea:	3001      	adds	r0, #1
 800ebec:	f43f af27 	beq.w	800ea3e <_printf_float+0xc2>
 800ebf0:	f108 0801 	add.w	r8, r8, #1
 800ebf4:	e7e6      	b.n	800ebc4 <_printf_float+0x248>
 800ebf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	dc39      	bgt.n	800ec70 <_printf_float+0x2f4>
 800ebfc:	4a1b      	ldr	r2, [pc, #108]	; (800ec6c <_printf_float+0x2f0>)
 800ebfe:	2301      	movs	r3, #1
 800ec00:	4631      	mov	r1, r6
 800ec02:	4628      	mov	r0, r5
 800ec04:	47b8      	blx	r7
 800ec06:	3001      	adds	r0, #1
 800ec08:	f43f af19 	beq.w	800ea3e <_printf_float+0xc2>
 800ec0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec10:	4313      	orrs	r3, r2
 800ec12:	d102      	bne.n	800ec1a <_printf_float+0x29e>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	07d9      	lsls	r1, r3, #31
 800ec18:	d5d8      	bpl.n	800ebcc <_printf_float+0x250>
 800ec1a:	ee18 3a10 	vmov	r3, s16
 800ec1e:	4652      	mov	r2, sl
 800ec20:	4631      	mov	r1, r6
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b8      	blx	r7
 800ec26:	3001      	adds	r0, #1
 800ec28:	f43f af09 	beq.w	800ea3e <_printf_float+0xc2>
 800ec2c:	f04f 0900 	mov.w	r9, #0
 800ec30:	f104 0a1a 	add.w	sl, r4, #26
 800ec34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec36:	425b      	negs	r3, r3
 800ec38:	454b      	cmp	r3, r9
 800ec3a:	dc01      	bgt.n	800ec40 <_printf_float+0x2c4>
 800ec3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec3e:	e792      	b.n	800eb66 <_printf_float+0x1ea>
 800ec40:	2301      	movs	r3, #1
 800ec42:	4652      	mov	r2, sl
 800ec44:	4631      	mov	r1, r6
 800ec46:	4628      	mov	r0, r5
 800ec48:	47b8      	blx	r7
 800ec4a:	3001      	adds	r0, #1
 800ec4c:	f43f aef7 	beq.w	800ea3e <_printf_float+0xc2>
 800ec50:	f109 0901 	add.w	r9, r9, #1
 800ec54:	e7ee      	b.n	800ec34 <_printf_float+0x2b8>
 800ec56:	bf00      	nop
 800ec58:	7fefffff 	.word	0x7fefffff
 800ec5c:	080116b8 	.word	0x080116b8
 800ec60:	080116bc 	.word	0x080116bc
 800ec64:	080116c4 	.word	0x080116c4
 800ec68:	080116c0 	.word	0x080116c0
 800ec6c:	080116c8 	.word	0x080116c8
 800ec70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec74:	429a      	cmp	r2, r3
 800ec76:	bfa8      	it	ge
 800ec78:	461a      	movge	r2, r3
 800ec7a:	2a00      	cmp	r2, #0
 800ec7c:	4691      	mov	r9, r2
 800ec7e:	dc37      	bgt.n	800ecf0 <_printf_float+0x374>
 800ec80:	f04f 0b00 	mov.w	fp, #0
 800ec84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec88:	f104 021a 	add.w	r2, r4, #26
 800ec8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec8e:	9305      	str	r3, [sp, #20]
 800ec90:	eba3 0309 	sub.w	r3, r3, r9
 800ec94:	455b      	cmp	r3, fp
 800ec96:	dc33      	bgt.n	800ed00 <_printf_float+0x384>
 800ec98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	db3b      	blt.n	800ed18 <_printf_float+0x39c>
 800eca0:	6823      	ldr	r3, [r4, #0]
 800eca2:	07da      	lsls	r2, r3, #31
 800eca4:	d438      	bmi.n	800ed18 <_printf_float+0x39c>
 800eca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eca8:	9b05      	ldr	r3, [sp, #20]
 800ecaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	eba2 0901 	sub.w	r9, r2, r1
 800ecb2:	4599      	cmp	r9, r3
 800ecb4:	bfa8      	it	ge
 800ecb6:	4699      	movge	r9, r3
 800ecb8:	f1b9 0f00 	cmp.w	r9, #0
 800ecbc:	dc35      	bgt.n	800ed2a <_printf_float+0x3ae>
 800ecbe:	f04f 0800 	mov.w	r8, #0
 800ecc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecc6:	f104 0a1a 	add.w	sl, r4, #26
 800ecca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecce:	1a9b      	subs	r3, r3, r2
 800ecd0:	eba3 0309 	sub.w	r3, r3, r9
 800ecd4:	4543      	cmp	r3, r8
 800ecd6:	f77f af79 	ble.w	800ebcc <_printf_float+0x250>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	4652      	mov	r2, sl
 800ecde:	4631      	mov	r1, r6
 800ece0:	4628      	mov	r0, r5
 800ece2:	47b8      	blx	r7
 800ece4:	3001      	adds	r0, #1
 800ece6:	f43f aeaa 	beq.w	800ea3e <_printf_float+0xc2>
 800ecea:	f108 0801 	add.w	r8, r8, #1
 800ecee:	e7ec      	b.n	800ecca <_printf_float+0x34e>
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	4631      	mov	r1, r6
 800ecf4:	4642      	mov	r2, r8
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	47b8      	blx	r7
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	d1c0      	bne.n	800ec80 <_printf_float+0x304>
 800ecfe:	e69e      	b.n	800ea3e <_printf_float+0xc2>
 800ed00:	2301      	movs	r3, #1
 800ed02:	4631      	mov	r1, r6
 800ed04:	4628      	mov	r0, r5
 800ed06:	9205      	str	r2, [sp, #20]
 800ed08:	47b8      	blx	r7
 800ed0a:	3001      	adds	r0, #1
 800ed0c:	f43f ae97 	beq.w	800ea3e <_printf_float+0xc2>
 800ed10:	9a05      	ldr	r2, [sp, #20]
 800ed12:	f10b 0b01 	add.w	fp, fp, #1
 800ed16:	e7b9      	b.n	800ec8c <_printf_float+0x310>
 800ed18:	ee18 3a10 	vmov	r3, s16
 800ed1c:	4652      	mov	r2, sl
 800ed1e:	4631      	mov	r1, r6
 800ed20:	4628      	mov	r0, r5
 800ed22:	47b8      	blx	r7
 800ed24:	3001      	adds	r0, #1
 800ed26:	d1be      	bne.n	800eca6 <_printf_float+0x32a>
 800ed28:	e689      	b.n	800ea3e <_printf_float+0xc2>
 800ed2a:	9a05      	ldr	r2, [sp, #20]
 800ed2c:	464b      	mov	r3, r9
 800ed2e:	4442      	add	r2, r8
 800ed30:	4631      	mov	r1, r6
 800ed32:	4628      	mov	r0, r5
 800ed34:	47b8      	blx	r7
 800ed36:	3001      	adds	r0, #1
 800ed38:	d1c1      	bne.n	800ecbe <_printf_float+0x342>
 800ed3a:	e680      	b.n	800ea3e <_printf_float+0xc2>
 800ed3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed3e:	2a01      	cmp	r2, #1
 800ed40:	dc01      	bgt.n	800ed46 <_printf_float+0x3ca>
 800ed42:	07db      	lsls	r3, r3, #31
 800ed44:	d538      	bpl.n	800edb8 <_printf_float+0x43c>
 800ed46:	2301      	movs	r3, #1
 800ed48:	4642      	mov	r2, r8
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	47b8      	blx	r7
 800ed50:	3001      	adds	r0, #1
 800ed52:	f43f ae74 	beq.w	800ea3e <_printf_float+0xc2>
 800ed56:	ee18 3a10 	vmov	r3, s16
 800ed5a:	4652      	mov	r2, sl
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	4628      	mov	r0, r5
 800ed60:	47b8      	blx	r7
 800ed62:	3001      	adds	r0, #1
 800ed64:	f43f ae6b 	beq.w	800ea3e <_printf_float+0xc2>
 800ed68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	2300      	movs	r3, #0
 800ed70:	f7f1 feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed74:	b9d8      	cbnz	r0, 800edae <_printf_float+0x432>
 800ed76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed78:	f108 0201 	add.w	r2, r8, #1
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4628      	mov	r0, r5
 800ed82:	47b8      	blx	r7
 800ed84:	3001      	adds	r0, #1
 800ed86:	d10e      	bne.n	800eda6 <_printf_float+0x42a>
 800ed88:	e659      	b.n	800ea3e <_printf_float+0xc2>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	4652      	mov	r2, sl
 800ed8e:	4631      	mov	r1, r6
 800ed90:	4628      	mov	r0, r5
 800ed92:	47b8      	blx	r7
 800ed94:	3001      	adds	r0, #1
 800ed96:	f43f ae52 	beq.w	800ea3e <_printf_float+0xc2>
 800ed9a:	f108 0801 	add.w	r8, r8, #1
 800ed9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eda0:	3b01      	subs	r3, #1
 800eda2:	4543      	cmp	r3, r8
 800eda4:	dcf1      	bgt.n	800ed8a <_printf_float+0x40e>
 800eda6:	464b      	mov	r3, r9
 800eda8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800edac:	e6dc      	b.n	800eb68 <_printf_float+0x1ec>
 800edae:	f04f 0800 	mov.w	r8, #0
 800edb2:	f104 0a1a 	add.w	sl, r4, #26
 800edb6:	e7f2      	b.n	800ed9e <_printf_float+0x422>
 800edb8:	2301      	movs	r3, #1
 800edba:	4642      	mov	r2, r8
 800edbc:	e7df      	b.n	800ed7e <_printf_float+0x402>
 800edbe:	2301      	movs	r3, #1
 800edc0:	464a      	mov	r2, r9
 800edc2:	4631      	mov	r1, r6
 800edc4:	4628      	mov	r0, r5
 800edc6:	47b8      	blx	r7
 800edc8:	3001      	adds	r0, #1
 800edca:	f43f ae38 	beq.w	800ea3e <_printf_float+0xc2>
 800edce:	f108 0801 	add.w	r8, r8, #1
 800edd2:	68e3      	ldr	r3, [r4, #12]
 800edd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edd6:	1a5b      	subs	r3, r3, r1
 800edd8:	4543      	cmp	r3, r8
 800edda:	dcf0      	bgt.n	800edbe <_printf_float+0x442>
 800eddc:	e6fa      	b.n	800ebd4 <_printf_float+0x258>
 800edde:	f04f 0800 	mov.w	r8, #0
 800ede2:	f104 0919 	add.w	r9, r4, #25
 800ede6:	e7f4      	b.n	800edd2 <_printf_float+0x456>

0800ede8 <_printf_common>:
 800ede8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edec:	4616      	mov	r6, r2
 800edee:	4699      	mov	r9, r3
 800edf0:	688a      	ldr	r2, [r1, #8]
 800edf2:	690b      	ldr	r3, [r1, #16]
 800edf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edf8:	4293      	cmp	r3, r2
 800edfa:	bfb8      	it	lt
 800edfc:	4613      	movlt	r3, r2
 800edfe:	6033      	str	r3, [r6, #0]
 800ee00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee04:	4607      	mov	r7, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	b10a      	cbz	r2, 800ee0e <_printf_common+0x26>
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	6033      	str	r3, [r6, #0]
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	0699      	lsls	r1, r3, #26
 800ee12:	bf42      	ittt	mi
 800ee14:	6833      	ldrmi	r3, [r6, #0]
 800ee16:	3302      	addmi	r3, #2
 800ee18:	6033      	strmi	r3, [r6, #0]
 800ee1a:	6825      	ldr	r5, [r4, #0]
 800ee1c:	f015 0506 	ands.w	r5, r5, #6
 800ee20:	d106      	bne.n	800ee30 <_printf_common+0x48>
 800ee22:	f104 0a19 	add.w	sl, r4, #25
 800ee26:	68e3      	ldr	r3, [r4, #12]
 800ee28:	6832      	ldr	r2, [r6, #0]
 800ee2a:	1a9b      	subs	r3, r3, r2
 800ee2c:	42ab      	cmp	r3, r5
 800ee2e:	dc26      	bgt.n	800ee7e <_printf_common+0x96>
 800ee30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee34:	1e13      	subs	r3, r2, #0
 800ee36:	6822      	ldr	r2, [r4, #0]
 800ee38:	bf18      	it	ne
 800ee3a:	2301      	movne	r3, #1
 800ee3c:	0692      	lsls	r2, r2, #26
 800ee3e:	d42b      	bmi.n	800ee98 <_printf_common+0xb0>
 800ee40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee44:	4649      	mov	r1, r9
 800ee46:	4638      	mov	r0, r7
 800ee48:	47c0      	blx	r8
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	d01e      	beq.n	800ee8c <_printf_common+0xa4>
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	68e5      	ldr	r5, [r4, #12]
 800ee52:	6832      	ldr	r2, [r6, #0]
 800ee54:	f003 0306 	and.w	r3, r3, #6
 800ee58:	2b04      	cmp	r3, #4
 800ee5a:	bf08      	it	eq
 800ee5c:	1aad      	subeq	r5, r5, r2
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	6922      	ldr	r2, [r4, #16]
 800ee62:	bf0c      	ite	eq
 800ee64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee68:	2500      	movne	r5, #0
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	bfc4      	itt	gt
 800ee6e:	1a9b      	subgt	r3, r3, r2
 800ee70:	18ed      	addgt	r5, r5, r3
 800ee72:	2600      	movs	r6, #0
 800ee74:	341a      	adds	r4, #26
 800ee76:	42b5      	cmp	r5, r6
 800ee78:	d11a      	bne.n	800eeb0 <_printf_common+0xc8>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e008      	b.n	800ee90 <_printf_common+0xa8>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	4652      	mov	r2, sl
 800ee82:	4649      	mov	r1, r9
 800ee84:	4638      	mov	r0, r7
 800ee86:	47c0      	blx	r8
 800ee88:	3001      	adds	r0, #1
 800ee8a:	d103      	bne.n	800ee94 <_printf_common+0xac>
 800ee8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee94:	3501      	adds	r5, #1
 800ee96:	e7c6      	b.n	800ee26 <_printf_common+0x3e>
 800ee98:	18e1      	adds	r1, r4, r3
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	2030      	movs	r0, #48	; 0x30
 800ee9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eea2:	4422      	add	r2, r4
 800eea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eeac:	3302      	adds	r3, #2
 800eeae:	e7c7      	b.n	800ee40 <_printf_common+0x58>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	47c0      	blx	r8
 800eeba:	3001      	adds	r0, #1
 800eebc:	d0e6      	beq.n	800ee8c <_printf_common+0xa4>
 800eebe:	3601      	adds	r6, #1
 800eec0:	e7d9      	b.n	800ee76 <_printf_common+0x8e>
	...

0800eec4 <_printf_i>:
 800eec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eec8:	460c      	mov	r4, r1
 800eeca:	4691      	mov	r9, r2
 800eecc:	7e27      	ldrb	r7, [r4, #24]
 800eece:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eed0:	2f78      	cmp	r7, #120	; 0x78
 800eed2:	4680      	mov	r8, r0
 800eed4:	469a      	mov	sl, r3
 800eed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eeda:	d807      	bhi.n	800eeec <_printf_i+0x28>
 800eedc:	2f62      	cmp	r7, #98	; 0x62
 800eede:	d80a      	bhi.n	800eef6 <_printf_i+0x32>
 800eee0:	2f00      	cmp	r7, #0
 800eee2:	f000 80d8 	beq.w	800f096 <_printf_i+0x1d2>
 800eee6:	2f58      	cmp	r7, #88	; 0x58
 800eee8:	f000 80a3 	beq.w	800f032 <_printf_i+0x16e>
 800eeec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eef4:	e03a      	b.n	800ef6c <_printf_i+0xa8>
 800eef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eefa:	2b15      	cmp	r3, #21
 800eefc:	d8f6      	bhi.n	800eeec <_printf_i+0x28>
 800eefe:	a001      	add	r0, pc, #4	; (adr r0, 800ef04 <_printf_i+0x40>)
 800ef00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ef04:	0800ef5d 	.word	0x0800ef5d
 800ef08:	0800ef71 	.word	0x0800ef71
 800ef0c:	0800eeed 	.word	0x0800eeed
 800ef10:	0800eeed 	.word	0x0800eeed
 800ef14:	0800eeed 	.word	0x0800eeed
 800ef18:	0800eeed 	.word	0x0800eeed
 800ef1c:	0800ef71 	.word	0x0800ef71
 800ef20:	0800eeed 	.word	0x0800eeed
 800ef24:	0800eeed 	.word	0x0800eeed
 800ef28:	0800eeed 	.word	0x0800eeed
 800ef2c:	0800eeed 	.word	0x0800eeed
 800ef30:	0800f07d 	.word	0x0800f07d
 800ef34:	0800efa1 	.word	0x0800efa1
 800ef38:	0800f05f 	.word	0x0800f05f
 800ef3c:	0800eeed 	.word	0x0800eeed
 800ef40:	0800eeed 	.word	0x0800eeed
 800ef44:	0800f09f 	.word	0x0800f09f
 800ef48:	0800eeed 	.word	0x0800eeed
 800ef4c:	0800efa1 	.word	0x0800efa1
 800ef50:	0800eeed 	.word	0x0800eeed
 800ef54:	0800eeed 	.word	0x0800eeed
 800ef58:	0800f067 	.word	0x0800f067
 800ef5c:	680b      	ldr	r3, [r1, #0]
 800ef5e:	1d1a      	adds	r2, r3, #4
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	600a      	str	r2, [r1, #0]
 800ef64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e0a3      	b.n	800f0b8 <_printf_i+0x1f4>
 800ef70:	6825      	ldr	r5, [r4, #0]
 800ef72:	6808      	ldr	r0, [r1, #0]
 800ef74:	062e      	lsls	r6, r5, #24
 800ef76:	f100 0304 	add.w	r3, r0, #4
 800ef7a:	d50a      	bpl.n	800ef92 <_printf_i+0xce>
 800ef7c:	6805      	ldr	r5, [r0, #0]
 800ef7e:	600b      	str	r3, [r1, #0]
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	da03      	bge.n	800ef8c <_printf_i+0xc8>
 800ef84:	232d      	movs	r3, #45	; 0x2d
 800ef86:	426d      	negs	r5, r5
 800ef88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef8c:	485e      	ldr	r0, [pc, #376]	; (800f108 <_printf_i+0x244>)
 800ef8e:	230a      	movs	r3, #10
 800ef90:	e019      	b.n	800efc6 <_printf_i+0x102>
 800ef92:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ef96:	6805      	ldr	r5, [r0, #0]
 800ef98:	600b      	str	r3, [r1, #0]
 800ef9a:	bf18      	it	ne
 800ef9c:	b22d      	sxthne	r5, r5
 800ef9e:	e7ef      	b.n	800ef80 <_printf_i+0xbc>
 800efa0:	680b      	ldr	r3, [r1, #0]
 800efa2:	6825      	ldr	r5, [r4, #0]
 800efa4:	1d18      	adds	r0, r3, #4
 800efa6:	6008      	str	r0, [r1, #0]
 800efa8:	0628      	lsls	r0, r5, #24
 800efaa:	d501      	bpl.n	800efb0 <_printf_i+0xec>
 800efac:	681d      	ldr	r5, [r3, #0]
 800efae:	e002      	b.n	800efb6 <_printf_i+0xf2>
 800efb0:	0669      	lsls	r1, r5, #25
 800efb2:	d5fb      	bpl.n	800efac <_printf_i+0xe8>
 800efb4:	881d      	ldrh	r5, [r3, #0]
 800efb6:	4854      	ldr	r0, [pc, #336]	; (800f108 <_printf_i+0x244>)
 800efb8:	2f6f      	cmp	r7, #111	; 0x6f
 800efba:	bf0c      	ite	eq
 800efbc:	2308      	moveq	r3, #8
 800efbe:	230a      	movne	r3, #10
 800efc0:	2100      	movs	r1, #0
 800efc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efc6:	6866      	ldr	r6, [r4, #4]
 800efc8:	60a6      	str	r6, [r4, #8]
 800efca:	2e00      	cmp	r6, #0
 800efcc:	bfa2      	ittt	ge
 800efce:	6821      	ldrge	r1, [r4, #0]
 800efd0:	f021 0104 	bicge.w	r1, r1, #4
 800efd4:	6021      	strge	r1, [r4, #0]
 800efd6:	b90d      	cbnz	r5, 800efdc <_printf_i+0x118>
 800efd8:	2e00      	cmp	r6, #0
 800efda:	d04d      	beq.n	800f078 <_printf_i+0x1b4>
 800efdc:	4616      	mov	r6, r2
 800efde:	fbb5 f1f3 	udiv	r1, r5, r3
 800efe2:	fb03 5711 	mls	r7, r3, r1, r5
 800efe6:	5dc7      	ldrb	r7, [r0, r7]
 800efe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800efec:	462f      	mov	r7, r5
 800efee:	42bb      	cmp	r3, r7
 800eff0:	460d      	mov	r5, r1
 800eff2:	d9f4      	bls.n	800efde <_printf_i+0x11a>
 800eff4:	2b08      	cmp	r3, #8
 800eff6:	d10b      	bne.n	800f010 <_printf_i+0x14c>
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	07df      	lsls	r7, r3, #31
 800effc:	d508      	bpl.n	800f010 <_printf_i+0x14c>
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	6861      	ldr	r1, [r4, #4]
 800f002:	4299      	cmp	r1, r3
 800f004:	bfde      	ittt	le
 800f006:	2330      	movle	r3, #48	; 0x30
 800f008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f00c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f010:	1b92      	subs	r2, r2, r6
 800f012:	6122      	str	r2, [r4, #16]
 800f014:	f8cd a000 	str.w	sl, [sp]
 800f018:	464b      	mov	r3, r9
 800f01a:	aa03      	add	r2, sp, #12
 800f01c:	4621      	mov	r1, r4
 800f01e:	4640      	mov	r0, r8
 800f020:	f7ff fee2 	bl	800ede8 <_printf_common>
 800f024:	3001      	adds	r0, #1
 800f026:	d14c      	bne.n	800f0c2 <_printf_i+0x1fe>
 800f028:	f04f 30ff 	mov.w	r0, #4294967295
 800f02c:	b004      	add	sp, #16
 800f02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f032:	4835      	ldr	r0, [pc, #212]	; (800f108 <_printf_i+0x244>)
 800f034:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	680e      	ldr	r6, [r1, #0]
 800f03c:	061f      	lsls	r7, r3, #24
 800f03e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f042:	600e      	str	r6, [r1, #0]
 800f044:	d514      	bpl.n	800f070 <_printf_i+0x1ac>
 800f046:	07d9      	lsls	r1, r3, #31
 800f048:	bf44      	itt	mi
 800f04a:	f043 0320 	orrmi.w	r3, r3, #32
 800f04e:	6023      	strmi	r3, [r4, #0]
 800f050:	b91d      	cbnz	r5, 800f05a <_printf_i+0x196>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	f023 0320 	bic.w	r3, r3, #32
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	2310      	movs	r3, #16
 800f05c:	e7b0      	b.n	800efc0 <_printf_i+0xfc>
 800f05e:	6823      	ldr	r3, [r4, #0]
 800f060:	f043 0320 	orr.w	r3, r3, #32
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	2378      	movs	r3, #120	; 0x78
 800f068:	4828      	ldr	r0, [pc, #160]	; (800f10c <_printf_i+0x248>)
 800f06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f06e:	e7e3      	b.n	800f038 <_printf_i+0x174>
 800f070:	065e      	lsls	r6, r3, #25
 800f072:	bf48      	it	mi
 800f074:	b2ad      	uxthmi	r5, r5
 800f076:	e7e6      	b.n	800f046 <_printf_i+0x182>
 800f078:	4616      	mov	r6, r2
 800f07a:	e7bb      	b.n	800eff4 <_printf_i+0x130>
 800f07c:	680b      	ldr	r3, [r1, #0]
 800f07e:	6826      	ldr	r6, [r4, #0]
 800f080:	6960      	ldr	r0, [r4, #20]
 800f082:	1d1d      	adds	r5, r3, #4
 800f084:	600d      	str	r5, [r1, #0]
 800f086:	0635      	lsls	r5, r6, #24
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	d501      	bpl.n	800f090 <_printf_i+0x1cc>
 800f08c:	6018      	str	r0, [r3, #0]
 800f08e:	e002      	b.n	800f096 <_printf_i+0x1d2>
 800f090:	0671      	lsls	r1, r6, #25
 800f092:	d5fb      	bpl.n	800f08c <_printf_i+0x1c8>
 800f094:	8018      	strh	r0, [r3, #0]
 800f096:	2300      	movs	r3, #0
 800f098:	6123      	str	r3, [r4, #16]
 800f09a:	4616      	mov	r6, r2
 800f09c:	e7ba      	b.n	800f014 <_printf_i+0x150>
 800f09e:	680b      	ldr	r3, [r1, #0]
 800f0a0:	1d1a      	adds	r2, r3, #4
 800f0a2:	600a      	str	r2, [r1, #0]
 800f0a4:	681e      	ldr	r6, [r3, #0]
 800f0a6:	6862      	ldr	r2, [r4, #4]
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f7f1 f8a0 	bl	80001f0 <memchr>
 800f0b0:	b108      	cbz	r0, 800f0b6 <_printf_i+0x1f2>
 800f0b2:	1b80      	subs	r0, r0, r6
 800f0b4:	6060      	str	r0, [r4, #4]
 800f0b6:	6863      	ldr	r3, [r4, #4]
 800f0b8:	6123      	str	r3, [r4, #16]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c0:	e7a8      	b.n	800f014 <_printf_i+0x150>
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	4632      	mov	r2, r6
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	47d0      	blx	sl
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d0ab      	beq.n	800f028 <_printf_i+0x164>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	079b      	lsls	r3, r3, #30
 800f0d4:	d413      	bmi.n	800f0fe <_printf_i+0x23a>
 800f0d6:	68e0      	ldr	r0, [r4, #12]
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	4298      	cmp	r0, r3
 800f0dc:	bfb8      	it	lt
 800f0de:	4618      	movlt	r0, r3
 800f0e0:	e7a4      	b.n	800f02c <_printf_i+0x168>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	47d0      	blx	sl
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d09b      	beq.n	800f028 <_printf_i+0x164>
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	68e3      	ldr	r3, [r4, #12]
 800f0f4:	9903      	ldr	r1, [sp, #12]
 800f0f6:	1a5b      	subs	r3, r3, r1
 800f0f8:	42ab      	cmp	r3, r5
 800f0fa:	dcf2      	bgt.n	800f0e2 <_printf_i+0x21e>
 800f0fc:	e7eb      	b.n	800f0d6 <_printf_i+0x212>
 800f0fe:	2500      	movs	r5, #0
 800f100:	f104 0619 	add.w	r6, r4, #25
 800f104:	e7f5      	b.n	800f0f2 <_printf_i+0x22e>
 800f106:	bf00      	nop
 800f108:	080116ca 	.word	0x080116ca
 800f10c:	080116db 	.word	0x080116db

0800f110 <siprintf>:
 800f110:	b40e      	push	{r1, r2, r3}
 800f112:	b500      	push	{lr}
 800f114:	b09c      	sub	sp, #112	; 0x70
 800f116:	ab1d      	add	r3, sp, #116	; 0x74
 800f118:	9002      	str	r0, [sp, #8]
 800f11a:	9006      	str	r0, [sp, #24]
 800f11c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f120:	4809      	ldr	r0, [pc, #36]	; (800f148 <siprintf+0x38>)
 800f122:	9107      	str	r1, [sp, #28]
 800f124:	9104      	str	r1, [sp, #16]
 800f126:	4909      	ldr	r1, [pc, #36]	; (800f14c <siprintf+0x3c>)
 800f128:	f853 2b04 	ldr.w	r2, [r3], #4
 800f12c:	9105      	str	r1, [sp, #20]
 800f12e:	6800      	ldr	r0, [r0, #0]
 800f130:	9301      	str	r3, [sp, #4]
 800f132:	a902      	add	r1, sp, #8
 800f134:	f001 fb32 	bl	801079c <_svfiprintf_r>
 800f138:	9b02      	ldr	r3, [sp, #8]
 800f13a:	2200      	movs	r2, #0
 800f13c:	701a      	strb	r2, [r3, #0]
 800f13e:	b01c      	add	sp, #112	; 0x70
 800f140:	f85d eb04 	ldr.w	lr, [sp], #4
 800f144:	b003      	add	sp, #12
 800f146:	4770      	bx	lr
 800f148:	20000180 	.word	0x20000180
 800f14c:	ffff0208 	.word	0xffff0208

0800f150 <quorem>:
 800f150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f154:	6903      	ldr	r3, [r0, #16]
 800f156:	690c      	ldr	r4, [r1, #16]
 800f158:	42a3      	cmp	r3, r4
 800f15a:	4607      	mov	r7, r0
 800f15c:	f2c0 8081 	blt.w	800f262 <quorem+0x112>
 800f160:	3c01      	subs	r4, #1
 800f162:	f101 0814 	add.w	r8, r1, #20
 800f166:	f100 0514 	add.w	r5, r0, #20
 800f16a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f178:	3301      	adds	r3, #1
 800f17a:	429a      	cmp	r2, r3
 800f17c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f180:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f184:	fbb2 f6f3 	udiv	r6, r2, r3
 800f188:	d331      	bcc.n	800f1ee <quorem+0x9e>
 800f18a:	f04f 0e00 	mov.w	lr, #0
 800f18e:	4640      	mov	r0, r8
 800f190:	46ac      	mov	ip, r5
 800f192:	46f2      	mov	sl, lr
 800f194:	f850 2b04 	ldr.w	r2, [r0], #4
 800f198:	b293      	uxth	r3, r2
 800f19a:	fb06 e303 	mla	r3, r6, r3, lr
 800f19e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	ebaa 0303 	sub.w	r3, sl, r3
 800f1a8:	0c12      	lsrs	r2, r2, #16
 800f1aa:	f8dc a000 	ldr.w	sl, [ip]
 800f1ae:	fb06 e202 	mla	r2, r6, r2, lr
 800f1b2:	fa13 f38a 	uxtah	r3, r3, sl
 800f1b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f1ba:	fa1f fa82 	uxth.w	sl, r2
 800f1be:	f8dc 2000 	ldr.w	r2, [ip]
 800f1c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f1c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1d0:	4581      	cmp	r9, r0
 800f1d2:	f84c 3b04 	str.w	r3, [ip], #4
 800f1d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f1da:	d2db      	bcs.n	800f194 <quorem+0x44>
 800f1dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f1e0:	b92b      	cbnz	r3, 800f1ee <quorem+0x9e>
 800f1e2:	9b01      	ldr	r3, [sp, #4]
 800f1e4:	3b04      	subs	r3, #4
 800f1e6:	429d      	cmp	r5, r3
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	d32e      	bcc.n	800f24a <quorem+0xfa>
 800f1ec:	613c      	str	r4, [r7, #16]
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	f001 f8be 	bl	8010370 <__mcmp>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	db24      	blt.n	800f242 <quorem+0xf2>
 800f1f8:	3601      	adds	r6, #1
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f04f 0c00 	mov.w	ip, #0
 800f200:	f858 2b04 	ldr.w	r2, [r8], #4
 800f204:	f8d0 e000 	ldr.w	lr, [r0]
 800f208:	b293      	uxth	r3, r2
 800f20a:	ebac 0303 	sub.w	r3, ip, r3
 800f20e:	0c12      	lsrs	r2, r2, #16
 800f210:	fa13 f38e 	uxtah	r3, r3, lr
 800f214:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f222:	45c1      	cmp	r9, r8
 800f224:	f840 3b04 	str.w	r3, [r0], #4
 800f228:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f22c:	d2e8      	bcs.n	800f200 <quorem+0xb0>
 800f22e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f236:	b922      	cbnz	r2, 800f242 <quorem+0xf2>
 800f238:	3b04      	subs	r3, #4
 800f23a:	429d      	cmp	r5, r3
 800f23c:	461a      	mov	r2, r3
 800f23e:	d30a      	bcc.n	800f256 <quorem+0x106>
 800f240:	613c      	str	r4, [r7, #16]
 800f242:	4630      	mov	r0, r6
 800f244:	b003      	add	sp, #12
 800f246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f24a:	6812      	ldr	r2, [r2, #0]
 800f24c:	3b04      	subs	r3, #4
 800f24e:	2a00      	cmp	r2, #0
 800f250:	d1cc      	bne.n	800f1ec <quorem+0x9c>
 800f252:	3c01      	subs	r4, #1
 800f254:	e7c7      	b.n	800f1e6 <quorem+0x96>
 800f256:	6812      	ldr	r2, [r2, #0]
 800f258:	3b04      	subs	r3, #4
 800f25a:	2a00      	cmp	r2, #0
 800f25c:	d1f0      	bne.n	800f240 <quorem+0xf0>
 800f25e:	3c01      	subs	r4, #1
 800f260:	e7eb      	b.n	800f23a <quorem+0xea>
 800f262:	2000      	movs	r0, #0
 800f264:	e7ee      	b.n	800f244 <quorem+0xf4>
	...

0800f268 <_dtoa_r>:
 800f268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	ed2d 8b02 	vpush	{d8}
 800f270:	ec57 6b10 	vmov	r6, r7, d0
 800f274:	b095      	sub	sp, #84	; 0x54
 800f276:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f278:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f27c:	9105      	str	r1, [sp, #20]
 800f27e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f282:	4604      	mov	r4, r0
 800f284:	9209      	str	r2, [sp, #36]	; 0x24
 800f286:	930f      	str	r3, [sp, #60]	; 0x3c
 800f288:	b975      	cbnz	r5, 800f2a8 <_dtoa_r+0x40>
 800f28a:	2010      	movs	r0, #16
 800f28c:	f000 fddc 	bl	800fe48 <malloc>
 800f290:	4602      	mov	r2, r0
 800f292:	6260      	str	r0, [r4, #36]	; 0x24
 800f294:	b920      	cbnz	r0, 800f2a0 <_dtoa_r+0x38>
 800f296:	4bb2      	ldr	r3, [pc, #712]	; (800f560 <_dtoa_r+0x2f8>)
 800f298:	21ea      	movs	r1, #234	; 0xea
 800f29a:	48b2      	ldr	r0, [pc, #712]	; (800f564 <_dtoa_r+0x2fc>)
 800f29c:	f001 fb8e 	bl	80109bc <__assert_func>
 800f2a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f2a4:	6005      	str	r5, [r0, #0]
 800f2a6:	60c5      	str	r5, [r0, #12]
 800f2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2aa:	6819      	ldr	r1, [r3, #0]
 800f2ac:	b151      	cbz	r1, 800f2c4 <_dtoa_r+0x5c>
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	604a      	str	r2, [r1, #4]
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	4093      	lsls	r3, r2
 800f2b6:	608b      	str	r3, [r1, #8]
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 fe1b 	bl	800fef4 <_Bfree>
 800f2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	601a      	str	r2, [r3, #0]
 800f2c4:	1e3b      	subs	r3, r7, #0
 800f2c6:	bfb9      	ittee	lt
 800f2c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f2cc:	9303      	strlt	r3, [sp, #12]
 800f2ce:	2300      	movge	r3, #0
 800f2d0:	f8c8 3000 	strge.w	r3, [r8]
 800f2d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f2d8:	4ba3      	ldr	r3, [pc, #652]	; (800f568 <_dtoa_r+0x300>)
 800f2da:	bfbc      	itt	lt
 800f2dc:	2201      	movlt	r2, #1
 800f2de:	f8c8 2000 	strlt.w	r2, [r8]
 800f2e2:	ea33 0309 	bics.w	r3, r3, r9
 800f2e6:	d11b      	bne.n	800f320 <_dtoa_r+0xb8>
 800f2e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f2ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2f4:	4333      	orrs	r3, r6
 800f2f6:	f000 857a 	beq.w	800fdee <_dtoa_r+0xb86>
 800f2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2fc:	b963      	cbnz	r3, 800f318 <_dtoa_r+0xb0>
 800f2fe:	4b9b      	ldr	r3, [pc, #620]	; (800f56c <_dtoa_r+0x304>)
 800f300:	e024      	b.n	800f34c <_dtoa_r+0xe4>
 800f302:	4b9b      	ldr	r3, [pc, #620]	; (800f570 <_dtoa_r+0x308>)
 800f304:	9300      	str	r3, [sp, #0]
 800f306:	3308      	adds	r3, #8
 800f308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f30a:	6013      	str	r3, [r2, #0]
 800f30c:	9800      	ldr	r0, [sp, #0]
 800f30e:	b015      	add	sp, #84	; 0x54
 800f310:	ecbd 8b02 	vpop	{d8}
 800f314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f318:	4b94      	ldr	r3, [pc, #592]	; (800f56c <_dtoa_r+0x304>)
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	3303      	adds	r3, #3
 800f31e:	e7f3      	b.n	800f308 <_dtoa_r+0xa0>
 800f320:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f324:	2200      	movs	r2, #0
 800f326:	ec51 0b17 	vmov	r0, r1, d7
 800f32a:	2300      	movs	r3, #0
 800f32c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f330:	f7f1 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f334:	4680      	mov	r8, r0
 800f336:	b158      	cbz	r0, 800f350 <_dtoa_r+0xe8>
 800f338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f33a:	2301      	movs	r3, #1
 800f33c:	6013      	str	r3, [r2, #0]
 800f33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f340:	2b00      	cmp	r3, #0
 800f342:	f000 8551 	beq.w	800fde8 <_dtoa_r+0xb80>
 800f346:	488b      	ldr	r0, [pc, #556]	; (800f574 <_dtoa_r+0x30c>)
 800f348:	6018      	str	r0, [r3, #0]
 800f34a:	1e43      	subs	r3, r0, #1
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	e7dd      	b.n	800f30c <_dtoa_r+0xa4>
 800f350:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f354:	aa12      	add	r2, sp, #72	; 0x48
 800f356:	a913      	add	r1, sp, #76	; 0x4c
 800f358:	4620      	mov	r0, r4
 800f35a:	f001 f8ad 	bl	80104b8 <__d2b>
 800f35e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f362:	4683      	mov	fp, r0
 800f364:	2d00      	cmp	r5, #0
 800f366:	d07c      	beq.n	800f462 <_dtoa_r+0x1fa>
 800f368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f36a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f36e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f372:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f376:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f37a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f382:	4b7d      	ldr	r3, [pc, #500]	; (800f578 <_dtoa_r+0x310>)
 800f384:	2200      	movs	r2, #0
 800f386:	4630      	mov	r0, r6
 800f388:	4639      	mov	r1, r7
 800f38a:	f7f0 ff85 	bl	8000298 <__aeabi_dsub>
 800f38e:	a36e      	add	r3, pc, #440	; (adr r3, 800f548 <_dtoa_r+0x2e0>)
 800f390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f394:	f7f1 f938 	bl	8000608 <__aeabi_dmul>
 800f398:	a36d      	add	r3, pc, #436	; (adr r3, 800f550 <_dtoa_r+0x2e8>)
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	f7f0 ff7d 	bl	800029c <__adddf3>
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	460f      	mov	r7, r1
 800f3a8:	f7f1 f8c4 	bl	8000534 <__aeabi_i2d>
 800f3ac:	a36a      	add	r3, pc, #424	; (adr r3, 800f558 <_dtoa_r+0x2f0>)
 800f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b2:	f7f1 f929 	bl	8000608 <__aeabi_dmul>
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	4639      	mov	r1, r7
 800f3be:	f7f0 ff6d 	bl	800029c <__adddf3>
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	460f      	mov	r7, r1
 800f3c6:	f7f1 fbcf 	bl	8000b68 <__aeabi_d2iz>
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	4682      	mov	sl, r0
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	4639      	mov	r1, r7
 800f3d4:	f7f1 fb8a 	bl	8000aec <__aeabi_dcmplt>
 800f3d8:	b148      	cbz	r0, 800f3ee <_dtoa_r+0x186>
 800f3da:	4650      	mov	r0, sl
 800f3dc:	f7f1 f8aa 	bl	8000534 <__aeabi_i2d>
 800f3e0:	4632      	mov	r2, r6
 800f3e2:	463b      	mov	r3, r7
 800f3e4:	f7f1 fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3e8:	b908      	cbnz	r0, 800f3ee <_dtoa_r+0x186>
 800f3ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3ee:	f1ba 0f16 	cmp.w	sl, #22
 800f3f2:	d854      	bhi.n	800f49e <_dtoa_r+0x236>
 800f3f4:	4b61      	ldr	r3, [pc, #388]	; (800f57c <_dtoa_r+0x314>)
 800f3f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f402:	f7f1 fb73 	bl	8000aec <__aeabi_dcmplt>
 800f406:	2800      	cmp	r0, #0
 800f408:	d04b      	beq.n	800f4a2 <_dtoa_r+0x23a>
 800f40a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f40e:	2300      	movs	r3, #0
 800f410:	930e      	str	r3, [sp, #56]	; 0x38
 800f412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f414:	1b5d      	subs	r5, r3, r5
 800f416:	1e6b      	subs	r3, r5, #1
 800f418:	9304      	str	r3, [sp, #16]
 800f41a:	bf43      	ittte	mi
 800f41c:	2300      	movmi	r3, #0
 800f41e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f422:	9304      	strmi	r3, [sp, #16]
 800f424:	f04f 0800 	movpl.w	r8, #0
 800f428:	f1ba 0f00 	cmp.w	sl, #0
 800f42c:	db3b      	blt.n	800f4a6 <_dtoa_r+0x23e>
 800f42e:	9b04      	ldr	r3, [sp, #16]
 800f430:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f434:	4453      	add	r3, sl
 800f436:	9304      	str	r3, [sp, #16]
 800f438:	2300      	movs	r3, #0
 800f43a:	9306      	str	r3, [sp, #24]
 800f43c:	9b05      	ldr	r3, [sp, #20]
 800f43e:	2b09      	cmp	r3, #9
 800f440:	d869      	bhi.n	800f516 <_dtoa_r+0x2ae>
 800f442:	2b05      	cmp	r3, #5
 800f444:	bfc4      	itt	gt
 800f446:	3b04      	subgt	r3, #4
 800f448:	9305      	strgt	r3, [sp, #20]
 800f44a:	9b05      	ldr	r3, [sp, #20]
 800f44c:	f1a3 0302 	sub.w	r3, r3, #2
 800f450:	bfcc      	ite	gt
 800f452:	2500      	movgt	r5, #0
 800f454:	2501      	movle	r5, #1
 800f456:	2b03      	cmp	r3, #3
 800f458:	d869      	bhi.n	800f52e <_dtoa_r+0x2c6>
 800f45a:	e8df f003 	tbb	[pc, r3]
 800f45e:	4e2c      	.short	0x4e2c
 800f460:	5a4c      	.short	0x5a4c
 800f462:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f466:	441d      	add	r5, r3
 800f468:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f46c:	2b20      	cmp	r3, #32
 800f46e:	bfc1      	itttt	gt
 800f470:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f474:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f478:	fa09 f303 	lslgt.w	r3, r9, r3
 800f47c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f480:	bfda      	itte	le
 800f482:	f1c3 0320 	rsble	r3, r3, #32
 800f486:	fa06 f003 	lslle.w	r0, r6, r3
 800f48a:	4318      	orrgt	r0, r3
 800f48c:	f7f1 f842 	bl	8000514 <__aeabi_ui2d>
 800f490:	2301      	movs	r3, #1
 800f492:	4606      	mov	r6, r0
 800f494:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f498:	3d01      	subs	r5, #1
 800f49a:	9310      	str	r3, [sp, #64]	; 0x40
 800f49c:	e771      	b.n	800f382 <_dtoa_r+0x11a>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e7b6      	b.n	800f410 <_dtoa_r+0x1a8>
 800f4a2:	900e      	str	r0, [sp, #56]	; 0x38
 800f4a4:	e7b5      	b.n	800f412 <_dtoa_r+0x1aa>
 800f4a6:	f1ca 0300 	rsb	r3, sl, #0
 800f4aa:	9306      	str	r3, [sp, #24]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	eba8 080a 	sub.w	r8, r8, sl
 800f4b2:	930d      	str	r3, [sp, #52]	; 0x34
 800f4b4:	e7c2      	b.n	800f43c <_dtoa_r+0x1d4>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	9308      	str	r3, [sp, #32]
 800f4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	dc39      	bgt.n	800f534 <_dtoa_r+0x2cc>
 800f4c0:	f04f 0901 	mov.w	r9, #1
 800f4c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f4c8:	464b      	mov	r3, r9
 800f4ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f4ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	6042      	str	r2, [r0, #4]
 800f4d4:	2204      	movs	r2, #4
 800f4d6:	f102 0614 	add.w	r6, r2, #20
 800f4da:	429e      	cmp	r6, r3
 800f4dc:	6841      	ldr	r1, [r0, #4]
 800f4de:	d92f      	bls.n	800f540 <_dtoa_r+0x2d8>
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f000 fcc7 	bl	800fe74 <_Balloc>
 800f4e6:	9000      	str	r0, [sp, #0]
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d14b      	bne.n	800f584 <_dtoa_r+0x31c>
 800f4ec:	4b24      	ldr	r3, [pc, #144]	; (800f580 <_dtoa_r+0x318>)
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f4f4:	e6d1      	b.n	800f29a <_dtoa_r+0x32>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e7de      	b.n	800f4b8 <_dtoa_r+0x250>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	9308      	str	r3, [sp, #32]
 800f4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f500:	eb0a 0903 	add.w	r9, sl, r3
 800f504:	f109 0301 	add.w	r3, r9, #1
 800f508:	2b01      	cmp	r3, #1
 800f50a:	9301      	str	r3, [sp, #4]
 800f50c:	bfb8      	it	lt
 800f50e:	2301      	movlt	r3, #1
 800f510:	e7dd      	b.n	800f4ce <_dtoa_r+0x266>
 800f512:	2301      	movs	r3, #1
 800f514:	e7f2      	b.n	800f4fc <_dtoa_r+0x294>
 800f516:	2501      	movs	r5, #1
 800f518:	2300      	movs	r3, #0
 800f51a:	9305      	str	r3, [sp, #20]
 800f51c:	9508      	str	r5, [sp, #32]
 800f51e:	f04f 39ff 	mov.w	r9, #4294967295
 800f522:	2200      	movs	r2, #0
 800f524:	f8cd 9004 	str.w	r9, [sp, #4]
 800f528:	2312      	movs	r3, #18
 800f52a:	9209      	str	r2, [sp, #36]	; 0x24
 800f52c:	e7cf      	b.n	800f4ce <_dtoa_r+0x266>
 800f52e:	2301      	movs	r3, #1
 800f530:	9308      	str	r3, [sp, #32]
 800f532:	e7f4      	b.n	800f51e <_dtoa_r+0x2b6>
 800f534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f538:	f8cd 9004 	str.w	r9, [sp, #4]
 800f53c:	464b      	mov	r3, r9
 800f53e:	e7c6      	b.n	800f4ce <_dtoa_r+0x266>
 800f540:	3101      	adds	r1, #1
 800f542:	6041      	str	r1, [r0, #4]
 800f544:	0052      	lsls	r2, r2, #1
 800f546:	e7c6      	b.n	800f4d6 <_dtoa_r+0x26e>
 800f548:	636f4361 	.word	0x636f4361
 800f54c:	3fd287a7 	.word	0x3fd287a7
 800f550:	8b60c8b3 	.word	0x8b60c8b3
 800f554:	3fc68a28 	.word	0x3fc68a28
 800f558:	509f79fb 	.word	0x509f79fb
 800f55c:	3fd34413 	.word	0x3fd34413
 800f560:	080116f9 	.word	0x080116f9
 800f564:	08011710 	.word	0x08011710
 800f568:	7ff00000 	.word	0x7ff00000
 800f56c:	080116f5 	.word	0x080116f5
 800f570:	080116ec 	.word	0x080116ec
 800f574:	080116c9 	.word	0x080116c9
 800f578:	3ff80000 	.word	0x3ff80000
 800f57c:	08011808 	.word	0x08011808
 800f580:	0801176f 	.word	0x0801176f
 800f584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f586:	9a00      	ldr	r2, [sp, #0]
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	9b01      	ldr	r3, [sp, #4]
 800f58c:	2b0e      	cmp	r3, #14
 800f58e:	f200 80ad 	bhi.w	800f6ec <_dtoa_r+0x484>
 800f592:	2d00      	cmp	r5, #0
 800f594:	f000 80aa 	beq.w	800f6ec <_dtoa_r+0x484>
 800f598:	f1ba 0f00 	cmp.w	sl, #0
 800f59c:	dd36      	ble.n	800f60c <_dtoa_r+0x3a4>
 800f59e:	4ac3      	ldr	r2, [pc, #780]	; (800f8ac <_dtoa_r+0x644>)
 800f5a0:	f00a 030f 	and.w	r3, sl, #15
 800f5a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f5a8:	ed93 7b00 	vldr	d7, [r3]
 800f5ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f5b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f5b4:	eeb0 8a47 	vmov.f32	s16, s14
 800f5b8:	eef0 8a67 	vmov.f32	s17, s15
 800f5bc:	d016      	beq.n	800f5ec <_dtoa_r+0x384>
 800f5be:	4bbc      	ldr	r3, [pc, #752]	; (800f8b0 <_dtoa_r+0x648>)
 800f5c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f5c8:	f7f1 f948 	bl	800085c <__aeabi_ddiv>
 800f5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d0:	f007 070f 	and.w	r7, r7, #15
 800f5d4:	2503      	movs	r5, #3
 800f5d6:	4eb6      	ldr	r6, [pc, #728]	; (800f8b0 <_dtoa_r+0x648>)
 800f5d8:	b957      	cbnz	r7, 800f5f0 <_dtoa_r+0x388>
 800f5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5de:	ec53 2b18 	vmov	r2, r3, d8
 800f5e2:	f7f1 f93b 	bl	800085c <__aeabi_ddiv>
 800f5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5ea:	e029      	b.n	800f640 <_dtoa_r+0x3d8>
 800f5ec:	2502      	movs	r5, #2
 800f5ee:	e7f2      	b.n	800f5d6 <_dtoa_r+0x36e>
 800f5f0:	07f9      	lsls	r1, r7, #31
 800f5f2:	d508      	bpl.n	800f606 <_dtoa_r+0x39e>
 800f5f4:	ec51 0b18 	vmov	r0, r1, d8
 800f5f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5fc:	f7f1 f804 	bl	8000608 <__aeabi_dmul>
 800f600:	ec41 0b18 	vmov	d8, r0, r1
 800f604:	3501      	adds	r5, #1
 800f606:	107f      	asrs	r7, r7, #1
 800f608:	3608      	adds	r6, #8
 800f60a:	e7e5      	b.n	800f5d8 <_dtoa_r+0x370>
 800f60c:	f000 80a6 	beq.w	800f75c <_dtoa_r+0x4f4>
 800f610:	f1ca 0600 	rsb	r6, sl, #0
 800f614:	4ba5      	ldr	r3, [pc, #660]	; (800f8ac <_dtoa_r+0x644>)
 800f616:	4fa6      	ldr	r7, [pc, #664]	; (800f8b0 <_dtoa_r+0x648>)
 800f618:	f006 020f 	and.w	r2, r6, #15
 800f61c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f628:	f7f0 ffee 	bl	8000608 <__aeabi_dmul>
 800f62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f630:	1136      	asrs	r6, r6, #4
 800f632:	2300      	movs	r3, #0
 800f634:	2502      	movs	r5, #2
 800f636:	2e00      	cmp	r6, #0
 800f638:	f040 8085 	bne.w	800f746 <_dtoa_r+0x4de>
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1d2      	bne.n	800f5e6 <_dtoa_r+0x37e>
 800f640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f642:	2b00      	cmp	r3, #0
 800f644:	f000 808c 	beq.w	800f760 <_dtoa_r+0x4f8>
 800f648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f64c:	4b99      	ldr	r3, [pc, #612]	; (800f8b4 <_dtoa_r+0x64c>)
 800f64e:	2200      	movs	r2, #0
 800f650:	4630      	mov	r0, r6
 800f652:	4639      	mov	r1, r7
 800f654:	f7f1 fa4a 	bl	8000aec <__aeabi_dcmplt>
 800f658:	2800      	cmp	r0, #0
 800f65a:	f000 8081 	beq.w	800f760 <_dtoa_r+0x4f8>
 800f65e:	9b01      	ldr	r3, [sp, #4]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d07d      	beq.n	800f760 <_dtoa_r+0x4f8>
 800f664:	f1b9 0f00 	cmp.w	r9, #0
 800f668:	dd3c      	ble.n	800f6e4 <_dtoa_r+0x47c>
 800f66a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f66e:	9307      	str	r3, [sp, #28]
 800f670:	2200      	movs	r2, #0
 800f672:	4b91      	ldr	r3, [pc, #580]	; (800f8b8 <_dtoa_r+0x650>)
 800f674:	4630      	mov	r0, r6
 800f676:	4639      	mov	r1, r7
 800f678:	f7f0 ffc6 	bl	8000608 <__aeabi_dmul>
 800f67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f680:	3501      	adds	r5, #1
 800f682:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f686:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f68a:	4628      	mov	r0, r5
 800f68c:	f7f0 ff52 	bl	8000534 <__aeabi_i2d>
 800f690:	4632      	mov	r2, r6
 800f692:	463b      	mov	r3, r7
 800f694:	f7f0 ffb8 	bl	8000608 <__aeabi_dmul>
 800f698:	4b88      	ldr	r3, [pc, #544]	; (800f8bc <_dtoa_r+0x654>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	f7f0 fdfe 	bl	800029c <__adddf3>
 800f6a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6a8:	9303      	str	r3, [sp, #12]
 800f6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d15c      	bne.n	800f76a <_dtoa_r+0x502>
 800f6b0:	4b83      	ldr	r3, [pc, #524]	; (800f8c0 <_dtoa_r+0x658>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	f7f0 fdee 	bl	8000298 <__aeabi_dsub>
 800f6bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	460f      	mov	r7, r1
 800f6c4:	f7f1 fa30 	bl	8000b28 <__aeabi_dcmpgt>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	f040 8296 	bne.w	800fbfa <_dtoa_r+0x992>
 800f6ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6d8:	4639      	mov	r1, r7
 800f6da:	f7f1 fa07 	bl	8000aec <__aeabi_dcmplt>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	f040 8288 	bne.w	800fbf4 <_dtoa_r+0x98c>
 800f6e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f6e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f2c0 8158 	blt.w	800f9a4 <_dtoa_r+0x73c>
 800f6f4:	f1ba 0f0e 	cmp.w	sl, #14
 800f6f8:	f300 8154 	bgt.w	800f9a4 <_dtoa_r+0x73c>
 800f6fc:	4b6b      	ldr	r3, [pc, #428]	; (800f8ac <_dtoa_r+0x644>)
 800f6fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f702:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f280 80e3 	bge.w	800f8d4 <_dtoa_r+0x66c>
 800f70e:	9b01      	ldr	r3, [sp, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	f300 80df 	bgt.w	800f8d4 <_dtoa_r+0x66c>
 800f716:	f040 826d 	bne.w	800fbf4 <_dtoa_r+0x98c>
 800f71a:	4b69      	ldr	r3, [pc, #420]	; (800f8c0 <_dtoa_r+0x658>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	4640      	mov	r0, r8
 800f720:	4649      	mov	r1, r9
 800f722:	f7f0 ff71 	bl	8000608 <__aeabi_dmul>
 800f726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f72a:	f7f1 f9f3 	bl	8000b14 <__aeabi_dcmpge>
 800f72e:	9e01      	ldr	r6, [sp, #4]
 800f730:	4637      	mov	r7, r6
 800f732:	2800      	cmp	r0, #0
 800f734:	f040 8243 	bne.w	800fbbe <_dtoa_r+0x956>
 800f738:	9d00      	ldr	r5, [sp, #0]
 800f73a:	2331      	movs	r3, #49	; 0x31
 800f73c:	f805 3b01 	strb.w	r3, [r5], #1
 800f740:	f10a 0a01 	add.w	sl, sl, #1
 800f744:	e23f      	b.n	800fbc6 <_dtoa_r+0x95e>
 800f746:	07f2      	lsls	r2, r6, #31
 800f748:	d505      	bpl.n	800f756 <_dtoa_r+0x4ee>
 800f74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f74e:	f7f0 ff5b 	bl	8000608 <__aeabi_dmul>
 800f752:	3501      	adds	r5, #1
 800f754:	2301      	movs	r3, #1
 800f756:	1076      	asrs	r6, r6, #1
 800f758:	3708      	adds	r7, #8
 800f75a:	e76c      	b.n	800f636 <_dtoa_r+0x3ce>
 800f75c:	2502      	movs	r5, #2
 800f75e:	e76f      	b.n	800f640 <_dtoa_r+0x3d8>
 800f760:	9b01      	ldr	r3, [sp, #4]
 800f762:	f8cd a01c 	str.w	sl, [sp, #28]
 800f766:	930c      	str	r3, [sp, #48]	; 0x30
 800f768:	e78d      	b.n	800f686 <_dtoa_r+0x41e>
 800f76a:	9900      	ldr	r1, [sp, #0]
 800f76c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f770:	4b4e      	ldr	r3, [pc, #312]	; (800f8ac <_dtoa_r+0x644>)
 800f772:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f776:	4401      	add	r1, r0
 800f778:	9102      	str	r1, [sp, #8]
 800f77a:	9908      	ldr	r1, [sp, #32]
 800f77c:	eeb0 8a47 	vmov.f32	s16, s14
 800f780:	eef0 8a67 	vmov.f32	s17, s15
 800f784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f78c:	2900      	cmp	r1, #0
 800f78e:	d045      	beq.n	800f81c <_dtoa_r+0x5b4>
 800f790:	494c      	ldr	r1, [pc, #304]	; (800f8c4 <_dtoa_r+0x65c>)
 800f792:	2000      	movs	r0, #0
 800f794:	f7f1 f862 	bl	800085c <__aeabi_ddiv>
 800f798:	ec53 2b18 	vmov	r2, r3, d8
 800f79c:	f7f0 fd7c 	bl	8000298 <__aeabi_dsub>
 800f7a0:	9d00      	ldr	r5, [sp, #0]
 800f7a2:	ec41 0b18 	vmov	d8, r0, r1
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	f7f1 f9dd 	bl	8000b68 <__aeabi_d2iz>
 800f7ae:	900c      	str	r0, [sp, #48]	; 0x30
 800f7b0:	f7f0 fec0 	bl	8000534 <__aeabi_i2d>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	f7f0 fd6c 	bl	8000298 <__aeabi_dsub>
 800f7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7c2:	3330      	adds	r3, #48	; 0x30
 800f7c4:	f805 3b01 	strb.w	r3, [r5], #1
 800f7c8:	ec53 2b18 	vmov	r2, r3, d8
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	460f      	mov	r7, r1
 800f7d0:	f7f1 f98c 	bl	8000aec <__aeabi_dcmplt>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	d165      	bne.n	800f8a4 <_dtoa_r+0x63c>
 800f7d8:	4632      	mov	r2, r6
 800f7da:	463b      	mov	r3, r7
 800f7dc:	4935      	ldr	r1, [pc, #212]	; (800f8b4 <_dtoa_r+0x64c>)
 800f7de:	2000      	movs	r0, #0
 800f7e0:	f7f0 fd5a 	bl	8000298 <__aeabi_dsub>
 800f7e4:	ec53 2b18 	vmov	r2, r3, d8
 800f7e8:	f7f1 f980 	bl	8000aec <__aeabi_dcmplt>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	f040 80b9 	bne.w	800f964 <_dtoa_r+0x6fc>
 800f7f2:	9b02      	ldr	r3, [sp, #8]
 800f7f4:	429d      	cmp	r5, r3
 800f7f6:	f43f af75 	beq.w	800f6e4 <_dtoa_r+0x47c>
 800f7fa:	4b2f      	ldr	r3, [pc, #188]	; (800f8b8 <_dtoa_r+0x650>)
 800f7fc:	ec51 0b18 	vmov	r0, r1, d8
 800f800:	2200      	movs	r2, #0
 800f802:	f7f0 ff01 	bl	8000608 <__aeabi_dmul>
 800f806:	4b2c      	ldr	r3, [pc, #176]	; (800f8b8 <_dtoa_r+0x650>)
 800f808:	ec41 0b18 	vmov	d8, r0, r1
 800f80c:	2200      	movs	r2, #0
 800f80e:	4630      	mov	r0, r6
 800f810:	4639      	mov	r1, r7
 800f812:	f7f0 fef9 	bl	8000608 <__aeabi_dmul>
 800f816:	4606      	mov	r6, r0
 800f818:	460f      	mov	r7, r1
 800f81a:	e7c4      	b.n	800f7a6 <_dtoa_r+0x53e>
 800f81c:	ec51 0b17 	vmov	r0, r1, d7
 800f820:	f7f0 fef2 	bl	8000608 <__aeabi_dmul>
 800f824:	9b02      	ldr	r3, [sp, #8]
 800f826:	9d00      	ldr	r5, [sp, #0]
 800f828:	930c      	str	r3, [sp, #48]	; 0x30
 800f82a:	ec41 0b18 	vmov	d8, r0, r1
 800f82e:	4639      	mov	r1, r7
 800f830:	4630      	mov	r0, r6
 800f832:	f7f1 f999 	bl	8000b68 <__aeabi_d2iz>
 800f836:	9011      	str	r0, [sp, #68]	; 0x44
 800f838:	f7f0 fe7c 	bl	8000534 <__aeabi_i2d>
 800f83c:	4602      	mov	r2, r0
 800f83e:	460b      	mov	r3, r1
 800f840:	4630      	mov	r0, r6
 800f842:	4639      	mov	r1, r7
 800f844:	f7f0 fd28 	bl	8000298 <__aeabi_dsub>
 800f848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f84a:	3330      	adds	r3, #48	; 0x30
 800f84c:	f805 3b01 	strb.w	r3, [r5], #1
 800f850:	9b02      	ldr	r3, [sp, #8]
 800f852:	429d      	cmp	r5, r3
 800f854:	4606      	mov	r6, r0
 800f856:	460f      	mov	r7, r1
 800f858:	f04f 0200 	mov.w	r2, #0
 800f85c:	d134      	bne.n	800f8c8 <_dtoa_r+0x660>
 800f85e:	4b19      	ldr	r3, [pc, #100]	; (800f8c4 <_dtoa_r+0x65c>)
 800f860:	ec51 0b18 	vmov	r0, r1, d8
 800f864:	f7f0 fd1a 	bl	800029c <__adddf3>
 800f868:	4602      	mov	r2, r0
 800f86a:	460b      	mov	r3, r1
 800f86c:	4630      	mov	r0, r6
 800f86e:	4639      	mov	r1, r7
 800f870:	f7f1 f95a 	bl	8000b28 <__aeabi_dcmpgt>
 800f874:	2800      	cmp	r0, #0
 800f876:	d175      	bne.n	800f964 <_dtoa_r+0x6fc>
 800f878:	ec53 2b18 	vmov	r2, r3, d8
 800f87c:	4911      	ldr	r1, [pc, #68]	; (800f8c4 <_dtoa_r+0x65c>)
 800f87e:	2000      	movs	r0, #0
 800f880:	f7f0 fd0a 	bl	8000298 <__aeabi_dsub>
 800f884:	4602      	mov	r2, r0
 800f886:	460b      	mov	r3, r1
 800f888:	4630      	mov	r0, r6
 800f88a:	4639      	mov	r1, r7
 800f88c:	f7f1 f92e 	bl	8000aec <__aeabi_dcmplt>
 800f890:	2800      	cmp	r0, #0
 800f892:	f43f af27 	beq.w	800f6e4 <_dtoa_r+0x47c>
 800f896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f898:	1e6b      	subs	r3, r5, #1
 800f89a:	930c      	str	r3, [sp, #48]	; 0x30
 800f89c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f8a0:	2b30      	cmp	r3, #48	; 0x30
 800f8a2:	d0f8      	beq.n	800f896 <_dtoa_r+0x62e>
 800f8a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f8a8:	e04a      	b.n	800f940 <_dtoa_r+0x6d8>
 800f8aa:	bf00      	nop
 800f8ac:	08011808 	.word	0x08011808
 800f8b0:	080117e0 	.word	0x080117e0
 800f8b4:	3ff00000 	.word	0x3ff00000
 800f8b8:	40240000 	.word	0x40240000
 800f8bc:	401c0000 	.word	0x401c0000
 800f8c0:	40140000 	.word	0x40140000
 800f8c4:	3fe00000 	.word	0x3fe00000
 800f8c8:	4baf      	ldr	r3, [pc, #700]	; (800fb88 <_dtoa_r+0x920>)
 800f8ca:	f7f0 fe9d 	bl	8000608 <__aeabi_dmul>
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	e7ac      	b.n	800f82e <_dtoa_r+0x5c6>
 800f8d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f8d8:	9d00      	ldr	r5, [sp, #0]
 800f8da:	4642      	mov	r2, r8
 800f8dc:	464b      	mov	r3, r9
 800f8de:	4630      	mov	r0, r6
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	f7f0 ffbb 	bl	800085c <__aeabi_ddiv>
 800f8e6:	f7f1 f93f 	bl	8000b68 <__aeabi_d2iz>
 800f8ea:	9002      	str	r0, [sp, #8]
 800f8ec:	f7f0 fe22 	bl	8000534 <__aeabi_i2d>
 800f8f0:	4642      	mov	r2, r8
 800f8f2:	464b      	mov	r3, r9
 800f8f4:	f7f0 fe88 	bl	8000608 <__aeabi_dmul>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	4639      	mov	r1, r7
 800f900:	f7f0 fcca 	bl	8000298 <__aeabi_dsub>
 800f904:	9e02      	ldr	r6, [sp, #8]
 800f906:	9f01      	ldr	r7, [sp, #4]
 800f908:	3630      	adds	r6, #48	; 0x30
 800f90a:	f805 6b01 	strb.w	r6, [r5], #1
 800f90e:	9e00      	ldr	r6, [sp, #0]
 800f910:	1bae      	subs	r6, r5, r6
 800f912:	42b7      	cmp	r7, r6
 800f914:	4602      	mov	r2, r0
 800f916:	460b      	mov	r3, r1
 800f918:	d137      	bne.n	800f98a <_dtoa_r+0x722>
 800f91a:	f7f0 fcbf 	bl	800029c <__adddf3>
 800f91e:	4642      	mov	r2, r8
 800f920:	464b      	mov	r3, r9
 800f922:	4606      	mov	r6, r0
 800f924:	460f      	mov	r7, r1
 800f926:	f7f1 f8ff 	bl	8000b28 <__aeabi_dcmpgt>
 800f92a:	b9c8      	cbnz	r0, 800f960 <_dtoa_r+0x6f8>
 800f92c:	4642      	mov	r2, r8
 800f92e:	464b      	mov	r3, r9
 800f930:	4630      	mov	r0, r6
 800f932:	4639      	mov	r1, r7
 800f934:	f7f1 f8d0 	bl	8000ad8 <__aeabi_dcmpeq>
 800f938:	b110      	cbz	r0, 800f940 <_dtoa_r+0x6d8>
 800f93a:	9b02      	ldr	r3, [sp, #8]
 800f93c:	07d9      	lsls	r1, r3, #31
 800f93e:	d40f      	bmi.n	800f960 <_dtoa_r+0x6f8>
 800f940:	4620      	mov	r0, r4
 800f942:	4659      	mov	r1, fp
 800f944:	f000 fad6 	bl	800fef4 <_Bfree>
 800f948:	2300      	movs	r3, #0
 800f94a:	702b      	strb	r3, [r5, #0]
 800f94c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f94e:	f10a 0001 	add.w	r0, sl, #1
 800f952:	6018      	str	r0, [r3, #0]
 800f954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f956:	2b00      	cmp	r3, #0
 800f958:	f43f acd8 	beq.w	800f30c <_dtoa_r+0xa4>
 800f95c:	601d      	str	r5, [r3, #0]
 800f95e:	e4d5      	b.n	800f30c <_dtoa_r+0xa4>
 800f960:	f8cd a01c 	str.w	sl, [sp, #28]
 800f964:	462b      	mov	r3, r5
 800f966:	461d      	mov	r5, r3
 800f968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f96c:	2a39      	cmp	r2, #57	; 0x39
 800f96e:	d108      	bne.n	800f982 <_dtoa_r+0x71a>
 800f970:	9a00      	ldr	r2, [sp, #0]
 800f972:	429a      	cmp	r2, r3
 800f974:	d1f7      	bne.n	800f966 <_dtoa_r+0x6fe>
 800f976:	9a07      	ldr	r2, [sp, #28]
 800f978:	9900      	ldr	r1, [sp, #0]
 800f97a:	3201      	adds	r2, #1
 800f97c:	9207      	str	r2, [sp, #28]
 800f97e:	2230      	movs	r2, #48	; 0x30
 800f980:	700a      	strb	r2, [r1, #0]
 800f982:	781a      	ldrb	r2, [r3, #0]
 800f984:	3201      	adds	r2, #1
 800f986:	701a      	strb	r2, [r3, #0]
 800f988:	e78c      	b.n	800f8a4 <_dtoa_r+0x63c>
 800f98a:	4b7f      	ldr	r3, [pc, #508]	; (800fb88 <_dtoa_r+0x920>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	f7f0 fe3b 	bl	8000608 <__aeabi_dmul>
 800f992:	2200      	movs	r2, #0
 800f994:	2300      	movs	r3, #0
 800f996:	4606      	mov	r6, r0
 800f998:	460f      	mov	r7, r1
 800f99a:	f7f1 f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d09b      	beq.n	800f8da <_dtoa_r+0x672>
 800f9a2:	e7cd      	b.n	800f940 <_dtoa_r+0x6d8>
 800f9a4:	9a08      	ldr	r2, [sp, #32]
 800f9a6:	2a00      	cmp	r2, #0
 800f9a8:	f000 80c4 	beq.w	800fb34 <_dtoa_r+0x8cc>
 800f9ac:	9a05      	ldr	r2, [sp, #20]
 800f9ae:	2a01      	cmp	r2, #1
 800f9b0:	f300 80a8 	bgt.w	800fb04 <_dtoa_r+0x89c>
 800f9b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f9b6:	2a00      	cmp	r2, #0
 800f9b8:	f000 80a0 	beq.w	800fafc <_dtoa_r+0x894>
 800f9bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f9c0:	9e06      	ldr	r6, [sp, #24]
 800f9c2:	4645      	mov	r5, r8
 800f9c4:	9a04      	ldr	r2, [sp, #16]
 800f9c6:	2101      	movs	r1, #1
 800f9c8:	441a      	add	r2, r3
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	4498      	add	r8, r3
 800f9ce:	9204      	str	r2, [sp, #16]
 800f9d0:	f000 fb4c 	bl	801006c <__i2b>
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	2d00      	cmp	r5, #0
 800f9d8:	dd0b      	ble.n	800f9f2 <_dtoa_r+0x78a>
 800f9da:	9b04      	ldr	r3, [sp, #16]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	dd08      	ble.n	800f9f2 <_dtoa_r+0x78a>
 800f9e0:	42ab      	cmp	r3, r5
 800f9e2:	9a04      	ldr	r2, [sp, #16]
 800f9e4:	bfa8      	it	ge
 800f9e6:	462b      	movge	r3, r5
 800f9e8:	eba8 0803 	sub.w	r8, r8, r3
 800f9ec:	1aed      	subs	r5, r5, r3
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	9304      	str	r3, [sp, #16]
 800f9f2:	9b06      	ldr	r3, [sp, #24]
 800f9f4:	b1fb      	cbz	r3, 800fa36 <_dtoa_r+0x7ce>
 800f9f6:	9b08      	ldr	r3, [sp, #32]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f000 809f 	beq.w	800fb3c <_dtoa_r+0x8d4>
 800f9fe:	2e00      	cmp	r6, #0
 800fa00:	dd11      	ble.n	800fa26 <_dtoa_r+0x7be>
 800fa02:	4639      	mov	r1, r7
 800fa04:	4632      	mov	r2, r6
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 fbec 	bl	80101e4 <__pow5mult>
 800fa0c:	465a      	mov	r2, fp
 800fa0e:	4601      	mov	r1, r0
 800fa10:	4607      	mov	r7, r0
 800fa12:	4620      	mov	r0, r4
 800fa14:	f000 fb40 	bl	8010098 <__multiply>
 800fa18:	4659      	mov	r1, fp
 800fa1a:	9007      	str	r0, [sp, #28]
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f000 fa69 	bl	800fef4 <_Bfree>
 800fa22:	9b07      	ldr	r3, [sp, #28]
 800fa24:	469b      	mov	fp, r3
 800fa26:	9b06      	ldr	r3, [sp, #24]
 800fa28:	1b9a      	subs	r2, r3, r6
 800fa2a:	d004      	beq.n	800fa36 <_dtoa_r+0x7ce>
 800fa2c:	4659      	mov	r1, fp
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f000 fbd8 	bl	80101e4 <__pow5mult>
 800fa34:	4683      	mov	fp, r0
 800fa36:	2101      	movs	r1, #1
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f000 fb17 	bl	801006c <__i2b>
 800fa3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	4606      	mov	r6, r0
 800fa44:	dd7c      	ble.n	800fb40 <_dtoa_r+0x8d8>
 800fa46:	461a      	mov	r2, r3
 800fa48:	4601      	mov	r1, r0
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	f000 fbca 	bl	80101e4 <__pow5mult>
 800fa50:	9b05      	ldr	r3, [sp, #20]
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	4606      	mov	r6, r0
 800fa56:	dd76      	ble.n	800fb46 <_dtoa_r+0x8de>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	9306      	str	r3, [sp, #24]
 800fa5c:	6933      	ldr	r3, [r6, #16]
 800fa5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fa62:	6918      	ldr	r0, [r3, #16]
 800fa64:	f000 fab2 	bl	800ffcc <__hi0bits>
 800fa68:	f1c0 0020 	rsb	r0, r0, #32
 800fa6c:	9b04      	ldr	r3, [sp, #16]
 800fa6e:	4418      	add	r0, r3
 800fa70:	f010 001f 	ands.w	r0, r0, #31
 800fa74:	f000 8086 	beq.w	800fb84 <_dtoa_r+0x91c>
 800fa78:	f1c0 0320 	rsb	r3, r0, #32
 800fa7c:	2b04      	cmp	r3, #4
 800fa7e:	dd7f      	ble.n	800fb80 <_dtoa_r+0x918>
 800fa80:	f1c0 001c 	rsb	r0, r0, #28
 800fa84:	9b04      	ldr	r3, [sp, #16]
 800fa86:	4403      	add	r3, r0
 800fa88:	4480      	add	r8, r0
 800fa8a:	4405      	add	r5, r0
 800fa8c:	9304      	str	r3, [sp, #16]
 800fa8e:	f1b8 0f00 	cmp.w	r8, #0
 800fa92:	dd05      	ble.n	800faa0 <_dtoa_r+0x838>
 800fa94:	4659      	mov	r1, fp
 800fa96:	4642      	mov	r2, r8
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f000 fbfd 	bl	8010298 <__lshift>
 800fa9e:	4683      	mov	fp, r0
 800faa0:	9b04      	ldr	r3, [sp, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	dd05      	ble.n	800fab2 <_dtoa_r+0x84a>
 800faa6:	4631      	mov	r1, r6
 800faa8:	461a      	mov	r2, r3
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 fbf4 	bl	8010298 <__lshift>
 800fab0:	4606      	mov	r6, r0
 800fab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d069      	beq.n	800fb8c <_dtoa_r+0x924>
 800fab8:	4631      	mov	r1, r6
 800faba:	4658      	mov	r0, fp
 800fabc:	f000 fc58 	bl	8010370 <__mcmp>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	da63      	bge.n	800fb8c <_dtoa_r+0x924>
 800fac4:	2300      	movs	r3, #0
 800fac6:	4659      	mov	r1, fp
 800fac8:	220a      	movs	r2, #10
 800faca:	4620      	mov	r0, r4
 800facc:	f000 fa34 	bl	800ff38 <__multadd>
 800fad0:	9b08      	ldr	r3, [sp, #32]
 800fad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fad6:	4683      	mov	fp, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 818f 	beq.w	800fdfc <_dtoa_r+0xb94>
 800fade:	4639      	mov	r1, r7
 800fae0:	2300      	movs	r3, #0
 800fae2:	220a      	movs	r2, #10
 800fae4:	4620      	mov	r0, r4
 800fae6:	f000 fa27 	bl	800ff38 <__multadd>
 800faea:	f1b9 0f00 	cmp.w	r9, #0
 800faee:	4607      	mov	r7, r0
 800faf0:	f300 808e 	bgt.w	800fc10 <_dtoa_r+0x9a8>
 800faf4:	9b05      	ldr	r3, [sp, #20]
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	dc50      	bgt.n	800fb9c <_dtoa_r+0x934>
 800fafa:	e089      	b.n	800fc10 <_dtoa_r+0x9a8>
 800fafc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fafe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fb02:	e75d      	b.n	800f9c0 <_dtoa_r+0x758>
 800fb04:	9b01      	ldr	r3, [sp, #4]
 800fb06:	1e5e      	subs	r6, r3, #1
 800fb08:	9b06      	ldr	r3, [sp, #24]
 800fb0a:	42b3      	cmp	r3, r6
 800fb0c:	bfbf      	itttt	lt
 800fb0e:	9b06      	ldrlt	r3, [sp, #24]
 800fb10:	9606      	strlt	r6, [sp, #24]
 800fb12:	1af2      	sublt	r2, r6, r3
 800fb14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fb16:	bfb6      	itet	lt
 800fb18:	189b      	addlt	r3, r3, r2
 800fb1a:	1b9e      	subge	r6, r3, r6
 800fb1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fb1e:	9b01      	ldr	r3, [sp, #4]
 800fb20:	bfb8      	it	lt
 800fb22:	2600      	movlt	r6, #0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	bfb5      	itete	lt
 800fb28:	eba8 0503 	sublt.w	r5, r8, r3
 800fb2c:	9b01      	ldrge	r3, [sp, #4]
 800fb2e:	2300      	movlt	r3, #0
 800fb30:	4645      	movge	r5, r8
 800fb32:	e747      	b.n	800f9c4 <_dtoa_r+0x75c>
 800fb34:	9e06      	ldr	r6, [sp, #24]
 800fb36:	9f08      	ldr	r7, [sp, #32]
 800fb38:	4645      	mov	r5, r8
 800fb3a:	e74c      	b.n	800f9d6 <_dtoa_r+0x76e>
 800fb3c:	9a06      	ldr	r2, [sp, #24]
 800fb3e:	e775      	b.n	800fa2c <_dtoa_r+0x7c4>
 800fb40:	9b05      	ldr	r3, [sp, #20]
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	dc18      	bgt.n	800fb78 <_dtoa_r+0x910>
 800fb46:	9b02      	ldr	r3, [sp, #8]
 800fb48:	b9b3      	cbnz	r3, 800fb78 <_dtoa_r+0x910>
 800fb4a:	9b03      	ldr	r3, [sp, #12]
 800fb4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb50:	b9a3      	cbnz	r3, 800fb7c <_dtoa_r+0x914>
 800fb52:	9b03      	ldr	r3, [sp, #12]
 800fb54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb58:	0d1b      	lsrs	r3, r3, #20
 800fb5a:	051b      	lsls	r3, r3, #20
 800fb5c:	b12b      	cbz	r3, 800fb6a <_dtoa_r+0x902>
 800fb5e:	9b04      	ldr	r3, [sp, #16]
 800fb60:	3301      	adds	r3, #1
 800fb62:	9304      	str	r3, [sp, #16]
 800fb64:	f108 0801 	add.w	r8, r8, #1
 800fb68:	2301      	movs	r3, #1
 800fb6a:	9306      	str	r3, [sp, #24]
 800fb6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f47f af74 	bne.w	800fa5c <_dtoa_r+0x7f4>
 800fb74:	2001      	movs	r0, #1
 800fb76:	e779      	b.n	800fa6c <_dtoa_r+0x804>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	e7f6      	b.n	800fb6a <_dtoa_r+0x902>
 800fb7c:	9b02      	ldr	r3, [sp, #8]
 800fb7e:	e7f4      	b.n	800fb6a <_dtoa_r+0x902>
 800fb80:	d085      	beq.n	800fa8e <_dtoa_r+0x826>
 800fb82:	4618      	mov	r0, r3
 800fb84:	301c      	adds	r0, #28
 800fb86:	e77d      	b.n	800fa84 <_dtoa_r+0x81c>
 800fb88:	40240000 	.word	0x40240000
 800fb8c:	9b01      	ldr	r3, [sp, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	dc38      	bgt.n	800fc04 <_dtoa_r+0x99c>
 800fb92:	9b05      	ldr	r3, [sp, #20]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	dd35      	ble.n	800fc04 <_dtoa_r+0x99c>
 800fb98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fb9c:	f1b9 0f00 	cmp.w	r9, #0
 800fba0:	d10d      	bne.n	800fbbe <_dtoa_r+0x956>
 800fba2:	4631      	mov	r1, r6
 800fba4:	464b      	mov	r3, r9
 800fba6:	2205      	movs	r2, #5
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f000 f9c5 	bl	800ff38 <__multadd>
 800fbae:	4601      	mov	r1, r0
 800fbb0:	4606      	mov	r6, r0
 800fbb2:	4658      	mov	r0, fp
 800fbb4:	f000 fbdc 	bl	8010370 <__mcmp>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	f73f adbd 	bgt.w	800f738 <_dtoa_r+0x4d0>
 800fbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbc0:	9d00      	ldr	r5, [sp, #0]
 800fbc2:	ea6f 0a03 	mvn.w	sl, r3
 800fbc6:	f04f 0800 	mov.w	r8, #0
 800fbca:	4631      	mov	r1, r6
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f000 f991 	bl	800fef4 <_Bfree>
 800fbd2:	2f00      	cmp	r7, #0
 800fbd4:	f43f aeb4 	beq.w	800f940 <_dtoa_r+0x6d8>
 800fbd8:	f1b8 0f00 	cmp.w	r8, #0
 800fbdc:	d005      	beq.n	800fbea <_dtoa_r+0x982>
 800fbde:	45b8      	cmp	r8, r7
 800fbe0:	d003      	beq.n	800fbea <_dtoa_r+0x982>
 800fbe2:	4641      	mov	r1, r8
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 f985 	bl	800fef4 <_Bfree>
 800fbea:	4639      	mov	r1, r7
 800fbec:	4620      	mov	r0, r4
 800fbee:	f000 f981 	bl	800fef4 <_Bfree>
 800fbf2:	e6a5      	b.n	800f940 <_dtoa_r+0x6d8>
 800fbf4:	2600      	movs	r6, #0
 800fbf6:	4637      	mov	r7, r6
 800fbf8:	e7e1      	b.n	800fbbe <_dtoa_r+0x956>
 800fbfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fbfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fc00:	4637      	mov	r7, r6
 800fc02:	e599      	b.n	800f738 <_dtoa_r+0x4d0>
 800fc04:	9b08      	ldr	r3, [sp, #32]
 800fc06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	f000 80fd 	beq.w	800fe0a <_dtoa_r+0xba2>
 800fc10:	2d00      	cmp	r5, #0
 800fc12:	dd05      	ble.n	800fc20 <_dtoa_r+0x9b8>
 800fc14:	4639      	mov	r1, r7
 800fc16:	462a      	mov	r2, r5
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 fb3d 	bl	8010298 <__lshift>
 800fc1e:	4607      	mov	r7, r0
 800fc20:	9b06      	ldr	r3, [sp, #24]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d05c      	beq.n	800fce0 <_dtoa_r+0xa78>
 800fc26:	6879      	ldr	r1, [r7, #4]
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f000 f923 	bl	800fe74 <_Balloc>
 800fc2e:	4605      	mov	r5, r0
 800fc30:	b928      	cbnz	r0, 800fc3e <_dtoa_r+0x9d6>
 800fc32:	4b80      	ldr	r3, [pc, #512]	; (800fe34 <_dtoa_r+0xbcc>)
 800fc34:	4602      	mov	r2, r0
 800fc36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fc3a:	f7ff bb2e 	b.w	800f29a <_dtoa_r+0x32>
 800fc3e:	693a      	ldr	r2, [r7, #16]
 800fc40:	3202      	adds	r2, #2
 800fc42:	0092      	lsls	r2, r2, #2
 800fc44:	f107 010c 	add.w	r1, r7, #12
 800fc48:	300c      	adds	r0, #12
 800fc4a:	f000 f905 	bl	800fe58 <memcpy>
 800fc4e:	2201      	movs	r2, #1
 800fc50:	4629      	mov	r1, r5
 800fc52:	4620      	mov	r0, r4
 800fc54:	f000 fb20 	bl	8010298 <__lshift>
 800fc58:	9b00      	ldr	r3, [sp, #0]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	9301      	str	r3, [sp, #4]
 800fc5e:	9b00      	ldr	r3, [sp, #0]
 800fc60:	444b      	add	r3, r9
 800fc62:	9307      	str	r3, [sp, #28]
 800fc64:	9b02      	ldr	r3, [sp, #8]
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	46b8      	mov	r8, r7
 800fc6c:	9306      	str	r3, [sp, #24]
 800fc6e:	4607      	mov	r7, r0
 800fc70:	9b01      	ldr	r3, [sp, #4]
 800fc72:	4631      	mov	r1, r6
 800fc74:	3b01      	subs	r3, #1
 800fc76:	4658      	mov	r0, fp
 800fc78:	9302      	str	r3, [sp, #8]
 800fc7a:	f7ff fa69 	bl	800f150 <quorem>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	3330      	adds	r3, #48	; 0x30
 800fc82:	9004      	str	r0, [sp, #16]
 800fc84:	4641      	mov	r1, r8
 800fc86:	4658      	mov	r0, fp
 800fc88:	9308      	str	r3, [sp, #32]
 800fc8a:	f000 fb71 	bl	8010370 <__mcmp>
 800fc8e:	463a      	mov	r2, r7
 800fc90:	4681      	mov	r9, r0
 800fc92:	4631      	mov	r1, r6
 800fc94:	4620      	mov	r0, r4
 800fc96:	f000 fb87 	bl	80103a8 <__mdiff>
 800fc9a:	68c2      	ldr	r2, [r0, #12]
 800fc9c:	9b08      	ldr	r3, [sp, #32]
 800fc9e:	4605      	mov	r5, r0
 800fca0:	bb02      	cbnz	r2, 800fce4 <_dtoa_r+0xa7c>
 800fca2:	4601      	mov	r1, r0
 800fca4:	4658      	mov	r0, fp
 800fca6:	f000 fb63 	bl	8010370 <__mcmp>
 800fcaa:	9b08      	ldr	r3, [sp, #32]
 800fcac:	4602      	mov	r2, r0
 800fcae:	4629      	mov	r1, r5
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fcb6:	f000 f91d 	bl	800fef4 <_Bfree>
 800fcba:	9b05      	ldr	r3, [sp, #20]
 800fcbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcbe:	9d01      	ldr	r5, [sp, #4]
 800fcc0:	ea43 0102 	orr.w	r1, r3, r2
 800fcc4:	9b06      	ldr	r3, [sp, #24]
 800fcc6:	430b      	orrs	r3, r1
 800fcc8:	9b08      	ldr	r3, [sp, #32]
 800fcca:	d10d      	bne.n	800fce8 <_dtoa_r+0xa80>
 800fccc:	2b39      	cmp	r3, #57	; 0x39
 800fcce:	d029      	beq.n	800fd24 <_dtoa_r+0xabc>
 800fcd0:	f1b9 0f00 	cmp.w	r9, #0
 800fcd4:	dd01      	ble.n	800fcda <_dtoa_r+0xa72>
 800fcd6:	9b04      	ldr	r3, [sp, #16]
 800fcd8:	3331      	adds	r3, #49	; 0x31
 800fcda:	9a02      	ldr	r2, [sp, #8]
 800fcdc:	7013      	strb	r3, [r2, #0]
 800fcde:	e774      	b.n	800fbca <_dtoa_r+0x962>
 800fce0:	4638      	mov	r0, r7
 800fce2:	e7b9      	b.n	800fc58 <_dtoa_r+0x9f0>
 800fce4:	2201      	movs	r2, #1
 800fce6:	e7e2      	b.n	800fcae <_dtoa_r+0xa46>
 800fce8:	f1b9 0f00 	cmp.w	r9, #0
 800fcec:	db06      	blt.n	800fcfc <_dtoa_r+0xa94>
 800fcee:	9905      	ldr	r1, [sp, #20]
 800fcf0:	ea41 0909 	orr.w	r9, r1, r9
 800fcf4:	9906      	ldr	r1, [sp, #24]
 800fcf6:	ea59 0101 	orrs.w	r1, r9, r1
 800fcfa:	d120      	bne.n	800fd3e <_dtoa_r+0xad6>
 800fcfc:	2a00      	cmp	r2, #0
 800fcfe:	ddec      	ble.n	800fcda <_dtoa_r+0xa72>
 800fd00:	4659      	mov	r1, fp
 800fd02:	2201      	movs	r2, #1
 800fd04:	4620      	mov	r0, r4
 800fd06:	9301      	str	r3, [sp, #4]
 800fd08:	f000 fac6 	bl	8010298 <__lshift>
 800fd0c:	4631      	mov	r1, r6
 800fd0e:	4683      	mov	fp, r0
 800fd10:	f000 fb2e 	bl	8010370 <__mcmp>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	9b01      	ldr	r3, [sp, #4]
 800fd18:	dc02      	bgt.n	800fd20 <_dtoa_r+0xab8>
 800fd1a:	d1de      	bne.n	800fcda <_dtoa_r+0xa72>
 800fd1c:	07da      	lsls	r2, r3, #31
 800fd1e:	d5dc      	bpl.n	800fcda <_dtoa_r+0xa72>
 800fd20:	2b39      	cmp	r3, #57	; 0x39
 800fd22:	d1d8      	bne.n	800fcd6 <_dtoa_r+0xa6e>
 800fd24:	9a02      	ldr	r2, [sp, #8]
 800fd26:	2339      	movs	r3, #57	; 0x39
 800fd28:	7013      	strb	r3, [r2, #0]
 800fd2a:	462b      	mov	r3, r5
 800fd2c:	461d      	mov	r5, r3
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fd34:	2a39      	cmp	r2, #57	; 0x39
 800fd36:	d050      	beq.n	800fdda <_dtoa_r+0xb72>
 800fd38:	3201      	adds	r2, #1
 800fd3a:	701a      	strb	r2, [r3, #0]
 800fd3c:	e745      	b.n	800fbca <_dtoa_r+0x962>
 800fd3e:	2a00      	cmp	r2, #0
 800fd40:	dd03      	ble.n	800fd4a <_dtoa_r+0xae2>
 800fd42:	2b39      	cmp	r3, #57	; 0x39
 800fd44:	d0ee      	beq.n	800fd24 <_dtoa_r+0xabc>
 800fd46:	3301      	adds	r3, #1
 800fd48:	e7c7      	b.n	800fcda <_dtoa_r+0xa72>
 800fd4a:	9a01      	ldr	r2, [sp, #4]
 800fd4c:	9907      	ldr	r1, [sp, #28]
 800fd4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fd52:	428a      	cmp	r2, r1
 800fd54:	d02a      	beq.n	800fdac <_dtoa_r+0xb44>
 800fd56:	4659      	mov	r1, fp
 800fd58:	2300      	movs	r3, #0
 800fd5a:	220a      	movs	r2, #10
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f000 f8eb 	bl	800ff38 <__multadd>
 800fd62:	45b8      	cmp	r8, r7
 800fd64:	4683      	mov	fp, r0
 800fd66:	f04f 0300 	mov.w	r3, #0
 800fd6a:	f04f 020a 	mov.w	r2, #10
 800fd6e:	4641      	mov	r1, r8
 800fd70:	4620      	mov	r0, r4
 800fd72:	d107      	bne.n	800fd84 <_dtoa_r+0xb1c>
 800fd74:	f000 f8e0 	bl	800ff38 <__multadd>
 800fd78:	4680      	mov	r8, r0
 800fd7a:	4607      	mov	r7, r0
 800fd7c:	9b01      	ldr	r3, [sp, #4]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	9301      	str	r3, [sp, #4]
 800fd82:	e775      	b.n	800fc70 <_dtoa_r+0xa08>
 800fd84:	f000 f8d8 	bl	800ff38 <__multadd>
 800fd88:	4639      	mov	r1, r7
 800fd8a:	4680      	mov	r8, r0
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	220a      	movs	r2, #10
 800fd90:	4620      	mov	r0, r4
 800fd92:	f000 f8d1 	bl	800ff38 <__multadd>
 800fd96:	4607      	mov	r7, r0
 800fd98:	e7f0      	b.n	800fd7c <_dtoa_r+0xb14>
 800fd9a:	f1b9 0f00 	cmp.w	r9, #0
 800fd9e:	9a00      	ldr	r2, [sp, #0]
 800fda0:	bfcc      	ite	gt
 800fda2:	464d      	movgt	r5, r9
 800fda4:	2501      	movle	r5, #1
 800fda6:	4415      	add	r5, r2
 800fda8:	f04f 0800 	mov.w	r8, #0
 800fdac:	4659      	mov	r1, fp
 800fdae:	2201      	movs	r2, #1
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	9301      	str	r3, [sp, #4]
 800fdb4:	f000 fa70 	bl	8010298 <__lshift>
 800fdb8:	4631      	mov	r1, r6
 800fdba:	4683      	mov	fp, r0
 800fdbc:	f000 fad8 	bl	8010370 <__mcmp>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	dcb2      	bgt.n	800fd2a <_dtoa_r+0xac2>
 800fdc4:	d102      	bne.n	800fdcc <_dtoa_r+0xb64>
 800fdc6:	9b01      	ldr	r3, [sp, #4]
 800fdc8:	07db      	lsls	r3, r3, #31
 800fdca:	d4ae      	bmi.n	800fd2a <_dtoa_r+0xac2>
 800fdcc:	462b      	mov	r3, r5
 800fdce:	461d      	mov	r5, r3
 800fdd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fdd4:	2a30      	cmp	r2, #48	; 0x30
 800fdd6:	d0fa      	beq.n	800fdce <_dtoa_r+0xb66>
 800fdd8:	e6f7      	b.n	800fbca <_dtoa_r+0x962>
 800fdda:	9a00      	ldr	r2, [sp, #0]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d1a5      	bne.n	800fd2c <_dtoa_r+0xac4>
 800fde0:	f10a 0a01 	add.w	sl, sl, #1
 800fde4:	2331      	movs	r3, #49	; 0x31
 800fde6:	e779      	b.n	800fcdc <_dtoa_r+0xa74>
 800fde8:	4b13      	ldr	r3, [pc, #76]	; (800fe38 <_dtoa_r+0xbd0>)
 800fdea:	f7ff baaf 	b.w	800f34c <_dtoa_r+0xe4>
 800fdee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f47f aa86 	bne.w	800f302 <_dtoa_r+0x9a>
 800fdf6:	4b11      	ldr	r3, [pc, #68]	; (800fe3c <_dtoa_r+0xbd4>)
 800fdf8:	f7ff baa8 	b.w	800f34c <_dtoa_r+0xe4>
 800fdfc:	f1b9 0f00 	cmp.w	r9, #0
 800fe00:	dc03      	bgt.n	800fe0a <_dtoa_r+0xba2>
 800fe02:	9b05      	ldr	r3, [sp, #20]
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	f73f aec9 	bgt.w	800fb9c <_dtoa_r+0x934>
 800fe0a:	9d00      	ldr	r5, [sp, #0]
 800fe0c:	4631      	mov	r1, r6
 800fe0e:	4658      	mov	r0, fp
 800fe10:	f7ff f99e 	bl	800f150 <quorem>
 800fe14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fe18:	f805 3b01 	strb.w	r3, [r5], #1
 800fe1c:	9a00      	ldr	r2, [sp, #0]
 800fe1e:	1aaa      	subs	r2, r5, r2
 800fe20:	4591      	cmp	r9, r2
 800fe22:	ddba      	ble.n	800fd9a <_dtoa_r+0xb32>
 800fe24:	4659      	mov	r1, fp
 800fe26:	2300      	movs	r3, #0
 800fe28:	220a      	movs	r2, #10
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f000 f884 	bl	800ff38 <__multadd>
 800fe30:	4683      	mov	fp, r0
 800fe32:	e7eb      	b.n	800fe0c <_dtoa_r+0xba4>
 800fe34:	0801176f 	.word	0x0801176f
 800fe38:	080116c8 	.word	0x080116c8
 800fe3c:	080116ec 	.word	0x080116ec

0800fe40 <_localeconv_r>:
 800fe40:	4800      	ldr	r0, [pc, #0]	; (800fe44 <_localeconv_r+0x4>)
 800fe42:	4770      	bx	lr
 800fe44:	200002d4 	.word	0x200002d4

0800fe48 <malloc>:
 800fe48:	4b02      	ldr	r3, [pc, #8]	; (800fe54 <malloc+0xc>)
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	6818      	ldr	r0, [r3, #0]
 800fe4e:	f000 bbef 	b.w	8010630 <_malloc_r>
 800fe52:	bf00      	nop
 800fe54:	20000180 	.word	0x20000180

0800fe58 <memcpy>:
 800fe58:	440a      	add	r2, r1
 800fe5a:	4291      	cmp	r1, r2
 800fe5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe60:	d100      	bne.n	800fe64 <memcpy+0xc>
 800fe62:	4770      	bx	lr
 800fe64:	b510      	push	{r4, lr}
 800fe66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe6e:	4291      	cmp	r1, r2
 800fe70:	d1f9      	bne.n	800fe66 <memcpy+0xe>
 800fe72:	bd10      	pop	{r4, pc}

0800fe74 <_Balloc>:
 800fe74:	b570      	push	{r4, r5, r6, lr}
 800fe76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fe78:	4604      	mov	r4, r0
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	b976      	cbnz	r6, 800fe9c <_Balloc+0x28>
 800fe7e:	2010      	movs	r0, #16
 800fe80:	f7ff ffe2 	bl	800fe48 <malloc>
 800fe84:	4602      	mov	r2, r0
 800fe86:	6260      	str	r0, [r4, #36]	; 0x24
 800fe88:	b920      	cbnz	r0, 800fe94 <_Balloc+0x20>
 800fe8a:	4b18      	ldr	r3, [pc, #96]	; (800feec <_Balloc+0x78>)
 800fe8c:	4818      	ldr	r0, [pc, #96]	; (800fef0 <_Balloc+0x7c>)
 800fe8e:	2166      	movs	r1, #102	; 0x66
 800fe90:	f000 fd94 	bl	80109bc <__assert_func>
 800fe94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe98:	6006      	str	r6, [r0, #0]
 800fe9a:	60c6      	str	r6, [r0, #12]
 800fe9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fe9e:	68f3      	ldr	r3, [r6, #12]
 800fea0:	b183      	cbz	r3, 800fec4 <_Balloc+0x50>
 800fea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800feaa:	b9b8      	cbnz	r0, 800fedc <_Balloc+0x68>
 800feac:	2101      	movs	r1, #1
 800feae:	fa01 f605 	lsl.w	r6, r1, r5
 800feb2:	1d72      	adds	r2, r6, #5
 800feb4:	0092      	lsls	r2, r2, #2
 800feb6:	4620      	mov	r0, r4
 800feb8:	f000 fb5a 	bl	8010570 <_calloc_r>
 800febc:	b160      	cbz	r0, 800fed8 <_Balloc+0x64>
 800febe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fec2:	e00e      	b.n	800fee2 <_Balloc+0x6e>
 800fec4:	2221      	movs	r2, #33	; 0x21
 800fec6:	2104      	movs	r1, #4
 800fec8:	4620      	mov	r0, r4
 800feca:	f000 fb51 	bl	8010570 <_calloc_r>
 800fece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fed0:	60f0      	str	r0, [r6, #12]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d1e4      	bne.n	800fea2 <_Balloc+0x2e>
 800fed8:	2000      	movs	r0, #0
 800feda:	bd70      	pop	{r4, r5, r6, pc}
 800fedc:	6802      	ldr	r2, [r0, #0]
 800fede:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fee2:	2300      	movs	r3, #0
 800fee4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fee8:	e7f7      	b.n	800feda <_Balloc+0x66>
 800feea:	bf00      	nop
 800feec:	080116f9 	.word	0x080116f9
 800fef0:	08011780 	.word	0x08011780

0800fef4 <_Bfree>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fef8:	4605      	mov	r5, r0
 800fefa:	460c      	mov	r4, r1
 800fefc:	b976      	cbnz	r6, 800ff1c <_Bfree+0x28>
 800fefe:	2010      	movs	r0, #16
 800ff00:	f7ff ffa2 	bl	800fe48 <malloc>
 800ff04:	4602      	mov	r2, r0
 800ff06:	6268      	str	r0, [r5, #36]	; 0x24
 800ff08:	b920      	cbnz	r0, 800ff14 <_Bfree+0x20>
 800ff0a:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <_Bfree+0x3c>)
 800ff0c:	4809      	ldr	r0, [pc, #36]	; (800ff34 <_Bfree+0x40>)
 800ff0e:	218a      	movs	r1, #138	; 0x8a
 800ff10:	f000 fd54 	bl	80109bc <__assert_func>
 800ff14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff18:	6006      	str	r6, [r0, #0]
 800ff1a:	60c6      	str	r6, [r0, #12]
 800ff1c:	b13c      	cbz	r4, 800ff2e <_Bfree+0x3a>
 800ff1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff20:	6862      	ldr	r2, [r4, #4]
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff28:	6021      	str	r1, [r4, #0]
 800ff2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	080116f9 	.word	0x080116f9
 800ff34:	08011780 	.word	0x08011780

0800ff38 <__multadd>:
 800ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3c:	690e      	ldr	r6, [r1, #16]
 800ff3e:	4607      	mov	r7, r0
 800ff40:	4698      	mov	r8, r3
 800ff42:	460c      	mov	r4, r1
 800ff44:	f101 0014 	add.w	r0, r1, #20
 800ff48:	2300      	movs	r3, #0
 800ff4a:	6805      	ldr	r5, [r0, #0]
 800ff4c:	b2a9      	uxth	r1, r5
 800ff4e:	fb02 8101 	mla	r1, r2, r1, r8
 800ff52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ff56:	0c2d      	lsrs	r5, r5, #16
 800ff58:	fb02 c505 	mla	r5, r2, r5, ip
 800ff5c:	b289      	uxth	r1, r1
 800ff5e:	3301      	adds	r3, #1
 800ff60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ff64:	429e      	cmp	r6, r3
 800ff66:	f840 1b04 	str.w	r1, [r0], #4
 800ff6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ff6e:	dcec      	bgt.n	800ff4a <__multadd+0x12>
 800ff70:	f1b8 0f00 	cmp.w	r8, #0
 800ff74:	d022      	beq.n	800ffbc <__multadd+0x84>
 800ff76:	68a3      	ldr	r3, [r4, #8]
 800ff78:	42b3      	cmp	r3, r6
 800ff7a:	dc19      	bgt.n	800ffb0 <__multadd+0x78>
 800ff7c:	6861      	ldr	r1, [r4, #4]
 800ff7e:	4638      	mov	r0, r7
 800ff80:	3101      	adds	r1, #1
 800ff82:	f7ff ff77 	bl	800fe74 <_Balloc>
 800ff86:	4605      	mov	r5, r0
 800ff88:	b928      	cbnz	r0, 800ff96 <__multadd+0x5e>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	4b0d      	ldr	r3, [pc, #52]	; (800ffc4 <__multadd+0x8c>)
 800ff8e:	480e      	ldr	r0, [pc, #56]	; (800ffc8 <__multadd+0x90>)
 800ff90:	21b5      	movs	r1, #181	; 0xb5
 800ff92:	f000 fd13 	bl	80109bc <__assert_func>
 800ff96:	6922      	ldr	r2, [r4, #16]
 800ff98:	3202      	adds	r2, #2
 800ff9a:	f104 010c 	add.w	r1, r4, #12
 800ff9e:	0092      	lsls	r2, r2, #2
 800ffa0:	300c      	adds	r0, #12
 800ffa2:	f7ff ff59 	bl	800fe58 <memcpy>
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4638      	mov	r0, r7
 800ffaa:	f7ff ffa3 	bl	800fef4 <_Bfree>
 800ffae:	462c      	mov	r4, r5
 800ffb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ffb4:	3601      	adds	r6, #1
 800ffb6:	f8c3 8014 	str.w	r8, [r3, #20]
 800ffba:	6126      	str	r6, [r4, #16]
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc2:	bf00      	nop
 800ffc4:	0801176f 	.word	0x0801176f
 800ffc8:	08011780 	.word	0x08011780

0800ffcc <__hi0bits>:
 800ffcc:	0c03      	lsrs	r3, r0, #16
 800ffce:	041b      	lsls	r3, r3, #16
 800ffd0:	b9d3      	cbnz	r3, 8010008 <__hi0bits+0x3c>
 800ffd2:	0400      	lsls	r0, r0, #16
 800ffd4:	2310      	movs	r3, #16
 800ffd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ffda:	bf04      	itt	eq
 800ffdc:	0200      	lsleq	r0, r0, #8
 800ffde:	3308      	addeq	r3, #8
 800ffe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ffe4:	bf04      	itt	eq
 800ffe6:	0100      	lsleq	r0, r0, #4
 800ffe8:	3304      	addeq	r3, #4
 800ffea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ffee:	bf04      	itt	eq
 800fff0:	0080      	lsleq	r0, r0, #2
 800fff2:	3302      	addeq	r3, #2
 800fff4:	2800      	cmp	r0, #0
 800fff6:	db05      	blt.n	8010004 <__hi0bits+0x38>
 800fff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fffc:	f103 0301 	add.w	r3, r3, #1
 8010000:	bf08      	it	eq
 8010002:	2320      	moveq	r3, #32
 8010004:	4618      	mov	r0, r3
 8010006:	4770      	bx	lr
 8010008:	2300      	movs	r3, #0
 801000a:	e7e4      	b.n	800ffd6 <__hi0bits+0xa>

0801000c <__lo0bits>:
 801000c:	6803      	ldr	r3, [r0, #0]
 801000e:	f013 0207 	ands.w	r2, r3, #7
 8010012:	4601      	mov	r1, r0
 8010014:	d00b      	beq.n	801002e <__lo0bits+0x22>
 8010016:	07da      	lsls	r2, r3, #31
 8010018:	d424      	bmi.n	8010064 <__lo0bits+0x58>
 801001a:	0798      	lsls	r0, r3, #30
 801001c:	bf49      	itett	mi
 801001e:	085b      	lsrmi	r3, r3, #1
 8010020:	089b      	lsrpl	r3, r3, #2
 8010022:	2001      	movmi	r0, #1
 8010024:	600b      	strmi	r3, [r1, #0]
 8010026:	bf5c      	itt	pl
 8010028:	600b      	strpl	r3, [r1, #0]
 801002a:	2002      	movpl	r0, #2
 801002c:	4770      	bx	lr
 801002e:	b298      	uxth	r0, r3
 8010030:	b9b0      	cbnz	r0, 8010060 <__lo0bits+0x54>
 8010032:	0c1b      	lsrs	r3, r3, #16
 8010034:	2010      	movs	r0, #16
 8010036:	f013 0fff 	tst.w	r3, #255	; 0xff
 801003a:	bf04      	itt	eq
 801003c:	0a1b      	lsreq	r3, r3, #8
 801003e:	3008      	addeq	r0, #8
 8010040:	071a      	lsls	r2, r3, #28
 8010042:	bf04      	itt	eq
 8010044:	091b      	lsreq	r3, r3, #4
 8010046:	3004      	addeq	r0, #4
 8010048:	079a      	lsls	r2, r3, #30
 801004a:	bf04      	itt	eq
 801004c:	089b      	lsreq	r3, r3, #2
 801004e:	3002      	addeq	r0, #2
 8010050:	07da      	lsls	r2, r3, #31
 8010052:	d403      	bmi.n	801005c <__lo0bits+0x50>
 8010054:	085b      	lsrs	r3, r3, #1
 8010056:	f100 0001 	add.w	r0, r0, #1
 801005a:	d005      	beq.n	8010068 <__lo0bits+0x5c>
 801005c:	600b      	str	r3, [r1, #0]
 801005e:	4770      	bx	lr
 8010060:	4610      	mov	r0, r2
 8010062:	e7e8      	b.n	8010036 <__lo0bits+0x2a>
 8010064:	2000      	movs	r0, #0
 8010066:	4770      	bx	lr
 8010068:	2020      	movs	r0, #32
 801006a:	4770      	bx	lr

0801006c <__i2b>:
 801006c:	b510      	push	{r4, lr}
 801006e:	460c      	mov	r4, r1
 8010070:	2101      	movs	r1, #1
 8010072:	f7ff feff 	bl	800fe74 <_Balloc>
 8010076:	4602      	mov	r2, r0
 8010078:	b928      	cbnz	r0, 8010086 <__i2b+0x1a>
 801007a:	4b05      	ldr	r3, [pc, #20]	; (8010090 <__i2b+0x24>)
 801007c:	4805      	ldr	r0, [pc, #20]	; (8010094 <__i2b+0x28>)
 801007e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010082:	f000 fc9b 	bl	80109bc <__assert_func>
 8010086:	2301      	movs	r3, #1
 8010088:	6144      	str	r4, [r0, #20]
 801008a:	6103      	str	r3, [r0, #16]
 801008c:	bd10      	pop	{r4, pc}
 801008e:	bf00      	nop
 8010090:	0801176f 	.word	0x0801176f
 8010094:	08011780 	.word	0x08011780

08010098 <__multiply>:
 8010098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009c:	4614      	mov	r4, r2
 801009e:	690a      	ldr	r2, [r1, #16]
 80100a0:	6923      	ldr	r3, [r4, #16]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	bfb8      	it	lt
 80100a6:	460b      	movlt	r3, r1
 80100a8:	460d      	mov	r5, r1
 80100aa:	bfbc      	itt	lt
 80100ac:	4625      	movlt	r5, r4
 80100ae:	461c      	movlt	r4, r3
 80100b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80100b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80100b8:	68ab      	ldr	r3, [r5, #8]
 80100ba:	6869      	ldr	r1, [r5, #4]
 80100bc:	eb0a 0709 	add.w	r7, sl, r9
 80100c0:	42bb      	cmp	r3, r7
 80100c2:	b085      	sub	sp, #20
 80100c4:	bfb8      	it	lt
 80100c6:	3101      	addlt	r1, #1
 80100c8:	f7ff fed4 	bl	800fe74 <_Balloc>
 80100cc:	b930      	cbnz	r0, 80100dc <__multiply+0x44>
 80100ce:	4602      	mov	r2, r0
 80100d0:	4b42      	ldr	r3, [pc, #264]	; (80101dc <__multiply+0x144>)
 80100d2:	4843      	ldr	r0, [pc, #268]	; (80101e0 <__multiply+0x148>)
 80100d4:	f240 115d 	movw	r1, #349	; 0x15d
 80100d8:	f000 fc70 	bl	80109bc <__assert_func>
 80100dc:	f100 0614 	add.w	r6, r0, #20
 80100e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80100e4:	4633      	mov	r3, r6
 80100e6:	2200      	movs	r2, #0
 80100e8:	4543      	cmp	r3, r8
 80100ea:	d31e      	bcc.n	801012a <__multiply+0x92>
 80100ec:	f105 0c14 	add.w	ip, r5, #20
 80100f0:	f104 0314 	add.w	r3, r4, #20
 80100f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80100f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80100fc:	9202      	str	r2, [sp, #8]
 80100fe:	ebac 0205 	sub.w	r2, ip, r5
 8010102:	3a15      	subs	r2, #21
 8010104:	f022 0203 	bic.w	r2, r2, #3
 8010108:	3204      	adds	r2, #4
 801010a:	f105 0115 	add.w	r1, r5, #21
 801010e:	458c      	cmp	ip, r1
 8010110:	bf38      	it	cc
 8010112:	2204      	movcc	r2, #4
 8010114:	9201      	str	r2, [sp, #4]
 8010116:	9a02      	ldr	r2, [sp, #8]
 8010118:	9303      	str	r3, [sp, #12]
 801011a:	429a      	cmp	r2, r3
 801011c:	d808      	bhi.n	8010130 <__multiply+0x98>
 801011e:	2f00      	cmp	r7, #0
 8010120:	dc55      	bgt.n	80101ce <__multiply+0x136>
 8010122:	6107      	str	r7, [r0, #16]
 8010124:	b005      	add	sp, #20
 8010126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801012a:	f843 2b04 	str.w	r2, [r3], #4
 801012e:	e7db      	b.n	80100e8 <__multiply+0x50>
 8010130:	f8b3 a000 	ldrh.w	sl, [r3]
 8010134:	f1ba 0f00 	cmp.w	sl, #0
 8010138:	d020      	beq.n	801017c <__multiply+0xe4>
 801013a:	f105 0e14 	add.w	lr, r5, #20
 801013e:	46b1      	mov	r9, r6
 8010140:	2200      	movs	r2, #0
 8010142:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010146:	f8d9 b000 	ldr.w	fp, [r9]
 801014a:	b2a1      	uxth	r1, r4
 801014c:	fa1f fb8b 	uxth.w	fp, fp
 8010150:	fb0a b101 	mla	r1, sl, r1, fp
 8010154:	4411      	add	r1, r2
 8010156:	f8d9 2000 	ldr.w	r2, [r9]
 801015a:	0c24      	lsrs	r4, r4, #16
 801015c:	0c12      	lsrs	r2, r2, #16
 801015e:	fb0a 2404 	mla	r4, sl, r4, r2
 8010162:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010166:	b289      	uxth	r1, r1
 8010168:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801016c:	45f4      	cmp	ip, lr
 801016e:	f849 1b04 	str.w	r1, [r9], #4
 8010172:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010176:	d8e4      	bhi.n	8010142 <__multiply+0xaa>
 8010178:	9901      	ldr	r1, [sp, #4]
 801017a:	5072      	str	r2, [r6, r1]
 801017c:	9a03      	ldr	r2, [sp, #12]
 801017e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010182:	3304      	adds	r3, #4
 8010184:	f1b9 0f00 	cmp.w	r9, #0
 8010188:	d01f      	beq.n	80101ca <__multiply+0x132>
 801018a:	6834      	ldr	r4, [r6, #0]
 801018c:	f105 0114 	add.w	r1, r5, #20
 8010190:	46b6      	mov	lr, r6
 8010192:	f04f 0a00 	mov.w	sl, #0
 8010196:	880a      	ldrh	r2, [r1, #0]
 8010198:	f8be b002 	ldrh.w	fp, [lr, #2]
 801019c:	fb09 b202 	mla	r2, r9, r2, fp
 80101a0:	4492      	add	sl, r2
 80101a2:	b2a4      	uxth	r4, r4
 80101a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80101a8:	f84e 4b04 	str.w	r4, [lr], #4
 80101ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80101b0:	f8be 2000 	ldrh.w	r2, [lr]
 80101b4:	0c24      	lsrs	r4, r4, #16
 80101b6:	fb09 2404 	mla	r4, r9, r4, r2
 80101ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80101be:	458c      	cmp	ip, r1
 80101c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80101c4:	d8e7      	bhi.n	8010196 <__multiply+0xfe>
 80101c6:	9a01      	ldr	r2, [sp, #4]
 80101c8:	50b4      	str	r4, [r6, r2]
 80101ca:	3604      	adds	r6, #4
 80101cc:	e7a3      	b.n	8010116 <__multiply+0x7e>
 80101ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1a5      	bne.n	8010122 <__multiply+0x8a>
 80101d6:	3f01      	subs	r7, #1
 80101d8:	e7a1      	b.n	801011e <__multiply+0x86>
 80101da:	bf00      	nop
 80101dc:	0801176f 	.word	0x0801176f
 80101e0:	08011780 	.word	0x08011780

080101e4 <__pow5mult>:
 80101e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101e8:	4615      	mov	r5, r2
 80101ea:	f012 0203 	ands.w	r2, r2, #3
 80101ee:	4606      	mov	r6, r0
 80101f0:	460f      	mov	r7, r1
 80101f2:	d007      	beq.n	8010204 <__pow5mult+0x20>
 80101f4:	4c25      	ldr	r4, [pc, #148]	; (801028c <__pow5mult+0xa8>)
 80101f6:	3a01      	subs	r2, #1
 80101f8:	2300      	movs	r3, #0
 80101fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101fe:	f7ff fe9b 	bl	800ff38 <__multadd>
 8010202:	4607      	mov	r7, r0
 8010204:	10ad      	asrs	r5, r5, #2
 8010206:	d03d      	beq.n	8010284 <__pow5mult+0xa0>
 8010208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801020a:	b97c      	cbnz	r4, 801022c <__pow5mult+0x48>
 801020c:	2010      	movs	r0, #16
 801020e:	f7ff fe1b 	bl	800fe48 <malloc>
 8010212:	4602      	mov	r2, r0
 8010214:	6270      	str	r0, [r6, #36]	; 0x24
 8010216:	b928      	cbnz	r0, 8010224 <__pow5mult+0x40>
 8010218:	4b1d      	ldr	r3, [pc, #116]	; (8010290 <__pow5mult+0xac>)
 801021a:	481e      	ldr	r0, [pc, #120]	; (8010294 <__pow5mult+0xb0>)
 801021c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010220:	f000 fbcc 	bl	80109bc <__assert_func>
 8010224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010228:	6004      	str	r4, [r0, #0]
 801022a:	60c4      	str	r4, [r0, #12]
 801022c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010234:	b94c      	cbnz	r4, 801024a <__pow5mult+0x66>
 8010236:	f240 2171 	movw	r1, #625	; 0x271
 801023a:	4630      	mov	r0, r6
 801023c:	f7ff ff16 	bl	801006c <__i2b>
 8010240:	2300      	movs	r3, #0
 8010242:	f8c8 0008 	str.w	r0, [r8, #8]
 8010246:	4604      	mov	r4, r0
 8010248:	6003      	str	r3, [r0, #0]
 801024a:	f04f 0900 	mov.w	r9, #0
 801024e:	07eb      	lsls	r3, r5, #31
 8010250:	d50a      	bpl.n	8010268 <__pow5mult+0x84>
 8010252:	4639      	mov	r1, r7
 8010254:	4622      	mov	r2, r4
 8010256:	4630      	mov	r0, r6
 8010258:	f7ff ff1e 	bl	8010098 <__multiply>
 801025c:	4639      	mov	r1, r7
 801025e:	4680      	mov	r8, r0
 8010260:	4630      	mov	r0, r6
 8010262:	f7ff fe47 	bl	800fef4 <_Bfree>
 8010266:	4647      	mov	r7, r8
 8010268:	106d      	asrs	r5, r5, #1
 801026a:	d00b      	beq.n	8010284 <__pow5mult+0xa0>
 801026c:	6820      	ldr	r0, [r4, #0]
 801026e:	b938      	cbnz	r0, 8010280 <__pow5mult+0x9c>
 8010270:	4622      	mov	r2, r4
 8010272:	4621      	mov	r1, r4
 8010274:	4630      	mov	r0, r6
 8010276:	f7ff ff0f 	bl	8010098 <__multiply>
 801027a:	6020      	str	r0, [r4, #0]
 801027c:	f8c0 9000 	str.w	r9, [r0]
 8010280:	4604      	mov	r4, r0
 8010282:	e7e4      	b.n	801024e <__pow5mult+0x6a>
 8010284:	4638      	mov	r0, r7
 8010286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801028a:	bf00      	nop
 801028c:	080118d0 	.word	0x080118d0
 8010290:	080116f9 	.word	0x080116f9
 8010294:	08011780 	.word	0x08011780

08010298 <__lshift>:
 8010298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801029c:	460c      	mov	r4, r1
 801029e:	6849      	ldr	r1, [r1, #4]
 80102a0:	6923      	ldr	r3, [r4, #16]
 80102a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102a6:	68a3      	ldr	r3, [r4, #8]
 80102a8:	4607      	mov	r7, r0
 80102aa:	4691      	mov	r9, r2
 80102ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80102b0:	f108 0601 	add.w	r6, r8, #1
 80102b4:	42b3      	cmp	r3, r6
 80102b6:	db0b      	blt.n	80102d0 <__lshift+0x38>
 80102b8:	4638      	mov	r0, r7
 80102ba:	f7ff fddb 	bl	800fe74 <_Balloc>
 80102be:	4605      	mov	r5, r0
 80102c0:	b948      	cbnz	r0, 80102d6 <__lshift+0x3e>
 80102c2:	4602      	mov	r2, r0
 80102c4:	4b28      	ldr	r3, [pc, #160]	; (8010368 <__lshift+0xd0>)
 80102c6:	4829      	ldr	r0, [pc, #164]	; (801036c <__lshift+0xd4>)
 80102c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80102cc:	f000 fb76 	bl	80109bc <__assert_func>
 80102d0:	3101      	adds	r1, #1
 80102d2:	005b      	lsls	r3, r3, #1
 80102d4:	e7ee      	b.n	80102b4 <__lshift+0x1c>
 80102d6:	2300      	movs	r3, #0
 80102d8:	f100 0114 	add.w	r1, r0, #20
 80102dc:	f100 0210 	add.w	r2, r0, #16
 80102e0:	4618      	mov	r0, r3
 80102e2:	4553      	cmp	r3, sl
 80102e4:	db33      	blt.n	801034e <__lshift+0xb6>
 80102e6:	6920      	ldr	r0, [r4, #16]
 80102e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102ec:	f104 0314 	add.w	r3, r4, #20
 80102f0:	f019 091f 	ands.w	r9, r9, #31
 80102f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102fc:	d02b      	beq.n	8010356 <__lshift+0xbe>
 80102fe:	f1c9 0e20 	rsb	lr, r9, #32
 8010302:	468a      	mov	sl, r1
 8010304:	2200      	movs	r2, #0
 8010306:	6818      	ldr	r0, [r3, #0]
 8010308:	fa00 f009 	lsl.w	r0, r0, r9
 801030c:	4302      	orrs	r2, r0
 801030e:	f84a 2b04 	str.w	r2, [sl], #4
 8010312:	f853 2b04 	ldr.w	r2, [r3], #4
 8010316:	459c      	cmp	ip, r3
 8010318:	fa22 f20e 	lsr.w	r2, r2, lr
 801031c:	d8f3      	bhi.n	8010306 <__lshift+0x6e>
 801031e:	ebac 0304 	sub.w	r3, ip, r4
 8010322:	3b15      	subs	r3, #21
 8010324:	f023 0303 	bic.w	r3, r3, #3
 8010328:	3304      	adds	r3, #4
 801032a:	f104 0015 	add.w	r0, r4, #21
 801032e:	4584      	cmp	ip, r0
 8010330:	bf38      	it	cc
 8010332:	2304      	movcc	r3, #4
 8010334:	50ca      	str	r2, [r1, r3]
 8010336:	b10a      	cbz	r2, 801033c <__lshift+0xa4>
 8010338:	f108 0602 	add.w	r6, r8, #2
 801033c:	3e01      	subs	r6, #1
 801033e:	4638      	mov	r0, r7
 8010340:	612e      	str	r6, [r5, #16]
 8010342:	4621      	mov	r1, r4
 8010344:	f7ff fdd6 	bl	800fef4 <_Bfree>
 8010348:	4628      	mov	r0, r5
 801034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801034e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010352:	3301      	adds	r3, #1
 8010354:	e7c5      	b.n	80102e2 <__lshift+0x4a>
 8010356:	3904      	subs	r1, #4
 8010358:	f853 2b04 	ldr.w	r2, [r3], #4
 801035c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010360:	459c      	cmp	ip, r3
 8010362:	d8f9      	bhi.n	8010358 <__lshift+0xc0>
 8010364:	e7ea      	b.n	801033c <__lshift+0xa4>
 8010366:	bf00      	nop
 8010368:	0801176f 	.word	0x0801176f
 801036c:	08011780 	.word	0x08011780

08010370 <__mcmp>:
 8010370:	b530      	push	{r4, r5, lr}
 8010372:	6902      	ldr	r2, [r0, #16]
 8010374:	690c      	ldr	r4, [r1, #16]
 8010376:	1b12      	subs	r2, r2, r4
 8010378:	d10e      	bne.n	8010398 <__mcmp+0x28>
 801037a:	f100 0314 	add.w	r3, r0, #20
 801037e:	3114      	adds	r1, #20
 8010380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801038c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010390:	42a5      	cmp	r5, r4
 8010392:	d003      	beq.n	801039c <__mcmp+0x2c>
 8010394:	d305      	bcc.n	80103a2 <__mcmp+0x32>
 8010396:	2201      	movs	r2, #1
 8010398:	4610      	mov	r0, r2
 801039a:	bd30      	pop	{r4, r5, pc}
 801039c:	4283      	cmp	r3, r0
 801039e:	d3f3      	bcc.n	8010388 <__mcmp+0x18>
 80103a0:	e7fa      	b.n	8010398 <__mcmp+0x28>
 80103a2:	f04f 32ff 	mov.w	r2, #4294967295
 80103a6:	e7f7      	b.n	8010398 <__mcmp+0x28>

080103a8 <__mdiff>:
 80103a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	460c      	mov	r4, r1
 80103ae:	4606      	mov	r6, r0
 80103b0:	4611      	mov	r1, r2
 80103b2:	4620      	mov	r0, r4
 80103b4:	4617      	mov	r7, r2
 80103b6:	f7ff ffdb 	bl	8010370 <__mcmp>
 80103ba:	1e05      	subs	r5, r0, #0
 80103bc:	d110      	bne.n	80103e0 <__mdiff+0x38>
 80103be:	4629      	mov	r1, r5
 80103c0:	4630      	mov	r0, r6
 80103c2:	f7ff fd57 	bl	800fe74 <_Balloc>
 80103c6:	b930      	cbnz	r0, 80103d6 <__mdiff+0x2e>
 80103c8:	4b39      	ldr	r3, [pc, #228]	; (80104b0 <__mdiff+0x108>)
 80103ca:	4602      	mov	r2, r0
 80103cc:	f240 2132 	movw	r1, #562	; 0x232
 80103d0:	4838      	ldr	r0, [pc, #224]	; (80104b4 <__mdiff+0x10c>)
 80103d2:	f000 faf3 	bl	80109bc <__assert_func>
 80103d6:	2301      	movs	r3, #1
 80103d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e0:	bfa4      	itt	ge
 80103e2:	463b      	movge	r3, r7
 80103e4:	4627      	movge	r7, r4
 80103e6:	4630      	mov	r0, r6
 80103e8:	6879      	ldr	r1, [r7, #4]
 80103ea:	bfa6      	itte	ge
 80103ec:	461c      	movge	r4, r3
 80103ee:	2500      	movge	r5, #0
 80103f0:	2501      	movlt	r5, #1
 80103f2:	f7ff fd3f 	bl	800fe74 <_Balloc>
 80103f6:	b920      	cbnz	r0, 8010402 <__mdiff+0x5a>
 80103f8:	4b2d      	ldr	r3, [pc, #180]	; (80104b0 <__mdiff+0x108>)
 80103fa:	4602      	mov	r2, r0
 80103fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010400:	e7e6      	b.n	80103d0 <__mdiff+0x28>
 8010402:	693e      	ldr	r6, [r7, #16]
 8010404:	60c5      	str	r5, [r0, #12]
 8010406:	6925      	ldr	r5, [r4, #16]
 8010408:	f107 0114 	add.w	r1, r7, #20
 801040c:	f104 0914 	add.w	r9, r4, #20
 8010410:	f100 0e14 	add.w	lr, r0, #20
 8010414:	f107 0210 	add.w	r2, r7, #16
 8010418:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801041c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010420:	46f2      	mov	sl, lr
 8010422:	2700      	movs	r7, #0
 8010424:	f859 3b04 	ldr.w	r3, [r9], #4
 8010428:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801042c:	fa1f f883 	uxth.w	r8, r3
 8010430:	fa17 f78b 	uxtah	r7, r7, fp
 8010434:	0c1b      	lsrs	r3, r3, #16
 8010436:	eba7 0808 	sub.w	r8, r7, r8
 801043a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801043e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010442:	fa1f f888 	uxth.w	r8, r8
 8010446:	141f      	asrs	r7, r3, #16
 8010448:	454d      	cmp	r5, r9
 801044a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801044e:	f84a 3b04 	str.w	r3, [sl], #4
 8010452:	d8e7      	bhi.n	8010424 <__mdiff+0x7c>
 8010454:	1b2b      	subs	r3, r5, r4
 8010456:	3b15      	subs	r3, #21
 8010458:	f023 0303 	bic.w	r3, r3, #3
 801045c:	3304      	adds	r3, #4
 801045e:	3415      	adds	r4, #21
 8010460:	42a5      	cmp	r5, r4
 8010462:	bf38      	it	cc
 8010464:	2304      	movcc	r3, #4
 8010466:	4419      	add	r1, r3
 8010468:	4473      	add	r3, lr
 801046a:	469e      	mov	lr, r3
 801046c:	460d      	mov	r5, r1
 801046e:	4565      	cmp	r5, ip
 8010470:	d30e      	bcc.n	8010490 <__mdiff+0xe8>
 8010472:	f10c 0203 	add.w	r2, ip, #3
 8010476:	1a52      	subs	r2, r2, r1
 8010478:	f022 0203 	bic.w	r2, r2, #3
 801047c:	3903      	subs	r1, #3
 801047e:	458c      	cmp	ip, r1
 8010480:	bf38      	it	cc
 8010482:	2200      	movcc	r2, #0
 8010484:	441a      	add	r2, r3
 8010486:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801048a:	b17b      	cbz	r3, 80104ac <__mdiff+0x104>
 801048c:	6106      	str	r6, [r0, #16]
 801048e:	e7a5      	b.n	80103dc <__mdiff+0x34>
 8010490:	f855 8b04 	ldr.w	r8, [r5], #4
 8010494:	fa17 f488 	uxtah	r4, r7, r8
 8010498:	1422      	asrs	r2, r4, #16
 801049a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801049e:	b2a4      	uxth	r4, r4
 80104a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80104a4:	f84e 4b04 	str.w	r4, [lr], #4
 80104a8:	1417      	asrs	r7, r2, #16
 80104aa:	e7e0      	b.n	801046e <__mdiff+0xc6>
 80104ac:	3e01      	subs	r6, #1
 80104ae:	e7ea      	b.n	8010486 <__mdiff+0xde>
 80104b0:	0801176f 	.word	0x0801176f
 80104b4:	08011780 	.word	0x08011780

080104b8 <__d2b>:
 80104b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80104bc:	4689      	mov	r9, r1
 80104be:	2101      	movs	r1, #1
 80104c0:	ec57 6b10 	vmov	r6, r7, d0
 80104c4:	4690      	mov	r8, r2
 80104c6:	f7ff fcd5 	bl	800fe74 <_Balloc>
 80104ca:	4604      	mov	r4, r0
 80104cc:	b930      	cbnz	r0, 80104dc <__d2b+0x24>
 80104ce:	4602      	mov	r2, r0
 80104d0:	4b25      	ldr	r3, [pc, #148]	; (8010568 <__d2b+0xb0>)
 80104d2:	4826      	ldr	r0, [pc, #152]	; (801056c <__d2b+0xb4>)
 80104d4:	f240 310a 	movw	r1, #778	; 0x30a
 80104d8:	f000 fa70 	bl	80109bc <__assert_func>
 80104dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80104e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80104e4:	bb35      	cbnz	r5, 8010534 <__d2b+0x7c>
 80104e6:	2e00      	cmp	r6, #0
 80104e8:	9301      	str	r3, [sp, #4]
 80104ea:	d028      	beq.n	801053e <__d2b+0x86>
 80104ec:	4668      	mov	r0, sp
 80104ee:	9600      	str	r6, [sp, #0]
 80104f0:	f7ff fd8c 	bl	801000c <__lo0bits>
 80104f4:	9900      	ldr	r1, [sp, #0]
 80104f6:	b300      	cbz	r0, 801053a <__d2b+0x82>
 80104f8:	9a01      	ldr	r2, [sp, #4]
 80104fa:	f1c0 0320 	rsb	r3, r0, #32
 80104fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010502:	430b      	orrs	r3, r1
 8010504:	40c2      	lsrs	r2, r0
 8010506:	6163      	str	r3, [r4, #20]
 8010508:	9201      	str	r2, [sp, #4]
 801050a:	9b01      	ldr	r3, [sp, #4]
 801050c:	61a3      	str	r3, [r4, #24]
 801050e:	2b00      	cmp	r3, #0
 8010510:	bf14      	ite	ne
 8010512:	2202      	movne	r2, #2
 8010514:	2201      	moveq	r2, #1
 8010516:	6122      	str	r2, [r4, #16]
 8010518:	b1d5      	cbz	r5, 8010550 <__d2b+0x98>
 801051a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801051e:	4405      	add	r5, r0
 8010520:	f8c9 5000 	str.w	r5, [r9]
 8010524:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010528:	f8c8 0000 	str.w	r0, [r8]
 801052c:	4620      	mov	r0, r4
 801052e:	b003      	add	sp, #12
 8010530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010538:	e7d5      	b.n	80104e6 <__d2b+0x2e>
 801053a:	6161      	str	r1, [r4, #20]
 801053c:	e7e5      	b.n	801050a <__d2b+0x52>
 801053e:	a801      	add	r0, sp, #4
 8010540:	f7ff fd64 	bl	801000c <__lo0bits>
 8010544:	9b01      	ldr	r3, [sp, #4]
 8010546:	6163      	str	r3, [r4, #20]
 8010548:	2201      	movs	r2, #1
 801054a:	6122      	str	r2, [r4, #16]
 801054c:	3020      	adds	r0, #32
 801054e:	e7e3      	b.n	8010518 <__d2b+0x60>
 8010550:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010554:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010558:	f8c9 0000 	str.w	r0, [r9]
 801055c:	6918      	ldr	r0, [r3, #16]
 801055e:	f7ff fd35 	bl	800ffcc <__hi0bits>
 8010562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010566:	e7df      	b.n	8010528 <__d2b+0x70>
 8010568:	0801176f 	.word	0x0801176f
 801056c:	08011780 	.word	0x08011780

08010570 <_calloc_r>:
 8010570:	b513      	push	{r0, r1, r4, lr}
 8010572:	434a      	muls	r2, r1
 8010574:	4611      	mov	r1, r2
 8010576:	9201      	str	r2, [sp, #4]
 8010578:	f000 f85a 	bl	8010630 <_malloc_r>
 801057c:	4604      	mov	r4, r0
 801057e:	b118      	cbz	r0, 8010588 <_calloc_r+0x18>
 8010580:	9a01      	ldr	r2, [sp, #4]
 8010582:	2100      	movs	r1, #0
 8010584:	f7fe f952 	bl	800e82c <memset>
 8010588:	4620      	mov	r0, r4
 801058a:	b002      	add	sp, #8
 801058c:	bd10      	pop	{r4, pc}
	...

08010590 <_free_r>:
 8010590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010592:	2900      	cmp	r1, #0
 8010594:	d048      	beq.n	8010628 <_free_r+0x98>
 8010596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801059a:	9001      	str	r0, [sp, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	f1a1 0404 	sub.w	r4, r1, #4
 80105a2:	bfb8      	it	lt
 80105a4:	18e4      	addlt	r4, r4, r3
 80105a6:	f000 fa65 	bl	8010a74 <__malloc_lock>
 80105aa:	4a20      	ldr	r2, [pc, #128]	; (801062c <_free_r+0x9c>)
 80105ac:	9801      	ldr	r0, [sp, #4]
 80105ae:	6813      	ldr	r3, [r2, #0]
 80105b0:	4615      	mov	r5, r2
 80105b2:	b933      	cbnz	r3, 80105c2 <_free_r+0x32>
 80105b4:	6063      	str	r3, [r4, #4]
 80105b6:	6014      	str	r4, [r2, #0]
 80105b8:	b003      	add	sp, #12
 80105ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105be:	f000 ba5f 	b.w	8010a80 <__malloc_unlock>
 80105c2:	42a3      	cmp	r3, r4
 80105c4:	d90b      	bls.n	80105de <_free_r+0x4e>
 80105c6:	6821      	ldr	r1, [r4, #0]
 80105c8:	1862      	adds	r2, r4, r1
 80105ca:	4293      	cmp	r3, r2
 80105cc:	bf04      	itt	eq
 80105ce:	681a      	ldreq	r2, [r3, #0]
 80105d0:	685b      	ldreq	r3, [r3, #4]
 80105d2:	6063      	str	r3, [r4, #4]
 80105d4:	bf04      	itt	eq
 80105d6:	1852      	addeq	r2, r2, r1
 80105d8:	6022      	streq	r2, [r4, #0]
 80105da:	602c      	str	r4, [r5, #0]
 80105dc:	e7ec      	b.n	80105b8 <_free_r+0x28>
 80105de:	461a      	mov	r2, r3
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	b10b      	cbz	r3, 80105e8 <_free_r+0x58>
 80105e4:	42a3      	cmp	r3, r4
 80105e6:	d9fa      	bls.n	80105de <_free_r+0x4e>
 80105e8:	6811      	ldr	r1, [r2, #0]
 80105ea:	1855      	adds	r5, r2, r1
 80105ec:	42a5      	cmp	r5, r4
 80105ee:	d10b      	bne.n	8010608 <_free_r+0x78>
 80105f0:	6824      	ldr	r4, [r4, #0]
 80105f2:	4421      	add	r1, r4
 80105f4:	1854      	adds	r4, r2, r1
 80105f6:	42a3      	cmp	r3, r4
 80105f8:	6011      	str	r1, [r2, #0]
 80105fa:	d1dd      	bne.n	80105b8 <_free_r+0x28>
 80105fc:	681c      	ldr	r4, [r3, #0]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	6053      	str	r3, [r2, #4]
 8010602:	4421      	add	r1, r4
 8010604:	6011      	str	r1, [r2, #0]
 8010606:	e7d7      	b.n	80105b8 <_free_r+0x28>
 8010608:	d902      	bls.n	8010610 <_free_r+0x80>
 801060a:	230c      	movs	r3, #12
 801060c:	6003      	str	r3, [r0, #0]
 801060e:	e7d3      	b.n	80105b8 <_free_r+0x28>
 8010610:	6825      	ldr	r5, [r4, #0]
 8010612:	1961      	adds	r1, r4, r5
 8010614:	428b      	cmp	r3, r1
 8010616:	bf04      	itt	eq
 8010618:	6819      	ldreq	r1, [r3, #0]
 801061a:	685b      	ldreq	r3, [r3, #4]
 801061c:	6063      	str	r3, [r4, #4]
 801061e:	bf04      	itt	eq
 8010620:	1949      	addeq	r1, r1, r5
 8010622:	6021      	streq	r1, [r4, #0]
 8010624:	6054      	str	r4, [r2, #4]
 8010626:	e7c7      	b.n	80105b8 <_free_r+0x28>
 8010628:	b003      	add	sp, #12
 801062a:	bd30      	pop	{r4, r5, pc}
 801062c:	20000a20 	.word	0x20000a20

08010630 <_malloc_r>:
 8010630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010632:	1ccd      	adds	r5, r1, #3
 8010634:	f025 0503 	bic.w	r5, r5, #3
 8010638:	3508      	adds	r5, #8
 801063a:	2d0c      	cmp	r5, #12
 801063c:	bf38      	it	cc
 801063e:	250c      	movcc	r5, #12
 8010640:	2d00      	cmp	r5, #0
 8010642:	4606      	mov	r6, r0
 8010644:	db01      	blt.n	801064a <_malloc_r+0x1a>
 8010646:	42a9      	cmp	r1, r5
 8010648:	d903      	bls.n	8010652 <_malloc_r+0x22>
 801064a:	230c      	movs	r3, #12
 801064c:	6033      	str	r3, [r6, #0]
 801064e:	2000      	movs	r0, #0
 8010650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010652:	f000 fa0f 	bl	8010a74 <__malloc_lock>
 8010656:	4921      	ldr	r1, [pc, #132]	; (80106dc <_malloc_r+0xac>)
 8010658:	680a      	ldr	r2, [r1, #0]
 801065a:	4614      	mov	r4, r2
 801065c:	b99c      	cbnz	r4, 8010686 <_malloc_r+0x56>
 801065e:	4f20      	ldr	r7, [pc, #128]	; (80106e0 <_malloc_r+0xb0>)
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	b923      	cbnz	r3, 801066e <_malloc_r+0x3e>
 8010664:	4621      	mov	r1, r4
 8010666:	4630      	mov	r0, r6
 8010668:	f000 f998 	bl	801099c <_sbrk_r>
 801066c:	6038      	str	r0, [r7, #0]
 801066e:	4629      	mov	r1, r5
 8010670:	4630      	mov	r0, r6
 8010672:	f000 f993 	bl	801099c <_sbrk_r>
 8010676:	1c43      	adds	r3, r0, #1
 8010678:	d123      	bne.n	80106c2 <_malloc_r+0x92>
 801067a:	230c      	movs	r3, #12
 801067c:	6033      	str	r3, [r6, #0]
 801067e:	4630      	mov	r0, r6
 8010680:	f000 f9fe 	bl	8010a80 <__malloc_unlock>
 8010684:	e7e3      	b.n	801064e <_malloc_r+0x1e>
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	1b5b      	subs	r3, r3, r5
 801068a:	d417      	bmi.n	80106bc <_malloc_r+0x8c>
 801068c:	2b0b      	cmp	r3, #11
 801068e:	d903      	bls.n	8010698 <_malloc_r+0x68>
 8010690:	6023      	str	r3, [r4, #0]
 8010692:	441c      	add	r4, r3
 8010694:	6025      	str	r5, [r4, #0]
 8010696:	e004      	b.n	80106a2 <_malloc_r+0x72>
 8010698:	6863      	ldr	r3, [r4, #4]
 801069a:	42a2      	cmp	r2, r4
 801069c:	bf0c      	ite	eq
 801069e:	600b      	streq	r3, [r1, #0]
 80106a0:	6053      	strne	r3, [r2, #4]
 80106a2:	4630      	mov	r0, r6
 80106a4:	f000 f9ec 	bl	8010a80 <__malloc_unlock>
 80106a8:	f104 000b 	add.w	r0, r4, #11
 80106ac:	1d23      	adds	r3, r4, #4
 80106ae:	f020 0007 	bic.w	r0, r0, #7
 80106b2:	1ac2      	subs	r2, r0, r3
 80106b4:	d0cc      	beq.n	8010650 <_malloc_r+0x20>
 80106b6:	1a1b      	subs	r3, r3, r0
 80106b8:	50a3      	str	r3, [r4, r2]
 80106ba:	e7c9      	b.n	8010650 <_malloc_r+0x20>
 80106bc:	4622      	mov	r2, r4
 80106be:	6864      	ldr	r4, [r4, #4]
 80106c0:	e7cc      	b.n	801065c <_malloc_r+0x2c>
 80106c2:	1cc4      	adds	r4, r0, #3
 80106c4:	f024 0403 	bic.w	r4, r4, #3
 80106c8:	42a0      	cmp	r0, r4
 80106ca:	d0e3      	beq.n	8010694 <_malloc_r+0x64>
 80106cc:	1a21      	subs	r1, r4, r0
 80106ce:	4630      	mov	r0, r6
 80106d0:	f000 f964 	bl	801099c <_sbrk_r>
 80106d4:	3001      	adds	r0, #1
 80106d6:	d1dd      	bne.n	8010694 <_malloc_r+0x64>
 80106d8:	e7cf      	b.n	801067a <_malloc_r+0x4a>
 80106da:	bf00      	nop
 80106dc:	20000a20 	.word	0x20000a20
 80106e0:	20000a24 	.word	0x20000a24

080106e4 <__ssputs_r>:
 80106e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106e8:	688e      	ldr	r6, [r1, #8]
 80106ea:	429e      	cmp	r6, r3
 80106ec:	4682      	mov	sl, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	4690      	mov	r8, r2
 80106f2:	461f      	mov	r7, r3
 80106f4:	d838      	bhi.n	8010768 <__ssputs_r+0x84>
 80106f6:	898a      	ldrh	r2, [r1, #12]
 80106f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80106fc:	d032      	beq.n	8010764 <__ssputs_r+0x80>
 80106fe:	6825      	ldr	r5, [r4, #0]
 8010700:	6909      	ldr	r1, [r1, #16]
 8010702:	eba5 0901 	sub.w	r9, r5, r1
 8010706:	6965      	ldr	r5, [r4, #20]
 8010708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801070c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010710:	3301      	adds	r3, #1
 8010712:	444b      	add	r3, r9
 8010714:	106d      	asrs	r5, r5, #1
 8010716:	429d      	cmp	r5, r3
 8010718:	bf38      	it	cc
 801071a:	461d      	movcc	r5, r3
 801071c:	0553      	lsls	r3, r2, #21
 801071e:	d531      	bpl.n	8010784 <__ssputs_r+0xa0>
 8010720:	4629      	mov	r1, r5
 8010722:	f7ff ff85 	bl	8010630 <_malloc_r>
 8010726:	4606      	mov	r6, r0
 8010728:	b950      	cbnz	r0, 8010740 <__ssputs_r+0x5c>
 801072a:	230c      	movs	r3, #12
 801072c:	f8ca 3000 	str.w	r3, [sl]
 8010730:	89a3      	ldrh	r3, [r4, #12]
 8010732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010736:	81a3      	strh	r3, [r4, #12]
 8010738:	f04f 30ff 	mov.w	r0, #4294967295
 801073c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010740:	6921      	ldr	r1, [r4, #16]
 8010742:	464a      	mov	r2, r9
 8010744:	f7ff fb88 	bl	800fe58 <memcpy>
 8010748:	89a3      	ldrh	r3, [r4, #12]
 801074a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010752:	81a3      	strh	r3, [r4, #12]
 8010754:	6126      	str	r6, [r4, #16]
 8010756:	6165      	str	r5, [r4, #20]
 8010758:	444e      	add	r6, r9
 801075a:	eba5 0509 	sub.w	r5, r5, r9
 801075e:	6026      	str	r6, [r4, #0]
 8010760:	60a5      	str	r5, [r4, #8]
 8010762:	463e      	mov	r6, r7
 8010764:	42be      	cmp	r6, r7
 8010766:	d900      	bls.n	801076a <__ssputs_r+0x86>
 8010768:	463e      	mov	r6, r7
 801076a:	4632      	mov	r2, r6
 801076c:	6820      	ldr	r0, [r4, #0]
 801076e:	4641      	mov	r1, r8
 8010770:	f000 f966 	bl	8010a40 <memmove>
 8010774:	68a3      	ldr	r3, [r4, #8]
 8010776:	6822      	ldr	r2, [r4, #0]
 8010778:	1b9b      	subs	r3, r3, r6
 801077a:	4432      	add	r2, r6
 801077c:	60a3      	str	r3, [r4, #8]
 801077e:	6022      	str	r2, [r4, #0]
 8010780:	2000      	movs	r0, #0
 8010782:	e7db      	b.n	801073c <__ssputs_r+0x58>
 8010784:	462a      	mov	r2, r5
 8010786:	f000 f981 	bl	8010a8c <_realloc_r>
 801078a:	4606      	mov	r6, r0
 801078c:	2800      	cmp	r0, #0
 801078e:	d1e1      	bne.n	8010754 <__ssputs_r+0x70>
 8010790:	6921      	ldr	r1, [r4, #16]
 8010792:	4650      	mov	r0, sl
 8010794:	f7ff fefc 	bl	8010590 <_free_r>
 8010798:	e7c7      	b.n	801072a <__ssputs_r+0x46>
	...

0801079c <_svfiprintf_r>:
 801079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a0:	4698      	mov	r8, r3
 80107a2:	898b      	ldrh	r3, [r1, #12]
 80107a4:	061b      	lsls	r3, r3, #24
 80107a6:	b09d      	sub	sp, #116	; 0x74
 80107a8:	4607      	mov	r7, r0
 80107aa:	460d      	mov	r5, r1
 80107ac:	4614      	mov	r4, r2
 80107ae:	d50e      	bpl.n	80107ce <_svfiprintf_r+0x32>
 80107b0:	690b      	ldr	r3, [r1, #16]
 80107b2:	b963      	cbnz	r3, 80107ce <_svfiprintf_r+0x32>
 80107b4:	2140      	movs	r1, #64	; 0x40
 80107b6:	f7ff ff3b 	bl	8010630 <_malloc_r>
 80107ba:	6028      	str	r0, [r5, #0]
 80107bc:	6128      	str	r0, [r5, #16]
 80107be:	b920      	cbnz	r0, 80107ca <_svfiprintf_r+0x2e>
 80107c0:	230c      	movs	r3, #12
 80107c2:	603b      	str	r3, [r7, #0]
 80107c4:	f04f 30ff 	mov.w	r0, #4294967295
 80107c8:	e0d1      	b.n	801096e <_svfiprintf_r+0x1d2>
 80107ca:	2340      	movs	r3, #64	; 0x40
 80107cc:	616b      	str	r3, [r5, #20]
 80107ce:	2300      	movs	r3, #0
 80107d0:	9309      	str	r3, [sp, #36]	; 0x24
 80107d2:	2320      	movs	r3, #32
 80107d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80107dc:	2330      	movs	r3, #48	; 0x30
 80107de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010988 <_svfiprintf_r+0x1ec>
 80107e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107e6:	f04f 0901 	mov.w	r9, #1
 80107ea:	4623      	mov	r3, r4
 80107ec:	469a      	mov	sl, r3
 80107ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107f2:	b10a      	cbz	r2, 80107f8 <_svfiprintf_r+0x5c>
 80107f4:	2a25      	cmp	r2, #37	; 0x25
 80107f6:	d1f9      	bne.n	80107ec <_svfiprintf_r+0x50>
 80107f8:	ebba 0b04 	subs.w	fp, sl, r4
 80107fc:	d00b      	beq.n	8010816 <_svfiprintf_r+0x7a>
 80107fe:	465b      	mov	r3, fp
 8010800:	4622      	mov	r2, r4
 8010802:	4629      	mov	r1, r5
 8010804:	4638      	mov	r0, r7
 8010806:	f7ff ff6d 	bl	80106e4 <__ssputs_r>
 801080a:	3001      	adds	r0, #1
 801080c:	f000 80aa 	beq.w	8010964 <_svfiprintf_r+0x1c8>
 8010810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010812:	445a      	add	r2, fp
 8010814:	9209      	str	r2, [sp, #36]	; 0x24
 8010816:	f89a 3000 	ldrb.w	r3, [sl]
 801081a:	2b00      	cmp	r3, #0
 801081c:	f000 80a2 	beq.w	8010964 <_svfiprintf_r+0x1c8>
 8010820:	2300      	movs	r3, #0
 8010822:	f04f 32ff 	mov.w	r2, #4294967295
 8010826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801082a:	f10a 0a01 	add.w	sl, sl, #1
 801082e:	9304      	str	r3, [sp, #16]
 8010830:	9307      	str	r3, [sp, #28]
 8010832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010836:	931a      	str	r3, [sp, #104]	; 0x68
 8010838:	4654      	mov	r4, sl
 801083a:	2205      	movs	r2, #5
 801083c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010840:	4851      	ldr	r0, [pc, #324]	; (8010988 <_svfiprintf_r+0x1ec>)
 8010842:	f7ef fcd5 	bl	80001f0 <memchr>
 8010846:	9a04      	ldr	r2, [sp, #16]
 8010848:	b9d8      	cbnz	r0, 8010882 <_svfiprintf_r+0xe6>
 801084a:	06d0      	lsls	r0, r2, #27
 801084c:	bf44      	itt	mi
 801084e:	2320      	movmi	r3, #32
 8010850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010854:	0711      	lsls	r1, r2, #28
 8010856:	bf44      	itt	mi
 8010858:	232b      	movmi	r3, #43	; 0x2b
 801085a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801085e:	f89a 3000 	ldrb.w	r3, [sl]
 8010862:	2b2a      	cmp	r3, #42	; 0x2a
 8010864:	d015      	beq.n	8010892 <_svfiprintf_r+0xf6>
 8010866:	9a07      	ldr	r2, [sp, #28]
 8010868:	4654      	mov	r4, sl
 801086a:	2000      	movs	r0, #0
 801086c:	f04f 0c0a 	mov.w	ip, #10
 8010870:	4621      	mov	r1, r4
 8010872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010876:	3b30      	subs	r3, #48	; 0x30
 8010878:	2b09      	cmp	r3, #9
 801087a:	d94e      	bls.n	801091a <_svfiprintf_r+0x17e>
 801087c:	b1b0      	cbz	r0, 80108ac <_svfiprintf_r+0x110>
 801087e:	9207      	str	r2, [sp, #28]
 8010880:	e014      	b.n	80108ac <_svfiprintf_r+0x110>
 8010882:	eba0 0308 	sub.w	r3, r0, r8
 8010886:	fa09 f303 	lsl.w	r3, r9, r3
 801088a:	4313      	orrs	r3, r2
 801088c:	9304      	str	r3, [sp, #16]
 801088e:	46a2      	mov	sl, r4
 8010890:	e7d2      	b.n	8010838 <_svfiprintf_r+0x9c>
 8010892:	9b03      	ldr	r3, [sp, #12]
 8010894:	1d19      	adds	r1, r3, #4
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	9103      	str	r1, [sp, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	bfbb      	ittet	lt
 801089e:	425b      	neglt	r3, r3
 80108a0:	f042 0202 	orrlt.w	r2, r2, #2
 80108a4:	9307      	strge	r3, [sp, #28]
 80108a6:	9307      	strlt	r3, [sp, #28]
 80108a8:	bfb8      	it	lt
 80108aa:	9204      	strlt	r2, [sp, #16]
 80108ac:	7823      	ldrb	r3, [r4, #0]
 80108ae:	2b2e      	cmp	r3, #46	; 0x2e
 80108b0:	d10c      	bne.n	80108cc <_svfiprintf_r+0x130>
 80108b2:	7863      	ldrb	r3, [r4, #1]
 80108b4:	2b2a      	cmp	r3, #42	; 0x2a
 80108b6:	d135      	bne.n	8010924 <_svfiprintf_r+0x188>
 80108b8:	9b03      	ldr	r3, [sp, #12]
 80108ba:	1d1a      	adds	r2, r3, #4
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	9203      	str	r2, [sp, #12]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	bfb8      	it	lt
 80108c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80108c8:	3402      	adds	r4, #2
 80108ca:	9305      	str	r3, [sp, #20]
 80108cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010998 <_svfiprintf_r+0x1fc>
 80108d0:	7821      	ldrb	r1, [r4, #0]
 80108d2:	2203      	movs	r2, #3
 80108d4:	4650      	mov	r0, sl
 80108d6:	f7ef fc8b 	bl	80001f0 <memchr>
 80108da:	b140      	cbz	r0, 80108ee <_svfiprintf_r+0x152>
 80108dc:	2340      	movs	r3, #64	; 0x40
 80108de:	eba0 000a 	sub.w	r0, r0, sl
 80108e2:	fa03 f000 	lsl.w	r0, r3, r0
 80108e6:	9b04      	ldr	r3, [sp, #16]
 80108e8:	4303      	orrs	r3, r0
 80108ea:	3401      	adds	r4, #1
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108f2:	4826      	ldr	r0, [pc, #152]	; (801098c <_svfiprintf_r+0x1f0>)
 80108f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108f8:	2206      	movs	r2, #6
 80108fa:	f7ef fc79 	bl	80001f0 <memchr>
 80108fe:	2800      	cmp	r0, #0
 8010900:	d038      	beq.n	8010974 <_svfiprintf_r+0x1d8>
 8010902:	4b23      	ldr	r3, [pc, #140]	; (8010990 <_svfiprintf_r+0x1f4>)
 8010904:	bb1b      	cbnz	r3, 801094e <_svfiprintf_r+0x1b2>
 8010906:	9b03      	ldr	r3, [sp, #12]
 8010908:	3307      	adds	r3, #7
 801090a:	f023 0307 	bic.w	r3, r3, #7
 801090e:	3308      	adds	r3, #8
 8010910:	9303      	str	r3, [sp, #12]
 8010912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010914:	4433      	add	r3, r6
 8010916:	9309      	str	r3, [sp, #36]	; 0x24
 8010918:	e767      	b.n	80107ea <_svfiprintf_r+0x4e>
 801091a:	fb0c 3202 	mla	r2, ip, r2, r3
 801091e:	460c      	mov	r4, r1
 8010920:	2001      	movs	r0, #1
 8010922:	e7a5      	b.n	8010870 <_svfiprintf_r+0xd4>
 8010924:	2300      	movs	r3, #0
 8010926:	3401      	adds	r4, #1
 8010928:	9305      	str	r3, [sp, #20]
 801092a:	4619      	mov	r1, r3
 801092c:	f04f 0c0a 	mov.w	ip, #10
 8010930:	4620      	mov	r0, r4
 8010932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010936:	3a30      	subs	r2, #48	; 0x30
 8010938:	2a09      	cmp	r2, #9
 801093a:	d903      	bls.n	8010944 <_svfiprintf_r+0x1a8>
 801093c:	2b00      	cmp	r3, #0
 801093e:	d0c5      	beq.n	80108cc <_svfiprintf_r+0x130>
 8010940:	9105      	str	r1, [sp, #20]
 8010942:	e7c3      	b.n	80108cc <_svfiprintf_r+0x130>
 8010944:	fb0c 2101 	mla	r1, ip, r1, r2
 8010948:	4604      	mov	r4, r0
 801094a:	2301      	movs	r3, #1
 801094c:	e7f0      	b.n	8010930 <_svfiprintf_r+0x194>
 801094e:	ab03      	add	r3, sp, #12
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	462a      	mov	r2, r5
 8010954:	4b0f      	ldr	r3, [pc, #60]	; (8010994 <_svfiprintf_r+0x1f8>)
 8010956:	a904      	add	r1, sp, #16
 8010958:	4638      	mov	r0, r7
 801095a:	f7fe f80f 	bl	800e97c <_printf_float>
 801095e:	1c42      	adds	r2, r0, #1
 8010960:	4606      	mov	r6, r0
 8010962:	d1d6      	bne.n	8010912 <_svfiprintf_r+0x176>
 8010964:	89ab      	ldrh	r3, [r5, #12]
 8010966:	065b      	lsls	r3, r3, #25
 8010968:	f53f af2c 	bmi.w	80107c4 <_svfiprintf_r+0x28>
 801096c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801096e:	b01d      	add	sp, #116	; 0x74
 8010970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010974:	ab03      	add	r3, sp, #12
 8010976:	9300      	str	r3, [sp, #0]
 8010978:	462a      	mov	r2, r5
 801097a:	4b06      	ldr	r3, [pc, #24]	; (8010994 <_svfiprintf_r+0x1f8>)
 801097c:	a904      	add	r1, sp, #16
 801097e:	4638      	mov	r0, r7
 8010980:	f7fe faa0 	bl	800eec4 <_printf_i>
 8010984:	e7eb      	b.n	801095e <_svfiprintf_r+0x1c2>
 8010986:	bf00      	nop
 8010988:	080118dc 	.word	0x080118dc
 801098c:	080118e6 	.word	0x080118e6
 8010990:	0800e97d 	.word	0x0800e97d
 8010994:	080106e5 	.word	0x080106e5
 8010998:	080118e2 	.word	0x080118e2

0801099c <_sbrk_r>:
 801099c:	b538      	push	{r3, r4, r5, lr}
 801099e:	4d06      	ldr	r5, [pc, #24]	; (80109b8 <_sbrk_r+0x1c>)
 80109a0:	2300      	movs	r3, #0
 80109a2:	4604      	mov	r4, r0
 80109a4:	4608      	mov	r0, r1
 80109a6:	602b      	str	r3, [r5, #0]
 80109a8:	f000 fe14 	bl	80115d4 <_sbrk>
 80109ac:	1c43      	adds	r3, r0, #1
 80109ae:	d102      	bne.n	80109b6 <_sbrk_r+0x1a>
 80109b0:	682b      	ldr	r3, [r5, #0]
 80109b2:	b103      	cbz	r3, 80109b6 <_sbrk_r+0x1a>
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	bd38      	pop	{r3, r4, r5, pc}
 80109b8:	20002678 	.word	0x20002678

080109bc <__assert_func>:
 80109bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109be:	4614      	mov	r4, r2
 80109c0:	461a      	mov	r2, r3
 80109c2:	4b09      	ldr	r3, [pc, #36]	; (80109e8 <__assert_func+0x2c>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4605      	mov	r5, r0
 80109c8:	68d8      	ldr	r0, [r3, #12]
 80109ca:	b14c      	cbz	r4, 80109e0 <__assert_func+0x24>
 80109cc:	4b07      	ldr	r3, [pc, #28]	; (80109ec <__assert_func+0x30>)
 80109ce:	9100      	str	r1, [sp, #0]
 80109d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80109d4:	4906      	ldr	r1, [pc, #24]	; (80109f0 <__assert_func+0x34>)
 80109d6:	462b      	mov	r3, r5
 80109d8:	f000 f80e 	bl	80109f8 <fiprintf>
 80109dc:	f000 faa4 	bl	8010f28 <abort>
 80109e0:	4b04      	ldr	r3, [pc, #16]	; (80109f4 <__assert_func+0x38>)
 80109e2:	461c      	mov	r4, r3
 80109e4:	e7f3      	b.n	80109ce <__assert_func+0x12>
 80109e6:	bf00      	nop
 80109e8:	20000180 	.word	0x20000180
 80109ec:	080118ed 	.word	0x080118ed
 80109f0:	080118fa 	.word	0x080118fa
 80109f4:	08011928 	.word	0x08011928

080109f8 <fiprintf>:
 80109f8:	b40e      	push	{r1, r2, r3}
 80109fa:	b503      	push	{r0, r1, lr}
 80109fc:	4601      	mov	r1, r0
 80109fe:	ab03      	add	r3, sp, #12
 8010a00:	4805      	ldr	r0, [pc, #20]	; (8010a18 <fiprintf+0x20>)
 8010a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a06:	6800      	ldr	r0, [r0, #0]
 8010a08:	9301      	str	r3, [sp, #4]
 8010a0a:	f000 f88f 	bl	8010b2c <_vfiprintf_r>
 8010a0e:	b002      	add	sp, #8
 8010a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a14:	b003      	add	sp, #12
 8010a16:	4770      	bx	lr
 8010a18:	20000180 	.word	0x20000180

08010a1c <__ascii_mbtowc>:
 8010a1c:	b082      	sub	sp, #8
 8010a1e:	b901      	cbnz	r1, 8010a22 <__ascii_mbtowc+0x6>
 8010a20:	a901      	add	r1, sp, #4
 8010a22:	b142      	cbz	r2, 8010a36 <__ascii_mbtowc+0x1a>
 8010a24:	b14b      	cbz	r3, 8010a3a <__ascii_mbtowc+0x1e>
 8010a26:	7813      	ldrb	r3, [r2, #0]
 8010a28:	600b      	str	r3, [r1, #0]
 8010a2a:	7812      	ldrb	r2, [r2, #0]
 8010a2c:	1e10      	subs	r0, r2, #0
 8010a2e:	bf18      	it	ne
 8010a30:	2001      	movne	r0, #1
 8010a32:	b002      	add	sp, #8
 8010a34:	4770      	bx	lr
 8010a36:	4610      	mov	r0, r2
 8010a38:	e7fb      	b.n	8010a32 <__ascii_mbtowc+0x16>
 8010a3a:	f06f 0001 	mvn.w	r0, #1
 8010a3e:	e7f8      	b.n	8010a32 <__ascii_mbtowc+0x16>

08010a40 <memmove>:
 8010a40:	4288      	cmp	r0, r1
 8010a42:	b510      	push	{r4, lr}
 8010a44:	eb01 0402 	add.w	r4, r1, r2
 8010a48:	d902      	bls.n	8010a50 <memmove+0x10>
 8010a4a:	4284      	cmp	r4, r0
 8010a4c:	4623      	mov	r3, r4
 8010a4e:	d807      	bhi.n	8010a60 <memmove+0x20>
 8010a50:	1e43      	subs	r3, r0, #1
 8010a52:	42a1      	cmp	r1, r4
 8010a54:	d008      	beq.n	8010a68 <memmove+0x28>
 8010a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a5e:	e7f8      	b.n	8010a52 <memmove+0x12>
 8010a60:	4402      	add	r2, r0
 8010a62:	4601      	mov	r1, r0
 8010a64:	428a      	cmp	r2, r1
 8010a66:	d100      	bne.n	8010a6a <memmove+0x2a>
 8010a68:	bd10      	pop	{r4, pc}
 8010a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a72:	e7f7      	b.n	8010a64 <memmove+0x24>

08010a74 <__malloc_lock>:
 8010a74:	4801      	ldr	r0, [pc, #4]	; (8010a7c <__malloc_lock+0x8>)
 8010a76:	f000 bc17 	b.w	80112a8 <__retarget_lock_acquire_recursive>
 8010a7a:	bf00      	nop
 8010a7c:	20002680 	.word	0x20002680

08010a80 <__malloc_unlock>:
 8010a80:	4801      	ldr	r0, [pc, #4]	; (8010a88 <__malloc_unlock+0x8>)
 8010a82:	f000 bc12 	b.w	80112aa <__retarget_lock_release_recursive>
 8010a86:	bf00      	nop
 8010a88:	20002680 	.word	0x20002680

08010a8c <_realloc_r>:
 8010a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8e:	4607      	mov	r7, r0
 8010a90:	4614      	mov	r4, r2
 8010a92:	460e      	mov	r6, r1
 8010a94:	b921      	cbnz	r1, 8010aa0 <_realloc_r+0x14>
 8010a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	f7ff bdc8 	b.w	8010630 <_malloc_r>
 8010aa0:	b922      	cbnz	r2, 8010aac <_realloc_r+0x20>
 8010aa2:	f7ff fd75 	bl	8010590 <_free_r>
 8010aa6:	4625      	mov	r5, r4
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aac:	f000 fc62 	bl	8011374 <_malloc_usable_size_r>
 8010ab0:	42a0      	cmp	r0, r4
 8010ab2:	d20f      	bcs.n	8010ad4 <_realloc_r+0x48>
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	f7ff fdba 	bl	8010630 <_malloc_r>
 8010abc:	4605      	mov	r5, r0
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d0f2      	beq.n	8010aa8 <_realloc_r+0x1c>
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	f7ff f9c7 	bl	800fe58 <memcpy>
 8010aca:	4631      	mov	r1, r6
 8010acc:	4638      	mov	r0, r7
 8010ace:	f7ff fd5f 	bl	8010590 <_free_r>
 8010ad2:	e7e9      	b.n	8010aa8 <_realloc_r+0x1c>
 8010ad4:	4635      	mov	r5, r6
 8010ad6:	e7e7      	b.n	8010aa8 <_realloc_r+0x1c>

08010ad8 <__sfputc_r>:
 8010ad8:	6893      	ldr	r3, [r2, #8]
 8010ada:	3b01      	subs	r3, #1
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	b410      	push	{r4}
 8010ae0:	6093      	str	r3, [r2, #8]
 8010ae2:	da08      	bge.n	8010af6 <__sfputc_r+0x1e>
 8010ae4:	6994      	ldr	r4, [r2, #24]
 8010ae6:	42a3      	cmp	r3, r4
 8010ae8:	db01      	blt.n	8010aee <__sfputc_r+0x16>
 8010aea:	290a      	cmp	r1, #10
 8010aec:	d103      	bne.n	8010af6 <__sfputc_r+0x1e>
 8010aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010af2:	f000 b94b 	b.w	8010d8c <__swbuf_r>
 8010af6:	6813      	ldr	r3, [r2, #0]
 8010af8:	1c58      	adds	r0, r3, #1
 8010afa:	6010      	str	r0, [r2, #0]
 8010afc:	7019      	strb	r1, [r3, #0]
 8010afe:	4608      	mov	r0, r1
 8010b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b04:	4770      	bx	lr

08010b06 <__sfputs_r>:
 8010b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b08:	4606      	mov	r6, r0
 8010b0a:	460f      	mov	r7, r1
 8010b0c:	4614      	mov	r4, r2
 8010b0e:	18d5      	adds	r5, r2, r3
 8010b10:	42ac      	cmp	r4, r5
 8010b12:	d101      	bne.n	8010b18 <__sfputs_r+0x12>
 8010b14:	2000      	movs	r0, #0
 8010b16:	e007      	b.n	8010b28 <__sfputs_r+0x22>
 8010b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b1c:	463a      	mov	r2, r7
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f7ff ffda 	bl	8010ad8 <__sfputc_r>
 8010b24:	1c43      	adds	r3, r0, #1
 8010b26:	d1f3      	bne.n	8010b10 <__sfputs_r+0xa>
 8010b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b2c <_vfiprintf_r>:
 8010b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b30:	460d      	mov	r5, r1
 8010b32:	b09d      	sub	sp, #116	; 0x74
 8010b34:	4614      	mov	r4, r2
 8010b36:	4698      	mov	r8, r3
 8010b38:	4606      	mov	r6, r0
 8010b3a:	b118      	cbz	r0, 8010b44 <_vfiprintf_r+0x18>
 8010b3c:	6983      	ldr	r3, [r0, #24]
 8010b3e:	b90b      	cbnz	r3, 8010b44 <_vfiprintf_r+0x18>
 8010b40:	f000 fb14 	bl	801116c <__sinit>
 8010b44:	4b89      	ldr	r3, [pc, #548]	; (8010d6c <_vfiprintf_r+0x240>)
 8010b46:	429d      	cmp	r5, r3
 8010b48:	d11b      	bne.n	8010b82 <_vfiprintf_r+0x56>
 8010b4a:	6875      	ldr	r5, [r6, #4]
 8010b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b4e:	07d9      	lsls	r1, r3, #31
 8010b50:	d405      	bmi.n	8010b5e <_vfiprintf_r+0x32>
 8010b52:	89ab      	ldrh	r3, [r5, #12]
 8010b54:	059a      	lsls	r2, r3, #22
 8010b56:	d402      	bmi.n	8010b5e <_vfiprintf_r+0x32>
 8010b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b5a:	f000 fba5 	bl	80112a8 <__retarget_lock_acquire_recursive>
 8010b5e:	89ab      	ldrh	r3, [r5, #12]
 8010b60:	071b      	lsls	r3, r3, #28
 8010b62:	d501      	bpl.n	8010b68 <_vfiprintf_r+0x3c>
 8010b64:	692b      	ldr	r3, [r5, #16]
 8010b66:	b9eb      	cbnz	r3, 8010ba4 <_vfiprintf_r+0x78>
 8010b68:	4629      	mov	r1, r5
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f000 f96e 	bl	8010e4c <__swsetup_r>
 8010b70:	b1c0      	cbz	r0, 8010ba4 <_vfiprintf_r+0x78>
 8010b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b74:	07dc      	lsls	r4, r3, #31
 8010b76:	d50e      	bpl.n	8010b96 <_vfiprintf_r+0x6a>
 8010b78:	f04f 30ff 	mov.w	r0, #4294967295
 8010b7c:	b01d      	add	sp, #116	; 0x74
 8010b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b82:	4b7b      	ldr	r3, [pc, #492]	; (8010d70 <_vfiprintf_r+0x244>)
 8010b84:	429d      	cmp	r5, r3
 8010b86:	d101      	bne.n	8010b8c <_vfiprintf_r+0x60>
 8010b88:	68b5      	ldr	r5, [r6, #8]
 8010b8a:	e7df      	b.n	8010b4c <_vfiprintf_r+0x20>
 8010b8c:	4b79      	ldr	r3, [pc, #484]	; (8010d74 <_vfiprintf_r+0x248>)
 8010b8e:	429d      	cmp	r5, r3
 8010b90:	bf08      	it	eq
 8010b92:	68f5      	ldreq	r5, [r6, #12]
 8010b94:	e7da      	b.n	8010b4c <_vfiprintf_r+0x20>
 8010b96:	89ab      	ldrh	r3, [r5, #12]
 8010b98:	0598      	lsls	r0, r3, #22
 8010b9a:	d4ed      	bmi.n	8010b78 <_vfiprintf_r+0x4c>
 8010b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b9e:	f000 fb84 	bl	80112aa <__retarget_lock_release_recursive>
 8010ba2:	e7e9      	b.n	8010b78 <_vfiprintf_r+0x4c>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ba8:	2320      	movs	r3, #32
 8010baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bb2:	2330      	movs	r3, #48	; 0x30
 8010bb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010d78 <_vfiprintf_r+0x24c>
 8010bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bbc:	f04f 0901 	mov.w	r9, #1
 8010bc0:	4623      	mov	r3, r4
 8010bc2:	469a      	mov	sl, r3
 8010bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bc8:	b10a      	cbz	r2, 8010bce <_vfiprintf_r+0xa2>
 8010bca:	2a25      	cmp	r2, #37	; 0x25
 8010bcc:	d1f9      	bne.n	8010bc2 <_vfiprintf_r+0x96>
 8010bce:	ebba 0b04 	subs.w	fp, sl, r4
 8010bd2:	d00b      	beq.n	8010bec <_vfiprintf_r+0xc0>
 8010bd4:	465b      	mov	r3, fp
 8010bd6:	4622      	mov	r2, r4
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f7ff ff93 	bl	8010b06 <__sfputs_r>
 8010be0:	3001      	adds	r0, #1
 8010be2:	f000 80aa 	beq.w	8010d3a <_vfiprintf_r+0x20e>
 8010be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010be8:	445a      	add	r2, fp
 8010bea:	9209      	str	r2, [sp, #36]	; 0x24
 8010bec:	f89a 3000 	ldrb.w	r3, [sl]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f000 80a2 	beq.w	8010d3a <_vfiprintf_r+0x20e>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c00:	f10a 0a01 	add.w	sl, sl, #1
 8010c04:	9304      	str	r3, [sp, #16]
 8010c06:	9307      	str	r3, [sp, #28]
 8010c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8010c0e:	4654      	mov	r4, sl
 8010c10:	2205      	movs	r2, #5
 8010c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c16:	4858      	ldr	r0, [pc, #352]	; (8010d78 <_vfiprintf_r+0x24c>)
 8010c18:	f7ef faea 	bl	80001f0 <memchr>
 8010c1c:	9a04      	ldr	r2, [sp, #16]
 8010c1e:	b9d8      	cbnz	r0, 8010c58 <_vfiprintf_r+0x12c>
 8010c20:	06d1      	lsls	r1, r2, #27
 8010c22:	bf44      	itt	mi
 8010c24:	2320      	movmi	r3, #32
 8010c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c2a:	0713      	lsls	r3, r2, #28
 8010c2c:	bf44      	itt	mi
 8010c2e:	232b      	movmi	r3, #43	; 0x2b
 8010c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c34:	f89a 3000 	ldrb.w	r3, [sl]
 8010c38:	2b2a      	cmp	r3, #42	; 0x2a
 8010c3a:	d015      	beq.n	8010c68 <_vfiprintf_r+0x13c>
 8010c3c:	9a07      	ldr	r2, [sp, #28]
 8010c3e:	4654      	mov	r4, sl
 8010c40:	2000      	movs	r0, #0
 8010c42:	f04f 0c0a 	mov.w	ip, #10
 8010c46:	4621      	mov	r1, r4
 8010c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c4c:	3b30      	subs	r3, #48	; 0x30
 8010c4e:	2b09      	cmp	r3, #9
 8010c50:	d94e      	bls.n	8010cf0 <_vfiprintf_r+0x1c4>
 8010c52:	b1b0      	cbz	r0, 8010c82 <_vfiprintf_r+0x156>
 8010c54:	9207      	str	r2, [sp, #28]
 8010c56:	e014      	b.n	8010c82 <_vfiprintf_r+0x156>
 8010c58:	eba0 0308 	sub.w	r3, r0, r8
 8010c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8010c60:	4313      	orrs	r3, r2
 8010c62:	9304      	str	r3, [sp, #16]
 8010c64:	46a2      	mov	sl, r4
 8010c66:	e7d2      	b.n	8010c0e <_vfiprintf_r+0xe2>
 8010c68:	9b03      	ldr	r3, [sp, #12]
 8010c6a:	1d19      	adds	r1, r3, #4
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	9103      	str	r1, [sp, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	bfbb      	ittet	lt
 8010c74:	425b      	neglt	r3, r3
 8010c76:	f042 0202 	orrlt.w	r2, r2, #2
 8010c7a:	9307      	strge	r3, [sp, #28]
 8010c7c:	9307      	strlt	r3, [sp, #28]
 8010c7e:	bfb8      	it	lt
 8010c80:	9204      	strlt	r2, [sp, #16]
 8010c82:	7823      	ldrb	r3, [r4, #0]
 8010c84:	2b2e      	cmp	r3, #46	; 0x2e
 8010c86:	d10c      	bne.n	8010ca2 <_vfiprintf_r+0x176>
 8010c88:	7863      	ldrb	r3, [r4, #1]
 8010c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8010c8c:	d135      	bne.n	8010cfa <_vfiprintf_r+0x1ce>
 8010c8e:	9b03      	ldr	r3, [sp, #12]
 8010c90:	1d1a      	adds	r2, r3, #4
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	9203      	str	r2, [sp, #12]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	bfb8      	it	lt
 8010c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c9e:	3402      	adds	r4, #2
 8010ca0:	9305      	str	r3, [sp, #20]
 8010ca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010d88 <_vfiprintf_r+0x25c>
 8010ca6:	7821      	ldrb	r1, [r4, #0]
 8010ca8:	2203      	movs	r2, #3
 8010caa:	4650      	mov	r0, sl
 8010cac:	f7ef faa0 	bl	80001f0 <memchr>
 8010cb0:	b140      	cbz	r0, 8010cc4 <_vfiprintf_r+0x198>
 8010cb2:	2340      	movs	r3, #64	; 0x40
 8010cb4:	eba0 000a 	sub.w	r0, r0, sl
 8010cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8010cbc:	9b04      	ldr	r3, [sp, #16]
 8010cbe:	4303      	orrs	r3, r0
 8010cc0:	3401      	adds	r4, #1
 8010cc2:	9304      	str	r3, [sp, #16]
 8010cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc8:	482c      	ldr	r0, [pc, #176]	; (8010d7c <_vfiprintf_r+0x250>)
 8010cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cce:	2206      	movs	r2, #6
 8010cd0:	f7ef fa8e 	bl	80001f0 <memchr>
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d03f      	beq.n	8010d58 <_vfiprintf_r+0x22c>
 8010cd8:	4b29      	ldr	r3, [pc, #164]	; (8010d80 <_vfiprintf_r+0x254>)
 8010cda:	bb1b      	cbnz	r3, 8010d24 <_vfiprintf_r+0x1f8>
 8010cdc:	9b03      	ldr	r3, [sp, #12]
 8010cde:	3307      	adds	r3, #7
 8010ce0:	f023 0307 	bic.w	r3, r3, #7
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	9303      	str	r3, [sp, #12]
 8010ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cea:	443b      	add	r3, r7
 8010cec:	9309      	str	r3, [sp, #36]	; 0x24
 8010cee:	e767      	b.n	8010bc0 <_vfiprintf_r+0x94>
 8010cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cf4:	460c      	mov	r4, r1
 8010cf6:	2001      	movs	r0, #1
 8010cf8:	e7a5      	b.n	8010c46 <_vfiprintf_r+0x11a>
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	3401      	adds	r4, #1
 8010cfe:	9305      	str	r3, [sp, #20]
 8010d00:	4619      	mov	r1, r3
 8010d02:	f04f 0c0a 	mov.w	ip, #10
 8010d06:	4620      	mov	r0, r4
 8010d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d0c:	3a30      	subs	r2, #48	; 0x30
 8010d0e:	2a09      	cmp	r2, #9
 8010d10:	d903      	bls.n	8010d1a <_vfiprintf_r+0x1ee>
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d0c5      	beq.n	8010ca2 <_vfiprintf_r+0x176>
 8010d16:	9105      	str	r1, [sp, #20]
 8010d18:	e7c3      	b.n	8010ca2 <_vfiprintf_r+0x176>
 8010d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d1e:	4604      	mov	r4, r0
 8010d20:	2301      	movs	r3, #1
 8010d22:	e7f0      	b.n	8010d06 <_vfiprintf_r+0x1da>
 8010d24:	ab03      	add	r3, sp, #12
 8010d26:	9300      	str	r3, [sp, #0]
 8010d28:	462a      	mov	r2, r5
 8010d2a:	4b16      	ldr	r3, [pc, #88]	; (8010d84 <_vfiprintf_r+0x258>)
 8010d2c:	a904      	add	r1, sp, #16
 8010d2e:	4630      	mov	r0, r6
 8010d30:	f7fd fe24 	bl	800e97c <_printf_float>
 8010d34:	4607      	mov	r7, r0
 8010d36:	1c78      	adds	r0, r7, #1
 8010d38:	d1d6      	bne.n	8010ce8 <_vfiprintf_r+0x1bc>
 8010d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d3c:	07d9      	lsls	r1, r3, #31
 8010d3e:	d405      	bmi.n	8010d4c <_vfiprintf_r+0x220>
 8010d40:	89ab      	ldrh	r3, [r5, #12]
 8010d42:	059a      	lsls	r2, r3, #22
 8010d44:	d402      	bmi.n	8010d4c <_vfiprintf_r+0x220>
 8010d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d48:	f000 faaf 	bl	80112aa <__retarget_lock_release_recursive>
 8010d4c:	89ab      	ldrh	r3, [r5, #12]
 8010d4e:	065b      	lsls	r3, r3, #25
 8010d50:	f53f af12 	bmi.w	8010b78 <_vfiprintf_r+0x4c>
 8010d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d56:	e711      	b.n	8010b7c <_vfiprintf_r+0x50>
 8010d58:	ab03      	add	r3, sp, #12
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	462a      	mov	r2, r5
 8010d5e:	4b09      	ldr	r3, [pc, #36]	; (8010d84 <_vfiprintf_r+0x258>)
 8010d60:	a904      	add	r1, sp, #16
 8010d62:	4630      	mov	r0, r6
 8010d64:	f7fe f8ae 	bl	800eec4 <_printf_i>
 8010d68:	e7e4      	b.n	8010d34 <_vfiprintf_r+0x208>
 8010d6a:	bf00      	nop
 8010d6c:	08011a54 	.word	0x08011a54
 8010d70:	08011a74 	.word	0x08011a74
 8010d74:	08011a34 	.word	0x08011a34
 8010d78:	080118dc 	.word	0x080118dc
 8010d7c:	080118e6 	.word	0x080118e6
 8010d80:	0800e97d 	.word	0x0800e97d
 8010d84:	08010b07 	.word	0x08010b07
 8010d88:	080118e2 	.word	0x080118e2

08010d8c <__swbuf_r>:
 8010d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8e:	460e      	mov	r6, r1
 8010d90:	4614      	mov	r4, r2
 8010d92:	4605      	mov	r5, r0
 8010d94:	b118      	cbz	r0, 8010d9e <__swbuf_r+0x12>
 8010d96:	6983      	ldr	r3, [r0, #24]
 8010d98:	b90b      	cbnz	r3, 8010d9e <__swbuf_r+0x12>
 8010d9a:	f000 f9e7 	bl	801116c <__sinit>
 8010d9e:	4b21      	ldr	r3, [pc, #132]	; (8010e24 <__swbuf_r+0x98>)
 8010da0:	429c      	cmp	r4, r3
 8010da2:	d12b      	bne.n	8010dfc <__swbuf_r+0x70>
 8010da4:	686c      	ldr	r4, [r5, #4]
 8010da6:	69a3      	ldr	r3, [r4, #24]
 8010da8:	60a3      	str	r3, [r4, #8]
 8010daa:	89a3      	ldrh	r3, [r4, #12]
 8010dac:	071a      	lsls	r2, r3, #28
 8010dae:	d52f      	bpl.n	8010e10 <__swbuf_r+0x84>
 8010db0:	6923      	ldr	r3, [r4, #16]
 8010db2:	b36b      	cbz	r3, 8010e10 <__swbuf_r+0x84>
 8010db4:	6923      	ldr	r3, [r4, #16]
 8010db6:	6820      	ldr	r0, [r4, #0]
 8010db8:	1ac0      	subs	r0, r0, r3
 8010dba:	6963      	ldr	r3, [r4, #20]
 8010dbc:	b2f6      	uxtb	r6, r6
 8010dbe:	4283      	cmp	r3, r0
 8010dc0:	4637      	mov	r7, r6
 8010dc2:	dc04      	bgt.n	8010dce <__swbuf_r+0x42>
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 f93c 	bl	8011044 <_fflush_r>
 8010dcc:	bb30      	cbnz	r0, 8010e1c <__swbuf_r+0x90>
 8010dce:	68a3      	ldr	r3, [r4, #8]
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	60a3      	str	r3, [r4, #8]
 8010dd4:	6823      	ldr	r3, [r4, #0]
 8010dd6:	1c5a      	adds	r2, r3, #1
 8010dd8:	6022      	str	r2, [r4, #0]
 8010dda:	701e      	strb	r6, [r3, #0]
 8010ddc:	6963      	ldr	r3, [r4, #20]
 8010dde:	3001      	adds	r0, #1
 8010de0:	4283      	cmp	r3, r0
 8010de2:	d004      	beq.n	8010dee <__swbuf_r+0x62>
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	07db      	lsls	r3, r3, #31
 8010de8:	d506      	bpl.n	8010df8 <__swbuf_r+0x6c>
 8010dea:	2e0a      	cmp	r6, #10
 8010dec:	d104      	bne.n	8010df8 <__swbuf_r+0x6c>
 8010dee:	4621      	mov	r1, r4
 8010df0:	4628      	mov	r0, r5
 8010df2:	f000 f927 	bl	8011044 <_fflush_r>
 8010df6:	b988      	cbnz	r0, 8010e1c <__swbuf_r+0x90>
 8010df8:	4638      	mov	r0, r7
 8010dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dfc:	4b0a      	ldr	r3, [pc, #40]	; (8010e28 <__swbuf_r+0x9c>)
 8010dfe:	429c      	cmp	r4, r3
 8010e00:	d101      	bne.n	8010e06 <__swbuf_r+0x7a>
 8010e02:	68ac      	ldr	r4, [r5, #8]
 8010e04:	e7cf      	b.n	8010da6 <__swbuf_r+0x1a>
 8010e06:	4b09      	ldr	r3, [pc, #36]	; (8010e2c <__swbuf_r+0xa0>)
 8010e08:	429c      	cmp	r4, r3
 8010e0a:	bf08      	it	eq
 8010e0c:	68ec      	ldreq	r4, [r5, #12]
 8010e0e:	e7ca      	b.n	8010da6 <__swbuf_r+0x1a>
 8010e10:	4621      	mov	r1, r4
 8010e12:	4628      	mov	r0, r5
 8010e14:	f000 f81a 	bl	8010e4c <__swsetup_r>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d0cb      	beq.n	8010db4 <__swbuf_r+0x28>
 8010e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8010e20:	e7ea      	b.n	8010df8 <__swbuf_r+0x6c>
 8010e22:	bf00      	nop
 8010e24:	08011a54 	.word	0x08011a54
 8010e28:	08011a74 	.word	0x08011a74
 8010e2c:	08011a34 	.word	0x08011a34

08010e30 <__ascii_wctomb>:
 8010e30:	b149      	cbz	r1, 8010e46 <__ascii_wctomb+0x16>
 8010e32:	2aff      	cmp	r2, #255	; 0xff
 8010e34:	bf85      	ittet	hi
 8010e36:	238a      	movhi	r3, #138	; 0x8a
 8010e38:	6003      	strhi	r3, [r0, #0]
 8010e3a:	700a      	strbls	r2, [r1, #0]
 8010e3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e40:	bf98      	it	ls
 8010e42:	2001      	movls	r0, #1
 8010e44:	4770      	bx	lr
 8010e46:	4608      	mov	r0, r1
 8010e48:	4770      	bx	lr
	...

08010e4c <__swsetup_r>:
 8010e4c:	4b32      	ldr	r3, [pc, #200]	; (8010f18 <__swsetup_r+0xcc>)
 8010e4e:	b570      	push	{r4, r5, r6, lr}
 8010e50:	681d      	ldr	r5, [r3, #0]
 8010e52:	4606      	mov	r6, r0
 8010e54:	460c      	mov	r4, r1
 8010e56:	b125      	cbz	r5, 8010e62 <__swsetup_r+0x16>
 8010e58:	69ab      	ldr	r3, [r5, #24]
 8010e5a:	b913      	cbnz	r3, 8010e62 <__swsetup_r+0x16>
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	f000 f985 	bl	801116c <__sinit>
 8010e62:	4b2e      	ldr	r3, [pc, #184]	; (8010f1c <__swsetup_r+0xd0>)
 8010e64:	429c      	cmp	r4, r3
 8010e66:	d10f      	bne.n	8010e88 <__swsetup_r+0x3c>
 8010e68:	686c      	ldr	r4, [r5, #4]
 8010e6a:	89a3      	ldrh	r3, [r4, #12]
 8010e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e70:	0719      	lsls	r1, r3, #28
 8010e72:	d42c      	bmi.n	8010ece <__swsetup_r+0x82>
 8010e74:	06dd      	lsls	r5, r3, #27
 8010e76:	d411      	bmi.n	8010e9c <__swsetup_r+0x50>
 8010e78:	2309      	movs	r3, #9
 8010e7a:	6033      	str	r3, [r6, #0]
 8010e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010e80:	81a3      	strh	r3, [r4, #12]
 8010e82:	f04f 30ff 	mov.w	r0, #4294967295
 8010e86:	e03e      	b.n	8010f06 <__swsetup_r+0xba>
 8010e88:	4b25      	ldr	r3, [pc, #148]	; (8010f20 <__swsetup_r+0xd4>)
 8010e8a:	429c      	cmp	r4, r3
 8010e8c:	d101      	bne.n	8010e92 <__swsetup_r+0x46>
 8010e8e:	68ac      	ldr	r4, [r5, #8]
 8010e90:	e7eb      	b.n	8010e6a <__swsetup_r+0x1e>
 8010e92:	4b24      	ldr	r3, [pc, #144]	; (8010f24 <__swsetup_r+0xd8>)
 8010e94:	429c      	cmp	r4, r3
 8010e96:	bf08      	it	eq
 8010e98:	68ec      	ldreq	r4, [r5, #12]
 8010e9a:	e7e6      	b.n	8010e6a <__swsetup_r+0x1e>
 8010e9c:	0758      	lsls	r0, r3, #29
 8010e9e:	d512      	bpl.n	8010ec6 <__swsetup_r+0x7a>
 8010ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ea2:	b141      	cbz	r1, 8010eb6 <__swsetup_r+0x6a>
 8010ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ea8:	4299      	cmp	r1, r3
 8010eaa:	d002      	beq.n	8010eb2 <__swsetup_r+0x66>
 8010eac:	4630      	mov	r0, r6
 8010eae:	f7ff fb6f 	bl	8010590 <_free_r>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8010eb6:	89a3      	ldrh	r3, [r4, #12]
 8010eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010ebc:	81a3      	strh	r3, [r4, #12]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	6063      	str	r3, [r4, #4]
 8010ec2:	6923      	ldr	r3, [r4, #16]
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	89a3      	ldrh	r3, [r4, #12]
 8010ec8:	f043 0308 	orr.w	r3, r3, #8
 8010ecc:	81a3      	strh	r3, [r4, #12]
 8010ece:	6923      	ldr	r3, [r4, #16]
 8010ed0:	b94b      	cbnz	r3, 8010ee6 <__swsetup_r+0x9a>
 8010ed2:	89a3      	ldrh	r3, [r4, #12]
 8010ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010edc:	d003      	beq.n	8010ee6 <__swsetup_r+0x9a>
 8010ede:	4621      	mov	r1, r4
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	f000 fa07 	bl	80112f4 <__smakebuf_r>
 8010ee6:	89a0      	ldrh	r0, [r4, #12]
 8010ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010eec:	f010 0301 	ands.w	r3, r0, #1
 8010ef0:	d00a      	beq.n	8010f08 <__swsetup_r+0xbc>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60a3      	str	r3, [r4, #8]
 8010ef6:	6963      	ldr	r3, [r4, #20]
 8010ef8:	425b      	negs	r3, r3
 8010efa:	61a3      	str	r3, [r4, #24]
 8010efc:	6923      	ldr	r3, [r4, #16]
 8010efe:	b943      	cbnz	r3, 8010f12 <__swsetup_r+0xc6>
 8010f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f04:	d1ba      	bne.n	8010e7c <__swsetup_r+0x30>
 8010f06:	bd70      	pop	{r4, r5, r6, pc}
 8010f08:	0781      	lsls	r1, r0, #30
 8010f0a:	bf58      	it	pl
 8010f0c:	6963      	ldrpl	r3, [r4, #20]
 8010f0e:	60a3      	str	r3, [r4, #8]
 8010f10:	e7f4      	b.n	8010efc <__swsetup_r+0xb0>
 8010f12:	2000      	movs	r0, #0
 8010f14:	e7f7      	b.n	8010f06 <__swsetup_r+0xba>
 8010f16:	bf00      	nop
 8010f18:	20000180 	.word	0x20000180
 8010f1c:	08011a54 	.word	0x08011a54
 8010f20:	08011a74 	.word	0x08011a74
 8010f24:	08011a34 	.word	0x08011a34

08010f28 <abort>:
 8010f28:	b508      	push	{r3, lr}
 8010f2a:	2006      	movs	r0, #6
 8010f2c:	f000 fa52 	bl	80113d4 <raise>
 8010f30:	2001      	movs	r0, #1
 8010f32:	f000 fb65 	bl	8011600 <_exit>
	...

08010f38 <__sflush_r>:
 8010f38:	898a      	ldrh	r2, [r1, #12]
 8010f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3e:	4605      	mov	r5, r0
 8010f40:	0710      	lsls	r0, r2, #28
 8010f42:	460c      	mov	r4, r1
 8010f44:	d458      	bmi.n	8010ff8 <__sflush_r+0xc0>
 8010f46:	684b      	ldr	r3, [r1, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	dc05      	bgt.n	8010f58 <__sflush_r+0x20>
 8010f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	dc02      	bgt.n	8010f58 <__sflush_r+0x20>
 8010f52:	2000      	movs	r0, #0
 8010f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f5a:	2e00      	cmp	r6, #0
 8010f5c:	d0f9      	beq.n	8010f52 <__sflush_r+0x1a>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f64:	682f      	ldr	r7, [r5, #0]
 8010f66:	602b      	str	r3, [r5, #0]
 8010f68:	d032      	beq.n	8010fd0 <__sflush_r+0x98>
 8010f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f6c:	89a3      	ldrh	r3, [r4, #12]
 8010f6e:	075a      	lsls	r2, r3, #29
 8010f70:	d505      	bpl.n	8010f7e <__sflush_r+0x46>
 8010f72:	6863      	ldr	r3, [r4, #4]
 8010f74:	1ac0      	subs	r0, r0, r3
 8010f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f78:	b10b      	cbz	r3, 8010f7e <__sflush_r+0x46>
 8010f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f7c:	1ac0      	subs	r0, r0, r3
 8010f7e:	2300      	movs	r3, #0
 8010f80:	4602      	mov	r2, r0
 8010f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f84:	6a21      	ldr	r1, [r4, #32]
 8010f86:	4628      	mov	r0, r5
 8010f88:	47b0      	blx	r6
 8010f8a:	1c43      	adds	r3, r0, #1
 8010f8c:	89a3      	ldrh	r3, [r4, #12]
 8010f8e:	d106      	bne.n	8010f9e <__sflush_r+0x66>
 8010f90:	6829      	ldr	r1, [r5, #0]
 8010f92:	291d      	cmp	r1, #29
 8010f94:	d82c      	bhi.n	8010ff0 <__sflush_r+0xb8>
 8010f96:	4a2a      	ldr	r2, [pc, #168]	; (8011040 <__sflush_r+0x108>)
 8010f98:	40ca      	lsrs	r2, r1
 8010f9a:	07d6      	lsls	r6, r2, #31
 8010f9c:	d528      	bpl.n	8010ff0 <__sflush_r+0xb8>
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	6062      	str	r2, [r4, #4]
 8010fa2:	04d9      	lsls	r1, r3, #19
 8010fa4:	6922      	ldr	r2, [r4, #16]
 8010fa6:	6022      	str	r2, [r4, #0]
 8010fa8:	d504      	bpl.n	8010fb4 <__sflush_r+0x7c>
 8010faa:	1c42      	adds	r2, r0, #1
 8010fac:	d101      	bne.n	8010fb2 <__sflush_r+0x7a>
 8010fae:	682b      	ldr	r3, [r5, #0]
 8010fb0:	b903      	cbnz	r3, 8010fb4 <__sflush_r+0x7c>
 8010fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8010fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fb6:	602f      	str	r7, [r5, #0]
 8010fb8:	2900      	cmp	r1, #0
 8010fba:	d0ca      	beq.n	8010f52 <__sflush_r+0x1a>
 8010fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fc0:	4299      	cmp	r1, r3
 8010fc2:	d002      	beq.n	8010fca <__sflush_r+0x92>
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	f7ff fae3 	bl	8010590 <_free_r>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8010fce:	e7c1      	b.n	8010f54 <__sflush_r+0x1c>
 8010fd0:	6a21      	ldr	r1, [r4, #32]
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	47b0      	blx	r6
 8010fd8:	1c41      	adds	r1, r0, #1
 8010fda:	d1c7      	bne.n	8010f6c <__sflush_r+0x34>
 8010fdc:	682b      	ldr	r3, [r5, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d0c4      	beq.n	8010f6c <__sflush_r+0x34>
 8010fe2:	2b1d      	cmp	r3, #29
 8010fe4:	d001      	beq.n	8010fea <__sflush_r+0xb2>
 8010fe6:	2b16      	cmp	r3, #22
 8010fe8:	d101      	bne.n	8010fee <__sflush_r+0xb6>
 8010fea:	602f      	str	r7, [r5, #0]
 8010fec:	e7b1      	b.n	8010f52 <__sflush_r+0x1a>
 8010fee:	89a3      	ldrh	r3, [r4, #12]
 8010ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ff4:	81a3      	strh	r3, [r4, #12]
 8010ff6:	e7ad      	b.n	8010f54 <__sflush_r+0x1c>
 8010ff8:	690f      	ldr	r7, [r1, #16]
 8010ffa:	2f00      	cmp	r7, #0
 8010ffc:	d0a9      	beq.n	8010f52 <__sflush_r+0x1a>
 8010ffe:	0793      	lsls	r3, r2, #30
 8011000:	680e      	ldr	r6, [r1, #0]
 8011002:	bf08      	it	eq
 8011004:	694b      	ldreq	r3, [r1, #20]
 8011006:	600f      	str	r7, [r1, #0]
 8011008:	bf18      	it	ne
 801100a:	2300      	movne	r3, #0
 801100c:	eba6 0807 	sub.w	r8, r6, r7
 8011010:	608b      	str	r3, [r1, #8]
 8011012:	f1b8 0f00 	cmp.w	r8, #0
 8011016:	dd9c      	ble.n	8010f52 <__sflush_r+0x1a>
 8011018:	6a21      	ldr	r1, [r4, #32]
 801101a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801101c:	4643      	mov	r3, r8
 801101e:	463a      	mov	r2, r7
 8011020:	4628      	mov	r0, r5
 8011022:	47b0      	blx	r6
 8011024:	2800      	cmp	r0, #0
 8011026:	dc06      	bgt.n	8011036 <__sflush_r+0xfe>
 8011028:	89a3      	ldrh	r3, [r4, #12]
 801102a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801102e:	81a3      	strh	r3, [r4, #12]
 8011030:	f04f 30ff 	mov.w	r0, #4294967295
 8011034:	e78e      	b.n	8010f54 <__sflush_r+0x1c>
 8011036:	4407      	add	r7, r0
 8011038:	eba8 0800 	sub.w	r8, r8, r0
 801103c:	e7e9      	b.n	8011012 <__sflush_r+0xda>
 801103e:	bf00      	nop
 8011040:	20400001 	.word	0x20400001

08011044 <_fflush_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	690b      	ldr	r3, [r1, #16]
 8011048:	4605      	mov	r5, r0
 801104a:	460c      	mov	r4, r1
 801104c:	b913      	cbnz	r3, 8011054 <_fflush_r+0x10>
 801104e:	2500      	movs	r5, #0
 8011050:	4628      	mov	r0, r5
 8011052:	bd38      	pop	{r3, r4, r5, pc}
 8011054:	b118      	cbz	r0, 801105e <_fflush_r+0x1a>
 8011056:	6983      	ldr	r3, [r0, #24]
 8011058:	b90b      	cbnz	r3, 801105e <_fflush_r+0x1a>
 801105a:	f000 f887 	bl	801116c <__sinit>
 801105e:	4b14      	ldr	r3, [pc, #80]	; (80110b0 <_fflush_r+0x6c>)
 8011060:	429c      	cmp	r4, r3
 8011062:	d11b      	bne.n	801109c <_fflush_r+0x58>
 8011064:	686c      	ldr	r4, [r5, #4]
 8011066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d0ef      	beq.n	801104e <_fflush_r+0xa>
 801106e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011070:	07d0      	lsls	r0, r2, #31
 8011072:	d404      	bmi.n	801107e <_fflush_r+0x3a>
 8011074:	0599      	lsls	r1, r3, #22
 8011076:	d402      	bmi.n	801107e <_fflush_r+0x3a>
 8011078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801107a:	f000 f915 	bl	80112a8 <__retarget_lock_acquire_recursive>
 801107e:	4628      	mov	r0, r5
 8011080:	4621      	mov	r1, r4
 8011082:	f7ff ff59 	bl	8010f38 <__sflush_r>
 8011086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011088:	07da      	lsls	r2, r3, #31
 801108a:	4605      	mov	r5, r0
 801108c:	d4e0      	bmi.n	8011050 <_fflush_r+0xc>
 801108e:	89a3      	ldrh	r3, [r4, #12]
 8011090:	059b      	lsls	r3, r3, #22
 8011092:	d4dd      	bmi.n	8011050 <_fflush_r+0xc>
 8011094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011096:	f000 f908 	bl	80112aa <__retarget_lock_release_recursive>
 801109a:	e7d9      	b.n	8011050 <_fflush_r+0xc>
 801109c:	4b05      	ldr	r3, [pc, #20]	; (80110b4 <_fflush_r+0x70>)
 801109e:	429c      	cmp	r4, r3
 80110a0:	d101      	bne.n	80110a6 <_fflush_r+0x62>
 80110a2:	68ac      	ldr	r4, [r5, #8]
 80110a4:	e7df      	b.n	8011066 <_fflush_r+0x22>
 80110a6:	4b04      	ldr	r3, [pc, #16]	; (80110b8 <_fflush_r+0x74>)
 80110a8:	429c      	cmp	r4, r3
 80110aa:	bf08      	it	eq
 80110ac:	68ec      	ldreq	r4, [r5, #12]
 80110ae:	e7da      	b.n	8011066 <_fflush_r+0x22>
 80110b0:	08011a54 	.word	0x08011a54
 80110b4:	08011a74 	.word	0x08011a74
 80110b8:	08011a34 	.word	0x08011a34

080110bc <std>:
 80110bc:	2300      	movs	r3, #0
 80110be:	b510      	push	{r4, lr}
 80110c0:	4604      	mov	r4, r0
 80110c2:	e9c0 3300 	strd	r3, r3, [r0]
 80110c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80110ca:	6083      	str	r3, [r0, #8]
 80110cc:	8181      	strh	r1, [r0, #12]
 80110ce:	6643      	str	r3, [r0, #100]	; 0x64
 80110d0:	81c2      	strh	r2, [r0, #14]
 80110d2:	6183      	str	r3, [r0, #24]
 80110d4:	4619      	mov	r1, r3
 80110d6:	2208      	movs	r2, #8
 80110d8:	305c      	adds	r0, #92	; 0x5c
 80110da:	f7fd fba7 	bl	800e82c <memset>
 80110de:	4b05      	ldr	r3, [pc, #20]	; (80110f4 <std+0x38>)
 80110e0:	6263      	str	r3, [r4, #36]	; 0x24
 80110e2:	4b05      	ldr	r3, [pc, #20]	; (80110f8 <std+0x3c>)
 80110e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80110e6:	4b05      	ldr	r3, [pc, #20]	; (80110fc <std+0x40>)
 80110e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110ea:	4b05      	ldr	r3, [pc, #20]	; (8011100 <std+0x44>)
 80110ec:	6224      	str	r4, [r4, #32]
 80110ee:	6323      	str	r3, [r4, #48]	; 0x30
 80110f0:	bd10      	pop	{r4, pc}
 80110f2:	bf00      	nop
 80110f4:	0801140d 	.word	0x0801140d
 80110f8:	0801142f 	.word	0x0801142f
 80110fc:	08011467 	.word	0x08011467
 8011100:	0801148b 	.word	0x0801148b

08011104 <_cleanup_r>:
 8011104:	4901      	ldr	r1, [pc, #4]	; (801110c <_cleanup_r+0x8>)
 8011106:	f000 b8af 	b.w	8011268 <_fwalk_reent>
 801110a:	bf00      	nop
 801110c:	08011045 	.word	0x08011045

08011110 <__sfmoreglue>:
 8011110:	b570      	push	{r4, r5, r6, lr}
 8011112:	1e4a      	subs	r2, r1, #1
 8011114:	2568      	movs	r5, #104	; 0x68
 8011116:	4355      	muls	r5, r2
 8011118:	460e      	mov	r6, r1
 801111a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801111e:	f7ff fa87 	bl	8010630 <_malloc_r>
 8011122:	4604      	mov	r4, r0
 8011124:	b140      	cbz	r0, 8011138 <__sfmoreglue+0x28>
 8011126:	2100      	movs	r1, #0
 8011128:	e9c0 1600 	strd	r1, r6, [r0]
 801112c:	300c      	adds	r0, #12
 801112e:	60a0      	str	r0, [r4, #8]
 8011130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011134:	f7fd fb7a 	bl	800e82c <memset>
 8011138:	4620      	mov	r0, r4
 801113a:	bd70      	pop	{r4, r5, r6, pc}

0801113c <__sfp_lock_acquire>:
 801113c:	4801      	ldr	r0, [pc, #4]	; (8011144 <__sfp_lock_acquire+0x8>)
 801113e:	f000 b8b3 	b.w	80112a8 <__retarget_lock_acquire_recursive>
 8011142:	bf00      	nop
 8011144:	20002684 	.word	0x20002684

08011148 <__sfp_lock_release>:
 8011148:	4801      	ldr	r0, [pc, #4]	; (8011150 <__sfp_lock_release+0x8>)
 801114a:	f000 b8ae 	b.w	80112aa <__retarget_lock_release_recursive>
 801114e:	bf00      	nop
 8011150:	20002684 	.word	0x20002684

08011154 <__sinit_lock_acquire>:
 8011154:	4801      	ldr	r0, [pc, #4]	; (801115c <__sinit_lock_acquire+0x8>)
 8011156:	f000 b8a7 	b.w	80112a8 <__retarget_lock_acquire_recursive>
 801115a:	bf00      	nop
 801115c:	2000267f 	.word	0x2000267f

08011160 <__sinit_lock_release>:
 8011160:	4801      	ldr	r0, [pc, #4]	; (8011168 <__sinit_lock_release+0x8>)
 8011162:	f000 b8a2 	b.w	80112aa <__retarget_lock_release_recursive>
 8011166:	bf00      	nop
 8011168:	2000267f 	.word	0x2000267f

0801116c <__sinit>:
 801116c:	b510      	push	{r4, lr}
 801116e:	4604      	mov	r4, r0
 8011170:	f7ff fff0 	bl	8011154 <__sinit_lock_acquire>
 8011174:	69a3      	ldr	r3, [r4, #24]
 8011176:	b11b      	cbz	r3, 8011180 <__sinit+0x14>
 8011178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801117c:	f7ff bff0 	b.w	8011160 <__sinit_lock_release>
 8011180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011184:	6523      	str	r3, [r4, #80]	; 0x50
 8011186:	4b13      	ldr	r3, [pc, #76]	; (80111d4 <__sinit+0x68>)
 8011188:	4a13      	ldr	r2, [pc, #76]	; (80111d8 <__sinit+0x6c>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	62a2      	str	r2, [r4, #40]	; 0x28
 801118e:	42a3      	cmp	r3, r4
 8011190:	bf04      	itt	eq
 8011192:	2301      	moveq	r3, #1
 8011194:	61a3      	streq	r3, [r4, #24]
 8011196:	4620      	mov	r0, r4
 8011198:	f000 f820 	bl	80111dc <__sfp>
 801119c:	6060      	str	r0, [r4, #4]
 801119e:	4620      	mov	r0, r4
 80111a0:	f000 f81c 	bl	80111dc <__sfp>
 80111a4:	60a0      	str	r0, [r4, #8]
 80111a6:	4620      	mov	r0, r4
 80111a8:	f000 f818 	bl	80111dc <__sfp>
 80111ac:	2200      	movs	r2, #0
 80111ae:	60e0      	str	r0, [r4, #12]
 80111b0:	2104      	movs	r1, #4
 80111b2:	6860      	ldr	r0, [r4, #4]
 80111b4:	f7ff ff82 	bl	80110bc <std>
 80111b8:	68a0      	ldr	r0, [r4, #8]
 80111ba:	2201      	movs	r2, #1
 80111bc:	2109      	movs	r1, #9
 80111be:	f7ff ff7d 	bl	80110bc <std>
 80111c2:	68e0      	ldr	r0, [r4, #12]
 80111c4:	2202      	movs	r2, #2
 80111c6:	2112      	movs	r1, #18
 80111c8:	f7ff ff78 	bl	80110bc <std>
 80111cc:	2301      	movs	r3, #1
 80111ce:	61a3      	str	r3, [r4, #24]
 80111d0:	e7d2      	b.n	8011178 <__sinit+0xc>
 80111d2:	bf00      	nop
 80111d4:	080116b4 	.word	0x080116b4
 80111d8:	08011105 	.word	0x08011105

080111dc <__sfp>:
 80111dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111de:	4607      	mov	r7, r0
 80111e0:	f7ff ffac 	bl	801113c <__sfp_lock_acquire>
 80111e4:	4b1e      	ldr	r3, [pc, #120]	; (8011260 <__sfp+0x84>)
 80111e6:	681e      	ldr	r6, [r3, #0]
 80111e8:	69b3      	ldr	r3, [r6, #24]
 80111ea:	b913      	cbnz	r3, 80111f2 <__sfp+0x16>
 80111ec:	4630      	mov	r0, r6
 80111ee:	f7ff ffbd 	bl	801116c <__sinit>
 80111f2:	3648      	adds	r6, #72	; 0x48
 80111f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80111f8:	3b01      	subs	r3, #1
 80111fa:	d503      	bpl.n	8011204 <__sfp+0x28>
 80111fc:	6833      	ldr	r3, [r6, #0]
 80111fe:	b30b      	cbz	r3, 8011244 <__sfp+0x68>
 8011200:	6836      	ldr	r6, [r6, #0]
 8011202:	e7f7      	b.n	80111f4 <__sfp+0x18>
 8011204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011208:	b9d5      	cbnz	r5, 8011240 <__sfp+0x64>
 801120a:	4b16      	ldr	r3, [pc, #88]	; (8011264 <__sfp+0x88>)
 801120c:	60e3      	str	r3, [r4, #12]
 801120e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011212:	6665      	str	r5, [r4, #100]	; 0x64
 8011214:	f000 f847 	bl	80112a6 <__retarget_lock_init_recursive>
 8011218:	f7ff ff96 	bl	8011148 <__sfp_lock_release>
 801121c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011224:	6025      	str	r5, [r4, #0]
 8011226:	61a5      	str	r5, [r4, #24]
 8011228:	2208      	movs	r2, #8
 801122a:	4629      	mov	r1, r5
 801122c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011230:	f7fd fafc 	bl	800e82c <memset>
 8011234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801123c:	4620      	mov	r0, r4
 801123e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011240:	3468      	adds	r4, #104	; 0x68
 8011242:	e7d9      	b.n	80111f8 <__sfp+0x1c>
 8011244:	2104      	movs	r1, #4
 8011246:	4638      	mov	r0, r7
 8011248:	f7ff ff62 	bl	8011110 <__sfmoreglue>
 801124c:	4604      	mov	r4, r0
 801124e:	6030      	str	r0, [r6, #0]
 8011250:	2800      	cmp	r0, #0
 8011252:	d1d5      	bne.n	8011200 <__sfp+0x24>
 8011254:	f7ff ff78 	bl	8011148 <__sfp_lock_release>
 8011258:	230c      	movs	r3, #12
 801125a:	603b      	str	r3, [r7, #0]
 801125c:	e7ee      	b.n	801123c <__sfp+0x60>
 801125e:	bf00      	nop
 8011260:	080116b4 	.word	0x080116b4
 8011264:	ffff0001 	.word	0xffff0001

08011268 <_fwalk_reent>:
 8011268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801126c:	4606      	mov	r6, r0
 801126e:	4688      	mov	r8, r1
 8011270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011274:	2700      	movs	r7, #0
 8011276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801127a:	f1b9 0901 	subs.w	r9, r9, #1
 801127e:	d505      	bpl.n	801128c <_fwalk_reent+0x24>
 8011280:	6824      	ldr	r4, [r4, #0]
 8011282:	2c00      	cmp	r4, #0
 8011284:	d1f7      	bne.n	8011276 <_fwalk_reent+0xe>
 8011286:	4638      	mov	r0, r7
 8011288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801128c:	89ab      	ldrh	r3, [r5, #12]
 801128e:	2b01      	cmp	r3, #1
 8011290:	d907      	bls.n	80112a2 <_fwalk_reent+0x3a>
 8011292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011296:	3301      	adds	r3, #1
 8011298:	d003      	beq.n	80112a2 <_fwalk_reent+0x3a>
 801129a:	4629      	mov	r1, r5
 801129c:	4630      	mov	r0, r6
 801129e:	47c0      	blx	r8
 80112a0:	4307      	orrs	r7, r0
 80112a2:	3568      	adds	r5, #104	; 0x68
 80112a4:	e7e9      	b.n	801127a <_fwalk_reent+0x12>

080112a6 <__retarget_lock_init_recursive>:
 80112a6:	4770      	bx	lr

080112a8 <__retarget_lock_acquire_recursive>:
 80112a8:	4770      	bx	lr

080112aa <__retarget_lock_release_recursive>:
 80112aa:	4770      	bx	lr

080112ac <__swhatbuf_r>:
 80112ac:	b570      	push	{r4, r5, r6, lr}
 80112ae:	460e      	mov	r6, r1
 80112b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b4:	2900      	cmp	r1, #0
 80112b6:	b096      	sub	sp, #88	; 0x58
 80112b8:	4614      	mov	r4, r2
 80112ba:	461d      	mov	r5, r3
 80112bc:	da07      	bge.n	80112ce <__swhatbuf_r+0x22>
 80112be:	2300      	movs	r3, #0
 80112c0:	602b      	str	r3, [r5, #0]
 80112c2:	89b3      	ldrh	r3, [r6, #12]
 80112c4:	061a      	lsls	r2, r3, #24
 80112c6:	d410      	bmi.n	80112ea <__swhatbuf_r+0x3e>
 80112c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112cc:	e00e      	b.n	80112ec <__swhatbuf_r+0x40>
 80112ce:	466a      	mov	r2, sp
 80112d0:	f000 f902 	bl	80114d8 <_fstat_r>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	dbf2      	blt.n	80112be <__swhatbuf_r+0x12>
 80112d8:	9a01      	ldr	r2, [sp, #4]
 80112da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80112de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80112e2:	425a      	negs	r2, r3
 80112e4:	415a      	adcs	r2, r3
 80112e6:	602a      	str	r2, [r5, #0]
 80112e8:	e7ee      	b.n	80112c8 <__swhatbuf_r+0x1c>
 80112ea:	2340      	movs	r3, #64	; 0x40
 80112ec:	2000      	movs	r0, #0
 80112ee:	6023      	str	r3, [r4, #0]
 80112f0:	b016      	add	sp, #88	; 0x58
 80112f2:	bd70      	pop	{r4, r5, r6, pc}

080112f4 <__smakebuf_r>:
 80112f4:	898b      	ldrh	r3, [r1, #12]
 80112f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112f8:	079d      	lsls	r5, r3, #30
 80112fa:	4606      	mov	r6, r0
 80112fc:	460c      	mov	r4, r1
 80112fe:	d507      	bpl.n	8011310 <__smakebuf_r+0x1c>
 8011300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011304:	6023      	str	r3, [r4, #0]
 8011306:	6123      	str	r3, [r4, #16]
 8011308:	2301      	movs	r3, #1
 801130a:	6163      	str	r3, [r4, #20]
 801130c:	b002      	add	sp, #8
 801130e:	bd70      	pop	{r4, r5, r6, pc}
 8011310:	ab01      	add	r3, sp, #4
 8011312:	466a      	mov	r2, sp
 8011314:	f7ff ffca 	bl	80112ac <__swhatbuf_r>
 8011318:	9900      	ldr	r1, [sp, #0]
 801131a:	4605      	mov	r5, r0
 801131c:	4630      	mov	r0, r6
 801131e:	f7ff f987 	bl	8010630 <_malloc_r>
 8011322:	b948      	cbnz	r0, 8011338 <__smakebuf_r+0x44>
 8011324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011328:	059a      	lsls	r2, r3, #22
 801132a:	d4ef      	bmi.n	801130c <__smakebuf_r+0x18>
 801132c:	f023 0303 	bic.w	r3, r3, #3
 8011330:	f043 0302 	orr.w	r3, r3, #2
 8011334:	81a3      	strh	r3, [r4, #12]
 8011336:	e7e3      	b.n	8011300 <__smakebuf_r+0xc>
 8011338:	4b0d      	ldr	r3, [pc, #52]	; (8011370 <__smakebuf_r+0x7c>)
 801133a:	62b3      	str	r3, [r6, #40]	; 0x28
 801133c:	89a3      	ldrh	r3, [r4, #12]
 801133e:	6020      	str	r0, [r4, #0]
 8011340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011344:	81a3      	strh	r3, [r4, #12]
 8011346:	9b00      	ldr	r3, [sp, #0]
 8011348:	6163      	str	r3, [r4, #20]
 801134a:	9b01      	ldr	r3, [sp, #4]
 801134c:	6120      	str	r0, [r4, #16]
 801134e:	b15b      	cbz	r3, 8011368 <__smakebuf_r+0x74>
 8011350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011354:	4630      	mov	r0, r6
 8011356:	f000 f8d1 	bl	80114fc <_isatty_r>
 801135a:	b128      	cbz	r0, 8011368 <__smakebuf_r+0x74>
 801135c:	89a3      	ldrh	r3, [r4, #12]
 801135e:	f023 0303 	bic.w	r3, r3, #3
 8011362:	f043 0301 	orr.w	r3, r3, #1
 8011366:	81a3      	strh	r3, [r4, #12]
 8011368:	89a0      	ldrh	r0, [r4, #12]
 801136a:	4305      	orrs	r5, r0
 801136c:	81a5      	strh	r5, [r4, #12]
 801136e:	e7cd      	b.n	801130c <__smakebuf_r+0x18>
 8011370:	08011105 	.word	0x08011105

08011374 <_malloc_usable_size_r>:
 8011374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011378:	1f18      	subs	r0, r3, #4
 801137a:	2b00      	cmp	r3, #0
 801137c:	bfbc      	itt	lt
 801137e:	580b      	ldrlt	r3, [r1, r0]
 8011380:	18c0      	addlt	r0, r0, r3
 8011382:	4770      	bx	lr

08011384 <_raise_r>:
 8011384:	291f      	cmp	r1, #31
 8011386:	b538      	push	{r3, r4, r5, lr}
 8011388:	4604      	mov	r4, r0
 801138a:	460d      	mov	r5, r1
 801138c:	d904      	bls.n	8011398 <_raise_r+0x14>
 801138e:	2316      	movs	r3, #22
 8011390:	6003      	str	r3, [r0, #0]
 8011392:	f04f 30ff 	mov.w	r0, #4294967295
 8011396:	bd38      	pop	{r3, r4, r5, pc}
 8011398:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801139a:	b112      	cbz	r2, 80113a2 <_raise_r+0x1e>
 801139c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113a0:	b94b      	cbnz	r3, 80113b6 <_raise_r+0x32>
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 f830 	bl	8011408 <_getpid_r>
 80113a8:	462a      	mov	r2, r5
 80113aa:	4601      	mov	r1, r0
 80113ac:	4620      	mov	r0, r4
 80113ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113b2:	f000 b817 	b.w	80113e4 <_kill_r>
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d00a      	beq.n	80113d0 <_raise_r+0x4c>
 80113ba:	1c59      	adds	r1, r3, #1
 80113bc:	d103      	bne.n	80113c6 <_raise_r+0x42>
 80113be:	2316      	movs	r3, #22
 80113c0:	6003      	str	r3, [r0, #0]
 80113c2:	2001      	movs	r0, #1
 80113c4:	e7e7      	b.n	8011396 <_raise_r+0x12>
 80113c6:	2400      	movs	r4, #0
 80113c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113cc:	4628      	mov	r0, r5
 80113ce:	4798      	blx	r3
 80113d0:	2000      	movs	r0, #0
 80113d2:	e7e0      	b.n	8011396 <_raise_r+0x12>

080113d4 <raise>:
 80113d4:	4b02      	ldr	r3, [pc, #8]	; (80113e0 <raise+0xc>)
 80113d6:	4601      	mov	r1, r0
 80113d8:	6818      	ldr	r0, [r3, #0]
 80113da:	f7ff bfd3 	b.w	8011384 <_raise_r>
 80113de:	bf00      	nop
 80113e0:	20000180 	.word	0x20000180

080113e4 <_kill_r>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	4d07      	ldr	r5, [pc, #28]	; (8011404 <_kill_r+0x20>)
 80113e8:	2300      	movs	r3, #0
 80113ea:	4604      	mov	r4, r0
 80113ec:	4608      	mov	r0, r1
 80113ee:	4611      	mov	r1, r2
 80113f0:	602b      	str	r3, [r5, #0]
 80113f2:	f000 f8d7 	bl	80115a4 <_kill>
 80113f6:	1c43      	adds	r3, r0, #1
 80113f8:	d102      	bne.n	8011400 <_kill_r+0x1c>
 80113fa:	682b      	ldr	r3, [r5, #0]
 80113fc:	b103      	cbz	r3, 8011400 <_kill_r+0x1c>
 80113fe:	6023      	str	r3, [r4, #0]
 8011400:	bd38      	pop	{r3, r4, r5, pc}
 8011402:	bf00      	nop
 8011404:	20002678 	.word	0x20002678

08011408 <_getpid_r>:
 8011408:	f000 b8bc 	b.w	8011584 <_getpid>

0801140c <__sread>:
 801140c:	b510      	push	{r4, lr}
 801140e:	460c      	mov	r4, r1
 8011410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011414:	f000 f894 	bl	8011540 <_read_r>
 8011418:	2800      	cmp	r0, #0
 801141a:	bfab      	itete	ge
 801141c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801141e:	89a3      	ldrhlt	r3, [r4, #12]
 8011420:	181b      	addge	r3, r3, r0
 8011422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011426:	bfac      	ite	ge
 8011428:	6563      	strge	r3, [r4, #84]	; 0x54
 801142a:	81a3      	strhlt	r3, [r4, #12]
 801142c:	bd10      	pop	{r4, pc}

0801142e <__swrite>:
 801142e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011432:	461f      	mov	r7, r3
 8011434:	898b      	ldrh	r3, [r1, #12]
 8011436:	05db      	lsls	r3, r3, #23
 8011438:	4605      	mov	r5, r0
 801143a:	460c      	mov	r4, r1
 801143c:	4616      	mov	r6, r2
 801143e:	d505      	bpl.n	801144c <__swrite+0x1e>
 8011440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011444:	2302      	movs	r3, #2
 8011446:	2200      	movs	r2, #0
 8011448:	f000 f868 	bl	801151c <_lseek_r>
 801144c:	89a3      	ldrh	r3, [r4, #12]
 801144e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011456:	81a3      	strh	r3, [r4, #12]
 8011458:	4632      	mov	r2, r6
 801145a:	463b      	mov	r3, r7
 801145c:	4628      	mov	r0, r5
 801145e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011462:	f000 b817 	b.w	8011494 <_write_r>

08011466 <__sseek>:
 8011466:	b510      	push	{r4, lr}
 8011468:	460c      	mov	r4, r1
 801146a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801146e:	f000 f855 	bl	801151c <_lseek_r>
 8011472:	1c43      	adds	r3, r0, #1
 8011474:	89a3      	ldrh	r3, [r4, #12]
 8011476:	bf15      	itete	ne
 8011478:	6560      	strne	r0, [r4, #84]	; 0x54
 801147a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801147e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011482:	81a3      	strheq	r3, [r4, #12]
 8011484:	bf18      	it	ne
 8011486:	81a3      	strhne	r3, [r4, #12]
 8011488:	bd10      	pop	{r4, pc}

0801148a <__sclose>:
 801148a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801148e:	f000 b813 	b.w	80114b8 <_close_r>
	...

08011494 <_write_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d07      	ldr	r5, [pc, #28]	; (80114b4 <_write_r+0x20>)
 8011498:	4604      	mov	r4, r0
 801149a:	4608      	mov	r0, r1
 801149c:	4611      	mov	r1, r2
 801149e:	2200      	movs	r2, #0
 80114a0:	602a      	str	r2, [r5, #0]
 80114a2:	461a      	mov	r2, r3
 80114a4:	f000 f8a4 	bl	80115f0 <_write>
 80114a8:	1c43      	adds	r3, r0, #1
 80114aa:	d102      	bne.n	80114b2 <_write_r+0x1e>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	b103      	cbz	r3, 80114b2 <_write_r+0x1e>
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	bd38      	pop	{r3, r4, r5, pc}
 80114b4:	20002678 	.word	0x20002678

080114b8 <_close_r>:
 80114b8:	b538      	push	{r3, r4, r5, lr}
 80114ba:	4d06      	ldr	r5, [pc, #24]	; (80114d4 <_close_r+0x1c>)
 80114bc:	2300      	movs	r3, #0
 80114be:	4604      	mov	r4, r0
 80114c0:	4608      	mov	r0, r1
 80114c2:	602b      	str	r3, [r5, #0]
 80114c4:	f000 f84e 	bl	8011564 <_close>
 80114c8:	1c43      	adds	r3, r0, #1
 80114ca:	d102      	bne.n	80114d2 <_close_r+0x1a>
 80114cc:	682b      	ldr	r3, [r5, #0]
 80114ce:	b103      	cbz	r3, 80114d2 <_close_r+0x1a>
 80114d0:	6023      	str	r3, [r4, #0]
 80114d2:	bd38      	pop	{r3, r4, r5, pc}
 80114d4:	20002678 	.word	0x20002678

080114d8 <_fstat_r>:
 80114d8:	b538      	push	{r3, r4, r5, lr}
 80114da:	4d07      	ldr	r5, [pc, #28]	; (80114f8 <_fstat_r+0x20>)
 80114dc:	2300      	movs	r3, #0
 80114de:	4604      	mov	r4, r0
 80114e0:	4608      	mov	r0, r1
 80114e2:	4611      	mov	r1, r2
 80114e4:	602b      	str	r3, [r5, #0]
 80114e6:	f000 f845 	bl	8011574 <_fstat>
 80114ea:	1c43      	adds	r3, r0, #1
 80114ec:	d102      	bne.n	80114f4 <_fstat_r+0x1c>
 80114ee:	682b      	ldr	r3, [r5, #0]
 80114f0:	b103      	cbz	r3, 80114f4 <_fstat_r+0x1c>
 80114f2:	6023      	str	r3, [r4, #0]
 80114f4:	bd38      	pop	{r3, r4, r5, pc}
 80114f6:	bf00      	nop
 80114f8:	20002678 	.word	0x20002678

080114fc <_isatty_r>:
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	4d06      	ldr	r5, [pc, #24]	; (8011518 <_isatty_r+0x1c>)
 8011500:	2300      	movs	r3, #0
 8011502:	4604      	mov	r4, r0
 8011504:	4608      	mov	r0, r1
 8011506:	602b      	str	r3, [r5, #0]
 8011508:	f000 f844 	bl	8011594 <_isatty>
 801150c:	1c43      	adds	r3, r0, #1
 801150e:	d102      	bne.n	8011516 <_isatty_r+0x1a>
 8011510:	682b      	ldr	r3, [r5, #0]
 8011512:	b103      	cbz	r3, 8011516 <_isatty_r+0x1a>
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	bd38      	pop	{r3, r4, r5, pc}
 8011518:	20002678 	.word	0x20002678

0801151c <_lseek_r>:
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	4d07      	ldr	r5, [pc, #28]	; (801153c <_lseek_r+0x20>)
 8011520:	4604      	mov	r4, r0
 8011522:	4608      	mov	r0, r1
 8011524:	4611      	mov	r1, r2
 8011526:	2200      	movs	r2, #0
 8011528:	602a      	str	r2, [r5, #0]
 801152a:	461a      	mov	r2, r3
 801152c:	f000 f842 	bl	80115b4 <_lseek>
 8011530:	1c43      	adds	r3, r0, #1
 8011532:	d102      	bne.n	801153a <_lseek_r+0x1e>
 8011534:	682b      	ldr	r3, [r5, #0]
 8011536:	b103      	cbz	r3, 801153a <_lseek_r+0x1e>
 8011538:	6023      	str	r3, [r4, #0]
 801153a:	bd38      	pop	{r3, r4, r5, pc}
 801153c:	20002678 	.word	0x20002678

08011540 <_read_r>:
 8011540:	b538      	push	{r3, r4, r5, lr}
 8011542:	4d07      	ldr	r5, [pc, #28]	; (8011560 <_read_r+0x20>)
 8011544:	4604      	mov	r4, r0
 8011546:	4608      	mov	r0, r1
 8011548:	4611      	mov	r1, r2
 801154a:	2200      	movs	r2, #0
 801154c:	602a      	str	r2, [r5, #0]
 801154e:	461a      	mov	r2, r3
 8011550:	f000 f838 	bl	80115c4 <_read>
 8011554:	1c43      	adds	r3, r0, #1
 8011556:	d102      	bne.n	801155e <_read_r+0x1e>
 8011558:	682b      	ldr	r3, [r5, #0]
 801155a:	b103      	cbz	r3, 801155e <_read_r+0x1e>
 801155c:	6023      	str	r3, [r4, #0]
 801155e:	bd38      	pop	{r3, r4, r5, pc}
 8011560:	20002678 	.word	0x20002678

08011564 <_close>:
 8011564:	4b02      	ldr	r3, [pc, #8]	; (8011570 <_close+0xc>)
 8011566:	2258      	movs	r2, #88	; 0x58
 8011568:	601a      	str	r2, [r3, #0]
 801156a:	f04f 30ff 	mov.w	r0, #4294967295
 801156e:	4770      	bx	lr
 8011570:	20002678 	.word	0x20002678

08011574 <_fstat>:
 8011574:	4b02      	ldr	r3, [pc, #8]	; (8011580 <_fstat+0xc>)
 8011576:	2258      	movs	r2, #88	; 0x58
 8011578:	601a      	str	r2, [r3, #0]
 801157a:	f04f 30ff 	mov.w	r0, #4294967295
 801157e:	4770      	bx	lr
 8011580:	20002678 	.word	0x20002678

08011584 <_getpid>:
 8011584:	4b02      	ldr	r3, [pc, #8]	; (8011590 <_getpid+0xc>)
 8011586:	2258      	movs	r2, #88	; 0x58
 8011588:	601a      	str	r2, [r3, #0]
 801158a:	f04f 30ff 	mov.w	r0, #4294967295
 801158e:	4770      	bx	lr
 8011590:	20002678 	.word	0x20002678

08011594 <_isatty>:
 8011594:	4b02      	ldr	r3, [pc, #8]	; (80115a0 <_isatty+0xc>)
 8011596:	2258      	movs	r2, #88	; 0x58
 8011598:	601a      	str	r2, [r3, #0]
 801159a:	2000      	movs	r0, #0
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	20002678 	.word	0x20002678

080115a4 <_kill>:
 80115a4:	4b02      	ldr	r3, [pc, #8]	; (80115b0 <_kill+0xc>)
 80115a6:	2258      	movs	r2, #88	; 0x58
 80115a8:	601a      	str	r2, [r3, #0]
 80115aa:	f04f 30ff 	mov.w	r0, #4294967295
 80115ae:	4770      	bx	lr
 80115b0:	20002678 	.word	0x20002678

080115b4 <_lseek>:
 80115b4:	4b02      	ldr	r3, [pc, #8]	; (80115c0 <_lseek+0xc>)
 80115b6:	2258      	movs	r2, #88	; 0x58
 80115b8:	601a      	str	r2, [r3, #0]
 80115ba:	f04f 30ff 	mov.w	r0, #4294967295
 80115be:	4770      	bx	lr
 80115c0:	20002678 	.word	0x20002678

080115c4 <_read>:
 80115c4:	4b02      	ldr	r3, [pc, #8]	; (80115d0 <_read+0xc>)
 80115c6:	2258      	movs	r2, #88	; 0x58
 80115c8:	601a      	str	r2, [r3, #0]
 80115ca:	f04f 30ff 	mov.w	r0, #4294967295
 80115ce:	4770      	bx	lr
 80115d0:	20002678 	.word	0x20002678

080115d4 <_sbrk>:
 80115d4:	4b04      	ldr	r3, [pc, #16]	; (80115e8 <_sbrk+0x14>)
 80115d6:	6819      	ldr	r1, [r3, #0]
 80115d8:	4602      	mov	r2, r0
 80115da:	b909      	cbnz	r1, 80115e0 <_sbrk+0xc>
 80115dc:	4903      	ldr	r1, [pc, #12]	; (80115ec <_sbrk+0x18>)
 80115de:	6019      	str	r1, [r3, #0]
 80115e0:	6818      	ldr	r0, [r3, #0]
 80115e2:	4402      	add	r2, r0
 80115e4:	601a      	str	r2, [r3, #0]
 80115e6:	4770      	bx	lr
 80115e8:	20000a28 	.word	0x20000a28
 80115ec:	20002688 	.word	0x20002688

080115f0 <_write>:
 80115f0:	4b02      	ldr	r3, [pc, #8]	; (80115fc <_write+0xc>)
 80115f2:	2258      	movs	r2, #88	; 0x58
 80115f4:	601a      	str	r2, [r3, #0]
 80115f6:	f04f 30ff 	mov.w	r0, #4294967295
 80115fa:	4770      	bx	lr
 80115fc:	20002678 	.word	0x20002678

08011600 <_exit>:
 8011600:	e7fe      	b.n	8011600 <_exit>
	...

08011604 <_init>:
 8011604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011606:	bf00      	nop
 8011608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801160a:	bc08      	pop	{r3}
 801160c:	469e      	mov	lr, r3
 801160e:	4770      	bx	lr

08011610 <_fini>:
 8011610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011612:	bf00      	nop
 8011614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011616:	bc08      	pop	{r3}
 8011618:	469e      	mov	lr, r3
 801161a:	4770      	bx	lr
